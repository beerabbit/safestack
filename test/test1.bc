; ModuleID = '<stdin>'
source_filename = "test.c"
target datalayout = "e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64"
target triple = "thumbv7em-none-unknown-eabihf"

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone
define dso_local i32 @a() #0 {
  %1 = alloca i32, align 4
  call void asm sideeffect "a_0_FORPUSH:;movw lr, 0;movt lr, 0x080C;push {lr}", ""()
  %2 = call i32 @b(i32 noundef 1, i32 noundef 2, i32 noundef 3, i32 noundef 4, i32 noundef 5)
  store i32 %2, ptr %1, align 4
  call void asm sideeffect "a_4_FORPUSH:;movw lr, 12;movt lr, 0x080C;push {lr}", ""()
  call void @c()
  call void asm sideeffect "a_8_FORPUSH:;movw lr, 24;movt lr, 0x080C;push {lr}", ""()
  %3 = call i32 @b(i32 noundef 1, i32 noundef 2, i32 noundef 3, i32 noundef 4, i32 noundef 6)
  store i32 %3, ptr %1, align 4
  %4 = load i32, ptr %1, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone
define dso_local i32 @b(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i32 noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 %0, ptr %6, align 4
  store i32 %1, ptr %7, align 4
  store i32 %2, ptr %8, align 4
  store i32 %3, ptr %9, align 4
  store i32 %4, ptr %10, align 4
  %12 = load i32, ptr %6, align 4
  %13 = load i32, ptr %7, align 4
  %14 = add nsw i32 %12, %13
  %15 = load i32, ptr %8, align 4
  %16 = add nsw i32 %14, %15
  %17 = load i32, ptr %9, align 4
  %18 = add nsw i32 %16, %17
  %19 = load i32, ptr %10, align 4
  %20 = add nsw i32 %18, %19
  store i32 %20, ptr %11, align 4
  call void asm sideeffect "b_12_FORPUSH:;movw lr, 36;movt lr, 0x080C;push {lr}", ""()
  call void @c()
  %21 = load i32, ptr %11, align 4
  ret i32 %21
}

; Function Attrs: noinline nounwind optnone
define dso_local void @c() #0 {
  %1 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 {
  call void asm sideeffect "ldr r0 , =0x20010000; ldr r1, =0x20010004; str r1, [r0]", ""()
  %1 = alloca i32, align 4
  call void asm sideeffect "main_16_FORPUSH:;movw lr, 48;movt lr, 0x080C;push {lr}", ""()
  %2 = call i32 @a()
  store i32 %2, ptr %1, align 4
  %3 = load i32, ptr %1, align 4
  %4 = call i32 (ptr, ...) @printf(ptr noundef @.str, i32 noundef %3)
  ret i32 0
}

declare dso_local i32 @printf(ptr noundef, ...) #1

define void @MasterForward() {
MasterForward_:
  call void asm sideeffect "PUSH {r0 - r3};            ldr r0, [sp, #16];            ldr r1, [r0];            cmp r1, lr;            BNE fail;            ldr r1, =0x20010000;            ldr r2, [r1];            str r0, [r2];            add r2, r2, #4;            str r2, [r1];            pop {r0 -r3, lr};            add lr, lr, 4;            ldr lr, [lr];            BX LR;            fail:", ""()
  ret void
}

define void @MasterBackward() {
MasterBackward_:
  call void asm sideeffect "ldr r1, =0x20010000;            ldr r2, [r1];            sub r2, r2, 4;            ldr r3, [r2];            add r3, r3, #8;            ldr r3, [r3];            cmp r3, lr;            BNE fail_back;            ldr r3, [r2];            ldr lr, [r3];            str r2, [r1];            bx lr;            fail_back:", ""()
  ret void
}

attributes #0 = { noinline nounwind optnone "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="cortex-m4" "target-features"="+armv7e-m,+dsp,+fp16,+hwdiv,+strict-align,+thumb-mode,+vfp2sp,+vfp3d16sp,+vfp4d16sp,-aes,-bf16,-cdecp0,-cdecp1,-cdecp2,-cdecp3,-cdecp4,-cdecp5,-cdecp6,-cdecp7,-crc,-crypto,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16fml,-fp64,-fullfp16,-hwdiv-arm,-i8mm,-lob,-mve,-mve.fp,-neon,-pacbti,-ras,-sb,-sha2,-vfp2,-vfp3,-vfp3d16,-vfp3sp,-vfp4,-vfp4d16,-vfp4sp" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="cortex-m4" "target-features"="+armv7e-m,+dsp,+fp16,+hwdiv,+strict-align,+thumb-mode,+vfp2sp,+vfp3d16sp,+vfp4d16sp,-aes,-bf16,-cdecp0,-cdecp1,-cdecp2,-cdecp3,-cdecp4,-cdecp5,-cdecp6,-cdecp7,-crc,-crypto,-d32,-dotprod,-fp-armv8,-fp-armv8d16,-fp-armv8d16sp,-fp-armv8sp,-fp16fml,-fp64,-fullfp16,-hwdiv-arm,-i8mm,-lob,-mve,-mve.fp,-neon,-pacbti,-ras,-sb,-sha2,-vfp2,-vfp3,-vfp3d16,-vfp3sp,-vfp4,-vfp4d16,-vfp4sp" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"min_enum_size", i32 4}
!2 = !{i32 7, !"frame-pointer", i32 2}
!3 = !{!"clang version 18.0.0 (https://github.com/beerabbit/safestack.git f70f7242ad3dc55fc7dd91601ac39ce3e54a1096)"}
