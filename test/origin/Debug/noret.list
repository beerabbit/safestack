
noret.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c48  0800a368  0800a368  0001a368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afb0  0800afb0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800afb0  0800afb0  0001afb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800afb8  0800afb8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afb8  0800afb8  0001afb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afbc  0800afbc  0001afbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800afc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000860  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008f0  200008f0  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000034  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .comment      0000009e  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 14 .debug_line   000193a4  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   000263df  00000000  00000000  00039506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006a68  00000000  00000000  0005f8e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001658  00000000  00000000  00066350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cec2d  00000000  00000000  000679a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00001550  00000000  00000000  001365d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000236a3  00000000  00000000  00137b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000054f8  00000000  00000000  0015b1cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00004e42  00000000  00000000  001606c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <deregister_tm_clones>:
 8000190:	4803      	ldr	r0, [pc, #12]	; (80001a0 <deregister_tm_clones+0x10>)
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <deregister_tm_clones+0x14>)
 8000194:	4283      	cmp	r3, r0
 8000196:	d002      	beq.n	800019e <deregister_tm_clones+0xe>
 8000198:	4b03      	ldr	r3, [pc, #12]	; (80001a8 <deregister_tm_clones+0x18>)
 800019a:	b103      	cbz	r3, 800019e <deregister_tm_clones+0xe>
 800019c:	4718      	bx	r3
 800019e:	4770      	bx	lr
 80001a0:	20000090 	.word	0x20000090
 80001a4:	20000090 	.word	0x20000090
 80001a8:	00000000 	.word	0x00000000

080001ac <register_tm_clones>:
 80001ac:	4805      	ldr	r0, [pc, #20]	; (80001c4 <register_tm_clones+0x18>)
 80001ae:	4906      	ldr	r1, [pc, #24]	; (80001c8 <register_tm_clones+0x1c>)
 80001b0:	1a0b      	subs	r3, r1, r0
 80001b2:	0fd9      	lsrs	r1, r3, #31
 80001b4:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001b8:	1049      	asrs	r1, r1, #1
 80001ba:	d002      	beq.n	80001c2 <register_tm_clones+0x16>
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <register_tm_clones+0x20>)
 80001be:	b103      	cbz	r3, 80001c2 <register_tm_clones+0x16>
 80001c0:	4718      	bx	r3
 80001c2:	4770      	bx	lr
 80001c4:	20000090 	.word	0x20000090
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c06      	ldr	r4, [pc, #24]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b943      	cbnz	r3, 80001ea <__do_global_dtors_aux+0x1a>
 80001d8:	f7ff ffda 	bl	8000190 <deregister_tm_clones>
 80001dc:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	b113      	cbz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001e0:	4804      	ldr	r0, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x24>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	2301      	movs	r3, #1
 80001e8:	7023      	strb	r3, [r4, #0]
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000090 	.word	0x20000090
 80001f0:	00000000 	.word	0x00000000
 80001f4:	0800a350 	.word	0x0800a350

080001f8 <frame_dummy>:
 80001f8:	b508      	push	{r3, lr}
 80001fa:	4b04      	ldr	r3, [pc, #16]	; (800020c <frame_dummy+0x14>)
 80001fc:	b11b      	cbz	r3, 8000206 <frame_dummy+0xe>
 80001fe:	4904      	ldr	r1, [pc, #16]	; (8000210 <frame_dummy+0x18>)
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <frame_dummy+0x1c>)
 8000202:	f3af 8000 	nop.w
 8000206:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800020a:	e7cf      	b.n	80001ac <register_tm_clones>
 800020c:	00000000 	.word	0x00000000
 8000210:	20000094 	.word	0x20000094
 8000214:	0800a350 	.word	0x0800a350

08000218 <fir_filter_int>:
 8000218:	b08e      	sub	sp, #56	; 0x38
 800021a:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800021e:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
 8000222:	900d      	str	r0, [sp, #52]	; 0x34
 8000224:	910c      	str	r1, [sp, #48]	; 0x30
 8000226:	920b      	str	r2, [sp, #44]	; 0x2c
 8000228:	930a      	str	r3, [sp, #40]	; 0x28
 800022a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800022c:	9002      	str	r0, [sp, #8]
 800022e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000230:	3001      	adds	r0, #1
 8000232:	1040      	asrs	r0, r0, #1
 8000234:	9007      	str	r0, [sp, #28]
 8000236:	980d      	ldr	r0, [sp, #52]	; 0x34
 8000238:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800023a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800023e:	3804      	subs	r0, #4
 8000240:	9000      	str	r0, [sp, #0]
 8000242:	980d      	ldr	r0, [sp, #52]	; 0x34
 8000244:	9907      	ldr	r1, [sp, #28]
 8000246:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800024a:	3804      	subs	r0, #4
 800024c:	9004      	str	r0, [sp, #16]
 800024e:	9807      	ldr	r0, [sp, #28]
 8000250:	9006      	str	r0, [sp, #24]
 8000252:	2000      	movs	r0, #0
 8000254:	9009      	str	r0, [sp, #36]	; 0x24
 8000256:	e7ff      	b.n	8000258 <fir_filter_int+0x40>
 8000258:	9809      	ldr	r0, [sp, #36]	; 0x24
 800025a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800025c:	4288      	cmp	r0, r1
 800025e:	da4d      	bge.n	80002fc <fir_filter_int+0xe4>
 8000260:	e7ff      	b.n	8000262 <fir_filter_int+0x4a>
 8000262:	9804      	ldr	r0, [sp, #16]
 8000264:	9003      	str	r0, [sp, #12]
 8000266:	9802      	ldr	r0, [sp, #8]
 8000268:	9001      	str	r0, [sp, #4]
 800026a:	9801      	ldr	r0, [sp, #4]
 800026c:	1d01      	adds	r1, r0, #4
 800026e:	9101      	str	r1, [sp, #4]
 8000270:	6800      	ldr	r0, [r0, #0]
 8000272:	9903      	ldr	r1, [sp, #12]
 8000274:	1f0a      	subs	r2, r1, #4
 8000276:	9203      	str	r2, [sp, #12]
 8000278:	6809      	ldr	r1, [r1, #0]
 800027a:	4348      	muls	r0, r1
 800027c:	9005      	str	r0, [sp, #20]
 800027e:	2001      	movs	r0, #1
 8000280:	9008      	str	r0, [sp, #32]
 8000282:	e7ff      	b.n	8000284 <fir_filter_int+0x6c>
 8000284:	9808      	ldr	r0, [sp, #32]
 8000286:	9906      	ldr	r1, [sp, #24]
 8000288:	4288      	cmp	r0, r1
 800028a:	da11      	bge.n	80002b0 <fir_filter_int+0x98>
 800028c:	e7ff      	b.n	800028e <fir_filter_int+0x76>
 800028e:	9801      	ldr	r0, [sp, #4]
 8000290:	1d01      	adds	r1, r0, #4
 8000292:	9101      	str	r1, [sp, #4]
 8000294:	6800      	ldr	r0, [r0, #0]
 8000296:	9903      	ldr	r1, [sp, #12]
 8000298:	1f0a      	subs	r2, r1, #4
 800029a:	9203      	str	r2, [sp, #12]
 800029c:	6809      	ldr	r1, [r1, #0]
 800029e:	9a05      	ldr	r2, [sp, #20]
 80002a0:	fb00 2001 	mla	r0, r0, r1, r2
 80002a4:	9005      	str	r0, [sp, #20]
 80002a6:	e7ff      	b.n	80002a8 <fir_filter_int+0x90>
 80002a8:	9808      	ldr	r0, [sp, #32]
 80002aa:	3001      	adds	r0, #1
 80002ac:	9008      	str	r0, [sp, #32]
 80002ae:	e7e9      	b.n	8000284 <fir_filter_int+0x6c>
 80002b0:	9805      	ldr	r0, [sp, #20]
 80002b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80002b4:	fb90 f0f1 	sdiv	r0, r0, r1
 80002b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80002ba:	1d0a      	adds	r2, r1, #4
 80002bc:	920c      	str	r2, [sp, #48]	; 0x30
 80002be:	6008      	str	r0, [r1, #0]
 80002c0:	9804      	ldr	r0, [sp, #16]
 80002c2:	9900      	ldr	r1, [sp, #0]
 80002c4:	4288      	cmp	r0, r1
 80002c6:	d107      	bne.n	80002d8 <fir_filter_int+0xc0>
 80002c8:	e7ff      	b.n	80002ca <fir_filter_int+0xb2>
 80002ca:	9806      	ldr	r0, [sp, #24]
 80002cc:	3801      	subs	r0, #1
 80002ce:	9006      	str	r0, [sp, #24]
 80002d0:	9802      	ldr	r0, [sp, #8]
 80002d2:	3004      	adds	r0, #4
 80002d4:	9002      	str	r0, [sp, #8]
 80002d6:	e00c      	b.n	80002f2 <fir_filter_int+0xda>
 80002d8:	9806      	ldr	r0, [sp, #24]
 80002da:	990e      	ldr	r1, [sp, #56]	; 0x38
 80002dc:	4288      	cmp	r0, r1
 80002de:	da04      	bge.n	80002ea <fir_filter_int+0xd2>
 80002e0:	e7ff      	b.n	80002e2 <fir_filter_int+0xca>
 80002e2:	9806      	ldr	r0, [sp, #24]
 80002e4:	3001      	adds	r0, #1
 80002e6:	9006      	str	r0, [sp, #24]
 80002e8:	e7ff      	b.n	80002ea <fir_filter_int+0xd2>
 80002ea:	9804      	ldr	r0, [sp, #16]
 80002ec:	3004      	adds	r0, #4
 80002ee:	9004      	str	r0, [sp, #16]
 80002f0:	e7ff      	b.n	80002f2 <fir_filter_int+0xda>
 80002f2:	e7ff      	b.n	80002f4 <fir_filter_int+0xdc>
 80002f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80002f6:	3001      	adds	r0, #1
 80002f8:	9009      	str	r0, [sp, #36]	; 0x24
 80002fa:	e7ad      	b.n	8000258 <fir_filter_int+0x40>
 80002fc:	b00e      	add	sp, #56	; 0x38
 80002fe:	4770      	bx	lr

08000300 <verify_benchmark>:
 8000300:	b081      	sub	sp, #4
 8000302:	9000      	str	r0, [sp, #0]
 8000304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000308:	b001      	add	sp, #4
 800030a:	4770      	bx	lr

0800030c <initialise_benchmark>:
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <benchmark>:
 8000310:	b580      	push	{r7, lr}
 8000312:	466f      	mov	r7, sp
 8000314:	f6ad 3d48 	subw	sp, sp, #2888	; 0xb48
 8000318:	f240 101d 	movw	r0, #285	; 0x11d
 800031c:	9001      	str	r0, [sp, #4]
 800031e:	2023      	movs	r0, #35	; 0x23
 8000320:	9000      	str	r0, [sp, #0]
 8000322:	f24a 30f8 	movw	r0, #41976	; 0xa3f8
 8000326:	f6c0 0000 	movt	r0, #2048	; 0x800
 800032a:	f24a 3368 	movw	r3, #41832	; 0xa368
 800032e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000332:	a902      	add	r1, sp, #8
 8000334:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000338:	f7ff ff6e 	bl	8000218 <fir_filter_int>
 800033c:	2000      	movs	r0, #0
 800033e:	f60d 3d48 	addw	sp, sp, #2888	; 0xb48
 8000342:	bd80      	pop	{r7, pc}

08000344 <__io_putchar>:
 8000344:	b580      	push	{r7, lr}
 8000346:	466f      	mov	r7, sp
 8000348:	b082      	sub	sp, #8
 800034a:	9001      	str	r0, [sp, #4]
 800034c:	f240 00ac 	movw	r0, #172	; 0xac
 8000350:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000354:	a901      	add	r1, sp, #4
 8000356:	2201      	movs	r2, #1
 8000358:	2364      	movs	r3, #100	; 0x64
 800035a:	f006 f9a9 	bl	80066b0 <HAL_UART_Transmit>
 800035e:	9801      	ldr	r0, [sp, #4]
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}

08000364 <main>:
 8000364:	b580      	push	{r7, lr}
 8000366:	466f      	mov	r7, sp
 8000368:	b084      	sub	sp, #16
 800036a:	2000      	movs	r0, #0
 800036c:	9003      	str	r0, [sp, #12]
 800036e:	f002 fca9 	bl	8002cc4 <HAL_Init>
 8000372:	f000 f831 	bl	80003d8 <SystemClock_Config>
 8000376:	f000 f88f 	bl	8000498 <MX_GPIO_Init>
 800037a:	f000 f991 	bl	80006a0 <MX_I2C1_Init>
 800037e:	f000 f9b1 	bl	80006e4 <MX_I2S3_Init>
 8000382:	f000 f9d1 	bl	8000728 <MX_SPI1_Init>
 8000386:	f009 fcdb 	bl	8009d40 <MX_USB_HOST_Init>
 800038a:	f000 f9f1 	bl	8000770 <MX_USART2_UART_Init>
 800038e:	f002 fcff 	bl	8002d90 <HAL_GetTick>
 8000392:	9002      	str	r0, [sp, #8]
 8000394:	f7ff ffba 	bl	800030c <initialise_benchmark>
 8000398:	e7ff      	b.n	800039a <main+0x36>
 800039a:	f009 fcf7 	bl	8009d8c <MX_USB_HOST_Process>
 800039e:	2000      	movs	r0, #0
 80003a0:	9001      	str	r0, [sp, #4]
 80003a2:	e7ff      	b.n	80003a4 <main+0x40>
 80003a4:	9801      	ldr	r0, [sp, #4]
 80003a6:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80003aa:	da07      	bge.n	80003bc <main+0x58>
 80003ac:	e7ff      	b.n	80003ae <main+0x4a>
 80003ae:	f7ff ffaf 	bl	8000310 <benchmark>
 80003b2:	e7ff      	b.n	80003b4 <main+0x50>
 80003b4:	9801      	ldr	r0, [sp, #4]
 80003b6:	3001      	adds	r0, #1
 80003b8:	9001      	str	r0, [sp, #4]
 80003ba:	e7f3      	b.n	80003a4 <main+0x40>
 80003bc:	f002 fce8 	bl	8002d90 <HAL_GetTick>
 80003c0:	9902      	ldr	r1, [sp, #8]
 80003c2:	1a41      	subs	r1, r0, r1
 80003c4:	f64a 706c 	movw	r0, #44908	; 0xaf6c
 80003c8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80003cc:	f000 ff7c 	bl	80012c8 <iprintf>
 80003d0:	f002 fcde 	bl	8002d90 <HAL_GetTick>
 80003d4:	9002      	str	r0, [sp, #8]
 80003d6:	e7e0      	b.n	800039a <main+0x36>

080003d8 <SystemClock_Config>:
 80003d8:	b580      	push	{r7, lr}
 80003da:	466f      	mov	r7, sp
 80003dc:	b094      	sub	sp, #80	; 0x50
 80003de:	a808      	add	r0, sp, #32
 80003e0:	2130      	movs	r1, #48	; 0x30
 80003e2:	f000 fdc1 	bl	8000f68 <__aeabi_memclr>
 80003e6:	2000      	movs	r0, #0
 80003e8:	9007      	str	r0, [sp, #28]
 80003ea:	9006      	str	r0, [sp, #24]
 80003ec:	9005      	str	r0, [sp, #20]
 80003ee:	9004      	str	r0, [sp, #16]
 80003f0:	9003      	str	r0, [sp, #12]
 80003f2:	e7ff      	b.n	80003f4 <SystemClock_Config+0x1c>
 80003f4:	2000      	movs	r0, #0
 80003f6:	9002      	str	r0, [sp, #8]
 80003f8:	f643 0040 	movw	r0, #14400	; 0x3840
 80003fc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000400:	6801      	ldr	r1, [r0, #0]
 8000402:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000406:	6001      	str	r1, [r0, #0]
 8000408:	6800      	ldr	r0, [r0, #0]
 800040a:	f000 5080 	and.w	r0, r0, #268435456	; 0x10000000
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	9802      	ldr	r0, [sp, #8]
 8000412:	e7ff      	b.n	8000414 <SystemClock_Config+0x3c>
 8000414:	e7ff      	b.n	8000416 <SystemClock_Config+0x3e>
 8000416:	2000      	movs	r0, #0
 8000418:	9001      	str	r0, [sp, #4]
 800041a:	f247 0000 	movw	r0, #28672	; 0x7000
 800041e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000422:	6801      	ldr	r1, [r0, #0]
 8000424:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000428:	6001      	str	r1, [r0, #0]
 800042a:	6800      	ldr	r0, [r0, #0]
 800042c:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
 8000430:	9001      	str	r0, [sp, #4]
 8000432:	9801      	ldr	r0, [sp, #4]
 8000434:	e7ff      	b.n	8000436 <SystemClock_Config+0x5e>
 8000436:	2001      	movs	r0, #1
 8000438:	9008      	str	r0, [sp, #32]
 800043a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800043e:	9009      	str	r0, [sp, #36]	; 0x24
 8000440:	2002      	movs	r0, #2
 8000442:	900e      	str	r0, [sp, #56]	; 0x38
 8000444:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8000448:	910f      	str	r1, [sp, #60]	; 0x3c
 800044a:	2108      	movs	r1, #8
 800044c:	9110      	str	r1, [sp, #64]	; 0x40
 800044e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8000452:	9111      	str	r1, [sp, #68]	; 0x44
 8000454:	9012      	str	r0, [sp, #72]	; 0x48
 8000456:	2007      	movs	r0, #7
 8000458:	9013      	str	r0, [sp, #76]	; 0x4c
 800045a:	a808      	add	r0, sp, #32
 800045c:	f005 fa7a 	bl	8005954 <HAL_RCC_OscConfig>
 8000460:	b118      	cbz	r0, 800046a <SystemClock_Config+0x92>
 8000462:	e7ff      	b.n	8000464 <SystemClock_Config+0x8c>
 8000464:	f000 f9a2 	bl	80007ac <Error_Handler>
 8000468:	e7ff      	b.n	800046a <SystemClock_Config+0x92>
 800046a:	200f      	movs	r0, #15
 800046c:	9003      	str	r0, [sp, #12]
 800046e:	2002      	movs	r0, #2
 8000470:	9004      	str	r0, [sp, #16]
 8000472:	2000      	movs	r0, #0
 8000474:	9005      	str	r0, [sp, #20]
 8000476:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800047a:	9006      	str	r0, [sp, #24]
 800047c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000480:	9007      	str	r0, [sp, #28]
 8000482:	a803      	add	r0, sp, #12
 8000484:	2105      	movs	r1, #5
 8000486:	f005 fcdd 	bl	8005e44 <HAL_RCC_ClockConfig>
 800048a:	b118      	cbz	r0, 8000494 <SystemClock_Config+0xbc>
 800048c:	e7ff      	b.n	800048e <SystemClock_Config+0xb6>
 800048e:	f000 f98d 	bl	80007ac <Error_Handler>
 8000492:	e7ff      	b.n	8000494 <SystemClock_Config+0xbc>
 8000494:	b014      	add	sp, #80	; 0x50
 8000496:	bd80      	pop	{r7, pc}

08000498 <MX_GPIO_Init>:
 8000498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049a:	af03      	add	r7, sp, #12
 800049c:	e92d 0f00 	stmdb	sp!, {r8, r9, sl, fp}
 80004a0:	b08b      	sub	sp, #44	; 0x2c
 80004a2:	2000      	movs	r0, #0
 80004a4:	900a      	str	r0, [sp, #40]	; 0x28
 80004a6:	9009      	str	r0, [sp, #36]	; 0x24
 80004a8:	9008      	str	r0, [sp, #32]
 80004aa:	9007      	str	r0, [sp, #28]
 80004ac:	9006      	str	r0, [sp, #24]
 80004ae:	e7ff      	b.n	80004b0 <MX_GPIO_Init+0x18>
 80004b0:	2000      	movs	r0, #0
 80004b2:	9005      	str	r0, [sp, #20]
 80004b4:	f643 0030 	movw	r0, #14384	; 0x3830
 80004b8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80004bc:	6801      	ldr	r1, [r0, #0]
 80004be:	f041 0110 	orr.w	r1, r1, #16
 80004c2:	6001      	str	r1, [r0, #0]
 80004c4:	6800      	ldr	r0, [r0, #0]
 80004c6:	f000 0010 	and.w	r0, r0, #16
 80004ca:	9005      	str	r0, [sp, #20]
 80004cc:	9805      	ldr	r0, [sp, #20]
 80004ce:	e7ff      	b.n	80004d0 <MX_GPIO_Init+0x38>
 80004d0:	e7ff      	b.n	80004d2 <MX_GPIO_Init+0x3a>
 80004d2:	2000      	movs	r0, #0
 80004d4:	9004      	str	r0, [sp, #16]
 80004d6:	f643 0030 	movw	r0, #14384	; 0x3830
 80004da:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80004de:	6801      	ldr	r1, [r0, #0]
 80004e0:	f041 0104 	orr.w	r1, r1, #4
 80004e4:	6001      	str	r1, [r0, #0]
 80004e6:	6800      	ldr	r0, [r0, #0]
 80004e8:	f000 0004 	and.w	r0, r0, #4
 80004ec:	9004      	str	r0, [sp, #16]
 80004ee:	9804      	ldr	r0, [sp, #16]
 80004f0:	e7ff      	b.n	80004f2 <MX_GPIO_Init+0x5a>
 80004f2:	e7ff      	b.n	80004f4 <MX_GPIO_Init+0x5c>
 80004f4:	2000      	movs	r0, #0
 80004f6:	9003      	str	r0, [sp, #12]
 80004f8:	f643 0030 	movw	r0, #14384	; 0x3830
 80004fc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000500:	6801      	ldr	r1, [r0, #0]
 8000502:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8000506:	6001      	str	r1, [r0, #0]
 8000508:	6800      	ldr	r0, [r0, #0]
 800050a:	f000 0080 	and.w	r0, r0, #128	; 0x80
 800050e:	9003      	str	r0, [sp, #12]
 8000510:	9803      	ldr	r0, [sp, #12]
 8000512:	e7ff      	b.n	8000514 <MX_GPIO_Init+0x7c>
 8000514:	e7ff      	b.n	8000516 <MX_GPIO_Init+0x7e>
 8000516:	2000      	movs	r0, #0
 8000518:	9002      	str	r0, [sp, #8]
 800051a:	f643 0030 	movw	r0, #14384	; 0x3830
 800051e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000522:	6801      	ldr	r1, [r0, #0]
 8000524:	f041 0101 	orr.w	r1, r1, #1
 8000528:	6001      	str	r1, [r0, #0]
 800052a:	6800      	ldr	r0, [r0, #0]
 800052c:	f000 0001 	and.w	r0, r0, #1
 8000530:	9002      	str	r0, [sp, #8]
 8000532:	9802      	ldr	r0, [sp, #8]
 8000534:	e7ff      	b.n	8000536 <MX_GPIO_Init+0x9e>
 8000536:	e7ff      	b.n	8000538 <MX_GPIO_Init+0xa0>
 8000538:	2000      	movs	r0, #0
 800053a:	9001      	str	r0, [sp, #4]
 800053c:	f643 0030 	movw	r0, #14384	; 0x3830
 8000540:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000544:	6801      	ldr	r1, [r0, #0]
 8000546:	f041 0102 	orr.w	r1, r1, #2
 800054a:	6001      	str	r1, [r0, #0]
 800054c:	6800      	ldr	r0, [r0, #0]
 800054e:	f000 0002 	and.w	r0, r0, #2
 8000552:	9001      	str	r0, [sp, #4]
 8000554:	9801      	ldr	r0, [sp, #4]
 8000556:	e7ff      	b.n	8000558 <MX_GPIO_Init+0xc0>
 8000558:	e7ff      	b.n	800055a <MX_GPIO_Init+0xc2>
 800055a:	2000      	movs	r0, #0
 800055c:	9000      	str	r0, [sp, #0]
 800055e:	f643 0030 	movw	r0, #14384	; 0x3830
 8000562:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000566:	6801      	ldr	r1, [r0, #0]
 8000568:	f041 0108 	orr.w	r1, r1, #8
 800056c:	6001      	str	r1, [r0, #0]
 800056e:	6800      	ldr	r0, [r0, #0]
 8000570:	f000 0008 	and.w	r0, r0, #8
 8000574:	9000      	str	r0, [sp, #0]
 8000576:	9800      	ldr	r0, [sp, #0]
 8000578:	e7ff      	b.n	800057a <MX_GPIO_Init+0xe2>
 800057a:	f241 0900 	movw	r9, #4096	; 0x1000
 800057e:	f2c4 0902 	movt	r9, #16386	; 0x4002
 8000582:	f04f 0808 	mov.w	r8, #8
 8000586:	2500      	movs	r5, #0
 8000588:	4648      	mov	r0, r9
 800058a:	2108      	movs	r1, #8
 800058c:	2200      	movs	r2, #0
 800058e:	f002 ffd9 	bl	8003544 <HAL_GPIO_WritePin>
 8000592:	f640 0400 	movw	r4, #2048	; 0x800
 8000596:	f2c4 0402 	movt	r4, #16386	; 0x4002
 800059a:	f04f 0a01 	mov.w	sl, #1
 800059e:	4620      	mov	r0, r4
 80005a0:	2101      	movs	r1, #1
 80005a2:	2201      	movs	r2, #1
 80005a4:	f002 ffce 	bl	8003544 <HAL_GPIO_WritePin>
 80005a8:	f640 4000 	movw	r0, #3072	; 0xc00
 80005ac:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80005b0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005b4:	2200      	movs	r2, #0
 80005b6:	f002 ffc5 	bl	8003544 <HAL_GPIO_WritePin>
 80005ba:	f8cd 8018 	str.w	r8, [sp, #24]
 80005be:	f8cd a01c 	str.w	sl, [sp, #28]
 80005c2:	9508      	str	r5, [sp, #32]
 80005c4:	9509      	str	r5, [sp, #36]	; 0x24
 80005c6:	ae06      	add	r6, sp, #24
 80005c8:	4648      	mov	r0, r9
 80005ca:	4631      	mov	r1, r6
 80005cc:	f002 fd22 	bl	8003014 <HAL_GPIO_Init>
 80005d0:	f8cd a018 	str.w	sl, [sp, #24]
 80005d4:	f8cd a01c 	str.w	sl, [sp, #28]
 80005d8:	9508      	str	r5, [sp, #32]
 80005da:	9509      	str	r5, [sp, #36]	; 0x24
 80005dc:	4620      	mov	r0, r4
 80005de:	4631      	mov	r1, r6
 80005e0:	f002 fd18 	bl	8003014 <HAL_GPIO_Init>
 80005e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80005e8:	f04f 0b02 	mov.w	fp, #2
 80005ec:	f8cd b01c 	str.w	fp, [sp, #28]
 80005f0:	9508      	str	r5, [sp, #32]
 80005f2:	9509      	str	r5, [sp, #36]	; 0x24
 80005f4:	f04f 0905 	mov.w	r9, #5
 80005f8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80005fc:	4620      	mov	r0, r4
 80005fe:	4631      	mov	r1, r6
 8000600:	f002 fd08 	bl	8003014 <HAL_GPIO_Init>
 8000604:	f8cd a018 	str.w	sl, [sp, #24]
 8000608:	f44f 1890 	mov.w	r8, #1179648	; 0x120000
 800060c:	f8cd 801c 	str.w	r8, [sp, #28]
 8000610:	9508      	str	r5, [sp, #32]
 8000612:	2000      	movs	r0, #0
 8000614:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000618:	4631      	mov	r1, r6
 800061a:	f002 fcfb 	bl	8003014 <HAL_GPIO_Init>
 800061e:	2004      	movs	r0, #4
 8000620:	9006      	str	r0, [sp, #24]
 8000622:	9507      	str	r5, [sp, #28]
 8000624:	9508      	str	r5, [sp, #32]
 8000626:	f240 4400 	movw	r4, #1024	; 0x400
 800062a:	f2c4 0402 	movt	r4, #16386	; 0x4002
 800062e:	4620      	mov	r0, r4
 8000630:	4631      	mov	r1, r6
 8000632:	f002 fcef 	bl	8003014 <HAL_GPIO_Init>
 8000636:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800063a:	9006      	str	r0, [sp, #24]
 800063c:	f8cd b01c 	str.w	fp, [sp, #28]
 8000640:	9508      	str	r5, [sp, #32]
 8000642:	9509      	str	r5, [sp, #36]	; 0x24
 8000644:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8000648:	4620      	mov	r0, r4
 800064a:	4631      	mov	r1, r6
 800064c:	f002 fce2 	bl	8003014 <HAL_GPIO_Init>
 8000650:	f24f 0010 	movw	r0, #61456	; 0xf010
 8000654:	9006      	str	r0, [sp, #24]
 8000656:	f8cd a01c 	str.w	sl, [sp, #28]
 800065a:	9508      	str	r5, [sp, #32]
 800065c:	9509      	str	r5, [sp, #36]	; 0x24
 800065e:	f640 4400 	movw	r4, #3072	; 0xc00
 8000662:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8000666:	4620      	mov	r0, r4
 8000668:	4631      	mov	r1, r6
 800066a:	f002 fcd3 	bl	8003014 <HAL_GPIO_Init>
 800066e:	2020      	movs	r0, #32
 8000670:	9006      	str	r0, [sp, #24]
 8000672:	9507      	str	r5, [sp, #28]
 8000674:	9508      	str	r5, [sp, #32]
 8000676:	4620      	mov	r0, r4
 8000678:	4631      	mov	r1, r6
 800067a:	f002 fccb 	bl	8003014 <HAL_GPIO_Init>
 800067e:	f8cd b018 	str.w	fp, [sp, #24]
 8000682:	f8cd 801c 	str.w	r8, [sp, #28]
 8000686:	9508      	str	r5, [sp, #32]
 8000688:	f241 0000 	movw	r0, #4096	; 0x1000
 800068c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000690:	4631      	mov	r1, r6
 8000692:	f002 fcbf 	bl	8003014 <HAL_GPIO_Init>
 8000696:	b00b      	add	sp, #44	; 0x2c
 8000698:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
 800069c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800069e:	bf00      	nop

080006a0 <MX_I2C1_Init>:
 80006a0:	b580      	push	{r7, lr}
 80006a2:	466f      	mov	r7, sp
 80006a4:	f240 00f8 	movw	r0, #248	; 0xf8
 80006a8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80006ac:	f245 4100 	movw	r1, #21504	; 0x5400
 80006b0:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80006b4:	6001      	str	r1, [r0, #0]
 80006b6:	f248 61a0 	movw	r1, #34464	; 0x86a0
 80006ba:	f2c0 0101 	movt	r1, #1
 80006be:	6041      	str	r1, [r0, #4]
 80006c0:	2100      	movs	r1, #0
 80006c2:	6081      	str	r1, [r0, #8]
 80006c4:	60c1      	str	r1, [r0, #12]
 80006c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ca:	6102      	str	r2, [r0, #16]
 80006cc:	6141      	str	r1, [r0, #20]
 80006ce:	6181      	str	r1, [r0, #24]
 80006d0:	61c1      	str	r1, [r0, #28]
 80006d2:	6201      	str	r1, [r0, #32]
 80006d4:	f004 fb5a 	bl	8004d8c <HAL_I2C_Init>
 80006d8:	b118      	cbz	r0, 80006e2 <MX_I2C1_Init+0x42>
 80006da:	e7ff      	b.n	80006dc <MX_I2C1_Init+0x3c>
 80006dc:	f000 f866 	bl	80007ac <Error_Handler>
 80006e0:	e7ff      	b.n	80006e2 <MX_I2C1_Init+0x42>
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <MX_I2S3_Init>:
 80006e4:	b580      	push	{r7, lr}
 80006e6:	466f      	mov	r7, sp
 80006e8:	f240 1054 	movw	r0, #340	; 0x154
 80006ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80006f0:	f643 4100 	movw	r1, #15360	; 0x3c00
 80006f4:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80006f8:	6001      	str	r1, [r0, #0]
 80006fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006fe:	6041      	str	r1, [r0, #4]
 8000700:	2200      	movs	r2, #0
 8000702:	6082      	str	r2, [r0, #8]
 8000704:	60c2      	str	r2, [r0, #12]
 8000706:	6101      	str	r1, [r0, #16]
 8000708:	f247 7100 	movw	r1, #30464	; 0x7700
 800070c:	f2c0 0101 	movt	r1, #1
 8000710:	6141      	str	r1, [r0, #20]
 8000712:	6182      	str	r2, [r0, #24]
 8000714:	61c2      	str	r2, [r0, #28]
 8000716:	6202      	str	r2, [r0, #32]
 8000718:	f004 fc7c 	bl	8005014 <HAL_I2S_Init>
 800071c:	b118      	cbz	r0, 8000726 <MX_I2S3_Init+0x42>
 800071e:	e7ff      	b.n	8000720 <MX_I2S3_Init+0x3c>
 8000720:	f000 f844 	bl	80007ac <Error_Handler>
 8000724:	e7ff      	b.n	8000726 <MX_I2S3_Init+0x42>
 8000726:	bd80      	pop	{r7, pc}

08000728 <MX_SPI1_Init>:
 8000728:	b580      	push	{r7, lr}
 800072a:	466f      	mov	r7, sp
 800072c:	f240 10a0 	movw	r0, #416	; 0x1a0
 8000730:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000734:	f243 0100 	movw	r1, #12288	; 0x3000
 8000738:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800073c:	6001      	str	r1, [r0, #0]
 800073e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000742:	6041      	str	r1, [r0, #4]
 8000744:	2100      	movs	r1, #0
 8000746:	6081      	str	r1, [r0, #8]
 8000748:	60c1      	str	r1, [r0, #12]
 800074a:	6101      	str	r1, [r0, #16]
 800074c:	6141      	str	r1, [r0, #20]
 800074e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000752:	6182      	str	r2, [r0, #24]
 8000754:	61c1      	str	r1, [r0, #28]
 8000756:	6201      	str	r1, [r0, #32]
 8000758:	6241      	str	r1, [r0, #36]	; 0x24
 800075a:	6281      	str	r1, [r0, #40]	; 0x28
 800075c:	210a      	movs	r1, #10
 800075e:	62c1      	str	r1, [r0, #44]	; 0x2c
 8000760:	f005 fed0 	bl	8006504 <HAL_SPI_Init>
 8000764:	b118      	cbz	r0, 800076e <MX_SPI1_Init+0x46>
 8000766:	e7ff      	b.n	8000768 <MX_SPI1_Init+0x40>
 8000768:	f000 f820 	bl	80007ac <Error_Handler>
 800076c:	e7ff      	b.n	800076e <MX_SPI1_Init+0x46>
 800076e:	bd80      	pop	{r7, pc}

08000770 <MX_USART2_UART_Init>:
 8000770:	b580      	push	{r7, lr}
 8000772:	466f      	mov	r7, sp
 8000774:	f240 00ac 	movw	r0, #172	; 0xac
 8000778:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800077c:	f244 4100 	movw	r1, #17408	; 0x4400
 8000780:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000784:	6001      	str	r1, [r0, #0]
 8000786:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800078a:	6041      	str	r1, [r0, #4]
 800078c:	2100      	movs	r1, #0
 800078e:	6081      	str	r1, [r0, #8]
 8000790:	60c1      	str	r1, [r0, #12]
 8000792:	6101      	str	r1, [r0, #16]
 8000794:	220c      	movs	r2, #12
 8000796:	6142      	str	r2, [r0, #20]
 8000798:	6181      	str	r1, [r0, #24]
 800079a:	61c1      	str	r1, [r0, #28]
 800079c:	f005 ff3b 	bl	8006616 <HAL_UART_Init>
 80007a0:	b118      	cbz	r0, 80007aa <MX_USART2_UART_Init+0x3a>
 80007a2:	e7ff      	b.n	80007a4 <MX_USART2_UART_Init+0x34>
 80007a4:	f000 f802 	bl	80007ac <Error_Handler>
 80007a8:	e7ff      	b.n	80007aa <MX_USART2_UART_Init+0x3a>
 80007aa:	bd80      	pop	{r7, pc}

080007ac <Error_Handler>:
 80007ac:	b672      	cpsid	i
 80007ae:	e7ff      	b.n	80007b0 <Error_Handler+0x4>
 80007b0:	e7fe      	b.n	80007b0 <Error_Handler+0x4>
 80007b2:	bf00      	nop

080007b4 <HAL_MspInit>:
 80007b4:	b580      	push	{r7, lr}
 80007b6:	466f      	mov	r7, sp
 80007b8:	b082      	sub	sp, #8
 80007ba:	e7ff      	b.n	80007bc <HAL_MspInit+0x8>
 80007bc:	2000      	movs	r0, #0
 80007be:	9001      	str	r0, [sp, #4]
 80007c0:	f643 0044 	movw	r0, #14404	; 0x3844
 80007c4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80007c8:	6801      	ldr	r1, [r0, #0]
 80007ca:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80007ce:	6001      	str	r1, [r0, #0]
 80007d0:	6800      	ldr	r0, [r0, #0]
 80007d2:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
 80007d6:	9001      	str	r0, [sp, #4]
 80007d8:	9801      	ldr	r0, [sp, #4]
 80007da:	e7ff      	b.n	80007dc <HAL_MspInit+0x28>
 80007dc:	e7ff      	b.n	80007de <HAL_MspInit+0x2a>
 80007de:	2000      	movs	r0, #0
 80007e0:	9000      	str	r0, [sp, #0]
 80007e2:	f643 0040 	movw	r0, #14400	; 0x3840
 80007e6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80007ea:	6801      	ldr	r1, [r0, #0]
 80007ec:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80007f0:	6001      	str	r1, [r0, #0]
 80007f2:	6800      	ldr	r0, [r0, #0]
 80007f4:	f000 5080 	and.w	r0, r0, #268435456	; 0x10000000
 80007f8:	9000      	str	r0, [sp, #0]
 80007fa:	9800      	ldr	r0, [sp, #0]
 80007fc:	e7ff      	b.n	80007fe <HAL_MspInit+0x4a>
 80007fe:	2007      	movs	r0, #7
 8000800:	f002 fbc6 	bl	8002f90 <HAL_NVIC_SetPriorityGrouping>
 8000804:	b002      	add	sp, #8
 8000806:	bd80      	pop	{r7, pc}

08000808 <HAL_I2C_MspInit>:
 8000808:	b580      	push	{r7, lr}
 800080a:	466f      	mov	r7, sp
 800080c:	b088      	sub	sp, #32
 800080e:	9007      	str	r0, [sp, #28]
 8000810:	2000      	movs	r0, #0
 8000812:	9006      	str	r0, [sp, #24]
 8000814:	9005      	str	r0, [sp, #20]
 8000816:	9004      	str	r0, [sp, #16]
 8000818:	9003      	str	r0, [sp, #12]
 800081a:	9002      	str	r0, [sp, #8]
 800081c:	9807      	ldr	r0, [sp, #28]
 800081e:	6800      	ldr	r0, [r0, #0]
 8000820:	f245 4100 	movw	r1, #21504	; 0x5400
 8000824:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000828:	4288      	cmp	r0, r1
 800082a:	d135      	bne.n	8000898 <HAL_I2C_MspInit+0x90>
 800082c:	e7ff      	b.n	800082e <HAL_I2C_MspInit+0x26>
 800082e:	e7ff      	b.n	8000830 <HAL_I2C_MspInit+0x28>
 8000830:	2000      	movs	r0, #0
 8000832:	9001      	str	r0, [sp, #4]
 8000834:	f643 0030 	movw	r0, #14384	; 0x3830
 8000838:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800083c:	6801      	ldr	r1, [r0, #0]
 800083e:	f041 0102 	orr.w	r1, r1, #2
 8000842:	6001      	str	r1, [r0, #0]
 8000844:	6800      	ldr	r0, [r0, #0]
 8000846:	f000 0002 	and.w	r0, r0, #2
 800084a:	9001      	str	r0, [sp, #4]
 800084c:	9801      	ldr	r0, [sp, #4]
 800084e:	e7ff      	b.n	8000850 <HAL_I2C_MspInit+0x48>
 8000850:	f44f 7010 	mov.w	r0, #576	; 0x240
 8000854:	9002      	str	r0, [sp, #8]
 8000856:	2012      	movs	r0, #18
 8000858:	9003      	str	r0, [sp, #12]
 800085a:	2001      	movs	r0, #1
 800085c:	9004      	str	r0, [sp, #16]
 800085e:	2000      	movs	r0, #0
 8000860:	9005      	str	r0, [sp, #20]
 8000862:	2004      	movs	r0, #4
 8000864:	9006      	str	r0, [sp, #24]
 8000866:	f240 4000 	movw	r0, #1024	; 0x400
 800086a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800086e:	a902      	add	r1, sp, #8
 8000870:	f002 fbd0 	bl	8003014 <HAL_GPIO_Init>
 8000874:	e7ff      	b.n	8000876 <HAL_I2C_MspInit+0x6e>
 8000876:	2000      	movs	r0, #0
 8000878:	9000      	str	r0, [sp, #0]
 800087a:	f643 0040 	movw	r0, #14400	; 0x3840
 800087e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000882:	6801      	ldr	r1, [r0, #0]
 8000884:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8000888:	6001      	str	r1, [r0, #0]
 800088a:	6800      	ldr	r0, [r0, #0]
 800088c:	f400 1000 	and.w	r0, r0, #2097152	; 0x200000
 8000890:	9000      	str	r0, [sp, #0]
 8000892:	9800      	ldr	r0, [sp, #0]
 8000894:	e7ff      	b.n	8000896 <HAL_I2C_MspInit+0x8e>
 8000896:	e7ff      	b.n	8000898 <HAL_I2C_MspInit+0x90>
 8000898:	b008      	add	sp, #32
 800089a:	bd80      	pop	{r7, pc}

0800089c <HAL_I2C_MspDeInit>:
 800089c:	b5d0      	push	{r4, r6, r7, lr}
 800089e:	af02      	add	r7, sp, #8
 80008a0:	b082      	sub	sp, #8
 80008a2:	9001      	str	r0, [sp, #4]
 80008a4:	9801      	ldr	r0, [sp, #4]
 80008a6:	6800      	ldr	r0, [r0, #0]
 80008a8:	f245 4100 	movw	r1, #21504	; 0x5400
 80008ac:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80008b0:	4288      	cmp	r0, r1
 80008b2:	d116      	bne.n	80008e2 <HAL_I2C_MspDeInit+0x46>
 80008b4:	e7ff      	b.n	80008b6 <HAL_I2C_MspDeInit+0x1a>
 80008b6:	f643 0040 	movw	r0, #14400	; 0x3840
 80008ba:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80008be:	6801      	ldr	r1, [r0, #0]
 80008c0:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 80008c4:	6001      	str	r1, [r0, #0]
 80008c6:	f240 4400 	movw	r4, #1024	; 0x400
 80008ca:	f2c4 0402 	movt	r4, #16386	; 0x4002
 80008ce:	4620      	mov	r0, r4
 80008d0:	2140      	movs	r1, #64	; 0x40
 80008d2:	f002 fd3b 	bl	800334c <HAL_GPIO_DeInit>
 80008d6:	4620      	mov	r0, r4
 80008d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008dc:	f002 fd36 	bl	800334c <HAL_GPIO_DeInit>
 80008e0:	e7ff      	b.n	80008e2 <HAL_I2C_MspDeInit+0x46>
 80008e2:	b002      	add	sp, #8
 80008e4:	bdd0      	pop	{r4, r6, r7, pc}
 80008e6:	bf00      	nop

080008e8 <HAL_I2S_MspInit>:
 80008e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ea:	af03      	add	r7, sp, #12
 80008ec:	f84d 8d04 	str.w	r8, [sp, #-4]!
 80008f0:	b08e      	sub	sp, #56	; 0x38
 80008f2:	900d      	str	r0, [sp, #52]	; 0x34
 80008f4:	2000      	movs	r0, #0
 80008f6:	900c      	str	r0, [sp, #48]	; 0x30
 80008f8:	900b      	str	r0, [sp, #44]	; 0x2c
 80008fa:	900a      	str	r0, [sp, #40]	; 0x28
 80008fc:	9009      	str	r0, [sp, #36]	; 0x24
 80008fe:	9008      	str	r0, [sp, #32]
 8000900:	9007      	str	r0, [sp, #28]
 8000902:	9006      	str	r0, [sp, #24]
 8000904:	9005      	str	r0, [sp, #20]
 8000906:	9004      	str	r0, [sp, #16]
 8000908:	980d      	ldr	r0, [sp, #52]	; 0x34
 800090a:	6800      	ldr	r0, [r0, #0]
 800090c:	f643 4100 	movw	r1, #15360	; 0x3c00
 8000910:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000914:	4288      	cmp	r0, r1
 8000916:	d163      	bne.n	80009e0 <HAL_I2S_MspInit+0xf8>
 8000918:	e7ff      	b.n	800091a <HAL_I2S_MspInit+0x32>
 800091a:	2001      	movs	r0, #1
 800091c:	9004      	str	r0, [sp, #16]
 800091e:	20c0      	movs	r0, #192	; 0xc0
 8000920:	9005      	str	r0, [sp, #20]
 8000922:	2002      	movs	r0, #2
 8000924:	9006      	str	r0, [sp, #24]
 8000926:	a804      	add	r0, sp, #16
 8000928:	f005 fcac 	bl	8006284 <HAL_RCCEx_PeriphCLKConfig>
 800092c:	b118      	cbz	r0, 8000936 <HAL_I2S_MspInit+0x4e>
 800092e:	e7ff      	b.n	8000930 <HAL_I2S_MspInit+0x48>
 8000930:	f7ff ff3c 	bl	80007ac <Error_Handler>
 8000934:	e7ff      	b.n	8000936 <HAL_I2S_MspInit+0x4e>
 8000936:	e7ff      	b.n	8000938 <HAL_I2S_MspInit+0x50>
 8000938:	2000      	movs	r0, #0
 800093a:	9003      	str	r0, [sp, #12]
 800093c:	f643 0040 	movw	r0, #14400	; 0x3840
 8000940:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000944:	6801      	ldr	r1, [r0, #0]
 8000946:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800094a:	6001      	str	r1, [r0, #0]
 800094c:	6800      	ldr	r0, [r0, #0]
 800094e:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
 8000952:	9003      	str	r0, [sp, #12]
 8000954:	9803      	ldr	r0, [sp, #12]
 8000956:	e7ff      	b.n	8000958 <HAL_I2S_MspInit+0x70>
 8000958:	e7ff      	b.n	800095a <HAL_I2S_MspInit+0x72>
 800095a:	2000      	movs	r0, #0
 800095c:	9002      	str	r0, [sp, #8]
 800095e:	f643 0030 	movw	r0, #14384	; 0x3830
 8000962:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000966:	6801      	ldr	r1, [r0, #0]
 8000968:	f041 0101 	orr.w	r1, r1, #1
 800096c:	6001      	str	r1, [r0, #0]
 800096e:	6800      	ldr	r0, [r0, #0]
 8000970:	f000 0001 	and.w	r0, r0, #1
 8000974:	9002      	str	r0, [sp, #8]
 8000976:	9802      	ldr	r0, [sp, #8]
 8000978:	e7ff      	b.n	800097a <HAL_I2S_MspInit+0x92>
 800097a:	e7ff      	b.n	800097c <HAL_I2S_MspInit+0x94>
 800097c:	2000      	movs	r0, #0
 800097e:	9001      	str	r0, [sp, #4]
 8000980:	f643 0030 	movw	r0, #14384	; 0x3830
 8000984:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000988:	6801      	ldr	r1, [r0, #0]
 800098a:	f041 0104 	orr.w	r1, r1, #4
 800098e:	6001      	str	r1, [r0, #0]
 8000990:	6800      	ldr	r0, [r0, #0]
 8000992:	f000 0004 	and.w	r0, r0, #4
 8000996:	9001      	str	r0, [sp, #4]
 8000998:	9801      	ldr	r0, [sp, #4]
 800099a:	e7ff      	b.n	800099c <HAL_I2S_MspInit+0xb4>
 800099c:	2010      	movs	r0, #16
 800099e:	9008      	str	r0, [sp, #32]
 80009a0:	f04f 0802 	mov.w	r8, #2
 80009a4:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80009a8:	2600      	movs	r6, #0
 80009aa:	960a      	str	r6, [sp, #40]	; 0x28
 80009ac:	960b      	str	r6, [sp, #44]	; 0x2c
 80009ae:	2506      	movs	r5, #6
 80009b0:	950c      	str	r5, [sp, #48]	; 0x30
 80009b2:	2000      	movs	r0, #0
 80009b4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80009b8:	ac08      	add	r4, sp, #32
 80009ba:	4621      	mov	r1, r4
 80009bc:	f002 fb2a 	bl	8003014 <HAL_GPIO_Init>
 80009c0:	f44f 50a4 	mov.w	r0, #5248	; 0x1480
 80009c4:	9008      	str	r0, [sp, #32]
 80009c6:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80009ca:	960a      	str	r6, [sp, #40]	; 0x28
 80009cc:	960b      	str	r6, [sp, #44]	; 0x2c
 80009ce:	950c      	str	r5, [sp, #48]	; 0x30
 80009d0:	f640 0000 	movw	r0, #2048	; 0x800
 80009d4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80009d8:	4621      	mov	r1, r4
 80009da:	f002 fb1b 	bl	8003014 <HAL_GPIO_Init>
 80009de:	e7ff      	b.n	80009e0 <HAL_I2S_MspInit+0xf8>
 80009e0:	b00e      	add	sp, #56	; 0x38
 80009e2:	f85d 8b04 	ldr.w	r8, [sp], #4
 80009e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080009e8 <HAL_I2S_MspDeInit>:
 80009e8:	b580      	push	{r7, lr}
 80009ea:	466f      	mov	r7, sp
 80009ec:	b082      	sub	sp, #8
 80009ee:	9001      	str	r0, [sp, #4]
 80009f0:	9801      	ldr	r0, [sp, #4]
 80009f2:	6800      	ldr	r0, [r0, #0]
 80009f4:	f643 4100 	movw	r1, #15360	; 0x3c00
 80009f8:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80009fc:	4288      	cmp	r0, r1
 80009fe:	d117      	bne.n	8000a30 <HAL_I2S_MspDeInit+0x48>
 8000a00:	e7ff      	b.n	8000a02 <HAL_I2S_MspDeInit+0x1a>
 8000a02:	f643 0040 	movw	r0, #14400	; 0x3840
 8000a06:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000a0a:	6801      	ldr	r1, [r0, #0]
 8000a0c:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8000a10:	6001      	str	r1, [r0, #0]
 8000a12:	2000      	movs	r0, #0
 8000a14:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000a18:	2110      	movs	r1, #16
 8000a1a:	f002 fc97 	bl	800334c <HAL_GPIO_DeInit>
 8000a1e:	f640 0000 	movw	r0, #2048	; 0x800
 8000a22:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000a26:	f44f 51a4 	mov.w	r1, #5248	; 0x1480
 8000a2a:	f002 fc8f 	bl	800334c <HAL_GPIO_DeInit>
 8000a2e:	e7ff      	b.n	8000a30 <HAL_I2S_MspDeInit+0x48>
 8000a30:	b002      	add	sp, #8
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <HAL_SPI_MspInit>:
 8000a34:	b580      	push	{r7, lr}
 8000a36:	466f      	mov	r7, sp
 8000a38:	b088      	sub	sp, #32
 8000a3a:	9007      	str	r0, [sp, #28]
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	9006      	str	r0, [sp, #24]
 8000a40:	9005      	str	r0, [sp, #20]
 8000a42:	9004      	str	r0, [sp, #16]
 8000a44:	9003      	str	r0, [sp, #12]
 8000a46:	9002      	str	r0, [sp, #8]
 8000a48:	9807      	ldr	r0, [sp, #28]
 8000a4a:	6800      	ldr	r0, [r0, #0]
 8000a4c:	f243 0100 	movw	r1, #12288	; 0x3000
 8000a50:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8000a54:	4288      	cmp	r0, r1
 8000a56:	d132      	bne.n	8000abe <HAL_SPI_MspInit+0x8a>
 8000a58:	e7ff      	b.n	8000a5a <HAL_SPI_MspInit+0x26>
 8000a5a:	e7ff      	b.n	8000a5c <HAL_SPI_MspInit+0x28>
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	9001      	str	r0, [sp, #4]
 8000a60:	f643 0044 	movw	r0, #14404	; 0x3844
 8000a64:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000a68:	6801      	ldr	r1, [r0, #0]
 8000a6a:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8000a6e:	6001      	str	r1, [r0, #0]
 8000a70:	6800      	ldr	r0, [r0, #0]
 8000a72:	f400 5080 	and.w	r0, r0, #4096	; 0x1000
 8000a76:	9001      	str	r0, [sp, #4]
 8000a78:	9801      	ldr	r0, [sp, #4]
 8000a7a:	e7ff      	b.n	8000a7c <HAL_SPI_MspInit+0x48>
 8000a7c:	e7ff      	b.n	8000a7e <HAL_SPI_MspInit+0x4a>
 8000a7e:	2000      	movs	r0, #0
 8000a80:	9000      	str	r0, [sp, #0]
 8000a82:	f643 0030 	movw	r0, #14384	; 0x3830
 8000a86:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000a8a:	6801      	ldr	r1, [r0, #0]
 8000a8c:	f041 0101 	orr.w	r1, r1, #1
 8000a90:	6001      	str	r1, [r0, #0]
 8000a92:	6800      	ldr	r0, [r0, #0]
 8000a94:	f000 0001 	and.w	r0, r0, #1
 8000a98:	9000      	str	r0, [sp, #0]
 8000a9a:	9800      	ldr	r0, [sp, #0]
 8000a9c:	e7ff      	b.n	8000a9e <HAL_SPI_MspInit+0x6a>
 8000a9e:	20e0      	movs	r0, #224	; 0xe0
 8000aa0:	9002      	str	r0, [sp, #8]
 8000aa2:	2002      	movs	r0, #2
 8000aa4:	9003      	str	r0, [sp, #12]
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	9004      	str	r0, [sp, #16]
 8000aaa:	9005      	str	r0, [sp, #20]
 8000aac:	2005      	movs	r0, #5
 8000aae:	9006      	str	r0, [sp, #24]
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000ab6:	a902      	add	r1, sp, #8
 8000ab8:	f002 faac 	bl	8003014 <HAL_GPIO_Init>
 8000abc:	e7ff      	b.n	8000abe <HAL_SPI_MspInit+0x8a>
 8000abe:	b008      	add	sp, #32
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop

08000ac4 <HAL_SPI_MspDeInit>:
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	466f      	mov	r7, sp
 8000ac8:	b082      	sub	sp, #8
 8000aca:	9001      	str	r0, [sp, #4]
 8000acc:	9801      	ldr	r0, [sp, #4]
 8000ace:	6800      	ldr	r0, [r0, #0]
 8000ad0:	f243 0100 	movw	r1, #12288	; 0x3000
 8000ad4:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8000ad8:	4288      	cmp	r0, r1
 8000ada:	d10f      	bne.n	8000afc <HAL_SPI_MspDeInit+0x38>
 8000adc:	e7ff      	b.n	8000ade <HAL_SPI_MspDeInit+0x1a>
 8000ade:	f643 0044 	movw	r0, #14404	; 0x3844
 8000ae2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000ae6:	6801      	ldr	r1, [r0, #0]
 8000ae8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8000aec:	6001      	str	r1, [r0, #0]
 8000aee:	2000      	movs	r0, #0
 8000af0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000af4:	21e0      	movs	r1, #224	; 0xe0
 8000af6:	f002 fc29 	bl	800334c <HAL_GPIO_DeInit>
 8000afa:	e7ff      	b.n	8000afc <HAL_SPI_MspDeInit+0x38>
 8000afc:	b002      	add	sp, #8
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <HAL_UART_MspInit>:
 8000b00:	b580      	push	{r7, lr}
 8000b02:	466f      	mov	r7, sp
 8000b04:	b088      	sub	sp, #32
 8000b06:	9007      	str	r0, [sp, #28]
 8000b08:	2000      	movs	r0, #0
 8000b0a:	9006      	str	r0, [sp, #24]
 8000b0c:	9005      	str	r0, [sp, #20]
 8000b0e:	9004      	str	r0, [sp, #16]
 8000b10:	9003      	str	r0, [sp, #12]
 8000b12:	9002      	str	r0, [sp, #8]
 8000b14:	9807      	ldr	r0, [sp, #28]
 8000b16:	6800      	ldr	r0, [r0, #0]
 8000b18:	f244 4100 	movw	r1, #17408	; 0x4400
 8000b1c:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000b20:	4288      	cmp	r0, r1
 8000b22:	d133      	bne.n	8000b8c <HAL_UART_MspInit+0x8c>
 8000b24:	e7ff      	b.n	8000b26 <HAL_UART_MspInit+0x26>
 8000b26:	e7ff      	b.n	8000b28 <HAL_UART_MspInit+0x28>
 8000b28:	2000      	movs	r0, #0
 8000b2a:	9001      	str	r0, [sp, #4]
 8000b2c:	f643 0040 	movw	r0, #14400	; 0x3840
 8000b30:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000b34:	6801      	ldr	r1, [r0, #0]
 8000b36:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8000b3a:	6001      	str	r1, [r0, #0]
 8000b3c:	6800      	ldr	r0, [r0, #0]
 8000b3e:	f400 3000 	and.w	r0, r0, #131072	; 0x20000
 8000b42:	9001      	str	r0, [sp, #4]
 8000b44:	9801      	ldr	r0, [sp, #4]
 8000b46:	e7ff      	b.n	8000b48 <HAL_UART_MspInit+0x48>
 8000b48:	e7ff      	b.n	8000b4a <HAL_UART_MspInit+0x4a>
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	9000      	str	r0, [sp, #0]
 8000b4e:	f643 0030 	movw	r0, #14384	; 0x3830
 8000b52:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000b56:	6801      	ldr	r1, [r0, #0]
 8000b58:	f041 0101 	orr.w	r1, r1, #1
 8000b5c:	6001      	str	r1, [r0, #0]
 8000b5e:	6800      	ldr	r0, [r0, #0]
 8000b60:	f000 0001 	and.w	r0, r0, #1
 8000b64:	9000      	str	r0, [sp, #0]
 8000b66:	9800      	ldr	r0, [sp, #0]
 8000b68:	e7ff      	b.n	8000b6a <HAL_UART_MspInit+0x6a>
 8000b6a:	200c      	movs	r0, #12
 8000b6c:	9002      	str	r0, [sp, #8]
 8000b6e:	2002      	movs	r0, #2
 8000b70:	9003      	str	r0, [sp, #12]
 8000b72:	2000      	movs	r0, #0
 8000b74:	9004      	str	r0, [sp, #16]
 8000b76:	2003      	movs	r0, #3
 8000b78:	9005      	str	r0, [sp, #20]
 8000b7a:	2007      	movs	r0, #7
 8000b7c:	9006      	str	r0, [sp, #24]
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000b84:	a902      	add	r1, sp, #8
 8000b86:	f002 fa45 	bl	8003014 <HAL_GPIO_Init>
 8000b8a:	e7ff      	b.n	8000b8c <HAL_UART_MspInit+0x8c>
 8000b8c:	b008      	add	sp, #32
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <HAL_UART_MspDeInit>:
 8000b90:	b580      	push	{r7, lr}
 8000b92:	466f      	mov	r7, sp
 8000b94:	b082      	sub	sp, #8
 8000b96:	9001      	str	r0, [sp, #4]
 8000b98:	9801      	ldr	r0, [sp, #4]
 8000b9a:	6800      	ldr	r0, [r0, #0]
 8000b9c:	f244 4100 	movw	r1, #17408	; 0x4400
 8000ba0:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000ba4:	4288      	cmp	r0, r1
 8000ba6:	d10f      	bne.n	8000bc8 <HAL_UART_MspDeInit+0x38>
 8000ba8:	e7ff      	b.n	8000baa <HAL_UART_MspDeInit+0x1a>
 8000baa:	f643 0040 	movw	r0, #14400	; 0x3840
 8000bae:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000bb2:	6801      	ldr	r1, [r0, #0]
 8000bb4:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
 8000bb8:	6001      	str	r1, [r0, #0]
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000bc0:	210c      	movs	r1, #12
 8000bc2:	f002 fbc3 	bl	800334c <HAL_GPIO_DeInit>
 8000bc6:	e7ff      	b.n	8000bc8 <HAL_UART_MspDeInit+0x38>
 8000bc8:	b002      	add	sp, #8
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <NMI_Handler>:
 8000bcc:	e7ff      	b.n	8000bce <NMI_Handler+0x2>
 8000bce:	e7fe      	b.n	8000bce <NMI_Handler+0x2>

08000bd0 <HardFault_Handler>:
 8000bd0:	e7ff      	b.n	8000bd2 <HardFault_Handler+0x2>
 8000bd2:	e7fe      	b.n	8000bd2 <HardFault_Handler+0x2>

08000bd4 <MemManage_Handler>:
 8000bd4:	e7ff      	b.n	8000bd6 <MemManage_Handler+0x2>
 8000bd6:	e7fe      	b.n	8000bd6 <MemManage_Handler+0x2>

08000bd8 <BusFault_Handler>:
 8000bd8:	e7ff      	b.n	8000bda <BusFault_Handler+0x2>
 8000bda:	e7fe      	b.n	8000bda <BusFault_Handler+0x2>

08000bdc <UsageFault_Handler>:
 8000bdc:	e7ff      	b.n	8000bde <UsageFault_Handler+0x2>
 8000bde:	e7fe      	b.n	8000bde <UsageFault_Handler+0x2>

08000be0 <SVC_Handler>:
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <DebugMon_Handler>:
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <PendSV_Handler>:
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <SysTick_Handler>:
 8000bec:	b580      	push	{r7, lr}
 8000bee:	466f      	mov	r7, sp
 8000bf0:	f002 f8ba 	bl	8002d68 <HAL_IncTick>
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop

08000bf8 <OTG_FS_IRQHandler>:
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	466f      	mov	r7, sp
 8000bfc:	f240 50ec 	movw	r0, #1516	; 0x5ec
 8000c00:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000c04:	f002 ff22 	bl	8003a4c <HAL_HCD_IRQHandler>
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop

08000c0c <initialise_monitor_handles>:
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <_getpid>:
 8000c10:	2001      	movs	r0, #1
 8000c12:	4770      	bx	lr

08000c14 <_kill>:
 8000c14:	b580      	push	{r7, lr}
 8000c16:	466f      	mov	r7, sp
 8000c18:	b082      	sub	sp, #8
 8000c1a:	9001      	str	r0, [sp, #4]
 8000c1c:	9100      	str	r1, [sp, #0]
 8000c1e:	f000 f9f5 	bl	800100c <__errno>
 8000c22:	2116      	movs	r1, #22
 8000c24:	6001      	str	r1, [r0, #0]
 8000c26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c2a:	b002      	add	sp, #8
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop

08000c30 <_exit>:
 8000c30:	b580      	push	{r7, lr}
 8000c32:	466f      	mov	r7, sp
 8000c34:	b082      	sub	sp, #8
 8000c36:	9001      	str	r0, [sp, #4]
 8000c38:	9801      	ldr	r0, [sp, #4]
 8000c3a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c3e:	f7ff ffe9 	bl	8000c14 <_kill>
 8000c42:	e7ff      	b.n	8000c44 <_exit+0x14>
 8000c44:	e7fe      	b.n	8000c44 <_exit+0x14>
 8000c46:	bf00      	nop

08000c48 <_read>:
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	466f      	mov	r7, sp
 8000c4c:	b084      	sub	sp, #16
 8000c4e:	9003      	str	r0, [sp, #12]
 8000c50:	9102      	str	r1, [sp, #8]
 8000c52:	9201      	str	r2, [sp, #4]
 8000c54:	2000      	movs	r0, #0
 8000c56:	9000      	str	r0, [sp, #0]
 8000c58:	e7ff      	b.n	8000c5a <_read+0x12>
 8000c5a:	9800      	ldr	r0, [sp, #0]
 8000c5c:	9901      	ldr	r1, [sp, #4]
 8000c5e:	4288      	cmp	r0, r1
 8000c60:	da0b      	bge.n	8000c7a <_read+0x32>
 8000c62:	e7ff      	b.n	8000c64 <_read+0x1c>
 8000c64:	f3af 8000 	nop.w
 8000c68:	9902      	ldr	r1, [sp, #8]
 8000c6a:	1c4a      	adds	r2, r1, #1
 8000c6c:	9202      	str	r2, [sp, #8]
 8000c6e:	7008      	strb	r0, [r1, #0]
 8000c70:	e7ff      	b.n	8000c72 <_read+0x2a>
 8000c72:	9800      	ldr	r0, [sp, #0]
 8000c74:	3001      	adds	r0, #1
 8000c76:	9000      	str	r0, [sp, #0]
 8000c78:	e7ef      	b.n	8000c5a <_read+0x12>
 8000c7a:	9801      	ldr	r0, [sp, #4]
 8000c7c:	b004      	add	sp, #16
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <_write>:
 8000c80:	b580      	push	{r7, lr}
 8000c82:	466f      	mov	r7, sp
 8000c84:	b084      	sub	sp, #16
 8000c86:	9003      	str	r0, [sp, #12]
 8000c88:	9102      	str	r1, [sp, #8]
 8000c8a:	9201      	str	r2, [sp, #4]
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	9000      	str	r0, [sp, #0]
 8000c90:	e7ff      	b.n	8000c92 <_write+0x12>
 8000c92:	9800      	ldr	r0, [sp, #0]
 8000c94:	9901      	ldr	r1, [sp, #4]
 8000c96:	4288      	cmp	r0, r1
 8000c98:	da0b      	bge.n	8000cb2 <_write+0x32>
 8000c9a:	e7ff      	b.n	8000c9c <_write+0x1c>
 8000c9c:	9802      	ldr	r0, [sp, #8]
 8000c9e:	1c41      	adds	r1, r0, #1
 8000ca0:	9102      	str	r1, [sp, #8]
 8000ca2:	7800      	ldrb	r0, [r0, #0]
 8000ca4:	f7ff fb4e 	bl	8000344 <__io_putchar>
 8000ca8:	e7ff      	b.n	8000caa <_write+0x2a>
 8000caa:	9800      	ldr	r0, [sp, #0]
 8000cac:	3001      	adds	r0, #1
 8000cae:	9000      	str	r0, [sp, #0]
 8000cb0:	e7ef      	b.n	8000c92 <_write+0x12>
 8000cb2:	9801      	ldr	r0, [sp, #4]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <_close>:
 8000cb8:	b081      	sub	sp, #4
 8000cba:	9000      	str	r0, [sp, #0]
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cc0:	b001      	add	sp, #4
 8000cc2:	4770      	bx	lr

08000cc4 <_fstat>:
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	9001      	str	r0, [sp, #4]
 8000cc8:	9100      	str	r1, [sp, #0]
 8000cca:	9800      	ldr	r0, [sp, #0]
 8000ccc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd0:	6041      	str	r1, [r0, #4]
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	b002      	add	sp, #8
 8000cd6:	4770      	bx	lr

08000cd8 <_isatty>:
 8000cd8:	b081      	sub	sp, #4
 8000cda:	9000      	str	r0, [sp, #0]
 8000cdc:	2001      	movs	r0, #1
 8000cde:	b001      	add	sp, #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <_lseek>:
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	9002      	str	r0, [sp, #8]
 8000ce8:	9101      	str	r1, [sp, #4]
 8000cea:	9200      	str	r2, [sp, #0]
 8000cec:	2000      	movs	r0, #0
 8000cee:	b003      	add	sp, #12
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <_open>:
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	9001      	str	r0, [sp, #4]
 8000cf8:	9100      	str	r1, [sp, #0]
 8000cfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cfe:	b002      	add	sp, #8
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <_wait>:
 8000d04:	b580      	push	{r7, lr}
 8000d06:	466f      	mov	r7, sp
 8000d08:	b082      	sub	sp, #8
 8000d0a:	9001      	str	r0, [sp, #4]
 8000d0c:	f000 f97e 	bl	800100c <__errno>
 8000d10:	210a      	movs	r1, #10
 8000d12:	6001      	str	r1, [r0, #0]
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d18:	b002      	add	sp, #8
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <_unlink>:
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	466f      	mov	r7, sp
 8000d20:	b082      	sub	sp, #8
 8000d22:	9001      	str	r0, [sp, #4]
 8000d24:	f000 f972 	bl	800100c <__errno>
 8000d28:	2102      	movs	r1, #2
 8000d2a:	6001      	str	r1, [r0, #0]
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d30:	b002      	add	sp, #8
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <_times>:
 8000d34:	b081      	sub	sp, #4
 8000d36:	9000      	str	r0, [sp, #0]
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d3c:	b001      	add	sp, #4
 8000d3e:	4770      	bx	lr

08000d40 <_stat>:
 8000d40:	b082      	sub	sp, #8
 8000d42:	9001      	str	r0, [sp, #4]
 8000d44:	9100      	str	r1, [sp, #0]
 8000d46:	9800      	ldr	r0, [sp, #0]
 8000d48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d4c:	6041      	str	r1, [r0, #4]
 8000d4e:	2000      	movs	r0, #0
 8000d50:	b002      	add	sp, #8
 8000d52:	4770      	bx	lr

08000d54 <_link>:
 8000d54:	b580      	push	{r7, lr}
 8000d56:	466f      	mov	r7, sp
 8000d58:	b082      	sub	sp, #8
 8000d5a:	9001      	str	r0, [sp, #4]
 8000d5c:	9100      	str	r1, [sp, #0]
 8000d5e:	f000 f955 	bl	800100c <__errno>
 8000d62:	211f      	movs	r1, #31
 8000d64:	6001      	str	r1, [r0, #0]
 8000d66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d6a:	b002      	add	sp, #8
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop

08000d70 <_fork>:
 8000d70:	b580      	push	{r7, lr}
 8000d72:	466f      	mov	r7, sp
 8000d74:	f000 f94a 	bl	800100c <__errno>
 8000d78:	210b      	movs	r1, #11
 8000d7a:	6001      	str	r1, [r0, #0]
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop

08000d84 <_execve>:
 8000d84:	b580      	push	{r7, lr}
 8000d86:	466f      	mov	r7, sp
 8000d88:	b084      	sub	sp, #16
 8000d8a:	9003      	str	r0, [sp, #12]
 8000d8c:	9102      	str	r1, [sp, #8]
 8000d8e:	9201      	str	r2, [sp, #4]
 8000d90:	f000 f93c 	bl	800100c <__errno>
 8000d94:	210c      	movs	r1, #12
 8000d96:	6001      	str	r1, [r0, #0]
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d9c:	b004      	add	sp, #16
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <_sbrk>:
 8000da0:	b580      	push	{r7, lr}
 8000da2:	466f      	mov	r7, sp
 8000da4:	b086      	sub	sp, #24
 8000da6:	9004      	str	r0, [sp, #16]
 8000da8:	f240 4000 	movw	r0, #1024	; 0x400
 8000dac:	f2c0 0000 	movt	r0, #0
 8000db0:	f240 0100 	movw	r1, #0
 8000db4:	f2c2 0102 	movt	r1, #8194	; 0x2002
 8000db8:	1a08      	subs	r0, r1, r0
 8000dba:	9003      	str	r0, [sp, #12]
 8000dbc:	9803      	ldr	r0, [sp, #12]
 8000dbe:	9002      	str	r0, [sp, #8]
 8000dc0:	f240 10fc 	movw	r0, #508	; 0x1fc
 8000dc4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000dc8:	6800      	ldr	r0, [r0, #0]
 8000dca:	b950      	cbnz	r0, 8000de2 <_sbrk+0x42>
 8000dcc:	e7ff      	b.n	8000dce <_sbrk+0x2e>
 8000dce:	f240 10fc 	movw	r0, #508	; 0x1fc
 8000dd2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000dd6:	f640 01f0 	movw	r1, #2288	; 0x8f0
 8000dda:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000dde:	6001      	str	r1, [r0, #0]
 8000de0:	e7ff      	b.n	8000de2 <_sbrk+0x42>
 8000de2:	f240 10fc 	movw	r0, #508	; 0x1fc
 8000de6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000dea:	6800      	ldr	r0, [r0, #0]
 8000dec:	9904      	ldr	r1, [sp, #16]
 8000dee:	4408      	add	r0, r1
 8000df0:	9902      	ldr	r1, [sp, #8]
 8000df2:	4288      	cmp	r0, r1
 8000df4:	d908      	bls.n	8000e08 <_sbrk+0x68>
 8000df6:	e7ff      	b.n	8000df8 <_sbrk+0x58>
 8000df8:	f000 f908 	bl	800100c <__errno>
 8000dfc:	210c      	movs	r1, #12
 8000dfe:	6001      	str	r1, [r0, #0]
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e04:	9005      	str	r0, [sp, #20]
 8000e06:	e00c      	b.n	8000e22 <_sbrk+0x82>
 8000e08:	f240 10fc 	movw	r0, #508	; 0x1fc
 8000e0c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000e10:	6801      	ldr	r1, [r0, #0]
 8000e12:	9101      	str	r1, [sp, #4]
 8000e14:	9904      	ldr	r1, [sp, #16]
 8000e16:	6802      	ldr	r2, [r0, #0]
 8000e18:	4411      	add	r1, r2
 8000e1a:	6001      	str	r1, [r0, #0]
 8000e1c:	9801      	ldr	r0, [sp, #4]
 8000e1e:	9005      	str	r0, [sp, #20]
 8000e20:	e7ff      	b.n	8000e22 <_sbrk+0x82>
 8000e22:	9805      	ldr	r0, [sp, #20]
 8000e24:	b006      	add	sp, #24
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <SystemInit>:
 8000e28:	f64e 5088 	movw	r0, #60808	; 0xed88
 8000e2c:	f2ce 0000 	movt	r0, #57344	; 0xe000
 8000e30:	6801      	ldr	r1, [r0, #0]
 8000e32:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000e36:	6001      	str	r1, [r0, #0]
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <SystemCoreClockUpdate>:
 8000e3c:	b085      	sub	sp, #20
 8000e3e:	2000      	movs	r0, #0
 8000e40:	9004      	str	r0, [sp, #16]
 8000e42:	9003      	str	r0, [sp, #12]
 8000e44:	2102      	movs	r1, #2
 8000e46:	9102      	str	r1, [sp, #8]
 8000e48:	9001      	str	r0, [sp, #4]
 8000e4a:	9100      	str	r1, [sp, #0]
 8000e4c:	f643 0008 	movw	r0, #14344	; 0x3808
 8000e50:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000e54:	6800      	ldr	r0, [r0, #0]
 8000e56:	f000 000c 	and.w	r0, r0, #12
 8000e5a:	9004      	str	r0, [sp, #16]
 8000e5c:	9804      	ldr	r0, [sp, #16]
 8000e5e:	b130      	cbz	r0, 8000e6e <SystemCoreClockUpdate+0x32>
 8000e60:	e7ff      	b.n	8000e62 <SystemCoreClockUpdate+0x26>
 8000e62:	2804      	cmp	r0, #4
 8000e64:	d00d      	beq.n	8000e82 <SystemCoreClockUpdate+0x46>
 8000e66:	e7ff      	b.n	8000e68 <SystemCoreClockUpdate+0x2c>
 8000e68:	2808      	cmp	r0, #8
 8000e6a:	d014      	beq.n	8000e96 <SystemCoreClockUpdate+0x5a>
 8000e6c:	e059      	b.n	8000f22 <SystemCoreClockUpdate+0xe6>
 8000e6e:	f240 0000 	movw	r0, #0
 8000e72:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000e76:	f242 4100 	movw	r1, #9216	; 0x2400
 8000e7a:	f2c0 01f4 	movt	r1, #244	; 0xf4
 8000e7e:	6001      	str	r1, [r0, #0]
 8000e80:	e059      	b.n	8000f36 <SystemCoreClockUpdate+0xfa>
 8000e82:	f240 0000 	movw	r0, #0
 8000e86:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000e8a:	f241 2100 	movw	r1, #4608	; 0x1200
 8000e8e:	f2c0 017a 	movt	r1, #122	; 0x7a
 8000e92:	6001      	str	r1, [r0, #0]
 8000e94:	e04f      	b.n	8000f36 <SystemCoreClockUpdate+0xfa>
 8000e96:	f643 0004 	movw	r0, #14340	; 0x3804
 8000e9a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000e9e:	6801      	ldr	r1, [r0, #0]
 8000ea0:	f3c1 5180 	ubfx	r1, r1, #22, #1
 8000ea4:	9101      	str	r1, [sp, #4]
 8000ea6:	6800      	ldr	r0, [r0, #0]
 8000ea8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8000eac:	9000      	str	r0, [sp, #0]
 8000eae:	9801      	ldr	r0, [sp, #4]
 8000eb0:	b188      	cbz	r0, 8000ed6 <SystemCoreClockUpdate+0x9a>
 8000eb2:	e7ff      	b.n	8000eb4 <SystemCoreClockUpdate+0x78>
 8000eb4:	9800      	ldr	r0, [sp, #0]
 8000eb6:	f241 2100 	movw	r1, #4608	; 0x1200
 8000eba:	f2c0 017a 	movt	r1, #122	; 0x7a
 8000ebe:	fbb1 f0f0 	udiv	r0, r1, r0
 8000ec2:	f643 0104 	movw	r1, #14340	; 0x3804
 8000ec6:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8000eca:	6809      	ldr	r1, [r1, #0]
 8000ecc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000ed0:	4348      	muls	r0, r1
 8000ed2:	9003      	str	r0, [sp, #12]
 8000ed4:	e010      	b.n	8000ef8 <SystemCoreClockUpdate+0xbc>
 8000ed6:	9800      	ldr	r0, [sp, #0]
 8000ed8:	f242 4100 	movw	r1, #9216	; 0x2400
 8000edc:	f2c0 01f4 	movt	r1, #244	; 0xf4
 8000ee0:	fbb1 f0f0 	udiv	r0, r1, r0
 8000ee4:	f643 0104 	movw	r1, #14340	; 0x3804
 8000ee8:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8000eec:	6809      	ldr	r1, [r1, #0]
 8000eee:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000ef2:	4348      	muls	r0, r1
 8000ef4:	9003      	str	r0, [sp, #12]
 8000ef6:	e7ff      	b.n	8000ef8 <SystemCoreClockUpdate+0xbc>
 8000ef8:	f643 0004 	movw	r0, #14340	; 0x3804
 8000efc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000f00:	6800      	ldr	r0, [r0, #0]
 8000f02:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8000f06:	2102      	movs	r1, #2
 8000f08:	eb01 30d0 	add.w	r0, r1, r0, lsr #15
 8000f0c:	9002      	str	r0, [sp, #8]
 8000f0e:	9803      	ldr	r0, [sp, #12]
 8000f10:	9902      	ldr	r1, [sp, #8]
 8000f12:	fbb0 f0f1 	udiv	r0, r0, r1
 8000f16:	f240 0100 	movw	r1, #0
 8000f1a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000f1e:	6008      	str	r0, [r1, #0]
 8000f20:	e009      	b.n	8000f36 <SystemCoreClockUpdate+0xfa>
 8000f22:	f240 0000 	movw	r0, #0
 8000f26:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000f2a:	f242 4100 	movw	r1, #9216	; 0x2400
 8000f2e:	f2c0 01f4 	movt	r1, #244	; 0xf4
 8000f32:	6001      	str	r1, [r0, #0]
 8000f34:	e7ff      	b.n	8000f36 <SystemCoreClockUpdate+0xfa>
 8000f36:	f643 0008 	movw	r0, #14344	; 0x3808
 8000f3a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000f3e:	6800      	ldr	r0, [r0, #0]
 8000f40:	b2c0      	uxtb	r0, r0
 8000f42:	0900      	lsrs	r0, r0, #4
 8000f44:	f64a 61ec 	movw	r1, #44780	; 0xaeec
 8000f48:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000f4c:	5c08      	ldrb	r0, [r1, r0]
 8000f4e:	9004      	str	r0, [sp, #16]
 8000f50:	9804      	ldr	r0, [sp, #16]
 8000f52:	f240 0100 	movw	r1, #0
 8000f56:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000f5a:	680a      	ldr	r2, [r1, #0]
 8000f5c:	fa22 f000 	lsr.w	r0, r2, r0
 8000f60:	6008      	str	r0, [r1, #0]
 8000f62:	b005      	add	sp, #20
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <__aeabi_memclr>:
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f000 b801 	b.w	8000f70 <__aeabi_memset>
 8000f6e:	bf00      	nop

08000f70 <__aeabi_memset>:
 8000f70:	b470      	push	{r4, r5, r6}
 8000f72:	0784      	lsls	r4, r0, #30
 8000f74:	d046      	beq.n	8001004 <__aeabi_memset+0x94>
 8000f76:	1e4c      	subs	r4, r1, #1
 8000f78:	2900      	cmp	r1, #0
 8000f7a:	d041      	beq.n	8001000 <__aeabi_memset+0x90>
 8000f7c:	b2d5      	uxtb	r5, r2
 8000f7e:	4603      	mov	r3, r0
 8000f80:	e002      	b.n	8000f88 <__aeabi_memset+0x18>
 8000f82:	1e61      	subs	r1, r4, #1
 8000f84:	b3e4      	cbz	r4, 8001000 <__aeabi_memset+0x90>
 8000f86:	460c      	mov	r4, r1
 8000f88:	f803 5b01 	strb.w	r5, [r3], #1
 8000f8c:	0799      	lsls	r1, r3, #30
 8000f8e:	d1f8      	bne.n	8000f82 <__aeabi_memset+0x12>
 8000f90:	2c03      	cmp	r4, #3
 8000f92:	d92e      	bls.n	8000ff2 <__aeabi_memset+0x82>
 8000f94:	b2d5      	uxtb	r5, r2
 8000f96:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8000f9a:	2c0f      	cmp	r4, #15
 8000f9c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8000fa0:	d919      	bls.n	8000fd6 <__aeabi_memset+0x66>
 8000fa2:	4626      	mov	r6, r4
 8000fa4:	f103 0110 	add.w	r1, r3, #16
 8000fa8:	3e10      	subs	r6, #16
 8000faa:	2e0f      	cmp	r6, #15
 8000fac:	f841 5c10 	str.w	r5, [r1, #-16]
 8000fb0:	f841 5c0c 	str.w	r5, [r1, #-12]
 8000fb4:	f841 5c08 	str.w	r5, [r1, #-8]
 8000fb8:	f841 5c04 	str.w	r5, [r1, #-4]
 8000fbc:	f101 0110 	add.w	r1, r1, #16
 8000fc0:	d8f2      	bhi.n	8000fa8 <__aeabi_memset+0x38>
 8000fc2:	f1a4 0110 	sub.w	r1, r4, #16
 8000fc6:	f021 010f 	bic.w	r1, r1, #15
 8000fca:	f004 040f 	and.w	r4, r4, #15
 8000fce:	3110      	adds	r1, #16
 8000fd0:	2c03      	cmp	r4, #3
 8000fd2:	440b      	add	r3, r1
 8000fd4:	d90d      	bls.n	8000ff2 <__aeabi_memset+0x82>
 8000fd6:	461e      	mov	r6, r3
 8000fd8:	4621      	mov	r1, r4
 8000fda:	3904      	subs	r1, #4
 8000fdc:	2903      	cmp	r1, #3
 8000fde:	f846 5b04 	str.w	r5, [r6], #4
 8000fe2:	d8fa      	bhi.n	8000fda <__aeabi_memset+0x6a>
 8000fe4:	1f21      	subs	r1, r4, #4
 8000fe6:	f021 0103 	bic.w	r1, r1, #3
 8000fea:	3104      	adds	r1, #4
 8000fec:	440b      	add	r3, r1
 8000fee:	f004 0403 	and.w	r4, r4, #3
 8000ff2:	b12c      	cbz	r4, 8001000 <__aeabi_memset+0x90>
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	441c      	add	r4, r3
 8000ff8:	f803 2b01 	strb.w	r2, [r3], #1
 8000ffc:	42a3      	cmp	r3, r4
 8000ffe:	d1fb      	bne.n	8000ff8 <__aeabi_memset+0x88>
 8001000:	bc70      	pop	{r4, r5, r6}
 8001002:	4770      	bx	lr
 8001004:	460c      	mov	r4, r1
 8001006:	4603      	mov	r3, r0
 8001008:	e7c2      	b.n	8000f90 <__aeabi_memset+0x20>
	...

0800100c <__errno>:
 800100c:	4b01      	ldr	r3, [pc, #4]	; (8001014 <__errno+0x8>)
 800100e:	6818      	ldr	r0, [r3, #0]
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000004 	.word	0x20000004

08001018 <__libc_init_array>:
 8001018:	b570      	push	{r4, r5, r6, lr}
 800101a:	4e0d      	ldr	r6, [pc, #52]	; (8001050 <__libc_init_array+0x38>)
 800101c:	4d0d      	ldr	r5, [pc, #52]	; (8001054 <__libc_init_array+0x3c>)
 800101e:	1b76      	subs	r6, r6, r5
 8001020:	10b6      	asrs	r6, r6, #2
 8001022:	d006      	beq.n	8001032 <__libc_init_array+0x1a>
 8001024:	2400      	movs	r4, #0
 8001026:	f855 3b04 	ldr.w	r3, [r5], #4
 800102a:	3401      	adds	r4, #1
 800102c:	4798      	blx	r3
 800102e:	42a6      	cmp	r6, r4
 8001030:	d1f9      	bne.n	8001026 <__libc_init_array+0xe>
 8001032:	4e09      	ldr	r6, [pc, #36]	; (8001058 <__libc_init_array+0x40>)
 8001034:	4d09      	ldr	r5, [pc, #36]	; (800105c <__libc_init_array+0x44>)
 8001036:	1b76      	subs	r6, r6, r5
 8001038:	f009 f98a 	bl	800a350 <_init>
 800103c:	10b6      	asrs	r6, r6, #2
 800103e:	d006      	beq.n	800104e <__libc_init_array+0x36>
 8001040:	2400      	movs	r4, #0
 8001042:	f855 3b04 	ldr.w	r3, [r5], #4
 8001046:	3401      	adds	r4, #1
 8001048:	4798      	blx	r3
 800104a:	42a6      	cmp	r6, r4
 800104c:	d1f9      	bne.n	8001042 <__libc_init_array+0x2a>
 800104e:	bd70      	pop	{r4, r5, r6, pc}
 8001050:	0800afb8 	.word	0x0800afb8
 8001054:	0800afb8 	.word	0x0800afb8
 8001058:	0800afbc 	.word	0x0800afbc
 800105c:	0800afb8 	.word	0x0800afb8

08001060 <malloc>:
 8001060:	4b02      	ldr	r3, [pc, #8]	; (800106c <malloc+0xc>)
 8001062:	4601      	mov	r1, r0
 8001064:	6818      	ldr	r0, [r3, #0]
 8001066:	f000 b8bf 	b.w	80011e8 <_malloc_r>
 800106a:	bf00      	nop
 800106c:	20000004 	.word	0x20000004

08001070 <free>:
 8001070:	4b02      	ldr	r3, [pc, #8]	; (800107c <free+0xc>)
 8001072:	4601      	mov	r1, r0
 8001074:	6818      	ldr	r0, [r3, #0]
 8001076:	f000 b855 	b.w	8001124 <_free_r>
 800107a:	bf00      	nop
 800107c:	20000004 	.word	0x20000004

08001080 <memset>:
 8001080:	0783      	lsls	r3, r0, #30
 8001082:	b530      	push	{r4, r5, lr}
 8001084:	d048      	beq.n	8001118 <memset+0x98>
 8001086:	1e54      	subs	r4, r2, #1
 8001088:	2a00      	cmp	r2, #0
 800108a:	d03f      	beq.n	800110c <memset+0x8c>
 800108c:	b2ca      	uxtb	r2, r1
 800108e:	4603      	mov	r3, r0
 8001090:	e001      	b.n	8001096 <memset+0x16>
 8001092:	3c01      	subs	r4, #1
 8001094:	d33a      	bcc.n	800110c <memset+0x8c>
 8001096:	f803 2b01 	strb.w	r2, [r3], #1
 800109a:	079d      	lsls	r5, r3, #30
 800109c:	d1f9      	bne.n	8001092 <memset+0x12>
 800109e:	2c03      	cmp	r4, #3
 80010a0:	d92d      	bls.n	80010fe <memset+0x7e>
 80010a2:	b2cd      	uxtb	r5, r1
 80010a4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80010a8:	2c0f      	cmp	r4, #15
 80010aa:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80010ae:	d936      	bls.n	800111e <memset+0x9e>
 80010b0:	f1a4 0210 	sub.w	r2, r4, #16
 80010b4:	f022 0c0f 	bic.w	ip, r2, #15
 80010b8:	f103 0e20 	add.w	lr, r3, #32
 80010bc:	44e6      	add	lr, ip
 80010be:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 80010c2:	f103 0210 	add.w	r2, r3, #16
 80010c6:	e942 5504 	strd	r5, r5, [r2, #-16]
 80010ca:	e942 5502 	strd	r5, r5, [r2, #-8]
 80010ce:	3210      	adds	r2, #16
 80010d0:	4572      	cmp	r2, lr
 80010d2:	d1f8      	bne.n	80010c6 <memset+0x46>
 80010d4:	f10c 0201 	add.w	r2, ip, #1
 80010d8:	f014 0f0c 	tst.w	r4, #12
 80010dc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80010e0:	f004 0c0f 	and.w	ip, r4, #15
 80010e4:	d013      	beq.n	800110e <memset+0x8e>
 80010e6:	f1ac 0304 	sub.w	r3, ip, #4
 80010ea:	f023 0303 	bic.w	r3, r3, #3
 80010ee:	3304      	adds	r3, #4
 80010f0:	4413      	add	r3, r2
 80010f2:	f842 5b04 	str.w	r5, [r2], #4
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d1fb      	bne.n	80010f2 <memset+0x72>
 80010fa:	f00c 0403 	and.w	r4, ip, #3
 80010fe:	b12c      	cbz	r4, 800110c <memset+0x8c>
 8001100:	b2ca      	uxtb	r2, r1
 8001102:	441c      	add	r4, r3
 8001104:	f803 2b01 	strb.w	r2, [r3], #1
 8001108:	429c      	cmp	r4, r3
 800110a:	d1fb      	bne.n	8001104 <memset+0x84>
 800110c:	bd30      	pop	{r4, r5, pc}
 800110e:	4664      	mov	r4, ip
 8001110:	4613      	mov	r3, r2
 8001112:	2c00      	cmp	r4, #0
 8001114:	d1f4      	bne.n	8001100 <memset+0x80>
 8001116:	e7f9      	b.n	800110c <memset+0x8c>
 8001118:	4603      	mov	r3, r0
 800111a:	4614      	mov	r4, r2
 800111c:	e7bf      	b.n	800109e <memset+0x1e>
 800111e:	461a      	mov	r2, r3
 8001120:	46a4      	mov	ip, r4
 8001122:	e7e0      	b.n	80010e6 <memset+0x66>

08001124 <_free_r>:
 8001124:	2900      	cmp	r1, #0
 8001126:	d058      	beq.n	80011da <_free_r+0xb6>
 8001128:	b530      	push	{r4, r5, lr}
 800112a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800112e:	b083      	sub	sp, #12
 8001130:	2b00      	cmp	r3, #0
 8001132:	f1a1 0404 	sub.w	r4, r1, #4
 8001136:	bfb8      	it	lt
 8001138:	18e4      	addlt	r4, r4, r3
 800113a:	9001      	str	r0, [sp, #4]
 800113c:	f000 fa50 	bl	80015e0 <__malloc_lock>
 8001140:	4a28      	ldr	r2, [pc, #160]	; (80011e4 <_free_r+0xc0>)
 8001142:	9801      	ldr	r0, [sp, #4]
 8001144:	6813      	ldr	r3, [r2, #0]
 8001146:	b133      	cbz	r3, 8001156 <_free_r+0x32>
 8001148:	42a3      	cmp	r3, r4
 800114a:	d90d      	bls.n	8001168 <_free_r+0x44>
 800114c:	6821      	ldr	r1, [r4, #0]
 800114e:	eb04 0c01 	add.w	ip, r4, r1
 8001152:	4563      	cmp	r3, ip
 8001154:	d02f      	beq.n	80011b6 <_free_r+0x92>
 8001156:	6063      	str	r3, [r4, #4]
 8001158:	6014      	str	r4, [r2, #0]
 800115a:	b003      	add	sp, #12
 800115c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001160:	f000 ba40 	b.w	80015e4 <__malloc_unlock>
 8001164:	42a3      	cmp	r3, r4
 8001166:	d810      	bhi.n	800118a <_free_r+0x66>
 8001168:	461a      	mov	r2, r3
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1f9      	bne.n	8001164 <_free_r+0x40>
 8001170:	6811      	ldr	r1, [r2, #0]
 8001172:	eb02 0c01 	add.w	ip, r2, r1
 8001176:	4564      	cmp	r4, ip
 8001178:	d019      	beq.n	80011ae <_free_r+0x8a>
 800117a:	d32f      	bcc.n	80011dc <_free_r+0xb8>
 800117c:	6063      	str	r3, [r4, #4]
 800117e:	6054      	str	r4, [r2, #4]
 8001180:	b003      	add	sp, #12
 8001182:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001186:	f000 ba2d 	b.w	80015e4 <__malloc_unlock>
 800118a:	6811      	ldr	r1, [r2, #0]
 800118c:	eb02 0c01 	add.w	ip, r2, r1
 8001190:	45a4      	cmp	ip, r4
 8001192:	d016      	beq.n	80011c2 <_free_r+0x9e>
 8001194:	d822      	bhi.n	80011dc <_free_r+0xb8>
 8001196:	6821      	ldr	r1, [r4, #0]
 8001198:	eb04 0c01 	add.w	ip, r4, r1
 800119c:	4563      	cmp	r3, ip
 800119e:	d1ed      	bne.n	800117c <_free_r+0x58>
 80011a0:	681d      	ldr	r5, [r3, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	4429      	add	r1, r5
 80011a6:	e9c4 1300 	strd	r1, r3, [r4]
 80011aa:	6054      	str	r4, [r2, #4]
 80011ac:	e7d5      	b.n	800115a <_free_r+0x36>
 80011ae:	6823      	ldr	r3, [r4, #0]
 80011b0:	4419      	add	r1, r3
 80011b2:	6011      	str	r1, [r2, #0]
 80011b4:	e7d1      	b.n	800115a <_free_r+0x36>
 80011b6:	681d      	ldr	r5, [r3, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	4429      	add	r1, r5
 80011bc:	e9c4 1300 	strd	r1, r3, [r4]
 80011c0:	e7ca      	b.n	8001158 <_free_r+0x34>
 80011c2:	6824      	ldr	r4, [r4, #0]
 80011c4:	4421      	add	r1, r4
 80011c6:	1854      	adds	r4, r2, r1
 80011c8:	42a3      	cmp	r3, r4
 80011ca:	6011      	str	r1, [r2, #0]
 80011cc:	d1c5      	bne.n	800115a <_free_r+0x36>
 80011ce:	e9d3 4300 	ldrd	r4, r3, [r3]
 80011d2:	4421      	add	r1, r4
 80011d4:	e9c2 1300 	strd	r1, r3, [r2]
 80011d8:	e7bf      	b.n	800115a <_free_r+0x36>
 80011da:	4770      	bx	lr
 80011dc:	230c      	movs	r3, #12
 80011de:	6003      	str	r3, [r0, #0]
 80011e0:	e7bb      	b.n	800115a <_free_r+0x36>
 80011e2:	bf00      	nop
 80011e4:	20000200 	.word	0x20000200

080011e8 <_malloc_r>:
 80011e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ea:	1ccd      	adds	r5, r1, #3
 80011ec:	f025 0503 	bic.w	r5, r5, #3
 80011f0:	3508      	adds	r5, #8
 80011f2:	2d0c      	cmp	r5, #12
 80011f4:	bf38      	it	cc
 80011f6:	250c      	movcc	r5, #12
 80011f8:	2d00      	cmp	r5, #0
 80011fa:	4606      	mov	r6, r0
 80011fc:	db23      	blt.n	8001246 <_malloc_r+0x5e>
 80011fe:	42a9      	cmp	r1, r5
 8001200:	d821      	bhi.n	8001246 <_malloc_r+0x5e>
 8001202:	4f25      	ldr	r7, [pc, #148]	; (8001298 <_malloc_r+0xb0>)
 8001204:	f000 f9ec 	bl	80015e0 <__malloc_lock>
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	b322      	cbz	r2, 8001256 <_malloc_r+0x6e>
 800120c:	4614      	mov	r4, r2
 800120e:	e003      	b.n	8001218 <_malloc_r+0x30>
 8001210:	6863      	ldr	r3, [r4, #4]
 8001212:	4622      	mov	r2, r4
 8001214:	b1fb      	cbz	r3, 8001256 <_malloc_r+0x6e>
 8001216:	461c      	mov	r4, r3
 8001218:	6823      	ldr	r3, [r4, #0]
 800121a:	1b5b      	subs	r3, r3, r5
 800121c:	d4f8      	bmi.n	8001210 <_malloc_r+0x28>
 800121e:	2b0b      	cmp	r3, #11
 8001220:	d815      	bhi.n	800124e <_malloc_r+0x66>
 8001222:	6863      	ldr	r3, [r4, #4]
 8001224:	4294      	cmp	r4, r2
 8001226:	bf0c      	ite	eq
 8001228:	603b      	streq	r3, [r7, #0]
 800122a:	6053      	strne	r3, [r2, #4]
 800122c:	4630      	mov	r0, r6
 800122e:	f000 f9d9 	bl	80015e4 <__malloc_unlock>
 8001232:	f104 000b 	add.w	r0, r4, #11
 8001236:	1d23      	adds	r3, r4, #4
 8001238:	f020 0007 	bic.w	r0, r0, #7
 800123c:	1ac2      	subs	r2, r0, r3
 800123e:	d001      	beq.n	8001244 <_malloc_r+0x5c>
 8001240:	1a1b      	subs	r3, r3, r0
 8001242:	50a3      	str	r3, [r4, r2]
 8001244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001246:	230c      	movs	r3, #12
 8001248:	6033      	str	r3, [r6, #0]
 800124a:	2000      	movs	r0, #0
 800124c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800124e:	6023      	str	r3, [r4, #0]
 8001250:	441c      	add	r4, r3
 8001252:	6025      	str	r5, [r4, #0]
 8001254:	e7ea      	b.n	800122c <_malloc_r+0x44>
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	b1c9      	cbz	r1, 800128e <_malloc_r+0xa6>
 800125a:	4629      	mov	r1, r5
 800125c:	4630      	mov	r0, r6
 800125e:	f000 f84d 	bl	80012fc <_sbrk_r>
 8001262:	1c43      	adds	r3, r0, #1
 8001264:	d00c      	beq.n	8001280 <_malloc_r+0x98>
 8001266:	1cc4      	adds	r4, r0, #3
 8001268:	f024 0403 	bic.w	r4, r4, #3
 800126c:	42a0      	cmp	r0, r4
 800126e:	d005      	beq.n	800127c <_malloc_r+0x94>
 8001270:	1a21      	subs	r1, r4, r0
 8001272:	4630      	mov	r0, r6
 8001274:	f000 f842 	bl	80012fc <_sbrk_r>
 8001278:	3001      	adds	r0, #1
 800127a:	d001      	beq.n	8001280 <_malloc_r+0x98>
 800127c:	6025      	str	r5, [r4, #0]
 800127e:	e7d5      	b.n	800122c <_malloc_r+0x44>
 8001280:	230c      	movs	r3, #12
 8001282:	4630      	mov	r0, r6
 8001284:	6033      	str	r3, [r6, #0]
 8001286:	f000 f9ad 	bl	80015e4 <__malloc_unlock>
 800128a:	2000      	movs	r0, #0
 800128c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800128e:	4630      	mov	r0, r6
 8001290:	f000 f834 	bl	80012fc <_sbrk_r>
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	e7e0      	b.n	800125a <_malloc_r+0x72>
 8001298:	20000200 	.word	0x20000200

0800129c <_iprintf_r>:
 800129c:	b40e      	push	{r1, r2, r3}
 800129e:	b510      	push	{r4, lr}
 80012a0:	4604      	mov	r4, r0
 80012a2:	b083      	sub	sp, #12
 80012a4:	b108      	cbz	r0, 80012aa <_iprintf_r+0xe>
 80012a6:	6983      	ldr	r3, [r0, #24]
 80012a8:	b15b      	cbz	r3, 80012c2 <_iprintf_r+0x26>
 80012aa:	ab06      	add	r3, sp, #24
 80012ac:	68a1      	ldr	r1, [r4, #8]
 80012ae:	9a05      	ldr	r2, [sp, #20]
 80012b0:	9301      	str	r3, [sp, #4]
 80012b2:	4620      	mov	r0, r4
 80012b4:	f000 f9dc 	bl	8001670 <_vfiprintf_r>
 80012b8:	b003      	add	sp, #12
 80012ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012be:	b003      	add	sp, #12
 80012c0:	4770      	bx	lr
 80012c2:	f000 f929 	bl	8001518 <__sinit>
 80012c6:	e7f0      	b.n	80012aa <_iprintf_r+0xe>

080012c8 <iprintf>:
 80012c8:	b40f      	push	{r0, r1, r2, r3}
 80012ca:	b510      	push	{r4, lr}
 80012cc:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <iprintf+0x30>)
 80012ce:	681c      	ldr	r4, [r3, #0]
 80012d0:	b082      	sub	sp, #8
 80012d2:	b10c      	cbz	r4, 80012d8 <iprintf+0x10>
 80012d4:	69a3      	ldr	r3, [r4, #24]
 80012d6:	b15b      	cbz	r3, 80012f0 <iprintf+0x28>
 80012d8:	ab05      	add	r3, sp, #20
 80012da:	68a1      	ldr	r1, [r4, #8]
 80012dc:	9a04      	ldr	r2, [sp, #16]
 80012de:	9301      	str	r3, [sp, #4]
 80012e0:	4620      	mov	r0, r4
 80012e2:	f000 f9c5 	bl	8001670 <_vfiprintf_r>
 80012e6:	b002      	add	sp, #8
 80012e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012ec:	b004      	add	sp, #16
 80012ee:	4770      	bx	lr
 80012f0:	4620      	mov	r0, r4
 80012f2:	f000 f911 	bl	8001518 <__sinit>
 80012f6:	e7ef      	b.n	80012d8 <iprintf+0x10>
 80012f8:	20000004 	.word	0x20000004

080012fc <_sbrk_r>:
 80012fc:	b538      	push	{r3, r4, r5, lr}
 80012fe:	4d07      	ldr	r5, [pc, #28]	; (800131c <_sbrk_r+0x20>)
 8001300:	2200      	movs	r2, #0
 8001302:	4604      	mov	r4, r0
 8001304:	4608      	mov	r0, r1
 8001306:	602a      	str	r2, [r5, #0]
 8001308:	f7ff fd4a 	bl	8000da0 <_sbrk>
 800130c:	1c43      	adds	r3, r0, #1
 800130e:	d000      	beq.n	8001312 <_sbrk_r+0x16>
 8001310:	bd38      	pop	{r3, r4, r5, pc}
 8001312:	682b      	ldr	r3, [r5, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0fb      	beq.n	8001310 <_sbrk_r+0x14>
 8001318:	6023      	str	r3, [r4, #0]
 800131a:	bd38      	pop	{r3, r4, r5, pc}
 800131c:	20000208 	.word	0x20000208

08001320 <__fp_lock>:
 8001320:	2000      	movs	r0, #0
 8001322:	4770      	bx	lr

08001324 <_cleanup_r>:
 8001324:	4901      	ldr	r1, [pc, #4]	; (800132c <_cleanup_r+0x8>)
 8001326:	f000 b937 	b.w	8001598 <_fwalk_reent>
 800132a:	bf00      	nop
 800132c:	080020ad 	.word	0x080020ad

08001330 <__fp_unlock>:
 8001330:	2000      	movs	r0, #0
 8001332:	4770      	bx	lr

08001334 <__sfmoreglue>:
 8001334:	b570      	push	{r4, r5, r6, lr}
 8001336:	2268      	movs	r2, #104	; 0x68
 8001338:	1e4d      	subs	r5, r1, #1
 800133a:	fb02 f505 	mul.w	r5, r2, r5
 800133e:	460e      	mov	r6, r1
 8001340:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001344:	f7ff ff50 	bl	80011e8 <_malloc_r>
 8001348:	4604      	mov	r4, r0
 800134a:	b140      	cbz	r0, 800135e <__sfmoreglue+0x2a>
 800134c:	2100      	movs	r1, #0
 800134e:	300c      	adds	r0, #12
 8001350:	e9c4 1600 	strd	r1, r6, [r4]
 8001354:	60a0      	str	r0, [r4, #8]
 8001356:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800135a:	f7ff fe91 	bl	8001080 <memset>
 800135e:	4620      	mov	r0, r4
 8001360:	bd70      	pop	{r4, r5, r6, pc}
 8001362:	bf00      	nop

08001364 <__sfp>:
 8001364:	4b27      	ldr	r3, [pc, #156]	; (8001404 <__sfp+0xa0>)
 8001366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800136a:	681e      	ldr	r6, [r3, #0]
 800136c:	69b3      	ldr	r3, [r6, #24]
 800136e:	4607      	mov	r7, r0
 8001370:	b353      	cbz	r3, 80013c8 <__sfp+0x64>
 8001372:	3648      	adds	r6, #72	; 0x48
 8001374:	f04f 0804 	mov.w	r8, #4
 8001378:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800137c:	3b01      	subs	r3, #1
 800137e:	d504      	bpl.n	800138a <__sfp+0x26>
 8001380:	e01e      	b.n	80013c0 <__sfp+0x5c>
 8001382:	1c5a      	adds	r2, r3, #1
 8001384:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8001388:	d01a      	beq.n	80013c0 <__sfp+0x5c>
 800138a:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800138e:	3b01      	subs	r3, #1
 8001390:	2d00      	cmp	r5, #0
 8001392:	d1f6      	bne.n	8001382 <__sfp+0x1e>
 8001394:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <__sfp+0xa4>)
 8001396:	6665      	str	r5, [r4, #100]	; 0x64
 8001398:	e9c4 5500 	strd	r5, r5, [r4]
 800139c:	e9c4 5302 	strd	r5, r3, [r4, #8]
 80013a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80013a4:	61a5      	str	r5, [r4, #24]
 80013a6:	2208      	movs	r2, #8
 80013a8:	4629      	mov	r1, r5
 80013aa:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80013ae:	f7ff fe67 	bl	8001080 <memset>
 80013b2:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80013b6:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80013ba:	4620      	mov	r0, r4
 80013bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013c0:	6835      	ldr	r5, [r6, #0]
 80013c2:	b12d      	cbz	r5, 80013d0 <__sfp+0x6c>
 80013c4:	462e      	mov	r6, r5
 80013c6:	e7d7      	b.n	8001378 <__sfp+0x14>
 80013c8:	4630      	mov	r0, r6
 80013ca:	f000 f81f 	bl	800140c <__sinit.part.0>
 80013ce:	e7d0      	b.n	8001372 <__sfp+0xe>
 80013d0:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80013d4:	4638      	mov	r0, r7
 80013d6:	f7ff ff07 	bl	80011e8 <_malloc_r>
 80013da:	4604      	mov	r4, r0
 80013dc:	b168      	cbz	r0, 80013fa <__sfp+0x96>
 80013de:	6005      	str	r5, [r0, #0]
 80013e0:	f8c0 8004 	str.w	r8, [r0, #4]
 80013e4:	300c      	adds	r0, #12
 80013e6:	4629      	mov	r1, r5
 80013e8:	60a0      	str	r0, [r4, #8]
 80013ea:	4625      	mov	r5, r4
 80013ec:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80013f0:	f7ff fe46 	bl	8001080 <memset>
 80013f4:	6034      	str	r4, [r6, #0]
 80013f6:	462e      	mov	r6, r5
 80013f8:	e7be      	b.n	8001378 <__sfp+0x14>
 80013fa:	230c      	movs	r3, #12
 80013fc:	6030      	str	r0, [r6, #0]
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	e7db      	b.n	80013ba <__sfp+0x56>
 8001402:	bf00      	nop
 8001404:	0800af08 	.word	0x0800af08
 8001408:	ffff0001 	.word	0xffff0001

0800140c <__sinit.part.0>:
 800140c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001410:	4b34      	ldr	r3, [pc, #208]	; (80014e4 <__sinit.part.0+0xd8>)
 8001412:	4935      	ldr	r1, [pc, #212]	; (80014e8 <__sinit.part.0+0xdc>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	6281      	str	r1, [r0, #40]	; 0x28
 8001418:	4290      	cmp	r0, r2
 800141a:	f04f 0300 	mov.w	r3, #0
 800141e:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001422:	6503      	str	r3, [r0, #80]	; 0x50
 8001424:	bf04      	itt	eq
 8001426:	2301      	moveq	r3, #1
 8001428:	6183      	streq	r3, [r0, #24]
 800142a:	4605      	mov	r5, r0
 800142c:	f7ff ff9a 	bl	8001364 <__sfp>
 8001430:	6068      	str	r0, [r5, #4]
 8001432:	4628      	mov	r0, r5
 8001434:	f7ff ff96 	bl	8001364 <__sfp>
 8001438:	60a8      	str	r0, [r5, #8]
 800143a:	4628      	mov	r0, r5
 800143c:	f7ff ff92 	bl	8001364 <__sfp>
 8001440:	686f      	ldr	r7, [r5, #4]
 8001442:	60e8      	str	r0, [r5, #12]
 8001444:	2400      	movs	r4, #0
 8001446:	2304      	movs	r3, #4
 8001448:	e9c7 4302 	strd	r4, r3, [r7, #8]
 800144c:	2208      	movs	r2, #8
 800144e:	4621      	mov	r1, r4
 8001450:	e9c7 4400 	strd	r4, r4, [r7]
 8001454:	e9c7 4404 	strd	r4, r4, [r7, #16]
 8001458:	667c      	str	r4, [r7, #100]	; 0x64
 800145a:	61bc      	str	r4, [r7, #24]
 800145c:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8001460:	f7ff fe0e 	bl	8001080 <memset>
 8001464:	f8df b08c 	ldr.w	fp, [pc, #140]	; 80014f4 <__sinit.part.0+0xe8>
 8001468:	68ae      	ldr	r6, [r5, #8]
 800146a:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80014f8 <__sinit.part.0+0xec>
 800146e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80014fc <__sinit.part.0+0xf0>
 8001472:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8001500 <__sinit.part.0+0xf4>
 8001476:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <__sinit.part.0+0xe0>)
 8001478:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
 800147c:	e9c7 7b08 	strd	r7, fp, [r7, #32]
 8001480:	f8c7 902c 	str.w	r9, [r7, #44]	; 0x2c
 8001484:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
 8001488:	2208      	movs	r2, #8
 800148a:	60f3      	str	r3, [r6, #12]
 800148c:	e9c6 4400 	strd	r4, r4, [r6]
 8001490:	e9c6 4404 	strd	r4, r4, [r6, #16]
 8001494:	6674      	str	r4, [r6, #100]	; 0x64
 8001496:	60b4      	str	r4, [r6, #8]
 8001498:	61b4      	str	r4, [r6, #24]
 800149a:	4621      	mov	r1, r4
 800149c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 80014a0:	f7ff fdee 	bl	8001080 <memset>
 80014a4:	e9c6 6b08 	strd	r6, fp, [r6, #32]
 80014a8:	e9c6 a90a 	strd	sl, r9, [r6, #40]	; 0x28
 80014ac:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
 80014b0:	68ee      	ldr	r6, [r5, #12]
 80014b2:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <__sinit.part.0+0xe4>)
 80014b4:	60f3      	str	r3, [r6, #12]
 80014b6:	e9c6 4400 	strd	r4, r4, [r6]
 80014ba:	e9c6 4404 	strd	r4, r4, [r6, #16]
 80014be:	6674      	str	r4, [r6, #100]	; 0x64
 80014c0:	60b4      	str	r4, [r6, #8]
 80014c2:	61b4      	str	r4, [r6, #24]
 80014c4:	4621      	mov	r1, r4
 80014c6:	2208      	movs	r2, #8
 80014c8:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 80014cc:	f7ff fdd8 	bl	8001080 <memset>
 80014d0:	2301      	movs	r3, #1
 80014d2:	e9c6 6b08 	strd	r6, fp, [r6, #32]
 80014d6:	e9c6 980b 	strd	r9, r8, [r6, #44]	; 0x2c
 80014da:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
 80014de:	61ab      	str	r3, [r5, #24]
 80014e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014e4:	0800af08 	.word	0x0800af08
 80014e8:	08001325 	.word	0x08001325
 80014ec:	00010009 	.word	0x00010009
 80014f0:	00020012 	.word	0x00020012
 80014f4:	08001ced 	.word	0x08001ced
 80014f8:	08001d15 	.word	0x08001d15
 80014fc:	08001d55 	.word	0x08001d55
 8001500:	08001d75 	.word	0x08001d75

08001504 <_cleanup>:
 8001504:	4b02      	ldr	r3, [pc, #8]	; (8001510 <_cleanup+0xc>)
 8001506:	4903      	ldr	r1, [pc, #12]	; (8001514 <_cleanup+0x10>)
 8001508:	6818      	ldr	r0, [r3, #0]
 800150a:	f000 b845 	b.w	8001598 <_fwalk_reent>
 800150e:	bf00      	nop
 8001510:	0800af08 	.word	0x0800af08
 8001514:	080020ad 	.word	0x080020ad

08001518 <__sinit>:
 8001518:	6983      	ldr	r3, [r0, #24]
 800151a:	b903      	cbnz	r3, 800151e <__sinit+0x6>
 800151c:	e776      	b.n	800140c <__sinit.part.0>
 800151e:	4770      	bx	lr

08001520 <__sfp_lock_acquire>:
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop

08001524 <__sfp_lock_release>:
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop

08001528 <__sinit_lock_acquire>:
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop

0800152c <__sinit_lock_release>:
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop

08001530 <__fp_lock_all>:
 8001530:	4b02      	ldr	r3, [pc, #8]	; (800153c <__fp_lock_all+0xc>)
 8001532:	4903      	ldr	r1, [pc, #12]	; (8001540 <__fp_lock_all+0x10>)
 8001534:	6818      	ldr	r0, [r3, #0]
 8001536:	f000 b80f 	b.w	8001558 <_fwalk>
 800153a:	bf00      	nop
 800153c:	20000004 	.word	0x20000004
 8001540:	08001321 	.word	0x08001321

08001544 <__fp_unlock_all>:
 8001544:	4b02      	ldr	r3, [pc, #8]	; (8001550 <__fp_unlock_all+0xc>)
 8001546:	4903      	ldr	r1, [pc, #12]	; (8001554 <__fp_unlock_all+0x10>)
 8001548:	6818      	ldr	r0, [r3, #0]
 800154a:	f000 b805 	b.w	8001558 <_fwalk>
 800154e:	bf00      	nop
 8001550:	20000004 	.word	0x20000004
 8001554:	08001331 	.word	0x08001331

08001558 <_fwalk>:
 8001558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800155c:	4688      	mov	r8, r1
 800155e:	f100 0748 	add.w	r7, r0, #72	; 0x48
 8001562:	2600      	movs	r6, #0
 8001564:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 8001568:	3d01      	subs	r5, #1
 800156a:	d40f      	bmi.n	800158c <_fwalk+0x34>
 800156c:	89a3      	ldrh	r3, [r4, #12]
 800156e:	2b01      	cmp	r3, #1
 8001570:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8001574:	d906      	bls.n	8001584 <_fwalk+0x2c>
 8001576:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800157a:	3301      	adds	r3, #1
 800157c:	4620      	mov	r0, r4
 800157e:	d001      	beq.n	8001584 <_fwalk+0x2c>
 8001580:	47c0      	blx	r8
 8001582:	4306      	orrs	r6, r0
 8001584:	1c6b      	adds	r3, r5, #1
 8001586:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800158a:	d1ef      	bne.n	800156c <_fwalk+0x14>
 800158c:	683f      	ldr	r7, [r7, #0]
 800158e:	2f00      	cmp	r7, #0
 8001590:	d1e8      	bne.n	8001564 <_fwalk+0xc>
 8001592:	4630      	mov	r0, r6
 8001594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001598 <_fwalk_reent>:
 8001598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800159c:	4607      	mov	r7, r0
 800159e:	4688      	mov	r8, r1
 80015a0:	f100 0648 	add.w	r6, r0, #72	; 0x48
 80015a4:	f04f 0900 	mov.w	r9, #0
 80015a8:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 80015ac:	3d01      	subs	r5, #1
 80015ae:	d411      	bmi.n	80015d4 <_fwalk_reent+0x3c>
 80015b0:	89a3      	ldrh	r3, [r4, #12]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80015b8:	d908      	bls.n	80015cc <_fwalk_reent+0x34>
 80015ba:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80015be:	3301      	adds	r3, #1
 80015c0:	4621      	mov	r1, r4
 80015c2:	d003      	beq.n	80015cc <_fwalk_reent+0x34>
 80015c4:	4638      	mov	r0, r7
 80015c6:	47c0      	blx	r8
 80015c8:	ea49 0900 	orr.w	r9, r9, r0
 80015cc:	1c6b      	adds	r3, r5, #1
 80015ce:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80015d2:	d1ed      	bne.n	80015b0 <_fwalk_reent+0x18>
 80015d4:	6836      	ldr	r6, [r6, #0]
 80015d6:	2e00      	cmp	r6, #0
 80015d8:	d1e6      	bne.n	80015a8 <_fwalk_reent+0x10>
 80015da:	4648      	mov	r0, r9
 80015dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080015e0 <__malloc_lock>:
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop

080015e4 <__malloc_unlock>:
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop

080015e8 <__sfputc_r>:
 80015e8:	6893      	ldr	r3, [r2, #8]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	6093      	str	r3, [r2, #8]
 80015f0:	da11      	bge.n	8001616 <__sfputc_r+0x2e>
 80015f2:	b410      	push	{r4}
 80015f4:	6994      	ldr	r4, [r2, #24]
 80015f6:	42a3      	cmp	r3, r4
 80015f8:	db09      	blt.n	800160e <__sfputc_r+0x26>
 80015fa:	290a      	cmp	r1, #10
 80015fc:	d007      	beq.n	800160e <__sfputc_r+0x26>
 80015fe:	6813      	ldr	r3, [r2, #0]
 8001600:	1c58      	adds	r0, r3, #1
 8001602:	6010      	str	r0, [r2, #0]
 8001604:	7019      	strb	r1, [r3, #0]
 8001606:	4608      	mov	r0, r1
 8001608:	f85d 4b04 	ldr.w	r4, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001612:	f000 bbb3 	b.w	8001d7c <__swbuf_r>
 8001616:	6813      	ldr	r3, [r2, #0]
 8001618:	1c58      	adds	r0, r3, #1
 800161a:	6010      	str	r0, [r2, #0]
 800161c:	7019      	strb	r1, [r3, #0]
 800161e:	4608      	mov	r0, r1
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop

08001624 <__sfputs_r>:
 8001624:	b19b      	cbz	r3, 800164e <__sfputs_r+0x2a>
 8001626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001628:	4413      	add	r3, r2
 800162a:	4606      	mov	r6, r0
 800162c:	460f      	mov	r7, r1
 800162e:	1e54      	subs	r4, r2, #1
 8001630:	1e5d      	subs	r5, r3, #1
 8001632:	e001      	b.n	8001638 <__sfputs_r+0x14>
 8001634:	42ac      	cmp	r4, r5
 8001636:	d008      	beq.n	800164a <__sfputs_r+0x26>
 8001638:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800163c:	463a      	mov	r2, r7
 800163e:	4630      	mov	r0, r6
 8001640:	f7ff ffd2 	bl	80015e8 <__sfputc_r>
 8001644:	1c43      	adds	r3, r0, #1
 8001646:	d1f5      	bne.n	8001634 <__sfputs_r+0x10>
 8001648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800164a:	2000      	movs	r0, #0
 800164c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800164e:	2000      	movs	r0, #0
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop

08001654 <__sprint_r>:
 8001654:	6893      	ldr	r3, [r2, #8]
 8001656:	b510      	push	{r4, lr}
 8001658:	4614      	mov	r4, r2
 800165a:	b913      	cbnz	r3, 8001662 <__sprint_r+0xe>
 800165c:	6053      	str	r3, [r2, #4]
 800165e:	4618      	mov	r0, r3
 8001660:	bd10      	pop	{r4, pc}
 8001662:	f000 fd8d 	bl	8002180 <__sfvwrite_r>
 8001666:	2300      	movs	r3, #0
 8001668:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800166c:	bd10      	pop	{r4, pc}
 800166e:	bf00      	nop

08001670 <_vfiprintf_r>:
 8001670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001674:	4688      	mov	r8, r1
 8001676:	b09f      	sub	sp, #124	; 0x7c
 8001678:	4615      	mov	r5, r2
 800167a:	461c      	mov	r4, r3
 800167c:	4681      	mov	r9, r0
 800167e:	b118      	cbz	r0, 8001688 <_vfiprintf_r+0x18>
 8001680:	6983      	ldr	r3, [r0, #24]
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 80a2 	beq.w	80017cc <_vfiprintf_r+0x15c>
 8001688:	4b92      	ldr	r3, [pc, #584]	; (80018d4 <_vfiprintf_r+0x264>)
 800168a:	4598      	cmp	r8, r3
 800168c:	f000 80a4 	beq.w	80017d8 <_vfiprintf_r+0x168>
 8001690:	4b91      	ldr	r3, [pc, #580]	; (80018d8 <_vfiprintf_r+0x268>)
 8001692:	4598      	cmp	r8, r3
 8001694:	f000 80b1 	beq.w	80017fa <_vfiprintf_r+0x18a>
 8001698:	4b90      	ldr	r3, [pc, #576]	; (80018dc <_vfiprintf_r+0x26c>)
 800169a:	4598      	cmp	r8, r3
 800169c:	bf08      	it	eq
 800169e:	f8d9 800c 	ldreq.w	r8, [r9, #12]
 80016a2:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80016a6:	0718      	lsls	r0, r3, #28
 80016a8:	f140 809d 	bpl.w	80017e6 <_vfiprintf_r+0x176>
 80016ac:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 8098 	beq.w	80017e6 <_vfiprintf_r+0x176>
 80016b6:	2300      	movs	r3, #0
 80016b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80016ba:	7829      	ldrb	r1, [r5, #0]
 80016bc:	4e88      	ldr	r6, [pc, #544]	; (80018e0 <_vfiprintf_r+0x270>)
 80016be:	9405      	str	r4, [sp, #20]
 80016c0:	2320      	movs	r3, #32
 80016c2:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 80016c6:	2330      	movs	r3, #48	; 0x30
 80016c8:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 80016cc:	2701      	movs	r7, #1
 80016ce:	2900      	cmp	r1, #0
 80016d0:	d074      	beq.n	80017bc <_vfiprintf_r+0x14c>
 80016d2:	462c      	mov	r4, r5
 80016d4:	460b      	mov	r3, r1
 80016d6:	e004      	b.n	80016e2 <_vfiprintf_r+0x72>
 80016d8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80016dc:	2b00      	cmp	r3, #0
 80016de:	f000 808f 	beq.w	8001800 <_vfiprintf_r+0x190>
 80016e2:	2b25      	cmp	r3, #37	; 0x25
 80016e4:	d1f8      	bne.n	80016d8 <_vfiprintf_r+0x68>
 80016e6:	ebb4 0b05 	subs.w	fp, r4, r5
 80016ea:	f040 808c 	bne.w	8001806 <_vfiprintf_r+0x196>
 80016ee:	7823      	ldrb	r3, [r4, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d063      	beq.n	80017bc <_vfiprintf_r+0x14c>
 80016f4:	2300      	movs	r3, #0
 80016f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016fa:	e9cd 2307 	strd	r2, r3, [sp, #28]
 80016fe:	9306      	str	r3, [sp, #24]
 8001700:	9309      	str	r3, [sp, #36]	; 0x24
 8001702:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8001706:	931c      	str	r3, [sp, #112]	; 0x70
 8001708:	3401      	adds	r4, #1
 800170a:	e004      	b.n	8001716 <_vfiprintf_r+0xa6>
 800170c:	9a06      	ldr	r2, [sp, #24]
 800170e:	fa07 f303 	lsl.w	r3, r7, r3
 8001712:	4313      	orrs	r3, r2
 8001714:	9306      	str	r3, [sp, #24]
 8001716:	4625      	mov	r5, r4
 8001718:	2205      	movs	r2, #5
 800171a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800171e:	4630      	mov	r0, r6
 8001720:	f000 ff4e 	bl	80025c0 <memchr>
 8001724:	1b83      	subs	r3, r0, r6
 8001726:	2800      	cmp	r0, #0
 8001728:	d1f0      	bne.n	800170c <_vfiprintf_r+0x9c>
 800172a:	9b06      	ldr	r3, [sp, #24]
 800172c:	06d9      	lsls	r1, r3, #27
 800172e:	bf44      	itt	mi
 8001730:	2220      	movmi	r2, #32
 8001732:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 8001736:	7829      	ldrb	r1, [r5, #0]
 8001738:	071a      	lsls	r2, r3, #28
 800173a:	bf44      	itt	mi
 800173c:	222b      	movmi	r2, #43	; 0x2b
 800173e:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 8001742:	292a      	cmp	r1, #42	; 0x2a
 8001744:	d170      	bne.n	8001828 <_vfiprintf_r+0x1b8>
 8001746:	9a05      	ldr	r2, [sp, #20]
 8001748:	6811      	ldr	r1, [r2, #0]
 800174a:	3204      	adds	r2, #4
 800174c:	2900      	cmp	r1, #0
 800174e:	9205      	str	r2, [sp, #20]
 8001750:	f2c0 809b 	blt.w	800188a <_vfiprintf_r+0x21a>
 8001754:	9109      	str	r1, [sp, #36]	; 0x24
 8001756:	7869      	ldrb	r1, [r5, #1]
 8001758:	3501      	adds	r5, #1
 800175a:	292e      	cmp	r1, #46	; 0x2e
 800175c:	d076      	beq.n	800184c <_vfiprintf_r+0x1dc>
 800175e:	4c61      	ldr	r4, [pc, #388]	; (80018e4 <_vfiprintf_r+0x274>)
 8001760:	2203      	movs	r2, #3
 8001762:	4620      	mov	r0, r4
 8001764:	f000 ff2c 	bl	80025c0 <memchr>
 8001768:	b138      	cbz	r0, 800177a <_vfiprintf_r+0x10a>
 800176a:	9b06      	ldr	r3, [sp, #24]
 800176c:	1b00      	subs	r0, r0, r4
 800176e:	2440      	movs	r4, #64	; 0x40
 8001770:	fa04 f000 	lsl.w	r0, r4, r0
 8001774:	4303      	orrs	r3, r0
 8001776:	9306      	str	r3, [sp, #24]
 8001778:	3501      	adds	r5, #1
 800177a:	f815 1b01 	ldrb.w	r1, [r5], #1
 800177e:	485a      	ldr	r0, [pc, #360]	; (80018e8 <_vfiprintf_r+0x278>)
 8001780:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 8001784:	2206      	movs	r2, #6
 8001786:	f000 ff1b 	bl	80025c0 <memchr>
 800178a:	2800      	cmp	r0, #0
 800178c:	f000 8083 	beq.w	8001896 <_vfiprintf_r+0x226>
 8001790:	4b56      	ldr	r3, [pc, #344]	; (80018ec <_vfiprintf_r+0x27c>)
 8001792:	2b00      	cmp	r3, #0
 8001794:	d06d      	beq.n	8001872 <_vfiprintf_r+0x202>
 8001796:	aa05      	add	r2, sp, #20
 8001798:	9200      	str	r2, [sp, #0]
 800179a:	4b55      	ldr	r3, [pc, #340]	; (80018f0 <_vfiprintf_r+0x280>)
 800179c:	4642      	mov	r2, r8
 800179e:	a906      	add	r1, sp, #24
 80017a0:	4648      	mov	r0, r9
 80017a2:	f3af 8000 	nop.w
 80017a6:	9003      	str	r0, [sp, #12]
 80017a8:	9b03      	ldr	r3, [sp, #12]
 80017aa:	3301      	adds	r3, #1
 80017ac:	d006      	beq.n	80017bc <_vfiprintf_r+0x14c>
 80017ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80017b0:	9a03      	ldr	r2, [sp, #12]
 80017b2:	7829      	ldrb	r1, [r5, #0]
 80017b4:	4413      	add	r3, r2
 80017b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80017b8:	2900      	cmp	r1, #0
 80017ba:	d18a      	bne.n	80016d2 <_vfiprintf_r+0x62>
 80017bc:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80017c0:	065b      	lsls	r3, r3, #25
 80017c2:	d417      	bmi.n	80017f4 <_vfiprintf_r+0x184>
 80017c4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80017c6:	b01f      	add	sp, #124	; 0x7c
 80017c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017cc:	f7ff fea4 	bl	8001518 <__sinit>
 80017d0:	4b40      	ldr	r3, [pc, #256]	; (80018d4 <_vfiprintf_r+0x264>)
 80017d2:	4598      	cmp	r8, r3
 80017d4:	f47f af5c 	bne.w	8001690 <_vfiprintf_r+0x20>
 80017d8:	f8d9 8004 	ldr.w	r8, [r9, #4]
 80017dc:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80017e0:	0718      	lsls	r0, r3, #28
 80017e2:	f53f af63 	bmi.w	80016ac <_vfiprintf_r+0x3c>
 80017e6:	4641      	mov	r1, r8
 80017e8:	4648      	mov	r0, r9
 80017ea:	f000 fb41 	bl	8001e70 <__swsetup_r>
 80017ee:	2800      	cmp	r0, #0
 80017f0:	f43f af61 	beq.w	80016b6 <_vfiprintf_r+0x46>
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017f8:	e7e5      	b.n	80017c6 <_vfiprintf_r+0x156>
 80017fa:	f8d9 8008 	ldr.w	r8, [r9, #8]
 80017fe:	e750      	b.n	80016a2 <_vfiprintf_r+0x32>
 8001800:	ebb4 0b05 	subs.w	fp, r4, r5
 8001804:	d0da      	beq.n	80017bc <_vfiprintf_r+0x14c>
 8001806:	46aa      	mov	sl, r5
 8001808:	f1c5 0501 	rsb	r5, r5, #1
 800180c:	e003      	b.n	8001816 <_vfiprintf_r+0x1a6>
 800180e:	4593      	cmp	fp, r2
 8001810:	d936      	bls.n	8001880 <_vfiprintf_r+0x210>
 8001812:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8001816:	4642      	mov	r2, r8
 8001818:	4648      	mov	r0, r9
 800181a:	f7ff fee5 	bl	80015e8 <__sfputc_r>
 800181e:	3001      	adds	r0, #1
 8001820:	eb05 020a 	add.w	r2, r5, sl
 8001824:	d1f3      	bne.n	800180e <_vfiprintf_r+0x19e>
 8001826:	e7c9      	b.n	80017bc <_vfiprintf_r+0x14c>
 8001828:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800182c:	2a09      	cmp	r2, #9
 800182e:	d894      	bhi.n	800175a <_vfiprintf_r+0xea>
 8001830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001832:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8001836:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800183a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800183e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8001842:	2a09      	cmp	r2, #9
 8001844:	d9f5      	bls.n	8001832 <_vfiprintf_r+0x1c2>
 8001846:	292e      	cmp	r1, #46	; 0x2e
 8001848:	9309      	str	r3, [sp, #36]	; 0x24
 800184a:	d188      	bne.n	800175e <_vfiprintf_r+0xee>
 800184c:	7869      	ldrb	r1, [r5, #1]
 800184e:	292a      	cmp	r1, #42	; 0x2a
 8001850:	d12b      	bne.n	80018aa <_vfiprintf_r+0x23a>
 8001852:	9b05      	ldr	r3, [sp, #20]
 8001854:	78a9      	ldrb	r1, [r5, #2]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	9207      	str	r2, [sp, #28]
 800185a:	3304      	adds	r3, #4
 800185c:	2a00      	cmp	r2, #0
 800185e:	f105 0002 	add.w	r0, r5, #2
 8001862:	9305      	str	r3, [sp, #20]
 8001864:	bfb8      	it	lt
 8001866:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800186a:	4605      	mov	r5, r0
 800186c:	bfb8      	it	lt
 800186e:	9307      	strlt	r3, [sp, #28]
 8001870:	e775      	b.n	800175e <_vfiprintf_r+0xee>
 8001872:	9b05      	ldr	r3, [sp, #20]
 8001874:	3307      	adds	r3, #7
 8001876:	f023 0307 	bic.w	r3, r3, #7
 800187a:	3308      	adds	r3, #8
 800187c:	9305      	str	r3, [sp, #20]
 800187e:	e796      	b.n	80017ae <_vfiprintf_r+0x13e>
 8001880:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001882:	7823      	ldrb	r3, [r4, #0]
 8001884:	445a      	add	r2, fp
 8001886:	920b      	str	r2, [sp, #44]	; 0x2c
 8001888:	e732      	b.n	80016f0 <_vfiprintf_r+0x80>
 800188a:	4249      	negs	r1, r1
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	9109      	str	r1, [sp, #36]	; 0x24
 8001892:	9306      	str	r3, [sp, #24]
 8001894:	e75f      	b.n	8001756 <_vfiprintf_r+0xe6>
 8001896:	aa05      	add	r2, sp, #20
 8001898:	9200      	str	r2, [sp, #0]
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <_vfiprintf_r+0x280>)
 800189c:	4642      	mov	r2, r8
 800189e:	a906      	add	r1, sp, #24
 80018a0:	4648      	mov	r0, r9
 80018a2:	f000 f8cb 	bl	8001a3c <_printf_i>
 80018a6:	9003      	str	r0, [sp, #12]
 80018a8:	e77e      	b.n	80017a8 <_vfiprintf_r+0x138>
 80018aa:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80018ae:	2300      	movs	r3, #0
 80018b0:	2a09      	cmp	r2, #9
 80018b2:	9307      	str	r3, [sp, #28]
 80018b4:	f105 0501 	add.w	r5, r5, #1
 80018b8:	f63f af51 	bhi.w	800175e <_vfiprintf_r+0xee>
 80018bc:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80018c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80018c4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80018c8:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80018cc:	2a09      	cmp	r2, #9
 80018ce:	d9f5      	bls.n	80018bc <_vfiprintf_r+0x24c>
 80018d0:	9307      	str	r3, [sp, #28]
 80018d2:	e744      	b.n	800175e <_vfiprintf_r+0xee>
 80018d4:	0800af4c 	.word	0x0800af4c
 80018d8:	0800af2c 	.word	0x0800af2c
 80018dc:	0800af0c 	.word	0x0800af0c
 80018e0:	0800af74 	.word	0x0800af74
 80018e4:	0800af7c 	.word	0x0800af7c
 80018e8:	0800af80 	.word	0x0800af80
 80018ec:	00000000 	.word	0x00000000
 80018f0:	08001625 	.word	0x08001625

080018f4 <vfiprintf>:
 80018f4:	b410      	push	{r4}
 80018f6:	4c05      	ldr	r4, [pc, #20]	; (800190c <vfiprintf+0x18>)
 80018f8:	4684      	mov	ip, r0
 80018fa:	4613      	mov	r3, r2
 80018fc:	6820      	ldr	r0, [r4, #0]
 80018fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001902:	460a      	mov	r2, r1
 8001904:	4661      	mov	r1, ip
 8001906:	f7ff beb3 	b.w	8001670 <_vfiprintf_r>
 800190a:	bf00      	nop
 800190c:	20000004 	.word	0x20000004

08001910 <_printf_common>:
 8001910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001914:	4692      	mov	sl, r2
 8001916:	461f      	mov	r7, r3
 8001918:	690a      	ldr	r2, [r1, #16]
 800191a:	688b      	ldr	r3, [r1, #8]
 800191c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8001920:	429a      	cmp	r2, r3
 8001922:	bfb8      	it	lt
 8001924:	461a      	movlt	r2, r3
 8001926:	f8ca 2000 	str.w	r2, [sl]
 800192a:	f891 3043 	ldrb.w	r3, [r1, #67]	; 0x43
 800192e:	460c      	mov	r4, r1
 8001930:	4606      	mov	r6, r0
 8001932:	b113      	cbz	r3, 800193a <_printf_common+0x2a>
 8001934:	3201      	adds	r2, #1
 8001936:	f8ca 2000 	str.w	r2, [sl]
 800193a:	6822      	ldr	r2, [r4, #0]
 800193c:	0691      	lsls	r1, r2, #26
 800193e:	d55d      	bpl.n	80019fc <_printf_common+0xec>
 8001940:	f8da 3000 	ldr.w	r3, [sl]
 8001944:	3302      	adds	r3, #2
 8001946:	f8ca 3000 	str.w	r3, [sl]
 800194a:	6822      	ldr	r2, [r4, #0]
 800194c:	f012 0f06 	tst.w	r2, #6
 8001950:	4611      	mov	r1, r2
 8001952:	d11e      	bne.n	8001992 <_printf_common+0x82>
 8001954:	68e1      	ldr	r1, [r4, #12]
 8001956:	1acb      	subs	r3, r1, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	bfd8      	it	le
 800195c:	4611      	movle	r1, r2
 800195e:	dd18      	ble.n	8001992 <_printf_common+0x82>
 8001960:	f104 0b19 	add.w	fp, r4, #25
 8001964:	f04f 0800 	mov.w	r8, #0
 8001968:	e005      	b.n	8001976 <_printf_common+0x66>
 800196a:	68e5      	ldr	r5, [r4, #12]
 800196c:	f8da 3000 	ldr.w	r3, [sl]
 8001970:	1aed      	subs	r5, r5, r3
 8001972:	4545      	cmp	r5, r8
 8001974:	dd0c      	ble.n	8001990 <_printf_common+0x80>
 8001976:	2301      	movs	r3, #1
 8001978:	465a      	mov	r2, fp
 800197a:	4639      	mov	r1, r7
 800197c:	4630      	mov	r0, r6
 800197e:	47c8      	blx	r9
 8001980:	3001      	adds	r0, #1
 8001982:	f108 0801 	add.w	r8, r8, #1
 8001986:	d1f0      	bne.n	800196a <_printf_common+0x5a>
 8001988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800198c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001990:	6821      	ldr	r1, [r4, #0]
 8001992:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001996:	3b00      	subs	r3, #0
 8001998:	bf18      	it	ne
 800199a:	2301      	movne	r3, #1
 800199c:	068a      	lsls	r2, r1, #26
 800199e:	d50a      	bpl.n	80019b6 <_printf_common+0xa6>
 80019a0:	18e1      	adds	r1, r4, r3
 80019a2:	1c5a      	adds	r2, r3, #1
 80019a4:	2030      	movs	r0, #48	; 0x30
 80019a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80019aa:	4422      	add	r2, r4
 80019ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80019b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80019b4:	3302      	adds	r3, #2
 80019b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80019ba:	4639      	mov	r1, r7
 80019bc:	4630      	mov	r0, r6
 80019be:	47c8      	blx	r9
 80019c0:	3001      	adds	r0, #1
 80019c2:	d0e1      	beq.n	8001988 <_printf_common+0x78>
 80019c4:	6823      	ldr	r3, [r4, #0]
 80019c6:	f003 0306 	and.w	r3, r3, #6
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d01d      	beq.n	8001a0a <_printf_common+0xfa>
 80019ce:	68a3      	ldr	r3, [r4, #8]
 80019d0:	6922      	ldr	r2, [r4, #16]
 80019d2:	4293      	cmp	r3, r2
 80019d4:	dd25      	ble.n	8001a22 <_printf_common+0x112>
 80019d6:	f04f 0800 	mov.w	r8, #0
 80019da:	1a9b      	subs	r3, r3, r2
 80019dc:	4498      	add	r8, r3
 80019de:	341a      	adds	r4, #26
 80019e0:	2500      	movs	r5, #0
 80019e2:	e001      	b.n	80019e8 <_printf_common+0xd8>
 80019e4:	4545      	cmp	r5, r8
 80019e6:	da1c      	bge.n	8001a22 <_printf_common+0x112>
 80019e8:	2301      	movs	r3, #1
 80019ea:	4622      	mov	r2, r4
 80019ec:	4639      	mov	r1, r7
 80019ee:	4630      	mov	r0, r6
 80019f0:	47c8      	blx	r9
 80019f2:	3001      	adds	r0, #1
 80019f4:	f105 0501 	add.w	r5, r5, #1
 80019f8:	d1f4      	bne.n	80019e4 <_printf_common+0xd4>
 80019fa:	e7c5      	b.n	8001988 <_printf_common+0x78>
 80019fc:	f012 0f06 	tst.w	r2, #6
 8001a00:	d012      	beq.n	8001a28 <_printf_common+0x118>
 8001a02:	3b00      	subs	r3, #0
 8001a04:	bf18      	it	ne
 8001a06:	2301      	movne	r3, #1
 8001a08:	e7d5      	b.n	80019b6 <_printf_common+0xa6>
 8001a0a:	f8da 3000 	ldr.w	r3, [sl]
 8001a0e:	68e1      	ldr	r1, [r4, #12]
 8001a10:	6922      	ldr	r2, [r4, #16]
 8001a12:	1ac9      	subs	r1, r1, r3
 8001a14:	68a3      	ldr	r3, [r4, #8]
 8001a16:	4293      	cmp	r3, r2
 8001a18:	ea21 78e1 	bic.w	r8, r1, r1, asr #31
 8001a1c:	dcdd      	bgt.n	80019da <_printf_common+0xca>
 8001a1e:	2900      	cmp	r1, #0
 8001a20:	dcdd      	bgt.n	80019de <_printf_common+0xce>
 8001a22:	2000      	movs	r0, #0
 8001a24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a28:	68e1      	ldr	r1, [r4, #12]
 8001a2a:	f8da 3000 	ldr.w	r3, [sl]
 8001a2e:	1acb      	subs	r3, r1, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	bfd8      	it	le
 8001a34:	4611      	movle	r1, r2
 8001a36:	dc93      	bgt.n	8001960 <_printf_common+0x50>
 8001a38:	e7ab      	b.n	8001992 <_printf_common+0x82>
 8001a3a:	bf00      	nop

08001a3c <_printf_i>:
 8001a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a40:	460c      	mov	r4, r1
 8001a42:	b084      	sub	sp, #16
 8001a44:	4690      	mov	r8, r2
 8001a46:	7e22      	ldrb	r2, [r4, #24]
 8001a48:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001a4a:	4607      	mov	r7, r0
 8001a4c:	4699      	mov	r9, r3
 8001a4e:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8001a52:	2a00      	cmp	r2, #0
 8001a54:	d033      	beq.n	8001abe <_printf_i+0x82>
 8001a56:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8001a5a:	b2dd      	uxtb	r5, r3
 8001a5c:	2d20      	cmp	r5, #32
 8001a5e:	d867      	bhi.n	8001b30 <_printf_i+0xf4>
 8001a60:	2b20      	cmp	r3, #32
 8001a62:	d865      	bhi.n	8001b30 <_printf_i+0xf4>
 8001a64:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001a68:	006400de 	.word	0x006400de
 8001a6c:	00640064 	.word	0x00640064
 8001a70:	00640064 	.word	0x00640064
 8001a74:	00640064 	.word	0x00640064
 8001a78:	00640064 	.word	0x00640064
 8001a7c:	00a30064 	.word	0x00a30064
 8001a80:	0064006e 	.word	0x0064006e
 8001a84:	00640064 	.word	0x00640064
 8001a88:	006e0064 	.word	0x006e0064
 8001a8c:	00640064 	.word	0x00640064
 8001a90:	00640064 	.word	0x00640064
 8001a94:	007f0021 	.word	0x007f0021
 8001a98:	006400c0 	.word	0x006400c0
 8001a9c:	00ae0064 	.word	0x00ae0064
 8001aa0:	007f0064 	.word	0x007f0064
 8001aa4:	00640064 	.word	0x00640064
 8001aa8:	00e5      	.short	0x00e5
 8001aaa:	6823      	ldr	r3, [r4, #0]
 8001aac:	061a      	lsls	r2, r3, #24
 8001aae:	f140 8104 	bpl.w	8001cba <_printf_i+0x27e>
 8001ab2:	680b      	ldr	r3, [r1, #0]
 8001ab4:	6962      	ldr	r2, [r4, #20]
 8001ab6:	1d1d      	adds	r5, r3, #4
 8001ab8:	600d      	str	r5, [r1, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	2300      	movs	r3, #0
 8001ac0:	4682      	mov	sl, r0
 8001ac2:	6123      	str	r3, [r4, #16]
 8001ac4:	f8cd 9000 	str.w	r9, [sp]
 8001ac8:	4643      	mov	r3, r8
 8001aca:	aa03      	add	r2, sp, #12
 8001acc:	4621      	mov	r1, r4
 8001ace:	4638      	mov	r0, r7
 8001ad0:	f7ff ff1e 	bl	8001910 <_printf_common>
 8001ad4:	3001      	adds	r0, #1
 8001ad6:	d020      	beq.n	8001b1a <_printf_i+0xde>
 8001ad8:	6923      	ldr	r3, [r4, #16]
 8001ada:	4652      	mov	r2, sl
 8001adc:	4641      	mov	r1, r8
 8001ade:	4638      	mov	r0, r7
 8001ae0:	47c8      	blx	r9
 8001ae2:	3001      	adds	r0, #1
 8001ae4:	d019      	beq.n	8001b1a <_printf_i+0xde>
 8001ae6:	6823      	ldr	r3, [r4, #0]
 8001ae8:	68e0      	ldr	r0, [r4, #12]
 8001aea:	9e03      	ldr	r6, [sp, #12]
 8001aec:	079b      	lsls	r3, r3, #30
 8001aee:	d519      	bpl.n	8001b24 <_printf_i+0xe8>
 8001af0:	1b83      	subs	r3, r0, r6
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	dd16      	ble.n	8001b24 <_printf_i+0xe8>
 8001af6:	f104 0a19 	add.w	sl, r4, #25
 8001afa:	2500      	movs	r5, #0
 8001afc:	e004      	b.n	8001b08 <_printf_i+0xcc>
 8001afe:	68e0      	ldr	r0, [r4, #12]
 8001b00:	9e03      	ldr	r6, [sp, #12]
 8001b02:	1b83      	subs	r3, r0, r6
 8001b04:	42ab      	cmp	r3, r5
 8001b06:	dd0d      	ble.n	8001b24 <_printf_i+0xe8>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	4652      	mov	r2, sl
 8001b0c:	4641      	mov	r1, r8
 8001b0e:	4638      	mov	r0, r7
 8001b10:	47c8      	blx	r9
 8001b12:	3001      	adds	r0, #1
 8001b14:	f105 0501 	add.w	r5, r5, #1
 8001b18:	d1f1      	bne.n	8001afe <_printf_i+0xc2>
 8001b1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b1e:	b004      	add	sp, #16
 8001b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b24:	42b0      	cmp	r0, r6
 8001b26:	bfb8      	it	lt
 8001b28:	4630      	movlt	r0, r6
 8001b2a:	b004      	add	sp, #16
 8001b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b30:	2301      	movs	r3, #1
 8001b32:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001b36:	6123      	str	r3, [r4, #16]
 8001b38:	f104 0a42 	add.w	sl, r4, #66	; 0x42
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b42:	e7bf      	b.n	8001ac4 <_printf_i+0x88>
 8001b44:	6823      	ldr	r3, [r4, #0]
 8001b46:	061a      	lsls	r2, r3, #24
 8001b48:	d402      	bmi.n	8001b50 <_printf_i+0x114>
 8001b4a:	065e      	lsls	r6, r3, #25
 8001b4c:	f100 80c1 	bmi.w	8001cd2 <_printf_i+0x296>
 8001b50:	680d      	ldr	r5, [r1, #0]
 8001b52:	682a      	ldr	r2, [r5, #0]
 8001b54:	3504      	adds	r5, #4
 8001b56:	600d      	str	r5, [r1, #0]
 8001b58:	4615      	mov	r5, r2
 8001b5a:	2a00      	cmp	r2, #0
 8001b5c:	db6b      	blt.n	8001c36 <_printf_i+0x1fa>
 8001b5e:	f8df c184 	ldr.w	ip, [pc, #388]	; 8001ce4 <_printf_i+0x2a8>
 8001b62:	260a      	movs	r6, #10
 8001b64:	e010      	b.n	8001b88 <_printf_i+0x14c>
 8001b66:	6823      	ldr	r3, [r4, #0]
 8001b68:	061d      	lsls	r5, r3, #24
 8001b6a:	f140 809c 	bpl.w	8001ca6 <_printf_i+0x26a>
 8001b6e:	680b      	ldr	r3, [r1, #0]
 8001b70:	1d1d      	adds	r5, r3, #4
 8001b72:	600d      	str	r5, [r1, #0]
 8001b74:	681d      	ldr	r5, [r3, #0]
 8001b76:	f8df c16c 	ldr.w	ip, [pc, #364]	; 8001ce4 <_printf_i+0x2a8>
 8001b7a:	2a6f      	cmp	r2, #111	; 0x6f
 8001b7c:	bf0c      	ite	eq
 8001b7e:	2608      	moveq	r6, #8
 8001b80:	260a      	movne	r6, #10
 8001b82:	2300      	movs	r3, #0
 8001b84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b88:	6862      	ldr	r2, [r4, #4]
 8001b8a:	60a2      	str	r2, [r4, #8]
 8001b8c:	2a00      	cmp	r2, #0
 8001b8e:	db7f      	blt.n	8001c90 <_printf_i+0x254>
 8001b90:	6823      	ldr	r3, [r4, #0]
 8001b92:	f023 0304 	bic.w	r3, r3, #4
 8001b96:	6023      	str	r3, [r4, #0]
 8001b98:	2d00      	cmp	r5, #0
 8001b9a:	d15b      	bne.n	8001c54 <_printf_i+0x218>
 8001b9c:	2a00      	cmp	r2, #0
 8001b9e:	d179      	bne.n	8001c94 <_printf_i+0x258>
 8001ba0:	4682      	mov	sl, r0
 8001ba2:	2e08      	cmp	r6, #8
 8001ba4:	d065      	beq.n	8001c72 <_printf_i+0x236>
 8001ba6:	eba0 000a 	sub.w	r0, r0, sl
 8001baa:	6120      	str	r0, [r4, #16]
 8001bac:	e78a      	b.n	8001ac4 <_printf_i+0x88>
 8001bae:	680b      	ldr	r3, [r1, #0]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	6818      	ldr	r0, [r3, #0]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	600b      	str	r3, [r1, #0]
 8001bb8:	f104 0a42 	add.w	sl, r4, #66	; 0x42
 8001bbc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
 8001bc0:	6122      	str	r2, [r4, #16]
 8001bc2:	e7bb      	b.n	8001b3c <_printf_i+0x100>
 8001bc4:	680b      	ldr	r3, [r1, #0]
 8001bc6:	6862      	ldr	r2, [r4, #4]
 8001bc8:	1d18      	adds	r0, r3, #4
 8001bca:	6008      	str	r0, [r1, #0]
 8001bcc:	f8d3 a000 	ldr.w	sl, [r3]
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4650      	mov	r0, sl
 8001bd4:	f000 fcf4 	bl	80025c0 <memchr>
 8001bd8:	2800      	cmp	r0, #0
 8001bda:	f000 8081 	beq.w	8001ce0 <_printf_i+0x2a4>
 8001bde:	eba0 000a 	sub.w	r0, r0, sl
 8001be2:	6060      	str	r0, [r4, #4]
 8001be4:	6120      	str	r0, [r4, #16]
 8001be6:	e7a9      	b.n	8001b3c <_printf_i+0x100>
 8001be8:	6823      	ldr	r3, [r4, #0]
 8001bea:	f043 0320 	orr.w	r3, r3, #32
 8001bee:	6023      	str	r3, [r4, #0]
 8001bf0:	2278      	movs	r2, #120	; 0x78
 8001bf2:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8001ce8 <_printf_i+0x2ac>
 8001bf6:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001bfa:	680a      	ldr	r2, [r1, #0]
 8001bfc:	1d15      	adds	r5, r2, #4
 8001bfe:	600d      	str	r5, [r1, #0]
 8001c00:	061d      	lsls	r5, r3, #24
 8001c02:	d443      	bmi.n	8001c8c <_printf_i+0x250>
 8001c04:	0659      	lsls	r1, r3, #25
 8001c06:	d541      	bpl.n	8001c8c <_printf_i+0x250>
 8001c08:	8815      	ldrh	r5, [r2, #0]
 8001c0a:	07de      	lsls	r6, r3, #31
 8001c0c:	bf44      	itt	mi
 8001c0e:	f043 0320 	orrmi.w	r3, r3, #32
 8001c12:	6023      	strmi	r3, [r4, #0]
 8001c14:	2d00      	cmp	r5, #0
 8001c16:	d144      	bne.n	8001ca2 <_printf_i+0x266>
 8001c18:	6823      	ldr	r3, [r4, #0]
 8001c1a:	f023 0320 	bic.w	r3, r3, #32
 8001c1e:	6023      	str	r3, [r4, #0]
 8001c20:	2610      	movs	r6, #16
 8001c22:	e7ae      	b.n	8001b82 <_printf_i+0x146>
 8001c24:	2358      	movs	r3, #88	; 0x58
 8001c26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001c2a:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8001ce4 <_printf_i+0x2a8>
 8001c2e:	6823      	ldr	r3, [r4, #0]
 8001c30:	e7e3      	b.n	8001bfa <_printf_i+0x1be>
 8001c32:	6823      	ldr	r3, [r4, #0]
 8001c34:	e7dc      	b.n	8001bf0 <_printf_i+0x1b4>
 8001c36:	6862      	ldr	r2, [r4, #4]
 8001c38:	60a2      	str	r2, [r4, #8]
 8001c3a:	212d      	movs	r1, #45	; 0x2d
 8001c3c:	2a00      	cmp	r2, #0
 8001c3e:	f1c5 0500 	rsb	r5, r5, #0
 8001c42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c46:	db02      	blt.n	8001c4e <_printf_i+0x212>
 8001c48:	f023 0304 	bic.w	r3, r3, #4
 8001c4c:	6023      	str	r3, [r4, #0]
 8001c4e:	f8df c094 	ldr.w	ip, [pc, #148]	; 8001ce4 <_printf_i+0x2a8>
 8001c52:	260a      	movs	r6, #10
 8001c54:	4682      	mov	sl, r0
 8001c56:	fbb5 f3f6 	udiv	r3, r5, r6
 8001c5a:	fb06 5113 	mls	r1, r6, r3, r5
 8001c5e:	462a      	mov	r2, r5
 8001c60:	f81c 1001 	ldrb.w	r1, [ip, r1]
 8001c64:	f80a 1d01 	strb.w	r1, [sl, #-1]!
 8001c68:	42b2      	cmp	r2, r6
 8001c6a:	461d      	mov	r5, r3
 8001c6c:	d2f3      	bcs.n	8001c56 <_printf_i+0x21a>
 8001c6e:	2e08      	cmp	r6, #8
 8001c70:	d199      	bne.n	8001ba6 <_printf_i+0x16a>
 8001c72:	6823      	ldr	r3, [r4, #0]
 8001c74:	07d9      	lsls	r1, r3, #31
 8001c76:	d596      	bpl.n	8001ba6 <_printf_i+0x16a>
 8001c78:	6862      	ldr	r2, [r4, #4]
 8001c7a:	6923      	ldr	r3, [r4, #16]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	dc92      	bgt.n	8001ba6 <_printf_i+0x16a>
 8001c80:	2330      	movs	r3, #48	; 0x30
 8001c82:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8001c86:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8001c8a:	e78c      	b.n	8001ba6 <_printf_i+0x16a>
 8001c8c:	6815      	ldr	r5, [r2, #0]
 8001c8e:	e7bc      	b.n	8001c0a <_printf_i+0x1ce>
 8001c90:	2d00      	cmp	r5, #0
 8001c92:	d1df      	bne.n	8001c54 <_printf_i+0x218>
 8001c94:	f89c 3000 	ldrb.w	r3, [ip]
 8001c98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c9c:	f104 0a42 	add.w	sl, r4, #66	; 0x42
 8001ca0:	e77f      	b.n	8001ba2 <_printf_i+0x166>
 8001ca2:	2610      	movs	r6, #16
 8001ca4:	e76d      	b.n	8001b82 <_printf_i+0x146>
 8001ca6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001caa:	680b      	ldr	r3, [r1, #0]
 8001cac:	f103 0504 	add.w	r5, r3, #4
 8001cb0:	600d      	str	r5, [r1, #0]
 8001cb2:	bf0c      	ite	eq
 8001cb4:	681d      	ldreq	r5, [r3, #0]
 8001cb6:	881d      	ldrhne	r5, [r3, #0]
 8001cb8:	e75d      	b.n	8001b76 <_printf_i+0x13a>
 8001cba:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001cbe:	680b      	ldr	r3, [r1, #0]
 8001cc0:	6962      	ldr	r2, [r4, #20]
 8001cc2:	f103 0504 	add.w	r5, r3, #4
 8001cc6:	600d      	str	r5, [r1, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	bf14      	ite	ne
 8001ccc:	801a      	strhne	r2, [r3, #0]
 8001cce:	601a      	streq	r2, [r3, #0]
 8001cd0:	e6f5      	b.n	8001abe <_printf_i+0x82>
 8001cd2:	680a      	ldr	r2, [r1, #0]
 8001cd4:	f9b2 5000 	ldrsh.w	r5, [r2]
 8001cd8:	3204      	adds	r2, #4
 8001cda:	600a      	str	r2, [r1, #0]
 8001cdc:	462a      	mov	r2, r5
 8001cde:	e73c      	b.n	8001b5a <_printf_i+0x11e>
 8001ce0:	6860      	ldr	r0, [r4, #4]
 8001ce2:	e77f      	b.n	8001be4 <_printf_i+0x1a8>
 8001ce4:	0800af88 	.word	0x0800af88
 8001ce8:	0800af9c 	.word	0x0800af9c

08001cec <__sread>:
 8001cec:	b510      	push	{r4, lr}
 8001cee:	460c      	mov	r4, r1
 8001cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cf4:	f000 fdf2 	bl	80028dc <_read_r>
 8001cf8:	2800      	cmp	r0, #0
 8001cfa:	db03      	blt.n	8001d04 <__sread+0x18>
 8001cfc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001cfe:	4403      	add	r3, r0
 8001d00:	6563      	str	r3, [r4, #84]	; 0x54
 8001d02:	bd10      	pop	{r4, pc}
 8001d04:	89a3      	ldrh	r3, [r4, #12]
 8001d06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d0a:	81a3      	strh	r3, [r4, #12]
 8001d0c:	bd10      	pop	{r4, pc}
 8001d0e:	bf00      	nop

08001d10 <__seofread>:
 8001d10:	2000      	movs	r0, #0
 8001d12:	4770      	bx	lr

08001d14 <__swrite>:
 8001d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d18:	460c      	mov	r4, r1
 8001d1a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 8001d1e:	461f      	mov	r7, r3
 8001d20:	05cb      	lsls	r3, r1, #23
 8001d22:	4605      	mov	r5, r0
 8001d24:	4616      	mov	r6, r2
 8001d26:	d40b      	bmi.n	8001d40 <__swrite+0x2c>
 8001d28:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8001d2c:	81a1      	strh	r1, [r4, #12]
 8001d2e:	463b      	mov	r3, r7
 8001d30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d34:	4632      	mov	r2, r6
 8001d36:	4628      	mov	r0, r5
 8001d38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d3c:	f000 b882 	b.w	8001e44 <_write_r>
 8001d40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d44:	2302      	movs	r3, #2
 8001d46:	2200      	movs	r2, #0
 8001d48:	f000 fb92 	bl	8002470 <_lseek_r>
 8001d4c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8001d50:	e7ea      	b.n	8001d28 <__swrite+0x14>
 8001d52:	bf00      	nop

08001d54 <__sseek>:
 8001d54:	b510      	push	{r4, lr}
 8001d56:	460c      	mov	r4, r1
 8001d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d5c:	f000 fb88 	bl	8002470 <_lseek_r>
 8001d60:	89a3      	ldrh	r3, [r4, #12]
 8001d62:	1c42      	adds	r2, r0, #1
 8001d64:	bf0e      	itee	eq
 8001d66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001d6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001d6e:	6560      	strne	r0, [r4, #84]	; 0x54
 8001d70:	81a3      	strh	r3, [r4, #12]
 8001d72:	bd10      	pop	{r4, pc}

08001d74 <__sclose>:
 8001d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d78:	f000 b8fc 	b.w	8001f74 <_close_r>

08001d7c <__swbuf_r>:
 8001d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d7e:	460d      	mov	r5, r1
 8001d80:	4614      	mov	r4, r2
 8001d82:	4606      	mov	r6, r0
 8001d84:	b108      	cbz	r0, 8001d8a <__swbuf_r+0xe>
 8001d86:	6983      	ldr	r3, [r0, #24]
 8001d88:	b343      	cbz	r3, 8001ddc <__swbuf_r+0x60>
 8001d8a:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <__swbuf_r+0xa4>)
 8001d8c:	429c      	cmp	r4, r3
 8001d8e:	d02a      	beq.n	8001de6 <__swbuf_r+0x6a>
 8001d90:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <__swbuf_r+0xa8>)
 8001d92:	429c      	cmp	r4, r3
 8001d94:	d029      	beq.n	8001dea <__swbuf_r+0x6e>
 8001d96:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <__swbuf_r+0xac>)
 8001d98:	429c      	cmp	r4, r3
 8001d9a:	bf08      	it	eq
 8001d9c:	68f4      	ldreq	r4, [r6, #12]
 8001d9e:	89a3      	ldrh	r3, [r4, #12]
 8001da0:	69a2      	ldr	r2, [r4, #24]
 8001da2:	60a2      	str	r2, [r4, #8]
 8001da4:	071a      	lsls	r2, r3, #28
 8001da6:	d522      	bpl.n	8001dee <__swbuf_r+0x72>
 8001da8:	6923      	ldr	r3, [r4, #16]
 8001daa:	b303      	cbz	r3, 8001dee <__swbuf_r+0x72>
 8001dac:	6822      	ldr	r2, [r4, #0]
 8001dae:	6961      	ldr	r1, [r4, #20]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	b2ed      	uxtb	r5, r5
 8001db4:	4299      	cmp	r1, r3
 8001db6:	462f      	mov	r7, r5
 8001db8:	dd29      	ble.n	8001e0e <__swbuf_r+0x92>
 8001dba:	3301      	adds	r3, #1
 8001dbc:	68a1      	ldr	r1, [r4, #8]
 8001dbe:	3901      	subs	r1, #1
 8001dc0:	60a1      	str	r1, [r4, #8]
 8001dc2:	1c51      	adds	r1, r2, #1
 8001dc4:	6021      	str	r1, [r4, #0]
 8001dc6:	7015      	strb	r5, [r2, #0]
 8001dc8:	6962      	ldr	r2, [r4, #20]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d016      	beq.n	8001dfc <__swbuf_r+0x80>
 8001dce:	89a3      	ldrh	r3, [r4, #12]
 8001dd0:	07db      	lsls	r3, r3, #31
 8001dd2:	d501      	bpl.n	8001dd8 <__swbuf_r+0x5c>
 8001dd4:	2d0a      	cmp	r5, #10
 8001dd6:	d011      	beq.n	8001dfc <__swbuf_r+0x80>
 8001dd8:	4638      	mov	r0, r7
 8001dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ddc:	f7ff fb9c 	bl	8001518 <__sinit>
 8001de0:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <__swbuf_r+0xa4>)
 8001de2:	429c      	cmp	r4, r3
 8001de4:	d1d4      	bne.n	8001d90 <__swbuf_r+0x14>
 8001de6:	6874      	ldr	r4, [r6, #4]
 8001de8:	e7d9      	b.n	8001d9e <__swbuf_r+0x22>
 8001dea:	68b4      	ldr	r4, [r6, #8]
 8001dec:	e7d7      	b.n	8001d9e <__swbuf_r+0x22>
 8001dee:	4621      	mov	r1, r4
 8001df0:	4630      	mov	r0, r6
 8001df2:	f000 f83d 	bl	8001e70 <__swsetup_r>
 8001df6:	b938      	cbnz	r0, 8001e08 <__swbuf_r+0x8c>
 8001df8:	6923      	ldr	r3, [r4, #16]
 8001dfa:	e7d7      	b.n	8001dac <__swbuf_r+0x30>
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	4630      	mov	r0, r6
 8001e00:	f000 f954 	bl	80020ac <_fflush_r>
 8001e04:	2800      	cmp	r0, #0
 8001e06:	d0e7      	beq.n	8001dd8 <__swbuf_r+0x5c>
 8001e08:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001e0c:	e7e4      	b.n	8001dd8 <__swbuf_r+0x5c>
 8001e0e:	4621      	mov	r1, r4
 8001e10:	4630      	mov	r0, r6
 8001e12:	f000 f94b 	bl	80020ac <_fflush_r>
 8001e16:	2800      	cmp	r0, #0
 8001e18:	d1f6      	bne.n	8001e08 <__swbuf_r+0x8c>
 8001e1a:	6822      	ldr	r2, [r4, #0]
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e7cd      	b.n	8001dbc <__swbuf_r+0x40>
 8001e20:	0800af4c 	.word	0x0800af4c
 8001e24:	0800af2c 	.word	0x0800af2c
 8001e28:	0800af0c 	.word	0x0800af0c

08001e2c <__swbuf>:
 8001e2c:	b410      	push	{r4}
 8001e2e:	4c04      	ldr	r4, [pc, #16]	; (8001e40 <__swbuf+0x14>)
 8001e30:	4603      	mov	r3, r0
 8001e32:	460a      	mov	r2, r1
 8001e34:	6820      	ldr	r0, [r4, #0]
 8001e36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f7ff bf9e 	b.w	8001d7c <__swbuf_r>
 8001e40:	20000004 	.word	0x20000004

08001e44 <_write_r>:
 8001e44:	b538      	push	{r3, r4, r5, lr}
 8001e46:	460c      	mov	r4, r1
 8001e48:	4d08      	ldr	r5, [pc, #32]	; (8001e6c <_write_r+0x28>)
 8001e4a:	4684      	mov	ip, r0
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	4620      	mov	r0, r4
 8001e50:	461a      	mov	r2, r3
 8001e52:	2300      	movs	r3, #0
 8001e54:	602b      	str	r3, [r5, #0]
 8001e56:	4664      	mov	r4, ip
 8001e58:	f7fe ff12 	bl	8000c80 <_write>
 8001e5c:	1c43      	adds	r3, r0, #1
 8001e5e:	d000      	beq.n	8001e62 <_write_r+0x1e>
 8001e60:	bd38      	pop	{r3, r4, r5, pc}
 8001e62:	682b      	ldr	r3, [r5, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0fb      	beq.n	8001e60 <_write_r+0x1c>
 8001e68:	6023      	str	r3, [r4, #0]
 8001e6a:	bd38      	pop	{r3, r4, r5, pc}
 8001e6c:	20000208 	.word	0x20000208

08001e70 <__swsetup_r>:
 8001e70:	4b3c      	ldr	r3, [pc, #240]	; (8001f64 <__swsetup_r+0xf4>)
 8001e72:	b570      	push	{r4, r5, r6, lr}
 8001e74:	681d      	ldr	r5, [r3, #0]
 8001e76:	4606      	mov	r6, r0
 8001e78:	460c      	mov	r4, r1
 8001e7a:	b10d      	cbz	r5, 8001e80 <__swsetup_r+0x10>
 8001e7c:	69ab      	ldr	r3, [r5, #24]
 8001e7e:	b1e3      	cbz	r3, 8001eba <__swsetup_r+0x4a>
 8001e80:	4b39      	ldr	r3, [pc, #228]	; (8001f68 <__swsetup_r+0xf8>)
 8001e82:	429c      	cmp	r4, r3
 8001e84:	d01f      	beq.n	8001ec6 <__swsetup_r+0x56>
 8001e86:	4b39      	ldr	r3, [pc, #228]	; (8001f6c <__swsetup_r+0xfc>)
 8001e88:	429c      	cmp	r4, r3
 8001e8a:	d04d      	beq.n	8001f28 <__swsetup_r+0xb8>
 8001e8c:	4b38      	ldr	r3, [pc, #224]	; (8001f70 <__swsetup_r+0x100>)
 8001e8e:	429c      	cmp	r4, r3
 8001e90:	bf08      	it	eq
 8001e92:	68ec      	ldreq	r4, [r5, #12]
 8001e94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e98:	0718      	lsls	r0, r3, #28
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	d519      	bpl.n	8001ed2 <__swsetup_r+0x62>
 8001e9e:	6921      	ldr	r1, [r4, #16]
 8001ea0:	b311      	cbz	r1, 8001ee8 <__swsetup_r+0x78>
 8001ea2:	f012 0001 	ands.w	r0, r2, #1
 8001ea6:	d02f      	beq.n	8001f08 <__swsetup_r+0x98>
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	60a0      	str	r0, [r4, #8]
 8001eac:	6960      	ldr	r0, [r4, #20]
 8001eae:	4240      	negs	r0, r0
 8001eb0:	61a0      	str	r0, [r4, #24]
 8001eb2:	2900      	cmp	r1, #0
 8001eb4:	d02e      	beq.n	8001f14 <__swsetup_r+0xa4>
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	bd70      	pop	{r4, r5, r6, pc}
 8001eba:	4628      	mov	r0, r5
 8001ebc:	f7ff fb2c 	bl	8001518 <__sinit>
 8001ec0:	4b29      	ldr	r3, [pc, #164]	; (8001f68 <__swsetup_r+0xf8>)
 8001ec2:	429c      	cmp	r4, r3
 8001ec4:	d1df      	bne.n	8001e86 <__swsetup_r+0x16>
 8001ec6:	686c      	ldr	r4, [r5, #4]
 8001ec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ecc:	0718      	lsls	r0, r3, #28
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	d4e5      	bmi.n	8001e9e <__swsetup_r+0x2e>
 8001ed2:	06d1      	lsls	r1, r2, #27
 8001ed4:	d53e      	bpl.n	8001f54 <__swsetup_r+0xe4>
 8001ed6:	0752      	lsls	r2, r2, #29
 8001ed8:	d428      	bmi.n	8001f2c <__swsetup_r+0xbc>
 8001eda:	6921      	ldr	r1, [r4, #16]
 8001edc:	f043 0308 	orr.w	r3, r3, #8
 8001ee0:	81a3      	strh	r3, [r4, #12]
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	2900      	cmp	r1, #0
 8001ee6:	d1dc      	bne.n	8001ea2 <__swsetup_r+0x32>
 8001ee8:	f402 7020 	and.w	r0, r2, #640	; 0x280
 8001eec:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001ef0:	d0d7      	beq.n	8001ea2 <__swsetup_r+0x32>
 8001ef2:	4621      	mov	r1, r4
 8001ef4:	4630      	mov	r0, r6
 8001ef6:	f000 fad1 	bl	800249c <__smakebuf_r>
 8001efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001efe:	6921      	ldr	r1, [r4, #16]
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	f012 0001 	ands.w	r0, r2, #1
 8001f06:	d1cf      	bne.n	8001ea8 <__swsetup_r+0x38>
 8001f08:	0795      	lsls	r5, r2, #30
 8001f0a:	bf58      	it	pl
 8001f0c:	6960      	ldrpl	r0, [r4, #20]
 8001f0e:	60a0      	str	r0, [r4, #8]
 8001f10:	2900      	cmp	r1, #0
 8001f12:	d1d0      	bne.n	8001eb6 <__swsetup_r+0x46>
 8001f14:	0612      	lsls	r2, r2, #24
 8001f16:	bf58      	it	pl
 8001f18:	4608      	movpl	r0, r1
 8001f1a:	d5cd      	bpl.n	8001eb8 <__swsetup_r+0x48>
 8001f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f20:	81a3      	strh	r3, [r4, #12]
 8001f22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f26:	bd70      	pop	{r4, r5, r6, pc}
 8001f28:	68ac      	ldr	r4, [r5, #8]
 8001f2a:	e7b3      	b.n	8001e94 <__swsetup_r+0x24>
 8001f2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f2e:	b151      	cbz	r1, 8001f46 <__swsetup_r+0xd6>
 8001f30:	f104 0244 	add.w	r2, r4, #68	; 0x44
 8001f34:	4291      	cmp	r1, r2
 8001f36:	d004      	beq.n	8001f42 <__swsetup_r+0xd2>
 8001f38:	4630      	mov	r0, r6
 8001f3a:	f7ff f8f3 	bl	8001124 <_free_r>
 8001f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	6362      	str	r2, [r4, #52]	; 0x34
 8001f46:	6921      	ldr	r1, [r4, #16]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	e9c4 1200 	strd	r1, r2, [r4]
 8001f4e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001f52:	e7c3      	b.n	8001edc <__swsetup_r+0x6c>
 8001f54:	2209      	movs	r2, #9
 8001f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f5a:	6032      	str	r2, [r6, #0]
 8001f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f60:	81a3      	strh	r3, [r4, #12]
 8001f62:	bd70      	pop	{r4, r5, r6, pc}
 8001f64:	20000004 	.word	0x20000004
 8001f68:	0800af4c 	.word	0x0800af4c
 8001f6c:	0800af2c 	.word	0x0800af2c
 8001f70:	0800af0c 	.word	0x0800af0c

08001f74 <_close_r>:
 8001f74:	b538      	push	{r3, r4, r5, lr}
 8001f76:	4d07      	ldr	r5, [pc, #28]	; (8001f94 <_close_r+0x20>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	4604      	mov	r4, r0
 8001f7c:	4608      	mov	r0, r1
 8001f7e:	602a      	str	r2, [r5, #0]
 8001f80:	f7fe fe9a 	bl	8000cb8 <_close>
 8001f84:	1c43      	adds	r3, r0, #1
 8001f86:	d000      	beq.n	8001f8a <_close_r+0x16>
 8001f88:	bd38      	pop	{r3, r4, r5, pc}
 8001f8a:	682b      	ldr	r3, [r5, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0fb      	beq.n	8001f88 <_close_r+0x14>
 8001f90:	6023      	str	r3, [r4, #0]
 8001f92:	bd38      	pop	{r3, r4, r5, pc}
 8001f94:	20000208 	.word	0x20000208

08001f98 <__sflush_r>:
 8001f98:	898b      	ldrh	r3, [r1, #12]
 8001f9a:	071a      	lsls	r2, r3, #28
 8001f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fa0:	460c      	mov	r4, r1
 8001fa2:	4680      	mov	r8, r0
 8001fa4:	d43f      	bmi.n	8002026 <__sflush_r+0x8e>
 8001fa6:	684a      	ldr	r2, [r1, #4]
 8001fa8:	2a00      	cmp	r2, #0
 8001faa:	dd58      	ble.n	800205e <__sflush_r+0xc6>
 8001fac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001fae:	2e00      	cmp	r6, #0
 8001fb0:	d052      	beq.n	8002058 <__sflush_r+0xc0>
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f8d8 5000 	ldr.w	r5, [r8]
 8001fb8:	f8c8 2000 	str.w	r2, [r8]
 8001fbc:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
 8001fc0:	d151      	bne.n	8002066 <__sflush_r+0xce>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	6a21      	ldr	r1, [r4, #32]
 8001fc6:	4640      	mov	r0, r8
 8001fc8:	47b0      	blx	r6
 8001fca:	1c43      	adds	r3, r0, #1
 8001fcc:	d05e      	beq.n	800208c <__sflush_r+0xf4>
 8001fce:	89a3      	ldrh	r3, [r4, #12]
 8001fd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001fd2:	075f      	lsls	r7, r3, #29
 8001fd4:	d505      	bpl.n	8001fe2 <__sflush_r+0x4a>
 8001fd6:	6863      	ldr	r3, [r4, #4]
 8001fd8:	1ac0      	subs	r0, r0, r3
 8001fda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001fdc:	b10b      	cbz	r3, 8001fe2 <__sflush_r+0x4a>
 8001fde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fe0:	1ac0      	subs	r0, r0, r3
 8001fe2:	6a21      	ldr	r1, [r4, #32]
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	4640      	mov	r0, r8
 8001fea:	47b0      	blx	r6
 8001fec:	1c41      	adds	r1, r0, #1
 8001fee:	d13c      	bne.n	800206a <__sflush_r+0xd2>
 8001ff0:	f8d8 3000 	ldr.w	r3, [r8]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d038      	beq.n	800206a <__sflush_r+0xd2>
 8001ff8:	2b1d      	cmp	r3, #29
 8001ffa:	d001      	beq.n	8002000 <__sflush_r+0x68>
 8001ffc:	2b16      	cmp	r3, #22
 8001ffe:	d14d      	bne.n	800209c <__sflush_r+0x104>
 8002000:	6923      	ldr	r3, [r4, #16]
 8002002:	2200      	movs	r2, #0
 8002004:	e9c4 3200 	strd	r3, r2, [r4]
 8002008:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800200a:	f8c8 5000 	str.w	r5, [r8]
 800200e:	b319      	cbz	r1, 8002058 <__sflush_r+0xc0>
 8002010:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002014:	4299      	cmp	r1, r3
 8002016:	d002      	beq.n	800201e <__sflush_r+0x86>
 8002018:	4640      	mov	r0, r8
 800201a:	f7ff f883 	bl	8001124 <_free_r>
 800201e:	2000      	movs	r0, #0
 8002020:	6360      	str	r0, [r4, #52]	; 0x34
 8002022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002026:	690e      	ldr	r6, [r1, #16]
 8002028:	b1b6      	cbz	r6, 8002058 <__sflush_r+0xc0>
 800202a:	680d      	ldr	r5, [r1, #0]
 800202c:	600e      	str	r6, [r1, #0]
 800202e:	079a      	lsls	r2, r3, #30
 8002030:	bf0c      	ite	eq
 8002032:	694b      	ldreq	r3, [r1, #20]
 8002034:	2300      	movne	r3, #0
 8002036:	1bad      	subs	r5, r5, r6
 8002038:	608b      	str	r3, [r1, #8]
 800203a:	e00b      	b.n	8002054 <__sflush_r+0xbc>
 800203c:	462b      	mov	r3, r5
 800203e:	4632      	mov	r2, r6
 8002040:	6a21      	ldr	r1, [r4, #32]
 8002042:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8002044:	4640      	mov	r0, r8
 8002046:	47b8      	blx	r7
 8002048:	f1b0 0c00 	subs.w	ip, r0, #0
 800204c:	eba5 050c 	sub.w	r5, r5, ip
 8002050:	4466      	add	r6, ip
 8002052:	dd13      	ble.n	800207c <__sflush_r+0xe4>
 8002054:	2d00      	cmp	r5, #0
 8002056:	dcf1      	bgt.n	800203c <__sflush_r+0xa4>
 8002058:	2000      	movs	r0, #0
 800205a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800205e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002060:	2a00      	cmp	r2, #0
 8002062:	dca3      	bgt.n	8001fac <__sflush_r+0x14>
 8002064:	e7f8      	b.n	8002058 <__sflush_r+0xc0>
 8002066:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002068:	e7b3      	b.n	8001fd2 <__sflush_r+0x3a>
 800206a:	2300      	movs	r3, #0
 800206c:	6063      	str	r3, [r4, #4]
 800206e:	6923      	ldr	r3, [r4, #16]
 8002070:	6023      	str	r3, [r4, #0]
 8002072:	89a3      	ldrh	r3, [r4, #12]
 8002074:	04db      	lsls	r3, r3, #19
 8002076:	d5c7      	bpl.n	8002008 <__sflush_r+0x70>
 8002078:	6560      	str	r0, [r4, #84]	; 0x54
 800207a:	e7c5      	b.n	8002008 <__sflush_r+0x70>
 800207c:	89a3      	ldrh	r3, [r4, #12]
 800207e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002082:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002086:	81a3      	strh	r3, [r4, #12]
 8002088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800208c:	f8d8 3000 	ldr.w	r3, [r8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d09c      	beq.n	8001fce <__sflush_r+0x36>
 8002094:	2b1d      	cmp	r3, #29
 8002096:	d006      	beq.n	80020a6 <__sflush_r+0x10e>
 8002098:	2b16      	cmp	r3, #22
 800209a:	d004      	beq.n	80020a6 <__sflush_r+0x10e>
 800209c:	89a3      	ldrh	r3, [r4, #12]
 800209e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020a2:	81a3      	strh	r3, [r4, #12]
 80020a4:	e7d9      	b.n	800205a <__sflush_r+0xc2>
 80020a6:	f8c8 5000 	str.w	r5, [r8]
 80020aa:	e7d5      	b.n	8002058 <__sflush_r+0xc0>

080020ac <_fflush_r>:
 80020ac:	b538      	push	{r3, r4, r5, lr}
 80020ae:	690b      	ldr	r3, [r1, #16]
 80020b0:	b1bb      	cbz	r3, 80020e2 <_fflush_r+0x36>
 80020b2:	460d      	mov	r5, r1
 80020b4:	4604      	mov	r4, r0
 80020b6:	b108      	cbz	r0, 80020bc <_fflush_r+0x10>
 80020b8:	6983      	ldr	r3, [r0, #24]
 80020ba:	b1b3      	cbz	r3, 80020ea <_fflush_r+0x3e>
 80020bc:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <_fflush_r+0x48>)
 80020be:	429d      	cmp	r5, r3
 80020c0:	d011      	beq.n	80020e6 <_fflush_r+0x3a>
 80020c2:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <_fflush_r+0x4c>)
 80020c4:	429d      	cmp	r5, r3
 80020c6:	d013      	beq.n	80020f0 <_fflush_r+0x44>
 80020c8:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <_fflush_r+0x50>)
 80020ca:	429d      	cmp	r5, r3
 80020cc:	bf08      	it	eq
 80020ce:	68e5      	ldreq	r5, [r4, #12]
 80020d0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 80020d4:	b12b      	cbz	r3, 80020e2 <_fflush_r+0x36>
 80020d6:	4629      	mov	r1, r5
 80020d8:	4620      	mov	r0, r4
 80020da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020de:	f7ff bf5b 	b.w	8001f98 <__sflush_r>
 80020e2:	2000      	movs	r0, #0
 80020e4:	bd38      	pop	{r3, r4, r5, pc}
 80020e6:	6865      	ldr	r5, [r4, #4]
 80020e8:	e7f2      	b.n	80020d0 <_fflush_r+0x24>
 80020ea:	f7ff fa15 	bl	8001518 <__sinit>
 80020ee:	e7e5      	b.n	80020bc <_fflush_r+0x10>
 80020f0:	68a5      	ldr	r5, [r4, #8]
 80020f2:	e7ed      	b.n	80020d0 <_fflush_r+0x24>
 80020f4:	0800af4c 	.word	0x0800af4c
 80020f8:	0800af2c 	.word	0x0800af2c
 80020fc:	0800af0c 	.word	0x0800af0c

08002100 <fflush>:
 8002100:	b538      	push	{r3, r4, r5, lr}
 8002102:	b340      	cbz	r0, 8002156 <fflush+0x56>
 8002104:	6903      	ldr	r3, [r0, #16]
 8002106:	4604      	mov	r4, r0
 8002108:	b1e3      	cbz	r3, 8002144 <fflush+0x44>
 800210a:	4b17      	ldr	r3, [pc, #92]	; (8002168 <fflush+0x68>)
 800210c:	681d      	ldr	r5, [r3, #0]
 800210e:	b10d      	cbz	r5, 8002114 <fflush+0x14>
 8002110:	69ab      	ldr	r3, [r5, #24]
 8002112:	b1cb      	cbz	r3, 8002148 <fflush+0x48>
 8002114:	4b15      	ldr	r3, [pc, #84]	; (800216c <fflush+0x6c>)
 8002116:	429c      	cmp	r4, r3
 8002118:	d00f      	beq.n	800213a <fflush+0x3a>
 800211a:	4b15      	ldr	r3, [pc, #84]	; (8002170 <fflush+0x70>)
 800211c:	429c      	cmp	r4, r3
 800211e:	d021      	beq.n	8002164 <fflush+0x64>
 8002120:	4b14      	ldr	r3, [pc, #80]	; (8002174 <fflush+0x74>)
 8002122:	429c      	cmp	r4, r3
 8002124:	bf08      	it	eq
 8002126:	68ec      	ldreq	r4, [r5, #12]
 8002128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800212c:	b153      	cbz	r3, 8002144 <fflush+0x44>
 800212e:	4621      	mov	r1, r4
 8002130:	4628      	mov	r0, r5
 8002132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002136:	f7ff bf2f 	b.w	8001f98 <__sflush_r>
 800213a:	686c      	ldr	r4, [r5, #4]
 800213c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1f4      	bne.n	800212e <fflush+0x2e>
 8002144:	2000      	movs	r0, #0
 8002146:	bd38      	pop	{r3, r4, r5, pc}
 8002148:	4628      	mov	r0, r5
 800214a:	f7ff f9e5 	bl	8001518 <__sinit>
 800214e:	4b07      	ldr	r3, [pc, #28]	; (800216c <fflush+0x6c>)
 8002150:	429c      	cmp	r4, r3
 8002152:	d1e2      	bne.n	800211a <fflush+0x1a>
 8002154:	e7f1      	b.n	800213a <fflush+0x3a>
 8002156:	4b08      	ldr	r3, [pc, #32]	; (8002178 <fflush+0x78>)
 8002158:	4908      	ldr	r1, [pc, #32]	; (800217c <fflush+0x7c>)
 800215a:	6818      	ldr	r0, [r3, #0]
 800215c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002160:	f7ff ba1a 	b.w	8001598 <_fwalk_reent>
 8002164:	68ac      	ldr	r4, [r5, #8]
 8002166:	e7df      	b.n	8002128 <fflush+0x28>
 8002168:	20000004 	.word	0x20000004
 800216c:	0800af4c 	.word	0x0800af4c
 8002170:	0800af2c 	.word	0x0800af2c
 8002174:	0800af0c 	.word	0x0800af0c
 8002178:	0800af08 	.word	0x0800af08
 800217c:	080020ad 	.word	0x080020ad

08002180 <__sfvwrite_r>:
 8002180:	6893      	ldr	r3, [r2, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 8085 	beq.w	8002292 <__sfvwrite_r+0x112>
 8002188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800218c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8002190:	460c      	mov	r4, r1
 8002192:	0719      	lsls	r1, r3, #28
 8002194:	4680      	mov	r8, r0
 8002196:	b083      	sub	sp, #12
 8002198:	4617      	mov	r7, r2
 800219a:	b298      	uxth	r0, r3
 800219c:	d525      	bpl.n	80021ea <__sfvwrite_r+0x6a>
 800219e:	6923      	ldr	r3, [r4, #16]
 80021a0:	b31b      	cbz	r3, 80021ea <__sfvwrite_r+0x6a>
 80021a2:	f010 0302 	ands.w	r3, r0, #2
 80021a6:	683d      	ldr	r5, [r7, #0]
 80021a8:	d02d      	beq.n	8002206 <__sfvwrite_r+0x86>
 80021aa:	f04f 0a00 	mov.w	sl, #0
 80021ae:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 800246c <__sfvwrite_r+0x2ec>
 80021b2:	4656      	mov	r6, sl
 80021b4:	46b9      	mov	r9, r7
 80021b6:	455e      	cmp	r6, fp
 80021b8:	4633      	mov	r3, r6
 80021ba:	4652      	mov	r2, sl
 80021bc:	bf28      	it	cs
 80021be:	465b      	movcs	r3, fp
 80021c0:	4640      	mov	r0, r8
 80021c2:	2e00      	cmp	r6, #0
 80021c4:	d052      	beq.n	800226c <__sfvwrite_r+0xec>
 80021c6:	6a21      	ldr	r1, [r4, #32]
 80021c8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80021ca:	47b8      	blx	r7
 80021cc:	2800      	cmp	r0, #0
 80021ce:	dd56      	ble.n	800227e <__sfvwrite_r+0xfe>
 80021d0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80021d4:	1a1b      	subs	r3, r3, r0
 80021d6:	4482      	add	sl, r0
 80021d8:	1a36      	subs	r6, r6, r0
 80021da:	f8c9 3008 	str.w	r3, [r9, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1e9      	bne.n	80021b6 <__sfvwrite_r+0x36>
 80021e2:	2000      	movs	r0, #0
 80021e4:	b003      	add	sp, #12
 80021e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021ea:	4621      	mov	r1, r4
 80021ec:	4640      	mov	r0, r8
 80021ee:	f7ff fe3f 	bl	8001e70 <__swsetup_r>
 80021f2:	2800      	cmp	r0, #0
 80021f4:	f040 8136 	bne.w	8002464 <__sfvwrite_r+0x2e4>
 80021f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021fc:	683d      	ldr	r5, [r7, #0]
 80021fe:	b298      	uxth	r0, r3
 8002200:	f010 0302 	ands.w	r3, r0, #2
 8002204:	d1d1      	bne.n	80021aa <__sfvwrite_r+0x2a>
 8002206:	f010 0901 	ands.w	r9, r0, #1
 800220a:	d144      	bne.n	8002296 <__sfvwrite_r+0x116>
 800220c:	464e      	mov	r6, r9
 800220e:	9700      	str	r7, [sp, #0]
 8002210:	b346      	cbz	r6, 8002264 <__sfvwrite_r+0xe4>
 8002212:	0582      	lsls	r2, r0, #22
 8002214:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8002218:	f140 8083 	bpl.w	8002322 <__sfvwrite_r+0x1a2>
 800221c:	45b3      	cmp	fp, r6
 800221e:	465a      	mov	r2, fp
 8002220:	f200 80b2 	bhi.w	8002388 <__sfvwrite_r+0x208>
 8002224:	f410 6f90 	tst.w	r0, #1152	; 0x480
 8002228:	f040 80bf 	bne.w	80023aa <__sfvwrite_r+0x22a>
 800222c:	6820      	ldr	r0, [r4, #0]
 800222e:	9201      	str	r2, [sp, #4]
 8002230:	4649      	mov	r1, r9
 8002232:	f000 faaf 	bl	8002794 <memmove>
 8002236:	68a3      	ldr	r3, [r4, #8]
 8002238:	9a01      	ldr	r2, [sp, #4]
 800223a:	eba3 010b 	sub.w	r1, r3, fp
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	60a1      	str	r1, [r4, #8]
 8002242:	4413      	add	r3, r2
 8002244:	46b2      	mov	sl, r6
 8002246:	6023      	str	r3, [r4, #0]
 8002248:	2600      	movs	r6, #0
 800224a:	9b00      	ldr	r3, [sp, #0]
 800224c:	6898      	ldr	r0, [r3, #8]
 800224e:	eba0 000a 	sub.w	r0, r0, sl
 8002252:	44d1      	add	r9, sl
 8002254:	6098      	str	r0, [r3, #8]
 8002256:	2800      	cmp	r0, #0
 8002258:	d0c3      	beq.n	80021e2 <__sfvwrite_r+0x62>
 800225a:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800225e:	b280      	uxth	r0, r0
 8002260:	2e00      	cmp	r6, #0
 8002262:	d1d6      	bne.n	8002212 <__sfvwrite_r+0x92>
 8002264:	e9d5 9600 	ldrd	r9, r6, [r5]
 8002268:	3508      	adds	r5, #8
 800226a:	e7d1      	b.n	8002210 <__sfvwrite_r+0x90>
 800226c:	e9d5 a600 	ldrd	sl, r6, [r5]
 8002270:	3508      	adds	r5, #8
 8002272:	e7a0      	b.n	80021b6 <__sfvwrite_r+0x36>
 8002274:	4621      	mov	r1, r4
 8002276:	4640      	mov	r0, r8
 8002278:	f7ff ff18 	bl	80020ac <_fflush_r>
 800227c:	b380      	cbz	r0, 80022e0 <__sfvwrite_r+0x160>
 800227e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002286:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800228a:	81a3      	strh	r3, [r4, #12]
 800228c:	b003      	add	sp, #12
 800228e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002292:	2000      	movs	r0, #0
 8002294:	4770      	bx	lr
 8002296:	461e      	mov	r6, r3
 8002298:	46aa      	mov	sl, r5
 800229a:	4699      	mov	r9, r3
 800229c:	4618      	mov	r0, r3
 800229e:	461d      	mov	r5, r3
 80022a0:	9700      	str	r7, [sp, #0]
 80022a2:	b356      	cbz	r6, 80022fa <__sfvwrite_r+0x17a>
 80022a4:	b388      	cbz	r0, 800230a <__sfvwrite_r+0x18a>
 80022a6:	464a      	mov	r2, r9
 80022a8:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
 80022ac:	6820      	ldr	r0, [r4, #0]
 80022ae:	42b2      	cmp	r2, r6
 80022b0:	bf28      	it	cs
 80022b2:	4632      	movcs	r2, r6
 80022b4:	4288      	cmp	r0, r1
 80022b6:	d905      	bls.n	80022c4 <__sfvwrite_r+0x144>
 80022b8:	68a1      	ldr	r1, [r4, #8]
 80022ba:	eb03 0b01 	add.w	fp, r3, r1
 80022be:	455a      	cmp	r2, fp
 80022c0:	f300 80a6 	bgt.w	8002410 <__sfvwrite_r+0x290>
 80022c4:	4293      	cmp	r3, r2
 80022c6:	dc63      	bgt.n	8002390 <__sfvwrite_r+0x210>
 80022c8:	6a21      	ldr	r1, [r4, #32]
 80022ca:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80022cc:	462a      	mov	r2, r5
 80022ce:	4640      	mov	r0, r8
 80022d0:	47b8      	blx	r7
 80022d2:	f1b0 0b00 	subs.w	fp, r0, #0
 80022d6:	ddd2      	ble.n	800227e <__sfvwrite_r+0xfe>
 80022d8:	ebb9 090b 	subs.w	r9, r9, fp
 80022dc:	d0ca      	beq.n	8002274 <__sfvwrite_r+0xf4>
 80022de:	2001      	movs	r0, #1
 80022e0:	9a00      	ldr	r2, [sp, #0]
 80022e2:	6893      	ldr	r3, [r2, #8]
 80022e4:	eba3 030b 	sub.w	r3, r3, fp
 80022e8:	445d      	add	r5, fp
 80022ea:	eba6 060b 	sub.w	r6, r6, fp
 80022ee:	6093      	str	r3, [r2, #8]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f43f af76 	beq.w	80021e2 <__sfvwrite_r+0x62>
 80022f6:	2e00      	cmp	r6, #0
 80022f8:	d1d4      	bne.n	80022a4 <__sfvwrite_r+0x124>
 80022fa:	f10a 0308 	add.w	r3, sl, #8
 80022fe:	e953 5602 	ldrd	r5, r6, [r3, #-8]
 8002302:	469a      	mov	sl, r3
 8002304:	3308      	adds	r3, #8
 8002306:	2e00      	cmp	r6, #0
 8002308:	d0f9      	beq.n	80022fe <__sfvwrite_r+0x17e>
 800230a:	4632      	mov	r2, r6
 800230c:	210a      	movs	r1, #10
 800230e:	4628      	mov	r0, r5
 8002310:	f000 f956 	bl	80025c0 <memchr>
 8002314:	2800      	cmp	r0, #0
 8002316:	f000 809c 	beq.w	8002452 <__sfvwrite_r+0x2d2>
 800231a:	3001      	adds	r0, #1
 800231c:	eba0 0905 	sub.w	r9, r0, r5
 8002320:	e7c1      	b.n	80022a6 <__sfvwrite_r+0x126>
 8002322:	6820      	ldr	r0, [r4, #0]
 8002324:	6923      	ldr	r3, [r4, #16]
 8002326:	4298      	cmp	r0, r3
 8002328:	d816      	bhi.n	8002358 <__sfvwrite_r+0x1d8>
 800232a:	6963      	ldr	r3, [r4, #20]
 800232c:	42b3      	cmp	r3, r6
 800232e:	d813      	bhi.n	8002358 <__sfvwrite_r+0x1d8>
 8002330:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002334:	42b2      	cmp	r2, r6
 8002336:	bf28      	it	cs
 8002338:	4632      	movcs	r2, r6
 800233a:	6a21      	ldr	r1, [r4, #32]
 800233c:	fb92 f2f3 	sdiv	r2, r2, r3
 8002340:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8002342:	fb02 f303 	mul.w	r3, r2, r3
 8002346:	4640      	mov	r0, r8
 8002348:	464a      	mov	r2, r9
 800234a:	47b8      	blx	r7
 800234c:	f1b0 0a00 	subs.w	sl, r0, #0
 8002350:	dd95      	ble.n	800227e <__sfvwrite_r+0xfe>
 8002352:	eba6 060a 	sub.w	r6, r6, sl
 8002356:	e778      	b.n	800224a <__sfvwrite_r+0xca>
 8002358:	45b3      	cmp	fp, r6
 800235a:	46da      	mov	sl, fp
 800235c:	bf28      	it	cs
 800235e:	46b2      	movcs	sl, r6
 8002360:	4652      	mov	r2, sl
 8002362:	4649      	mov	r1, r9
 8002364:	f000 fa16 	bl	8002794 <memmove>
 8002368:	68a3      	ldr	r3, [r4, #8]
 800236a:	6822      	ldr	r2, [r4, #0]
 800236c:	eba3 030a 	sub.w	r3, r3, sl
 8002370:	4452      	add	r2, sl
 8002372:	60a3      	str	r3, [r4, #8]
 8002374:	6022      	str	r2, [r4, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1eb      	bne.n	8002352 <__sfvwrite_r+0x1d2>
 800237a:	4621      	mov	r1, r4
 800237c:	4640      	mov	r0, r8
 800237e:	f7ff fe95 	bl	80020ac <_fflush_r>
 8002382:	2800      	cmp	r0, #0
 8002384:	d0e5      	beq.n	8002352 <__sfvwrite_r+0x1d2>
 8002386:	e77a      	b.n	800227e <__sfvwrite_r+0xfe>
 8002388:	6820      	ldr	r0, [r4, #0]
 800238a:	46b3      	mov	fp, r6
 800238c:	4632      	mov	r2, r6
 800238e:	e74e      	b.n	800222e <__sfvwrite_r+0xae>
 8002390:	4629      	mov	r1, r5
 8002392:	9201      	str	r2, [sp, #4]
 8002394:	f000 f9fe 	bl	8002794 <memmove>
 8002398:	9a01      	ldr	r2, [sp, #4]
 800239a:	68a3      	ldr	r3, [r4, #8]
 800239c:	1a9b      	subs	r3, r3, r2
 800239e:	60a3      	str	r3, [r4, #8]
 80023a0:	6823      	ldr	r3, [r4, #0]
 80023a2:	4413      	add	r3, r2
 80023a4:	6023      	str	r3, [r4, #0]
 80023a6:	4693      	mov	fp, r2
 80023a8:	e796      	b.n	80022d8 <__sfvwrite_r+0x158>
 80023aa:	6823      	ldr	r3, [r4, #0]
 80023ac:	6921      	ldr	r1, [r4, #16]
 80023ae:	eba3 0b01 	sub.w	fp, r3, r1
 80023b2:	6963      	ldr	r3, [r4, #20]
 80023b4:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 80023b8:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 80023bc:	f10b 0301 	add.w	r3, fp, #1
 80023c0:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 80023c4:	4433      	add	r3, r6
 80023c6:	4553      	cmp	r3, sl
 80023c8:	4652      	mov	r2, sl
 80023ca:	bf84      	itt	hi
 80023cc:	469a      	movhi	sl, r3
 80023ce:	4652      	movhi	r2, sl
 80023d0:	0543      	lsls	r3, r0, #21
 80023d2:	d52c      	bpl.n	800242e <__sfvwrite_r+0x2ae>
 80023d4:	4611      	mov	r1, r2
 80023d6:	4640      	mov	r0, r8
 80023d8:	f7fe ff06 	bl	80011e8 <_malloc_r>
 80023dc:	2800      	cmp	r0, #0
 80023de:	d03b      	beq.n	8002458 <__sfvwrite_r+0x2d8>
 80023e0:	465a      	mov	r2, fp
 80023e2:	6921      	ldr	r1, [r4, #16]
 80023e4:	9001      	str	r0, [sp, #4]
 80023e6:	f000 f93b 	bl	8002660 <memcpy>
 80023ea:	89a2      	ldrh	r2, [r4, #12]
 80023ec:	9b01      	ldr	r3, [sp, #4]
 80023ee:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80023f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023f6:	81a2      	strh	r2, [r4, #12]
 80023f8:	eb03 000b 	add.w	r0, r3, fp
 80023fc:	6123      	str	r3, [r4, #16]
 80023fe:	ebaa 030b 	sub.w	r3, sl, fp
 8002402:	f8c4 a014 	str.w	sl, [r4, #20]
 8002406:	60a3      	str	r3, [r4, #8]
 8002408:	6020      	str	r0, [r4, #0]
 800240a:	46b3      	mov	fp, r6
 800240c:	4632      	mov	r2, r6
 800240e:	e70e      	b.n	800222e <__sfvwrite_r+0xae>
 8002410:	4629      	mov	r1, r5
 8002412:	465a      	mov	r2, fp
 8002414:	f000 f9be 	bl	8002794 <memmove>
 8002418:	6823      	ldr	r3, [r4, #0]
 800241a:	445b      	add	r3, fp
 800241c:	6023      	str	r3, [r4, #0]
 800241e:	4621      	mov	r1, r4
 8002420:	4640      	mov	r0, r8
 8002422:	f7ff fe43 	bl	80020ac <_fflush_r>
 8002426:	2800      	cmp	r0, #0
 8002428:	f43f af56 	beq.w	80022d8 <__sfvwrite_r+0x158>
 800242c:	e727      	b.n	800227e <__sfvwrite_r+0xfe>
 800242e:	4640      	mov	r0, r8
 8002430:	f000 fa2c 	bl	800288c <_realloc_r>
 8002434:	4603      	mov	r3, r0
 8002436:	2800      	cmp	r0, #0
 8002438:	d1de      	bne.n	80023f8 <__sfvwrite_r+0x278>
 800243a:	6921      	ldr	r1, [r4, #16]
 800243c:	4640      	mov	r0, r8
 800243e:	f7fe fe71 	bl	8001124 <_free_r>
 8002442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002446:	220c      	movs	r2, #12
 8002448:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800244c:	f8c8 2000 	str.w	r2, [r8]
 8002450:	e717      	b.n	8002282 <__sfvwrite_r+0x102>
 8002452:	1c72      	adds	r2, r6, #1
 8002454:	4691      	mov	r9, r2
 8002456:	e727      	b.n	80022a8 <__sfvwrite_r+0x128>
 8002458:	220c      	movs	r2, #12
 800245a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800245e:	f8c8 2000 	str.w	r2, [r8]
 8002462:	e70e      	b.n	8002282 <__sfvwrite_r+0x102>
 8002464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002468:	e6bc      	b.n	80021e4 <__sfvwrite_r+0x64>
 800246a:	bf00      	nop
 800246c:	7ffffc00 	.word	0x7ffffc00

08002470 <_lseek_r>:
 8002470:	b538      	push	{r3, r4, r5, lr}
 8002472:	460c      	mov	r4, r1
 8002474:	4d08      	ldr	r5, [pc, #32]	; (8002498 <_lseek_r+0x28>)
 8002476:	4684      	mov	ip, r0
 8002478:	4611      	mov	r1, r2
 800247a:	4620      	mov	r0, r4
 800247c:	461a      	mov	r2, r3
 800247e:	2300      	movs	r3, #0
 8002480:	602b      	str	r3, [r5, #0]
 8002482:	4664      	mov	r4, ip
 8002484:	f7fe fc2e 	bl	8000ce4 <_lseek>
 8002488:	1c43      	adds	r3, r0, #1
 800248a:	d000      	beq.n	800248e <_lseek_r+0x1e>
 800248c:	bd38      	pop	{r3, r4, r5, pc}
 800248e:	682b      	ldr	r3, [r5, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0fb      	beq.n	800248c <_lseek_r+0x1c>
 8002494:	6023      	str	r3, [r4, #0]
 8002496:	bd38      	pop	{r3, r4, r5, pc}
 8002498:	20000208 	.word	0x20000208

0800249c <__smakebuf_r>:
 800249c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800249e:	898b      	ldrh	r3, [r1, #12]
 80024a0:	460c      	mov	r4, r1
 80024a2:	0799      	lsls	r1, r3, #30
 80024a4:	b097      	sub	sp, #92	; 0x5c
 80024a6:	d507      	bpl.n	80024b8 <__smakebuf_r+0x1c>
 80024a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80024ac:	2201      	movs	r2, #1
 80024ae:	e9c4 3204 	strd	r3, r2, [r4, #16]
 80024b2:	6023      	str	r3, [r4, #0]
 80024b4:	b017      	add	sp, #92	; 0x5c
 80024b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024bc:	2900      	cmp	r1, #0
 80024be:	4605      	mov	r5, r0
 80024c0:	db2d      	blt.n	800251e <__smakebuf_r+0x82>
 80024c2:	466a      	mov	r2, sp
 80024c4:	f000 fa20 	bl	8002908 <_fstat_r>
 80024c8:	2800      	cmp	r0, #0
 80024ca:	db27      	blt.n	800251c <__smakebuf_r+0x80>
 80024cc:	9e01      	ldr	r6, [sp, #4]
 80024ce:	f406 4670 	and.w	r6, r6, #61440	; 0xf000
 80024d2:	f44f 6780 	mov.w	r7, #1024	; 0x400
 80024d6:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
 80024da:	fab6 f686 	clz	r6, r6
 80024de:	4639      	mov	r1, r7
 80024e0:	4628      	mov	r0, r5
 80024e2:	0976      	lsrs	r6, r6, #5
 80024e4:	f7fe fe80 	bl	80011e8 <_malloc_r>
 80024e8:	b330      	cbz	r0, 8002538 <__smakebuf_r+0x9c>
 80024ea:	89a3      	ldrh	r3, [r4, #12]
 80024ec:	4a1a      	ldr	r2, [pc, #104]	; (8002558 <__smakebuf_r+0xbc>)
 80024ee:	62aa      	str	r2, [r5, #40]	; 0x28
 80024f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024f4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80024f8:	81a3      	strh	r3, [r4, #12]
 80024fa:	6020      	str	r0, [r4, #0]
 80024fc:	2e00      	cmp	r6, #0
 80024fe:	d0d9      	beq.n	80024b4 <__smakebuf_r+0x18>
 8002500:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002504:	4628      	mov	r0, r5
 8002506:	f000 fa15 	bl	8002934 <_isatty_r>
 800250a:	2800      	cmp	r0, #0
 800250c:	d0d2      	beq.n	80024b4 <__smakebuf_r+0x18>
 800250e:	89a3      	ldrh	r3, [r4, #12]
 8002510:	f023 0303 	bic.w	r3, r3, #3
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	81a3      	strh	r3, [r4, #12]
 800251a:	e7cb      	b.n	80024b4 <__smakebuf_r+0x18>
 800251c:	89a3      	ldrh	r3, [r4, #12]
 800251e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002522:	bf14      	ite	ne
 8002524:	2740      	movne	r7, #64	; 0x40
 8002526:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 800252a:	4639      	mov	r1, r7
 800252c:	4628      	mov	r0, r5
 800252e:	2600      	movs	r6, #0
 8002530:	f7fe fe5a 	bl	80011e8 <_malloc_r>
 8002534:	2800      	cmp	r0, #0
 8002536:	d1d8      	bne.n	80024ea <__smakebuf_r+0x4e>
 8002538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800253c:	059a      	lsls	r2, r3, #22
 800253e:	d4b9      	bmi.n	80024b4 <__smakebuf_r+0x18>
 8002540:	f023 0303 	bic.w	r3, r3, #3
 8002544:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002548:	f043 0302 	orr.w	r3, r3, #2
 800254c:	2101      	movs	r1, #1
 800254e:	e9c4 2104 	strd	r2, r1, [r4, #16]
 8002552:	81a3      	strh	r3, [r4, #12]
 8002554:	6022      	str	r2, [r4, #0]
 8002556:	e7ad      	b.n	80024b4 <__smakebuf_r+0x18>
 8002558:	08001325 	.word	0x08001325

0800255c <__swhatbuf_r>:
 800255c:	b570      	push	{r4, r5, r6, lr}
 800255e:	460c      	mov	r4, r1
 8002560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002564:	2900      	cmp	r1, #0
 8002566:	b096      	sub	sp, #88	; 0x58
 8002568:	4616      	mov	r6, r2
 800256a:	461d      	mov	r5, r3
 800256c:	db13      	blt.n	8002596 <__swhatbuf_r+0x3a>
 800256e:	466a      	mov	r2, sp
 8002570:	f000 f9ca 	bl	8002908 <_fstat_r>
 8002574:	2800      	cmp	r0, #0
 8002576:	db0e      	blt.n	8002596 <__swhatbuf_r+0x3a>
 8002578:	9901      	ldr	r1, [sp, #4]
 800257a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800257e:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
 8002582:	fab1 f181 	clz	r1, r1
 8002586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800258a:	0949      	lsrs	r1, r1, #5
 800258c:	2000      	movs	r0, #0
 800258e:	6029      	str	r1, [r5, #0]
 8002590:	6033      	str	r3, [r6, #0]
 8002592:	b016      	add	sp, #88	; 0x58
 8002594:	bd70      	pop	{r4, r5, r6, pc}
 8002596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	061b      	lsls	r3, r3, #24
 800259e:	602a      	str	r2, [r5, #0]
 80025a0:	d504      	bpl.n	80025ac <__swhatbuf_r+0x50>
 80025a2:	2340      	movs	r3, #64	; 0x40
 80025a4:	2000      	movs	r0, #0
 80025a6:	6033      	str	r3, [r6, #0]
 80025a8:	b016      	add	sp, #88	; 0x58
 80025aa:	bd70      	pop	{r4, r5, r6, pc}
 80025ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025b0:	2000      	movs	r0, #0
 80025b2:	6033      	str	r3, [r6, #0]
 80025b4:	b016      	add	sp, #88	; 0x58
 80025b6:	bd70      	pop	{r4, r5, r6, pc}
	...

080025c0 <memchr>:
 80025c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80025c4:	2a10      	cmp	r2, #16
 80025c6:	db2b      	blt.n	8002620 <memchr+0x60>
 80025c8:	f010 0f07 	tst.w	r0, #7
 80025cc:	d008      	beq.n	80025e0 <memchr+0x20>
 80025ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80025d2:	3a01      	subs	r2, #1
 80025d4:	428b      	cmp	r3, r1
 80025d6:	d02d      	beq.n	8002634 <memchr+0x74>
 80025d8:	f010 0f07 	tst.w	r0, #7
 80025dc:	b342      	cbz	r2, 8002630 <memchr+0x70>
 80025de:	d1f6      	bne.n	80025ce <memchr+0xe>
 80025e0:	b4f0      	push	{r4, r5, r6, r7}
 80025e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80025e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80025ea:	f022 0407 	bic.w	r4, r2, #7
 80025ee:	f07f 0700 	mvns.w	r7, #0
 80025f2:	2300      	movs	r3, #0
 80025f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80025f8:	3c08      	subs	r4, #8
 80025fa:	ea85 0501 	eor.w	r5, r5, r1
 80025fe:	ea86 0601 	eor.w	r6, r6, r1
 8002602:	fa85 f547 	uadd8	r5, r5, r7
 8002606:	faa3 f587 	sel	r5, r3, r7
 800260a:	fa86 f647 	uadd8	r6, r6, r7
 800260e:	faa5 f687 	sel	r6, r5, r7
 8002612:	b98e      	cbnz	r6, 8002638 <memchr+0x78>
 8002614:	d1ee      	bne.n	80025f4 <memchr+0x34>
 8002616:	bcf0      	pop	{r4, r5, r6, r7}
 8002618:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800261c:	f002 0207 	and.w	r2, r2, #7
 8002620:	b132      	cbz	r2, 8002630 <memchr+0x70>
 8002622:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002626:	3a01      	subs	r2, #1
 8002628:	ea83 0301 	eor.w	r3, r3, r1
 800262c:	b113      	cbz	r3, 8002634 <memchr+0x74>
 800262e:	d1f8      	bne.n	8002622 <memchr+0x62>
 8002630:	2000      	movs	r0, #0
 8002632:	4770      	bx	lr
 8002634:	3801      	subs	r0, #1
 8002636:	4770      	bx	lr
 8002638:	2d00      	cmp	r5, #0
 800263a:	bf06      	itte	eq
 800263c:	4635      	moveq	r5, r6
 800263e:	3803      	subeq	r0, #3
 8002640:	3807      	subne	r0, #7
 8002642:	f015 0f01 	tst.w	r5, #1
 8002646:	d107      	bne.n	8002658 <memchr+0x98>
 8002648:	3001      	adds	r0, #1
 800264a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800264e:	bf02      	ittt	eq
 8002650:	3001      	addeq	r0, #1
 8002652:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8002656:	3001      	addeq	r0, #1
 8002658:	bcf0      	pop	{r4, r5, r6, r7}
 800265a:	3801      	subs	r0, #1
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop

08002660 <memcpy>:
 8002660:	4684      	mov	ip, r0
 8002662:	ea41 0300 	orr.w	r3, r1, r0
 8002666:	f013 0303 	ands.w	r3, r3, #3
 800266a:	d16d      	bne.n	8002748 <memcpy+0xe8>
 800266c:	3a40      	subs	r2, #64	; 0x40
 800266e:	d341      	bcc.n	80026f4 <memcpy+0x94>
 8002670:	f851 3b04 	ldr.w	r3, [r1], #4
 8002674:	f840 3b04 	str.w	r3, [r0], #4
 8002678:	f851 3b04 	ldr.w	r3, [r1], #4
 800267c:	f840 3b04 	str.w	r3, [r0], #4
 8002680:	f851 3b04 	ldr.w	r3, [r1], #4
 8002684:	f840 3b04 	str.w	r3, [r0], #4
 8002688:	f851 3b04 	ldr.w	r3, [r1], #4
 800268c:	f840 3b04 	str.w	r3, [r0], #4
 8002690:	f851 3b04 	ldr.w	r3, [r1], #4
 8002694:	f840 3b04 	str.w	r3, [r0], #4
 8002698:	f851 3b04 	ldr.w	r3, [r1], #4
 800269c:	f840 3b04 	str.w	r3, [r0], #4
 80026a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80026a4:	f840 3b04 	str.w	r3, [r0], #4
 80026a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80026ac:	f840 3b04 	str.w	r3, [r0], #4
 80026b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80026b4:	f840 3b04 	str.w	r3, [r0], #4
 80026b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80026bc:	f840 3b04 	str.w	r3, [r0], #4
 80026c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80026c4:	f840 3b04 	str.w	r3, [r0], #4
 80026c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80026cc:	f840 3b04 	str.w	r3, [r0], #4
 80026d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80026d4:	f840 3b04 	str.w	r3, [r0], #4
 80026d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80026dc:	f840 3b04 	str.w	r3, [r0], #4
 80026e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80026e4:	f840 3b04 	str.w	r3, [r0], #4
 80026e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80026ec:	f840 3b04 	str.w	r3, [r0], #4
 80026f0:	3a40      	subs	r2, #64	; 0x40
 80026f2:	d2bd      	bcs.n	8002670 <memcpy+0x10>
 80026f4:	3230      	adds	r2, #48	; 0x30
 80026f6:	d311      	bcc.n	800271c <memcpy+0xbc>
 80026f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80026fc:	f840 3b04 	str.w	r3, [r0], #4
 8002700:	f851 3b04 	ldr.w	r3, [r1], #4
 8002704:	f840 3b04 	str.w	r3, [r0], #4
 8002708:	f851 3b04 	ldr.w	r3, [r1], #4
 800270c:	f840 3b04 	str.w	r3, [r0], #4
 8002710:	f851 3b04 	ldr.w	r3, [r1], #4
 8002714:	f840 3b04 	str.w	r3, [r0], #4
 8002718:	3a10      	subs	r2, #16
 800271a:	d2ed      	bcs.n	80026f8 <memcpy+0x98>
 800271c:	320c      	adds	r2, #12
 800271e:	d305      	bcc.n	800272c <memcpy+0xcc>
 8002720:	f851 3b04 	ldr.w	r3, [r1], #4
 8002724:	f840 3b04 	str.w	r3, [r0], #4
 8002728:	3a04      	subs	r2, #4
 800272a:	d2f9      	bcs.n	8002720 <memcpy+0xc0>
 800272c:	3204      	adds	r2, #4
 800272e:	d008      	beq.n	8002742 <memcpy+0xe2>
 8002730:	07d2      	lsls	r2, r2, #31
 8002732:	bf1c      	itt	ne
 8002734:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8002738:	f800 3b01 	strbne.w	r3, [r0], #1
 800273c:	d301      	bcc.n	8002742 <memcpy+0xe2>
 800273e:	880b      	ldrh	r3, [r1, #0]
 8002740:	8003      	strh	r3, [r0, #0]
 8002742:	4660      	mov	r0, ip
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	2a08      	cmp	r2, #8
 800274a:	d313      	bcc.n	8002774 <memcpy+0x114>
 800274c:	078b      	lsls	r3, r1, #30
 800274e:	d08d      	beq.n	800266c <memcpy+0xc>
 8002750:	f010 0303 	ands.w	r3, r0, #3
 8002754:	d08a      	beq.n	800266c <memcpy+0xc>
 8002756:	f1c3 0304 	rsb	r3, r3, #4
 800275a:	1ad2      	subs	r2, r2, r3
 800275c:	07db      	lsls	r3, r3, #31
 800275e:	bf1c      	itt	ne
 8002760:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8002764:	f800 3b01 	strbne.w	r3, [r0], #1
 8002768:	d380      	bcc.n	800266c <memcpy+0xc>
 800276a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800276e:	f820 3b02 	strh.w	r3, [r0], #2
 8002772:	e77b      	b.n	800266c <memcpy+0xc>
 8002774:	3a04      	subs	r2, #4
 8002776:	d3d9      	bcc.n	800272c <memcpy+0xcc>
 8002778:	3a01      	subs	r2, #1
 800277a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800277e:	f800 3b01 	strb.w	r3, [r0], #1
 8002782:	d2f9      	bcs.n	8002778 <memcpy+0x118>
 8002784:	780b      	ldrb	r3, [r1, #0]
 8002786:	7003      	strb	r3, [r0, #0]
 8002788:	784b      	ldrb	r3, [r1, #1]
 800278a:	7043      	strb	r3, [r0, #1]
 800278c:	788b      	ldrb	r3, [r1, #2]
 800278e:	7083      	strb	r3, [r0, #2]
 8002790:	4660      	mov	r0, ip
 8002792:	4770      	bx	lr

08002794 <memmove>:
 8002794:	4288      	cmp	r0, r1
 8002796:	d90d      	bls.n	80027b4 <memmove+0x20>
 8002798:	188b      	adds	r3, r1, r2
 800279a:	4283      	cmp	r3, r0
 800279c:	d90a      	bls.n	80027b4 <memmove+0x20>
 800279e:	eb00 0c02 	add.w	ip, r0, r2
 80027a2:	b1ba      	cbz	r2, 80027d4 <memmove+0x40>
 80027a4:	4662      	mov	r2, ip
 80027a6:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 80027aa:	f802 cd01 	strb.w	ip, [r2, #-1]!
 80027ae:	4299      	cmp	r1, r3
 80027b0:	d1f9      	bne.n	80027a6 <memmove+0x12>
 80027b2:	4770      	bx	lr
 80027b4:	2a0f      	cmp	r2, #15
 80027b6:	d80e      	bhi.n	80027d6 <memmove+0x42>
 80027b8:	4603      	mov	r3, r0
 80027ba:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 80027be:	b14a      	cbz	r2, 80027d4 <memmove+0x40>
 80027c0:	f10c 0c01 	add.w	ip, ip, #1
 80027c4:	3b01      	subs	r3, #1
 80027c6:	448c      	add	ip, r1
 80027c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80027cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80027d0:	4561      	cmp	r1, ip
 80027d2:	d1f9      	bne.n	80027c8 <memmove+0x34>
 80027d4:	4770      	bx	lr
 80027d6:	ea40 0301 	orr.w	r3, r0, r1
 80027da:	079b      	lsls	r3, r3, #30
 80027dc:	d150      	bne.n	8002880 <memmove+0xec>
 80027de:	f1a2 0310 	sub.w	r3, r2, #16
 80027e2:	b570      	push	{r4, r5, r6, lr}
 80027e4:	f101 0c20 	add.w	ip, r1, #32
 80027e8:	f023 050f 	bic.w	r5, r3, #15
 80027ec:	f101 0e10 	add.w	lr, r1, #16
 80027f0:	f100 0410 	add.w	r4, r0, #16
 80027f4:	44ac      	add	ip, r5
 80027f6:	091b      	lsrs	r3, r3, #4
 80027f8:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 80027fc:	f844 5c10 	str.w	r5, [r4, #-16]
 8002800:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
 8002804:	f844 5c0c 	str.w	r5, [r4, #-12]
 8002808:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 800280c:	f844 5c08 	str.w	r5, [r4, #-8]
 8002810:	f85e 5c04 	ldr.w	r5, [lr, #-4]
 8002814:	f844 5c04 	str.w	r5, [r4, #-4]
 8002818:	f10e 0e10 	add.w	lr, lr, #16
 800281c:	45e6      	cmp	lr, ip
 800281e:	f104 0410 	add.w	r4, r4, #16
 8002822:	d1e9      	bne.n	80027f8 <memmove+0x64>
 8002824:	3301      	adds	r3, #1
 8002826:	f012 0f0c 	tst.w	r2, #12
 800282a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800282e:	f002 040f 	and.w	r4, r2, #15
 8002832:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8002836:	d027      	beq.n	8002888 <memmove+0xf4>
 8002838:	3c04      	subs	r4, #4
 800283a:	f024 0603 	bic.w	r6, r4, #3
 800283e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 8002842:	441e      	add	r6, r3
 8002844:	1f1c      	subs	r4, r3, #4
 8002846:	468e      	mov	lr, r1
 8002848:	f85e 5b04 	ldr.w	r5, [lr], #4
 800284c:	f844 5f04 	str.w	r5, [r4, #4]!
 8002850:	42b4      	cmp	r4, r6
 8002852:	d1f9      	bne.n	8002848 <memmove+0xb4>
 8002854:	f10c 0401 	add.w	r4, ip, #1
 8002858:	f002 0203 	and.w	r2, r2, #3
 800285c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002860:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8002864:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8002868:	b14a      	cbz	r2, 800287e <memmove+0xea>
 800286a:	f10c 0c01 	add.w	ip, ip, #1
 800286e:	3b01      	subs	r3, #1
 8002870:	448c      	add	ip, r1
 8002872:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002876:	f803 2f01 	strb.w	r2, [r3, #1]!
 800287a:	4561      	cmp	r1, ip
 800287c:	d1f9      	bne.n	8002872 <memmove+0xde>
 800287e:	bd70      	pop	{r4, r5, r6, pc}
 8002880:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8002884:	4603      	mov	r3, r0
 8002886:	e79b      	b.n	80027c0 <memmove+0x2c>
 8002888:	4622      	mov	r2, r4
 800288a:	e7eb      	b.n	8002864 <memmove+0xd0>

0800288c <_realloc_r>:
 800288c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800288e:	4614      	mov	r4, r2
 8002890:	b1f9      	cbz	r1, 80028d2 <_realloc_r+0x46>
 8002892:	b1ca      	cbz	r2, 80028c8 <_realloc_r+0x3c>
 8002894:	4606      	mov	r6, r0
 8002896:	460d      	mov	r5, r1
 8002898:	f000 f85e 	bl	8002958 <_malloc_usable_size_r>
 800289c:	42a0      	cmp	r0, r4
 800289e:	d302      	bcc.n	80028a6 <_realloc_r+0x1a>
 80028a0:	462f      	mov	r7, r5
 80028a2:	4638      	mov	r0, r7
 80028a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028a6:	4621      	mov	r1, r4
 80028a8:	4630      	mov	r0, r6
 80028aa:	f7fe fc9d 	bl	80011e8 <_malloc_r>
 80028ae:	4607      	mov	r7, r0
 80028b0:	2800      	cmp	r0, #0
 80028b2:	d0f6      	beq.n	80028a2 <_realloc_r+0x16>
 80028b4:	4622      	mov	r2, r4
 80028b6:	4629      	mov	r1, r5
 80028b8:	f7ff fed2 	bl	8002660 <memcpy>
 80028bc:	4630      	mov	r0, r6
 80028be:	4629      	mov	r1, r5
 80028c0:	f7fe fc30 	bl	8001124 <_free_r>
 80028c4:	4638      	mov	r0, r7
 80028c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028c8:	4627      	mov	r7, r4
 80028ca:	f7fe fc2b 	bl	8001124 <_free_r>
 80028ce:	4638      	mov	r0, r7
 80028d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80028d6:	4611      	mov	r1, r2
 80028d8:	f7fe bc86 	b.w	80011e8 <_malloc_r>

080028dc <_read_r>:
 80028dc:	b538      	push	{r3, r4, r5, lr}
 80028de:	460c      	mov	r4, r1
 80028e0:	4d08      	ldr	r5, [pc, #32]	; (8002904 <_read_r+0x28>)
 80028e2:	4684      	mov	ip, r0
 80028e4:	4611      	mov	r1, r2
 80028e6:	4620      	mov	r0, r4
 80028e8:	461a      	mov	r2, r3
 80028ea:	2300      	movs	r3, #0
 80028ec:	602b      	str	r3, [r5, #0]
 80028ee:	4664      	mov	r4, ip
 80028f0:	f7fe f9aa 	bl	8000c48 <_read>
 80028f4:	1c43      	adds	r3, r0, #1
 80028f6:	d000      	beq.n	80028fa <_read_r+0x1e>
 80028f8:	bd38      	pop	{r3, r4, r5, pc}
 80028fa:	682b      	ldr	r3, [r5, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0fb      	beq.n	80028f8 <_read_r+0x1c>
 8002900:	6023      	str	r3, [r4, #0]
 8002902:	bd38      	pop	{r3, r4, r5, pc}
 8002904:	20000208 	.word	0x20000208

08002908 <_fstat_r>:
 8002908:	b570      	push	{r4, r5, r6, lr}
 800290a:	460c      	mov	r4, r1
 800290c:	4d08      	ldr	r5, [pc, #32]	; (8002930 <_fstat_r+0x28>)
 800290e:	4603      	mov	r3, r0
 8002910:	2600      	movs	r6, #0
 8002912:	4620      	mov	r0, r4
 8002914:	4611      	mov	r1, r2
 8002916:	461c      	mov	r4, r3
 8002918:	602e      	str	r6, [r5, #0]
 800291a:	f7fe f9d3 	bl	8000cc4 <_fstat>
 800291e:	1c43      	adds	r3, r0, #1
 8002920:	d000      	beq.n	8002924 <_fstat_r+0x1c>
 8002922:	bd70      	pop	{r4, r5, r6, pc}
 8002924:	682b      	ldr	r3, [r5, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0fb      	beq.n	8002922 <_fstat_r+0x1a>
 800292a:	6023      	str	r3, [r4, #0]
 800292c:	bd70      	pop	{r4, r5, r6, pc}
 800292e:	bf00      	nop
 8002930:	20000208 	.word	0x20000208

08002934 <_isatty_r>:
 8002934:	b538      	push	{r3, r4, r5, lr}
 8002936:	4d07      	ldr	r5, [pc, #28]	; (8002954 <_isatty_r+0x20>)
 8002938:	2200      	movs	r2, #0
 800293a:	4604      	mov	r4, r0
 800293c:	4608      	mov	r0, r1
 800293e:	602a      	str	r2, [r5, #0]
 8002940:	f7fe f9ca 	bl	8000cd8 <_isatty>
 8002944:	1c43      	adds	r3, r0, #1
 8002946:	d000      	beq.n	800294a <_isatty_r+0x16>
 8002948:	bd38      	pop	{r3, r4, r5, pc}
 800294a:	682b      	ldr	r3, [r5, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0fb      	beq.n	8002948 <_isatty_r+0x14>
 8002950:	6023      	str	r3, [r4, #0]
 8002952:	bd38      	pop	{r3, r4, r5, pc}
 8002954:	20000208 	.word	0x20000208

08002958 <_malloc_usable_size_r>:
 8002958:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800295c:	2800      	cmp	r0, #0
 800295e:	f1a0 0004 	sub.w	r0, r0, #4
 8002962:	bfbc      	itt	lt
 8002964:	580b      	ldrlt	r3, [r1, r0]
 8002966:	18c0      	addlt	r0, r0, r3
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop

0800296c <__aeabi_uldivmod>:
 800296c:	b953      	cbnz	r3, 8002984 <__aeabi_uldivmod+0x18>
 800296e:	b94a      	cbnz	r2, 8002984 <__aeabi_uldivmod+0x18>
 8002970:	2900      	cmp	r1, #0
 8002972:	bf08      	it	eq
 8002974:	2800      	cmpeq	r0, #0
 8002976:	bf1c      	itt	ne
 8002978:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800297c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8002980:	f000 b974 	b.w	8002c6c <__aeabi_idiv0>
 8002984:	f1ad 0c08 	sub.w	ip, sp, #8
 8002988:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800298c:	f000 f806 	bl	800299c <__udivmoddi4>
 8002990:	f8dd e004 	ldr.w	lr, [sp, #4]
 8002994:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002998:	b004      	add	sp, #16
 800299a:	4770      	bx	lr

0800299c <__udivmoddi4>:
 800299c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029a0:	9d08      	ldr	r5, [sp, #32]
 80029a2:	4604      	mov	r4, r0
 80029a4:	468e      	mov	lr, r1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d14d      	bne.n	8002a46 <__udivmoddi4+0xaa>
 80029aa:	428a      	cmp	r2, r1
 80029ac:	4694      	mov	ip, r2
 80029ae:	d969      	bls.n	8002a84 <__udivmoddi4+0xe8>
 80029b0:	fab2 f282 	clz	r2, r2
 80029b4:	b152      	cbz	r2, 80029cc <__udivmoddi4+0x30>
 80029b6:	fa01 f302 	lsl.w	r3, r1, r2
 80029ba:	f1c2 0120 	rsb	r1, r2, #32
 80029be:	fa20 f101 	lsr.w	r1, r0, r1
 80029c2:	fa0c fc02 	lsl.w	ip, ip, r2
 80029c6:	ea41 0e03 	orr.w	lr, r1, r3
 80029ca:	4094      	lsls	r4, r2
 80029cc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80029d0:	0c21      	lsrs	r1, r4, #16
 80029d2:	fbbe f6f8 	udiv	r6, lr, r8
 80029d6:	fa1f f78c 	uxth.w	r7, ip
 80029da:	fb08 e316 	mls	r3, r8, r6, lr
 80029de:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80029e2:	fb06 f107 	mul.w	r1, r6, r7
 80029e6:	4299      	cmp	r1, r3
 80029e8:	d90a      	bls.n	8002a00 <__udivmoddi4+0x64>
 80029ea:	eb1c 0303 	adds.w	r3, ip, r3
 80029ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80029f2:	f080 811f 	bcs.w	8002c34 <__udivmoddi4+0x298>
 80029f6:	4299      	cmp	r1, r3
 80029f8:	f240 811c 	bls.w	8002c34 <__udivmoddi4+0x298>
 80029fc:	3e02      	subs	r6, #2
 80029fe:	4463      	add	r3, ip
 8002a00:	1a5b      	subs	r3, r3, r1
 8002a02:	b2a4      	uxth	r4, r4
 8002a04:	fbb3 f0f8 	udiv	r0, r3, r8
 8002a08:	fb08 3310 	mls	r3, r8, r0, r3
 8002a0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8002a10:	fb00 f707 	mul.w	r7, r0, r7
 8002a14:	42a7      	cmp	r7, r4
 8002a16:	d90a      	bls.n	8002a2e <__udivmoddi4+0x92>
 8002a18:	eb1c 0404 	adds.w	r4, ip, r4
 8002a1c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002a20:	f080 810a 	bcs.w	8002c38 <__udivmoddi4+0x29c>
 8002a24:	42a7      	cmp	r7, r4
 8002a26:	f240 8107 	bls.w	8002c38 <__udivmoddi4+0x29c>
 8002a2a:	4464      	add	r4, ip
 8002a2c:	3802      	subs	r0, #2
 8002a2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8002a32:	1be4      	subs	r4, r4, r7
 8002a34:	2600      	movs	r6, #0
 8002a36:	b11d      	cbz	r5, 8002a40 <__udivmoddi4+0xa4>
 8002a38:	40d4      	lsrs	r4, r2
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	e9c5 4300 	strd	r4, r3, [r5]
 8002a40:	4631      	mov	r1, r6
 8002a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a46:	428b      	cmp	r3, r1
 8002a48:	d909      	bls.n	8002a5e <__udivmoddi4+0xc2>
 8002a4a:	2d00      	cmp	r5, #0
 8002a4c:	f000 80ef 	beq.w	8002c2e <__udivmoddi4+0x292>
 8002a50:	2600      	movs	r6, #0
 8002a52:	e9c5 0100 	strd	r0, r1, [r5]
 8002a56:	4630      	mov	r0, r6
 8002a58:	4631      	mov	r1, r6
 8002a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a5e:	fab3 f683 	clz	r6, r3
 8002a62:	2e00      	cmp	r6, #0
 8002a64:	d14a      	bne.n	8002afc <__udivmoddi4+0x160>
 8002a66:	428b      	cmp	r3, r1
 8002a68:	d302      	bcc.n	8002a70 <__udivmoddi4+0xd4>
 8002a6a:	4282      	cmp	r2, r0
 8002a6c:	f200 80f9 	bhi.w	8002c62 <__udivmoddi4+0x2c6>
 8002a70:	1a84      	subs	r4, r0, r2
 8002a72:	eb61 0303 	sbc.w	r3, r1, r3
 8002a76:	2001      	movs	r0, #1
 8002a78:	469e      	mov	lr, r3
 8002a7a:	2d00      	cmp	r5, #0
 8002a7c:	d0e0      	beq.n	8002a40 <__udivmoddi4+0xa4>
 8002a7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8002a82:	e7dd      	b.n	8002a40 <__udivmoddi4+0xa4>
 8002a84:	b902      	cbnz	r2, 8002a88 <__udivmoddi4+0xec>
 8002a86:	deff      	udf	#255	; 0xff
 8002a88:	fab2 f282 	clz	r2, r2
 8002a8c:	2a00      	cmp	r2, #0
 8002a8e:	f040 8092 	bne.w	8002bb6 <__udivmoddi4+0x21a>
 8002a92:	eba1 010c 	sub.w	r1, r1, ip
 8002a96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8002a9a:	fa1f fe8c 	uxth.w	lr, ip
 8002a9e:	2601      	movs	r6, #1
 8002aa0:	0c20      	lsrs	r0, r4, #16
 8002aa2:	fbb1 f3f7 	udiv	r3, r1, r7
 8002aa6:	fb07 1113 	mls	r1, r7, r3, r1
 8002aaa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8002aae:	fb0e f003 	mul.w	r0, lr, r3
 8002ab2:	4288      	cmp	r0, r1
 8002ab4:	d908      	bls.n	8002ac8 <__udivmoddi4+0x12c>
 8002ab6:	eb1c 0101 	adds.w	r1, ip, r1
 8002aba:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8002abe:	d202      	bcs.n	8002ac6 <__udivmoddi4+0x12a>
 8002ac0:	4288      	cmp	r0, r1
 8002ac2:	f200 80cb 	bhi.w	8002c5c <__udivmoddi4+0x2c0>
 8002ac6:	4643      	mov	r3, r8
 8002ac8:	1a09      	subs	r1, r1, r0
 8002aca:	b2a4      	uxth	r4, r4
 8002acc:	fbb1 f0f7 	udiv	r0, r1, r7
 8002ad0:	fb07 1110 	mls	r1, r7, r0, r1
 8002ad4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8002ad8:	fb0e fe00 	mul.w	lr, lr, r0
 8002adc:	45a6      	cmp	lr, r4
 8002ade:	d908      	bls.n	8002af2 <__udivmoddi4+0x156>
 8002ae0:	eb1c 0404 	adds.w	r4, ip, r4
 8002ae4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8002ae8:	d202      	bcs.n	8002af0 <__udivmoddi4+0x154>
 8002aea:	45a6      	cmp	lr, r4
 8002aec:	f200 80bb 	bhi.w	8002c66 <__udivmoddi4+0x2ca>
 8002af0:	4608      	mov	r0, r1
 8002af2:	eba4 040e 	sub.w	r4, r4, lr
 8002af6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002afa:	e79c      	b.n	8002a36 <__udivmoddi4+0x9a>
 8002afc:	f1c6 0720 	rsb	r7, r6, #32
 8002b00:	40b3      	lsls	r3, r6
 8002b02:	fa22 fc07 	lsr.w	ip, r2, r7
 8002b06:	ea4c 0c03 	orr.w	ip, ip, r3
 8002b0a:	fa20 f407 	lsr.w	r4, r0, r7
 8002b0e:	fa01 f306 	lsl.w	r3, r1, r6
 8002b12:	431c      	orrs	r4, r3
 8002b14:	40f9      	lsrs	r1, r7
 8002b16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8002b1a:	fa00 f306 	lsl.w	r3, r0, r6
 8002b1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8002b22:	0c20      	lsrs	r0, r4, #16
 8002b24:	fa1f fe8c 	uxth.w	lr, ip
 8002b28:	fb09 1118 	mls	r1, r9, r8, r1
 8002b2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8002b30:	fb08 f00e 	mul.w	r0, r8, lr
 8002b34:	4288      	cmp	r0, r1
 8002b36:	fa02 f206 	lsl.w	r2, r2, r6
 8002b3a:	d90b      	bls.n	8002b54 <__udivmoddi4+0x1b8>
 8002b3c:	eb1c 0101 	adds.w	r1, ip, r1
 8002b40:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8002b44:	f080 8088 	bcs.w	8002c58 <__udivmoddi4+0x2bc>
 8002b48:	4288      	cmp	r0, r1
 8002b4a:	f240 8085 	bls.w	8002c58 <__udivmoddi4+0x2bc>
 8002b4e:	f1a8 0802 	sub.w	r8, r8, #2
 8002b52:	4461      	add	r1, ip
 8002b54:	1a09      	subs	r1, r1, r0
 8002b56:	b2a4      	uxth	r4, r4
 8002b58:	fbb1 f0f9 	udiv	r0, r1, r9
 8002b5c:	fb09 1110 	mls	r1, r9, r0, r1
 8002b60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8002b64:	fb00 fe0e 	mul.w	lr, r0, lr
 8002b68:	458e      	cmp	lr, r1
 8002b6a:	d908      	bls.n	8002b7e <__udivmoddi4+0x1e2>
 8002b6c:	eb1c 0101 	adds.w	r1, ip, r1
 8002b70:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8002b74:	d26c      	bcs.n	8002c50 <__udivmoddi4+0x2b4>
 8002b76:	458e      	cmp	lr, r1
 8002b78:	d96a      	bls.n	8002c50 <__udivmoddi4+0x2b4>
 8002b7a:	3802      	subs	r0, #2
 8002b7c:	4461      	add	r1, ip
 8002b7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8002b82:	fba0 9402 	umull	r9, r4, r0, r2
 8002b86:	eba1 010e 	sub.w	r1, r1, lr
 8002b8a:	42a1      	cmp	r1, r4
 8002b8c:	46c8      	mov	r8, r9
 8002b8e:	46a6      	mov	lr, r4
 8002b90:	d356      	bcc.n	8002c40 <__udivmoddi4+0x2a4>
 8002b92:	d053      	beq.n	8002c3c <__udivmoddi4+0x2a0>
 8002b94:	b15d      	cbz	r5, 8002bae <__udivmoddi4+0x212>
 8002b96:	ebb3 0208 	subs.w	r2, r3, r8
 8002b9a:	eb61 010e 	sbc.w	r1, r1, lr
 8002b9e:	fa01 f707 	lsl.w	r7, r1, r7
 8002ba2:	fa22 f306 	lsr.w	r3, r2, r6
 8002ba6:	40f1      	lsrs	r1, r6
 8002ba8:	431f      	orrs	r7, r3
 8002baa:	e9c5 7100 	strd	r7, r1, [r5]
 8002bae:	2600      	movs	r6, #0
 8002bb0:	4631      	mov	r1, r6
 8002bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bb6:	f1c2 0320 	rsb	r3, r2, #32
 8002bba:	40d8      	lsrs	r0, r3
 8002bbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8002bc0:	fa21 f303 	lsr.w	r3, r1, r3
 8002bc4:	4091      	lsls	r1, r2
 8002bc6:	4301      	orrs	r1, r0
 8002bc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8002bcc:	fa1f fe8c 	uxth.w	lr, ip
 8002bd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8002bd4:	fb07 3610 	mls	r6, r7, r0, r3
 8002bd8:	0c0b      	lsrs	r3, r1, #16
 8002bda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8002bde:	fb00 f60e 	mul.w	r6, r0, lr
 8002be2:	429e      	cmp	r6, r3
 8002be4:	fa04 f402 	lsl.w	r4, r4, r2
 8002be8:	d908      	bls.n	8002bfc <__udivmoddi4+0x260>
 8002bea:	eb1c 0303 	adds.w	r3, ip, r3
 8002bee:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8002bf2:	d22f      	bcs.n	8002c54 <__udivmoddi4+0x2b8>
 8002bf4:	429e      	cmp	r6, r3
 8002bf6:	d92d      	bls.n	8002c54 <__udivmoddi4+0x2b8>
 8002bf8:	3802      	subs	r0, #2
 8002bfa:	4463      	add	r3, ip
 8002bfc:	1b9b      	subs	r3, r3, r6
 8002bfe:	b289      	uxth	r1, r1
 8002c00:	fbb3 f6f7 	udiv	r6, r3, r7
 8002c04:	fb07 3316 	mls	r3, r7, r6, r3
 8002c08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8002c0c:	fb06 f30e 	mul.w	r3, r6, lr
 8002c10:	428b      	cmp	r3, r1
 8002c12:	d908      	bls.n	8002c26 <__udivmoddi4+0x28a>
 8002c14:	eb1c 0101 	adds.w	r1, ip, r1
 8002c18:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8002c1c:	d216      	bcs.n	8002c4c <__udivmoddi4+0x2b0>
 8002c1e:	428b      	cmp	r3, r1
 8002c20:	d914      	bls.n	8002c4c <__udivmoddi4+0x2b0>
 8002c22:	3e02      	subs	r6, #2
 8002c24:	4461      	add	r1, ip
 8002c26:	1ac9      	subs	r1, r1, r3
 8002c28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8002c2c:	e738      	b.n	8002aa0 <__udivmoddi4+0x104>
 8002c2e:	462e      	mov	r6, r5
 8002c30:	4628      	mov	r0, r5
 8002c32:	e705      	b.n	8002a40 <__udivmoddi4+0xa4>
 8002c34:	4606      	mov	r6, r0
 8002c36:	e6e3      	b.n	8002a00 <__udivmoddi4+0x64>
 8002c38:	4618      	mov	r0, r3
 8002c3a:	e6f8      	b.n	8002a2e <__udivmoddi4+0x92>
 8002c3c:	454b      	cmp	r3, r9
 8002c3e:	d2a9      	bcs.n	8002b94 <__udivmoddi4+0x1f8>
 8002c40:	ebb9 0802 	subs.w	r8, r9, r2
 8002c44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8002c48:	3801      	subs	r0, #1
 8002c4a:	e7a3      	b.n	8002b94 <__udivmoddi4+0x1f8>
 8002c4c:	4646      	mov	r6, r8
 8002c4e:	e7ea      	b.n	8002c26 <__udivmoddi4+0x28a>
 8002c50:	4620      	mov	r0, r4
 8002c52:	e794      	b.n	8002b7e <__udivmoddi4+0x1e2>
 8002c54:	4640      	mov	r0, r8
 8002c56:	e7d1      	b.n	8002bfc <__udivmoddi4+0x260>
 8002c58:	46d0      	mov	r8, sl
 8002c5a:	e77b      	b.n	8002b54 <__udivmoddi4+0x1b8>
 8002c5c:	3b02      	subs	r3, #2
 8002c5e:	4461      	add	r1, ip
 8002c60:	e732      	b.n	8002ac8 <__udivmoddi4+0x12c>
 8002c62:	4630      	mov	r0, r6
 8002c64:	e709      	b.n	8002a7a <__udivmoddi4+0xde>
 8002c66:	4464      	add	r4, ip
 8002c68:	3802      	subs	r0, #2
 8002c6a:	e742      	b.n	8002af2 <__udivmoddi4+0x156>

08002c6c <__aeabi_idiv0>:
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop

08002c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ca8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c74:	480d      	ldr	r0, [pc, #52]	; (8002cac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c76:	490e      	ldr	r1, [pc, #56]	; (8002cb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c78:	4a0e      	ldr	r2, [pc, #56]	; (8002cb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c7c:	e002      	b.n	8002c84 <LoopCopyDataInit>

08002c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c82:	3304      	adds	r3, #4

08002c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c88:	d3f9      	bcc.n	8002c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c8a:	4a0b      	ldr	r2, [pc, #44]	; (8002cb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c8c:	4c0b      	ldr	r4, [pc, #44]	; (8002cbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c90:	e001      	b.n	8002c96 <LoopFillZerobss>

08002c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c94:	3204      	adds	r2, #4

08002c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c98:	d3fb      	bcc.n	8002c92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c9a:	f7fe f8c5 	bl	8000e28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c9e:	f7fe f9bb 	bl	8001018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ca2:	f7fd fb5f 	bl	8000364 <main>
  bx  lr    
 8002ca6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ca8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cb0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002cb4:	0800afc0 	.word	0x0800afc0
  ldr r2, =_sbss
 8002cb8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002cbc:	200008f0 	.word	0x200008f0

08002cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cc0:	e7fe      	b.n	8002cc0 <ADC_IRQHandler>
	...

08002cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cc8:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <HAL_Init+0x40>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a0d      	ldr	r2, [pc, #52]	; (8002d04 <HAL_Init+0x40>)
 8002cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <HAL_Init+0x40>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a0a      	ldr	r2, [pc, #40]	; (8002d04 <HAL_Init+0x40>)
 8002cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ce0:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <HAL_Init+0x40>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a07      	ldr	r2, [pc, #28]	; (8002d04 <HAL_Init+0x40>)
 8002ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cec:	2003      	movs	r0, #3
 8002cee:	f000 f94f 	bl	8002f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	f000 f808 	bl	8002d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cf8:	f7fd fd5c 	bl	80007b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40023c00 	.word	0x40023c00

08002d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d10:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <HAL_InitTick+0x54>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <HAL_InitTick+0x58>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 f967 	bl	8002ffa <HAL_SYSTICK_Config>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e00e      	b.n	8002d54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b0f      	cmp	r3, #15
 8002d3a:	d80a      	bhi.n	8002d52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d44:	f000 f92f 	bl	8002fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d48:	4a06      	ldr	r2, [pc, #24]	; (8002d64 <HAL_InitTick+0x5c>)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	e000      	b.n	8002d54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	20000000 	.word	0x20000000
 8002d60:	2000006c 	.word	0x2000006c
 8002d64:	20000068 	.word	0x20000068

08002d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d6c:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <HAL_IncTick+0x20>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	461a      	mov	r2, r3
 8002d72:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <HAL_IncTick+0x24>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4413      	add	r3, r2
 8002d78:	4a04      	ldr	r2, [pc, #16]	; (8002d8c <HAL_IncTick+0x24>)
 8002d7a:	6013      	str	r3, [r2, #0]
}
 8002d7c:	bf00      	nop
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	2000006c 	.word	0x2000006c
 8002d8c:	2000020c 	.word	0x2000020c

08002d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  return uwTick;
 8002d94:	4b03      	ldr	r3, [pc, #12]	; (8002da4 <HAL_GetTick+0x14>)
 8002d96:	681b      	ldr	r3, [r3, #0]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	2000020c 	.word	0x2000020c

08002da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002db0:	f7ff ffee 	bl	8002d90 <HAL_GetTick>
 8002db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dc0:	d005      	beq.n	8002dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dc2:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <HAL_Delay+0x44>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4413      	add	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dce:	bf00      	nop
 8002dd0:	f7ff ffde 	bl	8002d90 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d8f7      	bhi.n	8002dd0 <HAL_Delay+0x28>
  {
  }
}
 8002de0:	bf00      	nop
 8002de2:	bf00      	nop
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	2000006c 	.word	0x2000006c

08002df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e00:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <__NVIC_SetPriorityGrouping+0x44>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e22:	4a04      	ldr	r2, [pc, #16]	; (8002e34 <__NVIC_SetPriorityGrouping+0x44>)
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	60d3      	str	r3, [r2, #12]
}
 8002e28:	bf00      	nop
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e3c:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <__NVIC_GetPriorityGrouping+0x18>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	0a1b      	lsrs	r3, r3, #8
 8002e42:	f003 0307 	and.w	r3, r3, #7
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	e000ed00 	.word	0xe000ed00

08002e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	db0b      	blt.n	8002e7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	f003 021f 	and.w	r2, r3, #31
 8002e6c:	4907      	ldr	r1, [pc, #28]	; (8002e8c <__NVIC_EnableIRQ+0x38>)
 8002e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e72:	095b      	lsrs	r3, r3, #5
 8002e74:	2001      	movs	r0, #1
 8002e76:	fa00 f202 	lsl.w	r2, r0, r2
 8002e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	e000e100 	.word	0xe000e100

08002e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	6039      	str	r1, [r7, #0]
 8002e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	db0a      	blt.n	8002eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	490c      	ldr	r1, [pc, #48]	; (8002edc <__NVIC_SetPriority+0x4c>)
 8002eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eae:	0112      	lsls	r2, r2, #4
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eb8:	e00a      	b.n	8002ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	4908      	ldr	r1, [pc, #32]	; (8002ee0 <__NVIC_SetPriority+0x50>)
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	3b04      	subs	r3, #4
 8002ec8:	0112      	lsls	r2, r2, #4
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	440b      	add	r3, r1
 8002ece:	761a      	strb	r2, [r3, #24]
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	e000e100 	.word	0xe000e100
 8002ee0:	e000ed00 	.word	0xe000ed00

08002ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b089      	sub	sp, #36	; 0x24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f1c3 0307 	rsb	r3, r3, #7
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	bf28      	it	cs
 8002f02:	2304      	movcs	r3, #4
 8002f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	2b06      	cmp	r3, #6
 8002f0c:	d902      	bls.n	8002f14 <NVIC_EncodePriority+0x30>
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	3b03      	subs	r3, #3
 8002f12:	e000      	b.n	8002f16 <NVIC_EncodePriority+0x32>
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43da      	mvns	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	401a      	ands	r2, r3
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	fa01 f303 	lsl.w	r3, r1, r3
 8002f36:	43d9      	mvns	r1, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f3c:	4313      	orrs	r3, r2
         );
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3724      	adds	r7, #36	; 0x24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f5c:	d301      	bcc.n	8002f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e00f      	b.n	8002f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f62:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <SysTick_Config+0x40>)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f6a:	210f      	movs	r1, #15
 8002f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f70:	f7ff ff8e 	bl	8002e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <SysTick_Config+0x40>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f7a:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <SysTick_Config+0x40>)
 8002f7c:	2207      	movs	r2, #7
 8002f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	e000e010 	.word	0xe000e010

08002f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff ff29 	bl	8002df0 <__NVIC_SetPriorityGrouping>
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b086      	sub	sp, #24
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	4603      	mov	r3, r0
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	607a      	str	r2, [r7, #4]
 8002fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fb8:	f7ff ff3e 	bl	8002e38 <__NVIC_GetPriorityGrouping>
 8002fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68b9      	ldr	r1, [r7, #8]
 8002fc2:	6978      	ldr	r0, [r7, #20]
 8002fc4:	f7ff ff8e 	bl	8002ee4 <NVIC_EncodePriority>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fce:	4611      	mov	r1, r2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff ff5d 	bl	8002e90 <__NVIC_SetPriority>
}
 8002fd6:	bf00      	nop
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b082      	sub	sp, #8
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff ff31 	bl	8002e54 <__NVIC_EnableIRQ>
}
 8002ff2:	bf00      	nop
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7ff ffa2 	bl	8002f4c <SysTick_Config>
 8003008:	4603      	mov	r3, r0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
	...

08003014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003014:	b480      	push	{r7}
 8003016:	b089      	sub	sp, #36	; 0x24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003022:	2300      	movs	r3, #0
 8003024:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003026:	2300      	movs	r3, #0
 8003028:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
 800302e:	e16b      	b.n	8003308 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003030:	2201      	movs	r2, #1
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	4013      	ands	r3, r2
 8003042:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	429a      	cmp	r2, r3
 800304a:	f040 815a 	bne.w	8003302 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	2b01      	cmp	r3, #1
 8003058:	d005      	beq.n	8003066 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003062:	2b02      	cmp	r3, #2
 8003064:	d130      	bne.n	80030c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	2203      	movs	r2, #3
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43db      	mvns	r3, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4013      	ands	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	4313      	orrs	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800309c:	2201      	movs	r2, #1
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	f003 0201 	and.w	r2, r3, #1
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4313      	orrs	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	d017      	beq.n	8003104 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	2203      	movs	r2, #3
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4013      	ands	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d123      	bne.n	8003158 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	08da      	lsrs	r2, r3, #3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3208      	adds	r2, #8
 8003118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800311c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	220f      	movs	r2, #15
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4013      	ands	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4313      	orrs	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	08da      	lsrs	r2, r3, #3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3208      	adds	r2, #8
 8003152:	69b9      	ldr	r1, [r7, #24]
 8003154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	2203      	movs	r2, #3
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	43db      	mvns	r3, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 0203 	and.w	r2, r3, #3
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4313      	orrs	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 80b4 	beq.w	8003302 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	4b60      	ldr	r3, [pc, #384]	; (8003320 <HAL_GPIO_Init+0x30c>)
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	4a5f      	ldr	r2, [pc, #380]	; (8003320 <HAL_GPIO_Init+0x30c>)
 80031a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031a8:	6453      	str	r3, [r2, #68]	; 0x44
 80031aa:	4b5d      	ldr	r3, [pc, #372]	; (8003320 <HAL_GPIO_Init+0x30c>)
 80031ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031b6:	4a5b      	ldr	r2, [pc, #364]	; (8003324 <HAL_GPIO_Init+0x310>)
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	089b      	lsrs	r3, r3, #2
 80031bc:	3302      	adds	r3, #2
 80031be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	220f      	movs	r2, #15
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a52      	ldr	r2, [pc, #328]	; (8003328 <HAL_GPIO_Init+0x314>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d02b      	beq.n	800323a <HAL_GPIO_Init+0x226>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a51      	ldr	r2, [pc, #324]	; (800332c <HAL_GPIO_Init+0x318>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d025      	beq.n	8003236 <HAL_GPIO_Init+0x222>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a50      	ldr	r2, [pc, #320]	; (8003330 <HAL_GPIO_Init+0x31c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d01f      	beq.n	8003232 <HAL_GPIO_Init+0x21e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a4f      	ldr	r2, [pc, #316]	; (8003334 <HAL_GPIO_Init+0x320>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d019      	beq.n	800322e <HAL_GPIO_Init+0x21a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a4e      	ldr	r2, [pc, #312]	; (8003338 <HAL_GPIO_Init+0x324>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d013      	beq.n	800322a <HAL_GPIO_Init+0x216>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a4d      	ldr	r2, [pc, #308]	; (800333c <HAL_GPIO_Init+0x328>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00d      	beq.n	8003226 <HAL_GPIO_Init+0x212>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a4c      	ldr	r2, [pc, #304]	; (8003340 <HAL_GPIO_Init+0x32c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d007      	beq.n	8003222 <HAL_GPIO_Init+0x20e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a4b      	ldr	r2, [pc, #300]	; (8003344 <HAL_GPIO_Init+0x330>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d101      	bne.n	800321e <HAL_GPIO_Init+0x20a>
 800321a:	2307      	movs	r3, #7
 800321c:	e00e      	b.n	800323c <HAL_GPIO_Init+0x228>
 800321e:	2308      	movs	r3, #8
 8003220:	e00c      	b.n	800323c <HAL_GPIO_Init+0x228>
 8003222:	2306      	movs	r3, #6
 8003224:	e00a      	b.n	800323c <HAL_GPIO_Init+0x228>
 8003226:	2305      	movs	r3, #5
 8003228:	e008      	b.n	800323c <HAL_GPIO_Init+0x228>
 800322a:	2304      	movs	r3, #4
 800322c:	e006      	b.n	800323c <HAL_GPIO_Init+0x228>
 800322e:	2303      	movs	r3, #3
 8003230:	e004      	b.n	800323c <HAL_GPIO_Init+0x228>
 8003232:	2302      	movs	r3, #2
 8003234:	e002      	b.n	800323c <HAL_GPIO_Init+0x228>
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <HAL_GPIO_Init+0x228>
 800323a:	2300      	movs	r3, #0
 800323c:	69fa      	ldr	r2, [r7, #28]
 800323e:	f002 0203 	and.w	r2, r2, #3
 8003242:	0092      	lsls	r2, r2, #2
 8003244:	4093      	lsls	r3, r2
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4313      	orrs	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800324c:	4935      	ldr	r1, [pc, #212]	; (8003324 <HAL_GPIO_Init+0x310>)
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	089b      	lsrs	r3, r3, #2
 8003252:	3302      	adds	r3, #2
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800325a:	4b3b      	ldr	r3, [pc, #236]	; (8003348 <HAL_GPIO_Init+0x334>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	43db      	mvns	r3, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4013      	ands	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	4313      	orrs	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800327e:	4a32      	ldr	r2, [pc, #200]	; (8003348 <HAL_GPIO_Init+0x334>)
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003284:	4b30      	ldr	r3, [pc, #192]	; (8003348 <HAL_GPIO_Init+0x334>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	43db      	mvns	r3, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4013      	ands	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032a8:	4a27      	ldr	r2, [pc, #156]	; (8003348 <HAL_GPIO_Init+0x334>)
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032ae:	4b26      	ldr	r3, [pc, #152]	; (8003348 <HAL_GPIO_Init+0x334>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	43db      	mvns	r3, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4013      	ands	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032d2:	4a1d      	ldr	r2, [pc, #116]	; (8003348 <HAL_GPIO_Init+0x334>)
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032d8:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <HAL_GPIO_Init+0x334>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	43db      	mvns	r3, r3
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4013      	ands	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032fc:	4a12      	ldr	r2, [pc, #72]	; (8003348 <HAL_GPIO_Init+0x334>)
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	3301      	adds	r3, #1
 8003306:	61fb      	str	r3, [r7, #28]
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	2b0f      	cmp	r3, #15
 800330c:	f67f ae90 	bls.w	8003030 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003310:	bf00      	nop
 8003312:	bf00      	nop
 8003314:	3724      	adds	r7, #36	; 0x24
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800
 8003324:	40013800 	.word	0x40013800
 8003328:	40020000 	.word	0x40020000
 800332c:	40020400 	.word	0x40020400
 8003330:	40020800 	.word	0x40020800
 8003334:	40020c00 	.word	0x40020c00
 8003338:	40021000 	.word	0x40021000
 800333c:	40021400 	.word	0x40021400
 8003340:	40021800 	.word	0x40021800
 8003344:	40021c00 	.word	0x40021c00
 8003348:	40013c00 	.word	0x40013c00

0800334c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800334c:	b480      	push	{r7}
 800334e:	b087      	sub	sp, #28
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003356:	2300      	movs	r3, #0
 8003358:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800335a:	2300      	movs	r3, #0
 800335c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800335e:	2300      	movs	r3, #0
 8003360:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
 8003366:	e0cd      	b.n	8003504 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003368:	2201      	movs	r2, #1
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	4013      	ands	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	429a      	cmp	r2, r3
 8003380:	f040 80bd 	bne.w	80034fe <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003384:	4a65      	ldr	r2, [pc, #404]	; (800351c <HAL_GPIO_DeInit+0x1d0>)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	089b      	lsrs	r3, r3, #2
 800338a:	3302      	adds	r3, #2
 800338c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003390:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	220f      	movs	r2, #15
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	4013      	ands	r3, r2
 80033a4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a5d      	ldr	r2, [pc, #372]	; (8003520 <HAL_GPIO_DeInit+0x1d4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d02b      	beq.n	8003406 <HAL_GPIO_DeInit+0xba>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a5c      	ldr	r2, [pc, #368]	; (8003524 <HAL_GPIO_DeInit+0x1d8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d025      	beq.n	8003402 <HAL_GPIO_DeInit+0xb6>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a5b      	ldr	r2, [pc, #364]	; (8003528 <HAL_GPIO_DeInit+0x1dc>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d01f      	beq.n	80033fe <HAL_GPIO_DeInit+0xb2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a5a      	ldr	r2, [pc, #360]	; (800352c <HAL_GPIO_DeInit+0x1e0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d019      	beq.n	80033fa <HAL_GPIO_DeInit+0xae>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a59      	ldr	r2, [pc, #356]	; (8003530 <HAL_GPIO_DeInit+0x1e4>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d013      	beq.n	80033f6 <HAL_GPIO_DeInit+0xaa>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a58      	ldr	r2, [pc, #352]	; (8003534 <HAL_GPIO_DeInit+0x1e8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d00d      	beq.n	80033f2 <HAL_GPIO_DeInit+0xa6>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a57      	ldr	r2, [pc, #348]	; (8003538 <HAL_GPIO_DeInit+0x1ec>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d007      	beq.n	80033ee <HAL_GPIO_DeInit+0xa2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a56      	ldr	r2, [pc, #344]	; (800353c <HAL_GPIO_DeInit+0x1f0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d101      	bne.n	80033ea <HAL_GPIO_DeInit+0x9e>
 80033e6:	2307      	movs	r3, #7
 80033e8:	e00e      	b.n	8003408 <HAL_GPIO_DeInit+0xbc>
 80033ea:	2308      	movs	r3, #8
 80033ec:	e00c      	b.n	8003408 <HAL_GPIO_DeInit+0xbc>
 80033ee:	2306      	movs	r3, #6
 80033f0:	e00a      	b.n	8003408 <HAL_GPIO_DeInit+0xbc>
 80033f2:	2305      	movs	r3, #5
 80033f4:	e008      	b.n	8003408 <HAL_GPIO_DeInit+0xbc>
 80033f6:	2304      	movs	r3, #4
 80033f8:	e006      	b.n	8003408 <HAL_GPIO_DeInit+0xbc>
 80033fa:	2303      	movs	r3, #3
 80033fc:	e004      	b.n	8003408 <HAL_GPIO_DeInit+0xbc>
 80033fe:	2302      	movs	r3, #2
 8003400:	e002      	b.n	8003408 <HAL_GPIO_DeInit+0xbc>
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <HAL_GPIO_DeInit+0xbc>
 8003406:	2300      	movs	r3, #0
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	f002 0203 	and.w	r2, r2, #3
 800340e:	0092      	lsls	r2, r2, #2
 8003410:	4093      	lsls	r3, r2
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	429a      	cmp	r2, r3
 8003416:	d132      	bne.n	800347e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003418:	4b49      	ldr	r3, [pc, #292]	; (8003540 <HAL_GPIO_DeInit+0x1f4>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	43db      	mvns	r3, r3
 8003420:	4947      	ldr	r1, [pc, #284]	; (8003540 <HAL_GPIO_DeInit+0x1f4>)
 8003422:	4013      	ands	r3, r2
 8003424:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003426:	4b46      	ldr	r3, [pc, #280]	; (8003540 <HAL_GPIO_DeInit+0x1f4>)
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	43db      	mvns	r3, r3
 800342e:	4944      	ldr	r1, [pc, #272]	; (8003540 <HAL_GPIO_DeInit+0x1f4>)
 8003430:	4013      	ands	r3, r2
 8003432:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003434:	4b42      	ldr	r3, [pc, #264]	; (8003540 <HAL_GPIO_DeInit+0x1f4>)
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	43db      	mvns	r3, r3
 800343c:	4940      	ldr	r1, [pc, #256]	; (8003540 <HAL_GPIO_DeInit+0x1f4>)
 800343e:	4013      	ands	r3, r2
 8003440:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003442:	4b3f      	ldr	r3, [pc, #252]	; (8003540 <HAL_GPIO_DeInit+0x1f4>)
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	43db      	mvns	r3, r3
 800344a:	493d      	ldr	r1, [pc, #244]	; (8003540 <HAL_GPIO_DeInit+0x1f4>)
 800344c:	4013      	ands	r3, r2
 800344e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	220f      	movs	r2, #15
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003460:	4a2e      	ldr	r2, [pc, #184]	; (800351c <HAL_GPIO_DeInit+0x1d0>)
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	089b      	lsrs	r3, r3, #2
 8003466:	3302      	adds	r3, #2
 8003468:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	43da      	mvns	r2, r3
 8003470:	482a      	ldr	r0, [pc, #168]	; (800351c <HAL_GPIO_DeInit+0x1d0>)
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	089b      	lsrs	r3, r3, #2
 8003476:	400a      	ands	r2, r1
 8003478:	3302      	adds	r3, #2
 800347a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	2103      	movs	r1, #3
 8003488:	fa01 f303 	lsl.w	r3, r1, r3
 800348c:	43db      	mvns	r3, r3
 800348e:	401a      	ands	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	08da      	lsrs	r2, r3, #3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3208      	adds	r2, #8
 800349c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	220f      	movs	r2, #15
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	43db      	mvns	r3, r3
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	08d2      	lsrs	r2, r2, #3
 80034b4:	4019      	ands	r1, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3208      	adds	r2, #8
 80034ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	2103      	movs	r1, #3
 80034c8:	fa01 f303 	lsl.w	r3, r1, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	401a      	ands	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	2101      	movs	r1, #1
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	fa01 f303 	lsl.w	r3, r1, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	401a      	ands	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	2103      	movs	r1, #3
 80034f2:	fa01 f303 	lsl.w	r3, r1, r3
 80034f6:	43db      	mvns	r3, r3
 80034f8:	401a      	ands	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	3301      	adds	r3, #1
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	2b0f      	cmp	r3, #15
 8003508:	f67f af2e 	bls.w	8003368 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800350c:	bf00      	nop
 800350e:	bf00      	nop
 8003510:	371c      	adds	r7, #28
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	40013800 	.word	0x40013800
 8003520:	40020000 	.word	0x40020000
 8003524:	40020400 	.word	0x40020400
 8003528:	40020800 	.word	0x40020800
 800352c:	40020c00 	.word	0x40020c00
 8003530:	40021000 	.word	0x40021000
 8003534:	40021400 	.word	0x40021400
 8003538:	40021800 	.word	0x40021800
 800353c:	40021c00 	.word	0x40021c00
 8003540:	40013c00 	.word	0x40013c00

08003544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	807b      	strh	r3, [r7, #2]
 8003550:	4613      	mov	r3, r2
 8003552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003554:	787b      	ldrb	r3, [r7, #1]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800355a:	887a      	ldrh	r2, [r7, #2]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003560:	e003      	b.n	800356a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003562:	887b      	ldrh	r3, [r7, #2]
 8003564:	041a      	lsls	r2, r3, #16
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	619a      	str	r2, [r3, #24]
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003576:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003578:	b08f      	sub	sp, #60	; 0x3c
 800357a:	af0a      	add	r7, sp, #40	; 0x28
 800357c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e054      	b.n	8003632 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d106      	bne.n	80035a8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f006 fc2a 	bl	8009dfc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2203      	movs	r2, #3
 80035ac:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d102      	bne.n	80035c2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f003 fc58 	bl	8006e7c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	603b      	str	r3, [r7, #0]
 80035d2:	687e      	ldr	r6, [r7, #4]
 80035d4:	466d      	mov	r5, sp
 80035d6:	f106 0410 	add.w	r4, r6, #16
 80035da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80035ea:	1d33      	adds	r3, r6, #4
 80035ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035ee:	6838      	ldr	r0, [r7, #0]
 80035f0:	f003 fbd2 	bl	8006d98 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2101      	movs	r1, #1
 80035fa:	4618      	mov	r0, r3
 80035fc:	f003 fc4f 	bl	8006e9e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	603b      	str	r3, [r7, #0]
 8003606:	687e      	ldr	r6, [r7, #4]
 8003608:	466d      	mov	r5, sp
 800360a:	f106 0410 	add.w	r4, r6, #16
 800360e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003610:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003614:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003616:	e894 0003 	ldmia.w	r4, {r0, r1}
 800361a:	e885 0003 	stmia.w	r5, {r0, r1}
 800361e:	1d33      	adds	r3, r6, #4
 8003620:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003622:	6838      	ldr	r0, [r7, #0]
 8003624:	f003 fdd8 	bl	80071d8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800363a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800363a:	b590      	push	{r4, r7, lr}
 800363c:	b089      	sub	sp, #36	; 0x24
 800363e:	af04      	add	r7, sp, #16
 8003640:	6078      	str	r0, [r7, #4]
 8003642:	4608      	mov	r0, r1
 8003644:	4611      	mov	r1, r2
 8003646:	461a      	mov	r2, r3
 8003648:	4603      	mov	r3, r0
 800364a:	70fb      	strb	r3, [r7, #3]
 800364c:	460b      	mov	r3, r1
 800364e:	70bb      	strb	r3, [r7, #2]
 8003650:	4613      	mov	r3, r2
 8003652:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800365a:	2b01      	cmp	r3, #1
 800365c:	d101      	bne.n	8003662 <HAL_HCD_HC_Init+0x28>
 800365e:	2302      	movs	r3, #2
 8003660:	e076      	b.n	8003750 <HAL_HCD_HC_Init+0x116>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800366a:	78fb      	ldrb	r3, [r7, #3]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	212c      	movs	r1, #44	; 0x2c
 8003670:	fb01 f303 	mul.w	r3, r1, r3
 8003674:	4413      	add	r3, r2
 8003676:	333d      	adds	r3, #61	; 0x3d
 8003678:	2200      	movs	r2, #0
 800367a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	212c      	movs	r1, #44	; 0x2c
 8003682:	fb01 f303 	mul.w	r3, r1, r3
 8003686:	4413      	add	r3, r2
 8003688:	3338      	adds	r3, #56	; 0x38
 800368a:	787a      	ldrb	r2, [r7, #1]
 800368c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800368e:	78fb      	ldrb	r3, [r7, #3]
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	212c      	movs	r1, #44	; 0x2c
 8003694:	fb01 f303 	mul.w	r3, r1, r3
 8003698:	4413      	add	r3, r2
 800369a:	3340      	adds	r3, #64	; 0x40
 800369c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800369e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80036a0:	78fb      	ldrb	r3, [r7, #3]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	212c      	movs	r1, #44	; 0x2c
 80036a6:	fb01 f303 	mul.w	r3, r1, r3
 80036aa:	4413      	add	r3, r2
 80036ac:	3339      	adds	r3, #57	; 0x39
 80036ae:	78fa      	ldrb	r2, [r7, #3]
 80036b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80036b2:	78fb      	ldrb	r3, [r7, #3]
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	212c      	movs	r1, #44	; 0x2c
 80036b8:	fb01 f303 	mul.w	r3, r1, r3
 80036bc:	4413      	add	r3, r2
 80036be:	333f      	adds	r3, #63	; 0x3f
 80036c0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80036c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80036c6:	78fb      	ldrb	r3, [r7, #3]
 80036c8:	78ba      	ldrb	r2, [r7, #2]
 80036ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036ce:	b2d0      	uxtb	r0, r2
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	212c      	movs	r1, #44	; 0x2c
 80036d4:	fb01 f303 	mul.w	r3, r1, r3
 80036d8:	4413      	add	r3, r2
 80036da:	333a      	adds	r3, #58	; 0x3a
 80036dc:	4602      	mov	r2, r0
 80036de:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80036e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	da09      	bge.n	80036fc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80036e8:	78fb      	ldrb	r3, [r7, #3]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	212c      	movs	r1, #44	; 0x2c
 80036ee:	fb01 f303 	mul.w	r3, r1, r3
 80036f2:	4413      	add	r3, r2
 80036f4:	333b      	adds	r3, #59	; 0x3b
 80036f6:	2201      	movs	r2, #1
 80036f8:	701a      	strb	r2, [r3, #0]
 80036fa:	e008      	b.n	800370e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80036fc:	78fb      	ldrb	r3, [r7, #3]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	212c      	movs	r1, #44	; 0x2c
 8003702:	fb01 f303 	mul.w	r3, r1, r3
 8003706:	4413      	add	r3, r2
 8003708:	333b      	adds	r3, #59	; 0x3b
 800370a:	2200      	movs	r2, #0
 800370c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800370e:	78fb      	ldrb	r3, [r7, #3]
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	212c      	movs	r1, #44	; 0x2c
 8003714:	fb01 f303 	mul.w	r3, r1, r3
 8003718:	4413      	add	r3, r2
 800371a:	333c      	adds	r3, #60	; 0x3c
 800371c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003720:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6818      	ldr	r0, [r3, #0]
 8003726:	787c      	ldrb	r4, [r7, #1]
 8003728:	78ba      	ldrb	r2, [r7, #2]
 800372a:	78f9      	ldrb	r1, [r7, #3]
 800372c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800372e:	9302      	str	r3, [sp, #8]
 8003730:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003734:	9301      	str	r3, [sp, #4]
 8003736:	f897 3020 	ldrb.w	r3, [r7, #32]
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	4623      	mov	r3, r4
 800373e:	f003 fed1 	bl	80074e4 <USB_HC_Init>
 8003742:	4603      	mov	r3, r0
 8003744:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800374e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	bd90      	pop	{r4, r7, pc}

08003758 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_HCD_HC_Halt+0x1e>
 8003772:	2302      	movs	r3, #2
 8003774:	e00f      	b.n	8003796 <HAL_HCD_HC_Halt+0x3e>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	78fa      	ldrb	r2, [r7, #3]
 8003784:	4611      	mov	r1, r2
 8003786:	4618      	mov	r0, r3
 8003788:	f004 f921 	bl	80079ce <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003794:	7bfb      	ldrb	r3, [r7, #15]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	4608      	mov	r0, r1
 80037aa:	4611      	mov	r1, r2
 80037ac:	461a      	mov	r2, r3
 80037ae:	4603      	mov	r3, r0
 80037b0:	70fb      	strb	r3, [r7, #3]
 80037b2:	460b      	mov	r3, r1
 80037b4:	70bb      	strb	r3, [r7, #2]
 80037b6:	4613      	mov	r3, r2
 80037b8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80037ba:	78fb      	ldrb	r3, [r7, #3]
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	212c      	movs	r1, #44	; 0x2c
 80037c0:	fb01 f303 	mul.w	r3, r1, r3
 80037c4:	4413      	add	r3, r2
 80037c6:	333b      	adds	r3, #59	; 0x3b
 80037c8:	78ba      	ldrb	r2, [r7, #2]
 80037ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	212c      	movs	r1, #44	; 0x2c
 80037d2:	fb01 f303 	mul.w	r3, r1, r3
 80037d6:	4413      	add	r3, r2
 80037d8:	333f      	adds	r3, #63	; 0x3f
 80037da:	787a      	ldrb	r2, [r7, #1]
 80037dc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80037de:	7c3b      	ldrb	r3, [r7, #16]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d112      	bne.n	800380a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	212c      	movs	r1, #44	; 0x2c
 80037ea:	fb01 f303 	mul.w	r3, r1, r3
 80037ee:	4413      	add	r3, r2
 80037f0:	3342      	adds	r3, #66	; 0x42
 80037f2:	2203      	movs	r2, #3
 80037f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80037f6:	78fb      	ldrb	r3, [r7, #3]
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	212c      	movs	r1, #44	; 0x2c
 80037fc:	fb01 f303 	mul.w	r3, r1, r3
 8003800:	4413      	add	r3, r2
 8003802:	333d      	adds	r3, #61	; 0x3d
 8003804:	7f3a      	ldrb	r2, [r7, #28]
 8003806:	701a      	strb	r2, [r3, #0]
 8003808:	e008      	b.n	800381c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800380a:	78fb      	ldrb	r3, [r7, #3]
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	212c      	movs	r1, #44	; 0x2c
 8003810:	fb01 f303 	mul.w	r3, r1, r3
 8003814:	4413      	add	r3, r2
 8003816:	3342      	adds	r3, #66	; 0x42
 8003818:	2202      	movs	r2, #2
 800381a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800381c:	787b      	ldrb	r3, [r7, #1]
 800381e:	2b03      	cmp	r3, #3
 8003820:	f200 80c6 	bhi.w	80039b0 <HAL_HCD_HC_SubmitRequest+0x210>
 8003824:	a201      	add	r2, pc, #4	; (adr r2, 800382c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382a:	bf00      	nop
 800382c:	0800383d 	.word	0x0800383d
 8003830:	0800399d 	.word	0x0800399d
 8003834:	080038a1 	.word	0x080038a1
 8003838:	0800391f 	.word	0x0800391f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800383c:	7c3b      	ldrb	r3, [r7, #16]
 800383e:	2b01      	cmp	r3, #1
 8003840:	f040 80b8 	bne.w	80039b4 <HAL_HCD_HC_SubmitRequest+0x214>
 8003844:	78bb      	ldrb	r3, [r7, #2]
 8003846:	2b00      	cmp	r3, #0
 8003848:	f040 80b4 	bne.w	80039b4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800384c:	8b3b      	ldrh	r3, [r7, #24]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d108      	bne.n	8003864 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003852:	78fb      	ldrb	r3, [r7, #3]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	212c      	movs	r1, #44	; 0x2c
 8003858:	fb01 f303 	mul.w	r3, r1, r3
 800385c:	4413      	add	r3, r2
 800385e:	3355      	adds	r3, #85	; 0x55
 8003860:	2201      	movs	r2, #1
 8003862:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003864:	78fb      	ldrb	r3, [r7, #3]
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	212c      	movs	r1, #44	; 0x2c
 800386a:	fb01 f303 	mul.w	r3, r1, r3
 800386e:	4413      	add	r3, r2
 8003870:	3355      	adds	r3, #85	; 0x55
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d109      	bne.n	800388c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003878:	78fb      	ldrb	r3, [r7, #3]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	212c      	movs	r1, #44	; 0x2c
 800387e:	fb01 f303 	mul.w	r3, r1, r3
 8003882:	4413      	add	r3, r2
 8003884:	3342      	adds	r3, #66	; 0x42
 8003886:	2200      	movs	r2, #0
 8003888:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800388a:	e093      	b.n	80039b4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800388c:	78fb      	ldrb	r3, [r7, #3]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	212c      	movs	r1, #44	; 0x2c
 8003892:	fb01 f303 	mul.w	r3, r1, r3
 8003896:	4413      	add	r3, r2
 8003898:	3342      	adds	r3, #66	; 0x42
 800389a:	2202      	movs	r2, #2
 800389c:	701a      	strb	r2, [r3, #0]
      break;
 800389e:	e089      	b.n	80039b4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80038a0:	78bb      	ldrb	r3, [r7, #2]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d11d      	bne.n	80038e2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80038a6:	78fb      	ldrb	r3, [r7, #3]
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	212c      	movs	r1, #44	; 0x2c
 80038ac:	fb01 f303 	mul.w	r3, r1, r3
 80038b0:	4413      	add	r3, r2
 80038b2:	3355      	adds	r3, #85	; 0x55
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d109      	bne.n	80038ce <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038ba:	78fb      	ldrb	r3, [r7, #3]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	212c      	movs	r1, #44	; 0x2c
 80038c0:	fb01 f303 	mul.w	r3, r1, r3
 80038c4:	4413      	add	r3, r2
 80038c6:	3342      	adds	r3, #66	; 0x42
 80038c8:	2200      	movs	r2, #0
 80038ca:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80038cc:	e073      	b.n	80039b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038ce:	78fb      	ldrb	r3, [r7, #3]
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	212c      	movs	r1, #44	; 0x2c
 80038d4:	fb01 f303 	mul.w	r3, r1, r3
 80038d8:	4413      	add	r3, r2
 80038da:	3342      	adds	r3, #66	; 0x42
 80038dc:	2202      	movs	r2, #2
 80038de:	701a      	strb	r2, [r3, #0]
      break;
 80038e0:	e069      	b.n	80039b6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80038e2:	78fb      	ldrb	r3, [r7, #3]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	212c      	movs	r1, #44	; 0x2c
 80038e8:	fb01 f303 	mul.w	r3, r1, r3
 80038ec:	4413      	add	r3, r2
 80038ee:	3354      	adds	r3, #84	; 0x54
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	212c      	movs	r1, #44	; 0x2c
 80038fc:	fb01 f303 	mul.w	r3, r1, r3
 8003900:	4413      	add	r3, r2
 8003902:	3342      	adds	r3, #66	; 0x42
 8003904:	2200      	movs	r2, #0
 8003906:	701a      	strb	r2, [r3, #0]
      break;
 8003908:	e055      	b.n	80039b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800390a:	78fb      	ldrb	r3, [r7, #3]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	212c      	movs	r1, #44	; 0x2c
 8003910:	fb01 f303 	mul.w	r3, r1, r3
 8003914:	4413      	add	r3, r2
 8003916:	3342      	adds	r3, #66	; 0x42
 8003918:	2202      	movs	r2, #2
 800391a:	701a      	strb	r2, [r3, #0]
      break;
 800391c:	e04b      	b.n	80039b6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800391e:	78bb      	ldrb	r3, [r7, #2]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d11d      	bne.n	8003960 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003924:	78fb      	ldrb	r3, [r7, #3]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	212c      	movs	r1, #44	; 0x2c
 800392a:	fb01 f303 	mul.w	r3, r1, r3
 800392e:	4413      	add	r3, r2
 8003930:	3355      	adds	r3, #85	; 0x55
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d109      	bne.n	800394c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003938:	78fb      	ldrb	r3, [r7, #3]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	212c      	movs	r1, #44	; 0x2c
 800393e:	fb01 f303 	mul.w	r3, r1, r3
 8003942:	4413      	add	r3, r2
 8003944:	3342      	adds	r3, #66	; 0x42
 8003946:	2200      	movs	r2, #0
 8003948:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800394a:	e034      	b.n	80039b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800394c:	78fb      	ldrb	r3, [r7, #3]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	212c      	movs	r1, #44	; 0x2c
 8003952:	fb01 f303 	mul.w	r3, r1, r3
 8003956:	4413      	add	r3, r2
 8003958:	3342      	adds	r3, #66	; 0x42
 800395a:	2202      	movs	r2, #2
 800395c:	701a      	strb	r2, [r3, #0]
      break;
 800395e:	e02a      	b.n	80039b6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003960:	78fb      	ldrb	r3, [r7, #3]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	212c      	movs	r1, #44	; 0x2c
 8003966:	fb01 f303 	mul.w	r3, r1, r3
 800396a:	4413      	add	r3, r2
 800396c:	3354      	adds	r3, #84	; 0x54
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d109      	bne.n	8003988 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003974:	78fb      	ldrb	r3, [r7, #3]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	212c      	movs	r1, #44	; 0x2c
 800397a:	fb01 f303 	mul.w	r3, r1, r3
 800397e:	4413      	add	r3, r2
 8003980:	3342      	adds	r3, #66	; 0x42
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
      break;
 8003986:	e016      	b.n	80039b6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003988:	78fb      	ldrb	r3, [r7, #3]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	212c      	movs	r1, #44	; 0x2c
 800398e:	fb01 f303 	mul.w	r3, r1, r3
 8003992:	4413      	add	r3, r2
 8003994:	3342      	adds	r3, #66	; 0x42
 8003996:	2202      	movs	r2, #2
 8003998:	701a      	strb	r2, [r3, #0]
      break;
 800399a:	e00c      	b.n	80039b6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800399c:	78fb      	ldrb	r3, [r7, #3]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	212c      	movs	r1, #44	; 0x2c
 80039a2:	fb01 f303 	mul.w	r3, r1, r3
 80039a6:	4413      	add	r3, r2
 80039a8:	3342      	adds	r3, #66	; 0x42
 80039aa:	2200      	movs	r2, #0
 80039ac:	701a      	strb	r2, [r3, #0]
      break;
 80039ae:	e002      	b.n	80039b6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80039b0:	bf00      	nop
 80039b2:	e000      	b.n	80039b6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80039b4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80039b6:	78fb      	ldrb	r3, [r7, #3]
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	212c      	movs	r1, #44	; 0x2c
 80039bc:	fb01 f303 	mul.w	r3, r1, r3
 80039c0:	4413      	add	r3, r2
 80039c2:	3344      	adds	r3, #68	; 0x44
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80039c8:	78fb      	ldrb	r3, [r7, #3]
 80039ca:	8b3a      	ldrh	r2, [r7, #24]
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	202c      	movs	r0, #44	; 0x2c
 80039d0:	fb00 f303 	mul.w	r3, r0, r3
 80039d4:	440b      	add	r3, r1
 80039d6:	334c      	adds	r3, #76	; 0x4c
 80039d8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80039da:	78fb      	ldrb	r3, [r7, #3]
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	212c      	movs	r1, #44	; 0x2c
 80039e0:	fb01 f303 	mul.w	r3, r1, r3
 80039e4:	4413      	add	r3, r2
 80039e6:	3360      	adds	r3, #96	; 0x60
 80039e8:	2200      	movs	r2, #0
 80039ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80039ec:	78fb      	ldrb	r3, [r7, #3]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	212c      	movs	r1, #44	; 0x2c
 80039f2:	fb01 f303 	mul.w	r3, r1, r3
 80039f6:	4413      	add	r3, r2
 80039f8:	3350      	adds	r3, #80	; 0x50
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80039fe:	78fb      	ldrb	r3, [r7, #3]
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	212c      	movs	r1, #44	; 0x2c
 8003a04:	fb01 f303 	mul.w	r3, r1, r3
 8003a08:	4413      	add	r3, r2
 8003a0a:	3339      	adds	r3, #57	; 0x39
 8003a0c:	78fa      	ldrb	r2, [r7, #3]
 8003a0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	212c      	movs	r1, #44	; 0x2c
 8003a16:	fb01 f303 	mul.w	r3, r1, r3
 8003a1a:	4413      	add	r3, r2
 8003a1c:	3361      	adds	r3, #97	; 0x61
 8003a1e:	2200      	movs	r2, #0
 8003a20:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6818      	ldr	r0, [r3, #0]
 8003a26:	78fb      	ldrb	r3, [r7, #3]
 8003a28:	222c      	movs	r2, #44	; 0x2c
 8003a2a:	fb02 f303 	mul.w	r3, r2, r3
 8003a2e:	3338      	adds	r3, #56	; 0x38
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	18d1      	adds	r1, r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	f003 fe74 	bl	8007728 <USB_HC_StartXfer>
 8003a40:	4603      	mov	r3, r0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop

08003a4c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f003 fb75 	bl	8007152 <USB_GetMode>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	f040 80f6 	bne.w	8003c5c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f003 fb59 	bl	800712c <USB_ReadInterrupts>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 80ec 	beq.w	8003c5a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f003 fb50 	bl	800712c <USB_ReadInterrupts>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a96:	d104      	bne.n	8003aa2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003aa0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f003 fb40 	bl	800712c <USB_ReadInterrupts>
 8003aac:	4603      	mov	r3, r0
 8003aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ab2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ab6:	d104      	bne.n	8003ac2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ac0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f003 fb30 	bl	800712c <USB_ReadInterrupts>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ad2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ad6:	d104      	bne.n	8003ae2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003ae0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f003 fb20 	bl	800712c <USB_ReadInterrupts>
 8003aec:	4603      	mov	r3, r0
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d103      	bne.n	8003afe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2202      	movs	r2, #2
 8003afc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f003 fb12 	bl	800712c <USB_ReadInterrupts>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b12:	d11c      	bne.n	8003b4e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003b1c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10f      	bne.n	8003b4e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003b2e:	2110      	movs	r1, #16
 8003b30:	6938      	ldr	r0, [r7, #16]
 8003b32:	f003 fa01 	bl	8006f38 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003b36:	6938      	ldr	r0, [r7, #16]
 8003b38:	f003 fa32 	bl	8006fa0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2101      	movs	r1, #1
 8003b42:	4618      	mov	r0, r3
 8003b44:	f003 fc08 	bl	8007358 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f006 f9d5 	bl	8009ef8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f003 faea 	bl	800712c <USB_ReadInterrupts>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b62:	d102      	bne.n	8003b6a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f001 f89e 	bl	8004ca6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f003 fadc 	bl	800712c <USB_ReadInterrupts>
 8003b74:	4603      	mov	r3, r0
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d106      	bne.n	8003b8c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f006 f99e 	bl	8009ec0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2208      	movs	r2, #8
 8003b8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f003 facb 	bl	800712c <USB_ReadInterrupts>
 8003b96:	4603      	mov	r3, r0
 8003b98:	f003 0310 	and.w	r3, r3, #16
 8003b9c:	2b10      	cmp	r3, #16
 8003b9e:	d101      	bne.n	8003ba4 <HAL_HCD_IRQHandler+0x158>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <HAL_HCD_IRQHandler+0x15a>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d012      	beq.n	8003bd0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	699a      	ldr	r2, [r3, #24]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0210 	bic.w	r2, r2, #16
 8003bb8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 ffa1 	bl	8004b02 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	699a      	ldr	r2, [r3, #24]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0210 	orr.w	r2, r2, #16
 8003bce:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f003 faa9 	bl	800712c <USB_ReadInterrupts>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003be4:	d13a      	bne.n	8003c5c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f003 fede 	bl	80079ac <USB_HC_ReadInterrupt>
 8003bf0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	e025      	b.n	8003c44 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	fa22 f303 	lsr.w	r3, r2, r3
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d018      	beq.n	8003c3e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c22:	d106      	bne.n	8003c32 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	4619      	mov	r1, r3
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f8ab 	bl	8003d86 <HCD_HC_IN_IRQHandler>
 8003c30:	e005      	b.n	8003c3e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	4619      	mov	r1, r3
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 fbf9 	bl	8004430 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	3301      	adds	r3, #1
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d3d4      	bcc.n	8003bf8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c56:	615a      	str	r2, [r3, #20]
 8003c58:	e000      	b.n	8003c5c <HAL_HCD_IRQHandler+0x210>
      return;
 8003c5a:	bf00      	nop
    }
  }
}
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b082      	sub	sp, #8
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <HAL_HCD_Start+0x16>
 8003c74:	2302      	movs	r3, #2
 8003c76:	e013      	b.n	8003ca0 <HAL_HCD_Start+0x3e>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2101      	movs	r1, #1
 8003c86:	4618      	mov	r0, r3
 8003c88:	f003 fbca 	bl	8007420 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f003 f8e2 	bl	8006e5a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_HCD_Stop+0x16>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e00d      	b.n	8003cda <HAL_HCD_Stop+0x32>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f003 ffb8 	bl	8007c40 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b082      	sub	sp, #8
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f003 fb6c 	bl	80073cc <USB_ResetPort>
 8003cf4:	4603      	mov	r3, r0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	460b      	mov	r3, r1
 8003d08:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003d0a:	78fb      	ldrb	r3, [r7, #3]
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	212c      	movs	r1, #44	; 0x2c
 8003d10:	fb01 f303 	mul.w	r3, r1, r3
 8003d14:	4413      	add	r3, r2
 8003d16:	3360      	adds	r3, #96	; 0x60
 8003d18:	781b      	ldrb	r3, [r3, #0]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	460b      	mov	r3, r1
 8003d30:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003d32:	78fb      	ldrb	r3, [r7, #3]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	212c      	movs	r1, #44	; 0x2c
 8003d38:	fb01 f303 	mul.w	r3, r1, r3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	3350      	adds	r3, #80	; 0x50
 8003d40:	681b      	ldr	r3, [r3, #0]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b082      	sub	sp, #8
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f003 fbb0 	bl	80074c0 <USB_GetCurrentFrame>
 8003d60:	4603      	mov	r3, r0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f003 fb8b 	bl	8007492 <USB_GetHostSpeed>
 8003d7c:	4603      	mov	r3, r0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b086      	sub	sp, #24
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
 8003d8e:	460b      	mov	r3, r1
 8003d90:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003d9c:	78fb      	ldrb	r3, [r7, #3]
 8003d9e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 0304 	and.w	r3, r3, #4
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d11a      	bne.n	8003dec <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	015a      	lsls	r2, r3, #5
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	2304      	movs	r3, #4
 8003dc6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	212c      	movs	r1, #44	; 0x2c
 8003dce:	fb01 f303 	mul.w	r3, r1, r3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	3361      	adds	r3, #97	; 0x61
 8003dd6:	2206      	movs	r2, #6
 8003dd8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	4611      	mov	r1, r2
 8003de4:	4618      	mov	r0, r3
 8003de6:	f003 fdf2 	bl	80079ce <USB_HC_Halt>
 8003dea:	e0af      	b.n	8003f4c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e02:	d11b      	bne.n	8003e3c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	015a      	lsls	r2, r3, #5
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e10:	461a      	mov	r2, r3
 8003e12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e16:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	212c      	movs	r1, #44	; 0x2c
 8003e1e:	fb01 f303 	mul.w	r3, r1, r3
 8003e22:	4413      	add	r3, r2
 8003e24:	3361      	adds	r3, #97	; 0x61
 8003e26:	2207      	movs	r2, #7
 8003e28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	4611      	mov	r1, r2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f003 fdca 	bl	80079ce <USB_HC_Halt>
 8003e3a:	e087      	b.n	8003f4c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 0320 	and.w	r3, r3, #32
 8003e4e:	2b20      	cmp	r3, #32
 8003e50:	d109      	bne.n	8003e66 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	015a      	lsls	r2, r3, #5
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5e:	461a      	mov	r2, r3
 8003e60:	2320      	movs	r3, #32
 8003e62:	6093      	str	r3, [r2, #8]
 8003e64:	e072      	b.n	8003f4c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	015a      	lsls	r2, r3, #5
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f003 0308 	and.w	r3, r3, #8
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	d11a      	bne.n	8003eb2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e88:	461a      	mov	r2, r3
 8003e8a:	2308      	movs	r3, #8
 8003e8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	212c      	movs	r1, #44	; 0x2c
 8003e94:	fb01 f303 	mul.w	r3, r1, r3
 8003e98:	4413      	add	r3, r2
 8003e9a:	3361      	adds	r3, #97	; 0x61
 8003e9c:	2205      	movs	r2, #5
 8003e9e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f003 fd8f 	bl	80079ce <USB_HC_Halt>
 8003eb0:	e04c      	b.n	8003f4c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec8:	d11b      	bne.n	8003f02 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003edc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	212c      	movs	r1, #44	; 0x2c
 8003ee4:	fb01 f303 	mul.w	r3, r1, r3
 8003ee8:	4413      	add	r3, r2
 8003eea:	3361      	adds	r3, #97	; 0x61
 8003eec:	2208      	movs	r2, #8
 8003eee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	4611      	mov	r1, r2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f003 fd67 	bl	80079ce <USB_HC_Halt>
 8003f00:	e024      	b.n	8003f4c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f14:	2b80      	cmp	r3, #128	; 0x80
 8003f16:	d119      	bne.n	8003f4c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f24:	461a      	mov	r2, r3
 8003f26:	2380      	movs	r3, #128	; 0x80
 8003f28:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	212c      	movs	r1, #44	; 0x2c
 8003f30:	fb01 f303 	mul.w	r3, r1, r3
 8003f34:	4413      	add	r3, r2
 8003f36:	3361      	adds	r3, #97	; 0x61
 8003f38:	2206      	movs	r2, #6
 8003f3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	4611      	mov	r1, r2
 8003f46:	4618      	mov	r0, r3
 8003f48:	f003 fd41 	bl	80079ce <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f62:	d112      	bne.n	8003f8a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	4611      	mov	r1, r2
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f003 fd2d 	bl	80079ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f80:	461a      	mov	r2, r3
 8003f82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f86:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003f88:	e24e      	b.n	8004428 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	015a      	lsls	r2, r3, #5
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	f040 80df 	bne.w	8004160 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d019      	beq.n	8003fde <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	212c      	movs	r1, #44	; 0x2c
 8003fb0:	fb01 f303 	mul.w	r3, r1, r3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	3348      	adds	r3, #72	; 0x48
 8003fb8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	0159      	lsls	r1, r3, #5
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	440b      	add	r3, r1
 8003fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003fcc:	1ad2      	subs	r2, r2, r3
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	202c      	movs	r0, #44	; 0x2c
 8003fd4:	fb00 f303 	mul.w	r3, r0, r3
 8003fd8:	440b      	add	r3, r1
 8003fda:	3350      	adds	r3, #80	; 0x50
 8003fdc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	212c      	movs	r1, #44	; 0x2c
 8003fe4:	fb01 f303 	mul.w	r3, r1, r3
 8003fe8:	4413      	add	r3, r2
 8003fea:	3361      	adds	r3, #97	; 0x61
 8003fec:	2201      	movs	r2, #1
 8003fee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	212c      	movs	r1, #44	; 0x2c
 8003ff6:	fb01 f303 	mul.w	r3, r1, r3
 8003ffa:	4413      	add	r3, r2
 8003ffc:	335c      	adds	r3, #92	; 0x5c
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	4413      	add	r3, r2
 800400a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400e:	461a      	mov	r2, r3
 8004010:	2301      	movs	r3, #1
 8004012:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	212c      	movs	r1, #44	; 0x2c
 800401a:	fb01 f303 	mul.w	r3, r1, r3
 800401e:	4413      	add	r3, r2
 8004020:	333f      	adds	r3, #63	; 0x3f
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d009      	beq.n	800403c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	212c      	movs	r1, #44	; 0x2c
 800402e:	fb01 f303 	mul.w	r3, r1, r3
 8004032:	4413      	add	r3, r2
 8004034:	333f      	adds	r3, #63	; 0x3f
 8004036:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004038:	2b02      	cmp	r3, #2
 800403a:	d111      	bne.n	8004060 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	4611      	mov	r1, r2
 8004046:	4618      	mov	r0, r3
 8004048:	f003 fcc1 	bl	80079ce <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	015a      	lsls	r2, r3, #5
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	4413      	add	r3, r2
 8004054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004058:	461a      	mov	r2, r3
 800405a:	2310      	movs	r3, #16
 800405c:	6093      	str	r3, [r2, #8]
 800405e:	e03a      	b.n	80040d6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	212c      	movs	r1, #44	; 0x2c
 8004066:	fb01 f303 	mul.w	r3, r1, r3
 800406a:	4413      	add	r3, r2
 800406c:	333f      	adds	r3, #63	; 0x3f
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b03      	cmp	r3, #3
 8004072:	d009      	beq.n	8004088 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	212c      	movs	r1, #44	; 0x2c
 800407a:	fb01 f303 	mul.w	r3, r1, r3
 800407e:	4413      	add	r3, r2
 8004080:	333f      	adds	r3, #63	; 0x3f
 8004082:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004084:	2b01      	cmp	r3, #1
 8004086:	d126      	bne.n	80040d6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	4413      	add	r3, r2
 8004090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	0151      	lsls	r1, r2, #5
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	440a      	add	r2, r1
 800409e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040a6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	212c      	movs	r1, #44	; 0x2c
 80040ae:	fb01 f303 	mul.w	r3, r1, r3
 80040b2:	4413      	add	r3, r2
 80040b4:	3360      	adds	r3, #96	; 0x60
 80040b6:	2201      	movs	r2, #1
 80040b8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	b2d9      	uxtb	r1, r3
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	202c      	movs	r0, #44	; 0x2c
 80040c4:	fb00 f303 	mul.w	r3, r0, r3
 80040c8:	4413      	add	r3, r2
 80040ca:	3360      	adds	r3, #96	; 0x60
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	461a      	mov	r2, r3
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f005 ff1f 	bl	8009f14 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d12b      	bne.n	8004136 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	212c      	movs	r1, #44	; 0x2c
 80040e4:	fb01 f303 	mul.w	r3, r1, r3
 80040e8:	4413      	add	r3, r2
 80040ea:	3348      	adds	r3, #72	; 0x48
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	202c      	movs	r0, #44	; 0x2c
 80040f4:	fb00 f202 	mul.w	r2, r0, r2
 80040f8:	440a      	add	r2, r1
 80040fa:	3240      	adds	r2, #64	; 0x40
 80040fc:	8812      	ldrh	r2, [r2, #0]
 80040fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 818e 	beq.w	8004428 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	212c      	movs	r1, #44	; 0x2c
 8004112:	fb01 f303 	mul.w	r3, r1, r3
 8004116:	4413      	add	r3, r2
 8004118:	3354      	adds	r3, #84	; 0x54
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	f083 0301 	eor.w	r3, r3, #1
 8004120:	b2d8      	uxtb	r0, r3
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	212c      	movs	r1, #44	; 0x2c
 8004128:	fb01 f303 	mul.w	r3, r1, r3
 800412c:	4413      	add	r3, r2
 800412e:	3354      	adds	r3, #84	; 0x54
 8004130:	4602      	mov	r2, r0
 8004132:	701a      	strb	r2, [r3, #0]
}
 8004134:	e178      	b.n	8004428 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	212c      	movs	r1, #44	; 0x2c
 800413c:	fb01 f303 	mul.w	r3, r1, r3
 8004140:	4413      	add	r3, r2
 8004142:	3354      	adds	r3, #84	; 0x54
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	f083 0301 	eor.w	r3, r3, #1
 800414a:	b2d8      	uxtb	r0, r3
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	212c      	movs	r1, #44	; 0x2c
 8004152:	fb01 f303 	mul.w	r3, r1, r3
 8004156:	4413      	add	r3, r2
 8004158:	3354      	adds	r3, #84	; 0x54
 800415a:	4602      	mov	r2, r0
 800415c:	701a      	strb	r2, [r3, #0]
}
 800415e:	e163      	b.n	8004428 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4413      	add	r3, r2
 8004168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b02      	cmp	r3, #2
 8004174:	f040 80f6 	bne.w	8004364 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	212c      	movs	r1, #44	; 0x2c
 800417e:	fb01 f303 	mul.w	r3, r1, r3
 8004182:	4413      	add	r3, r2
 8004184:	3361      	adds	r3, #97	; 0x61
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d109      	bne.n	80041a0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	212c      	movs	r1, #44	; 0x2c
 8004192:	fb01 f303 	mul.w	r3, r1, r3
 8004196:	4413      	add	r3, r2
 8004198:	3360      	adds	r3, #96	; 0x60
 800419a:	2201      	movs	r2, #1
 800419c:	701a      	strb	r2, [r3, #0]
 800419e:	e0c9      	b.n	8004334 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	212c      	movs	r1, #44	; 0x2c
 80041a6:	fb01 f303 	mul.w	r3, r1, r3
 80041aa:	4413      	add	r3, r2
 80041ac:	3361      	adds	r3, #97	; 0x61
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b05      	cmp	r3, #5
 80041b2:	d109      	bne.n	80041c8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	212c      	movs	r1, #44	; 0x2c
 80041ba:	fb01 f303 	mul.w	r3, r1, r3
 80041be:	4413      	add	r3, r2
 80041c0:	3360      	adds	r3, #96	; 0x60
 80041c2:	2205      	movs	r2, #5
 80041c4:	701a      	strb	r2, [r3, #0]
 80041c6:	e0b5      	b.n	8004334 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	212c      	movs	r1, #44	; 0x2c
 80041ce:	fb01 f303 	mul.w	r3, r1, r3
 80041d2:	4413      	add	r3, r2
 80041d4:	3361      	adds	r3, #97	; 0x61
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b06      	cmp	r3, #6
 80041da:	d009      	beq.n	80041f0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	212c      	movs	r1, #44	; 0x2c
 80041e2:	fb01 f303 	mul.w	r3, r1, r3
 80041e6:	4413      	add	r3, r2
 80041e8:	3361      	adds	r3, #97	; 0x61
 80041ea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d150      	bne.n	8004292 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	212c      	movs	r1, #44	; 0x2c
 80041f6:	fb01 f303 	mul.w	r3, r1, r3
 80041fa:	4413      	add	r3, r2
 80041fc:	335c      	adds	r3, #92	; 0x5c
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	202c      	movs	r0, #44	; 0x2c
 8004208:	fb00 f303 	mul.w	r3, r0, r3
 800420c:	440b      	add	r3, r1
 800420e:	335c      	adds	r3, #92	; 0x5c
 8004210:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	212c      	movs	r1, #44	; 0x2c
 8004218:	fb01 f303 	mul.w	r3, r1, r3
 800421c:	4413      	add	r3, r2
 800421e:	335c      	adds	r3, #92	; 0x5c
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d912      	bls.n	800424c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	212c      	movs	r1, #44	; 0x2c
 800422c:	fb01 f303 	mul.w	r3, r1, r3
 8004230:	4413      	add	r3, r2
 8004232:	335c      	adds	r3, #92	; 0x5c
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	212c      	movs	r1, #44	; 0x2c
 800423e:	fb01 f303 	mul.w	r3, r1, r3
 8004242:	4413      	add	r3, r2
 8004244:	3360      	adds	r3, #96	; 0x60
 8004246:	2204      	movs	r2, #4
 8004248:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800424a:	e073      	b.n	8004334 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	212c      	movs	r1, #44	; 0x2c
 8004252:	fb01 f303 	mul.w	r3, r1, r3
 8004256:	4413      	add	r3, r2
 8004258:	3360      	adds	r3, #96	; 0x60
 800425a:	2202      	movs	r2, #2
 800425c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	4413      	add	r3, r2
 8004266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004274:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800427c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	015a      	lsls	r2, r3, #5
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	4413      	add	r3, r2
 8004286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800428a:	461a      	mov	r2, r3
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004290:	e050      	b.n	8004334 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	212c      	movs	r1, #44	; 0x2c
 8004298:	fb01 f303 	mul.w	r3, r1, r3
 800429c:	4413      	add	r3, r2
 800429e:	3361      	adds	r3, #97	; 0x61
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b03      	cmp	r3, #3
 80042a4:	d122      	bne.n	80042ec <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	212c      	movs	r1, #44	; 0x2c
 80042ac:	fb01 f303 	mul.w	r3, r1, r3
 80042b0:	4413      	add	r3, r2
 80042b2:	3360      	adds	r3, #96	; 0x60
 80042b4:	2202      	movs	r2, #2
 80042b6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80042ce:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042d6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	015a      	lsls	r2, r3, #5
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	4413      	add	r3, r2
 80042e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e4:	461a      	mov	r2, r3
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	e023      	b.n	8004334 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	212c      	movs	r1, #44	; 0x2c
 80042f2:	fb01 f303 	mul.w	r3, r1, r3
 80042f6:	4413      	add	r3, r2
 80042f8:	3361      	adds	r3, #97	; 0x61
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	2b07      	cmp	r3, #7
 80042fe:	d119      	bne.n	8004334 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	212c      	movs	r1, #44	; 0x2c
 8004306:	fb01 f303 	mul.w	r3, r1, r3
 800430a:	4413      	add	r3, r2
 800430c:	335c      	adds	r3, #92	; 0x5c
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	202c      	movs	r0, #44	; 0x2c
 8004318:	fb00 f303 	mul.w	r3, r0, r3
 800431c:	440b      	add	r3, r1
 800431e:	335c      	adds	r3, #92	; 0x5c
 8004320:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	212c      	movs	r1, #44	; 0x2c
 8004328:	fb01 f303 	mul.w	r3, r1, r3
 800432c:	4413      	add	r3, r2
 800432e:	3360      	adds	r3, #96	; 0x60
 8004330:	2204      	movs	r2, #4
 8004332:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	4413      	add	r3, r2
 800433c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004340:	461a      	mov	r2, r3
 8004342:	2302      	movs	r3, #2
 8004344:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	b2d9      	uxtb	r1, r3
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	202c      	movs	r0, #44	; 0x2c
 8004350:	fb00 f303 	mul.w	r3, r0, r3
 8004354:	4413      	add	r3, r2
 8004356:	3360      	adds	r3, #96	; 0x60
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	461a      	mov	r2, r3
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f005 fdd9 	bl	8009f14 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004362:	e061      	b.n	8004428 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	4413      	add	r3, r2
 800436c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 0310 	and.w	r3, r3, #16
 8004376:	2b10      	cmp	r3, #16
 8004378:	d156      	bne.n	8004428 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	212c      	movs	r1, #44	; 0x2c
 8004380:	fb01 f303 	mul.w	r3, r1, r3
 8004384:	4413      	add	r3, r2
 8004386:	333f      	adds	r3, #63	; 0x3f
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	2b03      	cmp	r3, #3
 800438c:	d111      	bne.n	80043b2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	212c      	movs	r1, #44	; 0x2c
 8004394:	fb01 f303 	mul.w	r3, r1, r3
 8004398:	4413      	add	r3, r2
 800439a:	335c      	adds	r3, #92	; 0x5c
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	b2d2      	uxtb	r2, r2
 80043a8:	4611      	mov	r1, r2
 80043aa:	4618      	mov	r0, r3
 80043ac:	f003 fb0f 	bl	80079ce <USB_HC_Halt>
 80043b0:	e031      	b.n	8004416 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	212c      	movs	r1, #44	; 0x2c
 80043b8:	fb01 f303 	mul.w	r3, r1, r3
 80043bc:	4413      	add	r3, r2
 80043be:	333f      	adds	r3, #63	; 0x3f
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d009      	beq.n	80043da <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	212c      	movs	r1, #44	; 0x2c
 80043cc:	fb01 f303 	mul.w	r3, r1, r3
 80043d0:	4413      	add	r3, r2
 80043d2:	333f      	adds	r3, #63	; 0x3f
 80043d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d11d      	bne.n	8004416 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	212c      	movs	r1, #44	; 0x2c
 80043e0:	fb01 f303 	mul.w	r3, r1, r3
 80043e4:	4413      	add	r3, r2
 80043e6:	335c      	adds	r3, #92	; 0x5c
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d110      	bne.n	8004416 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	212c      	movs	r1, #44	; 0x2c
 80043fa:	fb01 f303 	mul.w	r3, r1, r3
 80043fe:	4413      	add	r3, r2
 8004400:	3361      	adds	r3, #97	; 0x61
 8004402:	2203      	movs	r2, #3
 8004404:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	4611      	mov	r1, r2
 8004410:	4618      	mov	r0, r3
 8004412:	f003 fadc 	bl	80079ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	4413      	add	r3, r2
 800441e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004422:	461a      	mov	r2, r3
 8004424:	2310      	movs	r3, #16
 8004426:	6093      	str	r3, [r2, #8]
}
 8004428:	bf00      	nop
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b088      	sub	sp, #32
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	460b      	mov	r3, r1
 800443a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004446:	78fb      	ldrb	r3, [r7, #3]
 8004448:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	4413      	add	r3, r2
 8004452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	2b04      	cmp	r3, #4
 800445e:	d11a      	bne.n	8004496 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	4413      	add	r3, r2
 8004468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800446c:	461a      	mov	r2, r3
 800446e:	2304      	movs	r3, #4
 8004470:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	212c      	movs	r1, #44	; 0x2c
 8004478:	fb01 f303 	mul.w	r3, r1, r3
 800447c:	4413      	add	r3, r2
 800447e:	3361      	adds	r3, #97	; 0x61
 8004480:	2206      	movs	r2, #6
 8004482:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	b2d2      	uxtb	r2, r2
 800448c:	4611      	mov	r1, r2
 800448e:	4618      	mov	r0, r3
 8004490:	f003 fa9d 	bl	80079ce <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004494:	e331      	b.n	8004afa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	015a      	lsls	r2, r3, #5
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	4413      	add	r3, r2
 800449e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 0320 	and.w	r3, r3, #32
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	d12e      	bne.n	800450a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b8:	461a      	mov	r2, r3
 80044ba:	2320      	movs	r3, #32
 80044bc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	212c      	movs	r1, #44	; 0x2c
 80044c4:	fb01 f303 	mul.w	r3, r1, r3
 80044c8:	4413      	add	r3, r2
 80044ca:	333d      	adds	r3, #61	; 0x3d
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	f040 8313 	bne.w	8004afa <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	212c      	movs	r1, #44	; 0x2c
 80044da:	fb01 f303 	mul.w	r3, r1, r3
 80044de:	4413      	add	r3, r2
 80044e0:	333d      	adds	r3, #61	; 0x3d
 80044e2:	2200      	movs	r2, #0
 80044e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	212c      	movs	r1, #44	; 0x2c
 80044ec:	fb01 f303 	mul.w	r3, r1, r3
 80044f0:	4413      	add	r3, r2
 80044f2:	3360      	adds	r3, #96	; 0x60
 80044f4:	2202      	movs	r2, #2
 80044f6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	4611      	mov	r1, r2
 8004502:	4618      	mov	r0, r3
 8004504:	f003 fa63 	bl	80079ce <USB_HC_Halt>
}
 8004508:	e2f7      	b.n	8004afa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	4413      	add	r3, r2
 8004512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800451c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004520:	d112      	bne.n	8004548 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	4413      	add	r3, r2
 800452a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800452e:	461a      	mov	r2, r3
 8004530:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004534:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	b2d2      	uxtb	r2, r2
 800453e:	4611      	mov	r1, r2
 8004540:	4618      	mov	r0, r3
 8004542:	f003 fa44 	bl	80079ce <USB_HC_Halt>
}
 8004546:	e2d8      	b.n	8004afa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	4413      	add	r3, r2
 8004550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b01      	cmp	r3, #1
 800455c:	d140      	bne.n	80045e0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	212c      	movs	r1, #44	; 0x2c
 8004564:	fb01 f303 	mul.w	r3, r1, r3
 8004568:	4413      	add	r3, r2
 800456a:	335c      	adds	r3, #92	; 0x5c
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	4413      	add	r3, r2
 8004578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004582:	2b40      	cmp	r3, #64	; 0x40
 8004584:	d111      	bne.n	80045aa <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	212c      	movs	r1, #44	; 0x2c
 800458c:	fb01 f303 	mul.w	r3, r1, r3
 8004590:	4413      	add	r3, r2
 8004592:	333d      	adds	r3, #61	; 0x3d
 8004594:	2201      	movs	r2, #1
 8004596:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a4:	461a      	mov	r2, r3
 80045a6:	2340      	movs	r3, #64	; 0x40
 80045a8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b6:	461a      	mov	r2, r3
 80045b8:	2301      	movs	r3, #1
 80045ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	212c      	movs	r1, #44	; 0x2c
 80045c2:	fb01 f303 	mul.w	r3, r1, r3
 80045c6:	4413      	add	r3, r2
 80045c8:	3361      	adds	r3, #97	; 0x61
 80045ca:	2201      	movs	r2, #1
 80045cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	4611      	mov	r1, r2
 80045d8:	4618      	mov	r0, r3
 80045da:	f003 f9f8 	bl	80079ce <USB_HC_Halt>
}
 80045de:	e28c      	b.n	8004afa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f2:	2b40      	cmp	r3, #64	; 0x40
 80045f4:	d12c      	bne.n	8004650 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	212c      	movs	r1, #44	; 0x2c
 80045fc:	fb01 f303 	mul.w	r3, r1, r3
 8004600:	4413      	add	r3, r2
 8004602:	3361      	adds	r3, #97	; 0x61
 8004604:	2204      	movs	r2, #4
 8004606:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	212c      	movs	r1, #44	; 0x2c
 800460e:	fb01 f303 	mul.w	r3, r1, r3
 8004612:	4413      	add	r3, r2
 8004614:	333d      	adds	r3, #61	; 0x3d
 8004616:	2201      	movs	r2, #1
 8004618:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	212c      	movs	r1, #44	; 0x2c
 8004620:	fb01 f303 	mul.w	r3, r1, r3
 8004624:	4413      	add	r3, r2
 8004626:	335c      	adds	r3, #92	; 0x5c
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	b2d2      	uxtb	r2, r2
 8004634:	4611      	mov	r1, r2
 8004636:	4618      	mov	r0, r3
 8004638:	f003 f9c9 	bl	80079ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	4413      	add	r3, r2
 8004644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004648:	461a      	mov	r2, r3
 800464a:	2340      	movs	r3, #64	; 0x40
 800464c:	6093      	str	r3, [r2, #8]
}
 800464e:	e254      	b.n	8004afa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	4413      	add	r3, r2
 8004658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	2b08      	cmp	r3, #8
 8004664:	d11a      	bne.n	800469c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	4413      	add	r3, r2
 800466e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004672:	461a      	mov	r2, r3
 8004674:	2308      	movs	r3, #8
 8004676:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	212c      	movs	r1, #44	; 0x2c
 800467e:	fb01 f303 	mul.w	r3, r1, r3
 8004682:	4413      	add	r3, r2
 8004684:	3361      	adds	r3, #97	; 0x61
 8004686:	2205      	movs	r2, #5
 8004688:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	4611      	mov	r1, r2
 8004694:	4618      	mov	r0, r3
 8004696:	f003 f99a 	bl	80079ce <USB_HC_Halt>
}
 800469a:	e22e      	b.n	8004afa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 0310 	and.w	r3, r3, #16
 80046ae:	2b10      	cmp	r3, #16
 80046b0:	d140      	bne.n	8004734 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	212c      	movs	r1, #44	; 0x2c
 80046b8:	fb01 f303 	mul.w	r3, r1, r3
 80046bc:	4413      	add	r3, r2
 80046be:	335c      	adds	r3, #92	; 0x5c
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	212c      	movs	r1, #44	; 0x2c
 80046ca:	fb01 f303 	mul.w	r3, r1, r3
 80046ce:	4413      	add	r3, r2
 80046d0:	3361      	adds	r3, #97	; 0x61
 80046d2:	2203      	movs	r2, #3
 80046d4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	212c      	movs	r1, #44	; 0x2c
 80046dc:	fb01 f303 	mul.w	r3, r1, r3
 80046e0:	4413      	add	r3, r2
 80046e2:	333d      	adds	r3, #61	; 0x3d
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d112      	bne.n	8004710 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	212c      	movs	r1, #44	; 0x2c
 80046f0:	fb01 f303 	mul.w	r3, r1, r3
 80046f4:	4413      	add	r3, r2
 80046f6:	333c      	adds	r3, #60	; 0x3c
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d108      	bne.n	8004710 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	212c      	movs	r1, #44	; 0x2c
 8004704:	fb01 f303 	mul.w	r3, r1, r3
 8004708:	4413      	add	r3, r2
 800470a:	333d      	adds	r3, #61	; 0x3d
 800470c:	2201      	movs	r2, #1
 800470e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	4611      	mov	r1, r2
 800471a:	4618      	mov	r0, r3
 800471c:	f003 f957 	bl	80079ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	4413      	add	r3, r2
 8004728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800472c:	461a      	mov	r2, r3
 800472e:	2310      	movs	r3, #16
 8004730:	6093      	str	r3, [r2, #8]
}
 8004732:	e1e2      	b.n	8004afa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	4413      	add	r3, r2
 800473c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004746:	2b80      	cmp	r3, #128	; 0x80
 8004748:	d164      	bne.n	8004814 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d111      	bne.n	8004776 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	212c      	movs	r1, #44	; 0x2c
 8004758:	fb01 f303 	mul.w	r3, r1, r3
 800475c:	4413      	add	r3, r2
 800475e:	3361      	adds	r3, #97	; 0x61
 8004760:	2206      	movs	r2, #6
 8004762:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	4611      	mov	r1, r2
 800476e:	4618      	mov	r0, r3
 8004770:	f003 f92d 	bl	80079ce <USB_HC_Halt>
 8004774:	e044      	b.n	8004800 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	212c      	movs	r1, #44	; 0x2c
 800477c:	fb01 f303 	mul.w	r3, r1, r3
 8004780:	4413      	add	r3, r2
 8004782:	335c      	adds	r3, #92	; 0x5c
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	6879      	ldr	r1, [r7, #4]
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	202c      	movs	r0, #44	; 0x2c
 800478e:	fb00 f303 	mul.w	r3, r0, r3
 8004792:	440b      	add	r3, r1
 8004794:	335c      	adds	r3, #92	; 0x5c
 8004796:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	212c      	movs	r1, #44	; 0x2c
 800479e:	fb01 f303 	mul.w	r3, r1, r3
 80047a2:	4413      	add	r3, r2
 80047a4:	335c      	adds	r3, #92	; 0x5c
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d920      	bls.n	80047ee <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	212c      	movs	r1, #44	; 0x2c
 80047b2:	fb01 f303 	mul.w	r3, r1, r3
 80047b6:	4413      	add	r3, r2
 80047b8:	335c      	adds	r3, #92	; 0x5c
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	212c      	movs	r1, #44	; 0x2c
 80047c4:	fb01 f303 	mul.w	r3, r1, r3
 80047c8:	4413      	add	r3, r2
 80047ca:	3360      	adds	r3, #96	; 0x60
 80047cc:	2204      	movs	r2, #4
 80047ce:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	b2d9      	uxtb	r1, r3
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	202c      	movs	r0, #44	; 0x2c
 80047da:	fb00 f303 	mul.w	r3, r0, r3
 80047de:	4413      	add	r3, r2
 80047e0:	3360      	adds	r3, #96	; 0x60
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	461a      	mov	r2, r3
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f005 fb94 	bl	8009f14 <HAL_HCD_HC_NotifyURBChange_Callback>
 80047ec:	e008      	b.n	8004800 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	212c      	movs	r1, #44	; 0x2c
 80047f4:	fb01 f303 	mul.w	r3, r1, r3
 80047f8:	4413      	add	r3, r2
 80047fa:	3360      	adds	r3, #96	; 0x60
 80047fc:	2202      	movs	r2, #2
 80047fe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	015a      	lsls	r2, r3, #5
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	4413      	add	r3, r2
 8004808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800480c:	461a      	mov	r2, r3
 800480e:	2380      	movs	r3, #128	; 0x80
 8004810:	6093      	str	r3, [r2, #8]
}
 8004812:	e172      	b.n	8004afa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	4413      	add	r3, r2
 800481c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800482a:	d11b      	bne.n	8004864 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	212c      	movs	r1, #44	; 0x2c
 8004832:	fb01 f303 	mul.w	r3, r1, r3
 8004836:	4413      	add	r3, r2
 8004838:	3361      	adds	r3, #97	; 0x61
 800483a:	2208      	movs	r2, #8
 800483c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	4611      	mov	r1, r2
 8004848:	4618      	mov	r0, r3
 800484a:	f003 f8c0 	bl	80079ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	4413      	add	r3, r2
 8004856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800485a:	461a      	mov	r2, r3
 800485c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004860:	6093      	str	r3, [r2, #8]
}
 8004862:	e14a      	b.n	8004afa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	4413      	add	r3, r2
 800486c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b02      	cmp	r3, #2
 8004878:	f040 813f 	bne.w	8004afa <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	212c      	movs	r1, #44	; 0x2c
 8004882:	fb01 f303 	mul.w	r3, r1, r3
 8004886:	4413      	add	r3, r2
 8004888:	3361      	adds	r3, #97	; 0x61
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d17d      	bne.n	800498c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	212c      	movs	r1, #44	; 0x2c
 8004896:	fb01 f303 	mul.w	r3, r1, r3
 800489a:	4413      	add	r3, r2
 800489c:	3360      	adds	r3, #96	; 0x60
 800489e:	2201      	movs	r2, #1
 80048a0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	212c      	movs	r1, #44	; 0x2c
 80048a8:	fb01 f303 	mul.w	r3, r1, r3
 80048ac:	4413      	add	r3, r2
 80048ae:	333f      	adds	r3, #63	; 0x3f
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d00a      	beq.n	80048cc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	212c      	movs	r1, #44	; 0x2c
 80048bc:	fb01 f303 	mul.w	r3, r1, r3
 80048c0:	4413      	add	r3, r2
 80048c2:	333f      	adds	r3, #63	; 0x3f
 80048c4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80048c6:	2b03      	cmp	r3, #3
 80048c8:	f040 8100 	bne.w	8004acc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d113      	bne.n	80048fc <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	212c      	movs	r1, #44	; 0x2c
 80048da:	fb01 f303 	mul.w	r3, r1, r3
 80048de:	4413      	add	r3, r2
 80048e0:	3355      	adds	r3, #85	; 0x55
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	f083 0301 	eor.w	r3, r3, #1
 80048e8:	b2d8      	uxtb	r0, r3
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	212c      	movs	r1, #44	; 0x2c
 80048f0:	fb01 f303 	mul.w	r3, r1, r3
 80048f4:	4413      	add	r3, r2
 80048f6:	3355      	adds	r3, #85	; 0x55
 80048f8:	4602      	mov	r2, r0
 80048fa:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	2b01      	cmp	r3, #1
 8004902:	f040 80e3 	bne.w	8004acc <HCD_HC_OUT_IRQHandler+0x69c>
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	212c      	movs	r1, #44	; 0x2c
 800490c:	fb01 f303 	mul.w	r3, r1, r3
 8004910:	4413      	add	r3, r2
 8004912:	334c      	adds	r3, #76	; 0x4c
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 80d8 	beq.w	8004acc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	212c      	movs	r1, #44	; 0x2c
 8004922:	fb01 f303 	mul.w	r3, r1, r3
 8004926:	4413      	add	r3, r2
 8004928:	334c      	adds	r3, #76	; 0x4c
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6879      	ldr	r1, [r7, #4]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	202c      	movs	r0, #44	; 0x2c
 8004932:	fb00 f202 	mul.w	r2, r0, r2
 8004936:	440a      	add	r2, r1
 8004938:	3240      	adds	r2, #64	; 0x40
 800493a:	8812      	ldrh	r2, [r2, #0]
 800493c:	4413      	add	r3, r2
 800493e:	3b01      	subs	r3, #1
 8004940:	6879      	ldr	r1, [r7, #4]
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	202c      	movs	r0, #44	; 0x2c
 8004946:	fb00 f202 	mul.w	r2, r0, r2
 800494a:	440a      	add	r2, r1
 800494c:	3240      	adds	r2, #64	; 0x40
 800494e:	8812      	ldrh	r2, [r2, #0]
 8004950:	fbb3 f3f2 	udiv	r3, r3, r2
 8004954:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 80b5 	beq.w	8004acc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	212c      	movs	r1, #44	; 0x2c
 8004968:	fb01 f303 	mul.w	r3, r1, r3
 800496c:	4413      	add	r3, r2
 800496e:	3355      	adds	r3, #85	; 0x55
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	f083 0301 	eor.w	r3, r3, #1
 8004976:	b2d8      	uxtb	r0, r3
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	212c      	movs	r1, #44	; 0x2c
 800497e:	fb01 f303 	mul.w	r3, r1, r3
 8004982:	4413      	add	r3, r2
 8004984:	3355      	adds	r3, #85	; 0x55
 8004986:	4602      	mov	r2, r0
 8004988:	701a      	strb	r2, [r3, #0]
 800498a:	e09f      	b.n	8004acc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	212c      	movs	r1, #44	; 0x2c
 8004992:	fb01 f303 	mul.w	r3, r1, r3
 8004996:	4413      	add	r3, r2
 8004998:	3361      	adds	r3, #97	; 0x61
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	2b03      	cmp	r3, #3
 800499e:	d109      	bne.n	80049b4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	212c      	movs	r1, #44	; 0x2c
 80049a6:	fb01 f303 	mul.w	r3, r1, r3
 80049aa:	4413      	add	r3, r2
 80049ac:	3360      	adds	r3, #96	; 0x60
 80049ae:	2202      	movs	r2, #2
 80049b0:	701a      	strb	r2, [r3, #0]
 80049b2:	e08b      	b.n	8004acc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	212c      	movs	r1, #44	; 0x2c
 80049ba:	fb01 f303 	mul.w	r3, r1, r3
 80049be:	4413      	add	r3, r2
 80049c0:	3361      	adds	r3, #97	; 0x61
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	2b04      	cmp	r3, #4
 80049c6:	d109      	bne.n	80049dc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	212c      	movs	r1, #44	; 0x2c
 80049ce:	fb01 f303 	mul.w	r3, r1, r3
 80049d2:	4413      	add	r3, r2
 80049d4:	3360      	adds	r3, #96	; 0x60
 80049d6:	2202      	movs	r2, #2
 80049d8:	701a      	strb	r2, [r3, #0]
 80049da:	e077      	b.n	8004acc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	212c      	movs	r1, #44	; 0x2c
 80049e2:	fb01 f303 	mul.w	r3, r1, r3
 80049e6:	4413      	add	r3, r2
 80049e8:	3361      	adds	r3, #97	; 0x61
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	2b05      	cmp	r3, #5
 80049ee:	d109      	bne.n	8004a04 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	212c      	movs	r1, #44	; 0x2c
 80049f6:	fb01 f303 	mul.w	r3, r1, r3
 80049fa:	4413      	add	r3, r2
 80049fc:	3360      	adds	r3, #96	; 0x60
 80049fe:	2205      	movs	r2, #5
 8004a00:	701a      	strb	r2, [r3, #0]
 8004a02:	e063      	b.n	8004acc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	212c      	movs	r1, #44	; 0x2c
 8004a0a:	fb01 f303 	mul.w	r3, r1, r3
 8004a0e:	4413      	add	r3, r2
 8004a10:	3361      	adds	r3, #97	; 0x61
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b06      	cmp	r3, #6
 8004a16:	d009      	beq.n	8004a2c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	212c      	movs	r1, #44	; 0x2c
 8004a1e:	fb01 f303 	mul.w	r3, r1, r3
 8004a22:	4413      	add	r3, r2
 8004a24:	3361      	adds	r3, #97	; 0x61
 8004a26:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d14f      	bne.n	8004acc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	212c      	movs	r1, #44	; 0x2c
 8004a32:	fb01 f303 	mul.w	r3, r1, r3
 8004a36:	4413      	add	r3, r2
 8004a38:	335c      	adds	r3, #92	; 0x5c
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	1c5a      	adds	r2, r3, #1
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	202c      	movs	r0, #44	; 0x2c
 8004a44:	fb00 f303 	mul.w	r3, r0, r3
 8004a48:	440b      	add	r3, r1
 8004a4a:	335c      	adds	r3, #92	; 0x5c
 8004a4c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	212c      	movs	r1, #44	; 0x2c
 8004a54:	fb01 f303 	mul.w	r3, r1, r3
 8004a58:	4413      	add	r3, r2
 8004a5a:	335c      	adds	r3, #92	; 0x5c
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d912      	bls.n	8004a88 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	212c      	movs	r1, #44	; 0x2c
 8004a68:	fb01 f303 	mul.w	r3, r1, r3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	335c      	adds	r3, #92	; 0x5c
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	212c      	movs	r1, #44	; 0x2c
 8004a7a:	fb01 f303 	mul.w	r3, r1, r3
 8004a7e:	4413      	add	r3, r2
 8004a80:	3360      	adds	r3, #96	; 0x60
 8004a82:	2204      	movs	r2, #4
 8004a84:	701a      	strb	r2, [r3, #0]
 8004a86:	e021      	b.n	8004acc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	212c      	movs	r1, #44	; 0x2c
 8004a8e:	fb01 f303 	mul.w	r3, r1, r3
 8004a92:	4413      	add	r3, r2
 8004a94:	3360      	adds	r3, #96	; 0x60
 8004a96:	2202      	movs	r2, #2
 8004a98:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	015a      	lsls	r2, r3, #5
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ab0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ab8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad8:	461a      	mov	r2, r3
 8004ada:	2302      	movs	r3, #2
 8004adc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	b2d9      	uxtb	r1, r3
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	202c      	movs	r0, #44	; 0x2c
 8004ae8:	fb00 f303 	mul.w	r3, r0, r3
 8004aec:	4413      	add	r3, r2
 8004aee:	3360      	adds	r3, #96	; 0x60
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	461a      	mov	r2, r3
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f005 fa0d 	bl	8009f14 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004afa:	bf00      	nop
 8004afc:	3720      	adds	r7, #32
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b08a      	sub	sp, #40	; 0x28
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	f003 030f 	and.w	r3, r3, #15
 8004b22:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	0c5b      	lsrs	r3, r3, #17
 8004b28:	f003 030f 	and.w	r3, r3, #15
 8004b2c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	091b      	lsrs	r3, r3, #4
 8004b32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b36:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d004      	beq.n	8004b48 <HCD_RXQLVL_IRQHandler+0x46>
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2b05      	cmp	r3, #5
 8004b42:	f000 80a9 	beq.w	8004c98 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004b46:	e0aa      	b.n	8004c9e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f000 80a6 	beq.w	8004c9c <HCD_RXQLVL_IRQHandler+0x19a>
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	212c      	movs	r1, #44	; 0x2c
 8004b56:	fb01 f303 	mul.w	r3, r1, r3
 8004b5a:	4413      	add	r3, r2
 8004b5c:	3344      	adds	r3, #68	; 0x44
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 809b 	beq.w	8004c9c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	212c      	movs	r1, #44	; 0x2c
 8004b6c:	fb01 f303 	mul.w	r3, r1, r3
 8004b70:	4413      	add	r3, r2
 8004b72:	3350      	adds	r3, #80	; 0x50
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	441a      	add	r2, r3
 8004b7a:	6879      	ldr	r1, [r7, #4]
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	202c      	movs	r0, #44	; 0x2c
 8004b80:	fb00 f303 	mul.w	r3, r0, r3
 8004b84:	440b      	add	r3, r1
 8004b86:	334c      	adds	r3, #76	; 0x4c
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d87a      	bhi.n	8004c84 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6818      	ldr	r0, [r3, #0]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	212c      	movs	r1, #44	; 0x2c
 8004b98:	fb01 f303 	mul.w	r3, r1, r3
 8004b9c:	4413      	add	r3, r2
 8004b9e:	3344      	adds	r3, #68	; 0x44
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	b292      	uxth	r2, r2
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	f002 fa68 	bl	800707c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	212c      	movs	r1, #44	; 0x2c
 8004bb2:	fb01 f303 	mul.w	r3, r1, r3
 8004bb6:	4413      	add	r3, r2
 8004bb8:	3344      	adds	r3, #68	; 0x44
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	441a      	add	r2, r3
 8004bc0:	6879      	ldr	r1, [r7, #4]
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	202c      	movs	r0, #44	; 0x2c
 8004bc6:	fb00 f303 	mul.w	r3, r0, r3
 8004bca:	440b      	add	r3, r1
 8004bcc:	3344      	adds	r3, #68	; 0x44
 8004bce:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	212c      	movs	r1, #44	; 0x2c
 8004bd6:	fb01 f303 	mul.w	r3, r1, r3
 8004bda:	4413      	add	r3, r2
 8004bdc:	3350      	adds	r3, #80	; 0x50
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	441a      	add	r2, r3
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	202c      	movs	r0, #44	; 0x2c
 8004bea:	fb00 f303 	mul.w	r3, r0, r3
 8004bee:	440b      	add	r3, r1
 8004bf0:	3350      	adds	r3, #80	; 0x50
 8004bf2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	0cdb      	lsrs	r3, r3, #19
 8004c04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c08:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	212c      	movs	r1, #44	; 0x2c
 8004c10:	fb01 f303 	mul.w	r3, r1, r3
 8004c14:	4413      	add	r3, r2
 8004c16:	3340      	adds	r3, #64	; 0x40
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d13c      	bne.n	8004c9c <HCD_RXQLVL_IRQHandler+0x19a>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d039      	beq.n	8004c9c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c3e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c46:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c54:	461a      	mov	r2, r3
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	212c      	movs	r1, #44	; 0x2c
 8004c60:	fb01 f303 	mul.w	r3, r1, r3
 8004c64:	4413      	add	r3, r2
 8004c66:	3354      	adds	r3, #84	; 0x54
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	f083 0301 	eor.w	r3, r3, #1
 8004c6e:	b2d8      	uxtb	r0, r3
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	212c      	movs	r1, #44	; 0x2c
 8004c76:	fb01 f303 	mul.w	r3, r1, r3
 8004c7a:	4413      	add	r3, r2
 8004c7c:	3354      	adds	r3, #84	; 0x54
 8004c7e:	4602      	mov	r2, r0
 8004c80:	701a      	strb	r2, [r3, #0]
      break;
 8004c82:	e00b      	b.n	8004c9c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	212c      	movs	r1, #44	; 0x2c
 8004c8a:	fb01 f303 	mul.w	r3, r1, r3
 8004c8e:	4413      	add	r3, r2
 8004c90:	3360      	adds	r3, #96	; 0x60
 8004c92:	2204      	movs	r2, #4
 8004c94:	701a      	strb	r2, [r3, #0]
      break;
 8004c96:	e001      	b.n	8004c9c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004c98:	bf00      	nop
 8004c9a:	e000      	b.n	8004c9e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004c9c:	bf00      	nop
  }
}
 8004c9e:	bf00      	nop
 8004ca0:	3728      	adds	r7, #40	; 0x28
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b086      	sub	sp, #24
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004cd2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d10b      	bne.n	8004cf6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d102      	bne.n	8004cee <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f005 f8f7 	bl	8009edc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	f043 0302 	orr.w	r3, r3, #2
 8004cf4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f003 0308 	and.w	r3, r3, #8
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d132      	bne.n	8004d66 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	f043 0308 	orr.w	r3, r3, #8
 8004d06:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f003 0304 	and.w	r3, r3, #4
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d126      	bne.n	8004d60 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d113      	bne.n	8004d42 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004d20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d24:	d106      	bne.n	8004d34 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2102      	movs	r1, #2
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f002 fb13 	bl	8007358 <USB_InitFSLSPClkSel>
 8004d32:	e011      	b.n	8004d58 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2101      	movs	r1, #1
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f002 fb0c 	bl	8007358 <USB_InitFSLSPClkSel>
 8004d40:	e00a      	b.n	8004d58 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d106      	bne.n	8004d58 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d50:	461a      	mov	r2, r3
 8004d52:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004d56:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f005 f8e9 	bl	8009f30 <HAL_HCD_PortEnabled_Callback>
 8004d5e:	e002      	b.n	8004d66 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f005 f8f3 	bl	8009f4c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f003 0320 	and.w	r3, r3, #32
 8004d6c:	2b20      	cmp	r3, #32
 8004d6e:	d103      	bne.n	8004d78 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	f043 0320 	orr.w	r3, r3, #32
 8004d76:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d7e:	461a      	mov	r2, r3
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	6013      	str	r3, [r2, #0]
}
 8004d84:	bf00      	nop
 8004d86:	3718      	adds	r7, #24
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e12b      	b.n	8004ff6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d106      	bne.n	8004db8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fb fd28 	bl	8000808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2224      	movs	r2, #36	; 0x24
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0201 	bic.w	r2, r2, #1
 8004dce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004df0:	f001 fa20 	bl	8006234 <HAL_RCC_GetPCLK1Freq>
 8004df4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	4a81      	ldr	r2, [pc, #516]	; (8005000 <HAL_I2C_Init+0x274>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d807      	bhi.n	8004e10 <HAL_I2C_Init+0x84>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4a80      	ldr	r2, [pc, #512]	; (8005004 <HAL_I2C_Init+0x278>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	bf94      	ite	ls
 8004e08:	2301      	movls	r3, #1
 8004e0a:	2300      	movhi	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	e006      	b.n	8004e1e <HAL_I2C_Init+0x92>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4a7d      	ldr	r2, [pc, #500]	; (8005008 <HAL_I2C_Init+0x27c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	bf94      	ite	ls
 8004e18:	2301      	movls	r3, #1
 8004e1a:	2300      	movhi	r3, #0
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e0e7      	b.n	8004ff6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4a78      	ldr	r2, [pc, #480]	; (800500c <HAL_I2C_Init+0x280>)
 8004e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2e:	0c9b      	lsrs	r3, r3, #18
 8004e30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	4a6a      	ldr	r2, [pc, #424]	; (8005000 <HAL_I2C_Init+0x274>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d802      	bhi.n	8004e60 <HAL_I2C_Init+0xd4>
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	e009      	b.n	8004e74 <HAL_I2C_Init+0xe8>
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e66:	fb02 f303 	mul.w	r3, r2, r3
 8004e6a:	4a69      	ldr	r2, [pc, #420]	; (8005010 <HAL_I2C_Init+0x284>)
 8004e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e70:	099b      	lsrs	r3, r3, #6
 8004e72:	3301      	adds	r3, #1
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6812      	ldr	r2, [r2, #0]
 8004e78:	430b      	orrs	r3, r1
 8004e7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004e86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	495c      	ldr	r1, [pc, #368]	; (8005000 <HAL_I2C_Init+0x274>)
 8004e90:	428b      	cmp	r3, r1
 8004e92:	d819      	bhi.n	8004ec8 <HAL_I2C_Init+0x13c>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	1e59      	subs	r1, r3, #1
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ea2:	1c59      	adds	r1, r3, #1
 8004ea4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004ea8:	400b      	ands	r3, r1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <HAL_I2C_Init+0x138>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	1e59      	subs	r1, r3, #1
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ec2:	e051      	b.n	8004f68 <HAL_I2C_Init+0x1dc>
 8004ec4:	2304      	movs	r3, #4
 8004ec6:	e04f      	b.n	8004f68 <HAL_I2C_Init+0x1dc>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d111      	bne.n	8004ef4 <HAL_I2C_Init+0x168>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	1e58      	subs	r0, r3, #1
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6859      	ldr	r1, [r3, #4]
 8004ed8:	460b      	mov	r3, r1
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	440b      	add	r3, r1
 8004ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	bf0c      	ite	eq
 8004eec:	2301      	moveq	r3, #1
 8004eee:	2300      	movne	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	e012      	b.n	8004f1a <HAL_I2C_Init+0x18e>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	1e58      	subs	r0, r3, #1
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6859      	ldr	r1, [r3, #4]
 8004efc:	460b      	mov	r3, r1
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	0099      	lsls	r1, r3, #2
 8004f04:	440b      	add	r3, r1
 8004f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	bf0c      	ite	eq
 8004f14:	2301      	moveq	r3, #1
 8004f16:	2300      	movne	r3, #0
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <HAL_I2C_Init+0x196>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e022      	b.n	8004f68 <HAL_I2C_Init+0x1dc>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10e      	bne.n	8004f48 <HAL_I2C_Init+0x1bc>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	1e58      	subs	r0, r3, #1
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6859      	ldr	r1, [r3, #4]
 8004f32:	460b      	mov	r3, r1
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	440b      	add	r3, r1
 8004f38:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f46:	e00f      	b.n	8004f68 <HAL_I2C_Init+0x1dc>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	1e58      	subs	r0, r3, #1
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6859      	ldr	r1, [r3, #4]
 8004f50:	460b      	mov	r3, r1
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	440b      	add	r3, r1
 8004f56:	0099      	lsls	r1, r3, #2
 8004f58:	440b      	add	r3, r1
 8004f5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f5e:	3301      	adds	r3, #1
 8004f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f68:	6879      	ldr	r1, [r7, #4]
 8004f6a:	6809      	ldr	r1, [r1, #0]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	69da      	ldr	r2, [r3, #28]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004f96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	6911      	ldr	r1, [r2, #16]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	68d2      	ldr	r2, [r2, #12]
 8004fa2:	4311      	orrs	r1, r2
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6812      	ldr	r2, [r2, #0]
 8004fa8:	430b      	orrs	r3, r1
 8004faa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	695a      	ldr	r2, [r3, #20]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0201 	orr.w	r2, r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	000186a0 	.word	0x000186a0
 8005004:	001e847f 	.word	0x001e847f
 8005008:	003d08ff 	.word	0x003d08ff
 800500c:	431bde83 	.word	0x431bde83
 8005010:	10624dd3 	.word	0x10624dd3

08005014 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b088      	sub	sp, #32
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e128      	b.n	8005278 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d109      	bne.n	8005046 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a90      	ldr	r2, [pc, #576]	; (8005280 <HAL_I2S_Init+0x26c>)
 800503e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7fb fc51 	bl	80008e8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2202      	movs	r2, #2
 800504a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6812      	ldr	r2, [r2, #0]
 8005058:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800505c:	f023 030f 	bic.w	r3, r3, #15
 8005060:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2202      	movs	r2, #2
 8005068:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	2b02      	cmp	r3, #2
 8005070:	d060      	beq.n	8005134 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d102      	bne.n	8005080 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800507a:	2310      	movs	r3, #16
 800507c:	617b      	str	r3, [r7, #20]
 800507e:	e001      	b.n	8005084 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005080:	2320      	movs	r3, #32
 8005082:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	2b20      	cmp	r3, #32
 800508a:	d802      	bhi.n	8005092 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005092:	2001      	movs	r0, #1
 8005094:	f001 f9d8 	bl	8006448 <HAL_RCCEx_GetPeriphCLKFreq>
 8005098:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050a2:	d125      	bne.n	80050f0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d010      	beq.n	80050ce <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80050b6:	4613      	mov	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	461a      	mov	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c8:	3305      	adds	r3, #5
 80050ca:	613b      	str	r3, [r7, #16]
 80050cc:	e01f      	b.n	800510e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80050d8:	4613      	mov	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	461a      	mov	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ea:	3305      	adds	r3, #5
 80050ec:	613b      	str	r3, [r7, #16]
 80050ee:	e00e      	b.n	800510e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80050f8:	4613      	mov	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	005b      	lsls	r3, r3, #1
 8005100:	461a      	mov	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	fbb2 f3f3 	udiv	r3, r2, r3
 800510a:	3305      	adds	r3, #5
 800510c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	4a5c      	ldr	r2, [pc, #368]	; (8005284 <HAL_I2S_Init+0x270>)
 8005112:	fba2 2303 	umull	r2, r3, r2, r3
 8005116:	08db      	lsrs	r3, r3, #3
 8005118:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	085b      	lsrs	r3, r3, #1
 800512a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	021b      	lsls	r3, r3, #8
 8005130:	61bb      	str	r3, [r7, #24]
 8005132:	e003      	b.n	800513c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005134:	2302      	movs	r3, #2
 8005136:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d902      	bls.n	8005148 <HAL_I2S_Init+0x134>
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	2bff      	cmp	r3, #255	; 0xff
 8005146:	d907      	bls.n	8005158 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514c:	f043 0210 	orr.w	r2, r3, #16
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e08f      	b.n	8005278 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	691a      	ldr	r2, [r3, #16]
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	ea42 0103 	orr.w	r1, r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	69fa      	ldr	r2, [r7, #28]
 8005168:	430a      	orrs	r2, r1
 800516a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005176:	f023 030f 	bic.w	r3, r3, #15
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6851      	ldr	r1, [r2, #4]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	6892      	ldr	r2, [r2, #8]
 8005182:	4311      	orrs	r1, r2
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	68d2      	ldr	r2, [r2, #12]
 8005188:	4311      	orrs	r1, r2
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6992      	ldr	r2, [r2, #24]
 800518e:	430a      	orrs	r2, r1
 8005190:	431a      	orrs	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800519a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d161      	bne.n	8005268 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a38      	ldr	r2, [pc, #224]	; (8005288 <HAL_I2S_Init+0x274>)
 80051a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a37      	ldr	r2, [pc, #220]	; (800528c <HAL_I2S_Init+0x278>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d101      	bne.n	80051b8 <HAL_I2S_Init+0x1a4>
 80051b4:	4b36      	ldr	r3, [pc, #216]	; (8005290 <HAL_I2S_Init+0x27c>)
 80051b6:	e001      	b.n	80051bc <HAL_I2S_Init+0x1a8>
 80051b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	6812      	ldr	r2, [r2, #0]
 80051c2:	4932      	ldr	r1, [pc, #200]	; (800528c <HAL_I2S_Init+0x278>)
 80051c4:	428a      	cmp	r2, r1
 80051c6:	d101      	bne.n	80051cc <HAL_I2S_Init+0x1b8>
 80051c8:	4a31      	ldr	r2, [pc, #196]	; (8005290 <HAL_I2S_Init+0x27c>)
 80051ca:	e001      	b.n	80051d0 <HAL_I2S_Init+0x1bc>
 80051cc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80051d0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80051d4:	f023 030f 	bic.w	r3, r3, #15
 80051d8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a2b      	ldr	r2, [pc, #172]	; (800528c <HAL_I2S_Init+0x278>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d101      	bne.n	80051e8 <HAL_I2S_Init+0x1d4>
 80051e4:	4b2a      	ldr	r3, [pc, #168]	; (8005290 <HAL_I2S_Init+0x27c>)
 80051e6:	e001      	b.n	80051ec <HAL_I2S_Init+0x1d8>
 80051e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051ec:	2202      	movs	r2, #2
 80051ee:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a25      	ldr	r2, [pc, #148]	; (800528c <HAL_I2S_Init+0x278>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d101      	bne.n	80051fe <HAL_I2S_Init+0x1ea>
 80051fa:	4b25      	ldr	r3, [pc, #148]	; (8005290 <HAL_I2S_Init+0x27c>)
 80051fc:	e001      	b.n	8005202 <HAL_I2S_Init+0x1ee>
 80051fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800520e:	d003      	beq.n	8005218 <HAL_I2S_Init+0x204>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d103      	bne.n	8005220 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005218:	f44f 7380 	mov.w	r3, #256	; 0x100
 800521c:	613b      	str	r3, [r7, #16]
 800521e:	e001      	b.n	8005224 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005220:	2300      	movs	r3, #0
 8005222:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800522e:	4313      	orrs	r3, r2
 8005230:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005238:	4313      	orrs	r3, r2
 800523a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005242:	4313      	orrs	r3, r2
 8005244:	b29a      	uxth	r2, r3
 8005246:	897b      	ldrh	r3, [r7, #10]
 8005248:	4313      	orrs	r3, r2
 800524a:	b29b      	uxth	r3, r3
 800524c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005250:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a0d      	ldr	r2, [pc, #52]	; (800528c <HAL_I2S_Init+0x278>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d101      	bne.n	8005260 <HAL_I2S_Init+0x24c>
 800525c:	4b0c      	ldr	r3, [pc, #48]	; (8005290 <HAL_I2S_Init+0x27c>)
 800525e:	e001      	b.n	8005264 <HAL_I2S_Init+0x250>
 8005260:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005264:	897a      	ldrh	r2, [r7, #10]
 8005266:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3720      	adds	r7, #32
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	0800538b 	.word	0x0800538b
 8005284:	cccccccd 	.word	0xcccccccd
 8005288:	080054a1 	.word	0x080054a1
 800528c:	40003800 	.word	0x40003800
 8005290:	40003400 	.word	0x40003400

08005294 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	881a      	ldrh	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e8:	1c9a      	adds	r2, r3, #2
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	3b01      	subs	r3, #1
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005300:	b29b      	uxth	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10e      	bne.n	8005324 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005314:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7ff ffb8 	bl	8005294 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005324:	bf00      	nop
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68da      	ldr	r2, [r3, #12]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533e:	b292      	uxth	r2, r2
 8005340:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005346:	1c9a      	adds	r2, r3, #2
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005350:	b29b      	uxth	r3, r3
 8005352:	3b01      	subs	r3, #1
 8005354:	b29a      	uxth	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800535e:	b29b      	uxth	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10e      	bne.n	8005382 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005372:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7ff ff93 	bl	80052a8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005382:	bf00      	nop
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b086      	sub	sp, #24
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d13a      	bne.n	800541c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d109      	bne.n	80053c4 <I2S_IRQHandler+0x3a>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ba:	2b40      	cmp	r3, #64	; 0x40
 80053bc:	d102      	bne.n	80053c4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7ff ffb4 	bl	800532c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ca:	2b40      	cmp	r3, #64	; 0x40
 80053cc:	d126      	bne.n	800541c <I2S_IRQHandler+0x92>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f003 0320 	and.w	r3, r3, #32
 80053d8:	2b20      	cmp	r3, #32
 80053da:	d11f      	bne.n	800541c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80053ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80053ec:	2300      	movs	r3, #0
 80053ee:	613b      	str	r3, [r7, #16]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	613b      	str	r3, [r7, #16]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	613b      	str	r3, [r7, #16]
 8005400:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540e:	f043 0202 	orr.w	r2, r3, #2
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7ff ff50 	bl	80052bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b03      	cmp	r3, #3
 8005426:	d136      	bne.n	8005496 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b02      	cmp	r3, #2
 8005430:	d109      	bne.n	8005446 <I2S_IRQHandler+0xbc>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800543c:	2b80      	cmp	r3, #128	; 0x80
 800543e:	d102      	bne.n	8005446 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7ff ff45 	bl	80052d0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f003 0308 	and.w	r3, r3, #8
 800544c:	2b08      	cmp	r3, #8
 800544e:	d122      	bne.n	8005496 <I2S_IRQHandler+0x10c>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f003 0320 	and.w	r3, r3, #32
 800545a:	2b20      	cmp	r3, #32
 800545c:	d11b      	bne.n	8005496 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800546c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800546e:	2300      	movs	r3, #0
 8005470:	60fb      	str	r3, [r7, #12]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005488:	f043 0204 	orr.w	r2, r3, #4
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7ff ff13 	bl	80052bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005496:	bf00      	nop
 8005498:	3718      	adds	r7, #24
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
	...

080054a0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b088      	sub	sp, #32
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a92      	ldr	r2, [pc, #584]	; (8005700 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d101      	bne.n	80054be <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80054ba:	4b92      	ldr	r3, [pc, #584]	; (8005704 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80054bc:	e001      	b.n	80054c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80054be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a8b      	ldr	r2, [pc, #556]	; (8005700 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d101      	bne.n	80054dc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80054d8:	4b8a      	ldr	r3, [pc, #552]	; (8005704 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80054da:	e001      	b.n	80054e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80054dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054ec:	d004      	beq.n	80054f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f040 8099 	bne.w	800562a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d107      	bne.n	8005512 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005508:	2b00      	cmp	r3, #0
 800550a:	d002      	beq.n	8005512 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f925 	bl	800575c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b01      	cmp	r3, #1
 800551a:	d107      	bne.n	800552c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005522:	2b00      	cmp	r3, #0
 8005524:	d002      	beq.n	800552c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f9c8 	bl	80058bc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005532:	2b40      	cmp	r3, #64	; 0x40
 8005534:	d13a      	bne.n	80055ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	f003 0320 	and.w	r3, r3, #32
 800553c:	2b00      	cmp	r3, #0
 800553e:	d035      	beq.n	80055ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a6e      	ldr	r2, [pc, #440]	; (8005700 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d101      	bne.n	800554e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800554a:	4b6e      	ldr	r3, [pc, #440]	; (8005704 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800554c:	e001      	b.n	8005552 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800554e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4969      	ldr	r1, [pc, #420]	; (8005700 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800555a:	428b      	cmp	r3, r1
 800555c:	d101      	bne.n	8005562 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800555e:	4b69      	ldr	r3, [pc, #420]	; (8005704 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005560:	e001      	b.n	8005566 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005562:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005566:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800556a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800557a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800557c:	2300      	movs	r3, #0
 800557e:	60fb      	str	r3, [r7, #12]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	60fb      	str	r3, [r7, #12]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800559e:	f043 0202 	orr.w	r2, r3, #2
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7ff fe88 	bl	80052bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	f003 0308 	and.w	r3, r3, #8
 80055b2:	2b08      	cmp	r3, #8
 80055b4:	f040 80c3 	bne.w	800573e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f003 0320 	and.w	r3, r3, #32
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 80bd 	beq.w	800573e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80055d2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a49      	ldr	r2, [pc, #292]	; (8005700 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d101      	bne.n	80055e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80055de:	4b49      	ldr	r3, [pc, #292]	; (8005704 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80055e0:	e001      	b.n	80055e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80055e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4944      	ldr	r1, [pc, #272]	; (8005700 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80055ee:	428b      	cmp	r3, r1
 80055f0:	d101      	bne.n	80055f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80055f2:	4b44      	ldr	r3, [pc, #272]	; (8005704 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80055f4:	e001      	b.n	80055fa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80055f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80055fe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005600:	2300      	movs	r3, #0
 8005602:	60bb      	str	r3, [r7, #8]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	60bb      	str	r3, [r7, #8]
 800560c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561a:	f043 0204 	orr.w	r2, r3, #4
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7ff fe4a 	bl	80052bc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005628:	e089      	b.n	800573e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	2b02      	cmp	r3, #2
 8005632:	d107      	bne.n	8005644 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800563a:	2b00      	cmp	r3, #0
 800563c:	d002      	beq.n	8005644 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f8be 	bl	80057c0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b01      	cmp	r3, #1
 800564c:	d107      	bne.n	800565e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f8fd 	bl	8005858 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005664:	2b40      	cmp	r3, #64	; 0x40
 8005666:	d12f      	bne.n	80056c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f003 0320 	and.w	r3, r3, #32
 800566e:	2b00      	cmp	r3, #0
 8005670:	d02a      	beq.n	80056c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005680:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a1e      	ldr	r2, [pc, #120]	; (8005700 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d101      	bne.n	8005690 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800568c:	4b1d      	ldr	r3, [pc, #116]	; (8005704 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800568e:	e001      	b.n	8005694 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005690:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4919      	ldr	r1, [pc, #100]	; (8005700 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800569c:	428b      	cmp	r3, r1
 800569e:	d101      	bne.n	80056a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80056a0:	4b18      	ldr	r3, [pc, #96]	; (8005704 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056a2:	e001      	b.n	80056a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80056a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80056ac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ba:	f043 0202 	orr.w	r2, r3, #2
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7ff fdfa 	bl	80052bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	2b08      	cmp	r3, #8
 80056d0:	d136      	bne.n	8005740 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	f003 0320 	and.w	r3, r3, #32
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d031      	beq.n	8005740 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a07      	ldr	r2, [pc, #28]	; (8005700 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d101      	bne.n	80056ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80056e6:	4b07      	ldr	r3, [pc, #28]	; (8005704 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056e8:	e001      	b.n	80056ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80056ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4902      	ldr	r1, [pc, #8]	; (8005700 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056f6:	428b      	cmp	r3, r1
 80056f8:	d106      	bne.n	8005708 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80056fa:	4b02      	ldr	r3, [pc, #8]	; (8005704 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056fc:	e006      	b.n	800570c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80056fe:	bf00      	nop
 8005700:	40003800 	.word	0x40003800
 8005704:	40003400 	.word	0x40003400
 8005708:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800570c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005710:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005720:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572e:	f043 0204 	orr.w	r2, r3, #4
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7ff fdc0 	bl	80052bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800573c:	e000      	b.n	8005740 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800573e:	bf00      	nop
}
 8005740:	bf00      	nop
 8005742:	3720      	adds	r7, #32
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	1c99      	adds	r1, r3, #2
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	6251      	str	r1, [r2, #36]	; 0x24
 800576e:	881a      	ldrh	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577a:	b29b      	uxth	r3, r3
 800577c:	3b01      	subs	r3, #1
 800577e:	b29a      	uxth	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005788:	b29b      	uxth	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d113      	bne.n	80057b6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800579c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d106      	bne.n	80057b6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f7ff ffc9 	bl	8005748 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80057b6:	bf00      	nop
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
	...

080057c0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	1c99      	adds	r1, r3, #2
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6251      	str	r1, [r2, #36]	; 0x24
 80057d2:	8819      	ldrh	r1, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a1d      	ldr	r2, [pc, #116]	; (8005850 <I2SEx_TxISR_I2SExt+0x90>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d101      	bne.n	80057e2 <I2SEx_TxISR_I2SExt+0x22>
 80057de:	4b1d      	ldr	r3, [pc, #116]	; (8005854 <I2SEx_TxISR_I2SExt+0x94>)
 80057e0:	e001      	b.n	80057e6 <I2SEx_TxISR_I2SExt+0x26>
 80057e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057e6:	460a      	mov	r2, r1
 80057e8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d121      	bne.n	8005846 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a12      	ldr	r2, [pc, #72]	; (8005850 <I2SEx_TxISR_I2SExt+0x90>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d101      	bne.n	8005810 <I2SEx_TxISR_I2SExt+0x50>
 800580c:	4b11      	ldr	r3, [pc, #68]	; (8005854 <I2SEx_TxISR_I2SExt+0x94>)
 800580e:	e001      	b.n	8005814 <I2SEx_TxISR_I2SExt+0x54>
 8005810:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	490d      	ldr	r1, [pc, #52]	; (8005850 <I2SEx_TxISR_I2SExt+0x90>)
 800581c:	428b      	cmp	r3, r1
 800581e:	d101      	bne.n	8005824 <I2SEx_TxISR_I2SExt+0x64>
 8005820:	4b0c      	ldr	r3, [pc, #48]	; (8005854 <I2SEx_TxISR_I2SExt+0x94>)
 8005822:	e001      	b.n	8005828 <I2SEx_TxISR_I2SExt+0x68>
 8005824:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005828:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800582c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005832:	b29b      	uxth	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	d106      	bne.n	8005846 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7ff ff81 	bl	8005748 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005846:	bf00      	nop
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	40003800 	.word	0x40003800
 8005854:	40003400 	.word	0x40003400

08005858 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68d8      	ldr	r0, [r3, #12]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586a:	1c99      	adds	r1, r3, #2
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005870:	b282      	uxth	r2, r0
 8005872:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005878:	b29b      	uxth	r3, r3
 800587a:	3b01      	subs	r3, #1
 800587c:	b29a      	uxth	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005886:	b29b      	uxth	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	d113      	bne.n	80058b4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800589a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d106      	bne.n	80058b4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7ff ff4a 	bl	8005748 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80058b4:	bf00      	nop
 80058b6:	3708      	adds	r7, #8
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a20      	ldr	r2, [pc, #128]	; (800594c <I2SEx_RxISR_I2SExt+0x90>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d101      	bne.n	80058d2 <I2SEx_RxISR_I2SExt+0x16>
 80058ce:	4b20      	ldr	r3, [pc, #128]	; (8005950 <I2SEx_RxISR_I2SExt+0x94>)
 80058d0:	e001      	b.n	80058d6 <I2SEx_RxISR_I2SExt+0x1a>
 80058d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058d6:	68d8      	ldr	r0, [r3, #12]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058dc:	1c99      	adds	r1, r3, #2
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80058e2:	b282      	uxth	r2, r0
 80058e4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	3b01      	subs	r3, #1
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d121      	bne.n	8005942 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a12      	ldr	r2, [pc, #72]	; (800594c <I2SEx_RxISR_I2SExt+0x90>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d101      	bne.n	800590c <I2SEx_RxISR_I2SExt+0x50>
 8005908:	4b11      	ldr	r3, [pc, #68]	; (8005950 <I2SEx_RxISR_I2SExt+0x94>)
 800590a:	e001      	b.n	8005910 <I2SEx_RxISR_I2SExt+0x54>
 800590c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	490d      	ldr	r1, [pc, #52]	; (800594c <I2SEx_RxISR_I2SExt+0x90>)
 8005918:	428b      	cmp	r3, r1
 800591a:	d101      	bne.n	8005920 <I2SEx_RxISR_I2SExt+0x64>
 800591c:	4b0c      	ldr	r3, [pc, #48]	; (8005950 <I2SEx_RxISR_I2SExt+0x94>)
 800591e:	e001      	b.n	8005924 <I2SEx_RxISR_I2SExt+0x68>
 8005920:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005924:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005928:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800592e:	b29b      	uxth	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d106      	bne.n	8005942 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f7ff ff03 	bl	8005748 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005942:	bf00      	nop
 8005944:	3708      	adds	r7, #8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	40003800 	.word	0x40003800
 8005950:	40003400 	.word	0x40003400

08005954 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e267      	b.n	8005e36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	2b00      	cmp	r3, #0
 8005970:	d075      	beq.n	8005a5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005972:	4b88      	ldr	r3, [pc, #544]	; (8005b94 <HAL_RCC_OscConfig+0x240>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f003 030c 	and.w	r3, r3, #12
 800597a:	2b04      	cmp	r3, #4
 800597c:	d00c      	beq.n	8005998 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800597e:	4b85      	ldr	r3, [pc, #532]	; (8005b94 <HAL_RCC_OscConfig+0x240>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005986:	2b08      	cmp	r3, #8
 8005988:	d112      	bne.n	80059b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800598a:	4b82      	ldr	r3, [pc, #520]	; (8005b94 <HAL_RCC_OscConfig+0x240>)
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005996:	d10b      	bne.n	80059b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005998:	4b7e      	ldr	r3, [pc, #504]	; (8005b94 <HAL_RCC_OscConfig+0x240>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d05b      	beq.n	8005a5c <HAL_RCC_OscConfig+0x108>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d157      	bne.n	8005a5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e242      	b.n	8005e36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059b8:	d106      	bne.n	80059c8 <HAL_RCC_OscConfig+0x74>
 80059ba:	4b76      	ldr	r3, [pc, #472]	; (8005b94 <HAL_RCC_OscConfig+0x240>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a75      	ldr	r2, [pc, #468]	; (8005b94 <HAL_RCC_OscConfig+0x240>)
 80059c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059c4:	6013      	str	r3, [r2, #0]
 80059c6:	e01d      	b.n	8005a04 <HAL_RCC_OscConfig+0xb0>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059d0:	d10c      	bne.n	80059ec <HAL_RCC_OscConfig+0x98>
 80059d2:	4b70      	ldr	r3, [pc, #448]	; (8005b94 <HAL_RCC_OscConfig+0x240>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a6f      	ldr	r2, [pc, #444]	; (8005b94 <HAL_RCC_OscConfig+0x240>)
 80059d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059dc:	6013      	str	r3, [r2, #0]
 80059de:	4b6d      	ldr	r3, [pc, #436]	; (8005b94 <HAL_RCC_OscConfig+0x240>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a6c      	ldr	r2, [pc, #432]	; (8005b94 <HAL_RCC_OscConfig+0x240>)
 80059e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059e8:	6013      	str	r3, [r2, #0]
 80059ea:	e00b      	b.n	8005a04 <HAL_RCC_OscConfig+0xb0>
 80059ec:	4b69      	ldr	r3, [pc, #420]	; (8005b94 <HAL_RCC_OscConfig+0x240>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a68      	ldr	r2, [pc, #416]	; (8005b94 <HAL_RCC_OscConfig+0x240>)
 80059f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059f6:	6013      	str	r3, [r2, #0]
 80059f8:	4b66      	ldr	r3, [pc, #408]	; (8005b94 <HAL_RCC_OscConfig+0x240>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a65      	ldr	r2, [pc, #404]	; (8005b94 <HAL_RCC_OscConfig+0x240>)
 80059fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d013      	beq.n	8005a34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a0c:	f7fd f9c0 	bl	8002d90 <HAL_GetTick>
 8005a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a14:	f7fd f9bc 	bl	8002d90 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b64      	cmp	r3, #100	; 0x64
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e207      	b.n	8005e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a26:	4b5b      	ldr	r3, [pc, #364]	; (8005b94 <HAL_RCC_OscConfig+0x240>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d0f0      	beq.n	8005a14 <HAL_RCC_OscConfig+0xc0>
 8005a32:	e014      	b.n	8005a5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a34:	f7fd f9ac 	bl	8002d90 <HAL_GetTick>
 8005a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a3a:	e008      	b.n	8005a4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a3c:	f7fd f9a8 	bl	8002d90 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b64      	cmp	r3, #100	; 0x64
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e1f3      	b.n	8005e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a4e:	4b51      	ldr	r3, [pc, #324]	; (8005b94 <HAL_RCC_OscConfig+0x240>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1f0      	bne.n	8005a3c <HAL_RCC_OscConfig+0xe8>
 8005a5a:	e000      	b.n	8005a5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d063      	beq.n	8005b32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a6a:	4b4a      	ldr	r3, [pc, #296]	; (8005b94 <HAL_RCC_OscConfig+0x240>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f003 030c 	and.w	r3, r3, #12
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00b      	beq.n	8005a8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a76:	4b47      	ldr	r3, [pc, #284]	; (8005b94 <HAL_RCC_OscConfig+0x240>)
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a7e:	2b08      	cmp	r3, #8
 8005a80:	d11c      	bne.n	8005abc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a82:	4b44      	ldr	r3, [pc, #272]	; (8005b94 <HAL_RCC_OscConfig+0x240>)
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d116      	bne.n	8005abc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a8e:	4b41      	ldr	r3, [pc, #260]	; (8005b94 <HAL_RCC_OscConfig+0x240>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d005      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x152>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d001      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e1c7      	b.n	8005e36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aa6:	4b3b      	ldr	r3, [pc, #236]	; (8005b94 <HAL_RCC_OscConfig+0x240>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	4937      	ldr	r1, [pc, #220]	; (8005b94 <HAL_RCC_OscConfig+0x240>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005aba:	e03a      	b.n	8005b32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d020      	beq.n	8005b06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ac4:	4b34      	ldr	r3, [pc, #208]	; (8005b98 <HAL_RCC_OscConfig+0x244>)
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aca:	f7fd f961 	bl	8002d90 <HAL_GetTick>
 8005ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ad0:	e008      	b.n	8005ae4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ad2:	f7fd f95d 	bl	8002d90 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d901      	bls.n	8005ae4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e1a8      	b.n	8005e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ae4:	4b2b      	ldr	r3, [pc, #172]	; (8005b94 <HAL_RCC_OscConfig+0x240>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d0f0      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005af0:	4b28      	ldr	r3, [pc, #160]	; (8005b94 <HAL_RCC_OscConfig+0x240>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	00db      	lsls	r3, r3, #3
 8005afe:	4925      	ldr	r1, [pc, #148]	; (8005b94 <HAL_RCC_OscConfig+0x240>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	600b      	str	r3, [r1, #0]
 8005b04:	e015      	b.n	8005b32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b06:	4b24      	ldr	r3, [pc, #144]	; (8005b98 <HAL_RCC_OscConfig+0x244>)
 8005b08:	2200      	movs	r2, #0
 8005b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b0c:	f7fd f940 	bl	8002d90 <HAL_GetTick>
 8005b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b14:	f7fd f93c 	bl	8002d90 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e187      	b.n	8005e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b26:	4b1b      	ldr	r3, [pc, #108]	; (8005b94 <HAL_RCC_OscConfig+0x240>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1f0      	bne.n	8005b14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0308 	and.w	r3, r3, #8
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d036      	beq.n	8005bac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d016      	beq.n	8005b74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b46:	4b15      	ldr	r3, [pc, #84]	; (8005b9c <HAL_RCC_OscConfig+0x248>)
 8005b48:	2201      	movs	r2, #1
 8005b4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b4c:	f7fd f920 	bl	8002d90 <HAL_GetTick>
 8005b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b52:	e008      	b.n	8005b66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b54:	f7fd f91c 	bl	8002d90 <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d901      	bls.n	8005b66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e167      	b.n	8005e36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b66:	4b0b      	ldr	r3, [pc, #44]	; (8005b94 <HAL_RCC_OscConfig+0x240>)
 8005b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b6a:	f003 0302 	and.w	r3, r3, #2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d0f0      	beq.n	8005b54 <HAL_RCC_OscConfig+0x200>
 8005b72:	e01b      	b.n	8005bac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b74:	4b09      	ldr	r3, [pc, #36]	; (8005b9c <HAL_RCC_OscConfig+0x248>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b7a:	f7fd f909 	bl	8002d90 <HAL_GetTick>
 8005b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b80:	e00e      	b.n	8005ba0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b82:	f7fd f905 	bl	8002d90 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d907      	bls.n	8005ba0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e150      	b.n	8005e36 <HAL_RCC_OscConfig+0x4e2>
 8005b94:	40023800 	.word	0x40023800
 8005b98:	42470000 	.word	0x42470000
 8005b9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ba0:	4b88      	ldr	r3, [pc, #544]	; (8005dc4 <HAL_RCC_OscConfig+0x470>)
 8005ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1ea      	bne.n	8005b82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0304 	and.w	r3, r3, #4
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 8097 	beq.w	8005ce8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bbe:	4b81      	ldr	r3, [pc, #516]	; (8005dc4 <HAL_RCC_OscConfig+0x470>)
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10f      	bne.n	8005bea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bca:	2300      	movs	r3, #0
 8005bcc:	60bb      	str	r3, [r7, #8]
 8005bce:	4b7d      	ldr	r3, [pc, #500]	; (8005dc4 <HAL_RCC_OscConfig+0x470>)
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	4a7c      	ldr	r2, [pc, #496]	; (8005dc4 <HAL_RCC_OscConfig+0x470>)
 8005bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8005bda:	4b7a      	ldr	r3, [pc, #488]	; (8005dc4 <HAL_RCC_OscConfig+0x470>)
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005be2:	60bb      	str	r3, [r7, #8]
 8005be4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005be6:	2301      	movs	r3, #1
 8005be8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bea:	4b77      	ldr	r3, [pc, #476]	; (8005dc8 <HAL_RCC_OscConfig+0x474>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d118      	bne.n	8005c28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bf6:	4b74      	ldr	r3, [pc, #464]	; (8005dc8 <HAL_RCC_OscConfig+0x474>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a73      	ldr	r2, [pc, #460]	; (8005dc8 <HAL_RCC_OscConfig+0x474>)
 8005bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c02:	f7fd f8c5 	bl	8002d90 <HAL_GetTick>
 8005c06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c08:	e008      	b.n	8005c1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c0a:	f7fd f8c1 	bl	8002d90 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d901      	bls.n	8005c1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e10c      	b.n	8005e36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c1c:	4b6a      	ldr	r3, [pc, #424]	; (8005dc8 <HAL_RCC_OscConfig+0x474>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d0f0      	beq.n	8005c0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d106      	bne.n	8005c3e <HAL_RCC_OscConfig+0x2ea>
 8005c30:	4b64      	ldr	r3, [pc, #400]	; (8005dc4 <HAL_RCC_OscConfig+0x470>)
 8005c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c34:	4a63      	ldr	r2, [pc, #396]	; (8005dc4 <HAL_RCC_OscConfig+0x470>)
 8005c36:	f043 0301 	orr.w	r3, r3, #1
 8005c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c3c:	e01c      	b.n	8005c78 <HAL_RCC_OscConfig+0x324>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	2b05      	cmp	r3, #5
 8005c44:	d10c      	bne.n	8005c60 <HAL_RCC_OscConfig+0x30c>
 8005c46:	4b5f      	ldr	r3, [pc, #380]	; (8005dc4 <HAL_RCC_OscConfig+0x470>)
 8005c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4a:	4a5e      	ldr	r2, [pc, #376]	; (8005dc4 <HAL_RCC_OscConfig+0x470>)
 8005c4c:	f043 0304 	orr.w	r3, r3, #4
 8005c50:	6713      	str	r3, [r2, #112]	; 0x70
 8005c52:	4b5c      	ldr	r3, [pc, #368]	; (8005dc4 <HAL_RCC_OscConfig+0x470>)
 8005c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c56:	4a5b      	ldr	r2, [pc, #364]	; (8005dc4 <HAL_RCC_OscConfig+0x470>)
 8005c58:	f043 0301 	orr.w	r3, r3, #1
 8005c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8005c5e:	e00b      	b.n	8005c78 <HAL_RCC_OscConfig+0x324>
 8005c60:	4b58      	ldr	r3, [pc, #352]	; (8005dc4 <HAL_RCC_OscConfig+0x470>)
 8005c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c64:	4a57      	ldr	r2, [pc, #348]	; (8005dc4 <HAL_RCC_OscConfig+0x470>)
 8005c66:	f023 0301 	bic.w	r3, r3, #1
 8005c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c6c:	4b55      	ldr	r3, [pc, #340]	; (8005dc4 <HAL_RCC_OscConfig+0x470>)
 8005c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c70:	4a54      	ldr	r2, [pc, #336]	; (8005dc4 <HAL_RCC_OscConfig+0x470>)
 8005c72:	f023 0304 	bic.w	r3, r3, #4
 8005c76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d015      	beq.n	8005cac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c80:	f7fd f886 	bl	8002d90 <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c86:	e00a      	b.n	8005c9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c88:	f7fd f882 	bl	8002d90 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e0cb      	b.n	8005e36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c9e:	4b49      	ldr	r3, [pc, #292]	; (8005dc4 <HAL_RCC_OscConfig+0x470>)
 8005ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d0ee      	beq.n	8005c88 <HAL_RCC_OscConfig+0x334>
 8005caa:	e014      	b.n	8005cd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cac:	f7fd f870 	bl	8002d90 <HAL_GetTick>
 8005cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cb2:	e00a      	b.n	8005cca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cb4:	f7fd f86c 	bl	8002d90 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d901      	bls.n	8005cca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e0b5      	b.n	8005e36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cca:	4b3e      	ldr	r3, [pc, #248]	; (8005dc4 <HAL_RCC_OscConfig+0x470>)
 8005ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1ee      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cd6:	7dfb      	ldrb	r3, [r7, #23]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d105      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cdc:	4b39      	ldr	r3, [pc, #228]	; (8005dc4 <HAL_RCC_OscConfig+0x470>)
 8005cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce0:	4a38      	ldr	r2, [pc, #224]	; (8005dc4 <HAL_RCC_OscConfig+0x470>)
 8005ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ce6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 80a1 	beq.w	8005e34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cf2:	4b34      	ldr	r3, [pc, #208]	; (8005dc4 <HAL_RCC_OscConfig+0x470>)
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f003 030c 	and.w	r3, r3, #12
 8005cfa:	2b08      	cmp	r3, #8
 8005cfc:	d05c      	beq.n	8005db8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d141      	bne.n	8005d8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d06:	4b31      	ldr	r3, [pc, #196]	; (8005dcc <HAL_RCC_OscConfig+0x478>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d0c:	f7fd f840 	bl	8002d90 <HAL_GetTick>
 8005d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d12:	e008      	b.n	8005d26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d14:	f7fd f83c 	bl	8002d90 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d901      	bls.n	8005d26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e087      	b.n	8005e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d26:	4b27      	ldr	r3, [pc, #156]	; (8005dc4 <HAL_RCC_OscConfig+0x470>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1f0      	bne.n	8005d14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	69da      	ldr	r2, [r3, #28]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	019b      	lsls	r3, r3, #6
 8005d42:	431a      	orrs	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d48:	085b      	lsrs	r3, r3, #1
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	041b      	lsls	r3, r3, #16
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d54:	061b      	lsls	r3, r3, #24
 8005d56:	491b      	ldr	r1, [pc, #108]	; (8005dc4 <HAL_RCC_OscConfig+0x470>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d5c:	4b1b      	ldr	r3, [pc, #108]	; (8005dcc <HAL_RCC_OscConfig+0x478>)
 8005d5e:	2201      	movs	r2, #1
 8005d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d62:	f7fd f815 	bl	8002d90 <HAL_GetTick>
 8005d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d68:	e008      	b.n	8005d7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d6a:	f7fd f811 	bl	8002d90 <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d901      	bls.n	8005d7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e05c      	b.n	8005e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d7c:	4b11      	ldr	r3, [pc, #68]	; (8005dc4 <HAL_RCC_OscConfig+0x470>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d0f0      	beq.n	8005d6a <HAL_RCC_OscConfig+0x416>
 8005d88:	e054      	b.n	8005e34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d8a:	4b10      	ldr	r3, [pc, #64]	; (8005dcc <HAL_RCC_OscConfig+0x478>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d90:	f7fc fffe 	bl	8002d90 <HAL_GetTick>
 8005d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d96:	e008      	b.n	8005daa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d98:	f7fc fffa 	bl	8002d90 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e045      	b.n	8005e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005daa:	4b06      	ldr	r3, [pc, #24]	; (8005dc4 <HAL_RCC_OscConfig+0x470>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1f0      	bne.n	8005d98 <HAL_RCC_OscConfig+0x444>
 8005db6:	e03d      	b.n	8005e34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d107      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e038      	b.n	8005e36 <HAL_RCC_OscConfig+0x4e2>
 8005dc4:	40023800 	.word	0x40023800
 8005dc8:	40007000 	.word	0x40007000
 8005dcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005dd0:	4b1b      	ldr	r3, [pc, #108]	; (8005e40 <HAL_RCC_OscConfig+0x4ec>)
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d028      	beq.n	8005e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d121      	bne.n	8005e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d11a      	bne.n	8005e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e00:	4013      	ands	r3, r2
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d111      	bne.n	8005e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e16:	085b      	lsrs	r3, r3, #1
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d107      	bne.n	8005e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d001      	beq.n	8005e34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e000      	b.n	8005e36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	40023800 	.word	0x40023800

08005e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e0cc      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e58:	4b68      	ldr	r3, [pc, #416]	; (8005ffc <HAL_RCC_ClockConfig+0x1b8>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0307 	and.w	r3, r3, #7
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d90c      	bls.n	8005e80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e66:	4b65      	ldr	r3, [pc, #404]	; (8005ffc <HAL_RCC_ClockConfig+0x1b8>)
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	b2d2      	uxtb	r2, r2
 8005e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e6e:	4b63      	ldr	r3, [pc, #396]	; (8005ffc <HAL_RCC_ClockConfig+0x1b8>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0307 	and.w	r3, r3, #7
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d001      	beq.n	8005e80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e0b8      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d020      	beq.n	8005ece <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0304 	and.w	r3, r3, #4
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d005      	beq.n	8005ea4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e98:	4b59      	ldr	r3, [pc, #356]	; (8006000 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	4a58      	ldr	r2, [pc, #352]	; (8006000 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ea2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0308 	and.w	r3, r3, #8
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d005      	beq.n	8005ebc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005eb0:	4b53      	ldr	r3, [pc, #332]	; (8006000 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	4a52      	ldr	r2, [pc, #328]	; (8006000 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005eba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ebc:	4b50      	ldr	r3, [pc, #320]	; (8006000 <HAL_RCC_ClockConfig+0x1bc>)
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	494d      	ldr	r1, [pc, #308]	; (8006000 <HAL_RCC_ClockConfig+0x1bc>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d044      	beq.n	8005f64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d107      	bne.n	8005ef2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ee2:	4b47      	ldr	r3, [pc, #284]	; (8006000 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d119      	bne.n	8005f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e07f      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d003      	beq.n	8005f02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005efe:	2b03      	cmp	r3, #3
 8005f00:	d107      	bne.n	8005f12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f02:	4b3f      	ldr	r3, [pc, #252]	; (8006000 <HAL_RCC_ClockConfig+0x1bc>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d109      	bne.n	8005f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e06f      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f12:	4b3b      	ldr	r3, [pc, #236]	; (8006000 <HAL_RCC_ClockConfig+0x1bc>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e067      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f22:	4b37      	ldr	r3, [pc, #220]	; (8006000 <HAL_RCC_ClockConfig+0x1bc>)
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f023 0203 	bic.w	r2, r3, #3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	4934      	ldr	r1, [pc, #208]	; (8006000 <HAL_RCC_ClockConfig+0x1bc>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f34:	f7fc ff2c 	bl	8002d90 <HAL_GetTick>
 8005f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f3a:	e00a      	b.n	8005f52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f3c:	f7fc ff28 	bl	8002d90 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d901      	bls.n	8005f52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e04f      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f52:	4b2b      	ldr	r3, [pc, #172]	; (8006000 <HAL_RCC_ClockConfig+0x1bc>)
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f003 020c 	and.w	r2, r3, #12
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d1eb      	bne.n	8005f3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f64:	4b25      	ldr	r3, [pc, #148]	; (8005ffc <HAL_RCC_ClockConfig+0x1b8>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0307 	and.w	r3, r3, #7
 8005f6c:	683a      	ldr	r2, [r7, #0]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d20c      	bcs.n	8005f8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f72:	4b22      	ldr	r3, [pc, #136]	; (8005ffc <HAL_RCC_ClockConfig+0x1b8>)
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	b2d2      	uxtb	r2, r2
 8005f78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f7a:	4b20      	ldr	r3, [pc, #128]	; (8005ffc <HAL_RCC_ClockConfig+0x1b8>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0307 	and.w	r3, r3, #7
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d001      	beq.n	8005f8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e032      	b.n	8005ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0304 	and.w	r3, r3, #4
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d008      	beq.n	8005faa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f98:	4b19      	ldr	r3, [pc, #100]	; (8006000 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	4916      	ldr	r1, [pc, #88]	; (8006000 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0308 	and.w	r3, r3, #8
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d009      	beq.n	8005fca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fb6:	4b12      	ldr	r3, [pc, #72]	; (8006000 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	00db      	lsls	r3, r3, #3
 8005fc4:	490e      	ldr	r1, [pc, #56]	; (8006000 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005fca:	f000 f821 	bl	8006010 <HAL_RCC_GetSysClockFreq>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	4b0b      	ldr	r3, [pc, #44]	; (8006000 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	091b      	lsrs	r3, r3, #4
 8005fd6:	f003 030f 	and.w	r3, r3, #15
 8005fda:	490a      	ldr	r1, [pc, #40]	; (8006004 <HAL_RCC_ClockConfig+0x1c0>)
 8005fdc:	5ccb      	ldrb	r3, [r1, r3]
 8005fde:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe2:	4a09      	ldr	r2, [pc, #36]	; (8006008 <HAL_RCC_ClockConfig+0x1c4>)
 8005fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005fe6:	4b09      	ldr	r3, [pc, #36]	; (800600c <HAL_RCC_ClockConfig+0x1c8>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fc fe8c 	bl	8002d08 <HAL_InitTick>

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	40023c00 	.word	0x40023c00
 8006000:	40023800 	.word	0x40023800
 8006004:	0800aeec 	.word	0x0800aeec
 8006008:	20000000 	.word	0x20000000
 800600c:	20000068 	.word	0x20000068

08006010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006014:	b094      	sub	sp, #80	; 0x50
 8006016:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006018:	2300      	movs	r3, #0
 800601a:	647b      	str	r3, [r7, #68]	; 0x44
 800601c:	2300      	movs	r3, #0
 800601e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006020:	2300      	movs	r3, #0
 8006022:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006024:	2300      	movs	r3, #0
 8006026:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006028:	4b79      	ldr	r3, [pc, #484]	; (8006210 <HAL_RCC_GetSysClockFreq+0x200>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f003 030c 	and.w	r3, r3, #12
 8006030:	2b08      	cmp	r3, #8
 8006032:	d00d      	beq.n	8006050 <HAL_RCC_GetSysClockFreq+0x40>
 8006034:	2b08      	cmp	r3, #8
 8006036:	f200 80e1 	bhi.w	80061fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800603a:	2b00      	cmp	r3, #0
 800603c:	d002      	beq.n	8006044 <HAL_RCC_GetSysClockFreq+0x34>
 800603e:	2b04      	cmp	r3, #4
 8006040:	d003      	beq.n	800604a <HAL_RCC_GetSysClockFreq+0x3a>
 8006042:	e0db      	b.n	80061fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006044:	4b73      	ldr	r3, [pc, #460]	; (8006214 <HAL_RCC_GetSysClockFreq+0x204>)
 8006046:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006048:	e0db      	b.n	8006202 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800604a:	4b73      	ldr	r3, [pc, #460]	; (8006218 <HAL_RCC_GetSysClockFreq+0x208>)
 800604c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800604e:	e0d8      	b.n	8006202 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006050:	4b6f      	ldr	r3, [pc, #444]	; (8006210 <HAL_RCC_GetSysClockFreq+0x200>)
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006058:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800605a:	4b6d      	ldr	r3, [pc, #436]	; (8006210 <HAL_RCC_GetSysClockFreq+0x200>)
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d063      	beq.n	800612e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006066:	4b6a      	ldr	r3, [pc, #424]	; (8006210 <HAL_RCC_GetSysClockFreq+0x200>)
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	099b      	lsrs	r3, r3, #6
 800606c:	2200      	movs	r2, #0
 800606e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006070:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006078:	633b      	str	r3, [r7, #48]	; 0x30
 800607a:	2300      	movs	r3, #0
 800607c:	637b      	str	r3, [r7, #52]	; 0x34
 800607e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006082:	4622      	mov	r2, r4
 8006084:	462b      	mov	r3, r5
 8006086:	f04f 0000 	mov.w	r0, #0
 800608a:	f04f 0100 	mov.w	r1, #0
 800608e:	0159      	lsls	r1, r3, #5
 8006090:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006094:	0150      	lsls	r0, r2, #5
 8006096:	4602      	mov	r2, r0
 8006098:	460b      	mov	r3, r1
 800609a:	4621      	mov	r1, r4
 800609c:	1a51      	subs	r1, r2, r1
 800609e:	6139      	str	r1, [r7, #16]
 80060a0:	4629      	mov	r1, r5
 80060a2:	eb63 0301 	sbc.w	r3, r3, r1
 80060a6:	617b      	str	r3, [r7, #20]
 80060a8:	f04f 0200 	mov.w	r2, #0
 80060ac:	f04f 0300 	mov.w	r3, #0
 80060b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060b4:	4659      	mov	r1, fp
 80060b6:	018b      	lsls	r3, r1, #6
 80060b8:	4651      	mov	r1, sl
 80060ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80060be:	4651      	mov	r1, sl
 80060c0:	018a      	lsls	r2, r1, #6
 80060c2:	4651      	mov	r1, sl
 80060c4:	ebb2 0801 	subs.w	r8, r2, r1
 80060c8:	4659      	mov	r1, fp
 80060ca:	eb63 0901 	sbc.w	r9, r3, r1
 80060ce:	f04f 0200 	mov.w	r2, #0
 80060d2:	f04f 0300 	mov.w	r3, #0
 80060d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060e2:	4690      	mov	r8, r2
 80060e4:	4699      	mov	r9, r3
 80060e6:	4623      	mov	r3, r4
 80060e8:	eb18 0303 	adds.w	r3, r8, r3
 80060ec:	60bb      	str	r3, [r7, #8]
 80060ee:	462b      	mov	r3, r5
 80060f0:	eb49 0303 	adc.w	r3, r9, r3
 80060f4:	60fb      	str	r3, [r7, #12]
 80060f6:	f04f 0200 	mov.w	r2, #0
 80060fa:	f04f 0300 	mov.w	r3, #0
 80060fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006102:	4629      	mov	r1, r5
 8006104:	024b      	lsls	r3, r1, #9
 8006106:	4621      	mov	r1, r4
 8006108:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800610c:	4621      	mov	r1, r4
 800610e:	024a      	lsls	r2, r1, #9
 8006110:	4610      	mov	r0, r2
 8006112:	4619      	mov	r1, r3
 8006114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006116:	2200      	movs	r2, #0
 8006118:	62bb      	str	r3, [r7, #40]	; 0x28
 800611a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800611c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006120:	f7fc fc24 	bl	800296c <__aeabi_uldivmod>
 8006124:	4602      	mov	r2, r0
 8006126:	460b      	mov	r3, r1
 8006128:	4613      	mov	r3, r2
 800612a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800612c:	e058      	b.n	80061e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800612e:	4b38      	ldr	r3, [pc, #224]	; (8006210 <HAL_RCC_GetSysClockFreq+0x200>)
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	099b      	lsrs	r3, r3, #6
 8006134:	2200      	movs	r2, #0
 8006136:	4618      	mov	r0, r3
 8006138:	4611      	mov	r1, r2
 800613a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800613e:	623b      	str	r3, [r7, #32]
 8006140:	2300      	movs	r3, #0
 8006142:	627b      	str	r3, [r7, #36]	; 0x24
 8006144:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006148:	4642      	mov	r2, r8
 800614a:	464b      	mov	r3, r9
 800614c:	f04f 0000 	mov.w	r0, #0
 8006150:	f04f 0100 	mov.w	r1, #0
 8006154:	0159      	lsls	r1, r3, #5
 8006156:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800615a:	0150      	lsls	r0, r2, #5
 800615c:	4602      	mov	r2, r0
 800615e:	460b      	mov	r3, r1
 8006160:	4641      	mov	r1, r8
 8006162:	ebb2 0a01 	subs.w	sl, r2, r1
 8006166:	4649      	mov	r1, r9
 8006168:	eb63 0b01 	sbc.w	fp, r3, r1
 800616c:	f04f 0200 	mov.w	r2, #0
 8006170:	f04f 0300 	mov.w	r3, #0
 8006174:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006178:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800617c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006180:	ebb2 040a 	subs.w	r4, r2, sl
 8006184:	eb63 050b 	sbc.w	r5, r3, fp
 8006188:	f04f 0200 	mov.w	r2, #0
 800618c:	f04f 0300 	mov.w	r3, #0
 8006190:	00eb      	lsls	r3, r5, #3
 8006192:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006196:	00e2      	lsls	r2, r4, #3
 8006198:	4614      	mov	r4, r2
 800619a:	461d      	mov	r5, r3
 800619c:	4643      	mov	r3, r8
 800619e:	18e3      	adds	r3, r4, r3
 80061a0:	603b      	str	r3, [r7, #0]
 80061a2:	464b      	mov	r3, r9
 80061a4:	eb45 0303 	adc.w	r3, r5, r3
 80061a8:	607b      	str	r3, [r7, #4]
 80061aa:	f04f 0200 	mov.w	r2, #0
 80061ae:	f04f 0300 	mov.w	r3, #0
 80061b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061b6:	4629      	mov	r1, r5
 80061b8:	028b      	lsls	r3, r1, #10
 80061ba:	4621      	mov	r1, r4
 80061bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061c0:	4621      	mov	r1, r4
 80061c2:	028a      	lsls	r2, r1, #10
 80061c4:	4610      	mov	r0, r2
 80061c6:	4619      	mov	r1, r3
 80061c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061ca:	2200      	movs	r2, #0
 80061cc:	61bb      	str	r3, [r7, #24]
 80061ce:	61fa      	str	r2, [r7, #28]
 80061d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061d4:	f7fc fbca 	bl	800296c <__aeabi_uldivmod>
 80061d8:	4602      	mov	r2, r0
 80061da:	460b      	mov	r3, r1
 80061dc:	4613      	mov	r3, r2
 80061de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061e0:	4b0b      	ldr	r3, [pc, #44]	; (8006210 <HAL_RCC_GetSysClockFreq+0x200>)
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	0c1b      	lsrs	r3, r3, #16
 80061e6:	f003 0303 	and.w	r3, r3, #3
 80061ea:	3301      	adds	r3, #1
 80061ec:	005b      	lsls	r3, r3, #1
 80061ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80061f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80061fa:	e002      	b.n	8006202 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061fc:	4b05      	ldr	r3, [pc, #20]	; (8006214 <HAL_RCC_GetSysClockFreq+0x204>)
 80061fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006200:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006204:	4618      	mov	r0, r3
 8006206:	3750      	adds	r7, #80	; 0x50
 8006208:	46bd      	mov	sp, r7
 800620a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800620e:	bf00      	nop
 8006210:	40023800 	.word	0x40023800
 8006214:	00f42400 	.word	0x00f42400
 8006218:	007a1200 	.word	0x007a1200

0800621c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800621c:	b480      	push	{r7}
 800621e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006220:	4b03      	ldr	r3, [pc, #12]	; (8006230 <HAL_RCC_GetHCLKFreq+0x14>)
 8006222:	681b      	ldr	r3, [r3, #0]
}
 8006224:	4618      	mov	r0, r3
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	20000000 	.word	0x20000000

08006234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006238:	f7ff fff0 	bl	800621c <HAL_RCC_GetHCLKFreq>
 800623c:	4602      	mov	r2, r0
 800623e:	4b05      	ldr	r3, [pc, #20]	; (8006254 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	0a9b      	lsrs	r3, r3, #10
 8006244:	f003 0307 	and.w	r3, r3, #7
 8006248:	4903      	ldr	r1, [pc, #12]	; (8006258 <HAL_RCC_GetPCLK1Freq+0x24>)
 800624a:	5ccb      	ldrb	r3, [r1, r3]
 800624c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006250:	4618      	mov	r0, r3
 8006252:	bd80      	pop	{r7, pc}
 8006254:	40023800 	.word	0x40023800
 8006258:	0800aefc 	.word	0x0800aefc

0800625c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006260:	f7ff ffdc 	bl	800621c <HAL_RCC_GetHCLKFreq>
 8006264:	4602      	mov	r2, r0
 8006266:	4b05      	ldr	r3, [pc, #20]	; (800627c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	0b5b      	lsrs	r3, r3, #13
 800626c:	f003 0307 	and.w	r3, r3, #7
 8006270:	4903      	ldr	r1, [pc, #12]	; (8006280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006272:	5ccb      	ldrb	r3, [r1, r3]
 8006274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006278:	4618      	mov	r0, r3
 800627a:	bd80      	pop	{r7, pc}
 800627c:	40023800 	.word	0x40023800
 8006280:	0800aefc 	.word	0x0800aefc

08006284 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b00      	cmp	r3, #0
 800629e:	d105      	bne.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d035      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80062ac:	4b62      	ldr	r3, [pc, #392]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062b2:	f7fc fd6d 	bl	8002d90 <HAL_GetTick>
 80062b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062b8:	e008      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80062ba:	f7fc fd69 	bl	8002d90 <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d901      	bls.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e0b0      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062cc:	4b5b      	ldr	r3, [pc, #364]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1f0      	bne.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	019a      	lsls	r2, r3, #6
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	071b      	lsls	r3, r3, #28
 80062e4:	4955      	ldr	r1, [pc, #340]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80062ec:	4b52      	ldr	r3, [pc, #328]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80062ee:	2201      	movs	r2, #1
 80062f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062f2:	f7fc fd4d 	bl	8002d90 <HAL_GetTick>
 80062f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062f8:	e008      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80062fa:	f7fc fd49 	bl	8002d90 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	2b02      	cmp	r3, #2
 8006306:	d901      	bls.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e090      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800630c:	4b4b      	ldr	r3, [pc, #300]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d0f0      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0302 	and.w	r3, r3, #2
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 8083 	beq.w	800642c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006326:	2300      	movs	r3, #0
 8006328:	60fb      	str	r3, [r7, #12]
 800632a:	4b44      	ldr	r3, [pc, #272]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800632c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632e:	4a43      	ldr	r2, [pc, #268]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006334:	6413      	str	r3, [r2, #64]	; 0x40
 8006336:	4b41      	ldr	r3, [pc, #260]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006342:	4b3f      	ldr	r3, [pc, #252]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a3e      	ldr	r2, [pc, #248]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800634c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800634e:	f7fc fd1f 	bl	8002d90 <HAL_GetTick>
 8006352:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006354:	e008      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006356:	f7fc fd1b 	bl	8002d90 <HAL_GetTick>
 800635a:	4602      	mov	r2, r0
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	2b02      	cmp	r3, #2
 8006362:	d901      	bls.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e062      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006368:	4b35      	ldr	r3, [pc, #212]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006370:	2b00      	cmp	r3, #0
 8006372:	d0f0      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006374:	4b31      	ldr	r3, [pc, #196]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006378:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800637c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d02f      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	429a      	cmp	r2, r3
 8006390:	d028      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006392:	4b2a      	ldr	r3, [pc, #168]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800639a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800639c:	4b29      	ldr	r3, [pc, #164]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800639e:	2201      	movs	r2, #1
 80063a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80063a2:	4b28      	ldr	r3, [pc, #160]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80063a8:	4a24      	ldr	r2, [pc, #144]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80063ae:	4b23      	ldr	r3, [pc, #140]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d114      	bne.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80063ba:	f7fc fce9 	bl	8002d90 <HAL_GetTick>
 80063be:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063c0:	e00a      	b.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063c2:	f7fc fce5 	bl	8002d90 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d901      	bls.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e02a      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063d8:	4b18      	ldr	r3, [pc, #96]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d0ee      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063f0:	d10d      	bne.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80063f2:	4b12      	ldr	r3, [pc, #72]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006406:	490d      	ldr	r1, [pc, #52]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006408:	4313      	orrs	r3, r2
 800640a:	608b      	str	r3, [r1, #8]
 800640c:	e005      	b.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800640e:	4b0b      	ldr	r3, [pc, #44]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	4a0a      	ldr	r2, [pc, #40]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006414:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006418:	6093      	str	r3, [r2, #8]
 800641a:	4b08      	ldr	r3, [pc, #32]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800641c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006426:	4905      	ldr	r1, [pc, #20]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006428:	4313      	orrs	r3, r2
 800642a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3718      	adds	r7, #24
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	42470068 	.word	0x42470068
 800643c:	40023800 	.word	0x40023800
 8006440:	40007000 	.word	0x40007000
 8006444:	42470e40 	.word	0x42470e40

08006448 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006448:	b480      	push	{r7}
 800644a:	b087      	sub	sp, #28
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006450:	2300      	movs	r3, #0
 8006452:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006458:	2300      	movs	r3, #0
 800645a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800645c:	2300      	movs	r3, #0
 800645e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d13e      	bne.n	80064e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006466:	4b23      	ldr	r3, [pc, #140]	; (80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800646e:	60fb      	str	r3, [r7, #12]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d005      	beq.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d12f      	bne.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800647c:	4b1e      	ldr	r3, [pc, #120]	; (80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800647e:	617b      	str	r3, [r7, #20]
          break;
 8006480:	e02f      	b.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006482:	4b1c      	ldr	r3, [pc, #112]	; (80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800648a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800648e:	d108      	bne.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006490:	4b18      	ldr	r3, [pc, #96]	; (80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006498:	4a18      	ldr	r2, [pc, #96]	; (80064fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800649a:	fbb2 f3f3 	udiv	r3, r2, r3
 800649e:	613b      	str	r3, [r7, #16]
 80064a0:	e007      	b.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80064a2:	4b14      	ldr	r3, [pc, #80]	; (80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064aa:	4a15      	ldr	r2, [pc, #84]	; (8006500 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80064ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80064b2:	4b10      	ldr	r3, [pc, #64]	; (80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80064b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064b8:	099b      	lsrs	r3, r3, #6
 80064ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	fb02 f303 	mul.w	r3, r2, r3
 80064c4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80064c6:	4b0b      	ldr	r3, [pc, #44]	; (80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80064c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064cc:	0f1b      	lsrs	r3, r3, #28
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d8:	617b      	str	r3, [r7, #20]
          break;
 80064da:	e002      	b.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80064dc:	2300      	movs	r3, #0
 80064de:	617b      	str	r3, [r7, #20]
          break;
 80064e0:	bf00      	nop
        }
      }
      break;
 80064e2:	bf00      	nop
    }
  }
  return frequency;
 80064e4:	697b      	ldr	r3, [r7, #20]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	371c      	adds	r7, #28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	40023800 	.word	0x40023800
 80064f8:	00bb8000 	.word	0x00bb8000
 80064fc:	007a1200 	.word	0x007a1200
 8006500:	00f42400 	.word	0x00f42400

08006504 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e07b      	b.n	800660e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651a:	2b00      	cmp	r3, #0
 800651c:	d108      	bne.n	8006530 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006526:	d009      	beq.n	800653c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	61da      	str	r2, [r3, #28]
 800652e:	e005      	b.n	800653c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d106      	bne.n	800655c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7fa fa6c 	bl	8000a34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2202      	movs	r2, #2
 8006560:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006572:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006584:	431a      	orrs	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800658e:	431a      	orrs	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	431a      	orrs	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	431a      	orrs	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065ac:	431a      	orrs	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065b6:	431a      	orrs	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c0:	ea42 0103 	orr.w	r1, r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	0c1b      	lsrs	r3, r3, #16
 80065da:	f003 0104 	and.w	r1, r3, #4
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e2:	f003 0210 	and.w	r2, r3, #16
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	430a      	orrs	r2, r1
 80065ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	69da      	ldr	r2, [r3, #28]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b082      	sub	sp, #8
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e03f      	b.n	80066a8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	d106      	bne.n	8006642 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7fa fa5f 	bl	8000b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2224      	movs	r2, #36	; 0x24
 8006646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68da      	ldr	r2, [r3, #12]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006658:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f928 	bl	80068b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	691a      	ldr	r2, [r3, #16]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800666e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	695a      	ldr	r2, [r3, #20]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800667e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68da      	ldr	r2, [r3, #12]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800668e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2220      	movs	r2, #32
 800669a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2220      	movs	r2, #32
 80066a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3708      	adds	r7, #8
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b08a      	sub	sp, #40	; 0x28
 80066b4:	af02      	add	r7, sp, #8
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	603b      	str	r3, [r7, #0]
 80066bc:	4613      	mov	r3, r2
 80066be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80066c0:	2300      	movs	r3, #0
 80066c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b20      	cmp	r3, #32
 80066ce:	d17c      	bne.n	80067ca <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d002      	beq.n	80066dc <HAL_UART_Transmit+0x2c>
 80066d6:	88fb      	ldrh	r3, [r7, #6]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e075      	b.n	80067cc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d101      	bne.n	80066ee <HAL_UART_Transmit+0x3e>
 80066ea:	2302      	movs	r3, #2
 80066ec:	e06e      	b.n	80067cc <HAL_UART_Transmit+0x11c>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2221      	movs	r2, #33	; 0x21
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006704:	f7fc fb44 	bl	8002d90 <HAL_GetTick>
 8006708:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	88fa      	ldrh	r2, [r7, #6]
 800670e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	88fa      	ldrh	r2, [r7, #6]
 8006714:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800671e:	d108      	bne.n	8006732 <HAL_UART_Transmit+0x82>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d104      	bne.n	8006732 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006728:	2300      	movs	r3, #0
 800672a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	61bb      	str	r3, [r7, #24]
 8006730:	e003      	b.n	800673a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006736:	2300      	movs	r3, #0
 8006738:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006742:	e02a      	b.n	800679a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	2200      	movs	r2, #0
 800674c:	2180      	movs	r1, #128	; 0x80
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f000 f840 	bl	80067d4 <UART_WaitOnFlagUntilTimeout>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e036      	b.n	80067cc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10b      	bne.n	800677c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	881b      	ldrh	r3, [r3, #0]
 8006768:	461a      	mov	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006772:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	3302      	adds	r3, #2
 8006778:	61bb      	str	r3, [r7, #24]
 800677a:	e007      	b.n	800678c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	781a      	ldrb	r2, [r3, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	3301      	adds	r3, #1
 800678a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006790:	b29b      	uxth	r3, r3
 8006792:	3b01      	subs	r3, #1
 8006794:	b29a      	uxth	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800679e:	b29b      	uxth	r3, r3
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1cf      	bne.n	8006744 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	2200      	movs	r2, #0
 80067ac:	2140      	movs	r1, #64	; 0x40
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f000 f810 	bl	80067d4 <UART_WaitOnFlagUntilTimeout>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e006      	b.n	80067cc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2220      	movs	r2, #32
 80067c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80067c6:	2300      	movs	r3, #0
 80067c8:	e000      	b.n	80067cc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80067ca:	2302      	movs	r3, #2
  }
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3720      	adds	r7, #32
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b090      	sub	sp, #64	; 0x40
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	603b      	str	r3, [r7, #0]
 80067e0:	4613      	mov	r3, r2
 80067e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067e4:	e050      	b.n	8006888 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067ec:	d04c      	beq.n	8006888 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80067ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d007      	beq.n	8006804 <UART_WaitOnFlagUntilTimeout+0x30>
 80067f4:	f7fc facc 	bl	8002d90 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006800:	429a      	cmp	r2, r3
 8006802:	d241      	bcs.n	8006888 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	330c      	adds	r3, #12
 800680a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680e:	e853 3f00 	ldrex	r3, [r3]
 8006812:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006816:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800681a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	330c      	adds	r3, #12
 8006822:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006824:	637a      	str	r2, [r7, #52]	; 0x34
 8006826:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006828:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800682a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800682c:	e841 2300 	strex	r3, r2, [r1]
 8006830:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1e5      	bne.n	8006804 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	3314      	adds	r3, #20
 800683e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	e853 3f00 	ldrex	r3, [r3]
 8006846:	613b      	str	r3, [r7, #16]
   return(result);
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	f023 0301 	bic.w	r3, r3, #1
 800684e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	3314      	adds	r3, #20
 8006856:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006858:	623a      	str	r2, [r7, #32]
 800685a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685c:	69f9      	ldr	r1, [r7, #28]
 800685e:	6a3a      	ldr	r2, [r7, #32]
 8006860:	e841 2300 	strex	r3, r2, [r1]
 8006864:	61bb      	str	r3, [r7, #24]
   return(result);
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1e5      	bne.n	8006838 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2220      	movs	r2, #32
 8006870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2220      	movs	r2, #32
 8006878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e00f      	b.n	80068a8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	4013      	ands	r3, r2
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	429a      	cmp	r2, r3
 8006896:	bf0c      	ite	eq
 8006898:	2301      	moveq	r3, #1
 800689a:	2300      	movne	r3, #0
 800689c:	b2db      	uxtb	r3, r3
 800689e:	461a      	mov	r2, r3
 80068a0:	79fb      	ldrb	r3, [r7, #7]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d09f      	beq.n	80067e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3740      	adds	r7, #64	; 0x40
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068b4:	b0c0      	sub	sp, #256	; 0x100
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80068c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068cc:	68d9      	ldr	r1, [r3, #12]
 80068ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	ea40 0301 	orr.w	r3, r0, r1
 80068d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80068da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068de:	689a      	ldr	r2, [r3, #8]
 80068e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	431a      	orrs	r2, r3
 80068e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	431a      	orrs	r2, r3
 80068f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80068fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006908:	f021 010c 	bic.w	r1, r1, #12
 800690c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006916:	430b      	orrs	r3, r1
 8006918:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800691a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800692a:	6999      	ldr	r1, [r3, #24]
 800692c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	ea40 0301 	orr.w	r3, r0, r1
 8006936:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	4b8f      	ldr	r3, [pc, #572]	; (8006b7c <UART_SetConfig+0x2cc>)
 8006940:	429a      	cmp	r2, r3
 8006942:	d005      	beq.n	8006950 <UART_SetConfig+0xa0>
 8006944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	4b8d      	ldr	r3, [pc, #564]	; (8006b80 <UART_SetConfig+0x2d0>)
 800694c:	429a      	cmp	r2, r3
 800694e:	d104      	bne.n	800695a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006950:	f7ff fc84 	bl	800625c <HAL_RCC_GetPCLK2Freq>
 8006954:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006958:	e003      	b.n	8006962 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800695a:	f7ff fc6b 	bl	8006234 <HAL_RCC_GetPCLK1Freq>
 800695e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006966:	69db      	ldr	r3, [r3, #28]
 8006968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800696c:	f040 810c 	bne.w	8006b88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006970:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006974:	2200      	movs	r2, #0
 8006976:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800697a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800697e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006982:	4622      	mov	r2, r4
 8006984:	462b      	mov	r3, r5
 8006986:	1891      	adds	r1, r2, r2
 8006988:	65b9      	str	r1, [r7, #88]	; 0x58
 800698a:	415b      	adcs	r3, r3
 800698c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800698e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006992:	4621      	mov	r1, r4
 8006994:	eb12 0801 	adds.w	r8, r2, r1
 8006998:	4629      	mov	r1, r5
 800699a:	eb43 0901 	adc.w	r9, r3, r1
 800699e:	f04f 0200 	mov.w	r2, #0
 80069a2:	f04f 0300 	mov.w	r3, #0
 80069a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069b2:	4690      	mov	r8, r2
 80069b4:	4699      	mov	r9, r3
 80069b6:	4623      	mov	r3, r4
 80069b8:	eb18 0303 	adds.w	r3, r8, r3
 80069bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069c0:	462b      	mov	r3, r5
 80069c2:	eb49 0303 	adc.w	r3, r9, r3
 80069c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80069d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80069da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80069de:	460b      	mov	r3, r1
 80069e0:	18db      	adds	r3, r3, r3
 80069e2:	653b      	str	r3, [r7, #80]	; 0x50
 80069e4:	4613      	mov	r3, r2
 80069e6:	eb42 0303 	adc.w	r3, r2, r3
 80069ea:	657b      	str	r3, [r7, #84]	; 0x54
 80069ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80069f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80069f4:	f7fb ffba 	bl	800296c <__aeabi_uldivmod>
 80069f8:	4602      	mov	r2, r0
 80069fa:	460b      	mov	r3, r1
 80069fc:	4b61      	ldr	r3, [pc, #388]	; (8006b84 <UART_SetConfig+0x2d4>)
 80069fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006a02:	095b      	lsrs	r3, r3, #5
 8006a04:	011c      	lsls	r4, r3, #4
 8006a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006a14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006a18:	4642      	mov	r2, r8
 8006a1a:	464b      	mov	r3, r9
 8006a1c:	1891      	adds	r1, r2, r2
 8006a1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006a20:	415b      	adcs	r3, r3
 8006a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006a28:	4641      	mov	r1, r8
 8006a2a:	eb12 0a01 	adds.w	sl, r2, r1
 8006a2e:	4649      	mov	r1, r9
 8006a30:	eb43 0b01 	adc.w	fp, r3, r1
 8006a34:	f04f 0200 	mov.w	r2, #0
 8006a38:	f04f 0300 	mov.w	r3, #0
 8006a3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a48:	4692      	mov	sl, r2
 8006a4a:	469b      	mov	fp, r3
 8006a4c:	4643      	mov	r3, r8
 8006a4e:	eb1a 0303 	adds.w	r3, sl, r3
 8006a52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a56:	464b      	mov	r3, r9
 8006a58:	eb4b 0303 	adc.w	r3, fp, r3
 8006a5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006a70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006a74:	460b      	mov	r3, r1
 8006a76:	18db      	adds	r3, r3, r3
 8006a78:	643b      	str	r3, [r7, #64]	; 0x40
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	eb42 0303 	adc.w	r3, r2, r3
 8006a80:	647b      	str	r3, [r7, #68]	; 0x44
 8006a82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006a86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006a8a:	f7fb ff6f 	bl	800296c <__aeabi_uldivmod>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	460b      	mov	r3, r1
 8006a92:	4611      	mov	r1, r2
 8006a94:	4b3b      	ldr	r3, [pc, #236]	; (8006b84 <UART_SetConfig+0x2d4>)
 8006a96:	fba3 2301 	umull	r2, r3, r3, r1
 8006a9a:	095b      	lsrs	r3, r3, #5
 8006a9c:	2264      	movs	r2, #100	; 0x64
 8006a9e:	fb02 f303 	mul.w	r3, r2, r3
 8006aa2:	1acb      	subs	r3, r1, r3
 8006aa4:	00db      	lsls	r3, r3, #3
 8006aa6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006aaa:	4b36      	ldr	r3, [pc, #216]	; (8006b84 <UART_SetConfig+0x2d4>)
 8006aac:	fba3 2302 	umull	r2, r3, r3, r2
 8006ab0:	095b      	lsrs	r3, r3, #5
 8006ab2:	005b      	lsls	r3, r3, #1
 8006ab4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ab8:	441c      	add	r4, r3
 8006aba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ac4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006ac8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006acc:	4642      	mov	r2, r8
 8006ace:	464b      	mov	r3, r9
 8006ad0:	1891      	adds	r1, r2, r2
 8006ad2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ad4:	415b      	adcs	r3, r3
 8006ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ad8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006adc:	4641      	mov	r1, r8
 8006ade:	1851      	adds	r1, r2, r1
 8006ae0:	6339      	str	r1, [r7, #48]	; 0x30
 8006ae2:	4649      	mov	r1, r9
 8006ae4:	414b      	adcs	r3, r1
 8006ae6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ae8:	f04f 0200 	mov.w	r2, #0
 8006aec:	f04f 0300 	mov.w	r3, #0
 8006af0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006af4:	4659      	mov	r1, fp
 8006af6:	00cb      	lsls	r3, r1, #3
 8006af8:	4651      	mov	r1, sl
 8006afa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006afe:	4651      	mov	r1, sl
 8006b00:	00ca      	lsls	r2, r1, #3
 8006b02:	4610      	mov	r0, r2
 8006b04:	4619      	mov	r1, r3
 8006b06:	4603      	mov	r3, r0
 8006b08:	4642      	mov	r2, r8
 8006b0a:	189b      	adds	r3, r3, r2
 8006b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b10:	464b      	mov	r3, r9
 8006b12:	460a      	mov	r2, r1
 8006b14:	eb42 0303 	adc.w	r3, r2, r3
 8006b18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006b2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006b30:	460b      	mov	r3, r1
 8006b32:	18db      	adds	r3, r3, r3
 8006b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b36:	4613      	mov	r3, r2
 8006b38:	eb42 0303 	adc.w	r3, r2, r3
 8006b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006b46:	f7fb ff11 	bl	800296c <__aeabi_uldivmod>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	4b0d      	ldr	r3, [pc, #52]	; (8006b84 <UART_SetConfig+0x2d4>)
 8006b50:	fba3 1302 	umull	r1, r3, r3, r2
 8006b54:	095b      	lsrs	r3, r3, #5
 8006b56:	2164      	movs	r1, #100	; 0x64
 8006b58:	fb01 f303 	mul.w	r3, r1, r3
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	00db      	lsls	r3, r3, #3
 8006b60:	3332      	adds	r3, #50	; 0x32
 8006b62:	4a08      	ldr	r2, [pc, #32]	; (8006b84 <UART_SetConfig+0x2d4>)
 8006b64:	fba2 2303 	umull	r2, r3, r2, r3
 8006b68:	095b      	lsrs	r3, r3, #5
 8006b6a:	f003 0207 	and.w	r2, r3, #7
 8006b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4422      	add	r2, r4
 8006b76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b78:	e105      	b.n	8006d86 <UART_SetConfig+0x4d6>
 8006b7a:	bf00      	nop
 8006b7c:	40011000 	.word	0x40011000
 8006b80:	40011400 	.word	0x40011400
 8006b84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006b96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006b9a:	4642      	mov	r2, r8
 8006b9c:	464b      	mov	r3, r9
 8006b9e:	1891      	adds	r1, r2, r2
 8006ba0:	6239      	str	r1, [r7, #32]
 8006ba2:	415b      	adcs	r3, r3
 8006ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006baa:	4641      	mov	r1, r8
 8006bac:	1854      	adds	r4, r2, r1
 8006bae:	4649      	mov	r1, r9
 8006bb0:	eb43 0501 	adc.w	r5, r3, r1
 8006bb4:	f04f 0200 	mov.w	r2, #0
 8006bb8:	f04f 0300 	mov.w	r3, #0
 8006bbc:	00eb      	lsls	r3, r5, #3
 8006bbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bc2:	00e2      	lsls	r2, r4, #3
 8006bc4:	4614      	mov	r4, r2
 8006bc6:	461d      	mov	r5, r3
 8006bc8:	4643      	mov	r3, r8
 8006bca:	18e3      	adds	r3, r4, r3
 8006bcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006bd0:	464b      	mov	r3, r9
 8006bd2:	eb45 0303 	adc.w	r3, r5, r3
 8006bd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006be6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006bea:	f04f 0200 	mov.w	r2, #0
 8006bee:	f04f 0300 	mov.w	r3, #0
 8006bf2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006bf6:	4629      	mov	r1, r5
 8006bf8:	008b      	lsls	r3, r1, #2
 8006bfa:	4621      	mov	r1, r4
 8006bfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c00:	4621      	mov	r1, r4
 8006c02:	008a      	lsls	r2, r1, #2
 8006c04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006c08:	f7fb feb0 	bl	800296c <__aeabi_uldivmod>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	460b      	mov	r3, r1
 8006c10:	4b60      	ldr	r3, [pc, #384]	; (8006d94 <UART_SetConfig+0x4e4>)
 8006c12:	fba3 2302 	umull	r2, r3, r3, r2
 8006c16:	095b      	lsrs	r3, r3, #5
 8006c18:	011c      	lsls	r4, r3, #4
 8006c1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006c28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006c2c:	4642      	mov	r2, r8
 8006c2e:	464b      	mov	r3, r9
 8006c30:	1891      	adds	r1, r2, r2
 8006c32:	61b9      	str	r1, [r7, #24]
 8006c34:	415b      	adcs	r3, r3
 8006c36:	61fb      	str	r3, [r7, #28]
 8006c38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c3c:	4641      	mov	r1, r8
 8006c3e:	1851      	adds	r1, r2, r1
 8006c40:	6139      	str	r1, [r7, #16]
 8006c42:	4649      	mov	r1, r9
 8006c44:	414b      	adcs	r3, r1
 8006c46:	617b      	str	r3, [r7, #20]
 8006c48:	f04f 0200 	mov.w	r2, #0
 8006c4c:	f04f 0300 	mov.w	r3, #0
 8006c50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c54:	4659      	mov	r1, fp
 8006c56:	00cb      	lsls	r3, r1, #3
 8006c58:	4651      	mov	r1, sl
 8006c5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c5e:	4651      	mov	r1, sl
 8006c60:	00ca      	lsls	r2, r1, #3
 8006c62:	4610      	mov	r0, r2
 8006c64:	4619      	mov	r1, r3
 8006c66:	4603      	mov	r3, r0
 8006c68:	4642      	mov	r2, r8
 8006c6a:	189b      	adds	r3, r3, r2
 8006c6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c70:	464b      	mov	r3, r9
 8006c72:	460a      	mov	r2, r1
 8006c74:	eb42 0303 	adc.w	r3, r2, r3
 8006c78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c86:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006c88:	f04f 0200 	mov.w	r2, #0
 8006c8c:	f04f 0300 	mov.w	r3, #0
 8006c90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006c94:	4649      	mov	r1, r9
 8006c96:	008b      	lsls	r3, r1, #2
 8006c98:	4641      	mov	r1, r8
 8006c9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c9e:	4641      	mov	r1, r8
 8006ca0:	008a      	lsls	r2, r1, #2
 8006ca2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006ca6:	f7fb fe61 	bl	800296c <__aeabi_uldivmod>
 8006caa:	4602      	mov	r2, r0
 8006cac:	460b      	mov	r3, r1
 8006cae:	4b39      	ldr	r3, [pc, #228]	; (8006d94 <UART_SetConfig+0x4e4>)
 8006cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8006cb4:	095b      	lsrs	r3, r3, #5
 8006cb6:	2164      	movs	r1, #100	; 0x64
 8006cb8:	fb01 f303 	mul.w	r3, r1, r3
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	011b      	lsls	r3, r3, #4
 8006cc0:	3332      	adds	r3, #50	; 0x32
 8006cc2:	4a34      	ldr	r2, [pc, #208]	; (8006d94 <UART_SetConfig+0x4e4>)
 8006cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc8:	095b      	lsrs	r3, r3, #5
 8006cca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cce:	441c      	add	r4, r3
 8006cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	673b      	str	r3, [r7, #112]	; 0x70
 8006cd8:	677a      	str	r2, [r7, #116]	; 0x74
 8006cda:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006cde:	4642      	mov	r2, r8
 8006ce0:	464b      	mov	r3, r9
 8006ce2:	1891      	adds	r1, r2, r2
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	415b      	adcs	r3, r3
 8006ce8:	60fb      	str	r3, [r7, #12]
 8006cea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006cee:	4641      	mov	r1, r8
 8006cf0:	1851      	adds	r1, r2, r1
 8006cf2:	6039      	str	r1, [r7, #0]
 8006cf4:	4649      	mov	r1, r9
 8006cf6:	414b      	adcs	r3, r1
 8006cf8:	607b      	str	r3, [r7, #4]
 8006cfa:	f04f 0200 	mov.w	r2, #0
 8006cfe:	f04f 0300 	mov.w	r3, #0
 8006d02:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d06:	4659      	mov	r1, fp
 8006d08:	00cb      	lsls	r3, r1, #3
 8006d0a:	4651      	mov	r1, sl
 8006d0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d10:	4651      	mov	r1, sl
 8006d12:	00ca      	lsls	r2, r1, #3
 8006d14:	4610      	mov	r0, r2
 8006d16:	4619      	mov	r1, r3
 8006d18:	4603      	mov	r3, r0
 8006d1a:	4642      	mov	r2, r8
 8006d1c:	189b      	adds	r3, r3, r2
 8006d1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d20:	464b      	mov	r3, r9
 8006d22:	460a      	mov	r2, r1
 8006d24:	eb42 0303 	adc.w	r3, r2, r3
 8006d28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	663b      	str	r3, [r7, #96]	; 0x60
 8006d34:	667a      	str	r2, [r7, #100]	; 0x64
 8006d36:	f04f 0200 	mov.w	r2, #0
 8006d3a:	f04f 0300 	mov.w	r3, #0
 8006d3e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006d42:	4649      	mov	r1, r9
 8006d44:	008b      	lsls	r3, r1, #2
 8006d46:	4641      	mov	r1, r8
 8006d48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d4c:	4641      	mov	r1, r8
 8006d4e:	008a      	lsls	r2, r1, #2
 8006d50:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006d54:	f7fb fe0a 	bl	800296c <__aeabi_uldivmod>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	4b0d      	ldr	r3, [pc, #52]	; (8006d94 <UART_SetConfig+0x4e4>)
 8006d5e:	fba3 1302 	umull	r1, r3, r3, r2
 8006d62:	095b      	lsrs	r3, r3, #5
 8006d64:	2164      	movs	r1, #100	; 0x64
 8006d66:	fb01 f303 	mul.w	r3, r1, r3
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	011b      	lsls	r3, r3, #4
 8006d6e:	3332      	adds	r3, #50	; 0x32
 8006d70:	4a08      	ldr	r2, [pc, #32]	; (8006d94 <UART_SetConfig+0x4e4>)
 8006d72:	fba2 2303 	umull	r2, r3, r2, r3
 8006d76:	095b      	lsrs	r3, r3, #5
 8006d78:	f003 020f 	and.w	r2, r3, #15
 8006d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4422      	add	r2, r4
 8006d84:	609a      	str	r2, [r3, #8]
}
 8006d86:	bf00      	nop
 8006d88:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d92:	bf00      	nop
 8006d94:	51eb851f 	.word	0x51eb851f

08006d98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d98:	b084      	sub	sp, #16
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b084      	sub	sp, #16
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	f107 001c 	add.w	r0, r7, #28
 8006da6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d122      	bne.n	8006df6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006dc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d105      	bne.n	8006dea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f9c0 	bl	8007170 <USB_CoreReset>
 8006df0:	4603      	mov	r3, r0
 8006df2:	73fb      	strb	r3, [r7, #15]
 8006df4:	e01a      	b.n	8006e2c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f9b4 	bl	8007170 <USB_CoreReset>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d106      	bne.n	8006e20 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	639a      	str	r2, [r3, #56]	; 0x38
 8006e1e:	e005      	b.n	8006e2c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d10b      	bne.n	8006e4a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	f043 0206 	orr.w	r2, r3, #6
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f043 0220 	orr.w	r2, r3, #32
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e56:	b004      	add	sp, #16
 8006e58:	4770      	bx	lr

08006e5a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b083      	sub	sp, #12
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f043 0201 	orr.w	r2, r3, #1
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f023 0201 	bic.w	r2, r3, #1
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr

08006e9e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b084      	sub	sp, #16
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006eba:	78fb      	ldrb	r3, [r7, #3]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d115      	bne.n	8006eec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ecc:	2001      	movs	r0, #1
 8006ece:	f7fb ff6b 	bl	8002da8 <HAL_Delay>
      ms++;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f93a 	bl	8007152 <USB_GetMode>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d01e      	beq.n	8006f22 <USB_SetCurrentMode+0x84>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2b31      	cmp	r3, #49	; 0x31
 8006ee8:	d9f0      	bls.n	8006ecc <USB_SetCurrentMode+0x2e>
 8006eea:	e01a      	b.n	8006f22 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006eec:	78fb      	ldrb	r3, [r7, #3]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d115      	bne.n	8006f1e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006efe:	2001      	movs	r0, #1
 8006f00:	f7fb ff52 	bl	8002da8 <HAL_Delay>
      ms++;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	3301      	adds	r3, #1
 8006f08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f921 	bl	8007152 <USB_GetMode>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d005      	beq.n	8006f22 <USB_SetCurrentMode+0x84>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2b31      	cmp	r3, #49	; 0x31
 8006f1a:	d9f0      	bls.n	8006efe <USB_SetCurrentMode+0x60>
 8006f1c:	e001      	b.n	8006f22 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e005      	b.n	8006f2e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2b32      	cmp	r3, #50	; 0x32
 8006f26:	d101      	bne.n	8006f2c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e000      	b.n	8006f2e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
	...

08006f38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f42:	2300      	movs	r3, #0
 8006f44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	4a13      	ldr	r2, [pc, #76]	; (8006f9c <USB_FlushTxFifo+0x64>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d901      	bls.n	8006f58 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e01b      	b.n	8006f90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	daf2      	bge.n	8006f46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	019b      	lsls	r3, r3, #6
 8006f68:	f043 0220 	orr.w	r2, r3, #32
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	3301      	adds	r3, #1
 8006f74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	4a08      	ldr	r2, [pc, #32]	; (8006f9c <USB_FlushTxFifo+0x64>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d901      	bls.n	8006f82 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e006      	b.n	8006f90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	f003 0320 	and.w	r3, r3, #32
 8006f8a:	2b20      	cmp	r3, #32
 8006f8c:	d0f0      	beq.n	8006f70 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr
 8006f9c:	00030d40 	.word	0x00030d40

08006fa0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	4a11      	ldr	r2, [pc, #68]	; (8006ffc <USB_FlushRxFifo+0x5c>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d901      	bls.n	8006fbe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e018      	b.n	8006ff0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	daf2      	bge.n	8006fac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2210      	movs	r2, #16
 8006fce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	4a08      	ldr	r2, [pc, #32]	; (8006ffc <USB_FlushRxFifo+0x5c>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d901      	bls.n	8006fe2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e006      	b.n	8006ff0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	f003 0310 	and.w	r3, r3, #16
 8006fea:	2b10      	cmp	r3, #16
 8006fec:	d0f0      	beq.n	8006fd0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	00030d40 	.word	0x00030d40

08007000 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007000:	b480      	push	{r7}
 8007002:	b089      	sub	sp, #36	; 0x24
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	4611      	mov	r1, r2
 800700c:	461a      	mov	r2, r3
 800700e:	460b      	mov	r3, r1
 8007010:	71fb      	strb	r3, [r7, #7]
 8007012:	4613      	mov	r3, r2
 8007014:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800701e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007022:	2b00      	cmp	r3, #0
 8007024:	d123      	bne.n	800706e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007026:	88bb      	ldrh	r3, [r7, #4]
 8007028:	3303      	adds	r3, #3
 800702a:	089b      	lsrs	r3, r3, #2
 800702c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800702e:	2300      	movs	r3, #0
 8007030:	61bb      	str	r3, [r7, #24]
 8007032:	e018      	b.n	8007066 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007034:	79fb      	ldrb	r3, [r7, #7]
 8007036:	031a      	lsls	r2, r3, #12
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	4413      	add	r3, r2
 800703c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007040:	461a      	mov	r2, r3
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	3301      	adds	r3, #1
 800704c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	3301      	adds	r3, #1
 8007052:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	3301      	adds	r3, #1
 8007058:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	3301      	adds	r3, #1
 800705e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	3301      	adds	r3, #1
 8007064:	61bb      	str	r3, [r7, #24]
 8007066:	69ba      	ldr	r2, [r7, #24]
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	429a      	cmp	r2, r3
 800706c:	d3e2      	bcc.n	8007034 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3724      	adds	r7, #36	; 0x24
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800707c:	b480      	push	{r7}
 800707e:	b08b      	sub	sp, #44	; 0x2c
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	4613      	mov	r3, r2
 8007088:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007092:	88fb      	ldrh	r3, [r7, #6]
 8007094:	089b      	lsrs	r3, r3, #2
 8007096:	b29b      	uxth	r3, r3
 8007098:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800709a:	88fb      	ldrh	r3, [r7, #6]
 800709c:	f003 0303 	and.w	r3, r3, #3
 80070a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80070a2:	2300      	movs	r3, #0
 80070a4:	623b      	str	r3, [r7, #32]
 80070a6:	e014      	b.n	80070d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	3301      	adds	r3, #1
 80070b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80070ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070bc:	3301      	adds	r3, #1
 80070be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	3301      	adds	r3, #1
 80070c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80070c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c8:	3301      	adds	r3, #1
 80070ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	3301      	adds	r3, #1
 80070d0:	623b      	str	r3, [r7, #32]
 80070d2:	6a3a      	ldr	r2, [r7, #32]
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d3e6      	bcc.n	80070a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80070da:	8bfb      	ldrh	r3, [r7, #30]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d01e      	beq.n	800711e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80070e0:	2300      	movs	r3, #0
 80070e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ea:	461a      	mov	r2, r3
 80070ec:	f107 0310 	add.w	r3, r7, #16
 80070f0:	6812      	ldr	r2, [r2, #0]
 80070f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	6a3b      	ldr	r3, [r7, #32]
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	00db      	lsls	r3, r3, #3
 80070fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007100:	b2da      	uxtb	r2, r3
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	701a      	strb	r2, [r3, #0]
      i++;
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	3301      	adds	r3, #1
 800710a:	623b      	str	r3, [r7, #32]
      pDest++;
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710e:	3301      	adds	r3, #1
 8007110:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007112:	8bfb      	ldrh	r3, [r7, #30]
 8007114:	3b01      	subs	r3, #1
 8007116:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007118:	8bfb      	ldrh	r3, [r7, #30]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1ea      	bne.n	80070f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800711e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007120:	4618      	mov	r0, r3
 8007122:	372c      	adds	r7, #44	; 0x2c
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	4013      	ands	r3, r2
 8007142:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007144:	68fb      	ldr	r3, [r7, #12]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3714      	adds	r7, #20
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007152:	b480      	push	{r7}
 8007154:	b083      	sub	sp, #12
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	f003 0301 	and.w	r3, r3, #1
}
 8007162:	4618      	mov	r0, r3
 8007164:	370c      	adds	r7, #12
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
	...

08007170 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	3301      	adds	r3, #1
 8007180:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	4a13      	ldr	r2, [pc, #76]	; (80071d4 <USB_CoreReset+0x64>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d901      	bls.n	800718e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e01b      	b.n	80071c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	2b00      	cmp	r3, #0
 8007194:	daf2      	bge.n	800717c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007196:	2300      	movs	r3, #0
 8007198:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	f043 0201 	orr.w	r2, r3, #1
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	3301      	adds	r3, #1
 80071aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	4a09      	ldr	r2, [pc, #36]	; (80071d4 <USB_CoreReset+0x64>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d901      	bls.n	80071b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e006      	b.n	80071c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d0f0      	beq.n	80071a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	00030d40 	.word	0x00030d40

080071d8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80071d8:	b084      	sub	sp, #16
 80071da:	b580      	push	{r7, lr}
 80071dc:	b086      	sub	sp, #24
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80071e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071f8:	461a      	mov	r2, r3
 80071fa:	2300      	movs	r3, #0
 80071fc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007202:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800722a:	2b00      	cmp	r3, #0
 800722c:	d018      	beq.n	8007260 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800722e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007230:	2b01      	cmp	r3, #1
 8007232:	d10a      	bne.n	800724a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007242:	f043 0304 	orr.w	r3, r3, #4
 8007246:	6013      	str	r3, [r2, #0]
 8007248:	e014      	b.n	8007274 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007258:	f023 0304 	bic.w	r3, r3, #4
 800725c:	6013      	str	r3, [r2, #0]
 800725e:	e009      	b.n	8007274 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800726e:	f023 0304 	bic.w	r3, r3, #4
 8007272:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007274:	2110      	movs	r1, #16
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f7ff fe5e 	bl	8006f38 <USB_FlushTxFifo>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d001      	beq.n	8007286 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f7ff fe8a 	bl	8006fa0 <USB_FlushRxFifo>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d001      	beq.n	8007296 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007296:	2300      	movs	r3, #0
 8007298:	613b      	str	r3, [r7, #16]
 800729a:	e015      	b.n	80072c8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072a8:	461a      	mov	r2, r3
 80072aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072ae:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	015a      	lsls	r2, r3, #5
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072bc:	461a      	mov	r2, r3
 80072be:	2300      	movs	r3, #0
 80072c0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	3301      	adds	r3, #1
 80072c6:	613b      	str	r3, [r7, #16]
 80072c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d3e5      	bcc.n	800729c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072dc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00b      	beq.n	8007302 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072f0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a13      	ldr	r2, [pc, #76]	; (8007344 <USB_HostInit+0x16c>)
 80072f6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a13      	ldr	r2, [pc, #76]	; (8007348 <USB_HostInit+0x170>)
 80072fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007300:	e009      	b.n	8007316 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2280      	movs	r2, #128	; 0x80
 8007306:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a10      	ldr	r2, [pc, #64]	; (800734c <USB_HostInit+0x174>)
 800730c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a0f      	ldr	r2, [pc, #60]	; (8007350 <USB_HostInit+0x178>)
 8007312:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007318:	2b00      	cmp	r3, #0
 800731a:	d105      	bne.n	8007328 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	f043 0210 	orr.w	r2, r3, #16
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	699a      	ldr	r2, [r3, #24]
 800732c:	4b09      	ldr	r3, [pc, #36]	; (8007354 <USB_HostInit+0x17c>)
 800732e:	4313      	orrs	r3, r2
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007334:	7dfb      	ldrb	r3, [r7, #23]
}
 8007336:	4618      	mov	r0, r3
 8007338:	3718      	adds	r7, #24
 800733a:	46bd      	mov	sp, r7
 800733c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007340:	b004      	add	sp, #16
 8007342:	4770      	bx	lr
 8007344:	01000200 	.word	0x01000200
 8007348:	00e00300 	.word	0x00e00300
 800734c:	00600080 	.word	0x00600080
 8007350:	004000e0 	.word	0x004000e0
 8007354:	a3200008 	.word	0xa3200008

08007358 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	460b      	mov	r3, r1
 8007362:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007376:	f023 0303 	bic.w	r3, r3, #3
 800737a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	78fb      	ldrb	r3, [r7, #3]
 8007386:	f003 0303 	and.w	r3, r3, #3
 800738a:	68f9      	ldr	r1, [r7, #12]
 800738c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007390:	4313      	orrs	r3, r2
 8007392:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007394:	78fb      	ldrb	r3, [r7, #3]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d107      	bne.n	80073aa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073a0:	461a      	mov	r2, r3
 80073a2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80073a6:	6053      	str	r3, [r2, #4]
 80073a8:	e009      	b.n	80073be <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80073aa:	78fb      	ldrb	r3, [r7, #3]
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d106      	bne.n	80073be <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073b6:	461a      	mov	r2, r3
 80073b8:	f241 7370 	movw	r3, #6000	; 0x1770
 80073bc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80073d8:	2300      	movs	r3, #0
 80073da:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80073ec:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80073f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073fa:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80073fc:	2064      	movs	r0, #100	; 0x64
 80073fe:	f7fb fcd3 	bl	8002da8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800740a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800740e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007410:	200a      	movs	r0, #10
 8007412:	f7fb fcc9 	bl	8002da8 <HAL_Delay>

  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	460b      	mov	r3, r1
 800742a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007430:	2300      	movs	r3, #0
 8007432:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007444:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800744c:	2b00      	cmp	r3, #0
 800744e:	d109      	bne.n	8007464 <USB_DriveVbus+0x44>
 8007450:	78fb      	ldrb	r3, [r7, #3]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d106      	bne.n	8007464 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800745e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007462:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800746a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800746e:	d109      	bne.n	8007484 <USB_DriveVbus+0x64>
 8007470:	78fb      	ldrb	r3, [r7, #3]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d106      	bne.n	8007484 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800747e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007482:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3714      	adds	r7, #20
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr

08007492 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007492:	b480      	push	{r7}
 8007494:	b085      	sub	sp, #20
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	0c5b      	lsrs	r3, r3, #17
 80074b0:	f003 0303 	and.w	r3, r3, #3
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3714      	adds	r7, #20
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	b29b      	uxth	r3, r3
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
	...

080074e4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b088      	sub	sp, #32
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	4608      	mov	r0, r1
 80074ee:	4611      	mov	r1, r2
 80074f0:	461a      	mov	r2, r3
 80074f2:	4603      	mov	r3, r0
 80074f4:	70fb      	strb	r3, [r7, #3]
 80074f6:	460b      	mov	r3, r1
 80074f8:	70bb      	strb	r3, [r7, #2]
 80074fa:	4613      	mov	r3, r2
 80074fc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80074fe:	2300      	movs	r3, #0
 8007500:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007506:	78fb      	ldrb	r3, [r7, #3]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	4413      	add	r3, r2
 800750e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007512:	461a      	mov	r2, r3
 8007514:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007518:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800751a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800751e:	2b03      	cmp	r3, #3
 8007520:	d87e      	bhi.n	8007620 <USB_HC_Init+0x13c>
 8007522:	a201      	add	r2, pc, #4	; (adr r2, 8007528 <USB_HC_Init+0x44>)
 8007524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007528:	08007539 	.word	0x08007539
 800752c:	080075e3 	.word	0x080075e3
 8007530:	08007539 	.word	0x08007539
 8007534:	080075a5 	.word	0x080075a5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007538:	78fb      	ldrb	r3, [r7, #3]
 800753a:	015a      	lsls	r2, r3, #5
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	4413      	add	r3, r2
 8007540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007544:	461a      	mov	r2, r3
 8007546:	f240 439d 	movw	r3, #1181	; 0x49d
 800754a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800754c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007550:	2b00      	cmp	r3, #0
 8007552:	da10      	bge.n	8007576 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007554:	78fb      	ldrb	r3, [r7, #3]
 8007556:	015a      	lsls	r2, r3, #5
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	4413      	add	r3, r2
 800755c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	78fa      	ldrb	r2, [r7, #3]
 8007564:	0151      	lsls	r1, r2, #5
 8007566:	693a      	ldr	r2, [r7, #16]
 8007568:	440a      	add	r2, r1
 800756a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800756e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007572:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007574:	e057      	b.n	8007626 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800757a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800757e:	2b00      	cmp	r3, #0
 8007580:	d051      	beq.n	8007626 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007582:	78fb      	ldrb	r3, [r7, #3]
 8007584:	015a      	lsls	r2, r3, #5
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	4413      	add	r3, r2
 800758a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	78fa      	ldrb	r2, [r7, #3]
 8007592:	0151      	lsls	r1, r2, #5
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	440a      	add	r2, r1
 8007598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800759c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80075a0:	60d3      	str	r3, [r2, #12]
      break;
 80075a2:	e040      	b.n	8007626 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80075a4:	78fb      	ldrb	r3, [r7, #3]
 80075a6:	015a      	lsls	r2, r3, #5
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	4413      	add	r3, r2
 80075ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075b0:	461a      	mov	r2, r3
 80075b2:	f240 639d 	movw	r3, #1693	; 0x69d
 80075b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80075b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	da34      	bge.n	800762a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80075c0:	78fb      	ldrb	r3, [r7, #3]
 80075c2:	015a      	lsls	r2, r3, #5
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	4413      	add	r3, r2
 80075c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	78fa      	ldrb	r2, [r7, #3]
 80075d0:	0151      	lsls	r1, r2, #5
 80075d2:	693a      	ldr	r2, [r7, #16]
 80075d4:	440a      	add	r2, r1
 80075d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075de:	60d3      	str	r3, [r2, #12]
      }

      break;
 80075e0:	e023      	b.n	800762a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80075e2:	78fb      	ldrb	r3, [r7, #3]
 80075e4:	015a      	lsls	r2, r3, #5
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	4413      	add	r3, r2
 80075ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075ee:	461a      	mov	r2, r3
 80075f0:	f240 2325 	movw	r3, #549	; 0x225
 80075f4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80075f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	da17      	bge.n	800762e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80075fe:	78fb      	ldrb	r3, [r7, #3]
 8007600:	015a      	lsls	r2, r3, #5
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	4413      	add	r3, r2
 8007606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	78fa      	ldrb	r2, [r7, #3]
 800760e:	0151      	lsls	r1, r2, #5
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	440a      	add	r2, r1
 8007614:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007618:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800761c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800761e:	e006      	b.n	800762e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	77fb      	strb	r3, [r7, #31]
      break;
 8007624:	e004      	b.n	8007630 <USB_HC_Init+0x14c>
      break;
 8007626:	bf00      	nop
 8007628:	e002      	b.n	8007630 <USB_HC_Init+0x14c>
      break;
 800762a:	bf00      	nop
 800762c:	e000      	b.n	8007630 <USB_HC_Init+0x14c>
      break;
 800762e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007630:	78fb      	ldrb	r3, [r7, #3]
 8007632:	015a      	lsls	r2, r3, #5
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	4413      	add	r3, r2
 8007638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	78fa      	ldrb	r2, [r7, #3]
 8007640:	0151      	lsls	r1, r2, #5
 8007642:	693a      	ldr	r2, [r7, #16]
 8007644:	440a      	add	r2, r1
 8007646:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800764a:	f043 0302 	orr.w	r3, r3, #2
 800764e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007656:	699a      	ldr	r2, [r3, #24]
 8007658:	78fb      	ldrb	r3, [r7, #3]
 800765a:	f003 030f 	and.w	r3, r3, #15
 800765e:	2101      	movs	r1, #1
 8007660:	fa01 f303 	lsl.w	r3, r1, r3
 8007664:	6939      	ldr	r1, [r7, #16]
 8007666:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800766a:	4313      	orrs	r3, r2
 800766c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800767a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800767e:	2b00      	cmp	r3, #0
 8007680:	da03      	bge.n	800768a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007686:	61bb      	str	r3, [r7, #24]
 8007688:	e001      	b.n	800768e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800768a:	2300      	movs	r3, #0
 800768c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7ff feff 	bl	8007492 <USB_GetHostSpeed>
 8007694:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007696:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800769a:	2b02      	cmp	r3, #2
 800769c:	d106      	bne.n	80076ac <USB_HC_Init+0x1c8>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d003      	beq.n	80076ac <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80076a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80076a8:	617b      	str	r3, [r7, #20]
 80076aa:	e001      	b.n	80076b0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80076ac:	2300      	movs	r3, #0
 80076ae:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80076b0:	787b      	ldrb	r3, [r7, #1]
 80076b2:	059b      	lsls	r3, r3, #22
 80076b4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80076b8:	78bb      	ldrb	r3, [r7, #2]
 80076ba:	02db      	lsls	r3, r3, #11
 80076bc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80076c0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80076c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80076c6:	049b      	lsls	r3, r3, #18
 80076c8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80076cc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80076ce:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80076d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80076d4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80076da:	78fb      	ldrb	r3, [r7, #3]
 80076dc:	0159      	lsls	r1, r3, #5
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	440b      	add	r3, r1
 80076e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076e6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80076ec:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80076ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80076f2:	2b03      	cmp	r3, #3
 80076f4:	d003      	beq.n	80076fe <USB_HC_Init+0x21a>
 80076f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d10f      	bne.n	800771e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80076fe:	78fb      	ldrb	r3, [r7, #3]
 8007700:	015a      	lsls	r2, r3, #5
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	4413      	add	r3, r2
 8007706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	78fa      	ldrb	r2, [r7, #3]
 800770e:	0151      	lsls	r1, r2, #5
 8007710:	693a      	ldr	r2, [r7, #16]
 8007712:	440a      	add	r2, r1
 8007714:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007718:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800771c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800771e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3720      	adds	r7, #32
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b08c      	sub	sp, #48	; 0x30
 800772c:	af02      	add	r7, sp, #8
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	4613      	mov	r3, r2
 8007734:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	785b      	ldrb	r3, [r3, #1]
 800773e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007740:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007744:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800774a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800774e:	2b00      	cmp	r3, #0
 8007750:	d02d      	beq.n	80077ae <USB_HC_StartXfer+0x86>
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	791b      	ldrb	r3, [r3, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d129      	bne.n	80077ae <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800775a:	79fb      	ldrb	r3, [r7, #7]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d117      	bne.n	8007790 <USB_HC_StartXfer+0x68>
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	79db      	ldrb	r3, [r3, #7]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d003      	beq.n	8007770 <USB_HC_StartXfer+0x48>
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	79db      	ldrb	r3, [r3, #7]
 800776c:	2b02      	cmp	r3, #2
 800776e:	d10f      	bne.n	8007790 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	6a3b      	ldr	r3, [r7, #32]
 8007776:	4413      	add	r3, r2
 8007778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	69fa      	ldr	r2, [r7, #28]
 8007780:	0151      	lsls	r1, r2, #5
 8007782:	6a3a      	ldr	r2, [r7, #32]
 8007784:	440a      	add	r2, r1
 8007786:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800778a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800778e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007790:	79fb      	ldrb	r3, [r7, #7]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d10b      	bne.n	80077ae <USB_HC_StartXfer+0x86>
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	795b      	ldrb	r3, [r3, #5]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d107      	bne.n	80077ae <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	785b      	ldrb	r3, [r3, #1]
 80077a2:	4619      	mov	r1, r3
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f000 fa0f 	bl	8007bc8 <USB_DoPing>
      return HAL_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	e0f8      	b.n	80079a0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	695b      	ldr	r3, [r3, #20]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d018      	beq.n	80077e8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	8912      	ldrh	r2, [r2, #8]
 80077be:	4413      	add	r3, r2
 80077c0:	3b01      	subs	r3, #1
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	8912      	ldrh	r2, [r2, #8]
 80077c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80077ca:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80077cc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80077ce:	8b7b      	ldrh	r3, [r7, #26]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d90b      	bls.n	80077ec <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80077d4:	8b7b      	ldrh	r3, [r7, #26]
 80077d6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80077d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	8912      	ldrh	r2, [r2, #8]
 80077de:	fb03 f202 	mul.w	r2, r3, r2
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	611a      	str	r2, [r3, #16]
 80077e6:	e001      	b.n	80077ec <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80077e8:	2301      	movs	r3, #1
 80077ea:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	78db      	ldrb	r3, [r3, #3]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d007      	beq.n	8007804 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80077f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	8912      	ldrh	r2, [r2, #8]
 80077fa:	fb03 f202 	mul.w	r2, r3, r2
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	611a      	str	r2, [r3, #16]
 8007802:	e003      	b.n	800780c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	695a      	ldr	r2, [r3, #20]
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007814:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007816:	04d9      	lsls	r1, r3, #19
 8007818:	4b63      	ldr	r3, [pc, #396]	; (80079a8 <USB_HC_StartXfer+0x280>)
 800781a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800781c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	7a9b      	ldrb	r3, [r3, #10]
 8007822:	075b      	lsls	r3, r3, #29
 8007824:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007828:	69f9      	ldr	r1, [r7, #28]
 800782a:	0148      	lsls	r0, r1, #5
 800782c:	6a39      	ldr	r1, [r7, #32]
 800782e:	4401      	add	r1, r0
 8007830:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007834:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007836:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007838:	79fb      	ldrb	r3, [r7, #7]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d009      	beq.n	8007852 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	68d9      	ldr	r1, [r3, #12]
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	015a      	lsls	r2, r3, #5
 8007846:	6a3b      	ldr	r3, [r7, #32]
 8007848:	4413      	add	r3, r2
 800784a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800784e:	460a      	mov	r2, r1
 8007850:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007852:	6a3b      	ldr	r3, [r7, #32]
 8007854:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b00      	cmp	r3, #0
 8007860:	bf0c      	ite	eq
 8007862:	2301      	moveq	r3, #1
 8007864:	2300      	movne	r3, #0
 8007866:	b2db      	uxtb	r3, r3
 8007868:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	015a      	lsls	r2, r3, #5
 800786e:	6a3b      	ldr	r3, [r7, #32]
 8007870:	4413      	add	r3, r2
 8007872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	69fa      	ldr	r2, [r7, #28]
 800787a:	0151      	lsls	r1, r2, #5
 800787c:	6a3a      	ldr	r2, [r7, #32]
 800787e:	440a      	add	r2, r1
 8007880:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007884:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007888:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	015a      	lsls	r2, r3, #5
 800788e:	6a3b      	ldr	r3, [r7, #32]
 8007890:	4413      	add	r3, r2
 8007892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	7e7b      	ldrb	r3, [r7, #25]
 800789a:	075b      	lsls	r3, r3, #29
 800789c:	69f9      	ldr	r1, [r7, #28]
 800789e:	0148      	lsls	r0, r1, #5
 80078a0:	6a39      	ldr	r1, [r7, #32]
 80078a2:	4401      	add	r1, r0
 80078a4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80078a8:	4313      	orrs	r3, r2
 80078aa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	015a      	lsls	r2, r3, #5
 80078b0:	6a3b      	ldr	r3, [r7, #32]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80078c2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	78db      	ldrb	r3, [r3, #3]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d004      	beq.n	80078d6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078d2:	613b      	str	r3, [r7, #16]
 80078d4:	e003      	b.n	80078de <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80078dc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078e4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	015a      	lsls	r2, r3, #5
 80078ea:	6a3b      	ldr	r3, [r7, #32]
 80078ec:	4413      	add	r3, r2
 80078ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078f2:	461a      	mov	r2, r3
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80078f8:	79fb      	ldrb	r3, [r7, #7]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d001      	beq.n	8007902 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	e04e      	b.n	80079a0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	78db      	ldrb	r3, [r3, #3]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d149      	bne.n	800799e <USB_HC_StartXfer+0x276>
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d045      	beq.n	800799e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	79db      	ldrb	r3, [r3, #7]
 8007916:	2b03      	cmp	r3, #3
 8007918:	d830      	bhi.n	800797c <USB_HC_StartXfer+0x254>
 800791a:	a201      	add	r2, pc, #4	; (adr r2, 8007920 <USB_HC_StartXfer+0x1f8>)
 800791c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007920:	08007931 	.word	0x08007931
 8007924:	08007955 	.word	0x08007955
 8007928:	08007931 	.word	0x08007931
 800792c:	08007955 	.word	0x08007955
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	695b      	ldr	r3, [r3, #20]
 8007934:	3303      	adds	r3, #3
 8007936:	089b      	lsrs	r3, r3, #2
 8007938:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800793a:	8afa      	ldrh	r2, [r7, #22]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007940:	b29b      	uxth	r3, r3
 8007942:	429a      	cmp	r2, r3
 8007944:	d91c      	bls.n	8007980 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	699b      	ldr	r3, [r3, #24]
 800794a:	f043 0220 	orr.w	r2, r3, #32
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	619a      	str	r2, [r3, #24]
        }
        break;
 8007952:	e015      	b.n	8007980 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	695b      	ldr	r3, [r3, #20]
 8007958:	3303      	adds	r3, #3
 800795a:	089b      	lsrs	r3, r3, #2
 800795c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800795e:	8afa      	ldrh	r2, [r7, #22]
 8007960:	6a3b      	ldr	r3, [r7, #32]
 8007962:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	b29b      	uxth	r3, r3
 800796a:	429a      	cmp	r2, r3
 800796c:	d90a      	bls.n	8007984 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	619a      	str	r2, [r3, #24]
        }
        break;
 800797a:	e003      	b.n	8007984 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800797c:	bf00      	nop
 800797e:	e002      	b.n	8007986 <USB_HC_StartXfer+0x25e>
        break;
 8007980:	bf00      	nop
 8007982:	e000      	b.n	8007986 <USB_HC_StartXfer+0x25e>
        break;
 8007984:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	68d9      	ldr	r1, [r3, #12]
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	785a      	ldrb	r2, [r3, #1]
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	b29b      	uxth	r3, r3
 8007994:	2000      	movs	r0, #0
 8007996:	9000      	str	r0, [sp, #0]
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f7ff fb31 	bl	8007000 <USB_WritePacket>
  }

  return HAL_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3728      	adds	r7, #40	; 0x28
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	1ff80000 	.word	0x1ff80000

080079ac <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	b29b      	uxth	r3, r3
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3714      	adds	r7, #20
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr

080079ce <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80079ce:	b480      	push	{r7}
 80079d0:	b089      	sub	sp, #36	; 0x24
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
 80079d6:	460b      	mov	r3, r1
 80079d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80079de:	78fb      	ldrb	r3, [r7, #3]
 80079e0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80079e2:	2300      	movs	r3, #0
 80079e4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	015a      	lsls	r2, r3, #5
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	4413      	add	r3, r2
 80079ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	0c9b      	lsrs	r3, r3, #18
 80079f6:	f003 0303 	and.w	r3, r3, #3
 80079fa:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	015a      	lsls	r2, r3, #5
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	4413      	add	r3, r2
 8007a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	0fdb      	lsrs	r3, r3, #31
 8007a0c:	f003 0301 	and.w	r3, r3, #1
 8007a10:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	f003 0320 	and.w	r3, r3, #32
 8007a1a:	2b20      	cmp	r3, #32
 8007a1c:	d104      	bne.n	8007a28 <USB_HC_Halt+0x5a>
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d101      	bne.n	8007a28 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007a24:	2300      	movs	r3, #0
 8007a26:	e0c8      	b.n	8007bba <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d002      	beq.n	8007a34 <USB_HC_Halt+0x66>
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	d163      	bne.n	8007afc <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	015a      	lsls	r2, r3, #5
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	69ba      	ldr	r2, [r7, #24]
 8007a44:	0151      	lsls	r1, r2, #5
 8007a46:	69fa      	ldr	r2, [r7, #28]
 8007a48:	440a      	add	r2, r1
 8007a4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a52:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f003 0320 	and.w	r3, r3, #32
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f040 80ab 	bne.w	8007bb8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d133      	bne.n	8007ad6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	015a      	lsls	r2, r3, #5
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	4413      	add	r3, r2
 8007a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	69ba      	ldr	r2, [r7, #24]
 8007a7e:	0151      	lsls	r1, r2, #5
 8007a80:	69fa      	ldr	r2, [r7, #28]
 8007a82:	440a      	add	r2, r1
 8007a84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a8c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	015a      	lsls	r2, r3, #5
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	4413      	add	r3, r2
 8007a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	69ba      	ldr	r2, [r7, #24]
 8007a9e:	0151      	lsls	r1, r2, #5
 8007aa0:	69fa      	ldr	r2, [r7, #28]
 8007aa2:	440a      	add	r2, r1
 8007aa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007aa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007aac:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007aba:	d81d      	bhi.n	8007af8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	015a      	lsls	r2, r3, #5
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ace:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ad2:	d0ec      	beq.n	8007aae <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ad4:	e070      	b.n	8007bb8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	015a      	lsls	r2, r3, #5
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	4413      	add	r3, r2
 8007ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	69ba      	ldr	r2, [r7, #24]
 8007ae6:	0151      	lsls	r1, r2, #5
 8007ae8:	69fa      	ldr	r2, [r7, #28]
 8007aea:	440a      	add	r2, r1
 8007aec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007af0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007af4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007af6:	e05f      	b.n	8007bb8 <USB_HC_Halt+0x1ea>
            break;
 8007af8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007afa:	e05d      	b.n	8007bb8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	015a      	lsls	r2, r3, #5
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	4413      	add	r3, r2
 8007b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	69ba      	ldr	r2, [r7, #24]
 8007b0c:	0151      	lsls	r1, r2, #5
 8007b0e:	69fa      	ldr	r2, [r7, #28]
 8007b10:	440a      	add	r2, r1
 8007b12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b1a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d133      	bne.n	8007b94 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	015a      	lsls	r2, r3, #5
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	4413      	add	r3, r2
 8007b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	69ba      	ldr	r2, [r7, #24]
 8007b3c:	0151      	lsls	r1, r2, #5
 8007b3e:	69fa      	ldr	r2, [r7, #28]
 8007b40:	440a      	add	r2, r1
 8007b42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b4a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	015a      	lsls	r2, r3, #5
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	4413      	add	r3, r2
 8007b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	69ba      	ldr	r2, [r7, #24]
 8007b5c:	0151      	lsls	r1, r2, #5
 8007b5e:	69fa      	ldr	r2, [r7, #28]
 8007b60:	440a      	add	r2, r1
 8007b62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b6a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b78:	d81d      	bhi.n	8007bb6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	015a      	lsls	r2, r3, #5
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	4413      	add	r3, r2
 8007b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b90:	d0ec      	beq.n	8007b6c <USB_HC_Halt+0x19e>
 8007b92:	e011      	b.n	8007bb8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	69ba      	ldr	r2, [r7, #24]
 8007ba4:	0151      	lsls	r1, r2, #5
 8007ba6:	69fa      	ldr	r2, [r7, #28]
 8007ba8:	440a      	add	r2, r1
 8007baa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007bb2:	6013      	str	r3, [r2, #0]
 8007bb4:	e000      	b.n	8007bb8 <USB_HC_Halt+0x1ea>
          break;
 8007bb6:	bf00      	nop
    }
  }

  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3724      	adds	r7, #36	; 0x24
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr
	...

08007bc8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b087      	sub	sp, #28
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007bd8:	78fb      	ldrb	r3, [r7, #3]
 8007bda:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	04da      	lsls	r2, r3, #19
 8007be4:	4b15      	ldr	r3, [pc, #84]	; (8007c3c <USB_DoPing+0x74>)
 8007be6:	4013      	ands	r3, r2
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	0151      	lsls	r1, r2, #5
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	440a      	add	r2, r1
 8007bf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007bf8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	015a      	lsls	r2, r3, #5
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	4413      	add	r3, r2
 8007c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c10:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c18:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	015a      	lsls	r2, r3, #5
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	4413      	add	r3, r2
 8007c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c26:	461a      	mov	r2, r3
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	371c      	adds	r7, #28
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	1ff80000 	.word	0x1ff80000

08007c40 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b088      	sub	sp, #32
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007c50:	2300      	movs	r3, #0
 8007c52:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f7ff f911 	bl	8006e7c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c5a:	2110      	movs	r1, #16
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7ff f96b 	bl	8006f38 <USB_FlushTxFifo>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d001      	beq.n	8007c6c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f7ff f997 	bl	8006fa0 <USB_FlushRxFifo>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d001      	beq.n	8007c7c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	61bb      	str	r3, [r7, #24]
 8007c80:	e01f      	b.n	8007cc2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	015a      	lsls	r2, r3, #5
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	4413      	add	r3, r2
 8007c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c98:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ca0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ca8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	015a      	lsls	r2, r3, #5
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	61bb      	str	r3, [r7, #24]
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	2b0f      	cmp	r3, #15
 8007cc6:	d9dc      	bls.n	8007c82 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007cc8:	2300      	movs	r3, #0
 8007cca:	61bb      	str	r3, [r7, #24]
 8007ccc:	e034      	b.n	8007d38 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	015a      	lsls	r2, r3, #5
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ce4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007cec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007cf4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	015a      	lsls	r2, r3, #5
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d02:	461a      	mov	r2, r3
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d14:	d80c      	bhi.n	8007d30 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	015a      	lsls	r2, r3, #5
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d2c:	d0ec      	beq.n	8007d08 <USB_StopHost+0xc8>
 8007d2e:	e000      	b.n	8007d32 <USB_StopHost+0xf2>
        break;
 8007d30:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	3301      	adds	r3, #1
 8007d36:	61bb      	str	r3, [r7, #24]
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	2b0f      	cmp	r3, #15
 8007d3c:	d9c7      	bls.n	8007cce <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d44:	461a      	mov	r2, r3
 8007d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d4a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d52:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7ff f880 	bl	8006e5a <USB_EnableGlobalInt>

  return ret;
 8007d5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3720      	adds	r7, #32
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007d64:	b590      	push	{r4, r7, lr}
 8007d66:	b089      	sub	sp, #36	; 0x24
 8007d68:	af04      	add	r7, sp, #16
 8007d6a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	2202      	movs	r2, #2
 8007d70:	2102      	movs	r1, #2
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fc66 	bl	8008644 <USBH_FindInterface>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
 8007d7e:	2bff      	cmp	r3, #255	; 0xff
 8007d80:	d002      	beq.n	8007d88 <USBH_CDC_InterfaceInit+0x24>
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	d901      	bls.n	8007d8c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007d88:	2302      	movs	r3, #2
 8007d8a:	e13d      	b.n	8008008 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007d8c:	7bfb      	ldrb	r3, [r7, #15]
 8007d8e:	4619      	mov	r1, r3
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fc3b 	bl	800860c <USBH_SelectInterface>
 8007d96:	4603      	mov	r3, r0
 8007d98:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007d9a:	7bbb      	ldrb	r3, [r7, #14]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d001      	beq.n	8007da4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007da0:	2302      	movs	r3, #2
 8007da2:	e131      	b.n	8008008 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007daa:	2050      	movs	r0, #80	; 0x50
 8007dac:	f7f9 f958 	bl	8001060 <malloc>
 8007db0:	4603      	mov	r3, r0
 8007db2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dba:	69db      	ldr	r3, [r3, #28]
 8007dbc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d101      	bne.n	8007dc8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	e11f      	b.n	8008008 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007dc8:	2250      	movs	r2, #80	; 0x50
 8007dca:	2100      	movs	r1, #0
 8007dcc:	68b8      	ldr	r0, [r7, #8]
 8007dce:	f7f9 f957 	bl	8001080 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007dd2:	7bfb      	ldrb	r3, [r7, #15]
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	211a      	movs	r1, #26
 8007dd8:	fb01 f303 	mul.w	r3, r1, r3
 8007ddc:	4413      	add	r3, r2
 8007dde:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	b25b      	sxtb	r3, r3
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	da15      	bge.n	8007e16 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	211a      	movs	r1, #26
 8007df0:	fb01 f303 	mul.w	r3, r1, r3
 8007df4:	4413      	add	r3, r2
 8007df6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007dfa:	781a      	ldrb	r2, [r3, #0]
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	211a      	movs	r1, #26
 8007e06:	fb01 f303 	mul.w	r3, r1, r3
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007e10:	881a      	ldrh	r2, [r3, #0]
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	785b      	ldrb	r3, [r3, #1]
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f001 ff2c 	bl	8009c7a <USBH_AllocPipe>
 8007e22:	4603      	mov	r3, r0
 8007e24:	461a      	mov	r2, r3
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	7819      	ldrb	r1, [r3, #0]
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	7858      	ldrb	r0, [r3, #1]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	8952      	ldrh	r2, [r2, #10]
 8007e42:	9202      	str	r2, [sp, #8]
 8007e44:	2203      	movs	r2, #3
 8007e46:	9201      	str	r2, [sp, #4]
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	4623      	mov	r3, r4
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f001 fee4 	bl	8009c1c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f002 f9f3 	bl	800a248 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007e62:	2300      	movs	r3, #0
 8007e64:	2200      	movs	r2, #0
 8007e66:	210a      	movs	r1, #10
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 fbeb 	bl	8008644 <USBH_FindInterface>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007e72:	7bfb      	ldrb	r3, [r7, #15]
 8007e74:	2bff      	cmp	r3, #255	; 0xff
 8007e76:	d002      	beq.n	8007e7e <USBH_CDC_InterfaceInit+0x11a>
 8007e78:	7bfb      	ldrb	r3, [r7, #15]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d901      	bls.n	8007e82 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007e7e:	2302      	movs	r3, #2
 8007e80:	e0c2      	b.n	8008008 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007e82:	7bfb      	ldrb	r3, [r7, #15]
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	211a      	movs	r1, #26
 8007e88:	fb01 f303 	mul.w	r3, r1, r3
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	b25b      	sxtb	r3, r3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	da16      	bge.n	8007ec8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	211a      	movs	r1, #26
 8007ea0:	fb01 f303 	mul.w	r3, r1, r3
 8007ea4:	4413      	add	r3, r2
 8007ea6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007eaa:	781a      	ldrb	r2, [r3, #0]
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	211a      	movs	r1, #26
 8007eb6:	fb01 f303 	mul.w	r3, r1, r3
 8007eba:	4413      	add	r3, r2
 8007ebc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007ec0:	881a      	ldrh	r2, [r3, #0]
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	835a      	strh	r2, [r3, #26]
 8007ec6:	e015      	b.n	8007ef4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007ec8:	7bfb      	ldrb	r3, [r7, #15]
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	211a      	movs	r1, #26
 8007ece:	fb01 f303 	mul.w	r3, r1, r3
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007ed8:	781a      	ldrb	r2, [r3, #0]
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007ede:	7bfb      	ldrb	r3, [r7, #15]
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	211a      	movs	r1, #26
 8007ee4:	fb01 f303 	mul.w	r3, r1, r3
 8007ee8:	4413      	add	r3, r2
 8007eea:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007eee:	881a      	ldrh	r2, [r3, #0]
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	211a      	movs	r1, #26
 8007efa:	fb01 f303 	mul.w	r3, r1, r3
 8007efe:	4413      	add	r3, r2
 8007f00:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	b25b      	sxtb	r3, r3
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	da16      	bge.n	8007f3a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007f0c:	7bfb      	ldrb	r3, [r7, #15]
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	211a      	movs	r1, #26
 8007f12:	fb01 f303 	mul.w	r3, r1, r3
 8007f16:	4413      	add	r3, r2
 8007f18:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007f1c:	781a      	ldrb	r2, [r3, #0]
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	211a      	movs	r1, #26
 8007f28:	fb01 f303 	mul.w	r3, r1, r3
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007f32:	881a      	ldrh	r2, [r3, #0]
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	835a      	strh	r2, [r3, #26]
 8007f38:	e015      	b.n	8007f66 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007f3a:	7bfb      	ldrb	r3, [r7, #15]
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	211a      	movs	r1, #26
 8007f40:	fb01 f303 	mul.w	r3, r1, r3
 8007f44:	4413      	add	r3, r2
 8007f46:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007f4a:	781a      	ldrb	r2, [r3, #0]
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007f50:	7bfb      	ldrb	r3, [r7, #15]
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	211a      	movs	r1, #26
 8007f56:	fb01 f303 	mul.w	r3, r1, r3
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007f60:	881a      	ldrh	r2, [r3, #0]
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	7b9b      	ldrb	r3, [r3, #14]
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f001 fe84 	bl	8009c7a <USBH_AllocPipe>
 8007f72:	4603      	mov	r3, r0
 8007f74:	461a      	mov	r2, r3
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	7bdb      	ldrb	r3, [r3, #15]
 8007f7e:	4619      	mov	r1, r3
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f001 fe7a 	bl	8009c7a <USBH_AllocPipe>
 8007f86:	4603      	mov	r3, r0
 8007f88:	461a      	mov	r2, r3
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	7b59      	ldrb	r1, [r3, #13]
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	7b98      	ldrb	r0, [r3, #14]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007fa2:	68ba      	ldr	r2, [r7, #8]
 8007fa4:	8b12      	ldrh	r2, [r2, #24]
 8007fa6:	9202      	str	r2, [sp, #8]
 8007fa8:	2202      	movs	r2, #2
 8007faa:	9201      	str	r2, [sp, #4]
 8007fac:	9300      	str	r3, [sp, #0]
 8007fae:	4623      	mov	r3, r4
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f001 fe32 	bl	8009c1c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	7b19      	ldrb	r1, [r3, #12]
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	7bd8      	ldrb	r0, [r3, #15]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007fcc:	68ba      	ldr	r2, [r7, #8]
 8007fce:	8b52      	ldrh	r2, [r2, #26]
 8007fd0:	9202      	str	r2, [sp, #8]
 8007fd2:	2202      	movs	r2, #2
 8007fd4:	9201      	str	r2, [sp, #4]
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	4623      	mov	r3, r4
 8007fda:	4602      	mov	r2, r0
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f001 fe1d 	bl	8009c1c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	7b5b      	ldrb	r3, [r3, #13]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f002 f928 	bl	800a248 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	7b1b      	ldrb	r3, [r3, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	4619      	mov	r1, r3
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f002 f921 	bl	800a248 <USBH_LL_SetToggle>

  return USBH_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3714      	adds	r7, #20
 800800c:	46bd      	mov	sp, r7
 800800e:	bd90      	pop	{r4, r7, pc}

08008010 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800801e:	69db      	ldr	r3, [r3, #28]
 8008020:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00e      	beq.n	8008048 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	4619      	mov	r1, r3
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f001 fe12 	bl	8009c5a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	4619      	mov	r1, r3
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f001 fe3d 	bl	8009cbc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	7b1b      	ldrb	r3, [r3, #12]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00e      	beq.n	800806e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	7b1b      	ldrb	r3, [r3, #12]
 8008054:	4619      	mov	r1, r3
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f001 fdff 	bl	8009c5a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	7b1b      	ldrb	r3, [r3, #12]
 8008060:	4619      	mov	r1, r3
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f001 fe2a 	bl	8009cbc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	7b5b      	ldrb	r3, [r3, #13]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00e      	beq.n	8008094 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	7b5b      	ldrb	r3, [r3, #13]
 800807a:	4619      	mov	r1, r3
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f001 fdec 	bl	8009c5a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	7b5b      	ldrb	r3, [r3, #13]
 8008086:	4619      	mov	r1, r3
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f001 fe17 	bl	8009cbc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2200      	movs	r2, #0
 8008092:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800809a:	69db      	ldr	r3, [r3, #28]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00b      	beq.n	80080b8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080a6:	69db      	ldr	r3, [r3, #28]
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7f8 ffe1 	bl	8001070 <free>
    phost->pActiveClass->pData = 0U;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080b4:	2200      	movs	r2, #0
 80080b6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b084      	sub	sp, #16
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080d0:	69db      	ldr	r3, [r3, #28]
 80080d2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	3340      	adds	r3, #64	; 0x40
 80080d8:	4619      	mov	r1, r3
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 f8b1 	bl	8008242 <GetLineCoding>
 80080e0:	4603      	mov	r3, r0
 80080e2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80080e4:	7afb      	ldrb	r3, [r7, #11]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d105      	bne.n	80080f6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080f0:	2102      	movs	r1, #2
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80080f6:	7afb      	ldrb	r3, [r7, #11]
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008108:	2301      	movs	r3, #1
 800810a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800810c:	2300      	movs	r3, #0
 800810e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008116:	69db      	ldr	r3, [r3, #28]
 8008118:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008120:	2b04      	cmp	r3, #4
 8008122:	d877      	bhi.n	8008214 <USBH_CDC_Process+0x114>
 8008124:	a201      	add	r2, pc, #4	; (adr r2, 800812c <USBH_CDC_Process+0x2c>)
 8008126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812a:	bf00      	nop
 800812c:	08008141 	.word	0x08008141
 8008130:	08008147 	.word	0x08008147
 8008134:	08008177 	.word	0x08008177
 8008138:	080081eb 	.word	0x080081eb
 800813c:	080081f9 	.word	0x080081f9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008140:	2300      	movs	r3, #0
 8008142:	73fb      	strb	r3, [r7, #15]
      break;
 8008144:	e06d      	b.n	8008222 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800814a:	4619      	mov	r1, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f897 	bl	8008280 <SetLineCoding>
 8008152:	4603      	mov	r3, r0
 8008154:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008156:	7bbb      	ldrb	r3, [r7, #14]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d104      	bne.n	8008166 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	2202      	movs	r2, #2
 8008160:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008164:	e058      	b.n	8008218 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008166:	7bbb      	ldrb	r3, [r7, #14]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d055      	beq.n	8008218 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	2204      	movs	r2, #4
 8008170:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008174:	e050      	b.n	8008218 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	3340      	adds	r3, #64	; 0x40
 800817a:	4619      	mov	r1, r3
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 f860 	bl	8008242 <GetLineCoding>
 8008182:	4603      	mov	r3, r0
 8008184:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008186:	7bbb      	ldrb	r3, [r7, #14]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d126      	bne.n	80081da <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800819e:	791b      	ldrb	r3, [r3, #4]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d13b      	bne.n	800821c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081ae:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d133      	bne.n	800821c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081be:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d12b      	bne.n	800821c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081cc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d124      	bne.n	800821c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f958 	bl	8008488 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80081d8:	e020      	b.n	800821c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80081da:	7bbb      	ldrb	r3, [r7, #14]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d01d      	beq.n	800821c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	2204      	movs	r2, #4
 80081e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80081e8:	e018      	b.n	800821c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 f867 	bl	80082be <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 f8da 	bl	80083aa <CDC_ProcessReception>
      break;
 80081f6:	e014      	b.n	8008222 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80081f8:	2100      	movs	r1, #0
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 ffef 	bl	80091de <USBH_ClrFeature>
 8008200:	4603      	mov	r3, r0
 8008202:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008204:	7bbb      	ldrb	r3, [r7, #14]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d10a      	bne.n	8008220 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008212:	e005      	b.n	8008220 <USBH_CDC_Process+0x120>

    default:
      break;
 8008214:	bf00      	nop
 8008216:	e004      	b.n	8008222 <USBH_CDC_Process+0x122>
      break;
 8008218:	bf00      	nop
 800821a:	e002      	b.n	8008222 <USBH_CDC_Process+0x122>
      break;
 800821c:	bf00      	nop
 800821e:	e000      	b.n	8008222 <USBH_CDC_Process+0x122>
      break;
 8008220:	bf00      	nop

  }

  return status;
 8008222:	7bfb      	ldrb	r3, [r7, #15]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	370c      	adds	r7, #12
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b082      	sub	sp, #8
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	22a1      	movs	r2, #161	; 0xa1
 8008250:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2221      	movs	r2, #33	; 0x21
 8008256:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2207      	movs	r2, #7
 8008268:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	2207      	movs	r2, #7
 800826e:	4619      	mov	r1, r3
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f001 fa81 	bl	8009778 <USBH_CtlReq>
 8008276:	4603      	mov	r3, r0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2221      	movs	r2, #33	; 0x21
 800828e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2220      	movs	r2, #32
 8008294:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2207      	movs	r2, #7
 80082a6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	2207      	movs	r2, #7
 80082ac:	4619      	mov	r1, r3
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f001 fa62 	bl	8009778 <USBH_CtlReq>
 80082b4:	4603      	mov	r3, r0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3708      	adds	r7, #8
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b086      	sub	sp, #24
 80082c2:	af02      	add	r7, sp, #8
 80082c4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082cc:	69db      	ldr	r3, [r3, #28]
 80082ce:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80082d0:	2300      	movs	r3, #0
 80082d2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d002      	beq.n	80082e4 <CDC_ProcessTransmission+0x26>
 80082de:	2b02      	cmp	r3, #2
 80082e0:	d023      	beq.n	800832a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80082e2:	e05e      	b.n	80083a2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	8b12      	ldrh	r2, [r2, #24]
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d90b      	bls.n	8008308 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	69d9      	ldr	r1, [r3, #28]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	8b1a      	ldrh	r2, [r3, #24]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	7b5b      	ldrb	r3, [r3, #13]
 80082fc:	2001      	movs	r0, #1
 80082fe:	9000      	str	r0, [sp, #0]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f001 fc48 	bl	8009b96 <USBH_BulkSendData>
 8008306:	e00b      	b.n	8008320 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8008310:	b29a      	uxth	r2, r3
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	7b5b      	ldrb	r3, [r3, #13]
 8008316:	2001      	movs	r0, #1
 8008318:	9000      	str	r0, [sp, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f001 fc3b 	bl	8009b96 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2202      	movs	r2, #2
 8008324:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008328:	e03b      	b.n	80083a2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	7b5b      	ldrb	r3, [r3, #13]
 800832e:	4619      	mov	r1, r3
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f001 ff5f 	bl	800a1f4 <USBH_LL_GetURBState>
 8008336:	4603      	mov	r3, r0
 8008338:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800833a:	7afb      	ldrb	r3, [r7, #11]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d128      	bne.n	8008392 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	8b12      	ldrh	r2, [r2, #24]
 8008348:	4293      	cmp	r3, r2
 800834a:	d90e      	bls.n	800836a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	8b12      	ldrh	r2, [r2, #24]
 8008354:	1a9a      	subs	r2, r3, r2
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	69db      	ldr	r3, [r3, #28]
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	8b12      	ldrh	r2, [r2, #24]
 8008362:	441a      	add	r2, r3
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	61da      	str	r2, [r3, #28]
 8008368:	e002      	b.n	8008370 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008374:	2b00      	cmp	r3, #0
 8008376:	d004      	beq.n	8008382 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008380:	e00e      	b.n	80083a0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 f868 	bl	8008460 <USBH_CDC_TransmitCallback>
      break;
 8008390:	e006      	b.n	80083a0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008392:	7afb      	ldrb	r3, [r7, #11]
 8008394:	2b02      	cmp	r3, #2
 8008396:	d103      	bne.n	80083a0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80083a0:	bf00      	nop
  }
}
 80083a2:	bf00      	nop
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b086      	sub	sp, #24
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083b8:	69db      	ldr	r3, [r3, #28]
 80083ba:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80083bc:	2300      	movs	r3, #0
 80083be:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80083c6:	2b03      	cmp	r3, #3
 80083c8:	d002      	beq.n	80083d0 <CDC_ProcessReception+0x26>
 80083ca:	2b04      	cmp	r3, #4
 80083cc:	d00e      	beq.n	80083ec <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80083ce:	e043      	b.n	8008458 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	6a19      	ldr	r1, [r3, #32]
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	8b5a      	ldrh	r2, [r3, #26]
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	7b1b      	ldrb	r3, [r3, #12]
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f001 fbff 	bl	8009be0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	2204      	movs	r2, #4
 80083e6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80083ea:	e035      	b.n	8008458 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	7b1b      	ldrb	r3, [r3, #12]
 80083f0:	4619      	mov	r1, r3
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f001 fefe 	bl	800a1f4 <USBH_LL_GetURBState>
 80083f8:	4603      	mov	r3, r0
 80083fa:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80083fc:	7cfb      	ldrb	r3, [r7, #19]
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d129      	bne.n	8008456 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	7b1b      	ldrb	r3, [r3, #12]
 8008406:	4619      	mov	r1, r3
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f001 fe61 	bl	800a0d0 <USBH_LL_GetLastXferSize>
 800840e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	429a      	cmp	r2, r3
 8008418:	d016      	beq.n	8008448 <CDC_ProcessReception+0x9e>
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	8b5b      	ldrh	r3, [r3, #26]
 800841e:	461a      	mov	r2, r3
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	4293      	cmp	r3, r2
 8008424:	d910      	bls.n	8008448 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	1ad2      	subs	r2, r2, r3
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	6a1a      	ldr	r2, [r3, #32]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	441a      	add	r2, r3
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	2203      	movs	r2, #3
 8008442:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008446:	e006      	b.n	8008456 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 f80f 	bl	8008474 <USBH_CDC_ReceiveCallback>
      break;
 8008456:	bf00      	nop
  }
}
 8008458:	bf00      	nop
 800845a:	3718      	adds	r7, #24
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008468:	bf00      	nop
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800847c:	bf00      	nop
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008490:	bf00      	nop
 8008492:	370c      	adds	r7, #12
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	4613      	mov	r3, r2
 80084a8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d101      	bne.n	80084b4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80084b0:	2302      	movs	r3, #2
 80084b2:	e029      	b.n	8008508 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	79fa      	ldrb	r2, [r7, #7]
 80084b8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2200      	movs	r2, #0
 80084c0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 f81f 	bl	8008510 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2200      	movs	r2, #0
 80084de:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d003      	beq.n	8008500 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f001 fd31 	bl	8009f68 <USBH_LL_Init>

  return USBH_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008518:	2300      	movs	r3, #0
 800851a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800851c:	2300      	movs	r3, #0
 800851e:	60fb      	str	r3, [r7, #12]
 8008520:	e009      	b.n	8008536 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	33e0      	adds	r3, #224	; 0xe0
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	4413      	add	r3, r2
 800852c:	2200      	movs	r2, #0
 800852e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	3301      	adds	r3, #1
 8008534:	60fb      	str	r3, [r7, #12]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2b0f      	cmp	r3, #15
 800853a:	d9f2      	bls.n	8008522 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800853c:	2300      	movs	r3, #0
 800853e:	60fb      	str	r3, [r7, #12]
 8008540:	e009      	b.n	8008556 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	4413      	add	r3, r2
 8008548:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800854c:	2200      	movs	r2, #0
 800854e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	3301      	adds	r3, #1
 8008554:	60fb      	str	r3, [r7, #12]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800855c:	d3f1      	bcc.n	8008542 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2201      	movs	r2, #1
 800856e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2240      	movs	r2, #64	; 0x40
 8008582:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2201      	movs	r2, #1
 8008596:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3714      	adds	r7, #20
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80085c2:	2300      	movs	r3, #0
 80085c4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d016      	beq.n	80085fa <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d10e      	bne.n	80085f4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80085dc:	1c59      	adds	r1, r3, #1
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	33de      	adds	r3, #222	; 0xde
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80085ee:	2300      	movs	r3, #0
 80085f0:	73fb      	strb	r3, [r7, #15]
 80085f2:	e004      	b.n	80085fe <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80085f4:	2302      	movs	r3, #2
 80085f6:	73fb      	strb	r3, [r7, #15]
 80085f8:	e001      	b.n	80085fe <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80085fa:	2302      	movs	r3, #2
 80085fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80085fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008600:	4618      	mov	r0, r3
 8008602:	3714      	adds	r7, #20
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800860c:	b480      	push	{r7}
 800860e:	b085      	sub	sp, #20
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	460b      	mov	r3, r1
 8008616:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008618:	2300      	movs	r3, #0
 800861a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008622:	78fa      	ldrb	r2, [r7, #3]
 8008624:	429a      	cmp	r2, r3
 8008626:	d204      	bcs.n	8008632 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	78fa      	ldrb	r2, [r7, #3]
 800862c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008630:	e001      	b.n	8008636 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008632:	2302      	movs	r3, #2
 8008634:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008636:	7bfb      	ldrb	r3, [r7, #15]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3714      	adds	r7, #20
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008644:	b480      	push	{r7}
 8008646:	b087      	sub	sp, #28
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	4608      	mov	r0, r1
 800864e:	4611      	mov	r1, r2
 8008650:	461a      	mov	r2, r3
 8008652:	4603      	mov	r3, r0
 8008654:	70fb      	strb	r3, [r7, #3]
 8008656:	460b      	mov	r3, r1
 8008658:	70bb      	strb	r3, [r7, #2]
 800865a:	4613      	mov	r3, r2
 800865c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800865e:	2300      	movs	r3, #0
 8008660:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008662:	2300      	movs	r3, #0
 8008664:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800866c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800866e:	e025      	b.n	80086bc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008670:	7dfb      	ldrb	r3, [r7, #23]
 8008672:	221a      	movs	r2, #26
 8008674:	fb02 f303 	mul.w	r3, r2, r3
 8008678:	3308      	adds	r3, #8
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	4413      	add	r3, r2
 800867e:	3302      	adds	r3, #2
 8008680:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	795b      	ldrb	r3, [r3, #5]
 8008686:	78fa      	ldrb	r2, [r7, #3]
 8008688:	429a      	cmp	r2, r3
 800868a:	d002      	beq.n	8008692 <USBH_FindInterface+0x4e>
 800868c:	78fb      	ldrb	r3, [r7, #3]
 800868e:	2bff      	cmp	r3, #255	; 0xff
 8008690:	d111      	bne.n	80086b6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008696:	78ba      	ldrb	r2, [r7, #2]
 8008698:	429a      	cmp	r2, r3
 800869a:	d002      	beq.n	80086a2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800869c:	78bb      	ldrb	r3, [r7, #2]
 800869e:	2bff      	cmp	r3, #255	; 0xff
 80086a0:	d109      	bne.n	80086b6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80086a6:	787a      	ldrb	r2, [r7, #1]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d002      	beq.n	80086b2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80086ac:	787b      	ldrb	r3, [r7, #1]
 80086ae:	2bff      	cmp	r3, #255	; 0xff
 80086b0:	d101      	bne.n	80086b6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80086b2:	7dfb      	ldrb	r3, [r7, #23]
 80086b4:	e006      	b.n	80086c4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80086b6:	7dfb      	ldrb	r3, [r7, #23]
 80086b8:	3301      	adds	r3, #1
 80086ba:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80086bc:	7dfb      	ldrb	r3, [r7, #23]
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d9d6      	bls.n	8008670 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80086c2:	23ff      	movs	r3, #255	; 0xff
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	371c      	adds	r7, #28
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f001 fc81 	bl	8009fe0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80086de:	2101      	movs	r1, #1
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f001 fd9a 	bl	800a21a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b088      	sub	sp, #32
 80086f4:	af04      	add	r7, sp, #16
 80086f6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80086f8:	2302      	movs	r3, #2
 80086fa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80086fc:	2300      	movs	r3, #0
 80086fe:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008706:	b2db      	uxtb	r3, r3
 8008708:	2b01      	cmp	r3, #1
 800870a:	d102      	bne.n	8008712 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2203      	movs	r2, #3
 8008710:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	b2db      	uxtb	r3, r3
 8008718:	2b0b      	cmp	r3, #11
 800871a:	f200 81be 	bhi.w	8008a9a <USBH_Process+0x3aa>
 800871e:	a201      	add	r2, pc, #4	; (adr r2, 8008724 <USBH_Process+0x34>)
 8008720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008724:	08008755 	.word	0x08008755
 8008728:	08008787 	.word	0x08008787
 800872c:	080087ef 	.word	0x080087ef
 8008730:	08008a35 	.word	0x08008a35
 8008734:	08008a9b 	.word	0x08008a9b
 8008738:	08008893 	.word	0x08008893
 800873c:	080089db 	.word	0x080089db
 8008740:	080088c9 	.word	0x080088c9
 8008744:	080088e9 	.word	0x080088e9
 8008748:	08008909 	.word	0x08008909
 800874c:	0800894d 	.word	0x0800894d
 8008750:	08008a1d 	.word	0x08008a1d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800875a:	b2db      	uxtb	r3, r3
 800875c:	2b00      	cmp	r3, #0
 800875e:	f000 819e 	beq.w	8008a9e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2201      	movs	r2, #1
 8008766:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008768:	20c8      	movs	r0, #200	; 0xc8
 800876a:	f001 fd9d 	bl	800a2a8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f001 fc93 	bl	800a09a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008784:	e18b      	b.n	8008a9e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800878c:	2b01      	cmp	r3, #1
 800878e:	d107      	bne.n	80087a0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2202      	movs	r2, #2
 800879c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800879e:	e18d      	b.n	8008abc <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80087a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087aa:	d914      	bls.n	80087d6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80087b2:	3301      	adds	r3, #1
 80087b4:	b2da      	uxtb	r2, r3
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80087c2:	2b03      	cmp	r3, #3
 80087c4:	d903      	bls.n	80087ce <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	220d      	movs	r2, #13
 80087ca:	701a      	strb	r2, [r3, #0]
      break;
 80087cc:	e176      	b.n	8008abc <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	701a      	strb	r2, [r3, #0]
      break;
 80087d4:	e172      	b.n	8008abc <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80087dc:	f103 020a 	add.w	r2, r3, #10
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80087e6:	200a      	movs	r0, #10
 80087e8:	f001 fd5e 	bl	800a2a8 <USBH_Delay>
      break;
 80087ec:	e166      	b.n	8008abc <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d005      	beq.n	8008804 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80087fe:	2104      	movs	r1, #4
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008804:	2064      	movs	r0, #100	; 0x64
 8008806:	f001 fd4f 	bl	800a2a8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f001 fc1e 	bl	800a04c <USBH_LL_GetSpeed>
 8008810:	4603      	mov	r3, r0
 8008812:	461a      	mov	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2205      	movs	r2, #5
 800881e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008820:	2100      	movs	r1, #0
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f001 fa29 	bl	8009c7a <USBH_AllocPipe>
 8008828:	4603      	mov	r3, r0
 800882a:	461a      	mov	r2, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008830:	2180      	movs	r1, #128	; 0x80
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f001 fa21 	bl	8009c7a <USBH_AllocPipe>
 8008838:	4603      	mov	r3, r0
 800883a:	461a      	mov	r2, r3
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	7919      	ldrb	r1, [r3, #4]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008854:	b292      	uxth	r2, r2
 8008856:	9202      	str	r2, [sp, #8]
 8008858:	2200      	movs	r2, #0
 800885a:	9201      	str	r2, [sp, #4]
 800885c:	9300      	str	r3, [sp, #0]
 800885e:	4603      	mov	r3, r0
 8008860:	2280      	movs	r2, #128	; 0x80
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f001 f9da 	bl	8009c1c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	7959      	ldrb	r1, [r3, #5]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800887c:	b292      	uxth	r2, r2
 800887e:	9202      	str	r2, [sp, #8]
 8008880:	2200      	movs	r2, #0
 8008882:	9201      	str	r2, [sp, #4]
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	4603      	mov	r3, r0
 8008888:	2200      	movs	r2, #0
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f001 f9c6 	bl	8009c1c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008890:	e114      	b.n	8008abc <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f918 	bl	8008ac8 <USBH_HandleEnum>
 8008898:	4603      	mov	r3, r0
 800889a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800889c:	7bbb      	ldrb	r3, [r7, #14]
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f040 80fe 	bne.w	8008aa2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d103      	bne.n	80088c0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2208      	movs	r2, #8
 80088bc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80088be:	e0f0      	b.n	8008aa2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2207      	movs	r2, #7
 80088c4:	701a      	strb	r2, [r3, #0]
      break;
 80088c6:	e0ec      	b.n	8008aa2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	f000 80e9 	beq.w	8008aa6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80088da:	2101      	movs	r1, #1
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2208      	movs	r2, #8
 80088e4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80088e6:	e0de      	b.n	8008aa6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	4619      	mov	r1, r3
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fc2c 	bl	8009150 <USBH_SetCfg>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f040 80d5 	bne.w	8008aaa <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2209      	movs	r2, #9
 8008904:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008906:	e0d0      	b.n	8008aaa <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800890e:	f003 0320 	and.w	r3, r3, #32
 8008912:	2b00      	cmp	r3, #0
 8008914:	d016      	beq.n	8008944 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008916:	2101      	movs	r1, #1
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 fc3c 	bl	8009196 <USBH_SetFeature>
 800891e:	4603      	mov	r3, r0
 8008920:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008922:	7bbb      	ldrb	r3, [r7, #14]
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b00      	cmp	r3, #0
 8008928:	d103      	bne.n	8008932 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	220a      	movs	r2, #10
 800892e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008930:	e0bd      	b.n	8008aae <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8008932:	7bbb      	ldrb	r3, [r7, #14]
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b03      	cmp	r3, #3
 8008938:	f040 80b9 	bne.w	8008aae <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	220a      	movs	r2, #10
 8008940:	701a      	strb	r2, [r3, #0]
      break;
 8008942:	e0b4      	b.n	8008aae <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	220a      	movs	r2, #10
 8008948:	701a      	strb	r2, [r3, #0]
      break;
 800894a:	e0b0      	b.n	8008aae <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008952:	2b00      	cmp	r3, #0
 8008954:	f000 80ad 	beq.w	8008ab2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008960:	2300      	movs	r3, #0
 8008962:	73fb      	strb	r3, [r7, #15]
 8008964:	e016      	b.n	8008994 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008966:	7bfa      	ldrb	r2, [r7, #15]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	32de      	adds	r2, #222	; 0xde
 800896c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008970:	791a      	ldrb	r2, [r3, #4]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008978:	429a      	cmp	r2, r3
 800897a:	d108      	bne.n	800898e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800897c:	7bfa      	ldrb	r2, [r7, #15]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	32de      	adds	r2, #222	; 0xde
 8008982:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800898c:	e005      	b.n	800899a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800898e:	7bfb      	ldrb	r3, [r7, #15]
 8008990:	3301      	adds	r3, #1
 8008992:	73fb      	strb	r3, [r7, #15]
 8008994:	7bfb      	ldrb	r3, [r7, #15]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d0e5      	beq.n	8008966 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d016      	beq.n	80089d2 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	4798      	blx	r3
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d109      	bne.n	80089ca <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2206      	movs	r2, #6
 80089ba:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80089c2:	2103      	movs	r1, #3
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80089c8:	e073      	b.n	8008ab2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	220d      	movs	r2, #13
 80089ce:	701a      	strb	r2, [r3, #0]
      break;
 80089d0:	e06f      	b.n	8008ab2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	220d      	movs	r2, #13
 80089d6:	701a      	strb	r2, [r3, #0]
      break;
 80089d8:	e06b      	b.n	8008ab2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d017      	beq.n	8008a14 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	4798      	blx	r3
 80089f0:	4603      	mov	r3, r0
 80089f2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80089f4:	7bbb      	ldrb	r3, [r7, #14]
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d103      	bne.n	8008a04 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	220b      	movs	r2, #11
 8008a00:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a02:	e058      	b.n	8008ab6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8008a04:	7bbb      	ldrb	r3, [r7, #14]
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d154      	bne.n	8008ab6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	220d      	movs	r2, #13
 8008a10:	701a      	strb	r2, [r3, #0]
      break;
 8008a12:	e050      	b.n	8008ab6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	220d      	movs	r2, #13
 8008a18:	701a      	strb	r2, [r3, #0]
      break;
 8008a1a:	e04c      	b.n	8008ab6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d049      	beq.n	8008aba <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a2c:	695b      	ldr	r3, [r3, #20]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	4798      	blx	r3
      }
      break;
 8008a32:	e042      	b.n	8008aba <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f7ff fd67 	bl	8008510 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d009      	beq.n	8008a60 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d005      	beq.n	8008a76 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a70:	2105      	movs	r1, #5
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d107      	bne.n	8008a92 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f7ff fe20 	bl	80086d0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a90:	e014      	b.n	8008abc <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f001 faa4 	bl	8009fe0 <USBH_LL_Start>
      break;
 8008a98:	e010      	b.n	8008abc <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008a9a:	bf00      	nop
 8008a9c:	e00e      	b.n	8008abc <USBH_Process+0x3cc>
      break;
 8008a9e:	bf00      	nop
 8008aa0:	e00c      	b.n	8008abc <USBH_Process+0x3cc>
      break;
 8008aa2:	bf00      	nop
 8008aa4:	e00a      	b.n	8008abc <USBH_Process+0x3cc>
    break;
 8008aa6:	bf00      	nop
 8008aa8:	e008      	b.n	8008abc <USBH_Process+0x3cc>
      break;
 8008aaa:	bf00      	nop
 8008aac:	e006      	b.n	8008abc <USBH_Process+0x3cc>
      break;
 8008aae:	bf00      	nop
 8008ab0:	e004      	b.n	8008abc <USBH_Process+0x3cc>
      break;
 8008ab2:	bf00      	nop
 8008ab4:	e002      	b.n	8008abc <USBH_Process+0x3cc>
      break;
 8008ab6:	bf00      	nop
 8008ab8:	e000      	b.n	8008abc <USBH_Process+0x3cc>
      break;
 8008aba:	bf00      	nop
  }
  return USBH_OK;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop

08008ac8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b088      	sub	sp, #32
 8008acc:	af04      	add	r7, sp, #16
 8008ace:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	785b      	ldrb	r3, [r3, #1]
 8008adc:	2b07      	cmp	r3, #7
 8008ade:	f200 81c1 	bhi.w	8008e64 <USBH_HandleEnum+0x39c>
 8008ae2:	a201      	add	r2, pc, #4	; (adr r2, 8008ae8 <USBH_HandleEnum+0x20>)
 8008ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae8:	08008b09 	.word	0x08008b09
 8008aec:	08008bc7 	.word	0x08008bc7
 8008af0:	08008c31 	.word	0x08008c31
 8008af4:	08008cbf 	.word	0x08008cbf
 8008af8:	08008d29 	.word	0x08008d29
 8008afc:	08008d99 	.word	0x08008d99
 8008b00:	08008ddf 	.word	0x08008ddf
 8008b04:	08008e25 	.word	0x08008e25
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008b08:	2108      	movs	r1, #8
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fa50 	bl	8008fb0 <USBH_Get_DevDesc>
 8008b10:	4603      	mov	r3, r0
 8008b12:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008b14:	7bbb      	ldrb	r3, [r7, #14]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d130      	bne.n	8008b7c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	7919      	ldrb	r1, [r3, #4]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008b3e:	b292      	uxth	r2, r2
 8008b40:	9202      	str	r2, [sp, #8]
 8008b42:	2200      	movs	r2, #0
 8008b44:	9201      	str	r2, [sp, #4]
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2280      	movs	r2, #128	; 0x80
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f001 f865 	bl	8009c1c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	7959      	ldrb	r1, [r3, #5]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008b66:	b292      	uxth	r2, r2
 8008b68:	9202      	str	r2, [sp, #8]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	9201      	str	r2, [sp, #4]
 8008b6e:	9300      	str	r3, [sp, #0]
 8008b70:	4603      	mov	r3, r0
 8008b72:	2200      	movs	r2, #0
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f001 f851 	bl	8009c1c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008b7a:	e175      	b.n	8008e68 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b7c:	7bbb      	ldrb	r3, [r7, #14]
 8008b7e:	2b03      	cmp	r3, #3
 8008b80:	f040 8172 	bne.w	8008e68 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	b2da      	uxtb	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b9a:	2b03      	cmp	r3, #3
 8008b9c:	d903      	bls.n	8008ba6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	220d      	movs	r2, #13
 8008ba2:	701a      	strb	r2, [r3, #0]
      break;
 8008ba4:	e160      	b.n	8008e68 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	795b      	ldrb	r3, [r3, #5]
 8008baa:	4619      	mov	r1, r3
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f001 f885 	bl	8009cbc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	791b      	ldrb	r3, [r3, #4]
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f001 f87f 	bl	8009cbc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	701a      	strb	r2, [r3, #0]
      break;
 8008bc4:	e150      	b.n	8008e68 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008bc6:	2112      	movs	r1, #18
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 f9f1 	bl	8008fb0 <USBH_Get_DevDesc>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008bd2:	7bbb      	ldrb	r3, [r7, #14]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d103      	bne.n	8008be0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2202      	movs	r2, #2
 8008bdc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008bde:	e145      	b.n	8008e6c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008be0:	7bbb      	ldrb	r3, [r7, #14]
 8008be2:	2b03      	cmp	r3, #3
 8008be4:	f040 8142 	bne.w	8008e6c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008bee:	3301      	adds	r3, #1
 8008bf0:	b2da      	uxtb	r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008bfe:	2b03      	cmp	r3, #3
 8008c00:	d903      	bls.n	8008c0a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	220d      	movs	r2, #13
 8008c06:	701a      	strb	r2, [r3, #0]
      break;
 8008c08:	e130      	b.n	8008e6c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	795b      	ldrb	r3, [r3, #5]
 8008c0e:	4619      	mov	r1, r3
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f001 f853 	bl	8009cbc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	791b      	ldrb	r3, [r3, #4]
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f001 f84d 	bl	8009cbc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	701a      	strb	r2, [r3, #0]
      break;
 8008c2e:	e11d      	b.n	8008e6c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008c30:	2101      	movs	r1, #1
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 fa68 	bl	8009108 <USBH_SetAddress>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008c3c:	7bbb      	ldrb	r3, [r7, #14]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d132      	bne.n	8008ca8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008c42:	2002      	movs	r0, #2
 8008c44:	f001 fb30 	bl	800a2a8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2203      	movs	r2, #3
 8008c54:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	7919      	ldrb	r1, [r3, #4]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008c6a:	b292      	uxth	r2, r2
 8008c6c:	9202      	str	r2, [sp, #8]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	9201      	str	r2, [sp, #4]
 8008c72:	9300      	str	r3, [sp, #0]
 8008c74:	4603      	mov	r3, r0
 8008c76:	2280      	movs	r2, #128	; 0x80
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 ffcf 	bl	8009c1c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	7959      	ldrb	r1, [r3, #5]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c92:	b292      	uxth	r2, r2
 8008c94:	9202      	str	r2, [sp, #8]
 8008c96:	2200      	movs	r2, #0
 8008c98:	9201      	str	r2, [sp, #4]
 8008c9a:	9300      	str	r3, [sp, #0]
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 ffbb 	bl	8009c1c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008ca6:	e0e3      	b.n	8008e70 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ca8:	7bbb      	ldrb	r3, [r7, #14]
 8008caa:	2b03      	cmp	r3, #3
 8008cac:	f040 80e0 	bne.w	8008e70 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	220d      	movs	r2, #13
 8008cb4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	705a      	strb	r2, [r3, #1]
      break;
 8008cbc:	e0d8      	b.n	8008e70 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008cbe:	2109      	movs	r1, #9
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f99d 	bl	8009000 <USBH_Get_CfgDesc>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008cca:	7bbb      	ldrb	r3, [r7, #14]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d103      	bne.n	8008cd8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2204      	movs	r2, #4
 8008cd4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008cd6:	e0cd      	b.n	8008e74 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008cd8:	7bbb      	ldrb	r3, [r7, #14]
 8008cda:	2b03      	cmp	r3, #3
 8008cdc:	f040 80ca 	bne.w	8008e74 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	b2da      	uxtb	r2, r3
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008cf6:	2b03      	cmp	r3, #3
 8008cf8:	d903      	bls.n	8008d02 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	220d      	movs	r2, #13
 8008cfe:	701a      	strb	r2, [r3, #0]
      break;
 8008d00:	e0b8      	b.n	8008e74 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	795b      	ldrb	r3, [r3, #5]
 8008d06:	4619      	mov	r1, r3
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 ffd7 	bl	8009cbc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	791b      	ldrb	r3, [r3, #4]
 8008d12:	4619      	mov	r1, r3
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 ffd1 	bl	8009cbc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	701a      	strb	r2, [r3, #0]
      break;
 8008d26:	e0a5      	b.n	8008e74 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008d2e:	4619      	mov	r1, r3
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f965 	bl	8009000 <USBH_Get_CfgDesc>
 8008d36:	4603      	mov	r3, r0
 8008d38:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008d3a:	7bbb      	ldrb	r3, [r7, #14]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d103      	bne.n	8008d48 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2205      	movs	r2, #5
 8008d44:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008d46:	e097      	b.n	8008e78 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d48:	7bbb      	ldrb	r3, [r7, #14]
 8008d4a:	2b03      	cmp	r3, #3
 8008d4c:	f040 8094 	bne.w	8008e78 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008d56:	3301      	adds	r3, #1
 8008d58:	b2da      	uxtb	r2, r3
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008d66:	2b03      	cmp	r3, #3
 8008d68:	d903      	bls.n	8008d72 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	220d      	movs	r2, #13
 8008d6e:	701a      	strb	r2, [r3, #0]
      break;
 8008d70:	e082      	b.n	8008e78 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	795b      	ldrb	r3, [r3, #5]
 8008d76:	4619      	mov	r1, r3
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 ff9f 	bl	8009cbc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	791b      	ldrb	r3, [r3, #4]
 8008d82:	4619      	mov	r1, r3
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 ff99 	bl	8009cbc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	701a      	strb	r2, [r3, #0]
      break;
 8008d96:	e06f      	b.n	8008e78 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d019      	beq.n	8008dd6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008dae:	23ff      	movs	r3, #255	; 0xff
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f949 	bl	8009048 <USBH_Get_StringDesc>
 8008db6:	4603      	mov	r3, r0
 8008db8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008dba:	7bbb      	ldrb	r3, [r7, #14]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d103      	bne.n	8008dc8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2206      	movs	r2, #6
 8008dc4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008dc6:	e059      	b.n	8008e7c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008dc8:	7bbb      	ldrb	r3, [r7, #14]
 8008dca:	2b03      	cmp	r3, #3
 8008dcc:	d156      	bne.n	8008e7c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2206      	movs	r2, #6
 8008dd2:	705a      	strb	r2, [r3, #1]
      break;
 8008dd4:	e052      	b.n	8008e7c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2206      	movs	r2, #6
 8008dda:	705a      	strb	r2, [r3, #1]
      break;
 8008ddc:	e04e      	b.n	8008e7c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d019      	beq.n	8008e1c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008df4:	23ff      	movs	r3, #255	; 0xff
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 f926 	bl	8009048 <USBH_Get_StringDesc>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008e00:	7bbb      	ldrb	r3, [r7, #14]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d103      	bne.n	8008e0e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2207      	movs	r2, #7
 8008e0a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008e0c:	e038      	b.n	8008e80 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e0e:	7bbb      	ldrb	r3, [r7, #14]
 8008e10:	2b03      	cmp	r3, #3
 8008e12:	d135      	bne.n	8008e80 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2207      	movs	r2, #7
 8008e18:	705a      	strb	r2, [r3, #1]
      break;
 8008e1a:	e031      	b.n	8008e80 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2207      	movs	r2, #7
 8008e20:	705a      	strb	r2, [r3, #1]
      break;
 8008e22:	e02d      	b.n	8008e80 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d017      	beq.n	8008e5e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008e3a:	23ff      	movs	r3, #255	; 0xff
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 f903 	bl	8009048 <USBH_Get_StringDesc>
 8008e42:	4603      	mov	r3, r0
 8008e44:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008e46:	7bbb      	ldrb	r3, [r7, #14]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d102      	bne.n	8008e52 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008e50:	e018      	b.n	8008e84 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e52:	7bbb      	ldrb	r3, [r7, #14]
 8008e54:	2b03      	cmp	r3, #3
 8008e56:	d115      	bne.n	8008e84 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e5c:	e012      	b.n	8008e84 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	73fb      	strb	r3, [r7, #15]
      break;
 8008e62:	e00f      	b.n	8008e84 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008e64:	bf00      	nop
 8008e66:	e00e      	b.n	8008e86 <USBH_HandleEnum+0x3be>
      break;
 8008e68:	bf00      	nop
 8008e6a:	e00c      	b.n	8008e86 <USBH_HandleEnum+0x3be>
      break;
 8008e6c:	bf00      	nop
 8008e6e:	e00a      	b.n	8008e86 <USBH_HandleEnum+0x3be>
      break;
 8008e70:	bf00      	nop
 8008e72:	e008      	b.n	8008e86 <USBH_HandleEnum+0x3be>
      break;
 8008e74:	bf00      	nop
 8008e76:	e006      	b.n	8008e86 <USBH_HandleEnum+0x3be>
      break;
 8008e78:	bf00      	nop
 8008e7a:	e004      	b.n	8008e86 <USBH_HandleEnum+0x3be>
      break;
 8008e7c:	bf00      	nop
 8008e7e:	e002      	b.n	8008e86 <USBH_HandleEnum+0x3be>
      break;
 8008e80:	bf00      	nop
 8008e82:	e000      	b.n	8008e86 <USBH_HandleEnum+0x3be>
      break;
 8008e84:	bf00      	nop
  }
  return Status;
 8008e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3710      	adds	r7, #16
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	683a      	ldr	r2, [r7, #0]
 8008e9e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008ea2:	bf00      	nop
 8008ea4:	370c      	adds	r7, #12
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr

08008eae <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b082      	sub	sp, #8
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008ebc:	1c5a      	adds	r2, r3, #1
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 f804 	bl	8008ed2 <USBH_HandleSof>
}
 8008eca:	bf00      	nop
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b082      	sub	sp, #8
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	2b0b      	cmp	r3, #11
 8008ee2:	d10a      	bne.n	8008efa <USBH_HandleSof+0x28>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d005      	beq.n	8008efa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ef4:	699b      	ldr	r3, [r3, #24]
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	4798      	blx	r3
  }
}
 8008efa:	bf00      	nop
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008f02:	b480      	push	{r7}
 8008f04:	b083      	sub	sp, #12
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008f12:	bf00      	nop
}
 8008f14:	370c      	adds	r7, #12
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr

08008f1e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008f1e:	b480      	push	{r7}
 8008f20:	b083      	sub	sp, #12
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008f2e:	bf00      	nop
}
 8008f30:	370c      	adds	r7, #12
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr

08008f3a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008f3a:	b480      	push	{r7}
 8008f3c:	b083      	sub	sp, #12
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2201      	movs	r2, #1
 8008f46:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f001 f844 	bl	800a016 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	791b      	ldrb	r3, [r3, #4]
 8008f92:	4619      	mov	r1, r3
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fe91 	bl	8009cbc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	795b      	ldrb	r3, [r3, #5]
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 fe8b 	bl	8009cbc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b086      	sub	sp, #24
 8008fb4:	af02      	add	r7, sp, #8
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	460b      	mov	r3, r1
 8008fba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008fc2:	78fb      	ldrb	r3, [r7, #3]
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	4613      	mov	r3, r2
 8008fca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008fce:	2100      	movs	r1, #0
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 f864 	bl	800909e <USBH_GetDescriptor>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d10a      	bne.n	8008ff6 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008fec:	78fa      	ldrb	r2, [r7, #3]
 8008fee:	b292      	uxth	r2, r2
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	f000 f918 	bl	8009226 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af02      	add	r7, sp, #8
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	460b      	mov	r3, r1
 800900a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	331c      	adds	r3, #28
 8009010:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009012:	887b      	ldrh	r3, [r7, #2]
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800901c:	2100      	movs	r1, #0
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 f83d 	bl	800909e <USBH_GetDescriptor>
 8009024:	4603      	mov	r3, r0
 8009026:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009028:	7bfb      	ldrb	r3, [r7, #15]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d107      	bne.n	800903e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800902e:	887b      	ldrh	r3, [r7, #2]
 8009030:	461a      	mov	r2, r3
 8009032:	68b9      	ldr	r1, [r7, #8]
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 f987 	bl	8009348 <USBH_ParseCfgDesc>
 800903a:	4603      	mov	r3, r0
 800903c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800903e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009040:	4618      	mov	r0, r3
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b088      	sub	sp, #32
 800904c:	af02      	add	r7, sp, #8
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	607a      	str	r2, [r7, #4]
 8009052:	461a      	mov	r2, r3
 8009054:	460b      	mov	r3, r1
 8009056:	72fb      	strb	r3, [r7, #11]
 8009058:	4613      	mov	r3, r2
 800905a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800905c:	7afb      	ldrb	r3, [r7, #11]
 800905e:	b29b      	uxth	r3, r3
 8009060:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009064:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800906c:	893b      	ldrh	r3, [r7, #8]
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	460b      	mov	r3, r1
 8009072:	2100      	movs	r1, #0
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f000 f812 	bl	800909e <USBH_GetDescriptor>
 800907a:	4603      	mov	r3, r0
 800907c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800907e:	7dfb      	ldrb	r3, [r7, #23]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d107      	bne.n	8009094 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800908a:	893a      	ldrh	r2, [r7, #8]
 800908c:	6879      	ldr	r1, [r7, #4]
 800908e:	4618      	mov	r0, r3
 8009090:	f000 fb24 	bl	80096dc <USBH_ParseStringDesc>
  }

  return status;
 8009094:	7dfb      	ldrb	r3, [r7, #23]
}
 8009096:	4618      	mov	r0, r3
 8009098:	3718      	adds	r7, #24
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b084      	sub	sp, #16
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	60f8      	str	r0, [r7, #12]
 80090a6:	607b      	str	r3, [r7, #4]
 80090a8:	460b      	mov	r3, r1
 80090aa:	72fb      	strb	r3, [r7, #11]
 80090ac:	4613      	mov	r3, r2
 80090ae:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	789b      	ldrb	r3, [r3, #2]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d11c      	bne.n	80090f2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80090b8:	7afb      	ldrb	r3, [r7, #11]
 80090ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2206      	movs	r2, #6
 80090c8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	893a      	ldrh	r2, [r7, #8]
 80090ce:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80090d0:	893b      	ldrh	r3, [r7, #8]
 80090d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80090d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090da:	d104      	bne.n	80090e6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f240 4209 	movw	r2, #1033	; 0x409
 80090e2:	829a      	strh	r2, [r3, #20]
 80090e4:	e002      	b.n	80090ec <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2200      	movs	r2, #0
 80090ea:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	8b3a      	ldrh	r2, [r7, #24]
 80090f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80090f2:	8b3b      	ldrh	r3, [r7, #24]
 80090f4:	461a      	mov	r2, r3
 80090f6:	6879      	ldr	r1, [r7, #4]
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f000 fb3d 	bl	8009778 <USBH_CtlReq>
 80090fe:	4603      	mov	r3, r0
}
 8009100:	4618      	mov	r0, r3
 8009102:	3710      	adds	r7, #16
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	460b      	mov	r3, r1
 8009112:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	789b      	ldrb	r3, [r3, #2]
 8009118:	2b01      	cmp	r3, #1
 800911a:	d10f      	bne.n	800913c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2205      	movs	r2, #5
 8009126:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009128:	78fb      	ldrb	r3, [r7, #3]
 800912a:	b29a      	uxth	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800913c:	2200      	movs	r2, #0
 800913e:	2100      	movs	r1, #0
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 fb19 	bl	8009778 <USBH_CtlReq>
 8009146:	4603      	mov	r3, r0
}
 8009148:	4618      	mov	r0, r3
 800914a:	3708      	adds	r7, #8
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	460b      	mov	r3, r1
 800915a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	789b      	ldrb	r3, [r3, #2]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d10e      	bne.n	8009182 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2209      	movs	r2, #9
 800916e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	887a      	ldrh	r2, [r7, #2]
 8009174:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009182:	2200      	movs	r2, #0
 8009184:	2100      	movs	r1, #0
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 faf6 	bl	8009778 <USBH_CtlReq>
 800918c:	4603      	mov	r3, r0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3708      	adds	r7, #8
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b082      	sub	sp, #8
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
 800919e:	460b      	mov	r3, r1
 80091a0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	789b      	ldrb	r3, [r3, #2]
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d10f      	bne.n	80091ca <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2203      	movs	r2, #3
 80091b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80091b6:	78fb      	ldrb	r3, [r7, #3]
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80091ca:	2200      	movs	r2, #0
 80091cc:	2100      	movs	r1, #0
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 fad2 	bl	8009778 <USBH_CtlReq>
 80091d4:	4603      	mov	r3, r0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3708      	adds	r7, #8
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b082      	sub	sp, #8
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	460b      	mov	r3, r1
 80091e8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	789b      	ldrb	r3, [r3, #2]
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d10f      	bne.n	8009212 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2202      	movs	r2, #2
 80091f6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009204:	78fb      	ldrb	r3, [r7, #3]
 8009206:	b29a      	uxth	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8009212:	2200      	movs	r2, #0
 8009214:	2100      	movs	r1, #0
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 faae 	bl	8009778 <USBH_CtlReq>
 800921c:	4603      	mov	r3, r0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009226:	b480      	push	{r7}
 8009228:	b085      	sub	sp, #20
 800922a:	af00      	add	r7, sp, #0
 800922c:	60f8      	str	r0, [r7, #12]
 800922e:	60b9      	str	r1, [r7, #8]
 8009230:	4613      	mov	r3, r2
 8009232:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	781a      	ldrb	r2, [r3, #0]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	785a      	ldrb	r2, [r3, #1]
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	3302      	adds	r3, #2
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	b29a      	uxth	r2, r3
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	3303      	adds	r3, #3
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	b29b      	uxth	r3, r3
 8009254:	021b      	lsls	r3, r3, #8
 8009256:	b29b      	uxth	r3, r3
 8009258:	4313      	orrs	r3, r2
 800925a:	b29a      	uxth	r2, r3
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	791a      	ldrb	r2, [r3, #4]
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	795a      	ldrb	r2, [r3, #5]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	799a      	ldrb	r2, [r3, #6]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	79da      	ldrb	r2, [r3, #7]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	79db      	ldrb	r3, [r3, #7]
 8009284:	2b20      	cmp	r3, #32
 8009286:	dc11      	bgt.n	80092ac <USBH_ParseDevDesc+0x86>
 8009288:	2b08      	cmp	r3, #8
 800928a:	db16      	blt.n	80092ba <USBH_ParseDevDesc+0x94>
 800928c:	3b08      	subs	r3, #8
 800928e:	2201      	movs	r2, #1
 8009290:	fa02 f303 	lsl.w	r3, r2, r3
 8009294:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8009298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800929c:	2b00      	cmp	r3, #0
 800929e:	bf14      	ite	ne
 80092a0:	2301      	movne	r3, #1
 80092a2:	2300      	moveq	r3, #0
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d102      	bne.n	80092b0 <USBH_ParseDevDesc+0x8a>
 80092aa:	e006      	b.n	80092ba <USBH_ParseDevDesc+0x94>
 80092ac:	2b40      	cmp	r3, #64	; 0x40
 80092ae:	d104      	bne.n	80092ba <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	79da      	ldrb	r2, [r3, #7]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	71da      	strb	r2, [r3, #7]
      break;
 80092b8:	e003      	b.n	80092c2 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2240      	movs	r2, #64	; 0x40
 80092be:	71da      	strb	r2, [r3, #7]
      break;
 80092c0:	bf00      	nop
  }

  if (length > 8U)
 80092c2:	88fb      	ldrh	r3, [r7, #6]
 80092c4:	2b08      	cmp	r3, #8
 80092c6:	d939      	bls.n	800933c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	3308      	adds	r3, #8
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	b29a      	uxth	r2, r3
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	3309      	adds	r3, #9
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	021b      	lsls	r3, r3, #8
 80092da:	b29b      	uxth	r3, r3
 80092dc:	4313      	orrs	r3, r2
 80092de:	b29a      	uxth	r2, r3
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	330a      	adds	r3, #10
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	330b      	adds	r3, #11
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	021b      	lsls	r3, r3, #8
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	4313      	orrs	r3, r2
 80092fa:	b29a      	uxth	r2, r3
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	330c      	adds	r3, #12
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	b29a      	uxth	r2, r3
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	330d      	adds	r3, #13
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	b29b      	uxth	r3, r3
 8009310:	021b      	lsls	r3, r3, #8
 8009312:	b29b      	uxth	r3, r3
 8009314:	4313      	orrs	r3, r2
 8009316:	b29a      	uxth	r2, r3
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	7b9a      	ldrb	r2, [r3, #14]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	7bda      	ldrb	r2, [r3, #15]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	7c1a      	ldrb	r2, [r3, #16]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	7c5a      	ldrb	r2, [r3, #17]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	745a      	strb	r2, [r3, #17]
  }
}
 800933c:	bf00      	nop
 800933e:	3714      	adds	r7, #20
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b08c      	sub	sp, #48	; 0x30
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	4613      	mov	r3, r2
 8009354:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800935c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800935e:	2300      	movs	r3, #0
 8009360:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009368:	2300      	movs	r3, #0
 800936a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800936e:	2300      	movs	r3, #0
 8009370:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	781a      	ldrb	r2, [r3, #0]
 800937c:	6a3b      	ldr	r3, [r7, #32]
 800937e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	785a      	ldrb	r2, [r3, #1]
 8009384:	6a3b      	ldr	r3, [r7, #32]
 8009386:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	3302      	adds	r3, #2
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	b29a      	uxth	r2, r3
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	3303      	adds	r3, #3
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	b29b      	uxth	r3, r3
 8009398:	021b      	lsls	r3, r3, #8
 800939a:	b29b      	uxth	r3, r3
 800939c:	4313      	orrs	r3, r2
 800939e:	b29b      	uxth	r3, r3
 80093a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093a4:	bf28      	it	cs
 80093a6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80093aa:	b29a      	uxth	r2, r3
 80093ac:	6a3b      	ldr	r3, [r7, #32]
 80093ae:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	791a      	ldrb	r2, [r3, #4]
 80093b4:	6a3b      	ldr	r3, [r7, #32]
 80093b6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	795a      	ldrb	r2, [r3, #5]
 80093bc:	6a3b      	ldr	r3, [r7, #32]
 80093be:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	799a      	ldrb	r2, [r3, #6]
 80093c4:	6a3b      	ldr	r3, [r7, #32]
 80093c6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	79da      	ldrb	r2, [r3, #7]
 80093cc:	6a3b      	ldr	r3, [r7, #32]
 80093ce:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	7a1a      	ldrb	r2, [r3, #8]
 80093d4:	6a3b      	ldr	r3, [r7, #32]
 80093d6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80093d8:	6a3b      	ldr	r3, [r7, #32]
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	2b09      	cmp	r3, #9
 80093de:	d002      	beq.n	80093e6 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80093e0:	6a3b      	ldr	r3, [r7, #32]
 80093e2:	2209      	movs	r2, #9
 80093e4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80093e6:	88fb      	ldrh	r3, [r7, #6]
 80093e8:	2b09      	cmp	r3, #9
 80093ea:	f240 809d 	bls.w	8009528 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80093ee:	2309      	movs	r3, #9
 80093f0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80093f2:	2300      	movs	r3, #0
 80093f4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80093f6:	e081      	b.n	80094fc <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80093f8:	f107 0316 	add.w	r3, r7, #22
 80093fc:	4619      	mov	r1, r3
 80093fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009400:	f000 f99f 	bl	8009742 <USBH_GetNextDesc>
 8009404:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009408:	785b      	ldrb	r3, [r3, #1]
 800940a:	2b04      	cmp	r3, #4
 800940c:	d176      	bne.n	80094fc <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800940e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	2b09      	cmp	r3, #9
 8009414:	d002      	beq.n	800941c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009418:	2209      	movs	r2, #9
 800941a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800941c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009420:	221a      	movs	r2, #26
 8009422:	fb02 f303 	mul.w	r3, r2, r3
 8009426:	3308      	adds	r3, #8
 8009428:	6a3a      	ldr	r2, [r7, #32]
 800942a:	4413      	add	r3, r2
 800942c:	3302      	adds	r3, #2
 800942e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009430:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009432:	69f8      	ldr	r0, [r7, #28]
 8009434:	f000 f87e 	bl	8009534 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009438:	2300      	movs	r3, #0
 800943a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800943e:	2300      	movs	r3, #0
 8009440:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009442:	e043      	b.n	80094cc <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009444:	f107 0316 	add.w	r3, r7, #22
 8009448:	4619      	mov	r1, r3
 800944a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800944c:	f000 f979 	bl	8009742 <USBH_GetNextDesc>
 8009450:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009454:	785b      	ldrb	r3, [r3, #1]
 8009456:	2b05      	cmp	r3, #5
 8009458:	d138      	bne.n	80094cc <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	795b      	ldrb	r3, [r3, #5]
 800945e:	2b01      	cmp	r3, #1
 8009460:	d10f      	bne.n	8009482 <USBH_ParseCfgDesc+0x13a>
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	799b      	ldrb	r3, [r3, #6]
 8009466:	2b02      	cmp	r3, #2
 8009468:	d10b      	bne.n	8009482 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	79db      	ldrb	r3, [r3, #7]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d10f      	bne.n	8009492 <USBH_ParseCfgDesc+0x14a>
 8009472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	2b09      	cmp	r3, #9
 8009478:	d00b      	beq.n	8009492 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800947a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947c:	2209      	movs	r2, #9
 800947e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009480:	e007      	b.n	8009492 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8009482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	2b07      	cmp	r3, #7
 8009488:	d004      	beq.n	8009494 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800948a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948c:	2207      	movs	r2, #7
 800948e:	701a      	strb	r2, [r3, #0]
 8009490:	e000      	b.n	8009494 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009492:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009498:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800949c:	3201      	adds	r2, #1
 800949e:	00d2      	lsls	r2, r2, #3
 80094a0:	211a      	movs	r1, #26
 80094a2:	fb01 f303 	mul.w	r3, r1, r3
 80094a6:	4413      	add	r3, r2
 80094a8:	3308      	adds	r3, #8
 80094aa:	6a3a      	ldr	r2, [r7, #32]
 80094ac:	4413      	add	r3, r2
 80094ae:	3304      	adds	r3, #4
 80094b0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80094b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094b4:	69b9      	ldr	r1, [r7, #24]
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f000 f86b 	bl	8009592 <USBH_ParseEPDesc>
 80094bc:	4603      	mov	r3, r0
 80094be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80094c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80094c6:	3301      	adds	r3, #1
 80094c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	791b      	ldrb	r3, [r3, #4]
 80094d0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d204      	bcs.n	80094e2 <USBH_ParseCfgDesc+0x19a>
 80094d8:	6a3b      	ldr	r3, [r7, #32]
 80094da:	885a      	ldrh	r2, [r3, #2]
 80094dc:	8afb      	ldrh	r3, [r7, #22]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d8b0      	bhi.n	8009444 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	791b      	ldrb	r3, [r3, #4]
 80094e6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d201      	bcs.n	80094f2 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80094ee:	2303      	movs	r3, #3
 80094f0:	e01c      	b.n	800952c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80094f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094f6:	3301      	adds	r3, #1
 80094f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80094fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009500:	2b01      	cmp	r3, #1
 8009502:	d805      	bhi.n	8009510 <USBH_ParseCfgDesc+0x1c8>
 8009504:	6a3b      	ldr	r3, [r7, #32]
 8009506:	885a      	ldrh	r2, [r3, #2]
 8009508:	8afb      	ldrh	r3, [r7, #22]
 800950a:	429a      	cmp	r2, r3
 800950c:	f63f af74 	bhi.w	80093f8 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009510:	6a3b      	ldr	r3, [r7, #32]
 8009512:	791b      	ldrb	r3, [r3, #4]
 8009514:	2b02      	cmp	r3, #2
 8009516:	bf28      	it	cs
 8009518:	2302      	movcs	r3, #2
 800951a:	b2db      	uxtb	r3, r3
 800951c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009520:	429a      	cmp	r2, r3
 8009522:	d201      	bcs.n	8009528 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8009524:	2303      	movs	r3, #3
 8009526:	e001      	b.n	800952c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8009528:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800952c:	4618      	mov	r0, r3
 800952e:	3730      	adds	r7, #48	; 0x30
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	781a      	ldrb	r2, [r3, #0]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	785a      	ldrb	r2, [r3, #1]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	789a      	ldrb	r2, [r3, #2]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	78da      	ldrb	r2, [r3, #3]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	791a      	ldrb	r2, [r3, #4]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	795a      	ldrb	r2, [r3, #5]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	799a      	ldrb	r2, [r3, #6]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	79da      	ldrb	r2, [r3, #7]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	7a1a      	ldrb	r2, [r3, #8]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	721a      	strb	r2, [r3, #8]
}
 8009586:	bf00      	nop
 8009588:	370c      	adds	r7, #12
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr

08009592 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8009592:	b480      	push	{r7}
 8009594:	b087      	sub	sp, #28
 8009596:	af00      	add	r7, sp, #0
 8009598:	60f8      	str	r0, [r7, #12]
 800959a:	60b9      	str	r1, [r7, #8]
 800959c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800959e:	2300      	movs	r3, #0
 80095a0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	781a      	ldrb	r2, [r3, #0]
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	785a      	ldrb	r2, [r3, #1]
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	789a      	ldrb	r2, [r3, #2]
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	78da      	ldrb	r2, [r3, #3]
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	3304      	adds	r3, #4
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	b29a      	uxth	r2, r3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	3305      	adds	r3, #5
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	021b      	lsls	r3, r3, #8
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	4313      	orrs	r3, r2
 80095d8:	b29a      	uxth	r2, r3
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	799a      	ldrb	r2, [r3, #6]
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	889b      	ldrh	r3, [r3, #4]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d102      	bne.n	80095f4 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80095ee:	2303      	movs	r3, #3
 80095f0:	75fb      	strb	r3, [r7, #23]
 80095f2:	e033      	b.n	800965c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	889b      	ldrh	r3, [r3, #4]
 80095f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80095fc:	f023 0307 	bic.w	r3, r3, #7
 8009600:	b29a      	uxth	r2, r3
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	889b      	ldrh	r3, [r3, #4]
 800960a:	b21a      	sxth	r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	3304      	adds	r3, #4
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	b299      	uxth	r1, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	3305      	adds	r3, #5
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	b29b      	uxth	r3, r3
 800961c:	021b      	lsls	r3, r3, #8
 800961e:	b29b      	uxth	r3, r3
 8009620:	430b      	orrs	r3, r1
 8009622:	b29b      	uxth	r3, r3
 8009624:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009628:	2b00      	cmp	r3, #0
 800962a:	d110      	bne.n	800964e <USBH_ParseEPDesc+0xbc>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	3304      	adds	r3, #4
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	b299      	uxth	r1, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	3305      	adds	r3, #5
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	b29b      	uxth	r3, r3
 800963c:	021b      	lsls	r3, r3, #8
 800963e:	b29b      	uxth	r3, r3
 8009640:	430b      	orrs	r3, r1
 8009642:	b29b      	uxth	r3, r3
 8009644:	b21b      	sxth	r3, r3
 8009646:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800964a:	b21b      	sxth	r3, r3
 800964c:	e001      	b.n	8009652 <USBH_ParseEPDesc+0xc0>
 800964e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009652:	4313      	orrs	r3, r2
 8009654:	b21b      	sxth	r3, r3
 8009656:	b29a      	uxth	r2, r3
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009662:	2b00      	cmp	r3, #0
 8009664:	d116      	bne.n	8009694 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	78db      	ldrb	r3, [r3, #3]
 800966a:	f003 0303 	and.w	r3, r3, #3
 800966e:	2b01      	cmp	r3, #1
 8009670:	d005      	beq.n	800967e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	78db      	ldrb	r3, [r3, #3]
 8009676:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800967a:	2b03      	cmp	r3, #3
 800967c:	d127      	bne.n	80096ce <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	799b      	ldrb	r3, [r3, #6]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d003      	beq.n	800968e <USBH_ParseEPDesc+0xfc>
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	799b      	ldrb	r3, [r3, #6]
 800968a:	2b10      	cmp	r3, #16
 800968c:	d91f      	bls.n	80096ce <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800968e:	2303      	movs	r3, #3
 8009690:	75fb      	strb	r3, [r7, #23]
 8009692:	e01c      	b.n	80096ce <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	78db      	ldrb	r3, [r3, #3]
 8009698:	f003 0303 	and.w	r3, r3, #3
 800969c:	2b01      	cmp	r3, #1
 800969e:	d10a      	bne.n	80096b6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	799b      	ldrb	r3, [r3, #6]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d003      	beq.n	80096b0 <USBH_ParseEPDesc+0x11e>
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	799b      	ldrb	r3, [r3, #6]
 80096ac:	2b10      	cmp	r3, #16
 80096ae:	d90e      	bls.n	80096ce <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80096b0:	2303      	movs	r3, #3
 80096b2:	75fb      	strb	r3, [r7, #23]
 80096b4:	e00b      	b.n	80096ce <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	78db      	ldrb	r3, [r3, #3]
 80096ba:	f003 0303 	and.w	r3, r3, #3
 80096be:	2b03      	cmp	r3, #3
 80096c0:	d105      	bne.n	80096ce <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	799b      	ldrb	r3, [r3, #6]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d101      	bne.n	80096ce <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80096ca:	2303      	movs	r3, #3
 80096cc:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80096ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	371c      	adds	r7, #28
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80096dc:	b480      	push	{r7}
 80096de:	b087      	sub	sp, #28
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	4613      	mov	r3, r2
 80096e8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	3301      	adds	r3, #1
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	2b03      	cmp	r3, #3
 80096f2:	d120      	bne.n	8009736 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	1e9a      	subs	r2, r3, #2
 80096fa:	88fb      	ldrh	r3, [r7, #6]
 80096fc:	4293      	cmp	r3, r2
 80096fe:	bf28      	it	cs
 8009700:	4613      	movcs	r3, r2
 8009702:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	3302      	adds	r3, #2
 8009708:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800970a:	2300      	movs	r3, #0
 800970c:	82fb      	strh	r3, [r7, #22]
 800970e:	e00b      	b.n	8009728 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009710:	8afb      	ldrh	r3, [r7, #22]
 8009712:	68fa      	ldr	r2, [r7, #12]
 8009714:	4413      	add	r3, r2
 8009716:	781a      	ldrb	r2, [r3, #0]
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	3301      	adds	r3, #1
 8009720:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009722:	8afb      	ldrh	r3, [r7, #22]
 8009724:	3302      	adds	r3, #2
 8009726:	82fb      	strh	r3, [r7, #22]
 8009728:	8afa      	ldrh	r2, [r7, #22]
 800972a:	8abb      	ldrh	r3, [r7, #20]
 800972c:	429a      	cmp	r2, r3
 800972e:	d3ef      	bcc.n	8009710 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	2200      	movs	r2, #0
 8009734:	701a      	strb	r2, [r3, #0]
  }
}
 8009736:	bf00      	nop
 8009738:	371c      	adds	r7, #28
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr

08009742 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009742:	b480      	push	{r7}
 8009744:	b085      	sub	sp, #20
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
 800974a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	881a      	ldrh	r2, [r3, #0]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	b29b      	uxth	r3, r3
 8009756:	4413      	add	r3, r2
 8009758:	b29a      	uxth	r2, r3
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	4413      	add	r3, r2
 8009768:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800976a:	68fb      	ldr	r3, [r7, #12]
}
 800976c:	4618      	mov	r0, r3
 800976e:	3714      	adds	r7, #20
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b086      	sub	sp, #24
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	4613      	mov	r3, r2
 8009784:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009786:	2301      	movs	r3, #1
 8009788:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	789b      	ldrb	r3, [r3, #2]
 800978e:	2b01      	cmp	r3, #1
 8009790:	d002      	beq.n	8009798 <USBH_CtlReq+0x20>
 8009792:	2b02      	cmp	r3, #2
 8009794:	d00f      	beq.n	80097b6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009796:	e027      	b.n	80097e8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	68ba      	ldr	r2, [r7, #8]
 800979c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	88fa      	ldrh	r2, [r7, #6]
 80097a2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2201      	movs	r2, #1
 80097a8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2202      	movs	r2, #2
 80097ae:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80097b0:	2301      	movs	r3, #1
 80097b2:	75fb      	strb	r3, [r7, #23]
      break;
 80097b4:	e018      	b.n	80097e8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80097b6:	68f8      	ldr	r0, [r7, #12]
 80097b8:	f000 f81c 	bl	80097f4 <USBH_HandleControl>
 80097bc:	4603      	mov	r3, r0
 80097be:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80097c0:	7dfb      	ldrb	r3, [r7, #23]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d002      	beq.n	80097cc <USBH_CtlReq+0x54>
 80097c6:	7dfb      	ldrb	r3, [r7, #23]
 80097c8:	2b03      	cmp	r3, #3
 80097ca:	d106      	bne.n	80097da <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2201      	movs	r2, #1
 80097d0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2200      	movs	r2, #0
 80097d6:	761a      	strb	r2, [r3, #24]
      break;
 80097d8:	e005      	b.n	80097e6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80097da:	7dfb      	ldrb	r3, [r7, #23]
 80097dc:	2b02      	cmp	r3, #2
 80097de:	d102      	bne.n	80097e6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2201      	movs	r2, #1
 80097e4:	709a      	strb	r2, [r3, #2]
      break;
 80097e6:	bf00      	nop
  }
  return status;
 80097e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3718      	adds	r7, #24
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
	...

080097f4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b086      	sub	sp, #24
 80097f8:	af02      	add	r7, sp, #8
 80097fa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80097fc:	2301      	movs	r3, #1
 80097fe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009800:	2300      	movs	r3, #0
 8009802:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	7e1b      	ldrb	r3, [r3, #24]
 8009808:	3b01      	subs	r3, #1
 800980a:	2b0a      	cmp	r3, #10
 800980c:	f200 8156 	bhi.w	8009abc <USBH_HandleControl+0x2c8>
 8009810:	a201      	add	r2, pc, #4	; (adr r2, 8009818 <USBH_HandleControl+0x24>)
 8009812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009816:	bf00      	nop
 8009818:	08009845 	.word	0x08009845
 800981c:	0800985f 	.word	0x0800985f
 8009820:	080098c9 	.word	0x080098c9
 8009824:	080098ef 	.word	0x080098ef
 8009828:	08009927 	.word	0x08009927
 800982c:	08009951 	.word	0x08009951
 8009830:	080099a3 	.word	0x080099a3
 8009834:	080099c5 	.word	0x080099c5
 8009838:	08009a01 	.word	0x08009a01
 800983c:	08009a27 	.word	0x08009a27
 8009840:	08009a65 	.word	0x08009a65
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f103 0110 	add.w	r1, r3, #16
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	795b      	ldrb	r3, [r3, #5]
 800984e:	461a      	mov	r2, r3
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 f943 	bl	8009adc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2202      	movs	r2, #2
 800985a:	761a      	strb	r2, [r3, #24]
      break;
 800985c:	e139      	b.n	8009ad2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	795b      	ldrb	r3, [r3, #5]
 8009862:	4619      	mov	r1, r3
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 fcc5 	bl	800a1f4 <USBH_LL_GetURBState>
 800986a:	4603      	mov	r3, r0
 800986c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800986e:	7bbb      	ldrb	r3, [r7, #14]
 8009870:	2b01      	cmp	r3, #1
 8009872:	d11e      	bne.n	80098b2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	7c1b      	ldrb	r3, [r3, #16]
 8009878:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800987c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	8adb      	ldrh	r3, [r3, #22]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00a      	beq.n	800989c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009886:	7b7b      	ldrb	r3, [r7, #13]
 8009888:	2b80      	cmp	r3, #128	; 0x80
 800988a:	d103      	bne.n	8009894 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2203      	movs	r2, #3
 8009890:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009892:	e115      	b.n	8009ac0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2205      	movs	r2, #5
 8009898:	761a      	strb	r2, [r3, #24]
      break;
 800989a:	e111      	b.n	8009ac0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800989c:	7b7b      	ldrb	r3, [r7, #13]
 800989e:	2b80      	cmp	r3, #128	; 0x80
 80098a0:	d103      	bne.n	80098aa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2209      	movs	r2, #9
 80098a6:	761a      	strb	r2, [r3, #24]
      break;
 80098a8:	e10a      	b.n	8009ac0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2207      	movs	r2, #7
 80098ae:	761a      	strb	r2, [r3, #24]
      break;
 80098b0:	e106      	b.n	8009ac0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80098b2:	7bbb      	ldrb	r3, [r7, #14]
 80098b4:	2b04      	cmp	r3, #4
 80098b6:	d003      	beq.n	80098c0 <USBH_HandleControl+0xcc>
 80098b8:	7bbb      	ldrb	r3, [r7, #14]
 80098ba:	2b02      	cmp	r3, #2
 80098bc:	f040 8100 	bne.w	8009ac0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	220b      	movs	r2, #11
 80098c4:	761a      	strb	r2, [r3, #24]
      break;
 80098c6:	e0fb      	b.n	8009ac0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80098ce:	b29a      	uxth	r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6899      	ldr	r1, [r3, #8]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	899a      	ldrh	r2, [r3, #12]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	791b      	ldrb	r3, [r3, #4]
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 f93a 	bl	8009b5a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2204      	movs	r2, #4
 80098ea:	761a      	strb	r2, [r3, #24]
      break;
 80098ec:	e0f1      	b.n	8009ad2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	791b      	ldrb	r3, [r3, #4]
 80098f2:	4619      	mov	r1, r3
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 fc7d 	bl	800a1f4 <USBH_LL_GetURBState>
 80098fa:	4603      	mov	r3, r0
 80098fc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80098fe:	7bbb      	ldrb	r3, [r7, #14]
 8009900:	2b01      	cmp	r3, #1
 8009902:	d102      	bne.n	800990a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2209      	movs	r2, #9
 8009908:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800990a:	7bbb      	ldrb	r3, [r7, #14]
 800990c:	2b05      	cmp	r3, #5
 800990e:	d102      	bne.n	8009916 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009910:	2303      	movs	r3, #3
 8009912:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009914:	e0d6      	b.n	8009ac4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009916:	7bbb      	ldrb	r3, [r7, #14]
 8009918:	2b04      	cmp	r3, #4
 800991a:	f040 80d3 	bne.w	8009ac4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	220b      	movs	r2, #11
 8009922:	761a      	strb	r2, [r3, #24]
      break;
 8009924:	e0ce      	b.n	8009ac4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6899      	ldr	r1, [r3, #8]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	899a      	ldrh	r2, [r3, #12]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	795b      	ldrb	r3, [r3, #5]
 8009932:	2001      	movs	r0, #1
 8009934:	9000      	str	r0, [sp, #0]
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 f8ea 	bl	8009b10 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009942:	b29a      	uxth	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2206      	movs	r2, #6
 800994c:	761a      	strb	r2, [r3, #24]
      break;
 800994e:	e0c0      	b.n	8009ad2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	795b      	ldrb	r3, [r3, #5]
 8009954:	4619      	mov	r1, r3
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 fc4c 	bl	800a1f4 <USBH_LL_GetURBState>
 800995c:	4603      	mov	r3, r0
 800995e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009960:	7bbb      	ldrb	r3, [r7, #14]
 8009962:	2b01      	cmp	r3, #1
 8009964:	d103      	bne.n	800996e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2207      	movs	r2, #7
 800996a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800996c:	e0ac      	b.n	8009ac8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800996e:	7bbb      	ldrb	r3, [r7, #14]
 8009970:	2b05      	cmp	r3, #5
 8009972:	d105      	bne.n	8009980 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	220c      	movs	r2, #12
 8009978:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800997a:	2303      	movs	r3, #3
 800997c:	73fb      	strb	r3, [r7, #15]
      break;
 800997e:	e0a3      	b.n	8009ac8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009980:	7bbb      	ldrb	r3, [r7, #14]
 8009982:	2b02      	cmp	r3, #2
 8009984:	d103      	bne.n	800998e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2205      	movs	r2, #5
 800998a:	761a      	strb	r2, [r3, #24]
      break;
 800998c:	e09c      	b.n	8009ac8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800998e:	7bbb      	ldrb	r3, [r7, #14]
 8009990:	2b04      	cmp	r3, #4
 8009992:	f040 8099 	bne.w	8009ac8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	220b      	movs	r2, #11
 800999a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800999c:	2302      	movs	r3, #2
 800999e:	73fb      	strb	r3, [r7, #15]
      break;
 80099a0:	e092      	b.n	8009ac8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	791b      	ldrb	r3, [r3, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	2100      	movs	r1, #0
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 f8d5 	bl	8009b5a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80099b6:	b29a      	uxth	r2, r3
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2208      	movs	r2, #8
 80099c0:	761a      	strb	r2, [r3, #24]

      break;
 80099c2:	e086      	b.n	8009ad2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	791b      	ldrb	r3, [r3, #4]
 80099c8:	4619      	mov	r1, r3
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 fc12 	bl	800a1f4 <USBH_LL_GetURBState>
 80099d0:	4603      	mov	r3, r0
 80099d2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80099d4:	7bbb      	ldrb	r3, [r7, #14]
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d105      	bne.n	80099e6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	220d      	movs	r2, #13
 80099de:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80099e0:	2300      	movs	r3, #0
 80099e2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80099e4:	e072      	b.n	8009acc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80099e6:	7bbb      	ldrb	r3, [r7, #14]
 80099e8:	2b04      	cmp	r3, #4
 80099ea:	d103      	bne.n	80099f4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	220b      	movs	r2, #11
 80099f0:	761a      	strb	r2, [r3, #24]
      break;
 80099f2:	e06b      	b.n	8009acc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80099f4:	7bbb      	ldrb	r3, [r7, #14]
 80099f6:	2b05      	cmp	r3, #5
 80099f8:	d168      	bne.n	8009acc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80099fa:	2303      	movs	r3, #3
 80099fc:	73fb      	strb	r3, [r7, #15]
      break;
 80099fe:	e065      	b.n	8009acc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	795b      	ldrb	r3, [r3, #5]
 8009a04:	2201      	movs	r2, #1
 8009a06:	9200      	str	r2, [sp, #0]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 f87f 	bl	8009b10 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009a18:	b29a      	uxth	r2, r3
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	220a      	movs	r2, #10
 8009a22:	761a      	strb	r2, [r3, #24]
      break;
 8009a24:	e055      	b.n	8009ad2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	795b      	ldrb	r3, [r3, #5]
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 fbe1 	bl	800a1f4 <USBH_LL_GetURBState>
 8009a32:	4603      	mov	r3, r0
 8009a34:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009a36:	7bbb      	ldrb	r3, [r7, #14]
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d105      	bne.n	8009a48 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	220d      	movs	r2, #13
 8009a44:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009a46:	e043      	b.n	8009ad0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009a48:	7bbb      	ldrb	r3, [r7, #14]
 8009a4a:	2b02      	cmp	r3, #2
 8009a4c:	d103      	bne.n	8009a56 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2209      	movs	r2, #9
 8009a52:	761a      	strb	r2, [r3, #24]
      break;
 8009a54:	e03c      	b.n	8009ad0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009a56:	7bbb      	ldrb	r3, [r7, #14]
 8009a58:	2b04      	cmp	r3, #4
 8009a5a:	d139      	bne.n	8009ad0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	220b      	movs	r2, #11
 8009a60:	761a      	strb	r2, [r3, #24]
      break;
 8009a62:	e035      	b.n	8009ad0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	7e5b      	ldrb	r3, [r3, #25]
 8009a68:	3301      	adds	r3, #1
 8009a6a:	b2da      	uxtb	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	765a      	strb	r2, [r3, #25]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	7e5b      	ldrb	r3, [r3, #25]
 8009a74:	2b02      	cmp	r3, #2
 8009a76:	d806      	bhi.n	8009a86 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2201      	movs	r2, #1
 8009a82:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009a84:	e025      	b.n	8009ad2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a8c:	2106      	movs	r1, #6
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	795b      	ldrb	r3, [r3, #5]
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 f90c 	bl	8009cbc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	791b      	ldrb	r3, [r3, #4]
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 f906 	bl	8009cbc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009ab6:	2302      	movs	r3, #2
 8009ab8:	73fb      	strb	r3, [r7, #15]
      break;
 8009aba:	e00a      	b.n	8009ad2 <USBH_HandleControl+0x2de>

    default:
      break;
 8009abc:	bf00      	nop
 8009abe:	e008      	b.n	8009ad2 <USBH_HandleControl+0x2de>
      break;
 8009ac0:	bf00      	nop
 8009ac2:	e006      	b.n	8009ad2 <USBH_HandleControl+0x2de>
      break;
 8009ac4:	bf00      	nop
 8009ac6:	e004      	b.n	8009ad2 <USBH_HandleControl+0x2de>
      break;
 8009ac8:	bf00      	nop
 8009aca:	e002      	b.n	8009ad2 <USBH_HandleControl+0x2de>
      break;
 8009acc:	bf00      	nop
 8009ace:	e000      	b.n	8009ad2 <USBH_HandleControl+0x2de>
      break;
 8009ad0:	bf00      	nop
  }

  return status;
 8009ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3710      	adds	r7, #16
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b088      	sub	sp, #32
 8009ae0:	af04      	add	r7, sp, #16
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009aea:	79f9      	ldrb	r1, [r7, #7]
 8009aec:	2300      	movs	r3, #0
 8009aee:	9303      	str	r3, [sp, #12]
 8009af0:	2308      	movs	r3, #8
 8009af2:	9302      	str	r3, [sp, #8]
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	9301      	str	r3, [sp, #4]
 8009af8:	2300      	movs	r3, #0
 8009afa:	9300      	str	r3, [sp, #0]
 8009afc:	2300      	movs	r3, #0
 8009afe:	2200      	movs	r2, #0
 8009b00:	68f8      	ldr	r0, [r7, #12]
 8009b02:	f000 fb46 	bl	800a192 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b088      	sub	sp, #32
 8009b14:	af04      	add	r7, sp, #16
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	4611      	mov	r1, r2
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	460b      	mov	r3, r1
 8009b20:	80fb      	strh	r3, [r7, #6]
 8009b22:	4613      	mov	r3, r2
 8009b24:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d001      	beq.n	8009b34 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009b30:	2300      	movs	r3, #0
 8009b32:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009b34:	7979      	ldrb	r1, [r7, #5]
 8009b36:	7e3b      	ldrb	r3, [r7, #24]
 8009b38:	9303      	str	r3, [sp, #12]
 8009b3a:	88fb      	ldrh	r3, [r7, #6]
 8009b3c:	9302      	str	r3, [sp, #8]
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	9301      	str	r3, [sp, #4]
 8009b42:	2301      	movs	r3, #1
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	2300      	movs	r3, #0
 8009b48:	2200      	movs	r2, #0
 8009b4a:	68f8      	ldr	r0, [r7, #12]
 8009b4c:	f000 fb21 	bl	800a192 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009b50:	2300      	movs	r3, #0
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b088      	sub	sp, #32
 8009b5e:	af04      	add	r7, sp, #16
 8009b60:	60f8      	str	r0, [r7, #12]
 8009b62:	60b9      	str	r1, [r7, #8]
 8009b64:	4611      	mov	r1, r2
 8009b66:	461a      	mov	r2, r3
 8009b68:	460b      	mov	r3, r1
 8009b6a:	80fb      	strh	r3, [r7, #6]
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009b70:	7979      	ldrb	r1, [r7, #5]
 8009b72:	2300      	movs	r3, #0
 8009b74:	9303      	str	r3, [sp, #12]
 8009b76:	88fb      	ldrh	r3, [r7, #6]
 8009b78:	9302      	str	r3, [sp, #8]
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	9301      	str	r3, [sp, #4]
 8009b7e:	2301      	movs	r3, #1
 8009b80:	9300      	str	r3, [sp, #0]
 8009b82:	2300      	movs	r3, #0
 8009b84:	2201      	movs	r2, #1
 8009b86:	68f8      	ldr	r0, [r7, #12]
 8009b88:	f000 fb03 	bl	800a192 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009b8c:	2300      	movs	r3, #0

}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b088      	sub	sp, #32
 8009b9a:	af04      	add	r7, sp, #16
 8009b9c:	60f8      	str	r0, [r7, #12]
 8009b9e:	60b9      	str	r1, [r7, #8]
 8009ba0:	4611      	mov	r1, r2
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	80fb      	strh	r3, [r7, #6]
 8009ba8:	4613      	mov	r3, r2
 8009baa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d001      	beq.n	8009bba <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009bba:	7979      	ldrb	r1, [r7, #5]
 8009bbc:	7e3b      	ldrb	r3, [r7, #24]
 8009bbe:	9303      	str	r3, [sp, #12]
 8009bc0:	88fb      	ldrh	r3, [r7, #6]
 8009bc2:	9302      	str	r3, [sp, #8]
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	9301      	str	r3, [sp, #4]
 8009bc8:	2301      	movs	r3, #1
 8009bca:	9300      	str	r3, [sp, #0]
 8009bcc:	2302      	movs	r3, #2
 8009bce:	2200      	movs	r2, #0
 8009bd0:	68f8      	ldr	r0, [r7, #12]
 8009bd2:	f000 fade 	bl	800a192 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009bd6:	2300      	movs	r3, #0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3710      	adds	r7, #16
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b088      	sub	sp, #32
 8009be4:	af04      	add	r7, sp, #16
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	4611      	mov	r1, r2
 8009bec:	461a      	mov	r2, r3
 8009bee:	460b      	mov	r3, r1
 8009bf0:	80fb      	strh	r3, [r7, #6]
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009bf6:	7979      	ldrb	r1, [r7, #5]
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	9303      	str	r3, [sp, #12]
 8009bfc:	88fb      	ldrh	r3, [r7, #6]
 8009bfe:	9302      	str	r3, [sp, #8]
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	9301      	str	r3, [sp, #4]
 8009c04:	2301      	movs	r3, #1
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	2302      	movs	r3, #2
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	68f8      	ldr	r0, [r7, #12]
 8009c0e:	f000 fac0 	bl	800a192 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009c12:	2300      	movs	r3, #0
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3710      	adds	r7, #16
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b086      	sub	sp, #24
 8009c20:	af04      	add	r7, sp, #16
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	4608      	mov	r0, r1
 8009c26:	4611      	mov	r1, r2
 8009c28:	461a      	mov	r2, r3
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	70fb      	strb	r3, [r7, #3]
 8009c2e:	460b      	mov	r3, r1
 8009c30:	70bb      	strb	r3, [r7, #2]
 8009c32:	4613      	mov	r3, r2
 8009c34:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009c36:	7878      	ldrb	r0, [r7, #1]
 8009c38:	78ba      	ldrb	r2, [r7, #2]
 8009c3a:	78f9      	ldrb	r1, [r7, #3]
 8009c3c:	8b3b      	ldrh	r3, [r7, #24]
 8009c3e:	9302      	str	r3, [sp, #8]
 8009c40:	7d3b      	ldrb	r3, [r7, #20]
 8009c42:	9301      	str	r3, [sp, #4]
 8009c44:	7c3b      	ldrb	r3, [r7, #16]
 8009c46:	9300      	str	r3, [sp, #0]
 8009c48:	4603      	mov	r3, r0
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 fa53 	bl	800a0f6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3708      	adds	r7, #8
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b082      	sub	sp, #8
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
 8009c62:	460b      	mov	r3, r1
 8009c64:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009c66:	78fb      	ldrb	r3, [r7, #3]
 8009c68:	4619      	mov	r1, r3
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 fa72 	bl	800a154 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009c70:	2300      	movs	r3, #0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3708      	adds	r7, #8
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b084      	sub	sp, #16
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
 8009c82:	460b      	mov	r3, r1
 8009c84:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 f836 	bl	8009cf8 <USBH_GetFreePipe>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009c90:	89fb      	ldrh	r3, [r7, #14]
 8009c92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d00a      	beq.n	8009cb0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009c9a:	78fa      	ldrb	r2, [r7, #3]
 8009c9c:	89fb      	ldrh	r3, [r7, #14]
 8009c9e:	f003 030f 	and.w	r3, r3, #15
 8009ca2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ca6:	6879      	ldr	r1, [r7, #4]
 8009ca8:	33e0      	adds	r3, #224	; 0xe0
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	440b      	add	r3, r1
 8009cae:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009cb0:	89fb      	ldrh	r3, [r7, #14]
 8009cb2:	b2db      	uxtb	r3, r3
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3710      	adds	r7, #16
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b083      	sub	sp, #12
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009cc8:	78fb      	ldrb	r3, [r7, #3]
 8009cca:	2b0f      	cmp	r3, #15
 8009ccc:	d80d      	bhi.n	8009cea <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009cce:	78fb      	ldrb	r3, [r7, #3]
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	33e0      	adds	r3, #224	; 0xe0
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	4413      	add	r3, r2
 8009cd8:	685a      	ldr	r2, [r3, #4]
 8009cda:	78fb      	ldrb	r3, [r7, #3]
 8009cdc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009ce0:	6879      	ldr	r1, [r7, #4]
 8009ce2:	33e0      	adds	r3, #224	; 0xe0
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	440b      	add	r3, r1
 8009ce8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009cea:	2300      	movs	r3, #0
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	370c      	adds	r7, #12
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr

08009cf8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b085      	sub	sp, #20
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009d00:	2300      	movs	r3, #0
 8009d02:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009d04:	2300      	movs	r3, #0
 8009d06:	73fb      	strb	r3, [r7, #15]
 8009d08:	e00f      	b.n	8009d2a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009d0a:	7bfb      	ldrb	r3, [r7, #15]
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	33e0      	adds	r3, #224	; 0xe0
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	4413      	add	r3, r2
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d102      	bne.n	8009d24 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009d1e:	7bfb      	ldrb	r3, [r7, #15]
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	e007      	b.n	8009d34 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009d24:	7bfb      	ldrb	r3, [r7, #15]
 8009d26:	3301      	adds	r3, #1
 8009d28:	73fb      	strb	r3, [r7, #15]
 8009d2a:	7bfb      	ldrb	r3, [r7, #15]
 8009d2c:	2b0f      	cmp	r3, #15
 8009d2e:	d9ec      	bls.n	8009d0a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009d30:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3714      	adds	r7, #20
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr

08009d40 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009d44:	2201      	movs	r2, #1
 8009d46:	490e      	ldr	r1, [pc, #56]	; (8009d80 <MX_USB_HOST_Init+0x40>)
 8009d48:	480e      	ldr	r0, [pc, #56]	; (8009d84 <MX_USB_HOST_Init+0x44>)
 8009d4a:	f7fe fba7 	bl	800849c <USBH_Init>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d001      	beq.n	8009d58 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009d54:	f7f6 fd2a 	bl	80007ac <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009d58:	490b      	ldr	r1, [pc, #44]	; (8009d88 <MX_USB_HOST_Init+0x48>)
 8009d5a:	480a      	ldr	r0, [pc, #40]	; (8009d84 <MX_USB_HOST_Init+0x44>)
 8009d5c:	f7fe fc2c 	bl	80085b8 <USBH_RegisterClass>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d001      	beq.n	8009d6a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009d66:	f7f6 fd21 	bl	80007ac <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009d6a:	4806      	ldr	r0, [pc, #24]	; (8009d84 <MX_USB_HOST_Init+0x44>)
 8009d6c:	f7fe fcb0 	bl	80086d0 <USBH_Start>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d001      	beq.n	8009d7a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009d76:	f7f6 fd19 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009d7a:	bf00      	nop
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	08009da1 	.word	0x08009da1
 8009d84:	20000210 	.word	0x20000210
 8009d88:	20000070 	.word	0x20000070

08009d8c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009d90:	4802      	ldr	r0, [pc, #8]	; (8009d9c <MX_USB_HOST_Process+0x10>)
 8009d92:	f7fe fcad 	bl	80086f0 <USBH_Process>
}
 8009d96:	bf00      	nop
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	20000210 	.word	0x20000210

08009da0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	460b      	mov	r3, r1
 8009daa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009dac:	78fb      	ldrb	r3, [r7, #3]
 8009dae:	3b01      	subs	r3, #1
 8009db0:	2b04      	cmp	r3, #4
 8009db2:	d819      	bhi.n	8009de8 <USBH_UserProcess+0x48>
 8009db4:	a201      	add	r2, pc, #4	; (adr r2, 8009dbc <USBH_UserProcess+0x1c>)
 8009db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dba:	bf00      	nop
 8009dbc:	08009de9 	.word	0x08009de9
 8009dc0:	08009dd9 	.word	0x08009dd9
 8009dc4:	08009de9 	.word	0x08009de9
 8009dc8:	08009de1 	.word	0x08009de1
 8009dcc:	08009dd1 	.word	0x08009dd1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009dd0:	4b09      	ldr	r3, [pc, #36]	; (8009df8 <USBH_UserProcess+0x58>)
 8009dd2:	2203      	movs	r2, #3
 8009dd4:	701a      	strb	r2, [r3, #0]
  break;
 8009dd6:	e008      	b.n	8009dea <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009dd8:	4b07      	ldr	r3, [pc, #28]	; (8009df8 <USBH_UserProcess+0x58>)
 8009dda:	2202      	movs	r2, #2
 8009ddc:	701a      	strb	r2, [r3, #0]
  break;
 8009dde:	e004      	b.n	8009dea <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009de0:	4b05      	ldr	r3, [pc, #20]	; (8009df8 <USBH_UserProcess+0x58>)
 8009de2:	2201      	movs	r2, #1
 8009de4:	701a      	strb	r2, [r3, #0]
  break;
 8009de6:	e000      	b.n	8009dea <USBH_UserProcess+0x4a>

  default:
  break;
 8009de8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009dea:	bf00      	nop
 8009dec:	370c      	adds	r7, #12
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	200005e8 	.word	0x200005e8

08009dfc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b08a      	sub	sp, #40	; 0x28
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e04:	f107 0314 	add.w	r3, r7, #20
 8009e08:	2200      	movs	r2, #0
 8009e0a:	601a      	str	r2, [r3, #0]
 8009e0c:	605a      	str	r2, [r3, #4]
 8009e0e:	609a      	str	r2, [r3, #8]
 8009e10:	60da      	str	r2, [r3, #12]
 8009e12:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e1c:	d147      	bne.n	8009eae <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e1e:	2300      	movs	r3, #0
 8009e20:	613b      	str	r3, [r7, #16]
 8009e22:	4b25      	ldr	r3, [pc, #148]	; (8009eb8 <HAL_HCD_MspInit+0xbc>)
 8009e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e26:	4a24      	ldr	r2, [pc, #144]	; (8009eb8 <HAL_HCD_MspInit+0xbc>)
 8009e28:	f043 0301 	orr.w	r3, r3, #1
 8009e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8009e2e:	4b22      	ldr	r3, [pc, #136]	; (8009eb8 <HAL_HCD_MspInit+0xbc>)
 8009e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e32:	f003 0301 	and.w	r3, r3, #1
 8009e36:	613b      	str	r3, [r7, #16]
 8009e38:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009e3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009e40:	2300      	movs	r3, #0
 8009e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e44:	2300      	movs	r3, #0
 8009e46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009e48:	f107 0314 	add.w	r3, r7, #20
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	481b      	ldr	r0, [pc, #108]	; (8009ebc <HAL_HCD_MspInit+0xc0>)
 8009e50:	f7f9 f8e0 	bl	8003014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009e54:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e5a:	2302      	movs	r3, #2
 8009e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e62:	2300      	movs	r3, #0
 8009e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009e66:	230a      	movs	r3, #10
 8009e68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e6a:	f107 0314 	add.w	r3, r7, #20
 8009e6e:	4619      	mov	r1, r3
 8009e70:	4812      	ldr	r0, [pc, #72]	; (8009ebc <HAL_HCD_MspInit+0xc0>)
 8009e72:	f7f9 f8cf 	bl	8003014 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009e76:	4b10      	ldr	r3, [pc, #64]	; (8009eb8 <HAL_HCD_MspInit+0xbc>)
 8009e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e7a:	4a0f      	ldr	r2, [pc, #60]	; (8009eb8 <HAL_HCD_MspInit+0xbc>)
 8009e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e80:	6353      	str	r3, [r2, #52]	; 0x34
 8009e82:	2300      	movs	r3, #0
 8009e84:	60fb      	str	r3, [r7, #12]
 8009e86:	4b0c      	ldr	r3, [pc, #48]	; (8009eb8 <HAL_HCD_MspInit+0xbc>)
 8009e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e8a:	4a0b      	ldr	r2, [pc, #44]	; (8009eb8 <HAL_HCD_MspInit+0xbc>)
 8009e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009e90:	6453      	str	r3, [r2, #68]	; 0x44
 8009e92:	4b09      	ldr	r3, [pc, #36]	; (8009eb8 <HAL_HCD_MspInit+0xbc>)
 8009e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e9a:	60fb      	str	r3, [r7, #12]
 8009e9c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	2100      	movs	r1, #0
 8009ea2:	2043      	movs	r0, #67	; 0x43
 8009ea4:	f7f9 f87f 	bl	8002fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009ea8:	2043      	movs	r0, #67	; 0x43
 8009eaa:	f7f9 f898 	bl	8002fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009eae:	bf00      	nop
 8009eb0:	3728      	adds	r7, #40	; 0x28
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	40023800 	.word	0x40023800
 8009ebc:	40020000 	.word	0x40020000

08009ec0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7fe ffed 	bl	8008eae <USBH_LL_IncTimer>
}
 8009ed4:	bf00      	nop
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7ff f825 	bl	8008f3a <USBH_LL_Connect>
}
 8009ef0:	bf00      	nop
 8009ef2:	3708      	adds	r7, #8
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7ff f82e 	bl	8008f68 <USBH_LL_Disconnect>
}
 8009f0c:	bf00      	nop
 8009f0e:	3708      	adds	r7, #8
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	70fb      	strb	r3, [r7, #3]
 8009f20:	4613      	mov	r3, r2
 8009f22:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009f24:	bf00      	nop
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7fe ffdf 	bl	8008f02 <USBH_LL_PortEnabled>
}
 8009f44:	bf00      	nop
 8009f46:	3708      	adds	r7, #8
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7fe ffdf 	bl	8008f1e <USBH_LL_PortDisabled>
}
 8009f60:	bf00      	nop
 8009f62:	3708      	adds	r7, #8
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d12a      	bne.n	8009fd0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009f7a:	4a18      	ldr	r2, [pc, #96]	; (8009fdc <USBH_LL_Init+0x74>)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4a15      	ldr	r2, [pc, #84]	; (8009fdc <USBH_LL_Init+0x74>)
 8009f86:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009f8a:	4b14      	ldr	r3, [pc, #80]	; (8009fdc <USBH_LL_Init+0x74>)
 8009f8c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009f90:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009f92:	4b12      	ldr	r3, [pc, #72]	; (8009fdc <USBH_LL_Init+0x74>)
 8009f94:	2208      	movs	r2, #8
 8009f96:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009f98:	4b10      	ldr	r3, [pc, #64]	; (8009fdc <USBH_LL_Init+0x74>)
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009f9e:	4b0f      	ldr	r3, [pc, #60]	; (8009fdc <USBH_LL_Init+0x74>)
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009fa4:	4b0d      	ldr	r3, [pc, #52]	; (8009fdc <USBH_LL_Init+0x74>)
 8009fa6:	2202      	movs	r2, #2
 8009fa8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009faa:	4b0c      	ldr	r3, [pc, #48]	; (8009fdc <USBH_LL_Init+0x74>)
 8009fac:	2200      	movs	r2, #0
 8009fae:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009fb0:	480a      	ldr	r0, [pc, #40]	; (8009fdc <USBH_LL_Init+0x74>)
 8009fb2:	f7f9 fae0 	bl	8003576 <HAL_HCD_Init>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d001      	beq.n	8009fc0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009fbc:	f7f6 fbf6 	bl	80007ac <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009fc0:	4806      	ldr	r0, [pc, #24]	; (8009fdc <USBH_LL_Init+0x74>)
 8009fc2:	f7f9 fec4 	bl	8003d4e <HAL_HCD_GetCurrentFrame>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	4619      	mov	r1, r3
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f7fe ff60 	bl	8008e90 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009fd0:	2300      	movs	r3, #0
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3708      	adds	r7, #8
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	200005ec 	.word	0x200005ec

08009fe0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009fec:	2300      	movs	r3, #0
 8009fee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7f9 fe33 	bl	8003c62 <HAL_HCD_Start>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a000:	7bfb      	ldrb	r3, [r7, #15]
 800a002:	4618      	mov	r0, r3
 800a004:	f000 f95c 	bl	800a2c0 <USBH_Get_USB_Status>
 800a008:	4603      	mov	r3, r0
 800a00a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a00c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}

0800a016 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a016:	b580      	push	{r7, lr}
 800a018:	b084      	sub	sp, #16
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a01e:	2300      	movs	r3, #0
 800a020:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a022:	2300      	movs	r3, #0
 800a024:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7f9 fe3b 	bl	8003ca8 <HAL_HCD_Stop>
 800a032:	4603      	mov	r3, r0
 800a034:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a036:	7bfb      	ldrb	r3, [r7, #15]
 800a038:	4618      	mov	r0, r3
 800a03a:	f000 f941 	bl	800a2c0 <USBH_Get_USB_Status>
 800a03e:	4603      	mov	r3, r0
 800a040:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a042:	7bbb      	ldrb	r3, [r7, #14]
}
 800a044:	4618      	mov	r0, r3
 800a046:	3710      	adds	r7, #16
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a054:	2301      	movs	r3, #1
 800a056:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a05e:	4618      	mov	r0, r3
 800a060:	f7f9 fe83 	bl	8003d6a <HAL_HCD_GetCurrentSpeed>
 800a064:	4603      	mov	r3, r0
 800a066:	2b02      	cmp	r3, #2
 800a068:	d00c      	beq.n	800a084 <USBH_LL_GetSpeed+0x38>
 800a06a:	2b02      	cmp	r3, #2
 800a06c:	d80d      	bhi.n	800a08a <USBH_LL_GetSpeed+0x3e>
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d002      	beq.n	800a078 <USBH_LL_GetSpeed+0x2c>
 800a072:	2b01      	cmp	r3, #1
 800a074:	d003      	beq.n	800a07e <USBH_LL_GetSpeed+0x32>
 800a076:	e008      	b.n	800a08a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a078:	2300      	movs	r3, #0
 800a07a:	73fb      	strb	r3, [r7, #15]
    break;
 800a07c:	e008      	b.n	800a090 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a07e:	2301      	movs	r3, #1
 800a080:	73fb      	strb	r3, [r7, #15]
    break;
 800a082:	e005      	b.n	800a090 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a084:	2302      	movs	r3, #2
 800a086:	73fb      	strb	r3, [r7, #15]
    break;
 800a088:	e002      	b.n	800a090 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a08a:	2301      	movs	r3, #1
 800a08c:	73fb      	strb	r3, [r7, #15]
    break;
 800a08e:	bf00      	nop
  }
  return  speed;
 800a090:	7bfb      	ldrb	r3, [r7, #15]
}
 800a092:	4618      	mov	r0, r3
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b084      	sub	sp, #16
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7f9 fe16 	bl	8003ce2 <HAL_HCD_ResetPort>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a0ba:	7bfb      	ldrb	r3, [r7, #15]
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f000 f8ff 	bl	800a2c0 <USBH_Get_USB_Status>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3710      	adds	r7, #16
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	460b      	mov	r3, r1
 800a0da:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a0e2:	78fa      	ldrb	r2, [r7, #3]
 800a0e4:	4611      	mov	r1, r2
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7f9 fe1d 	bl	8003d26 <HAL_HCD_HC_GetXferCount>
 800a0ec:	4603      	mov	r3, r0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3708      	adds	r7, #8
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a0f6:	b590      	push	{r4, r7, lr}
 800a0f8:	b089      	sub	sp, #36	; 0x24
 800a0fa:	af04      	add	r7, sp, #16
 800a0fc:	6078      	str	r0, [r7, #4]
 800a0fe:	4608      	mov	r0, r1
 800a100:	4611      	mov	r1, r2
 800a102:	461a      	mov	r2, r3
 800a104:	4603      	mov	r3, r0
 800a106:	70fb      	strb	r3, [r7, #3]
 800a108:	460b      	mov	r3, r1
 800a10a:	70bb      	strb	r3, [r7, #2]
 800a10c:	4613      	mov	r3, r2
 800a10e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a110:	2300      	movs	r3, #0
 800a112:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a114:	2300      	movs	r3, #0
 800a116:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a11e:	787c      	ldrb	r4, [r7, #1]
 800a120:	78ba      	ldrb	r2, [r7, #2]
 800a122:	78f9      	ldrb	r1, [r7, #3]
 800a124:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a126:	9302      	str	r3, [sp, #8]
 800a128:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a12c:	9301      	str	r3, [sp, #4]
 800a12e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a132:	9300      	str	r3, [sp, #0]
 800a134:	4623      	mov	r3, r4
 800a136:	f7f9 fa80 	bl	800363a <HAL_HCD_HC_Init>
 800a13a:	4603      	mov	r3, r0
 800a13c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a13e:	7bfb      	ldrb	r3, [r7, #15]
 800a140:	4618      	mov	r0, r3
 800a142:	f000 f8bd 	bl	800a2c0 <USBH_Get_USB_Status>
 800a146:	4603      	mov	r3, r0
 800a148:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a14a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3714      	adds	r7, #20
 800a150:	46bd      	mov	sp, r7
 800a152:	bd90      	pop	{r4, r7, pc}

0800a154 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	460b      	mov	r3, r1
 800a15e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a160:	2300      	movs	r3, #0
 800a162:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a164:	2300      	movs	r3, #0
 800a166:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a16e:	78fa      	ldrb	r2, [r7, #3]
 800a170:	4611      	mov	r1, r2
 800a172:	4618      	mov	r0, r3
 800a174:	f7f9 faf0 	bl	8003758 <HAL_HCD_HC_Halt>
 800a178:	4603      	mov	r3, r0
 800a17a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a17c:	7bfb      	ldrb	r3, [r7, #15]
 800a17e:	4618      	mov	r0, r3
 800a180:	f000 f89e 	bl	800a2c0 <USBH_Get_USB_Status>
 800a184:	4603      	mov	r3, r0
 800a186:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a188:	7bbb      	ldrb	r3, [r7, #14]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3710      	adds	r7, #16
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a192:	b590      	push	{r4, r7, lr}
 800a194:	b089      	sub	sp, #36	; 0x24
 800a196:	af04      	add	r7, sp, #16
 800a198:	6078      	str	r0, [r7, #4]
 800a19a:	4608      	mov	r0, r1
 800a19c:	4611      	mov	r1, r2
 800a19e:	461a      	mov	r2, r3
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	70fb      	strb	r3, [r7, #3]
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	70bb      	strb	r3, [r7, #2]
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a1ba:	787c      	ldrb	r4, [r7, #1]
 800a1bc:	78ba      	ldrb	r2, [r7, #2]
 800a1be:	78f9      	ldrb	r1, [r7, #3]
 800a1c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a1c4:	9303      	str	r3, [sp, #12]
 800a1c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a1c8:	9302      	str	r3, [sp, #8]
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1cc:	9301      	str	r3, [sp, #4]
 800a1ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a1d2:	9300      	str	r3, [sp, #0]
 800a1d4:	4623      	mov	r3, r4
 800a1d6:	f7f9 fae3 	bl	80037a0 <HAL_HCD_HC_SubmitRequest>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a1de:	7bfb      	ldrb	r3, [r7, #15]
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f000 f86d 	bl	800a2c0 <USBH_Get_USB_Status>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3714      	adds	r7, #20
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd90      	pop	{r4, r7, pc}

0800a1f4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a206:	78fa      	ldrb	r2, [r7, #3]
 800a208:	4611      	mov	r1, r2
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7f9 fd77 	bl	8003cfe <HAL_HCD_HC_GetURBState>
 800a210:	4603      	mov	r3, r0
}
 800a212:	4618      	mov	r0, r3
 800a214:	3708      	adds	r7, #8
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a21a:	b580      	push	{r7, lr}
 800a21c:	b082      	sub	sp, #8
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
 800a222:	460b      	mov	r3, r1
 800a224:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d103      	bne.n	800a238 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a230:	78fb      	ldrb	r3, [r7, #3]
 800a232:	4618      	mov	r0, r3
 800a234:	f000 f870 	bl	800a318 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a238:	20c8      	movs	r0, #200	; 0xc8
 800a23a:	f7f8 fdb5 	bl	8002da8 <HAL_Delay>
  return USBH_OK;
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	3708      	adds	r7, #8
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a248:	b480      	push	{r7}
 800a24a:	b085      	sub	sp, #20
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	460b      	mov	r3, r1
 800a252:	70fb      	strb	r3, [r7, #3]
 800a254:	4613      	mov	r3, r2
 800a256:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a25e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a260:	78fb      	ldrb	r3, [r7, #3]
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	212c      	movs	r1, #44	; 0x2c
 800a266:	fb01 f303 	mul.w	r3, r1, r3
 800a26a:	4413      	add	r3, r2
 800a26c:	333b      	adds	r3, #59	; 0x3b
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d009      	beq.n	800a288 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a274:	78fb      	ldrb	r3, [r7, #3]
 800a276:	68fa      	ldr	r2, [r7, #12]
 800a278:	212c      	movs	r1, #44	; 0x2c
 800a27a:	fb01 f303 	mul.w	r3, r1, r3
 800a27e:	4413      	add	r3, r2
 800a280:	3354      	adds	r3, #84	; 0x54
 800a282:	78ba      	ldrb	r2, [r7, #2]
 800a284:	701a      	strb	r2, [r3, #0]
 800a286:	e008      	b.n	800a29a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a288:	78fb      	ldrb	r3, [r7, #3]
 800a28a:	68fa      	ldr	r2, [r7, #12]
 800a28c:	212c      	movs	r1, #44	; 0x2c
 800a28e:	fb01 f303 	mul.w	r3, r1, r3
 800a292:	4413      	add	r3, r2
 800a294:	3355      	adds	r3, #85	; 0x55
 800a296:	78ba      	ldrb	r2, [r7, #2]
 800a298:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3714      	adds	r7, #20
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f7f8 fd79 	bl	8002da8 <HAL_Delay>
}
 800a2b6:	bf00      	nop
 800a2b8:	3708      	adds	r7, #8
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
	...

0800a2c0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b085      	sub	sp, #20
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a2ce:	79fb      	ldrb	r3, [r7, #7]
 800a2d0:	2b03      	cmp	r3, #3
 800a2d2:	d817      	bhi.n	800a304 <USBH_Get_USB_Status+0x44>
 800a2d4:	a201      	add	r2, pc, #4	; (adr r2, 800a2dc <USBH_Get_USB_Status+0x1c>)
 800a2d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2da:	bf00      	nop
 800a2dc:	0800a2ed 	.word	0x0800a2ed
 800a2e0:	0800a2f3 	.word	0x0800a2f3
 800a2e4:	0800a2f9 	.word	0x0800a2f9
 800a2e8:	0800a2ff 	.word	0x0800a2ff
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a2f0:	e00b      	b.n	800a30a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a2f2:	2302      	movs	r3, #2
 800a2f4:	73fb      	strb	r3, [r7, #15]
    break;
 800a2f6:	e008      	b.n	800a30a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	73fb      	strb	r3, [r7, #15]
    break;
 800a2fc:	e005      	b.n	800a30a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a2fe:	2302      	movs	r3, #2
 800a300:	73fb      	strb	r3, [r7, #15]
    break;
 800a302:	e002      	b.n	800a30a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a304:	2302      	movs	r3, #2
 800a306:	73fb      	strb	r3, [r7, #15]
    break;
 800a308:	bf00      	nop
  }
  return usb_status;
 800a30a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3714      	adds	r7, #20
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	4603      	mov	r3, r0
 800a320:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a322:	79fb      	ldrb	r3, [r7, #7]
 800a324:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a326:	79fb      	ldrb	r3, [r7, #7]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d102      	bne.n	800a332 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a32c:	2300      	movs	r3, #0
 800a32e:	73fb      	strb	r3, [r7, #15]
 800a330:	e001      	b.n	800a336 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a332:	2301      	movs	r3, #1
 800a334:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a336:	7bfb      	ldrb	r3, [r7, #15]
 800a338:	461a      	mov	r2, r3
 800a33a:	2101      	movs	r1, #1
 800a33c:	4803      	ldr	r0, [pc, #12]	; (800a34c <MX_DriverVbusFS+0x34>)
 800a33e:	f7f9 f901 	bl	8003544 <HAL_GPIO_WritePin>
}
 800a342:	bf00      	nop
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	40020800 	.word	0x40020800

0800a350 <_init>:
 800a350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a352:	bf00      	nop
 800a354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a356:	bc08      	pop	{r3}
 800a358:	469e      	mov	lr, r3
 800a35a:	4770      	bx	lr

0800a35c <_fini>:
 800a35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a35e:	bf00      	nop
 800a360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a362:	bc08      	pop	{r3}
 800a364:	469e      	mov	lr, r3
 800a366:	4770      	bx	lr
