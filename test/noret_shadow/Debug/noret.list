
noret.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a728  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800a8b8  0800a8b8  0001a8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a988  0800a988  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a988  0800a988  0001a988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a990  0800a990  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a990  0800a990  0001a990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a994  0800a994  0001a994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          0000086c  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008fc  200008fc  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000034  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .comment      0000009e  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 14 .debug_line   000193a4  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   000263df  00000000  00000000  00039506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006a68  00000000  00000000  0005f8e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001658  00000000  00000000  00066350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cec33  00000000  00000000  000679a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00001550  00000000  00000000  001365e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000236a3  00000000  00000000  00137b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000054f8  00000000  00000000  0015b1d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00004e42  00000000  00000000  001606cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <deregister_tm_clones>:
 8000190:	4803      	ldr	r0, [pc, #12]	; (80001a0 <deregister_tm_clones+0x10>)
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <deregister_tm_clones+0x14>)
 8000194:	4283      	cmp	r3, r0
 8000196:	d002      	beq.n	800019e <deregister_tm_clones+0xe>
 8000198:	4b03      	ldr	r3, [pc, #12]	; (80001a8 <deregister_tm_clones+0x18>)
 800019a:	b103      	cbz	r3, 800019e <deregister_tm_clones+0xe>
 800019c:	4718      	bx	r3
 800019e:	4770      	bx	lr
 80001a0:	20000090 	.word	0x20000090
 80001a4:	20000090 	.word	0x20000090
 80001a8:	00000000 	.word	0x00000000

080001ac <register_tm_clones>:
 80001ac:	4805      	ldr	r0, [pc, #20]	; (80001c4 <register_tm_clones+0x18>)
 80001ae:	4906      	ldr	r1, [pc, #24]	; (80001c8 <register_tm_clones+0x1c>)
 80001b0:	1a0b      	subs	r3, r1, r0
 80001b2:	0fd9      	lsrs	r1, r3, #31
 80001b4:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001b8:	1049      	asrs	r1, r1, #1
 80001ba:	d002      	beq.n	80001c2 <register_tm_clones+0x16>
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <register_tm_clones+0x20>)
 80001be:	b103      	cbz	r3, 80001c2 <register_tm_clones+0x16>
 80001c0:	4718      	bx	r3
 80001c2:	4770      	bx	lr
 80001c4:	20000090 	.word	0x20000090
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c06      	ldr	r4, [pc, #24]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b943      	cbnz	r3, 80001ea <__do_global_dtors_aux+0x1a>
 80001d8:	f7ff ffda 	bl	8000190 <deregister_tm_clones>
 80001dc:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	b113      	cbz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001e0:	4804      	ldr	r0, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x24>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	2301      	movs	r3, #1
 80001e8:	7023      	strb	r3, [r4, #0]
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000090 	.word	0x20000090
 80001f0:	00000000 	.word	0x00000000
 80001f4:	0800a8a0 	.word	0x0800a8a0

080001f8 <frame_dummy>:
 80001f8:	b508      	push	{r3, lr}
 80001fa:	4b04      	ldr	r3, [pc, #16]	; (800020c <frame_dummy+0x14>)
 80001fc:	b11b      	cbz	r3, 8000206 <frame_dummy+0xe>
 80001fe:	4904      	ldr	r1, [pc, #16]	; (8000210 <frame_dummy+0x18>)
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <frame_dummy+0x1c>)
 8000202:	f3af 8000 	nop.w
 8000206:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800020a:	e7cf      	b.n	80001ac <register_tm_clones>
 800020c:	00000000 	.word	0x00000000
 8000210:	20000094 	.word	0x20000094
 8000214:	0800a8a0 	.word	0x0800a8a0

08000218 <divides>:
 8000218:	b082      	sub	sp, #8
 800021a:	9001      	str	r0, [sp, #4]
 800021c:	9100      	str	r1, [sp, #0]
 800021e:	9800      	ldr	r0, [sp, #0]
 8000220:	9901      	ldr	r1, [sp, #4]
 8000222:	fbb0 f2f1 	udiv	r2, r0, r1
 8000226:	fb02 0011 	mls	r0, r2, r1, r0
 800022a:	fab0 f080 	clz	r0, r0
 800022e:	0940      	lsrs	r0, r0, #5
 8000230:	b002      	add	sp, #8
 8000232:	4770      	bx	lr

08000234 <even>:
 8000234:	b580      	push	{r7, lr}
 8000236:	466f      	mov	r7, sp
 8000238:	b082      	sub	sp, #8
 800023a:	9001      	str	r0, [sp, #4]
 800023c:	9901      	ldr	r1, [sp, #4]

0800023e <even_0_FORPUSH>:
 800023e:	b507      	push	{r0, r1, r2, lr}
 8000240:	f240 0e00 	movw	lr, #0
 8000244:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 8000248:	f8df 1aac 	ldr.w	r1, [pc, #2732]	; 8000cf8 <Error_Handler+0x8>
 800024c:	680a      	ldr	r2, [r1, #0]
 800024e:	f8c2 e000 	str.w	lr, [r2]
 8000252:	f102 0204 	add.w	r2, r2, #4
 8000256:	600a      	str	r2, [r1, #0]
 8000258:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 800025c:	2002      	movs	r0, #2
 800025e:	f7ff ffdb 	bl	8000218 <divides>
 8000262:	b507      	push	{r0, r1, r2, lr}
 8000264:	f8df 0a90 	ldr.w	r0, [pc, #2704]	; 8000cf8 <Error_Handler+0x8>
 8000268:	6801      	ldr	r1, [r0, #0]
 800026a:	f1a1 0104 	sub.w	r1, r1, #4
 800026e:	680a      	ldr	r2, [r1, #0]
 8000270:	6812      	ldr	r2, [r2, #0]
 8000272:	6001      	str	r1, [r0, #0]
 8000274:	46fe      	mov	lr, pc
 8000276:	f1ae 0e15 	sub.w	lr, lr, #21
 800027a:	4596      	cmp	lr, r2
 800027c:	d000      	beq.n	8000280 <even_4_SAFE>
 800027e:	4770      	bx	lr

08000280 <even_4_SAFE>:
 8000280:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 8000284:	b002      	add	sp, #8
 8000286:	bd80      	pop	{r7, pc}

08000288 <prime>:
 8000288:	b580      	push	{r7, lr}
 800028a:	466f      	mov	r7, sp
 800028c:	b084      	sub	sp, #16
 800028e:	9002      	str	r0, [sp, #8]
 8000290:	9802      	ldr	r0, [sp, #8]

08000292 <prime_4_FORPUSH>:
 8000292:	b507      	push	{r0, r1, r2, lr}
 8000294:	f240 0e0c 	movw	lr, #12
 8000298:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 800029c:	f8df 1a58 	ldr.w	r1, [pc, #2648]	; 8000cf8 <Error_Handler+0x8>
 80002a0:	680a      	ldr	r2, [r1, #0]
 80002a2:	f8c2 e000 	str.w	lr, [r2]
 80002a6:	f102 0204 	add.w	r2, r2, #4
 80002aa:	600a      	str	r2, [r1, #0]
 80002ac:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 80002b0:	f7ff ffc0 	bl	8000234 <even>
 80002b4:	b507      	push	{r0, r1, r2, lr}
 80002b6:	f8df 0a40 	ldr.w	r0, [pc, #2624]	; 8000cf8 <Error_Handler+0x8>
 80002ba:	6801      	ldr	r1, [r0, #0]
 80002bc:	f1a1 0104 	sub.w	r1, r1, #4
 80002c0:	680a      	ldr	r2, [r1, #0]
 80002c2:	6812      	ldr	r2, [r2, #0]
 80002c4:	6001      	str	r1, [r0, #0]
 80002c6:	46fe      	mov	lr, pc
 80002c8:	f1ae 0e15 	sub.w	lr, lr, #21
 80002cc:	4596      	cmp	lr, r2
 80002ce:	d000      	beq.n	80002d2 <prime_8_SAFE>
 80002d0:	4770      	bx	lr

080002d2 <prime_8_SAFE>:
 80002d2:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 80002d6:	b140      	cbz	r0, 80002ea <prime_8_SAFE+0x18>
 80002d8:	e7ff      	b.n	80002da <prime_8_SAFE+0x8>
 80002da:	9802      	ldr	r0, [sp, #8]
 80002dc:	3802      	subs	r0, #2
 80002de:	fab0 f080 	clz	r0, r0
 80002e2:	0940      	lsrs	r0, r0, #5
 80002e4:	f807 0c01 	strb.w	r0, [r7, #-1]
 80002e8:	e03f      	b.n	800036a <prime_12_SAFE+0x2a>
 80002ea:	2003      	movs	r0, #3
 80002ec:	9001      	str	r0, [sp, #4]
 80002ee:	e7ff      	b.n	80002f0 <prime_8_SAFE+0x1e>
 80002f0:	9801      	ldr	r0, [sp, #4]
 80002f2:	4340      	muls	r0, r0
 80002f4:	9902      	ldr	r1, [sp, #8]
 80002f6:	4288      	cmp	r0, r1
 80002f8:	d82f      	bhi.n	800035a <prime_12_SAFE+0x1a>
 80002fa:	e7ff      	b.n	80002fc <prime_8_SAFE+0x2a>
 80002fc:	9801      	ldr	r0, [sp, #4]
 80002fe:	9902      	ldr	r1, [sp, #8]

08000300 <prime_8_FORPUSH>:
 8000300:	b507      	push	{r0, r1, r2, lr}
 8000302:	f240 0e18 	movw	lr, #24
 8000306:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 800030a:	f8df 19ec 	ldr.w	r1, [pc, #2540]	; 8000cf8 <Error_Handler+0x8>
 800030e:	680a      	ldr	r2, [r1, #0]
 8000310:	f8c2 e000 	str.w	lr, [r2]
 8000314:	f102 0204 	add.w	r2, r2, #4
 8000318:	600a      	str	r2, [r1, #0]
 800031a:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 800031e:	f7ff ff7b 	bl	8000218 <divides>
 8000322:	b507      	push	{r0, r1, r2, lr}
 8000324:	f8df 09d0 	ldr.w	r0, [pc, #2512]	; 8000cf8 <Error_Handler+0x8>
 8000328:	6801      	ldr	r1, [r0, #0]
 800032a:	f1a1 0104 	sub.w	r1, r1, #4
 800032e:	680a      	ldr	r2, [r1, #0]
 8000330:	6812      	ldr	r2, [r2, #0]
 8000332:	6001      	str	r1, [r0, #0]
 8000334:	46fe      	mov	lr, pc
 8000336:	f1ae 0e15 	sub.w	lr, lr, #21
 800033a:	4596      	cmp	lr, r2
 800033c:	d000      	beq.n	8000340 <prime_12_SAFE>
 800033e:	4770      	bx	lr

08000340 <prime_12_SAFE>:
 8000340:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 8000344:	b120      	cbz	r0, 8000350 <prime_12_SAFE+0x10>
 8000346:	e7ff      	b.n	8000348 <prime_12_SAFE+0x8>
 8000348:	2000      	movs	r0, #0
 800034a:	f807 0c01 	strb.w	r0, [r7, #-1]
 800034e:	e00c      	b.n	800036a <prime_12_SAFE+0x2a>
 8000350:	e7ff      	b.n	8000352 <prime_12_SAFE+0x12>
 8000352:	9801      	ldr	r0, [sp, #4]
 8000354:	3002      	adds	r0, #2
 8000356:	9001      	str	r0, [sp, #4]
 8000358:	e7ca      	b.n	80002f0 <prime_8_SAFE+0x1e>
 800035a:	9802      	ldr	r0, [sp, #8]
 800035c:	2100      	movs	r1, #0
 800035e:	2801      	cmp	r0, #1
 8000360:	bf88      	it	hi
 8000362:	2101      	movhi	r1, #1
 8000364:	f807 1c01 	strb.w	r1, [r7, #-1]
 8000368:	e7ff      	b.n	800036a <prime_12_SAFE+0x2a>
 800036a:	f817 0c01 	ldrb.w	r0, [r7, #-1]
 800036e:	b004      	add	sp, #16
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop

08000374 <swap>:
 8000374:	b083      	sub	sp, #12
 8000376:	9002      	str	r0, [sp, #8]
 8000378:	9101      	str	r1, [sp, #4]
 800037a:	9802      	ldr	r0, [sp, #8]
 800037c:	6800      	ldr	r0, [r0, #0]
 800037e:	9000      	str	r0, [sp, #0]
 8000380:	9801      	ldr	r0, [sp, #4]
 8000382:	6800      	ldr	r0, [r0, #0]
 8000384:	9902      	ldr	r1, [sp, #8]
 8000386:	6008      	str	r0, [r1, #0]
 8000388:	9800      	ldr	r0, [sp, #0]
 800038a:	9901      	ldr	r1, [sp, #4]
 800038c:	6008      	str	r0, [r1, #0]
 800038e:	b003      	add	sp, #12
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop

08000394 <benchmark>:
 8000394:	b5d0      	push	{r4, r6, r7, lr}
 8000396:	af02      	add	r7, sp, #8

08000398 <benchmark_12_FORPUSH>:
 8000398:	b507      	push	{r0, r1, r2, lr}
 800039a:	f240 0e24 	movw	lr, #36	; 0x24
 800039e:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 80003a2:	f8df 1954 	ldr.w	r1, [pc, #2388]	; 8000cf8 <Error_Handler+0x8>
 80003a6:	680a      	ldr	r2, [r1, #0]
 80003a8:	f8c2 e000 	str.w	lr, [r2]
 80003ac:	f102 0204 	add.w	r2, r2, #4
 80003b0:	600a      	str	r2, [r1, #0]
 80003b2:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 80003b6:	f240 04b0 	movw	r4, #176	; 0xb0
 80003ba:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80003be:	f240 01b4 	movw	r1, #180	; 0xb4
 80003c2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80003c6:	4620      	mov	r0, r4
 80003c8:	f7ff ffd4 	bl	8000374 <swap>
 80003cc:	b507      	push	{r0, r1, r2, lr}
 80003ce:	f8df 0928 	ldr.w	r0, [pc, #2344]	; 8000cf8 <Error_Handler+0x8>
 80003d2:	6801      	ldr	r1, [r0, #0]
 80003d4:	f1a1 0104 	sub.w	r1, r1, #4
 80003d8:	680a      	ldr	r2, [r1, #0]
 80003da:	6812      	ldr	r2, [r2, #0]
 80003dc:	6001      	str	r1, [r0, #0]
 80003de:	46fe      	mov	lr, pc
 80003e0:	f1ae 0e15 	sub.w	lr, lr, #21
 80003e4:	4596      	cmp	lr, r2
 80003e6:	d000      	beq.n	80003ea <benchmark_16_SAFE>
 80003e8:	4770      	bx	lr

080003ea <benchmark_16_SAFE>:
 80003ea:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 80003ee:	6820      	ldr	r0, [r4, #0]

080003f0 <benchmark_16_FORPUSH>:
 80003f0:	b507      	push	{r0, r1, r2, lr}
 80003f2:	f240 0e30 	movw	lr, #48	; 0x30
 80003f6:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 80003fa:	f8df 18fc 	ldr.w	r1, [pc, #2300]	; 8000cf8 <Error_Handler+0x8>
 80003fe:	680a      	ldr	r2, [r1, #0]
 8000400:	f8c2 e000 	str.w	lr, [r2]
 8000404:	f102 0204 	add.w	r2, r2, #4
 8000408:	600a      	str	r2, [r1, #0]
 800040a:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 800040e:	f7ff ff3b 	bl	8000288 <prime>
 8000412:	b507      	push	{r0, r1, r2, lr}
 8000414:	f8df 08e0 	ldr.w	r0, [pc, #2272]	; 8000cf8 <Error_Handler+0x8>
 8000418:	6801      	ldr	r1, [r0, #0]
 800041a:	f1a1 0104 	sub.w	r1, r1, #4
 800041e:	680a      	ldr	r2, [r1, #0]
 8000420:	6812      	ldr	r2, [r2, #0]
 8000422:	6001      	str	r1, [r0, #0]
 8000424:	46fe      	mov	lr, pc
 8000426:	f1ae 0e15 	sub.w	lr, lr, #21
 800042a:	4596      	cmp	lr, r2
 800042c:	d000      	beq.n	8000430 <benchmark_20_SAFE>
 800042e:	4770      	bx	lr

08000430 <benchmark_20_SAFE>:
 8000430:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 8000434:	4601      	mov	r1, r0
 8000436:	2000      	movs	r0, #0
 8000438:	2900      	cmp	r1, #0
 800043a:	d02b      	beq.n	8000494 <benchmark_24_SAFE+0xc>
 800043c:	e7ff      	b.n	800043e <benchmark_20_SAFE+0xe>
 800043e:	f240 00b4 	movw	r0, #180	; 0xb4
 8000442:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000446:	6800      	ldr	r0, [r0, #0]

08000448 <benchmark_20_FORPUSH>:
 8000448:	b507      	push	{r0, r1, r2, lr}
 800044a:	f240 0e3c 	movw	lr, #60	; 0x3c
 800044e:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 8000452:	f8df 18a4 	ldr.w	r1, [pc, #2212]	; 8000cf8 <Error_Handler+0x8>
 8000456:	680a      	ldr	r2, [r1, #0]
 8000458:	f8c2 e000 	str.w	lr, [r2]
 800045c:	f102 0204 	add.w	r2, r2, #4
 8000460:	600a      	str	r2, [r1, #0]
 8000462:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 8000466:	f7ff ff0f 	bl	8000288 <prime>
 800046a:	b507      	push	{r0, r1, r2, lr}
 800046c:	f8df 0888 	ldr.w	r0, [pc, #2184]	; 8000cf8 <Error_Handler+0x8>
 8000470:	6801      	ldr	r1, [r0, #0]
 8000472:	f1a1 0104 	sub.w	r1, r1, #4
 8000476:	680a      	ldr	r2, [r1, #0]
 8000478:	6812      	ldr	r2, [r2, #0]
 800047a:	6001      	str	r1, [r0, #0]
 800047c:	46fe      	mov	lr, pc
 800047e:	f1ae 0e15 	sub.w	lr, lr, #21
 8000482:	4596      	cmp	lr, r2
 8000484:	d000      	beq.n	8000488 <benchmark_24_SAFE>
 8000486:	4770      	bx	lr

08000488 <benchmark_24_SAFE>:
 8000488:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 800048c:	2800      	cmp	r0, #0
 800048e:	bf18      	it	ne
 8000490:	2001      	movne	r0, #1
 8000492:	e7ff      	b.n	8000494 <benchmark_24_SAFE+0xc>
 8000494:	2101      	movs	r1, #1
 8000496:	ea21 0000 	bic.w	r0, r1, r0
 800049a:	f240 01ac 	movw	r1, #172	; 0xac
 800049e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80004a2:	6008      	str	r0, [r1, #0]
 80004a4:	2000      	movs	r0, #0
 80004a6:	bdd0      	pop	{r4, r6, r7, pc}

080004a8 <initialise_benchmark>:
 80004a8:	f240 00b0 	movw	r0, #176	; 0xb0
 80004ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80004b0:	f245 4191 	movw	r1, #21649	; 0x5491
 80004b4:	6001      	str	r1, [r0, #0]
 80004b6:	f240 00b4 	movw	r0, #180	; 0xb4
 80004ba:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80004be:	f24d 41d7 	movw	r1, #54487	; 0xd4d7
 80004c2:	f2c0 0107 	movt	r1, #7
 80004c6:	6001      	str	r1, [r0, #0]
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <verify_benchmark>:
 80004cc:	b083      	sub	sp, #12
 80004ce:	9001      	str	r0, [sp, #4]
 80004d0:	2000      	movs	r0, #0
 80004d2:	9000      	str	r0, [sp, #0]
 80004d4:	f240 00ac 	movw	r0, #172	; 0xac
 80004d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80004dc:	6800      	ldr	r0, [r0, #0]
 80004de:	9900      	ldr	r1, [sp, #0]
 80004e0:	4288      	cmp	r0, r1
 80004e2:	d003      	beq.n	80004ec <verify_benchmark+0x20>
 80004e4:	e7ff      	b.n	80004e6 <verify_benchmark+0x1a>
 80004e6:	2000      	movs	r0, #0
 80004e8:	9002      	str	r0, [sp, #8]
 80004ea:	e002      	b.n	80004f2 <verify_benchmark+0x26>
 80004ec:	2001      	movs	r0, #1
 80004ee:	9002      	str	r0, [sp, #8]
 80004f0:	e7ff      	b.n	80004f2 <verify_benchmark+0x26>
 80004f2:	9802      	ldr	r0, [sp, #8]
 80004f4:	b003      	add	sp, #12
 80004f6:	4770      	bx	lr

080004f8 <__io_putchar>:
 80004f8:	b580      	push	{r7, lr}
 80004fa:	466f      	mov	r7, sp
 80004fc:	b082      	sub	sp, #8
 80004fe:	9001      	str	r0, [sp, #4]
 8000500:	f240 00b8 	movw	r0, #184	; 0xb8
 8000504:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000508:	a901      	add	r1, sp, #4
 800050a:	2201      	movs	r2, #1
 800050c:	2364      	movs	r3, #100	; 0x64
 800050e:	f006 fb77 	bl	8006c00 <HAL_UART_Transmit>
 8000512:	9801      	ldr	r0, [sp, #4]
 8000514:	b002      	add	sp, #8
 8000516:	bd80      	pop	{r7, pc}

08000518 <main>:
 8000518:	b580      	push	{r7, lr}
 800051a:	466f      	mov	r7, sp
 800051c:	b084      	sub	sp, #16
 800051e:	f8df 07d8 	ldr.w	r0, [pc, #2008]	; 8000cf8 <Error_Handler+0x8>
 8000522:	f8df 17d8 	ldr.w	r1, [pc, #2008]	; 8000cfc <Error_Handler+0xc>
 8000526:	6001      	str	r1, [r0, #0]
 8000528:	2000      	movs	r0, #0
 800052a:	9003      	str	r0, [sp, #12]
 800052c:	f002 fe72 	bl	8003214 <HAL_Init>

08000530 <main_24_FORPUSH>:
 8000530:	b507      	push	{r0, r1, r2, lr}
 8000532:	f240 0e48 	movw	lr, #72	; 0x48
 8000536:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 800053a:	f8df 17bc 	ldr.w	r1, [pc, #1980]	; 8000cf8 <Error_Handler+0x8>
 800053e:	680a      	ldr	r2, [r1, #0]
 8000540:	f8c2 e000 	str.w	lr, [r2]
 8000544:	f102 0204 	add.w	r2, r2, #4
 8000548:	600a      	str	r2, [r1, #0]
 800054a:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 800054e:	f000 f923 	bl	8000798 <SystemClock_Config>
 8000552:	b507      	push	{r0, r1, r2, lr}
 8000554:	f8df 07a0 	ldr.w	r0, [pc, #1952]	; 8000cf8 <Error_Handler+0x8>
 8000558:	6801      	ldr	r1, [r0, #0]
 800055a:	f1a1 0104 	sub.w	r1, r1, #4
 800055e:	680a      	ldr	r2, [r1, #0]
 8000560:	6812      	ldr	r2, [r2, #0]
 8000562:	6001      	str	r1, [r0, #0]
 8000564:	46fe      	mov	lr, pc
 8000566:	f1ae 0e15 	sub.w	lr, lr, #21
 800056a:	4596      	cmp	lr, r2
 800056c:	d000      	beq.n	8000570 <main_28_SAFE>
 800056e:	4770      	bx	lr

08000570 <main_28_SAFE>:
 8000570:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}

08000574 <main_28_FORPUSH>:
 8000574:	b507      	push	{r0, r1, r2, lr}
 8000576:	f240 0e54 	movw	lr, #84	; 0x54
 800057a:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 800057e:	f8df 1778 	ldr.w	r1, [pc, #1912]	; 8000cf8 <Error_Handler+0x8>
 8000582:	680a      	ldr	r2, [r1, #0]
 8000584:	f8c2 e000 	str.w	lr, [r2]
 8000588:	f102 0204 	add.w	r2, r2, #4
 800058c:	600a      	str	r2, [r1, #0]
 800058e:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 8000592:	f000 f9a3 	bl	80008dc <MX_GPIO_Init>
 8000596:	b507      	push	{r0, r1, r2, lr}
 8000598:	f8df 075c 	ldr.w	r0, [pc, #1884]	; 8000cf8 <Error_Handler+0x8>
 800059c:	6801      	ldr	r1, [r0, #0]
 800059e:	f1a1 0104 	sub.w	r1, r1, #4
 80005a2:	680a      	ldr	r2, [r1, #0]
 80005a4:	6812      	ldr	r2, [r2, #0]
 80005a6:	6001      	str	r1, [r0, #0]
 80005a8:	46fe      	mov	lr, pc
 80005aa:	f1ae 0e15 	sub.w	lr, lr, #21
 80005ae:	4596      	cmp	lr, r2
 80005b0:	d000      	beq.n	80005b4 <main_32_SAFE>
 80005b2:	4770      	bx	lr

080005b4 <main_32_SAFE>:
 80005b4:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}

080005b8 <main_32_FORPUSH>:
 80005b8:	b507      	push	{r0, r1, r2, lr}
 80005ba:	f240 0e60 	movw	lr, #96	; 0x60
 80005be:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 80005c2:	f8df 1734 	ldr.w	r1, [pc, #1844]	; 8000cf8 <Error_Handler+0x8>
 80005c6:	680a      	ldr	r2, [r1, #0]
 80005c8:	f8c2 e000 	str.w	lr, [r2]
 80005cc:	f102 0204 	add.w	r2, r2, #4
 80005d0:	600a      	str	r2, [r1, #0]
 80005d2:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 80005d6:	f000 fa85 	bl	8000ae4 <MX_I2C1_Init>
 80005da:	b507      	push	{r0, r1, r2, lr}
 80005dc:	f8df 0718 	ldr.w	r0, [pc, #1816]	; 8000cf8 <Error_Handler+0x8>
 80005e0:	6801      	ldr	r1, [r0, #0]
 80005e2:	f1a1 0104 	sub.w	r1, r1, #4
 80005e6:	680a      	ldr	r2, [r1, #0]
 80005e8:	6812      	ldr	r2, [r2, #0]
 80005ea:	6001      	str	r1, [r0, #0]
 80005ec:	46fe      	mov	lr, pc
 80005ee:	f1ae 0e15 	sub.w	lr, lr, #21
 80005f2:	4596      	cmp	lr, r2
 80005f4:	d000      	beq.n	80005f8 <main_36_SAFE>
 80005f6:	4770      	bx	lr

080005f8 <main_36_SAFE>:
 80005f8:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}

080005fc <main_36_FORPUSH>:
 80005fc:	b507      	push	{r0, r1, r2, lr}
 80005fe:	f240 0e6c 	movw	lr, #108	; 0x6c
 8000602:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 8000606:	f8df 16f0 	ldr.w	r1, [pc, #1776]	; 8000cf8 <Error_Handler+0x8>
 800060a:	680a      	ldr	r2, [r1, #0]
 800060c:	f8c2 e000 	str.w	lr, [r2]
 8000610:	f102 0204 	add.w	r2, r2, #4
 8000614:	600a      	str	r2, [r1, #0]
 8000616:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 800061a:	f000 faa5 	bl	8000b68 <MX_I2S3_Init>
 800061e:	b507      	push	{r0, r1, r2, lr}
 8000620:	f8df 06d4 	ldr.w	r0, [pc, #1748]	; 8000cf8 <Error_Handler+0x8>
 8000624:	6801      	ldr	r1, [r0, #0]
 8000626:	f1a1 0104 	sub.w	r1, r1, #4
 800062a:	680a      	ldr	r2, [r1, #0]
 800062c:	6812      	ldr	r2, [r2, #0]
 800062e:	6001      	str	r1, [r0, #0]
 8000630:	46fe      	mov	lr, pc
 8000632:	f1ae 0e15 	sub.w	lr, lr, #21
 8000636:	4596      	cmp	lr, r2
 8000638:	d000      	beq.n	800063c <main_40_SAFE>
 800063a:	4770      	bx	lr

0800063c <main_40_SAFE>:
 800063c:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}

08000640 <main_40_FORPUSH>:
 8000640:	b507      	push	{r0, r1, r2, lr}
 8000642:	f240 0e78 	movw	lr, #120	; 0x78
 8000646:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 800064a:	f8df 16ac 	ldr.w	r1, [pc, #1708]	; 8000cf8 <Error_Handler+0x8>
 800064e:	680a      	ldr	r2, [r1, #0]
 8000650:	f8c2 e000 	str.w	lr, [r2]
 8000654:	f102 0204 	add.w	r2, r2, #4
 8000658:	600a      	str	r2, [r1, #0]
 800065a:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 800065e:	f000 fac5 	bl	8000bec <MX_SPI1_Init>
 8000662:	b507      	push	{r0, r1, r2, lr}
 8000664:	f8df 0690 	ldr.w	r0, [pc, #1680]	; 8000cf8 <Error_Handler+0x8>
 8000668:	6801      	ldr	r1, [r0, #0]
 800066a:	f1a1 0104 	sub.w	r1, r1, #4
 800066e:	680a      	ldr	r2, [r1, #0]
 8000670:	6812      	ldr	r2, [r2, #0]
 8000672:	6001      	str	r1, [r0, #0]
 8000674:	46fe      	mov	lr, pc
 8000676:	f1ae 0e15 	sub.w	lr, lr, #21
 800067a:	4596      	cmp	lr, r2
 800067c:	d000      	beq.n	8000680 <main_44_SAFE>
 800067e:	4770      	bx	lr

08000680 <main_44_SAFE>:
 8000680:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 8000684:	f009 fe04 	bl	800a290 <MX_USB_HOST_Init>

08000688 <main_44_FORPUSH>:
 8000688:	b507      	push	{r0, r1, r2, lr}
 800068a:	f240 0e84 	movw	lr, #132	; 0x84
 800068e:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 8000692:	f8df 1664 	ldr.w	r1, [pc, #1636]	; 8000cf8 <Error_Handler+0x8>
 8000696:	680a      	ldr	r2, [r1, #0]
 8000698:	f8c2 e000 	str.w	lr, [r2]
 800069c:	f102 0204 	add.w	r2, r2, #4
 80006a0:	600a      	str	r2, [r1, #0]
 80006a2:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 80006a6:	f000 fae5 	bl	8000c74 <MX_USART2_UART_Init>
 80006aa:	b507      	push	{r0, r1, r2, lr}
 80006ac:	f8df 0648 	ldr.w	r0, [pc, #1608]	; 8000cf8 <Error_Handler+0x8>
 80006b0:	6801      	ldr	r1, [r0, #0]
 80006b2:	f1a1 0104 	sub.w	r1, r1, #4
 80006b6:	680a      	ldr	r2, [r1, #0]
 80006b8:	6812      	ldr	r2, [r2, #0]
 80006ba:	6001      	str	r1, [r0, #0]
 80006bc:	46fe      	mov	lr, pc
 80006be:	f1ae 0e15 	sub.w	lr, lr, #21
 80006c2:	4596      	cmp	lr, r2
 80006c4:	d000      	beq.n	80006c8 <main_48_SAFE>
 80006c6:	4770      	bx	lr

080006c8 <main_48_SAFE>:
 80006c8:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 80006cc:	f002 fe08 	bl	80032e0 <HAL_GetTick>
 80006d0:	9002      	str	r0, [sp, #8]

080006d2 <main_48_FORPUSH>:
 80006d2:	b507      	push	{r0, r1, r2, lr}
 80006d4:	f240 0e90 	movw	lr, #144	; 0x90
 80006d8:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 80006dc:	f8df 1618 	ldr.w	r1, [pc, #1560]	; 8000cf8 <Error_Handler+0x8>
 80006e0:	680a      	ldr	r2, [r1, #0]
 80006e2:	f8c2 e000 	str.w	lr, [r2]
 80006e6:	f102 0204 	add.w	r2, r2, #4
 80006ea:	600a      	str	r2, [r1, #0]
 80006ec:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 80006f0:	f7ff feda 	bl	80004a8 <initialise_benchmark>
 80006f4:	b507      	push	{r0, r1, r2, lr}
 80006f6:	f8df 0600 	ldr.w	r0, [pc, #1536]	; 8000cf8 <Error_Handler+0x8>
 80006fa:	6801      	ldr	r1, [r0, #0]
 80006fc:	f1a1 0104 	sub.w	r1, r1, #4
 8000700:	680a      	ldr	r2, [r1, #0]
 8000702:	6812      	ldr	r2, [r2, #0]
 8000704:	6001      	str	r1, [r0, #0]
 8000706:	46fe      	mov	lr, pc
 8000708:	f1ae 0e15 	sub.w	lr, lr, #21
 800070c:	4596      	cmp	lr, r2
 800070e:	d000      	beq.n	8000712 <main_52_SAFE>
 8000710:	4770      	bx	lr

08000712 <main_52_SAFE>:
 8000712:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 8000716:	e7ff      	b.n	8000718 <main_52_SAFE+0x6>
 8000718:	f009 fde0 	bl	800a2dc <MX_USB_HOST_Process>
 800071c:	2000      	movs	r0, #0
 800071e:	9001      	str	r0, [sp, #4]
 8000720:	e7ff      	b.n	8000722 <main_52_SAFE+0x10>
 8000722:	9801      	ldr	r0, [sp, #4]
 8000724:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000728:	da27      	bge.n	800077a <main_56_SAFE+0xe>
 800072a:	e7ff      	b.n	800072c <main_52_FORPUSH>

0800072c <main_52_FORPUSH>:
 800072c:	b507      	push	{r0, r1, r2, lr}
 800072e:	f240 0e9c 	movw	lr, #156	; 0x9c
 8000732:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 8000736:	f8df 15c0 	ldr.w	r1, [pc, #1472]	; 8000cf8 <Error_Handler+0x8>
 800073a:	680a      	ldr	r2, [r1, #0]
 800073c:	f8c2 e000 	str.w	lr, [r2]
 8000740:	f102 0204 	add.w	r2, r2, #4
 8000744:	600a      	str	r2, [r1, #0]
 8000746:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 800074a:	f7ff fe23 	bl	8000394 <benchmark>
 800074e:	b507      	push	{r0, r1, r2, lr}
 8000750:	f8df 05a4 	ldr.w	r0, [pc, #1444]	; 8000cf8 <Error_Handler+0x8>
 8000754:	6801      	ldr	r1, [r0, #0]
 8000756:	f1a1 0104 	sub.w	r1, r1, #4
 800075a:	680a      	ldr	r2, [r1, #0]
 800075c:	6812      	ldr	r2, [r2, #0]
 800075e:	6001      	str	r1, [r0, #0]
 8000760:	46fe      	mov	lr, pc
 8000762:	f1ae 0e15 	sub.w	lr, lr, #21
 8000766:	4596      	cmp	lr, r2
 8000768:	d000      	beq.n	800076c <main_56_SAFE>
 800076a:	4770      	bx	lr

0800076c <main_56_SAFE>:
 800076c:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 8000770:	e7ff      	b.n	8000772 <main_56_SAFE+0x6>
 8000772:	9801      	ldr	r0, [sp, #4]
 8000774:	3001      	adds	r0, #1
 8000776:	9001      	str	r0, [sp, #4]
 8000778:	e7d3      	b.n	8000722 <main_52_SAFE+0x10>
 800077a:	f002 fdb1 	bl	80032e0 <HAL_GetTick>
 800077e:	9902      	ldr	r1, [sp, #8]
 8000780:	1a41      	subs	r1, r0, r1
 8000782:	f64a 1038 	movw	r0, #43320	; 0xa938
 8000786:	f6c0 0000 	movt	r0, #2048	; 0x800
 800078a:	f001 f843 	bl	8001814 <iprintf>
 800078e:	f002 fda7 	bl	80032e0 <HAL_GetTick>
 8000792:	9002      	str	r0, [sp, #8]
 8000794:	e7c0      	b.n	8000718 <main_52_SAFE+0x6>
 8000796:	bf00      	nop

08000798 <SystemClock_Config>:
 8000798:	b580      	push	{r7, lr}
 800079a:	466f      	mov	r7, sp
 800079c:	b094      	sub	sp, #80	; 0x50
 800079e:	a808      	add	r0, sp, #32
 80007a0:	2130      	movs	r1, #48	; 0x30
 80007a2:	f000 fe87 	bl	80014b4 <__aeabi_memclr>
 80007a6:	2000      	movs	r0, #0
 80007a8:	9007      	str	r0, [sp, #28]
 80007aa:	9006      	str	r0, [sp, #24]
 80007ac:	9005      	str	r0, [sp, #20]
 80007ae:	9004      	str	r0, [sp, #16]
 80007b0:	9003      	str	r0, [sp, #12]
 80007b2:	e7ff      	b.n	80007b4 <SystemClock_Config+0x1c>
 80007b4:	2000      	movs	r0, #0
 80007b6:	9002      	str	r0, [sp, #8]
 80007b8:	f643 0040 	movw	r0, #14400	; 0x3840
 80007bc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80007c0:	6801      	ldr	r1, [r0, #0]
 80007c2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80007c6:	6001      	str	r1, [r0, #0]
 80007c8:	6800      	ldr	r0, [r0, #0]
 80007ca:	f000 5080 	and.w	r0, r0, #268435456	; 0x10000000
 80007ce:	9002      	str	r0, [sp, #8]
 80007d0:	9802      	ldr	r0, [sp, #8]
 80007d2:	e7ff      	b.n	80007d4 <SystemClock_Config+0x3c>
 80007d4:	e7ff      	b.n	80007d6 <SystemClock_Config+0x3e>
 80007d6:	2000      	movs	r0, #0
 80007d8:	9001      	str	r0, [sp, #4]
 80007da:	f247 0000 	movw	r0, #28672	; 0x7000
 80007de:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80007e2:	6801      	ldr	r1, [r0, #0]
 80007e4:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80007e8:	6001      	str	r1, [r0, #0]
 80007ea:	6800      	ldr	r0, [r0, #0]
 80007ec:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
 80007f0:	9001      	str	r0, [sp, #4]
 80007f2:	9801      	ldr	r0, [sp, #4]
 80007f4:	e7ff      	b.n	80007f6 <SystemClock_Config+0x5e>
 80007f6:	2001      	movs	r0, #1
 80007f8:	9008      	str	r0, [sp, #32]
 80007fa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80007fe:	9009      	str	r0, [sp, #36]	; 0x24
 8000800:	2002      	movs	r0, #2
 8000802:	900e      	str	r0, [sp, #56]	; 0x38
 8000804:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8000808:	910f      	str	r1, [sp, #60]	; 0x3c
 800080a:	2108      	movs	r1, #8
 800080c:	9110      	str	r1, [sp, #64]	; 0x40
 800080e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8000812:	9111      	str	r1, [sp, #68]	; 0x44
 8000814:	9012      	str	r0, [sp, #72]	; 0x48
 8000816:	2007      	movs	r0, #7
 8000818:	9013      	str	r0, [sp, #76]	; 0x4c
 800081a:	a808      	add	r0, sp, #32
 800081c:	f005 fb42 	bl	8005ea4 <HAL_RCC_OscConfig>
 8000820:	2800      	cmp	r0, #0
 8000822:	d023      	beq.n	800086c <SystemClock_Config_60_SAFE+0x6>
 8000824:	e7ff      	b.n	8000826 <SystemClock_Config_56_FORPUSH>

08000826 <SystemClock_Config_56_FORPUSH>:
 8000826:	b507      	push	{r0, r1, r2, lr}
 8000828:	f240 0ea8 	movw	lr, #168	; 0xa8
 800082c:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 8000830:	f8df 14c4 	ldr.w	r1, [pc, #1220]	; 8000cf8 <Error_Handler+0x8>
 8000834:	680a      	ldr	r2, [r1, #0]
 8000836:	f8c2 e000 	str.w	lr, [r2]
 800083a:	f102 0204 	add.w	r2, r2, #4
 800083e:	600a      	str	r2, [r1, #0]
 8000840:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 8000844:	f000 fa54 	bl	8000cf0 <Error_Handler>
 8000848:	b507      	push	{r0, r1, r2, lr}
 800084a:	f8df 04ac 	ldr.w	r0, [pc, #1196]	; 8000cf8 <Error_Handler+0x8>
 800084e:	6801      	ldr	r1, [r0, #0]
 8000850:	f1a1 0104 	sub.w	r1, r1, #4
 8000854:	680a      	ldr	r2, [r1, #0]
 8000856:	6812      	ldr	r2, [r2, #0]
 8000858:	6001      	str	r1, [r0, #0]
 800085a:	46fe      	mov	lr, pc
 800085c:	f1ae 0e15 	sub.w	lr, lr, #21
 8000860:	4596      	cmp	lr, r2
 8000862:	d000      	beq.n	8000866 <SystemClock_Config_60_SAFE>
 8000864:	4770      	bx	lr

08000866 <SystemClock_Config_60_SAFE>:
 8000866:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 800086a:	e7ff      	b.n	800086c <SystemClock_Config_60_SAFE+0x6>
 800086c:	200f      	movs	r0, #15
 800086e:	9003      	str	r0, [sp, #12]
 8000870:	2002      	movs	r0, #2
 8000872:	9004      	str	r0, [sp, #16]
 8000874:	2000      	movs	r0, #0
 8000876:	9005      	str	r0, [sp, #20]
 8000878:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800087c:	9006      	str	r0, [sp, #24]
 800087e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000882:	9007      	str	r0, [sp, #28]
 8000884:	a803      	add	r0, sp, #12
 8000886:	2105      	movs	r1, #5
 8000888:	f005 fd84 	bl	8006394 <HAL_RCC_ClockConfig>
 800088c:	2800      	cmp	r0, #0
 800088e:	d023      	beq.n	80008d8 <SystemClock_Config_64_SAFE+0x6>
 8000890:	e7ff      	b.n	8000892 <SystemClock_Config_60_FORPUSH>

08000892 <SystemClock_Config_60_FORPUSH>:
 8000892:	b507      	push	{r0, r1, r2, lr}
 8000894:	f240 0eb4 	movw	lr, #180	; 0xb4
 8000898:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 800089c:	f8df 1458 	ldr.w	r1, [pc, #1112]	; 8000cf8 <Error_Handler+0x8>
 80008a0:	680a      	ldr	r2, [r1, #0]
 80008a2:	f8c2 e000 	str.w	lr, [r2]
 80008a6:	f102 0204 	add.w	r2, r2, #4
 80008aa:	600a      	str	r2, [r1, #0]
 80008ac:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 80008b0:	f000 fa1e 	bl	8000cf0 <Error_Handler>
 80008b4:	b507      	push	{r0, r1, r2, lr}
 80008b6:	f8df 0440 	ldr.w	r0, [pc, #1088]	; 8000cf8 <Error_Handler+0x8>
 80008ba:	6801      	ldr	r1, [r0, #0]
 80008bc:	f1a1 0104 	sub.w	r1, r1, #4
 80008c0:	680a      	ldr	r2, [r1, #0]
 80008c2:	6812      	ldr	r2, [r2, #0]
 80008c4:	6001      	str	r1, [r0, #0]
 80008c6:	46fe      	mov	lr, pc
 80008c8:	f1ae 0e15 	sub.w	lr, lr, #21
 80008cc:	4596      	cmp	lr, r2
 80008ce:	d000      	beq.n	80008d2 <SystemClock_Config_64_SAFE>
 80008d0:	4770      	bx	lr

080008d2 <SystemClock_Config_64_SAFE>:
 80008d2:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 80008d6:	e7ff      	b.n	80008d8 <SystemClock_Config_64_SAFE+0x6>
 80008d8:	b014      	add	sp, #80	; 0x50
 80008da:	bd80      	pop	{r7, pc}

080008dc <MX_GPIO_Init>:
 80008dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008de:	af03      	add	r7, sp, #12
 80008e0:	e92d 0f00 	stmdb	sp!, {r8, r9, sl, fp}
 80008e4:	b08b      	sub	sp, #44	; 0x2c
 80008e6:	2000      	movs	r0, #0
 80008e8:	900a      	str	r0, [sp, #40]	; 0x28
 80008ea:	9009      	str	r0, [sp, #36]	; 0x24
 80008ec:	9008      	str	r0, [sp, #32]
 80008ee:	9007      	str	r0, [sp, #28]
 80008f0:	9006      	str	r0, [sp, #24]
 80008f2:	e7ff      	b.n	80008f4 <MX_GPIO_Init+0x18>
 80008f4:	2000      	movs	r0, #0
 80008f6:	9005      	str	r0, [sp, #20]
 80008f8:	f643 0030 	movw	r0, #14384	; 0x3830
 80008fc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000900:	6801      	ldr	r1, [r0, #0]
 8000902:	f041 0110 	orr.w	r1, r1, #16
 8000906:	6001      	str	r1, [r0, #0]
 8000908:	6800      	ldr	r0, [r0, #0]
 800090a:	f000 0010 	and.w	r0, r0, #16
 800090e:	9005      	str	r0, [sp, #20]
 8000910:	9805      	ldr	r0, [sp, #20]
 8000912:	e7ff      	b.n	8000914 <MX_GPIO_Init+0x38>
 8000914:	e7ff      	b.n	8000916 <MX_GPIO_Init+0x3a>
 8000916:	2000      	movs	r0, #0
 8000918:	9004      	str	r0, [sp, #16]
 800091a:	f643 0030 	movw	r0, #14384	; 0x3830
 800091e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000922:	6801      	ldr	r1, [r0, #0]
 8000924:	f041 0104 	orr.w	r1, r1, #4
 8000928:	6001      	str	r1, [r0, #0]
 800092a:	6800      	ldr	r0, [r0, #0]
 800092c:	f000 0004 	and.w	r0, r0, #4
 8000930:	9004      	str	r0, [sp, #16]
 8000932:	9804      	ldr	r0, [sp, #16]
 8000934:	e7ff      	b.n	8000936 <MX_GPIO_Init+0x5a>
 8000936:	e7ff      	b.n	8000938 <MX_GPIO_Init+0x5c>
 8000938:	2000      	movs	r0, #0
 800093a:	9003      	str	r0, [sp, #12]
 800093c:	f643 0030 	movw	r0, #14384	; 0x3830
 8000940:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000944:	6801      	ldr	r1, [r0, #0]
 8000946:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800094a:	6001      	str	r1, [r0, #0]
 800094c:	6800      	ldr	r0, [r0, #0]
 800094e:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8000952:	9003      	str	r0, [sp, #12]
 8000954:	9803      	ldr	r0, [sp, #12]
 8000956:	e7ff      	b.n	8000958 <MX_GPIO_Init+0x7c>
 8000958:	e7ff      	b.n	800095a <MX_GPIO_Init+0x7e>
 800095a:	2000      	movs	r0, #0
 800095c:	9002      	str	r0, [sp, #8]
 800095e:	f643 0030 	movw	r0, #14384	; 0x3830
 8000962:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000966:	6801      	ldr	r1, [r0, #0]
 8000968:	f041 0101 	orr.w	r1, r1, #1
 800096c:	6001      	str	r1, [r0, #0]
 800096e:	6800      	ldr	r0, [r0, #0]
 8000970:	f000 0001 	and.w	r0, r0, #1
 8000974:	9002      	str	r0, [sp, #8]
 8000976:	9802      	ldr	r0, [sp, #8]
 8000978:	e7ff      	b.n	800097a <MX_GPIO_Init+0x9e>
 800097a:	e7ff      	b.n	800097c <MX_GPIO_Init+0xa0>
 800097c:	2000      	movs	r0, #0
 800097e:	9001      	str	r0, [sp, #4]
 8000980:	f643 0030 	movw	r0, #14384	; 0x3830
 8000984:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000988:	6801      	ldr	r1, [r0, #0]
 800098a:	f041 0102 	orr.w	r1, r1, #2
 800098e:	6001      	str	r1, [r0, #0]
 8000990:	6800      	ldr	r0, [r0, #0]
 8000992:	f000 0002 	and.w	r0, r0, #2
 8000996:	9001      	str	r0, [sp, #4]
 8000998:	9801      	ldr	r0, [sp, #4]
 800099a:	e7ff      	b.n	800099c <MX_GPIO_Init+0xc0>
 800099c:	e7ff      	b.n	800099e <MX_GPIO_Init+0xc2>
 800099e:	2000      	movs	r0, #0
 80009a0:	9000      	str	r0, [sp, #0]
 80009a2:	f643 0030 	movw	r0, #14384	; 0x3830
 80009a6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80009aa:	6801      	ldr	r1, [r0, #0]
 80009ac:	f041 0108 	orr.w	r1, r1, #8
 80009b0:	6001      	str	r1, [r0, #0]
 80009b2:	6800      	ldr	r0, [r0, #0]
 80009b4:	f000 0008 	and.w	r0, r0, #8
 80009b8:	9000      	str	r0, [sp, #0]
 80009ba:	9800      	ldr	r0, [sp, #0]
 80009bc:	e7ff      	b.n	80009be <MX_GPIO_Init+0xe2>
 80009be:	f241 0900 	movw	r9, #4096	; 0x1000
 80009c2:	f2c4 0902 	movt	r9, #16386	; 0x4002
 80009c6:	f04f 0808 	mov.w	r8, #8
 80009ca:	2500      	movs	r5, #0
 80009cc:	4648      	mov	r0, r9
 80009ce:	2108      	movs	r1, #8
 80009d0:	2200      	movs	r2, #0
 80009d2:	f003 f85f 	bl	8003a94 <HAL_GPIO_WritePin>
 80009d6:	f640 0400 	movw	r4, #2048	; 0x800
 80009da:	f2c4 0402 	movt	r4, #16386	; 0x4002
 80009de:	f04f 0a01 	mov.w	sl, #1
 80009e2:	4620      	mov	r0, r4
 80009e4:	2101      	movs	r1, #1
 80009e6:	2201      	movs	r2, #1
 80009e8:	f003 f854 	bl	8003a94 <HAL_GPIO_WritePin>
 80009ec:	f640 4000 	movw	r0, #3072	; 0xc00
 80009f0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80009f4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009f8:	2200      	movs	r2, #0
 80009fa:	f003 f84b 	bl	8003a94 <HAL_GPIO_WritePin>
 80009fe:	f8cd 8018 	str.w	r8, [sp, #24]
 8000a02:	f8cd a01c 	str.w	sl, [sp, #28]
 8000a06:	9508      	str	r5, [sp, #32]
 8000a08:	9509      	str	r5, [sp, #36]	; 0x24
 8000a0a:	ae06      	add	r6, sp, #24
 8000a0c:	4648      	mov	r0, r9
 8000a0e:	4631      	mov	r1, r6
 8000a10:	f002 fda8 	bl	8003564 <HAL_GPIO_Init>
 8000a14:	f8cd a018 	str.w	sl, [sp, #24]
 8000a18:	f8cd a01c 	str.w	sl, [sp, #28]
 8000a1c:	9508      	str	r5, [sp, #32]
 8000a1e:	9509      	str	r5, [sp, #36]	; 0x24
 8000a20:	4620      	mov	r0, r4
 8000a22:	4631      	mov	r1, r6
 8000a24:	f002 fd9e 	bl	8003564 <HAL_GPIO_Init>
 8000a28:	f8cd 8018 	str.w	r8, [sp, #24]
 8000a2c:	f04f 0b02 	mov.w	fp, #2
 8000a30:	f8cd b01c 	str.w	fp, [sp, #28]
 8000a34:	9508      	str	r5, [sp, #32]
 8000a36:	9509      	str	r5, [sp, #36]	; 0x24
 8000a38:	f04f 0905 	mov.w	r9, #5
 8000a3c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8000a40:	4620      	mov	r0, r4
 8000a42:	4631      	mov	r1, r6
 8000a44:	f002 fd8e 	bl	8003564 <HAL_GPIO_Init>
 8000a48:	f8cd a018 	str.w	sl, [sp, #24]
 8000a4c:	f44f 1890 	mov.w	r8, #1179648	; 0x120000
 8000a50:	f8cd 801c 	str.w	r8, [sp, #28]
 8000a54:	9508      	str	r5, [sp, #32]
 8000a56:	2000      	movs	r0, #0
 8000a58:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000a5c:	4631      	mov	r1, r6
 8000a5e:	f002 fd81 	bl	8003564 <HAL_GPIO_Init>
 8000a62:	2004      	movs	r0, #4
 8000a64:	9006      	str	r0, [sp, #24]
 8000a66:	9507      	str	r5, [sp, #28]
 8000a68:	9508      	str	r5, [sp, #32]
 8000a6a:	f240 4400 	movw	r4, #1024	; 0x400
 8000a6e:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8000a72:	4620      	mov	r0, r4
 8000a74:	4631      	mov	r1, r6
 8000a76:	f002 fd75 	bl	8003564 <HAL_GPIO_Init>
 8000a7a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000a7e:	9006      	str	r0, [sp, #24]
 8000a80:	f8cd b01c 	str.w	fp, [sp, #28]
 8000a84:	9508      	str	r5, [sp, #32]
 8000a86:	9509      	str	r5, [sp, #36]	; 0x24
 8000a88:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	4631      	mov	r1, r6
 8000a90:	f002 fd68 	bl	8003564 <HAL_GPIO_Init>
 8000a94:	f24f 0010 	movw	r0, #61456	; 0xf010
 8000a98:	9006      	str	r0, [sp, #24]
 8000a9a:	f8cd a01c 	str.w	sl, [sp, #28]
 8000a9e:	9508      	str	r5, [sp, #32]
 8000aa0:	9509      	str	r5, [sp, #36]	; 0x24
 8000aa2:	f640 4400 	movw	r4, #3072	; 0xc00
 8000aa6:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8000aaa:	4620      	mov	r0, r4
 8000aac:	4631      	mov	r1, r6
 8000aae:	f002 fd59 	bl	8003564 <HAL_GPIO_Init>
 8000ab2:	2020      	movs	r0, #32
 8000ab4:	9006      	str	r0, [sp, #24]
 8000ab6:	9507      	str	r5, [sp, #28]
 8000ab8:	9508      	str	r5, [sp, #32]
 8000aba:	4620      	mov	r0, r4
 8000abc:	4631      	mov	r1, r6
 8000abe:	f002 fd51 	bl	8003564 <HAL_GPIO_Init>
 8000ac2:	f8cd b018 	str.w	fp, [sp, #24]
 8000ac6:	f8cd 801c 	str.w	r8, [sp, #28]
 8000aca:	9508      	str	r5, [sp, #32]
 8000acc:	f241 0000 	movw	r0, #4096	; 0x1000
 8000ad0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000ad4:	4631      	mov	r1, r6
 8000ad6:	f002 fd45 	bl	8003564 <HAL_GPIO_Init>
 8000ada:	b00b      	add	sp, #44	; 0x2c
 8000adc:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
 8000ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ae2:	bf00      	nop

08000ae4 <MX_I2C1_Init>:
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	466f      	mov	r7, sp
 8000ae8:	f240 1004 	movw	r0, #260	; 0x104
 8000aec:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000af0:	f245 4100 	movw	r1, #21504	; 0x5400
 8000af4:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000af8:	6001      	str	r1, [r0, #0]
 8000afa:	f248 61a0 	movw	r1, #34464	; 0x86a0
 8000afe:	f2c0 0101 	movt	r1, #1
 8000b02:	6041      	str	r1, [r0, #4]
 8000b04:	2100      	movs	r1, #0
 8000b06:	6081      	str	r1, [r0, #8]
 8000b08:	60c1      	str	r1, [r0, #12]
 8000b0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b0e:	6102      	str	r2, [r0, #16]
 8000b10:	6141      	str	r1, [r0, #20]
 8000b12:	6181      	str	r1, [r0, #24]
 8000b14:	61c1      	str	r1, [r0, #28]
 8000b16:	6201      	str	r1, [r0, #32]
 8000b18:	f004 fbe0 	bl	80052dc <HAL_I2C_Init>
 8000b1c:	2800      	cmp	r0, #0
 8000b1e:	d021      	beq.n	8000b64 <MX_I2C1_Init_68_SAFE+0x6>
 8000b20:	e7ff      	b.n	8000b22 <MX_I2C1_Init_64_FORPUSH>

08000b22 <MX_I2C1_Init_64_FORPUSH>:
 8000b22:	b507      	push	{r0, r1, r2, lr}
 8000b24:	f240 0ec0 	movw	lr, #192	; 0xc0
 8000b28:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 8000b2c:	4972      	ldr	r1, [pc, #456]	; (8000cf8 <Error_Handler+0x8>)
 8000b2e:	680a      	ldr	r2, [r1, #0]
 8000b30:	f8c2 e000 	str.w	lr, [r2]
 8000b34:	f102 0204 	add.w	r2, r2, #4
 8000b38:	600a      	str	r2, [r1, #0]
 8000b3a:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 8000b3e:	f000 f8d7 	bl	8000cf0 <Error_Handler>
 8000b42:	b507      	push	{r0, r1, r2, lr}
 8000b44:	486c      	ldr	r0, [pc, #432]	; (8000cf8 <Error_Handler+0x8>)
 8000b46:	6801      	ldr	r1, [r0, #0]
 8000b48:	f1a1 0104 	sub.w	r1, r1, #4
 8000b4c:	680a      	ldr	r2, [r1, #0]
 8000b4e:	6812      	ldr	r2, [r2, #0]
 8000b50:	6001      	str	r1, [r0, #0]
 8000b52:	46fe      	mov	lr, pc
 8000b54:	f1ae 0e15 	sub.w	lr, lr, #21
 8000b58:	4596      	cmp	lr, r2
 8000b5a:	d000      	beq.n	8000b5e <MX_I2C1_Init_68_SAFE>
 8000b5c:	4770      	bx	lr

08000b5e <MX_I2C1_Init_68_SAFE>:
 8000b5e:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 8000b62:	e7ff      	b.n	8000b64 <MX_I2C1_Init_68_SAFE+0x6>
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop

08000b68 <MX_I2S3_Init>:
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	466f      	mov	r7, sp
 8000b6c:	f240 1060 	movw	r0, #352	; 0x160
 8000b70:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000b74:	f643 4100 	movw	r1, #15360	; 0x3c00
 8000b78:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000b7c:	6001      	str	r1, [r0, #0]
 8000b7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b82:	6041      	str	r1, [r0, #4]
 8000b84:	2200      	movs	r2, #0
 8000b86:	6082      	str	r2, [r0, #8]
 8000b88:	60c2      	str	r2, [r0, #12]
 8000b8a:	6101      	str	r1, [r0, #16]
 8000b8c:	f247 7100 	movw	r1, #30464	; 0x7700
 8000b90:	f2c0 0101 	movt	r1, #1
 8000b94:	6141      	str	r1, [r0, #20]
 8000b96:	6182      	str	r2, [r0, #24]
 8000b98:	61c2      	str	r2, [r0, #28]
 8000b9a:	6202      	str	r2, [r0, #32]
 8000b9c:	f004 fce2 	bl	8005564 <HAL_I2S_Init>
 8000ba0:	2800      	cmp	r0, #0
 8000ba2:	d021      	beq.n	8000be8 <MX_I2S3_Init_72_SAFE+0x6>
 8000ba4:	e7ff      	b.n	8000ba6 <MX_I2S3_Init_68_FORPUSH>

08000ba6 <MX_I2S3_Init_68_FORPUSH>:
 8000ba6:	b507      	push	{r0, r1, r2, lr}
 8000ba8:	f240 0ecc 	movw	lr, #204	; 0xcc
 8000bac:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 8000bb0:	4951      	ldr	r1, [pc, #324]	; (8000cf8 <Error_Handler+0x8>)
 8000bb2:	680a      	ldr	r2, [r1, #0]
 8000bb4:	f8c2 e000 	str.w	lr, [r2]
 8000bb8:	f102 0204 	add.w	r2, r2, #4
 8000bbc:	600a      	str	r2, [r1, #0]
 8000bbe:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 8000bc2:	f000 f895 	bl	8000cf0 <Error_Handler>
 8000bc6:	b507      	push	{r0, r1, r2, lr}
 8000bc8:	484b      	ldr	r0, [pc, #300]	; (8000cf8 <Error_Handler+0x8>)
 8000bca:	6801      	ldr	r1, [r0, #0]
 8000bcc:	f1a1 0104 	sub.w	r1, r1, #4
 8000bd0:	680a      	ldr	r2, [r1, #0]
 8000bd2:	6812      	ldr	r2, [r2, #0]
 8000bd4:	6001      	str	r1, [r0, #0]
 8000bd6:	46fe      	mov	lr, pc
 8000bd8:	f1ae 0e15 	sub.w	lr, lr, #21
 8000bdc:	4596      	cmp	lr, r2
 8000bde:	d000      	beq.n	8000be2 <MX_I2S3_Init_72_SAFE>
 8000be0:	4770      	bx	lr

08000be2 <MX_I2S3_Init_72_SAFE>:
 8000be2:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 8000be6:	e7ff      	b.n	8000be8 <MX_I2S3_Init_72_SAFE+0x6>
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop

08000bec <MX_SPI1_Init>:
 8000bec:	b580      	push	{r7, lr}
 8000bee:	466f      	mov	r7, sp
 8000bf0:	f240 10ac 	movw	r0, #428	; 0x1ac
 8000bf4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000bf8:	f243 0100 	movw	r1, #12288	; 0x3000
 8000bfc:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8000c00:	6001      	str	r1, [r0, #0]
 8000c02:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000c06:	6041      	str	r1, [r0, #4]
 8000c08:	2100      	movs	r1, #0
 8000c0a:	6081      	str	r1, [r0, #8]
 8000c0c:	60c1      	str	r1, [r0, #12]
 8000c0e:	6101      	str	r1, [r0, #16]
 8000c10:	6141      	str	r1, [r0, #20]
 8000c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c16:	6182      	str	r2, [r0, #24]
 8000c18:	61c1      	str	r1, [r0, #28]
 8000c1a:	6201      	str	r1, [r0, #32]
 8000c1c:	6241      	str	r1, [r0, #36]	; 0x24
 8000c1e:	6281      	str	r1, [r0, #40]	; 0x28
 8000c20:	210a      	movs	r1, #10
 8000c22:	62c1      	str	r1, [r0, #44]	; 0x2c
 8000c24:	f005 ff16 	bl	8006a54 <HAL_SPI_Init>
 8000c28:	2800      	cmp	r0, #0
 8000c2a:	d021      	beq.n	8000c70 <MX_SPI1_Init_76_SAFE+0x6>
 8000c2c:	e7ff      	b.n	8000c2e <MX_SPI1_Init_72_FORPUSH>

08000c2e <MX_SPI1_Init_72_FORPUSH>:
 8000c2e:	b507      	push	{r0, r1, r2, lr}
 8000c30:	f240 0ed8 	movw	lr, #216	; 0xd8
 8000c34:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 8000c38:	492f      	ldr	r1, [pc, #188]	; (8000cf8 <Error_Handler+0x8>)
 8000c3a:	680a      	ldr	r2, [r1, #0]
 8000c3c:	f8c2 e000 	str.w	lr, [r2]
 8000c40:	f102 0204 	add.w	r2, r2, #4
 8000c44:	600a      	str	r2, [r1, #0]
 8000c46:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 8000c4a:	f000 f851 	bl	8000cf0 <Error_Handler>
 8000c4e:	b507      	push	{r0, r1, r2, lr}
 8000c50:	4829      	ldr	r0, [pc, #164]	; (8000cf8 <Error_Handler+0x8>)
 8000c52:	6801      	ldr	r1, [r0, #0]
 8000c54:	f1a1 0104 	sub.w	r1, r1, #4
 8000c58:	680a      	ldr	r2, [r1, #0]
 8000c5a:	6812      	ldr	r2, [r2, #0]
 8000c5c:	6001      	str	r1, [r0, #0]
 8000c5e:	46fe      	mov	lr, pc
 8000c60:	f1ae 0e15 	sub.w	lr, lr, #21
 8000c64:	4596      	cmp	lr, r2
 8000c66:	d000      	beq.n	8000c6a <MX_SPI1_Init_76_SAFE>
 8000c68:	4770      	bx	lr

08000c6a <MX_SPI1_Init_76_SAFE>:
 8000c6a:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 8000c6e:	e7ff      	b.n	8000c70 <MX_SPI1_Init_76_SAFE+0x6>
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop

08000c74 <MX_USART2_UART_Init>:
 8000c74:	b580      	push	{r7, lr}
 8000c76:	466f      	mov	r7, sp
 8000c78:	f240 00b8 	movw	r0, #184	; 0xb8
 8000c7c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000c80:	f244 4100 	movw	r1, #17408	; 0x4400
 8000c84:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000c88:	6001      	str	r1, [r0, #0]
 8000c8a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000c8e:	6041      	str	r1, [r0, #4]
 8000c90:	2100      	movs	r1, #0
 8000c92:	6081      	str	r1, [r0, #8]
 8000c94:	60c1      	str	r1, [r0, #12]
 8000c96:	6101      	str	r1, [r0, #16]
 8000c98:	220c      	movs	r2, #12
 8000c9a:	6142      	str	r2, [r0, #20]
 8000c9c:	6181      	str	r1, [r0, #24]
 8000c9e:	61c1      	str	r1, [r0, #28]
 8000ca0:	f005 ff61 	bl	8006b66 <HAL_UART_Init>
 8000ca4:	2800      	cmp	r0, #0
 8000ca6:	d021      	beq.n	8000cec <MX_USART2_UART_Init_80_SAFE+0x6>
 8000ca8:	e7ff      	b.n	8000caa <MX_USART2_UART_Init_76_FORPUSH>

08000caa <MX_USART2_UART_Init_76_FORPUSH>:
 8000caa:	b507      	push	{r0, r1, r2, lr}
 8000cac:	f240 0ee4 	movw	lr, #228	; 0xe4
 8000cb0:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 8000cb4:	4910      	ldr	r1, [pc, #64]	; (8000cf8 <Error_Handler+0x8>)
 8000cb6:	680a      	ldr	r2, [r1, #0]
 8000cb8:	f8c2 e000 	str.w	lr, [r2]
 8000cbc:	f102 0204 	add.w	r2, r2, #4
 8000cc0:	600a      	str	r2, [r1, #0]
 8000cc2:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 8000cc6:	f000 f813 	bl	8000cf0 <Error_Handler>
 8000cca:	b507      	push	{r0, r1, r2, lr}
 8000ccc:	480a      	ldr	r0, [pc, #40]	; (8000cf8 <Error_Handler+0x8>)
 8000cce:	6801      	ldr	r1, [r0, #0]
 8000cd0:	f1a1 0104 	sub.w	r1, r1, #4
 8000cd4:	680a      	ldr	r2, [r1, #0]
 8000cd6:	6812      	ldr	r2, [r2, #0]
 8000cd8:	6001      	str	r1, [r0, #0]
 8000cda:	46fe      	mov	lr, pc
 8000cdc:	f1ae 0e15 	sub.w	lr, lr, #21
 8000ce0:	4596      	cmp	lr, r2
 8000ce2:	d000      	beq.n	8000ce6 <MX_USART2_UART_Init_80_SAFE>
 8000ce4:	4770      	bx	lr

08000ce6 <MX_USART2_UART_Init_80_SAFE>:
 8000ce6:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
 8000cea:	e7ff      	b.n	8000cec <MX_USART2_UART_Init_80_SAFE+0x6>
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop

08000cf0 <Error_Handler>:
 8000cf0:	b672      	cpsid	i
 8000cf2:	e7ff      	b.n	8000cf4 <Error_Handler+0x4>
 8000cf4:	e7fe      	b.n	8000cf4 <Error_Handler+0x4>
 8000cf6:	0000      	.short	0x0000
 8000cf8:	20010000 	.word	0x20010000
 8000cfc:	20010004 	.word	0x20010004

08000d00 <HAL_MspInit>:
 8000d00:	b580      	push	{r7, lr}
 8000d02:	466f      	mov	r7, sp
 8000d04:	b082      	sub	sp, #8
 8000d06:	e7ff      	b.n	8000d08 <HAL_MspInit+0x8>
 8000d08:	2000      	movs	r0, #0
 8000d0a:	9001      	str	r0, [sp, #4]
 8000d0c:	f643 0044 	movw	r0, #14404	; 0x3844
 8000d10:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000d14:	6801      	ldr	r1, [r0, #0]
 8000d16:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000d1a:	6001      	str	r1, [r0, #0]
 8000d1c:	6800      	ldr	r0, [r0, #0]
 8000d1e:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
 8000d22:	9001      	str	r0, [sp, #4]
 8000d24:	9801      	ldr	r0, [sp, #4]
 8000d26:	e7ff      	b.n	8000d28 <HAL_MspInit+0x28>
 8000d28:	e7ff      	b.n	8000d2a <HAL_MspInit+0x2a>
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	9000      	str	r0, [sp, #0]
 8000d2e:	f643 0040 	movw	r0, #14400	; 0x3840
 8000d32:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000d36:	6801      	ldr	r1, [r0, #0]
 8000d38:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000d3c:	6001      	str	r1, [r0, #0]
 8000d3e:	6800      	ldr	r0, [r0, #0]
 8000d40:	f000 5080 	and.w	r0, r0, #268435456	; 0x10000000
 8000d44:	9000      	str	r0, [sp, #0]
 8000d46:	9800      	ldr	r0, [sp, #0]
 8000d48:	e7ff      	b.n	8000d4a <HAL_MspInit+0x4a>
 8000d4a:	2007      	movs	r0, #7
 8000d4c:	f002 fbc8 	bl	80034e0 <HAL_NVIC_SetPriorityGrouping>
 8000d50:	b002      	add	sp, #8
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_I2C_MspInit>:
 8000d54:	b580      	push	{r7, lr}
 8000d56:	466f      	mov	r7, sp
 8000d58:	b088      	sub	sp, #32
 8000d5a:	9007      	str	r0, [sp, #28]
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	9006      	str	r0, [sp, #24]
 8000d60:	9005      	str	r0, [sp, #20]
 8000d62:	9004      	str	r0, [sp, #16]
 8000d64:	9003      	str	r0, [sp, #12]
 8000d66:	9002      	str	r0, [sp, #8]
 8000d68:	9807      	ldr	r0, [sp, #28]
 8000d6a:	6800      	ldr	r0, [r0, #0]
 8000d6c:	f245 4100 	movw	r1, #21504	; 0x5400
 8000d70:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000d74:	4288      	cmp	r0, r1
 8000d76:	d135      	bne.n	8000de4 <HAL_I2C_MspInit+0x90>
 8000d78:	e7ff      	b.n	8000d7a <HAL_I2C_MspInit+0x26>
 8000d7a:	e7ff      	b.n	8000d7c <HAL_I2C_MspInit+0x28>
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	9001      	str	r0, [sp, #4]
 8000d80:	f643 0030 	movw	r0, #14384	; 0x3830
 8000d84:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000d88:	6801      	ldr	r1, [r0, #0]
 8000d8a:	f041 0102 	orr.w	r1, r1, #2
 8000d8e:	6001      	str	r1, [r0, #0]
 8000d90:	6800      	ldr	r0, [r0, #0]
 8000d92:	f000 0002 	and.w	r0, r0, #2
 8000d96:	9001      	str	r0, [sp, #4]
 8000d98:	9801      	ldr	r0, [sp, #4]
 8000d9a:	e7ff      	b.n	8000d9c <HAL_I2C_MspInit+0x48>
 8000d9c:	f44f 7010 	mov.w	r0, #576	; 0x240
 8000da0:	9002      	str	r0, [sp, #8]
 8000da2:	2012      	movs	r0, #18
 8000da4:	9003      	str	r0, [sp, #12]
 8000da6:	2001      	movs	r0, #1
 8000da8:	9004      	str	r0, [sp, #16]
 8000daa:	2000      	movs	r0, #0
 8000dac:	9005      	str	r0, [sp, #20]
 8000dae:	2004      	movs	r0, #4
 8000db0:	9006      	str	r0, [sp, #24]
 8000db2:	f240 4000 	movw	r0, #1024	; 0x400
 8000db6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000dba:	a902      	add	r1, sp, #8
 8000dbc:	f002 fbd2 	bl	8003564 <HAL_GPIO_Init>
 8000dc0:	e7ff      	b.n	8000dc2 <HAL_I2C_MspInit+0x6e>
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	9000      	str	r0, [sp, #0]
 8000dc6:	f643 0040 	movw	r0, #14400	; 0x3840
 8000dca:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000dce:	6801      	ldr	r1, [r0, #0]
 8000dd0:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8000dd4:	6001      	str	r1, [r0, #0]
 8000dd6:	6800      	ldr	r0, [r0, #0]
 8000dd8:	f400 1000 	and.w	r0, r0, #2097152	; 0x200000
 8000ddc:	9000      	str	r0, [sp, #0]
 8000dde:	9800      	ldr	r0, [sp, #0]
 8000de0:	e7ff      	b.n	8000de2 <HAL_I2C_MspInit+0x8e>
 8000de2:	e7ff      	b.n	8000de4 <HAL_I2C_MspInit+0x90>
 8000de4:	b008      	add	sp, #32
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_I2C_MspDeInit>:
 8000de8:	b5d0      	push	{r4, r6, r7, lr}
 8000dea:	af02      	add	r7, sp, #8
 8000dec:	b082      	sub	sp, #8
 8000dee:	9001      	str	r0, [sp, #4]
 8000df0:	9801      	ldr	r0, [sp, #4]
 8000df2:	6800      	ldr	r0, [r0, #0]
 8000df4:	f245 4100 	movw	r1, #21504	; 0x5400
 8000df8:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000dfc:	4288      	cmp	r0, r1
 8000dfe:	d116      	bne.n	8000e2e <HAL_I2C_MspDeInit+0x46>
 8000e00:	e7ff      	b.n	8000e02 <HAL_I2C_MspDeInit+0x1a>
 8000e02:	f643 0040 	movw	r0, #14400	; 0x3840
 8000e06:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000e0a:	6801      	ldr	r1, [r0, #0]
 8000e0c:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 8000e10:	6001      	str	r1, [r0, #0]
 8000e12:	f240 4400 	movw	r4, #1024	; 0x400
 8000e16:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	2140      	movs	r1, #64	; 0x40
 8000e1e:	f002 fd3d 	bl	800389c <HAL_GPIO_DeInit>
 8000e22:	4620      	mov	r0, r4
 8000e24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e28:	f002 fd38 	bl	800389c <HAL_GPIO_DeInit>
 8000e2c:	e7ff      	b.n	8000e2e <HAL_I2C_MspDeInit+0x46>
 8000e2e:	b002      	add	sp, #8
 8000e30:	bdd0      	pop	{r4, r6, r7, pc}
 8000e32:	bf00      	nop

08000e34 <HAL_I2S_MspInit>:
 8000e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e36:	af03      	add	r7, sp, #12
 8000e38:	f84d 8d04 	str.w	r8, [sp, #-4]!
 8000e3c:	b08e      	sub	sp, #56	; 0x38
 8000e3e:	900d      	str	r0, [sp, #52]	; 0x34
 8000e40:	2000      	movs	r0, #0
 8000e42:	900c      	str	r0, [sp, #48]	; 0x30
 8000e44:	900b      	str	r0, [sp, #44]	; 0x2c
 8000e46:	900a      	str	r0, [sp, #40]	; 0x28
 8000e48:	9009      	str	r0, [sp, #36]	; 0x24
 8000e4a:	9008      	str	r0, [sp, #32]
 8000e4c:	9007      	str	r0, [sp, #28]
 8000e4e:	9006      	str	r0, [sp, #24]
 8000e50:	9005      	str	r0, [sp, #20]
 8000e52:	9004      	str	r0, [sp, #16]
 8000e54:	980d      	ldr	r0, [sp, #52]	; 0x34
 8000e56:	6800      	ldr	r0, [r0, #0]
 8000e58:	f643 4100 	movw	r1, #15360	; 0x3c00
 8000e5c:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000e60:	4288      	cmp	r0, r1
 8000e62:	d163      	bne.n	8000f2c <HAL_I2S_MspInit+0xf8>
 8000e64:	e7ff      	b.n	8000e66 <HAL_I2S_MspInit+0x32>
 8000e66:	2001      	movs	r0, #1
 8000e68:	9004      	str	r0, [sp, #16]
 8000e6a:	20c0      	movs	r0, #192	; 0xc0
 8000e6c:	9005      	str	r0, [sp, #20]
 8000e6e:	2002      	movs	r0, #2
 8000e70:	9006      	str	r0, [sp, #24]
 8000e72:	a804      	add	r0, sp, #16
 8000e74:	f005 fcae 	bl	80067d4 <HAL_RCCEx_PeriphCLKConfig>
 8000e78:	b118      	cbz	r0, 8000e82 <HAL_I2S_MspInit+0x4e>
 8000e7a:	e7ff      	b.n	8000e7c <HAL_I2S_MspInit+0x48>
 8000e7c:	f7ff ff38 	bl	8000cf0 <Error_Handler>
 8000e80:	e7ff      	b.n	8000e82 <HAL_I2S_MspInit+0x4e>
 8000e82:	e7ff      	b.n	8000e84 <HAL_I2S_MspInit+0x50>
 8000e84:	2000      	movs	r0, #0
 8000e86:	9003      	str	r0, [sp, #12]
 8000e88:	f643 0040 	movw	r0, #14400	; 0x3840
 8000e8c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000e90:	6801      	ldr	r1, [r0, #0]
 8000e92:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8000e96:	6001      	str	r1, [r0, #0]
 8000e98:	6800      	ldr	r0, [r0, #0]
 8000e9a:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
 8000e9e:	9003      	str	r0, [sp, #12]
 8000ea0:	9803      	ldr	r0, [sp, #12]
 8000ea2:	e7ff      	b.n	8000ea4 <HAL_I2S_MspInit+0x70>
 8000ea4:	e7ff      	b.n	8000ea6 <HAL_I2S_MspInit+0x72>
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	9002      	str	r0, [sp, #8]
 8000eaa:	f643 0030 	movw	r0, #14384	; 0x3830
 8000eae:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000eb2:	6801      	ldr	r1, [r0, #0]
 8000eb4:	f041 0101 	orr.w	r1, r1, #1
 8000eb8:	6001      	str	r1, [r0, #0]
 8000eba:	6800      	ldr	r0, [r0, #0]
 8000ebc:	f000 0001 	and.w	r0, r0, #1
 8000ec0:	9002      	str	r0, [sp, #8]
 8000ec2:	9802      	ldr	r0, [sp, #8]
 8000ec4:	e7ff      	b.n	8000ec6 <HAL_I2S_MspInit+0x92>
 8000ec6:	e7ff      	b.n	8000ec8 <HAL_I2S_MspInit+0x94>
 8000ec8:	2000      	movs	r0, #0
 8000eca:	9001      	str	r0, [sp, #4]
 8000ecc:	f643 0030 	movw	r0, #14384	; 0x3830
 8000ed0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000ed4:	6801      	ldr	r1, [r0, #0]
 8000ed6:	f041 0104 	orr.w	r1, r1, #4
 8000eda:	6001      	str	r1, [r0, #0]
 8000edc:	6800      	ldr	r0, [r0, #0]
 8000ede:	f000 0004 	and.w	r0, r0, #4
 8000ee2:	9001      	str	r0, [sp, #4]
 8000ee4:	9801      	ldr	r0, [sp, #4]
 8000ee6:	e7ff      	b.n	8000ee8 <HAL_I2S_MspInit+0xb4>
 8000ee8:	2010      	movs	r0, #16
 8000eea:	9008      	str	r0, [sp, #32]
 8000eec:	f04f 0802 	mov.w	r8, #2
 8000ef0:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8000ef4:	2600      	movs	r6, #0
 8000ef6:	960a      	str	r6, [sp, #40]	; 0x28
 8000ef8:	960b      	str	r6, [sp, #44]	; 0x2c
 8000efa:	2506      	movs	r5, #6
 8000efc:	950c      	str	r5, [sp, #48]	; 0x30
 8000efe:	2000      	movs	r0, #0
 8000f00:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000f04:	ac08      	add	r4, sp, #32
 8000f06:	4621      	mov	r1, r4
 8000f08:	f002 fb2c 	bl	8003564 <HAL_GPIO_Init>
 8000f0c:	f44f 50a4 	mov.w	r0, #5248	; 0x1480
 8000f10:	9008      	str	r0, [sp, #32]
 8000f12:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8000f16:	960a      	str	r6, [sp, #40]	; 0x28
 8000f18:	960b      	str	r6, [sp, #44]	; 0x2c
 8000f1a:	950c      	str	r5, [sp, #48]	; 0x30
 8000f1c:	f640 0000 	movw	r0, #2048	; 0x800
 8000f20:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000f24:	4621      	mov	r1, r4
 8000f26:	f002 fb1d 	bl	8003564 <HAL_GPIO_Init>
 8000f2a:	e7ff      	b.n	8000f2c <HAL_I2S_MspInit+0xf8>
 8000f2c:	b00e      	add	sp, #56	; 0x38
 8000f2e:	f85d 8b04 	ldr.w	r8, [sp], #4
 8000f32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f34 <HAL_I2S_MspDeInit>:
 8000f34:	b580      	push	{r7, lr}
 8000f36:	466f      	mov	r7, sp
 8000f38:	b082      	sub	sp, #8
 8000f3a:	9001      	str	r0, [sp, #4]
 8000f3c:	9801      	ldr	r0, [sp, #4]
 8000f3e:	6800      	ldr	r0, [r0, #0]
 8000f40:	f643 4100 	movw	r1, #15360	; 0x3c00
 8000f44:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000f48:	4288      	cmp	r0, r1
 8000f4a:	d117      	bne.n	8000f7c <HAL_I2S_MspDeInit+0x48>
 8000f4c:	e7ff      	b.n	8000f4e <HAL_I2S_MspDeInit+0x1a>
 8000f4e:	f643 0040 	movw	r0, #14400	; 0x3840
 8000f52:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000f56:	6801      	ldr	r1, [r0, #0]
 8000f58:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8000f5c:	6001      	str	r1, [r0, #0]
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000f64:	2110      	movs	r1, #16
 8000f66:	f002 fc99 	bl	800389c <HAL_GPIO_DeInit>
 8000f6a:	f640 0000 	movw	r0, #2048	; 0x800
 8000f6e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000f72:	f44f 51a4 	mov.w	r1, #5248	; 0x1480
 8000f76:	f002 fc91 	bl	800389c <HAL_GPIO_DeInit>
 8000f7a:	e7ff      	b.n	8000f7c <HAL_I2S_MspDeInit+0x48>
 8000f7c:	b002      	add	sp, #8
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_SPI_MspInit>:
 8000f80:	b580      	push	{r7, lr}
 8000f82:	466f      	mov	r7, sp
 8000f84:	b088      	sub	sp, #32
 8000f86:	9007      	str	r0, [sp, #28]
 8000f88:	2000      	movs	r0, #0
 8000f8a:	9006      	str	r0, [sp, #24]
 8000f8c:	9005      	str	r0, [sp, #20]
 8000f8e:	9004      	str	r0, [sp, #16]
 8000f90:	9003      	str	r0, [sp, #12]
 8000f92:	9002      	str	r0, [sp, #8]
 8000f94:	9807      	ldr	r0, [sp, #28]
 8000f96:	6800      	ldr	r0, [r0, #0]
 8000f98:	f243 0100 	movw	r1, #12288	; 0x3000
 8000f9c:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8000fa0:	4288      	cmp	r0, r1
 8000fa2:	d132      	bne.n	800100a <HAL_SPI_MspInit+0x8a>
 8000fa4:	e7ff      	b.n	8000fa6 <HAL_SPI_MspInit+0x26>
 8000fa6:	e7ff      	b.n	8000fa8 <HAL_SPI_MspInit+0x28>
 8000fa8:	2000      	movs	r0, #0
 8000faa:	9001      	str	r0, [sp, #4]
 8000fac:	f643 0044 	movw	r0, #14404	; 0x3844
 8000fb0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000fb4:	6801      	ldr	r1, [r0, #0]
 8000fb6:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8000fba:	6001      	str	r1, [r0, #0]
 8000fbc:	6800      	ldr	r0, [r0, #0]
 8000fbe:	f400 5080 	and.w	r0, r0, #4096	; 0x1000
 8000fc2:	9001      	str	r0, [sp, #4]
 8000fc4:	9801      	ldr	r0, [sp, #4]
 8000fc6:	e7ff      	b.n	8000fc8 <HAL_SPI_MspInit+0x48>
 8000fc8:	e7ff      	b.n	8000fca <HAL_SPI_MspInit+0x4a>
 8000fca:	2000      	movs	r0, #0
 8000fcc:	9000      	str	r0, [sp, #0]
 8000fce:	f643 0030 	movw	r0, #14384	; 0x3830
 8000fd2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000fd6:	6801      	ldr	r1, [r0, #0]
 8000fd8:	f041 0101 	orr.w	r1, r1, #1
 8000fdc:	6001      	str	r1, [r0, #0]
 8000fde:	6800      	ldr	r0, [r0, #0]
 8000fe0:	f000 0001 	and.w	r0, r0, #1
 8000fe4:	9000      	str	r0, [sp, #0]
 8000fe6:	9800      	ldr	r0, [sp, #0]
 8000fe8:	e7ff      	b.n	8000fea <HAL_SPI_MspInit+0x6a>
 8000fea:	20e0      	movs	r0, #224	; 0xe0
 8000fec:	9002      	str	r0, [sp, #8]
 8000fee:	2002      	movs	r0, #2
 8000ff0:	9003      	str	r0, [sp, #12]
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	9004      	str	r0, [sp, #16]
 8000ff6:	9005      	str	r0, [sp, #20]
 8000ff8:	2005      	movs	r0, #5
 8000ffa:	9006      	str	r0, [sp, #24]
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001002:	a902      	add	r1, sp, #8
 8001004:	f002 faae 	bl	8003564 <HAL_GPIO_Init>
 8001008:	e7ff      	b.n	800100a <HAL_SPI_MspInit+0x8a>
 800100a:	b008      	add	sp, #32
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop

08001010 <HAL_SPI_MspDeInit>:
 8001010:	b580      	push	{r7, lr}
 8001012:	466f      	mov	r7, sp
 8001014:	b082      	sub	sp, #8
 8001016:	9001      	str	r0, [sp, #4]
 8001018:	9801      	ldr	r0, [sp, #4]
 800101a:	6800      	ldr	r0, [r0, #0]
 800101c:	f243 0100 	movw	r1, #12288	; 0x3000
 8001020:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8001024:	4288      	cmp	r0, r1
 8001026:	d10f      	bne.n	8001048 <HAL_SPI_MspDeInit+0x38>
 8001028:	e7ff      	b.n	800102a <HAL_SPI_MspDeInit+0x1a>
 800102a:	f643 0044 	movw	r0, #14404	; 0x3844
 800102e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001032:	6801      	ldr	r1, [r0, #0]
 8001034:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8001038:	6001      	str	r1, [r0, #0]
 800103a:	2000      	movs	r0, #0
 800103c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001040:	21e0      	movs	r1, #224	; 0xe0
 8001042:	f002 fc2b 	bl	800389c <HAL_GPIO_DeInit>
 8001046:	e7ff      	b.n	8001048 <HAL_SPI_MspDeInit+0x38>
 8001048:	b002      	add	sp, #8
 800104a:	bd80      	pop	{r7, pc}

0800104c <HAL_UART_MspInit>:
 800104c:	b580      	push	{r7, lr}
 800104e:	466f      	mov	r7, sp
 8001050:	b088      	sub	sp, #32
 8001052:	9007      	str	r0, [sp, #28]
 8001054:	2000      	movs	r0, #0
 8001056:	9006      	str	r0, [sp, #24]
 8001058:	9005      	str	r0, [sp, #20]
 800105a:	9004      	str	r0, [sp, #16]
 800105c:	9003      	str	r0, [sp, #12]
 800105e:	9002      	str	r0, [sp, #8]
 8001060:	9807      	ldr	r0, [sp, #28]
 8001062:	6800      	ldr	r0, [r0, #0]
 8001064:	f244 4100 	movw	r1, #17408	; 0x4400
 8001068:	f2c4 0100 	movt	r1, #16384	; 0x4000
 800106c:	4288      	cmp	r0, r1
 800106e:	d133      	bne.n	80010d8 <HAL_UART_MspInit+0x8c>
 8001070:	e7ff      	b.n	8001072 <HAL_UART_MspInit+0x26>
 8001072:	e7ff      	b.n	8001074 <HAL_UART_MspInit+0x28>
 8001074:	2000      	movs	r0, #0
 8001076:	9001      	str	r0, [sp, #4]
 8001078:	f643 0040 	movw	r0, #14400	; 0x3840
 800107c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001080:	6801      	ldr	r1, [r0, #0]
 8001082:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001086:	6001      	str	r1, [r0, #0]
 8001088:	6800      	ldr	r0, [r0, #0]
 800108a:	f400 3000 	and.w	r0, r0, #131072	; 0x20000
 800108e:	9001      	str	r0, [sp, #4]
 8001090:	9801      	ldr	r0, [sp, #4]
 8001092:	e7ff      	b.n	8001094 <HAL_UART_MspInit+0x48>
 8001094:	e7ff      	b.n	8001096 <HAL_UART_MspInit+0x4a>
 8001096:	2000      	movs	r0, #0
 8001098:	9000      	str	r0, [sp, #0]
 800109a:	f643 0030 	movw	r0, #14384	; 0x3830
 800109e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80010a2:	6801      	ldr	r1, [r0, #0]
 80010a4:	f041 0101 	orr.w	r1, r1, #1
 80010a8:	6001      	str	r1, [r0, #0]
 80010aa:	6800      	ldr	r0, [r0, #0]
 80010ac:	f000 0001 	and.w	r0, r0, #1
 80010b0:	9000      	str	r0, [sp, #0]
 80010b2:	9800      	ldr	r0, [sp, #0]
 80010b4:	e7ff      	b.n	80010b6 <HAL_UART_MspInit+0x6a>
 80010b6:	200c      	movs	r0, #12
 80010b8:	9002      	str	r0, [sp, #8]
 80010ba:	2002      	movs	r0, #2
 80010bc:	9003      	str	r0, [sp, #12]
 80010be:	2000      	movs	r0, #0
 80010c0:	9004      	str	r0, [sp, #16]
 80010c2:	2003      	movs	r0, #3
 80010c4:	9005      	str	r0, [sp, #20]
 80010c6:	2007      	movs	r0, #7
 80010c8:	9006      	str	r0, [sp, #24]
 80010ca:	2000      	movs	r0, #0
 80010cc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80010d0:	a902      	add	r1, sp, #8
 80010d2:	f002 fa47 	bl	8003564 <HAL_GPIO_Init>
 80010d6:	e7ff      	b.n	80010d8 <HAL_UART_MspInit+0x8c>
 80010d8:	b008      	add	sp, #32
 80010da:	bd80      	pop	{r7, pc}

080010dc <HAL_UART_MspDeInit>:
 80010dc:	b580      	push	{r7, lr}
 80010de:	466f      	mov	r7, sp
 80010e0:	b082      	sub	sp, #8
 80010e2:	9001      	str	r0, [sp, #4]
 80010e4:	9801      	ldr	r0, [sp, #4]
 80010e6:	6800      	ldr	r0, [r0, #0]
 80010e8:	f244 4100 	movw	r1, #17408	; 0x4400
 80010ec:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80010f0:	4288      	cmp	r0, r1
 80010f2:	d10f      	bne.n	8001114 <HAL_UART_MspDeInit+0x38>
 80010f4:	e7ff      	b.n	80010f6 <HAL_UART_MspDeInit+0x1a>
 80010f6:	f643 0040 	movw	r0, #14400	; 0x3840
 80010fa:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80010fe:	6801      	ldr	r1, [r0, #0]
 8001100:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
 8001104:	6001      	str	r1, [r0, #0]
 8001106:	2000      	movs	r0, #0
 8001108:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800110c:	210c      	movs	r1, #12
 800110e:	f002 fbc5 	bl	800389c <HAL_GPIO_DeInit>
 8001112:	e7ff      	b.n	8001114 <HAL_UART_MspDeInit+0x38>
 8001114:	b002      	add	sp, #8
 8001116:	bd80      	pop	{r7, pc}

08001118 <NMI_Handler>:
 8001118:	e7ff      	b.n	800111a <NMI_Handler+0x2>
 800111a:	e7fe      	b.n	800111a <NMI_Handler+0x2>

0800111c <HardFault_Handler>:
 800111c:	e7ff      	b.n	800111e <HardFault_Handler+0x2>
 800111e:	e7fe      	b.n	800111e <HardFault_Handler+0x2>

08001120 <MemManage_Handler>:
 8001120:	e7ff      	b.n	8001122 <MemManage_Handler+0x2>
 8001122:	e7fe      	b.n	8001122 <MemManage_Handler+0x2>

08001124 <BusFault_Handler>:
 8001124:	e7ff      	b.n	8001126 <BusFault_Handler+0x2>
 8001126:	e7fe      	b.n	8001126 <BusFault_Handler+0x2>

08001128 <UsageFault_Handler>:
 8001128:	e7ff      	b.n	800112a <UsageFault_Handler+0x2>
 800112a:	e7fe      	b.n	800112a <UsageFault_Handler+0x2>

0800112c <SVC_Handler>:
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop

08001130 <DebugMon_Handler>:
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop

08001134 <PendSV_Handler>:
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop

08001138 <SysTick_Handler>:
 8001138:	b580      	push	{r7, lr}
 800113a:	466f      	mov	r7, sp
 800113c:	f002 f8bc 	bl	80032b8 <HAL_IncTick>
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop

08001144 <OTG_FS_IRQHandler>:
 8001144:	b580      	push	{r7, lr}
 8001146:	466f      	mov	r7, sp
 8001148:	f240 50f8 	movw	r0, #1528	; 0x5f8
 800114c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001150:	f002 ff24 	bl	8003f9c <HAL_HCD_IRQHandler>
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop

08001158 <initialise_monitor_handles>:
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <_getpid>:
 800115c:	2001      	movs	r0, #1
 800115e:	4770      	bx	lr

08001160 <_kill>:
 8001160:	b580      	push	{r7, lr}
 8001162:	466f      	mov	r7, sp
 8001164:	b082      	sub	sp, #8
 8001166:	9001      	str	r0, [sp, #4]
 8001168:	9100      	str	r1, [sp, #0]
 800116a:	f000 f9f5 	bl	8001558 <__errno>
 800116e:	2116      	movs	r1, #22
 8001170:	6001      	str	r1, [r0, #0]
 8001172:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001176:	b002      	add	sp, #8
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop

0800117c <_exit>:
 800117c:	b580      	push	{r7, lr}
 800117e:	466f      	mov	r7, sp
 8001180:	b082      	sub	sp, #8
 8001182:	9001      	str	r0, [sp, #4]
 8001184:	9801      	ldr	r0, [sp, #4]
 8001186:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800118a:	f7ff ffe9 	bl	8001160 <_kill>
 800118e:	e7ff      	b.n	8001190 <_exit+0x14>
 8001190:	e7fe      	b.n	8001190 <_exit+0x14>
 8001192:	bf00      	nop

08001194 <_read>:
 8001194:	b580      	push	{r7, lr}
 8001196:	466f      	mov	r7, sp
 8001198:	b084      	sub	sp, #16
 800119a:	9003      	str	r0, [sp, #12]
 800119c:	9102      	str	r1, [sp, #8]
 800119e:	9201      	str	r2, [sp, #4]
 80011a0:	2000      	movs	r0, #0
 80011a2:	9000      	str	r0, [sp, #0]
 80011a4:	e7ff      	b.n	80011a6 <_read+0x12>
 80011a6:	9800      	ldr	r0, [sp, #0]
 80011a8:	9901      	ldr	r1, [sp, #4]
 80011aa:	4288      	cmp	r0, r1
 80011ac:	da0b      	bge.n	80011c6 <_read+0x32>
 80011ae:	e7ff      	b.n	80011b0 <_read+0x1c>
 80011b0:	f3af 8000 	nop.w
 80011b4:	9902      	ldr	r1, [sp, #8]
 80011b6:	1c4a      	adds	r2, r1, #1
 80011b8:	9202      	str	r2, [sp, #8]
 80011ba:	7008      	strb	r0, [r1, #0]
 80011bc:	e7ff      	b.n	80011be <_read+0x2a>
 80011be:	9800      	ldr	r0, [sp, #0]
 80011c0:	3001      	adds	r0, #1
 80011c2:	9000      	str	r0, [sp, #0]
 80011c4:	e7ef      	b.n	80011a6 <_read+0x12>
 80011c6:	9801      	ldr	r0, [sp, #4]
 80011c8:	b004      	add	sp, #16
 80011ca:	bd80      	pop	{r7, pc}

080011cc <_write>:
 80011cc:	b580      	push	{r7, lr}
 80011ce:	466f      	mov	r7, sp
 80011d0:	b084      	sub	sp, #16
 80011d2:	9003      	str	r0, [sp, #12]
 80011d4:	9102      	str	r1, [sp, #8]
 80011d6:	9201      	str	r2, [sp, #4]
 80011d8:	2000      	movs	r0, #0
 80011da:	9000      	str	r0, [sp, #0]
 80011dc:	e7ff      	b.n	80011de <_write+0x12>
 80011de:	9800      	ldr	r0, [sp, #0]
 80011e0:	9901      	ldr	r1, [sp, #4]
 80011e2:	4288      	cmp	r0, r1
 80011e4:	da0b      	bge.n	80011fe <_write+0x32>
 80011e6:	e7ff      	b.n	80011e8 <_write+0x1c>
 80011e8:	9802      	ldr	r0, [sp, #8]
 80011ea:	1c41      	adds	r1, r0, #1
 80011ec:	9102      	str	r1, [sp, #8]
 80011ee:	7800      	ldrb	r0, [r0, #0]
 80011f0:	f7ff f982 	bl	80004f8 <__io_putchar>
 80011f4:	e7ff      	b.n	80011f6 <_write+0x2a>
 80011f6:	9800      	ldr	r0, [sp, #0]
 80011f8:	3001      	adds	r0, #1
 80011fa:	9000      	str	r0, [sp, #0]
 80011fc:	e7ef      	b.n	80011de <_write+0x12>
 80011fe:	9801      	ldr	r0, [sp, #4]
 8001200:	b004      	add	sp, #16
 8001202:	bd80      	pop	{r7, pc}

08001204 <_close>:
 8001204:	b081      	sub	sp, #4
 8001206:	9000      	str	r0, [sp, #0]
 8001208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800120c:	b001      	add	sp, #4
 800120e:	4770      	bx	lr

08001210 <_fstat>:
 8001210:	b082      	sub	sp, #8
 8001212:	9001      	str	r0, [sp, #4]
 8001214:	9100      	str	r1, [sp, #0]
 8001216:	9800      	ldr	r0, [sp, #0]
 8001218:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800121c:	6041      	str	r1, [r0, #4]
 800121e:	2000      	movs	r0, #0
 8001220:	b002      	add	sp, #8
 8001222:	4770      	bx	lr

08001224 <_isatty>:
 8001224:	b081      	sub	sp, #4
 8001226:	9000      	str	r0, [sp, #0]
 8001228:	2001      	movs	r0, #1
 800122a:	b001      	add	sp, #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop

08001230 <_lseek>:
 8001230:	b083      	sub	sp, #12
 8001232:	9002      	str	r0, [sp, #8]
 8001234:	9101      	str	r1, [sp, #4]
 8001236:	9200      	str	r2, [sp, #0]
 8001238:	2000      	movs	r0, #0
 800123a:	b003      	add	sp, #12
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop

08001240 <_open>:
 8001240:	b082      	sub	sp, #8
 8001242:	9001      	str	r0, [sp, #4]
 8001244:	9100      	str	r1, [sp, #0]
 8001246:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800124a:	b002      	add	sp, #8
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop

08001250 <_wait>:
 8001250:	b580      	push	{r7, lr}
 8001252:	466f      	mov	r7, sp
 8001254:	b082      	sub	sp, #8
 8001256:	9001      	str	r0, [sp, #4]
 8001258:	f000 f97e 	bl	8001558 <__errno>
 800125c:	210a      	movs	r1, #10
 800125e:	6001      	str	r1, [r0, #0]
 8001260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001264:	b002      	add	sp, #8
 8001266:	bd80      	pop	{r7, pc}

08001268 <_unlink>:
 8001268:	b580      	push	{r7, lr}
 800126a:	466f      	mov	r7, sp
 800126c:	b082      	sub	sp, #8
 800126e:	9001      	str	r0, [sp, #4]
 8001270:	f000 f972 	bl	8001558 <__errno>
 8001274:	2102      	movs	r1, #2
 8001276:	6001      	str	r1, [r0, #0]
 8001278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800127c:	b002      	add	sp, #8
 800127e:	bd80      	pop	{r7, pc}

08001280 <_times>:
 8001280:	b081      	sub	sp, #4
 8001282:	9000      	str	r0, [sp, #0]
 8001284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001288:	b001      	add	sp, #4
 800128a:	4770      	bx	lr

0800128c <_stat>:
 800128c:	b082      	sub	sp, #8
 800128e:	9001      	str	r0, [sp, #4]
 8001290:	9100      	str	r1, [sp, #0]
 8001292:	9800      	ldr	r0, [sp, #0]
 8001294:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001298:	6041      	str	r1, [r0, #4]
 800129a:	2000      	movs	r0, #0
 800129c:	b002      	add	sp, #8
 800129e:	4770      	bx	lr

080012a0 <_link>:
 80012a0:	b580      	push	{r7, lr}
 80012a2:	466f      	mov	r7, sp
 80012a4:	b082      	sub	sp, #8
 80012a6:	9001      	str	r0, [sp, #4]
 80012a8:	9100      	str	r1, [sp, #0]
 80012aa:	f000 f955 	bl	8001558 <__errno>
 80012ae:	211f      	movs	r1, #31
 80012b0:	6001      	str	r1, [r0, #0]
 80012b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012b6:	b002      	add	sp, #8
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop

080012bc <_fork>:
 80012bc:	b580      	push	{r7, lr}
 80012be:	466f      	mov	r7, sp
 80012c0:	f000 f94a 	bl	8001558 <__errno>
 80012c4:	210b      	movs	r1, #11
 80012c6:	6001      	str	r1, [r0, #0]
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop

080012d0 <_execve>:
 80012d0:	b580      	push	{r7, lr}
 80012d2:	466f      	mov	r7, sp
 80012d4:	b084      	sub	sp, #16
 80012d6:	9003      	str	r0, [sp, #12]
 80012d8:	9102      	str	r1, [sp, #8]
 80012da:	9201      	str	r2, [sp, #4]
 80012dc:	f000 f93c 	bl	8001558 <__errno>
 80012e0:	210c      	movs	r1, #12
 80012e2:	6001      	str	r1, [r0, #0]
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012e8:	b004      	add	sp, #16
 80012ea:	bd80      	pop	{r7, pc}

080012ec <_sbrk>:
 80012ec:	b580      	push	{r7, lr}
 80012ee:	466f      	mov	r7, sp
 80012f0:	b086      	sub	sp, #24
 80012f2:	9004      	str	r0, [sp, #16]
 80012f4:	f240 4000 	movw	r0, #1024	; 0x400
 80012f8:	f2c0 0000 	movt	r0, #0
 80012fc:	f240 0100 	movw	r1, #0
 8001300:	f2c2 0102 	movt	r1, #8194	; 0x2002
 8001304:	1a08      	subs	r0, r1, r0
 8001306:	9003      	str	r0, [sp, #12]
 8001308:	9803      	ldr	r0, [sp, #12]
 800130a:	9002      	str	r0, [sp, #8]
 800130c:	f240 2008 	movw	r0, #520	; 0x208
 8001310:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001314:	6800      	ldr	r0, [r0, #0]
 8001316:	b950      	cbnz	r0, 800132e <_sbrk+0x42>
 8001318:	e7ff      	b.n	800131a <_sbrk+0x2e>
 800131a:	f240 2008 	movw	r0, #520	; 0x208
 800131e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001322:	f640 1100 	movw	r1, #2304	; 0x900
 8001326:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800132a:	6001      	str	r1, [r0, #0]
 800132c:	e7ff      	b.n	800132e <_sbrk+0x42>
 800132e:	f240 2008 	movw	r0, #520	; 0x208
 8001332:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001336:	6800      	ldr	r0, [r0, #0]
 8001338:	9904      	ldr	r1, [sp, #16]
 800133a:	4408      	add	r0, r1
 800133c:	9902      	ldr	r1, [sp, #8]
 800133e:	4288      	cmp	r0, r1
 8001340:	d908      	bls.n	8001354 <_sbrk+0x68>
 8001342:	e7ff      	b.n	8001344 <_sbrk+0x58>
 8001344:	f000 f908 	bl	8001558 <__errno>
 8001348:	210c      	movs	r1, #12
 800134a:	6001      	str	r1, [r0, #0]
 800134c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001350:	9005      	str	r0, [sp, #20]
 8001352:	e00c      	b.n	800136e <_sbrk+0x82>
 8001354:	f240 2008 	movw	r0, #520	; 0x208
 8001358:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800135c:	6801      	ldr	r1, [r0, #0]
 800135e:	9101      	str	r1, [sp, #4]
 8001360:	9904      	ldr	r1, [sp, #16]
 8001362:	6802      	ldr	r2, [r0, #0]
 8001364:	4411      	add	r1, r2
 8001366:	6001      	str	r1, [r0, #0]
 8001368:	9801      	ldr	r0, [sp, #4]
 800136a:	9005      	str	r0, [sp, #20]
 800136c:	e7ff      	b.n	800136e <_sbrk+0x82>
 800136e:	9805      	ldr	r0, [sp, #20]
 8001370:	b006      	add	sp, #24
 8001372:	bd80      	pop	{r7, pc}

08001374 <SystemInit>:
 8001374:	f64e 5088 	movw	r0, #60808	; 0xed88
 8001378:	f2ce 0000 	movt	r0, #57344	; 0xe000
 800137c:	6801      	ldr	r1, [r0, #0]
 800137e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001382:	6001      	str	r1, [r0, #0]
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop

08001388 <SystemCoreClockUpdate>:
 8001388:	b085      	sub	sp, #20
 800138a:	2000      	movs	r0, #0
 800138c:	9004      	str	r0, [sp, #16]
 800138e:	9003      	str	r0, [sp, #12]
 8001390:	2102      	movs	r1, #2
 8001392:	9102      	str	r1, [sp, #8]
 8001394:	9001      	str	r0, [sp, #4]
 8001396:	9100      	str	r1, [sp, #0]
 8001398:	f643 0008 	movw	r0, #14344	; 0x3808
 800139c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80013a0:	6800      	ldr	r0, [r0, #0]
 80013a2:	f000 000c 	and.w	r0, r0, #12
 80013a6:	9004      	str	r0, [sp, #16]
 80013a8:	9804      	ldr	r0, [sp, #16]
 80013aa:	b130      	cbz	r0, 80013ba <SystemCoreClockUpdate+0x32>
 80013ac:	e7ff      	b.n	80013ae <SystemCoreClockUpdate+0x26>
 80013ae:	2804      	cmp	r0, #4
 80013b0:	d00d      	beq.n	80013ce <SystemCoreClockUpdate+0x46>
 80013b2:	e7ff      	b.n	80013b4 <SystemCoreClockUpdate+0x2c>
 80013b4:	2808      	cmp	r0, #8
 80013b6:	d014      	beq.n	80013e2 <SystemCoreClockUpdate+0x5a>
 80013b8:	e059      	b.n	800146e <SystemCoreClockUpdate+0xe6>
 80013ba:	f240 0000 	movw	r0, #0
 80013be:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80013c2:	f242 4100 	movw	r1, #9216	; 0x2400
 80013c6:	f2c0 01f4 	movt	r1, #244	; 0xf4
 80013ca:	6001      	str	r1, [r0, #0]
 80013cc:	e059      	b.n	8001482 <SystemCoreClockUpdate+0xfa>
 80013ce:	f240 0000 	movw	r0, #0
 80013d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80013d6:	f241 2100 	movw	r1, #4608	; 0x1200
 80013da:	f2c0 017a 	movt	r1, #122	; 0x7a
 80013de:	6001      	str	r1, [r0, #0]
 80013e0:	e04f      	b.n	8001482 <SystemCoreClockUpdate+0xfa>
 80013e2:	f643 0004 	movw	r0, #14340	; 0x3804
 80013e6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80013ea:	6801      	ldr	r1, [r0, #0]
 80013ec:	f3c1 5180 	ubfx	r1, r1, #22, #1
 80013f0:	9101      	str	r1, [sp, #4]
 80013f2:	6800      	ldr	r0, [r0, #0]
 80013f4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80013f8:	9000      	str	r0, [sp, #0]
 80013fa:	9801      	ldr	r0, [sp, #4]
 80013fc:	b188      	cbz	r0, 8001422 <SystemCoreClockUpdate+0x9a>
 80013fe:	e7ff      	b.n	8001400 <SystemCoreClockUpdate+0x78>
 8001400:	9800      	ldr	r0, [sp, #0]
 8001402:	f241 2100 	movw	r1, #4608	; 0x1200
 8001406:	f2c0 017a 	movt	r1, #122	; 0x7a
 800140a:	fbb1 f0f0 	udiv	r0, r1, r0
 800140e:	f643 0104 	movw	r1, #14340	; 0x3804
 8001412:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8001416:	6809      	ldr	r1, [r1, #0]
 8001418:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800141c:	4348      	muls	r0, r1
 800141e:	9003      	str	r0, [sp, #12]
 8001420:	e010      	b.n	8001444 <SystemCoreClockUpdate+0xbc>
 8001422:	9800      	ldr	r0, [sp, #0]
 8001424:	f242 4100 	movw	r1, #9216	; 0x2400
 8001428:	f2c0 01f4 	movt	r1, #244	; 0xf4
 800142c:	fbb1 f0f0 	udiv	r0, r1, r0
 8001430:	f643 0104 	movw	r1, #14340	; 0x3804
 8001434:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8001438:	6809      	ldr	r1, [r1, #0]
 800143a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800143e:	4348      	muls	r0, r1
 8001440:	9003      	str	r0, [sp, #12]
 8001442:	e7ff      	b.n	8001444 <SystemCoreClockUpdate+0xbc>
 8001444:	f643 0004 	movw	r0, #14340	; 0x3804
 8001448:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800144c:	6800      	ldr	r0, [r0, #0]
 800144e:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001452:	2102      	movs	r1, #2
 8001454:	eb01 30d0 	add.w	r0, r1, r0, lsr #15
 8001458:	9002      	str	r0, [sp, #8]
 800145a:	9803      	ldr	r0, [sp, #12]
 800145c:	9902      	ldr	r1, [sp, #8]
 800145e:	fbb0 f0f1 	udiv	r0, r0, r1
 8001462:	f240 0100 	movw	r1, #0
 8001466:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800146a:	6008      	str	r0, [r1, #0]
 800146c:	e009      	b.n	8001482 <SystemCoreClockUpdate+0xfa>
 800146e:	f240 0000 	movw	r0, #0
 8001472:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001476:	f242 4100 	movw	r1, #9216	; 0x2400
 800147a:	f2c0 01f4 	movt	r1, #244	; 0xf4
 800147e:	6001      	str	r1, [r0, #0]
 8001480:	e7ff      	b.n	8001482 <SystemCoreClockUpdate+0xfa>
 8001482:	f643 0008 	movw	r0, #14344	; 0x3808
 8001486:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800148a:	6800      	ldr	r0, [r0, #0]
 800148c:	b2c0      	uxtb	r0, r0
 800148e:	0900      	lsrs	r0, r0, #4
 8001490:	f64a 01b8 	movw	r1, #43192	; 0xa8b8
 8001494:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001498:	5c08      	ldrb	r0, [r1, r0]
 800149a:	9004      	str	r0, [sp, #16]
 800149c:	9804      	ldr	r0, [sp, #16]
 800149e:	f240 0100 	movw	r1, #0
 80014a2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80014a6:	680a      	ldr	r2, [r1, #0]
 80014a8:	fa22 f000 	lsr.w	r0, r2, r0
 80014ac:	6008      	str	r0, [r1, #0]
 80014ae:	b005      	add	sp, #20
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop

080014b4 <__aeabi_memclr>:
 80014b4:	2200      	movs	r2, #0
 80014b6:	f000 b801 	b.w	80014bc <__aeabi_memset>
 80014ba:	bf00      	nop

080014bc <__aeabi_memset>:
 80014bc:	b470      	push	{r4, r5, r6}
 80014be:	0784      	lsls	r4, r0, #30
 80014c0:	d046      	beq.n	8001550 <__aeabi_memset+0x94>
 80014c2:	1e4c      	subs	r4, r1, #1
 80014c4:	2900      	cmp	r1, #0
 80014c6:	d041      	beq.n	800154c <__aeabi_memset+0x90>
 80014c8:	b2d5      	uxtb	r5, r2
 80014ca:	4603      	mov	r3, r0
 80014cc:	e002      	b.n	80014d4 <__aeabi_memset+0x18>
 80014ce:	1e61      	subs	r1, r4, #1
 80014d0:	b3e4      	cbz	r4, 800154c <__aeabi_memset+0x90>
 80014d2:	460c      	mov	r4, r1
 80014d4:	f803 5b01 	strb.w	r5, [r3], #1
 80014d8:	0799      	lsls	r1, r3, #30
 80014da:	d1f8      	bne.n	80014ce <__aeabi_memset+0x12>
 80014dc:	2c03      	cmp	r4, #3
 80014de:	d92e      	bls.n	800153e <__aeabi_memset+0x82>
 80014e0:	b2d5      	uxtb	r5, r2
 80014e2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80014e6:	2c0f      	cmp	r4, #15
 80014e8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80014ec:	d919      	bls.n	8001522 <__aeabi_memset+0x66>
 80014ee:	4626      	mov	r6, r4
 80014f0:	f103 0110 	add.w	r1, r3, #16
 80014f4:	3e10      	subs	r6, #16
 80014f6:	2e0f      	cmp	r6, #15
 80014f8:	f841 5c10 	str.w	r5, [r1, #-16]
 80014fc:	f841 5c0c 	str.w	r5, [r1, #-12]
 8001500:	f841 5c08 	str.w	r5, [r1, #-8]
 8001504:	f841 5c04 	str.w	r5, [r1, #-4]
 8001508:	f101 0110 	add.w	r1, r1, #16
 800150c:	d8f2      	bhi.n	80014f4 <__aeabi_memset+0x38>
 800150e:	f1a4 0110 	sub.w	r1, r4, #16
 8001512:	f021 010f 	bic.w	r1, r1, #15
 8001516:	f004 040f 	and.w	r4, r4, #15
 800151a:	3110      	adds	r1, #16
 800151c:	2c03      	cmp	r4, #3
 800151e:	440b      	add	r3, r1
 8001520:	d90d      	bls.n	800153e <__aeabi_memset+0x82>
 8001522:	461e      	mov	r6, r3
 8001524:	4621      	mov	r1, r4
 8001526:	3904      	subs	r1, #4
 8001528:	2903      	cmp	r1, #3
 800152a:	f846 5b04 	str.w	r5, [r6], #4
 800152e:	d8fa      	bhi.n	8001526 <__aeabi_memset+0x6a>
 8001530:	1f21      	subs	r1, r4, #4
 8001532:	f021 0103 	bic.w	r1, r1, #3
 8001536:	3104      	adds	r1, #4
 8001538:	440b      	add	r3, r1
 800153a:	f004 0403 	and.w	r4, r4, #3
 800153e:	b12c      	cbz	r4, 800154c <__aeabi_memset+0x90>
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	441c      	add	r4, r3
 8001544:	f803 2b01 	strb.w	r2, [r3], #1
 8001548:	42a3      	cmp	r3, r4
 800154a:	d1fb      	bne.n	8001544 <__aeabi_memset+0x88>
 800154c:	bc70      	pop	{r4, r5, r6}
 800154e:	4770      	bx	lr
 8001550:	460c      	mov	r4, r1
 8001552:	4603      	mov	r3, r0
 8001554:	e7c2      	b.n	80014dc <__aeabi_memset+0x20>
	...

08001558 <__errno>:
 8001558:	4b01      	ldr	r3, [pc, #4]	; (8001560 <__errno+0x8>)
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000004 	.word	0x20000004

08001564 <__libc_init_array>:
 8001564:	b570      	push	{r4, r5, r6, lr}
 8001566:	4e0d      	ldr	r6, [pc, #52]	; (800159c <__libc_init_array+0x38>)
 8001568:	4d0d      	ldr	r5, [pc, #52]	; (80015a0 <__libc_init_array+0x3c>)
 800156a:	1b76      	subs	r6, r6, r5
 800156c:	10b6      	asrs	r6, r6, #2
 800156e:	d006      	beq.n	800157e <__libc_init_array+0x1a>
 8001570:	2400      	movs	r4, #0
 8001572:	f855 3b04 	ldr.w	r3, [r5], #4
 8001576:	3401      	adds	r4, #1
 8001578:	4798      	blx	r3
 800157a:	42a6      	cmp	r6, r4
 800157c:	d1f9      	bne.n	8001572 <__libc_init_array+0xe>
 800157e:	4e09      	ldr	r6, [pc, #36]	; (80015a4 <__libc_init_array+0x40>)
 8001580:	4d09      	ldr	r5, [pc, #36]	; (80015a8 <__libc_init_array+0x44>)
 8001582:	1b76      	subs	r6, r6, r5
 8001584:	f009 f98c 	bl	800a8a0 <_init>
 8001588:	10b6      	asrs	r6, r6, #2
 800158a:	d006      	beq.n	800159a <__libc_init_array+0x36>
 800158c:	2400      	movs	r4, #0
 800158e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001592:	3401      	adds	r4, #1
 8001594:	4798      	blx	r3
 8001596:	42a6      	cmp	r6, r4
 8001598:	d1f9      	bne.n	800158e <__libc_init_array+0x2a>
 800159a:	bd70      	pop	{r4, r5, r6, pc}
 800159c:	0800a990 	.word	0x0800a990
 80015a0:	0800a990 	.word	0x0800a990
 80015a4:	0800a994 	.word	0x0800a994
 80015a8:	0800a990 	.word	0x0800a990

080015ac <malloc>:
 80015ac:	4b02      	ldr	r3, [pc, #8]	; (80015b8 <malloc+0xc>)
 80015ae:	4601      	mov	r1, r0
 80015b0:	6818      	ldr	r0, [r3, #0]
 80015b2:	f000 b8bf 	b.w	8001734 <_malloc_r>
 80015b6:	bf00      	nop
 80015b8:	20000004 	.word	0x20000004

080015bc <free>:
 80015bc:	4b02      	ldr	r3, [pc, #8]	; (80015c8 <free+0xc>)
 80015be:	4601      	mov	r1, r0
 80015c0:	6818      	ldr	r0, [r3, #0]
 80015c2:	f000 b855 	b.w	8001670 <_free_r>
 80015c6:	bf00      	nop
 80015c8:	20000004 	.word	0x20000004

080015cc <memset>:
 80015cc:	0783      	lsls	r3, r0, #30
 80015ce:	b530      	push	{r4, r5, lr}
 80015d0:	d048      	beq.n	8001664 <memset+0x98>
 80015d2:	1e54      	subs	r4, r2, #1
 80015d4:	2a00      	cmp	r2, #0
 80015d6:	d03f      	beq.n	8001658 <memset+0x8c>
 80015d8:	b2ca      	uxtb	r2, r1
 80015da:	4603      	mov	r3, r0
 80015dc:	e001      	b.n	80015e2 <memset+0x16>
 80015de:	3c01      	subs	r4, #1
 80015e0:	d33a      	bcc.n	8001658 <memset+0x8c>
 80015e2:	f803 2b01 	strb.w	r2, [r3], #1
 80015e6:	079d      	lsls	r5, r3, #30
 80015e8:	d1f9      	bne.n	80015de <memset+0x12>
 80015ea:	2c03      	cmp	r4, #3
 80015ec:	d92d      	bls.n	800164a <memset+0x7e>
 80015ee:	b2cd      	uxtb	r5, r1
 80015f0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80015f4:	2c0f      	cmp	r4, #15
 80015f6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80015fa:	d936      	bls.n	800166a <memset+0x9e>
 80015fc:	f1a4 0210 	sub.w	r2, r4, #16
 8001600:	f022 0c0f 	bic.w	ip, r2, #15
 8001604:	f103 0e20 	add.w	lr, r3, #32
 8001608:	44e6      	add	lr, ip
 800160a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 800160e:	f103 0210 	add.w	r2, r3, #16
 8001612:	e942 5504 	strd	r5, r5, [r2, #-16]
 8001616:	e942 5502 	strd	r5, r5, [r2, #-8]
 800161a:	3210      	adds	r2, #16
 800161c:	4572      	cmp	r2, lr
 800161e:	d1f8      	bne.n	8001612 <memset+0x46>
 8001620:	f10c 0201 	add.w	r2, ip, #1
 8001624:	f014 0f0c 	tst.w	r4, #12
 8001628:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800162c:	f004 0c0f 	and.w	ip, r4, #15
 8001630:	d013      	beq.n	800165a <memset+0x8e>
 8001632:	f1ac 0304 	sub.w	r3, ip, #4
 8001636:	f023 0303 	bic.w	r3, r3, #3
 800163a:	3304      	adds	r3, #4
 800163c:	4413      	add	r3, r2
 800163e:	f842 5b04 	str.w	r5, [r2], #4
 8001642:	4293      	cmp	r3, r2
 8001644:	d1fb      	bne.n	800163e <memset+0x72>
 8001646:	f00c 0403 	and.w	r4, ip, #3
 800164a:	b12c      	cbz	r4, 8001658 <memset+0x8c>
 800164c:	b2ca      	uxtb	r2, r1
 800164e:	441c      	add	r4, r3
 8001650:	f803 2b01 	strb.w	r2, [r3], #1
 8001654:	429c      	cmp	r4, r3
 8001656:	d1fb      	bne.n	8001650 <memset+0x84>
 8001658:	bd30      	pop	{r4, r5, pc}
 800165a:	4664      	mov	r4, ip
 800165c:	4613      	mov	r3, r2
 800165e:	2c00      	cmp	r4, #0
 8001660:	d1f4      	bne.n	800164c <memset+0x80>
 8001662:	e7f9      	b.n	8001658 <memset+0x8c>
 8001664:	4603      	mov	r3, r0
 8001666:	4614      	mov	r4, r2
 8001668:	e7bf      	b.n	80015ea <memset+0x1e>
 800166a:	461a      	mov	r2, r3
 800166c:	46a4      	mov	ip, r4
 800166e:	e7e0      	b.n	8001632 <memset+0x66>

08001670 <_free_r>:
 8001670:	2900      	cmp	r1, #0
 8001672:	d058      	beq.n	8001726 <_free_r+0xb6>
 8001674:	b530      	push	{r4, r5, lr}
 8001676:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800167a:	b083      	sub	sp, #12
 800167c:	2b00      	cmp	r3, #0
 800167e:	f1a1 0404 	sub.w	r4, r1, #4
 8001682:	bfb8      	it	lt
 8001684:	18e4      	addlt	r4, r4, r3
 8001686:	9001      	str	r0, [sp, #4]
 8001688:	f000 fa50 	bl	8001b2c <__malloc_lock>
 800168c:	4a28      	ldr	r2, [pc, #160]	; (8001730 <_free_r+0xc0>)
 800168e:	9801      	ldr	r0, [sp, #4]
 8001690:	6813      	ldr	r3, [r2, #0]
 8001692:	b133      	cbz	r3, 80016a2 <_free_r+0x32>
 8001694:	42a3      	cmp	r3, r4
 8001696:	d90d      	bls.n	80016b4 <_free_r+0x44>
 8001698:	6821      	ldr	r1, [r4, #0]
 800169a:	eb04 0c01 	add.w	ip, r4, r1
 800169e:	4563      	cmp	r3, ip
 80016a0:	d02f      	beq.n	8001702 <_free_r+0x92>
 80016a2:	6063      	str	r3, [r4, #4]
 80016a4:	6014      	str	r4, [r2, #0]
 80016a6:	b003      	add	sp, #12
 80016a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80016ac:	f000 ba40 	b.w	8001b30 <__malloc_unlock>
 80016b0:	42a3      	cmp	r3, r4
 80016b2:	d810      	bhi.n	80016d6 <_free_r+0x66>
 80016b4:	461a      	mov	r2, r3
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1f9      	bne.n	80016b0 <_free_r+0x40>
 80016bc:	6811      	ldr	r1, [r2, #0]
 80016be:	eb02 0c01 	add.w	ip, r2, r1
 80016c2:	4564      	cmp	r4, ip
 80016c4:	d019      	beq.n	80016fa <_free_r+0x8a>
 80016c6:	d32f      	bcc.n	8001728 <_free_r+0xb8>
 80016c8:	6063      	str	r3, [r4, #4]
 80016ca:	6054      	str	r4, [r2, #4]
 80016cc:	b003      	add	sp, #12
 80016ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80016d2:	f000 ba2d 	b.w	8001b30 <__malloc_unlock>
 80016d6:	6811      	ldr	r1, [r2, #0]
 80016d8:	eb02 0c01 	add.w	ip, r2, r1
 80016dc:	45a4      	cmp	ip, r4
 80016de:	d016      	beq.n	800170e <_free_r+0x9e>
 80016e0:	d822      	bhi.n	8001728 <_free_r+0xb8>
 80016e2:	6821      	ldr	r1, [r4, #0]
 80016e4:	eb04 0c01 	add.w	ip, r4, r1
 80016e8:	4563      	cmp	r3, ip
 80016ea:	d1ed      	bne.n	80016c8 <_free_r+0x58>
 80016ec:	681d      	ldr	r5, [r3, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	4429      	add	r1, r5
 80016f2:	e9c4 1300 	strd	r1, r3, [r4]
 80016f6:	6054      	str	r4, [r2, #4]
 80016f8:	e7d5      	b.n	80016a6 <_free_r+0x36>
 80016fa:	6823      	ldr	r3, [r4, #0]
 80016fc:	4419      	add	r1, r3
 80016fe:	6011      	str	r1, [r2, #0]
 8001700:	e7d1      	b.n	80016a6 <_free_r+0x36>
 8001702:	681d      	ldr	r5, [r3, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	4429      	add	r1, r5
 8001708:	e9c4 1300 	strd	r1, r3, [r4]
 800170c:	e7ca      	b.n	80016a4 <_free_r+0x34>
 800170e:	6824      	ldr	r4, [r4, #0]
 8001710:	4421      	add	r1, r4
 8001712:	1854      	adds	r4, r2, r1
 8001714:	42a3      	cmp	r3, r4
 8001716:	6011      	str	r1, [r2, #0]
 8001718:	d1c5      	bne.n	80016a6 <_free_r+0x36>
 800171a:	e9d3 4300 	ldrd	r4, r3, [r3]
 800171e:	4421      	add	r1, r4
 8001720:	e9c2 1300 	strd	r1, r3, [r2]
 8001724:	e7bf      	b.n	80016a6 <_free_r+0x36>
 8001726:	4770      	bx	lr
 8001728:	230c      	movs	r3, #12
 800172a:	6003      	str	r3, [r0, #0]
 800172c:	e7bb      	b.n	80016a6 <_free_r+0x36>
 800172e:	bf00      	nop
 8001730:	2000020c 	.word	0x2000020c

08001734 <_malloc_r>:
 8001734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001736:	1ccd      	adds	r5, r1, #3
 8001738:	f025 0503 	bic.w	r5, r5, #3
 800173c:	3508      	adds	r5, #8
 800173e:	2d0c      	cmp	r5, #12
 8001740:	bf38      	it	cc
 8001742:	250c      	movcc	r5, #12
 8001744:	2d00      	cmp	r5, #0
 8001746:	4606      	mov	r6, r0
 8001748:	db23      	blt.n	8001792 <_malloc_r+0x5e>
 800174a:	42a9      	cmp	r1, r5
 800174c:	d821      	bhi.n	8001792 <_malloc_r+0x5e>
 800174e:	4f25      	ldr	r7, [pc, #148]	; (80017e4 <_malloc_r+0xb0>)
 8001750:	f000 f9ec 	bl	8001b2c <__malloc_lock>
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	b322      	cbz	r2, 80017a2 <_malloc_r+0x6e>
 8001758:	4614      	mov	r4, r2
 800175a:	e003      	b.n	8001764 <_malloc_r+0x30>
 800175c:	6863      	ldr	r3, [r4, #4]
 800175e:	4622      	mov	r2, r4
 8001760:	b1fb      	cbz	r3, 80017a2 <_malloc_r+0x6e>
 8001762:	461c      	mov	r4, r3
 8001764:	6823      	ldr	r3, [r4, #0]
 8001766:	1b5b      	subs	r3, r3, r5
 8001768:	d4f8      	bmi.n	800175c <_malloc_r+0x28>
 800176a:	2b0b      	cmp	r3, #11
 800176c:	d815      	bhi.n	800179a <_malloc_r+0x66>
 800176e:	6863      	ldr	r3, [r4, #4]
 8001770:	4294      	cmp	r4, r2
 8001772:	bf0c      	ite	eq
 8001774:	603b      	streq	r3, [r7, #0]
 8001776:	6053      	strne	r3, [r2, #4]
 8001778:	4630      	mov	r0, r6
 800177a:	f000 f9d9 	bl	8001b30 <__malloc_unlock>
 800177e:	f104 000b 	add.w	r0, r4, #11
 8001782:	1d23      	adds	r3, r4, #4
 8001784:	f020 0007 	bic.w	r0, r0, #7
 8001788:	1ac2      	subs	r2, r0, r3
 800178a:	d001      	beq.n	8001790 <_malloc_r+0x5c>
 800178c:	1a1b      	subs	r3, r3, r0
 800178e:	50a3      	str	r3, [r4, r2]
 8001790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001792:	230c      	movs	r3, #12
 8001794:	6033      	str	r3, [r6, #0]
 8001796:	2000      	movs	r0, #0
 8001798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800179a:	6023      	str	r3, [r4, #0]
 800179c:	441c      	add	r4, r3
 800179e:	6025      	str	r5, [r4, #0]
 80017a0:	e7ea      	b.n	8001778 <_malloc_r+0x44>
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	b1c9      	cbz	r1, 80017da <_malloc_r+0xa6>
 80017a6:	4629      	mov	r1, r5
 80017a8:	4630      	mov	r0, r6
 80017aa:	f000 f84d 	bl	8001848 <_sbrk_r>
 80017ae:	1c43      	adds	r3, r0, #1
 80017b0:	d00c      	beq.n	80017cc <_malloc_r+0x98>
 80017b2:	1cc4      	adds	r4, r0, #3
 80017b4:	f024 0403 	bic.w	r4, r4, #3
 80017b8:	42a0      	cmp	r0, r4
 80017ba:	d005      	beq.n	80017c8 <_malloc_r+0x94>
 80017bc:	1a21      	subs	r1, r4, r0
 80017be:	4630      	mov	r0, r6
 80017c0:	f000 f842 	bl	8001848 <_sbrk_r>
 80017c4:	3001      	adds	r0, #1
 80017c6:	d001      	beq.n	80017cc <_malloc_r+0x98>
 80017c8:	6025      	str	r5, [r4, #0]
 80017ca:	e7d5      	b.n	8001778 <_malloc_r+0x44>
 80017cc:	230c      	movs	r3, #12
 80017ce:	4630      	mov	r0, r6
 80017d0:	6033      	str	r3, [r6, #0]
 80017d2:	f000 f9ad 	bl	8001b30 <__malloc_unlock>
 80017d6:	2000      	movs	r0, #0
 80017d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017da:	4630      	mov	r0, r6
 80017dc:	f000 f834 	bl	8001848 <_sbrk_r>
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	e7e0      	b.n	80017a6 <_malloc_r+0x72>
 80017e4:	2000020c 	.word	0x2000020c

080017e8 <_iprintf_r>:
 80017e8:	b40e      	push	{r1, r2, r3}
 80017ea:	b510      	push	{r4, lr}
 80017ec:	4604      	mov	r4, r0
 80017ee:	b083      	sub	sp, #12
 80017f0:	b108      	cbz	r0, 80017f6 <_iprintf_r+0xe>
 80017f2:	6983      	ldr	r3, [r0, #24]
 80017f4:	b15b      	cbz	r3, 800180e <_iprintf_r+0x26>
 80017f6:	ab06      	add	r3, sp, #24
 80017f8:	68a1      	ldr	r1, [r4, #8]
 80017fa:	9a05      	ldr	r2, [sp, #20]
 80017fc:	9301      	str	r3, [sp, #4]
 80017fe:	4620      	mov	r0, r4
 8001800:	f000 f9dc 	bl	8001bbc <_vfiprintf_r>
 8001804:	b003      	add	sp, #12
 8001806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800180a:	b003      	add	sp, #12
 800180c:	4770      	bx	lr
 800180e:	f000 f929 	bl	8001a64 <__sinit>
 8001812:	e7f0      	b.n	80017f6 <_iprintf_r+0xe>

08001814 <iprintf>:
 8001814:	b40f      	push	{r0, r1, r2, r3}
 8001816:	b510      	push	{r4, lr}
 8001818:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <iprintf+0x30>)
 800181a:	681c      	ldr	r4, [r3, #0]
 800181c:	b082      	sub	sp, #8
 800181e:	b10c      	cbz	r4, 8001824 <iprintf+0x10>
 8001820:	69a3      	ldr	r3, [r4, #24]
 8001822:	b15b      	cbz	r3, 800183c <iprintf+0x28>
 8001824:	ab05      	add	r3, sp, #20
 8001826:	68a1      	ldr	r1, [r4, #8]
 8001828:	9a04      	ldr	r2, [sp, #16]
 800182a:	9301      	str	r3, [sp, #4]
 800182c:	4620      	mov	r0, r4
 800182e:	f000 f9c5 	bl	8001bbc <_vfiprintf_r>
 8001832:	b002      	add	sp, #8
 8001834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001838:	b004      	add	sp, #16
 800183a:	4770      	bx	lr
 800183c:	4620      	mov	r0, r4
 800183e:	f000 f911 	bl	8001a64 <__sinit>
 8001842:	e7ef      	b.n	8001824 <iprintf+0x10>
 8001844:	20000004 	.word	0x20000004

08001848 <_sbrk_r>:
 8001848:	b538      	push	{r3, r4, r5, lr}
 800184a:	4d07      	ldr	r5, [pc, #28]	; (8001868 <_sbrk_r+0x20>)
 800184c:	2200      	movs	r2, #0
 800184e:	4604      	mov	r4, r0
 8001850:	4608      	mov	r0, r1
 8001852:	602a      	str	r2, [r5, #0]
 8001854:	f7ff fd4a 	bl	80012ec <_sbrk>
 8001858:	1c43      	adds	r3, r0, #1
 800185a:	d000      	beq.n	800185e <_sbrk_r+0x16>
 800185c:	bd38      	pop	{r3, r4, r5, pc}
 800185e:	682b      	ldr	r3, [r5, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0fb      	beq.n	800185c <_sbrk_r+0x14>
 8001864:	6023      	str	r3, [r4, #0]
 8001866:	bd38      	pop	{r3, r4, r5, pc}
 8001868:	20000214 	.word	0x20000214

0800186c <__fp_lock>:
 800186c:	2000      	movs	r0, #0
 800186e:	4770      	bx	lr

08001870 <_cleanup_r>:
 8001870:	4901      	ldr	r1, [pc, #4]	; (8001878 <_cleanup_r+0x8>)
 8001872:	f000 b937 	b.w	8001ae4 <_fwalk_reent>
 8001876:	bf00      	nop
 8001878:	080025f9 	.word	0x080025f9

0800187c <__fp_unlock>:
 800187c:	2000      	movs	r0, #0
 800187e:	4770      	bx	lr

08001880 <__sfmoreglue>:
 8001880:	b570      	push	{r4, r5, r6, lr}
 8001882:	2268      	movs	r2, #104	; 0x68
 8001884:	1e4d      	subs	r5, r1, #1
 8001886:	fb02 f505 	mul.w	r5, r2, r5
 800188a:	460e      	mov	r6, r1
 800188c:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001890:	f7ff ff50 	bl	8001734 <_malloc_r>
 8001894:	4604      	mov	r4, r0
 8001896:	b140      	cbz	r0, 80018aa <__sfmoreglue+0x2a>
 8001898:	2100      	movs	r1, #0
 800189a:	300c      	adds	r0, #12
 800189c:	e9c4 1600 	strd	r1, r6, [r4]
 80018a0:	60a0      	str	r0, [r4, #8]
 80018a2:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80018a6:	f7ff fe91 	bl	80015cc <memset>
 80018aa:	4620      	mov	r0, r4
 80018ac:	bd70      	pop	{r4, r5, r6, pc}
 80018ae:	bf00      	nop

080018b0 <__sfp>:
 80018b0:	4b27      	ldr	r3, [pc, #156]	; (8001950 <__sfp+0xa0>)
 80018b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018b6:	681e      	ldr	r6, [r3, #0]
 80018b8:	69b3      	ldr	r3, [r6, #24]
 80018ba:	4607      	mov	r7, r0
 80018bc:	b353      	cbz	r3, 8001914 <__sfp+0x64>
 80018be:	3648      	adds	r6, #72	; 0x48
 80018c0:	f04f 0804 	mov.w	r8, #4
 80018c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	d504      	bpl.n	80018d6 <__sfp+0x26>
 80018cc:	e01e      	b.n	800190c <__sfp+0x5c>
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80018d4:	d01a      	beq.n	800190c <__sfp+0x5c>
 80018d6:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80018da:	3b01      	subs	r3, #1
 80018dc:	2d00      	cmp	r5, #0
 80018de:	d1f6      	bne.n	80018ce <__sfp+0x1e>
 80018e0:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <__sfp+0xa4>)
 80018e2:	6665      	str	r5, [r4, #100]	; 0x64
 80018e4:	e9c4 5500 	strd	r5, r5, [r4]
 80018e8:	e9c4 5302 	strd	r5, r3, [r4, #8]
 80018ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80018f0:	61a5      	str	r5, [r4, #24]
 80018f2:	2208      	movs	r2, #8
 80018f4:	4629      	mov	r1, r5
 80018f6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80018fa:	f7ff fe67 	bl	80015cc <memset>
 80018fe:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001902:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001906:	4620      	mov	r0, r4
 8001908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800190c:	6835      	ldr	r5, [r6, #0]
 800190e:	b12d      	cbz	r5, 800191c <__sfp+0x6c>
 8001910:	462e      	mov	r6, r5
 8001912:	e7d7      	b.n	80018c4 <__sfp+0x14>
 8001914:	4630      	mov	r0, r6
 8001916:	f000 f81f 	bl	8001958 <__sinit.part.0>
 800191a:	e7d0      	b.n	80018be <__sfp+0xe>
 800191c:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8001920:	4638      	mov	r0, r7
 8001922:	f7ff ff07 	bl	8001734 <_malloc_r>
 8001926:	4604      	mov	r4, r0
 8001928:	b168      	cbz	r0, 8001946 <__sfp+0x96>
 800192a:	6005      	str	r5, [r0, #0]
 800192c:	f8c0 8004 	str.w	r8, [r0, #4]
 8001930:	300c      	adds	r0, #12
 8001932:	4629      	mov	r1, r5
 8001934:	60a0      	str	r0, [r4, #8]
 8001936:	4625      	mov	r5, r4
 8001938:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 800193c:	f7ff fe46 	bl	80015cc <memset>
 8001940:	6034      	str	r4, [r6, #0]
 8001942:	462e      	mov	r6, r5
 8001944:	e7be      	b.n	80018c4 <__sfp+0x14>
 8001946:	230c      	movs	r3, #12
 8001948:	6030      	str	r0, [r6, #0]
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	e7db      	b.n	8001906 <__sfp+0x56>
 800194e:	bf00      	nop
 8001950:	0800a8d4 	.word	0x0800a8d4
 8001954:	ffff0001 	.word	0xffff0001

08001958 <__sinit.part.0>:
 8001958:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800195c:	4b34      	ldr	r3, [pc, #208]	; (8001a30 <__sinit.part.0+0xd8>)
 800195e:	4935      	ldr	r1, [pc, #212]	; (8001a34 <__sinit.part.0+0xdc>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	6281      	str	r1, [r0, #40]	; 0x28
 8001964:	4290      	cmp	r0, r2
 8001966:	f04f 0300 	mov.w	r3, #0
 800196a:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800196e:	6503      	str	r3, [r0, #80]	; 0x50
 8001970:	bf04      	itt	eq
 8001972:	2301      	moveq	r3, #1
 8001974:	6183      	streq	r3, [r0, #24]
 8001976:	4605      	mov	r5, r0
 8001978:	f7ff ff9a 	bl	80018b0 <__sfp>
 800197c:	6068      	str	r0, [r5, #4]
 800197e:	4628      	mov	r0, r5
 8001980:	f7ff ff96 	bl	80018b0 <__sfp>
 8001984:	60a8      	str	r0, [r5, #8]
 8001986:	4628      	mov	r0, r5
 8001988:	f7ff ff92 	bl	80018b0 <__sfp>
 800198c:	686f      	ldr	r7, [r5, #4]
 800198e:	60e8      	str	r0, [r5, #12]
 8001990:	2400      	movs	r4, #0
 8001992:	2304      	movs	r3, #4
 8001994:	e9c7 4302 	strd	r4, r3, [r7, #8]
 8001998:	2208      	movs	r2, #8
 800199a:	4621      	mov	r1, r4
 800199c:	e9c7 4400 	strd	r4, r4, [r7]
 80019a0:	e9c7 4404 	strd	r4, r4, [r7, #16]
 80019a4:	667c      	str	r4, [r7, #100]	; 0x64
 80019a6:	61bc      	str	r4, [r7, #24]
 80019a8:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80019ac:	f7ff fe0e 	bl	80015cc <memset>
 80019b0:	f8df b08c 	ldr.w	fp, [pc, #140]	; 8001a40 <__sinit.part.0+0xe8>
 80019b4:	68ae      	ldr	r6, [r5, #8]
 80019b6:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8001a44 <__sinit.part.0+0xec>
 80019ba:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8001a48 <__sinit.part.0+0xf0>
 80019be:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8001a4c <__sinit.part.0+0xf4>
 80019c2:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <__sinit.part.0+0xe0>)
 80019c4:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
 80019c8:	e9c7 7b08 	strd	r7, fp, [r7, #32]
 80019cc:	f8c7 902c 	str.w	r9, [r7, #44]	; 0x2c
 80019d0:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
 80019d4:	2208      	movs	r2, #8
 80019d6:	60f3      	str	r3, [r6, #12]
 80019d8:	e9c6 4400 	strd	r4, r4, [r6]
 80019dc:	e9c6 4404 	strd	r4, r4, [r6, #16]
 80019e0:	6674      	str	r4, [r6, #100]	; 0x64
 80019e2:	60b4      	str	r4, [r6, #8]
 80019e4:	61b4      	str	r4, [r6, #24]
 80019e6:	4621      	mov	r1, r4
 80019e8:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 80019ec:	f7ff fdee 	bl	80015cc <memset>
 80019f0:	e9c6 6b08 	strd	r6, fp, [r6, #32]
 80019f4:	e9c6 a90a 	strd	sl, r9, [r6, #40]	; 0x28
 80019f8:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
 80019fc:	68ee      	ldr	r6, [r5, #12]
 80019fe:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <__sinit.part.0+0xe4>)
 8001a00:	60f3      	str	r3, [r6, #12]
 8001a02:	e9c6 4400 	strd	r4, r4, [r6]
 8001a06:	e9c6 4404 	strd	r4, r4, [r6, #16]
 8001a0a:	6674      	str	r4, [r6, #100]	; 0x64
 8001a0c:	60b4      	str	r4, [r6, #8]
 8001a0e:	61b4      	str	r4, [r6, #24]
 8001a10:	4621      	mov	r1, r4
 8001a12:	2208      	movs	r2, #8
 8001a14:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8001a18:	f7ff fdd8 	bl	80015cc <memset>
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e9c6 6b08 	strd	r6, fp, [r6, #32]
 8001a22:	e9c6 980b 	strd	r9, r8, [r6, #44]	; 0x2c
 8001a26:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
 8001a2a:	61ab      	str	r3, [r5, #24]
 8001a2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a30:	0800a8d4 	.word	0x0800a8d4
 8001a34:	08001871 	.word	0x08001871
 8001a38:	00010009 	.word	0x00010009
 8001a3c:	00020012 	.word	0x00020012
 8001a40:	08002239 	.word	0x08002239
 8001a44:	08002261 	.word	0x08002261
 8001a48:	080022a1 	.word	0x080022a1
 8001a4c:	080022c1 	.word	0x080022c1

08001a50 <_cleanup>:
 8001a50:	4b02      	ldr	r3, [pc, #8]	; (8001a5c <_cleanup+0xc>)
 8001a52:	4903      	ldr	r1, [pc, #12]	; (8001a60 <_cleanup+0x10>)
 8001a54:	6818      	ldr	r0, [r3, #0]
 8001a56:	f000 b845 	b.w	8001ae4 <_fwalk_reent>
 8001a5a:	bf00      	nop
 8001a5c:	0800a8d4 	.word	0x0800a8d4
 8001a60:	080025f9 	.word	0x080025f9

08001a64 <__sinit>:
 8001a64:	6983      	ldr	r3, [r0, #24]
 8001a66:	b903      	cbnz	r3, 8001a6a <__sinit+0x6>
 8001a68:	e776      	b.n	8001958 <__sinit.part.0>
 8001a6a:	4770      	bx	lr

08001a6c <__sfp_lock_acquire>:
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop

08001a70 <__sfp_lock_release>:
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop

08001a74 <__sinit_lock_acquire>:
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop

08001a78 <__sinit_lock_release>:
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop

08001a7c <__fp_lock_all>:
 8001a7c:	4b02      	ldr	r3, [pc, #8]	; (8001a88 <__fp_lock_all+0xc>)
 8001a7e:	4903      	ldr	r1, [pc, #12]	; (8001a8c <__fp_lock_all+0x10>)
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	f000 b80f 	b.w	8001aa4 <_fwalk>
 8001a86:	bf00      	nop
 8001a88:	20000004 	.word	0x20000004
 8001a8c:	0800186d 	.word	0x0800186d

08001a90 <__fp_unlock_all>:
 8001a90:	4b02      	ldr	r3, [pc, #8]	; (8001a9c <__fp_unlock_all+0xc>)
 8001a92:	4903      	ldr	r1, [pc, #12]	; (8001aa0 <__fp_unlock_all+0x10>)
 8001a94:	6818      	ldr	r0, [r3, #0]
 8001a96:	f000 b805 	b.w	8001aa4 <_fwalk>
 8001a9a:	bf00      	nop
 8001a9c:	20000004 	.word	0x20000004
 8001aa0:	0800187d 	.word	0x0800187d

08001aa4 <_fwalk>:
 8001aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001aa8:	4688      	mov	r8, r1
 8001aaa:	f100 0748 	add.w	r7, r0, #72	; 0x48
 8001aae:	2600      	movs	r6, #0
 8001ab0:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 8001ab4:	3d01      	subs	r5, #1
 8001ab6:	d40f      	bmi.n	8001ad8 <_fwalk+0x34>
 8001ab8:	89a3      	ldrh	r3, [r4, #12]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8001ac0:	d906      	bls.n	8001ad0 <_fwalk+0x2c>
 8001ac2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	4620      	mov	r0, r4
 8001aca:	d001      	beq.n	8001ad0 <_fwalk+0x2c>
 8001acc:	47c0      	blx	r8
 8001ace:	4306      	orrs	r6, r0
 8001ad0:	1c6b      	adds	r3, r5, #1
 8001ad2:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8001ad6:	d1ef      	bne.n	8001ab8 <_fwalk+0x14>
 8001ad8:	683f      	ldr	r7, [r7, #0]
 8001ada:	2f00      	cmp	r7, #0
 8001adc:	d1e8      	bne.n	8001ab0 <_fwalk+0xc>
 8001ade:	4630      	mov	r0, r6
 8001ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001ae4 <_fwalk_reent>:
 8001ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ae8:	4607      	mov	r7, r0
 8001aea:	4688      	mov	r8, r1
 8001aec:	f100 0648 	add.w	r6, r0, #72	; 0x48
 8001af0:	f04f 0900 	mov.w	r9, #0
 8001af4:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 8001af8:	3d01      	subs	r5, #1
 8001afa:	d411      	bmi.n	8001b20 <_fwalk_reent+0x3c>
 8001afc:	89a3      	ldrh	r3, [r4, #12]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8001b04:	d908      	bls.n	8001b18 <_fwalk_reent+0x34>
 8001b06:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	4621      	mov	r1, r4
 8001b0e:	d003      	beq.n	8001b18 <_fwalk_reent+0x34>
 8001b10:	4638      	mov	r0, r7
 8001b12:	47c0      	blx	r8
 8001b14:	ea49 0900 	orr.w	r9, r9, r0
 8001b18:	1c6b      	adds	r3, r5, #1
 8001b1a:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8001b1e:	d1ed      	bne.n	8001afc <_fwalk_reent+0x18>
 8001b20:	6836      	ldr	r6, [r6, #0]
 8001b22:	2e00      	cmp	r6, #0
 8001b24:	d1e6      	bne.n	8001af4 <_fwalk_reent+0x10>
 8001b26:	4648      	mov	r0, r9
 8001b28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001b2c <__malloc_lock>:
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop

08001b30 <__malloc_unlock>:
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop

08001b34 <__sfputc_r>:
 8001b34:	6893      	ldr	r3, [r2, #8]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	6093      	str	r3, [r2, #8]
 8001b3c:	da11      	bge.n	8001b62 <__sfputc_r+0x2e>
 8001b3e:	b410      	push	{r4}
 8001b40:	6994      	ldr	r4, [r2, #24]
 8001b42:	42a3      	cmp	r3, r4
 8001b44:	db09      	blt.n	8001b5a <__sfputc_r+0x26>
 8001b46:	290a      	cmp	r1, #10
 8001b48:	d007      	beq.n	8001b5a <__sfputc_r+0x26>
 8001b4a:	6813      	ldr	r3, [r2, #0]
 8001b4c:	1c58      	adds	r0, r3, #1
 8001b4e:	6010      	str	r0, [r2, #0]
 8001b50:	7019      	strb	r1, [r3, #0]
 8001b52:	4608      	mov	r0, r1
 8001b54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b5e:	f000 bbb3 	b.w	80022c8 <__swbuf_r>
 8001b62:	6813      	ldr	r3, [r2, #0]
 8001b64:	1c58      	adds	r0, r3, #1
 8001b66:	6010      	str	r0, [r2, #0]
 8001b68:	7019      	strb	r1, [r3, #0]
 8001b6a:	4608      	mov	r0, r1
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop

08001b70 <__sfputs_r>:
 8001b70:	b19b      	cbz	r3, 8001b9a <__sfputs_r+0x2a>
 8001b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b74:	4413      	add	r3, r2
 8001b76:	4606      	mov	r6, r0
 8001b78:	460f      	mov	r7, r1
 8001b7a:	1e54      	subs	r4, r2, #1
 8001b7c:	1e5d      	subs	r5, r3, #1
 8001b7e:	e001      	b.n	8001b84 <__sfputs_r+0x14>
 8001b80:	42ac      	cmp	r4, r5
 8001b82:	d008      	beq.n	8001b96 <__sfputs_r+0x26>
 8001b84:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8001b88:	463a      	mov	r2, r7
 8001b8a:	4630      	mov	r0, r6
 8001b8c:	f7ff ffd2 	bl	8001b34 <__sfputc_r>
 8001b90:	1c43      	adds	r3, r0, #1
 8001b92:	d1f5      	bne.n	8001b80 <__sfputs_r+0x10>
 8001b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b96:	2000      	movs	r0, #0
 8001b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop

08001ba0 <__sprint_r>:
 8001ba0:	6893      	ldr	r3, [r2, #8]
 8001ba2:	b510      	push	{r4, lr}
 8001ba4:	4614      	mov	r4, r2
 8001ba6:	b913      	cbnz	r3, 8001bae <__sprint_r+0xe>
 8001ba8:	6053      	str	r3, [r2, #4]
 8001baa:	4618      	mov	r0, r3
 8001bac:	bd10      	pop	{r4, pc}
 8001bae:	f000 fd8d 	bl	80026cc <__sfvwrite_r>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8001bb8:	bd10      	pop	{r4, pc}
 8001bba:	bf00      	nop

08001bbc <_vfiprintf_r>:
 8001bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bc0:	4688      	mov	r8, r1
 8001bc2:	b09f      	sub	sp, #124	; 0x7c
 8001bc4:	4615      	mov	r5, r2
 8001bc6:	461c      	mov	r4, r3
 8001bc8:	4681      	mov	r9, r0
 8001bca:	b118      	cbz	r0, 8001bd4 <_vfiprintf_r+0x18>
 8001bcc:	6983      	ldr	r3, [r0, #24]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 80a2 	beq.w	8001d18 <_vfiprintf_r+0x15c>
 8001bd4:	4b92      	ldr	r3, [pc, #584]	; (8001e20 <_vfiprintf_r+0x264>)
 8001bd6:	4598      	cmp	r8, r3
 8001bd8:	f000 80a4 	beq.w	8001d24 <_vfiprintf_r+0x168>
 8001bdc:	4b91      	ldr	r3, [pc, #580]	; (8001e24 <_vfiprintf_r+0x268>)
 8001bde:	4598      	cmp	r8, r3
 8001be0:	f000 80b1 	beq.w	8001d46 <_vfiprintf_r+0x18a>
 8001be4:	4b90      	ldr	r3, [pc, #576]	; (8001e28 <_vfiprintf_r+0x26c>)
 8001be6:	4598      	cmp	r8, r3
 8001be8:	bf08      	it	eq
 8001bea:	f8d9 800c 	ldreq.w	r8, [r9, #12]
 8001bee:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8001bf2:	0718      	lsls	r0, r3, #28
 8001bf4:	f140 809d 	bpl.w	8001d32 <_vfiprintf_r+0x176>
 8001bf8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 8098 	beq.w	8001d32 <_vfiprintf_r+0x176>
 8001c02:	2300      	movs	r3, #0
 8001c04:	930b      	str	r3, [sp, #44]	; 0x2c
 8001c06:	7829      	ldrb	r1, [r5, #0]
 8001c08:	4e88      	ldr	r6, [pc, #544]	; (8001e2c <_vfiprintf_r+0x270>)
 8001c0a:	9405      	str	r4, [sp, #20]
 8001c0c:	2320      	movs	r3, #32
 8001c0e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8001c12:	2330      	movs	r3, #48	; 0x30
 8001c14:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 8001c18:	2701      	movs	r7, #1
 8001c1a:	2900      	cmp	r1, #0
 8001c1c:	d074      	beq.n	8001d08 <_vfiprintf_r+0x14c>
 8001c1e:	462c      	mov	r4, r5
 8001c20:	460b      	mov	r3, r1
 8001c22:	e004      	b.n	8001c2e <_vfiprintf_r+0x72>
 8001c24:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 808f 	beq.w	8001d4c <_vfiprintf_r+0x190>
 8001c2e:	2b25      	cmp	r3, #37	; 0x25
 8001c30:	d1f8      	bne.n	8001c24 <_vfiprintf_r+0x68>
 8001c32:	ebb4 0b05 	subs.w	fp, r4, r5
 8001c36:	f040 808c 	bne.w	8001d52 <_vfiprintf_r+0x196>
 8001c3a:	7823      	ldrb	r3, [r4, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d063      	beq.n	8001d08 <_vfiprintf_r+0x14c>
 8001c40:	2300      	movs	r3, #0
 8001c42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c46:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8001c4a:	9306      	str	r3, [sp, #24]
 8001c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8001c4e:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8001c52:	931c      	str	r3, [sp, #112]	; 0x70
 8001c54:	3401      	adds	r4, #1
 8001c56:	e004      	b.n	8001c62 <_vfiprintf_r+0xa6>
 8001c58:	9a06      	ldr	r2, [sp, #24]
 8001c5a:	fa07 f303 	lsl.w	r3, r7, r3
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	9306      	str	r3, [sp, #24]
 8001c62:	4625      	mov	r5, r4
 8001c64:	2205      	movs	r2, #5
 8001c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c6a:	4630      	mov	r0, r6
 8001c6c:	f000 ff50 	bl	8002b10 <memchr>
 8001c70:	1b83      	subs	r3, r0, r6
 8001c72:	2800      	cmp	r0, #0
 8001c74:	d1f0      	bne.n	8001c58 <_vfiprintf_r+0x9c>
 8001c76:	9b06      	ldr	r3, [sp, #24]
 8001c78:	06d9      	lsls	r1, r3, #27
 8001c7a:	bf44      	itt	mi
 8001c7c:	2220      	movmi	r2, #32
 8001c7e:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 8001c82:	7829      	ldrb	r1, [r5, #0]
 8001c84:	071a      	lsls	r2, r3, #28
 8001c86:	bf44      	itt	mi
 8001c88:	222b      	movmi	r2, #43	; 0x2b
 8001c8a:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 8001c8e:	292a      	cmp	r1, #42	; 0x2a
 8001c90:	d170      	bne.n	8001d74 <_vfiprintf_r+0x1b8>
 8001c92:	9a05      	ldr	r2, [sp, #20]
 8001c94:	6811      	ldr	r1, [r2, #0]
 8001c96:	3204      	adds	r2, #4
 8001c98:	2900      	cmp	r1, #0
 8001c9a:	9205      	str	r2, [sp, #20]
 8001c9c:	f2c0 809b 	blt.w	8001dd6 <_vfiprintf_r+0x21a>
 8001ca0:	9109      	str	r1, [sp, #36]	; 0x24
 8001ca2:	7869      	ldrb	r1, [r5, #1]
 8001ca4:	3501      	adds	r5, #1
 8001ca6:	292e      	cmp	r1, #46	; 0x2e
 8001ca8:	d076      	beq.n	8001d98 <_vfiprintf_r+0x1dc>
 8001caa:	4c61      	ldr	r4, [pc, #388]	; (8001e30 <_vfiprintf_r+0x274>)
 8001cac:	2203      	movs	r2, #3
 8001cae:	4620      	mov	r0, r4
 8001cb0:	f000 ff2e 	bl	8002b10 <memchr>
 8001cb4:	b138      	cbz	r0, 8001cc6 <_vfiprintf_r+0x10a>
 8001cb6:	9b06      	ldr	r3, [sp, #24]
 8001cb8:	1b00      	subs	r0, r0, r4
 8001cba:	2440      	movs	r4, #64	; 0x40
 8001cbc:	fa04 f000 	lsl.w	r0, r4, r0
 8001cc0:	4303      	orrs	r3, r0
 8001cc2:	9306      	str	r3, [sp, #24]
 8001cc4:	3501      	adds	r5, #1
 8001cc6:	f815 1b01 	ldrb.w	r1, [r5], #1
 8001cca:	485a      	ldr	r0, [pc, #360]	; (8001e34 <_vfiprintf_r+0x278>)
 8001ccc:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 8001cd0:	2206      	movs	r2, #6
 8001cd2:	f000 ff1d 	bl	8002b10 <memchr>
 8001cd6:	2800      	cmp	r0, #0
 8001cd8:	f000 8083 	beq.w	8001de2 <_vfiprintf_r+0x226>
 8001cdc:	4b56      	ldr	r3, [pc, #344]	; (8001e38 <_vfiprintf_r+0x27c>)
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d06d      	beq.n	8001dbe <_vfiprintf_r+0x202>
 8001ce2:	aa05      	add	r2, sp, #20
 8001ce4:	9200      	str	r2, [sp, #0]
 8001ce6:	4b55      	ldr	r3, [pc, #340]	; (8001e3c <_vfiprintf_r+0x280>)
 8001ce8:	4642      	mov	r2, r8
 8001cea:	a906      	add	r1, sp, #24
 8001cec:	4648      	mov	r0, r9
 8001cee:	f3af 8000 	nop.w
 8001cf2:	9003      	str	r0, [sp, #12]
 8001cf4:	9b03      	ldr	r3, [sp, #12]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	d006      	beq.n	8001d08 <_vfiprintf_r+0x14c>
 8001cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001cfc:	9a03      	ldr	r2, [sp, #12]
 8001cfe:	7829      	ldrb	r1, [r5, #0]
 8001d00:	4413      	add	r3, r2
 8001d02:	930b      	str	r3, [sp, #44]	; 0x2c
 8001d04:	2900      	cmp	r1, #0
 8001d06:	d18a      	bne.n	8001c1e <_vfiprintf_r+0x62>
 8001d08:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8001d0c:	065b      	lsls	r3, r3, #25
 8001d0e:	d417      	bmi.n	8001d40 <_vfiprintf_r+0x184>
 8001d10:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001d12:	b01f      	add	sp, #124	; 0x7c
 8001d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d18:	f7ff fea4 	bl	8001a64 <__sinit>
 8001d1c:	4b40      	ldr	r3, [pc, #256]	; (8001e20 <_vfiprintf_r+0x264>)
 8001d1e:	4598      	cmp	r8, r3
 8001d20:	f47f af5c 	bne.w	8001bdc <_vfiprintf_r+0x20>
 8001d24:	f8d9 8004 	ldr.w	r8, [r9, #4]
 8001d28:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8001d2c:	0718      	lsls	r0, r3, #28
 8001d2e:	f53f af63 	bmi.w	8001bf8 <_vfiprintf_r+0x3c>
 8001d32:	4641      	mov	r1, r8
 8001d34:	4648      	mov	r0, r9
 8001d36:	f000 fb41 	bl	80023bc <__swsetup_r>
 8001d3a:	2800      	cmp	r0, #0
 8001d3c:	f43f af61 	beq.w	8001c02 <_vfiprintf_r+0x46>
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d44:	e7e5      	b.n	8001d12 <_vfiprintf_r+0x156>
 8001d46:	f8d9 8008 	ldr.w	r8, [r9, #8]
 8001d4a:	e750      	b.n	8001bee <_vfiprintf_r+0x32>
 8001d4c:	ebb4 0b05 	subs.w	fp, r4, r5
 8001d50:	d0da      	beq.n	8001d08 <_vfiprintf_r+0x14c>
 8001d52:	46aa      	mov	sl, r5
 8001d54:	f1c5 0501 	rsb	r5, r5, #1
 8001d58:	e003      	b.n	8001d62 <_vfiprintf_r+0x1a6>
 8001d5a:	4593      	cmp	fp, r2
 8001d5c:	d936      	bls.n	8001dcc <_vfiprintf_r+0x210>
 8001d5e:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8001d62:	4642      	mov	r2, r8
 8001d64:	4648      	mov	r0, r9
 8001d66:	f7ff fee5 	bl	8001b34 <__sfputc_r>
 8001d6a:	3001      	adds	r0, #1
 8001d6c:	eb05 020a 	add.w	r2, r5, sl
 8001d70:	d1f3      	bne.n	8001d5a <_vfiprintf_r+0x19e>
 8001d72:	e7c9      	b.n	8001d08 <_vfiprintf_r+0x14c>
 8001d74:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8001d78:	2a09      	cmp	r2, #9
 8001d7a:	d894      	bhi.n	8001ca6 <_vfiprintf_r+0xea>
 8001d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d7e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8001d82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001d86:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001d8a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8001d8e:	2a09      	cmp	r2, #9
 8001d90:	d9f5      	bls.n	8001d7e <_vfiprintf_r+0x1c2>
 8001d92:	292e      	cmp	r1, #46	; 0x2e
 8001d94:	9309      	str	r3, [sp, #36]	; 0x24
 8001d96:	d188      	bne.n	8001caa <_vfiprintf_r+0xee>
 8001d98:	7869      	ldrb	r1, [r5, #1]
 8001d9a:	292a      	cmp	r1, #42	; 0x2a
 8001d9c:	d12b      	bne.n	8001df6 <_vfiprintf_r+0x23a>
 8001d9e:	9b05      	ldr	r3, [sp, #20]
 8001da0:	78a9      	ldrb	r1, [r5, #2]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	9207      	str	r2, [sp, #28]
 8001da6:	3304      	adds	r3, #4
 8001da8:	2a00      	cmp	r2, #0
 8001daa:	f105 0002 	add.w	r0, r5, #2
 8001dae:	9305      	str	r3, [sp, #20]
 8001db0:	bfb8      	it	lt
 8001db2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001db6:	4605      	mov	r5, r0
 8001db8:	bfb8      	it	lt
 8001dba:	9307      	strlt	r3, [sp, #28]
 8001dbc:	e775      	b.n	8001caa <_vfiprintf_r+0xee>
 8001dbe:	9b05      	ldr	r3, [sp, #20]
 8001dc0:	3307      	adds	r3, #7
 8001dc2:	f023 0307 	bic.w	r3, r3, #7
 8001dc6:	3308      	adds	r3, #8
 8001dc8:	9305      	str	r3, [sp, #20]
 8001dca:	e796      	b.n	8001cfa <_vfiprintf_r+0x13e>
 8001dcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001dce:	7823      	ldrb	r3, [r4, #0]
 8001dd0:	445a      	add	r2, fp
 8001dd2:	920b      	str	r2, [sp, #44]	; 0x2c
 8001dd4:	e732      	b.n	8001c3c <_vfiprintf_r+0x80>
 8001dd6:	4249      	negs	r1, r1
 8001dd8:	f043 0302 	orr.w	r3, r3, #2
 8001ddc:	9109      	str	r1, [sp, #36]	; 0x24
 8001dde:	9306      	str	r3, [sp, #24]
 8001de0:	e75f      	b.n	8001ca2 <_vfiprintf_r+0xe6>
 8001de2:	aa05      	add	r2, sp, #20
 8001de4:	9200      	str	r2, [sp, #0]
 8001de6:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <_vfiprintf_r+0x280>)
 8001de8:	4642      	mov	r2, r8
 8001dea:	a906      	add	r1, sp, #24
 8001dec:	4648      	mov	r0, r9
 8001dee:	f000 f8cb 	bl	8001f88 <_printf_i>
 8001df2:	9003      	str	r0, [sp, #12]
 8001df4:	e77e      	b.n	8001cf4 <_vfiprintf_r+0x138>
 8001df6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	2a09      	cmp	r2, #9
 8001dfe:	9307      	str	r3, [sp, #28]
 8001e00:	f105 0501 	add.w	r5, r5, #1
 8001e04:	f63f af51 	bhi.w	8001caa <_vfiprintf_r+0xee>
 8001e08:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8001e0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e10:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001e14:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8001e18:	2a09      	cmp	r2, #9
 8001e1a:	d9f5      	bls.n	8001e08 <_vfiprintf_r+0x24c>
 8001e1c:	9307      	str	r3, [sp, #28]
 8001e1e:	e744      	b.n	8001caa <_vfiprintf_r+0xee>
 8001e20:	0800a918 	.word	0x0800a918
 8001e24:	0800a8f8 	.word	0x0800a8f8
 8001e28:	0800a8d8 	.word	0x0800a8d8
 8001e2c:	0800a94c 	.word	0x0800a94c
 8001e30:	0800a954 	.word	0x0800a954
 8001e34:	0800a958 	.word	0x0800a958
 8001e38:	00000000 	.word	0x00000000
 8001e3c:	08001b71 	.word	0x08001b71

08001e40 <vfiprintf>:
 8001e40:	b410      	push	{r4}
 8001e42:	4c05      	ldr	r4, [pc, #20]	; (8001e58 <vfiprintf+0x18>)
 8001e44:	4684      	mov	ip, r0
 8001e46:	4613      	mov	r3, r2
 8001e48:	6820      	ldr	r0, [r4, #0]
 8001e4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e4e:	460a      	mov	r2, r1
 8001e50:	4661      	mov	r1, ip
 8001e52:	f7ff beb3 	b.w	8001bbc <_vfiprintf_r>
 8001e56:	bf00      	nop
 8001e58:	20000004 	.word	0x20000004

08001e5c <_printf_common>:
 8001e5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e60:	4692      	mov	sl, r2
 8001e62:	461f      	mov	r7, r3
 8001e64:	690a      	ldr	r2, [r1, #16]
 8001e66:	688b      	ldr	r3, [r1, #8]
 8001e68:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	bfb8      	it	lt
 8001e70:	461a      	movlt	r2, r3
 8001e72:	f8ca 2000 	str.w	r2, [sl]
 8001e76:	f891 3043 	ldrb.w	r3, [r1, #67]	; 0x43
 8001e7a:	460c      	mov	r4, r1
 8001e7c:	4606      	mov	r6, r0
 8001e7e:	b113      	cbz	r3, 8001e86 <_printf_common+0x2a>
 8001e80:	3201      	adds	r2, #1
 8001e82:	f8ca 2000 	str.w	r2, [sl]
 8001e86:	6822      	ldr	r2, [r4, #0]
 8001e88:	0691      	lsls	r1, r2, #26
 8001e8a:	d55d      	bpl.n	8001f48 <_printf_common+0xec>
 8001e8c:	f8da 3000 	ldr.w	r3, [sl]
 8001e90:	3302      	adds	r3, #2
 8001e92:	f8ca 3000 	str.w	r3, [sl]
 8001e96:	6822      	ldr	r2, [r4, #0]
 8001e98:	f012 0f06 	tst.w	r2, #6
 8001e9c:	4611      	mov	r1, r2
 8001e9e:	d11e      	bne.n	8001ede <_printf_common+0x82>
 8001ea0:	68e1      	ldr	r1, [r4, #12]
 8001ea2:	1acb      	subs	r3, r1, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bfd8      	it	le
 8001ea8:	4611      	movle	r1, r2
 8001eaa:	dd18      	ble.n	8001ede <_printf_common+0x82>
 8001eac:	f104 0b19 	add.w	fp, r4, #25
 8001eb0:	f04f 0800 	mov.w	r8, #0
 8001eb4:	e005      	b.n	8001ec2 <_printf_common+0x66>
 8001eb6:	68e5      	ldr	r5, [r4, #12]
 8001eb8:	f8da 3000 	ldr.w	r3, [sl]
 8001ebc:	1aed      	subs	r5, r5, r3
 8001ebe:	4545      	cmp	r5, r8
 8001ec0:	dd0c      	ble.n	8001edc <_printf_common+0x80>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	465a      	mov	r2, fp
 8001ec6:	4639      	mov	r1, r7
 8001ec8:	4630      	mov	r0, r6
 8001eca:	47c8      	blx	r9
 8001ecc:	3001      	adds	r0, #1
 8001ece:	f108 0801 	add.w	r8, r8, #1
 8001ed2:	d1f0      	bne.n	8001eb6 <_printf_common+0x5a>
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ed8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001edc:	6821      	ldr	r1, [r4, #0]
 8001ede:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001ee2:	3b00      	subs	r3, #0
 8001ee4:	bf18      	it	ne
 8001ee6:	2301      	movne	r3, #1
 8001ee8:	068a      	lsls	r2, r1, #26
 8001eea:	d50a      	bpl.n	8001f02 <_printf_common+0xa6>
 8001eec:	18e1      	adds	r1, r4, r3
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	2030      	movs	r0, #48	; 0x30
 8001ef2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001ef6:	4422      	add	r2, r4
 8001ef8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001efc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f00:	3302      	adds	r3, #2
 8001f02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f06:	4639      	mov	r1, r7
 8001f08:	4630      	mov	r0, r6
 8001f0a:	47c8      	blx	r9
 8001f0c:	3001      	adds	r0, #1
 8001f0e:	d0e1      	beq.n	8001ed4 <_printf_common+0x78>
 8001f10:	6823      	ldr	r3, [r4, #0]
 8001f12:	f003 0306 	and.w	r3, r3, #6
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	d01d      	beq.n	8001f56 <_printf_common+0xfa>
 8001f1a:	68a3      	ldr	r3, [r4, #8]
 8001f1c:	6922      	ldr	r2, [r4, #16]
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	dd25      	ble.n	8001f6e <_printf_common+0x112>
 8001f22:	f04f 0800 	mov.w	r8, #0
 8001f26:	1a9b      	subs	r3, r3, r2
 8001f28:	4498      	add	r8, r3
 8001f2a:	341a      	adds	r4, #26
 8001f2c:	2500      	movs	r5, #0
 8001f2e:	e001      	b.n	8001f34 <_printf_common+0xd8>
 8001f30:	4545      	cmp	r5, r8
 8001f32:	da1c      	bge.n	8001f6e <_printf_common+0x112>
 8001f34:	2301      	movs	r3, #1
 8001f36:	4622      	mov	r2, r4
 8001f38:	4639      	mov	r1, r7
 8001f3a:	4630      	mov	r0, r6
 8001f3c:	47c8      	blx	r9
 8001f3e:	3001      	adds	r0, #1
 8001f40:	f105 0501 	add.w	r5, r5, #1
 8001f44:	d1f4      	bne.n	8001f30 <_printf_common+0xd4>
 8001f46:	e7c5      	b.n	8001ed4 <_printf_common+0x78>
 8001f48:	f012 0f06 	tst.w	r2, #6
 8001f4c:	d012      	beq.n	8001f74 <_printf_common+0x118>
 8001f4e:	3b00      	subs	r3, #0
 8001f50:	bf18      	it	ne
 8001f52:	2301      	movne	r3, #1
 8001f54:	e7d5      	b.n	8001f02 <_printf_common+0xa6>
 8001f56:	f8da 3000 	ldr.w	r3, [sl]
 8001f5a:	68e1      	ldr	r1, [r4, #12]
 8001f5c:	6922      	ldr	r2, [r4, #16]
 8001f5e:	1ac9      	subs	r1, r1, r3
 8001f60:	68a3      	ldr	r3, [r4, #8]
 8001f62:	4293      	cmp	r3, r2
 8001f64:	ea21 78e1 	bic.w	r8, r1, r1, asr #31
 8001f68:	dcdd      	bgt.n	8001f26 <_printf_common+0xca>
 8001f6a:	2900      	cmp	r1, #0
 8001f6c:	dcdd      	bgt.n	8001f2a <_printf_common+0xce>
 8001f6e:	2000      	movs	r0, #0
 8001f70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f74:	68e1      	ldr	r1, [r4, #12]
 8001f76:	f8da 3000 	ldr.w	r3, [sl]
 8001f7a:	1acb      	subs	r3, r1, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	bfd8      	it	le
 8001f80:	4611      	movle	r1, r2
 8001f82:	dc93      	bgt.n	8001eac <_printf_common+0x50>
 8001f84:	e7ab      	b.n	8001ede <_printf_common+0x82>
 8001f86:	bf00      	nop

08001f88 <_printf_i>:
 8001f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f8c:	460c      	mov	r4, r1
 8001f8e:	b084      	sub	sp, #16
 8001f90:	4690      	mov	r8, r2
 8001f92:	7e22      	ldrb	r2, [r4, #24]
 8001f94:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001f96:	4607      	mov	r7, r0
 8001f98:	4699      	mov	r9, r3
 8001f9a:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8001f9e:	2a00      	cmp	r2, #0
 8001fa0:	d033      	beq.n	800200a <_printf_i+0x82>
 8001fa2:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8001fa6:	b2dd      	uxtb	r5, r3
 8001fa8:	2d20      	cmp	r5, #32
 8001faa:	d867      	bhi.n	800207c <_printf_i+0xf4>
 8001fac:	2b20      	cmp	r3, #32
 8001fae:	d865      	bhi.n	800207c <_printf_i+0xf4>
 8001fb0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001fb4:	006400de 	.word	0x006400de
 8001fb8:	00640064 	.word	0x00640064
 8001fbc:	00640064 	.word	0x00640064
 8001fc0:	00640064 	.word	0x00640064
 8001fc4:	00640064 	.word	0x00640064
 8001fc8:	00a30064 	.word	0x00a30064
 8001fcc:	0064006e 	.word	0x0064006e
 8001fd0:	00640064 	.word	0x00640064
 8001fd4:	006e0064 	.word	0x006e0064
 8001fd8:	00640064 	.word	0x00640064
 8001fdc:	00640064 	.word	0x00640064
 8001fe0:	007f0021 	.word	0x007f0021
 8001fe4:	006400c0 	.word	0x006400c0
 8001fe8:	00ae0064 	.word	0x00ae0064
 8001fec:	007f0064 	.word	0x007f0064
 8001ff0:	00640064 	.word	0x00640064
 8001ff4:	00e5      	.short	0x00e5
 8001ff6:	6823      	ldr	r3, [r4, #0]
 8001ff8:	061a      	lsls	r2, r3, #24
 8001ffa:	f140 8104 	bpl.w	8002206 <_printf_i+0x27e>
 8001ffe:	680b      	ldr	r3, [r1, #0]
 8002000:	6962      	ldr	r2, [r4, #20]
 8002002:	1d1d      	adds	r5, r3, #4
 8002004:	600d      	str	r5, [r1, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	2300      	movs	r3, #0
 800200c:	4682      	mov	sl, r0
 800200e:	6123      	str	r3, [r4, #16]
 8002010:	f8cd 9000 	str.w	r9, [sp]
 8002014:	4643      	mov	r3, r8
 8002016:	aa03      	add	r2, sp, #12
 8002018:	4621      	mov	r1, r4
 800201a:	4638      	mov	r0, r7
 800201c:	f7ff ff1e 	bl	8001e5c <_printf_common>
 8002020:	3001      	adds	r0, #1
 8002022:	d020      	beq.n	8002066 <_printf_i+0xde>
 8002024:	6923      	ldr	r3, [r4, #16]
 8002026:	4652      	mov	r2, sl
 8002028:	4641      	mov	r1, r8
 800202a:	4638      	mov	r0, r7
 800202c:	47c8      	blx	r9
 800202e:	3001      	adds	r0, #1
 8002030:	d019      	beq.n	8002066 <_printf_i+0xde>
 8002032:	6823      	ldr	r3, [r4, #0]
 8002034:	68e0      	ldr	r0, [r4, #12]
 8002036:	9e03      	ldr	r6, [sp, #12]
 8002038:	079b      	lsls	r3, r3, #30
 800203a:	d519      	bpl.n	8002070 <_printf_i+0xe8>
 800203c:	1b83      	subs	r3, r0, r6
 800203e:	2b00      	cmp	r3, #0
 8002040:	dd16      	ble.n	8002070 <_printf_i+0xe8>
 8002042:	f104 0a19 	add.w	sl, r4, #25
 8002046:	2500      	movs	r5, #0
 8002048:	e004      	b.n	8002054 <_printf_i+0xcc>
 800204a:	68e0      	ldr	r0, [r4, #12]
 800204c:	9e03      	ldr	r6, [sp, #12]
 800204e:	1b83      	subs	r3, r0, r6
 8002050:	42ab      	cmp	r3, r5
 8002052:	dd0d      	ble.n	8002070 <_printf_i+0xe8>
 8002054:	2301      	movs	r3, #1
 8002056:	4652      	mov	r2, sl
 8002058:	4641      	mov	r1, r8
 800205a:	4638      	mov	r0, r7
 800205c:	47c8      	blx	r9
 800205e:	3001      	adds	r0, #1
 8002060:	f105 0501 	add.w	r5, r5, #1
 8002064:	d1f1      	bne.n	800204a <_printf_i+0xc2>
 8002066:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800206a:	b004      	add	sp, #16
 800206c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002070:	42b0      	cmp	r0, r6
 8002072:	bfb8      	it	lt
 8002074:	4630      	movlt	r0, r6
 8002076:	b004      	add	sp, #16
 8002078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800207c:	2301      	movs	r3, #1
 800207e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002082:	6123      	str	r3, [r4, #16]
 8002084:	f104 0a42 	add.w	sl, r4, #66	; 0x42
 8002088:	2300      	movs	r3, #0
 800208a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800208e:	e7bf      	b.n	8002010 <_printf_i+0x88>
 8002090:	6823      	ldr	r3, [r4, #0]
 8002092:	061a      	lsls	r2, r3, #24
 8002094:	d402      	bmi.n	800209c <_printf_i+0x114>
 8002096:	065e      	lsls	r6, r3, #25
 8002098:	f100 80c1 	bmi.w	800221e <_printf_i+0x296>
 800209c:	680d      	ldr	r5, [r1, #0]
 800209e:	682a      	ldr	r2, [r5, #0]
 80020a0:	3504      	adds	r5, #4
 80020a2:	600d      	str	r5, [r1, #0]
 80020a4:	4615      	mov	r5, r2
 80020a6:	2a00      	cmp	r2, #0
 80020a8:	db6b      	blt.n	8002182 <_printf_i+0x1fa>
 80020aa:	f8df c184 	ldr.w	ip, [pc, #388]	; 8002230 <_printf_i+0x2a8>
 80020ae:	260a      	movs	r6, #10
 80020b0:	e010      	b.n	80020d4 <_printf_i+0x14c>
 80020b2:	6823      	ldr	r3, [r4, #0]
 80020b4:	061d      	lsls	r5, r3, #24
 80020b6:	f140 809c 	bpl.w	80021f2 <_printf_i+0x26a>
 80020ba:	680b      	ldr	r3, [r1, #0]
 80020bc:	1d1d      	adds	r5, r3, #4
 80020be:	600d      	str	r5, [r1, #0]
 80020c0:	681d      	ldr	r5, [r3, #0]
 80020c2:	f8df c16c 	ldr.w	ip, [pc, #364]	; 8002230 <_printf_i+0x2a8>
 80020c6:	2a6f      	cmp	r2, #111	; 0x6f
 80020c8:	bf0c      	ite	eq
 80020ca:	2608      	moveq	r6, #8
 80020cc:	260a      	movne	r6, #10
 80020ce:	2300      	movs	r3, #0
 80020d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020d4:	6862      	ldr	r2, [r4, #4]
 80020d6:	60a2      	str	r2, [r4, #8]
 80020d8:	2a00      	cmp	r2, #0
 80020da:	db7f      	blt.n	80021dc <_printf_i+0x254>
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	f023 0304 	bic.w	r3, r3, #4
 80020e2:	6023      	str	r3, [r4, #0]
 80020e4:	2d00      	cmp	r5, #0
 80020e6:	d15b      	bne.n	80021a0 <_printf_i+0x218>
 80020e8:	2a00      	cmp	r2, #0
 80020ea:	d179      	bne.n	80021e0 <_printf_i+0x258>
 80020ec:	4682      	mov	sl, r0
 80020ee:	2e08      	cmp	r6, #8
 80020f0:	d065      	beq.n	80021be <_printf_i+0x236>
 80020f2:	eba0 000a 	sub.w	r0, r0, sl
 80020f6:	6120      	str	r0, [r4, #16]
 80020f8:	e78a      	b.n	8002010 <_printf_i+0x88>
 80020fa:	680b      	ldr	r3, [r1, #0]
 80020fc:	2201      	movs	r2, #1
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	3304      	adds	r3, #4
 8002102:	600b      	str	r3, [r1, #0]
 8002104:	f104 0a42 	add.w	sl, r4, #66	; 0x42
 8002108:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
 800210c:	6122      	str	r2, [r4, #16]
 800210e:	e7bb      	b.n	8002088 <_printf_i+0x100>
 8002110:	680b      	ldr	r3, [r1, #0]
 8002112:	6862      	ldr	r2, [r4, #4]
 8002114:	1d18      	adds	r0, r3, #4
 8002116:	6008      	str	r0, [r1, #0]
 8002118:	f8d3 a000 	ldr.w	sl, [r3]
 800211c:	2100      	movs	r1, #0
 800211e:	4650      	mov	r0, sl
 8002120:	f000 fcf6 	bl	8002b10 <memchr>
 8002124:	2800      	cmp	r0, #0
 8002126:	f000 8081 	beq.w	800222c <_printf_i+0x2a4>
 800212a:	eba0 000a 	sub.w	r0, r0, sl
 800212e:	6060      	str	r0, [r4, #4]
 8002130:	6120      	str	r0, [r4, #16]
 8002132:	e7a9      	b.n	8002088 <_printf_i+0x100>
 8002134:	6823      	ldr	r3, [r4, #0]
 8002136:	f043 0320 	orr.w	r3, r3, #32
 800213a:	6023      	str	r3, [r4, #0]
 800213c:	2278      	movs	r2, #120	; 0x78
 800213e:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8002234 <_printf_i+0x2ac>
 8002142:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002146:	680a      	ldr	r2, [r1, #0]
 8002148:	1d15      	adds	r5, r2, #4
 800214a:	600d      	str	r5, [r1, #0]
 800214c:	061d      	lsls	r5, r3, #24
 800214e:	d443      	bmi.n	80021d8 <_printf_i+0x250>
 8002150:	0659      	lsls	r1, r3, #25
 8002152:	d541      	bpl.n	80021d8 <_printf_i+0x250>
 8002154:	8815      	ldrh	r5, [r2, #0]
 8002156:	07de      	lsls	r6, r3, #31
 8002158:	bf44      	itt	mi
 800215a:	f043 0320 	orrmi.w	r3, r3, #32
 800215e:	6023      	strmi	r3, [r4, #0]
 8002160:	2d00      	cmp	r5, #0
 8002162:	d144      	bne.n	80021ee <_printf_i+0x266>
 8002164:	6823      	ldr	r3, [r4, #0]
 8002166:	f023 0320 	bic.w	r3, r3, #32
 800216a:	6023      	str	r3, [r4, #0]
 800216c:	2610      	movs	r6, #16
 800216e:	e7ae      	b.n	80020ce <_printf_i+0x146>
 8002170:	2358      	movs	r3, #88	; 0x58
 8002172:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002176:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8002230 <_printf_i+0x2a8>
 800217a:	6823      	ldr	r3, [r4, #0]
 800217c:	e7e3      	b.n	8002146 <_printf_i+0x1be>
 800217e:	6823      	ldr	r3, [r4, #0]
 8002180:	e7dc      	b.n	800213c <_printf_i+0x1b4>
 8002182:	6862      	ldr	r2, [r4, #4]
 8002184:	60a2      	str	r2, [r4, #8]
 8002186:	212d      	movs	r1, #45	; 0x2d
 8002188:	2a00      	cmp	r2, #0
 800218a:	f1c5 0500 	rsb	r5, r5, #0
 800218e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002192:	db02      	blt.n	800219a <_printf_i+0x212>
 8002194:	f023 0304 	bic.w	r3, r3, #4
 8002198:	6023      	str	r3, [r4, #0]
 800219a:	f8df c094 	ldr.w	ip, [pc, #148]	; 8002230 <_printf_i+0x2a8>
 800219e:	260a      	movs	r6, #10
 80021a0:	4682      	mov	sl, r0
 80021a2:	fbb5 f3f6 	udiv	r3, r5, r6
 80021a6:	fb06 5113 	mls	r1, r6, r3, r5
 80021aa:	462a      	mov	r2, r5
 80021ac:	f81c 1001 	ldrb.w	r1, [ip, r1]
 80021b0:	f80a 1d01 	strb.w	r1, [sl, #-1]!
 80021b4:	42b2      	cmp	r2, r6
 80021b6:	461d      	mov	r5, r3
 80021b8:	d2f3      	bcs.n	80021a2 <_printf_i+0x21a>
 80021ba:	2e08      	cmp	r6, #8
 80021bc:	d199      	bne.n	80020f2 <_printf_i+0x16a>
 80021be:	6823      	ldr	r3, [r4, #0]
 80021c0:	07d9      	lsls	r1, r3, #31
 80021c2:	d596      	bpl.n	80020f2 <_printf_i+0x16a>
 80021c4:	6862      	ldr	r2, [r4, #4]
 80021c6:	6923      	ldr	r3, [r4, #16]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	dc92      	bgt.n	80020f2 <_printf_i+0x16a>
 80021cc:	2330      	movs	r3, #48	; 0x30
 80021ce:	f80a 3c01 	strb.w	r3, [sl, #-1]
 80021d2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80021d6:	e78c      	b.n	80020f2 <_printf_i+0x16a>
 80021d8:	6815      	ldr	r5, [r2, #0]
 80021da:	e7bc      	b.n	8002156 <_printf_i+0x1ce>
 80021dc:	2d00      	cmp	r5, #0
 80021de:	d1df      	bne.n	80021a0 <_printf_i+0x218>
 80021e0:	f89c 3000 	ldrb.w	r3, [ip]
 80021e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80021e8:	f104 0a42 	add.w	sl, r4, #66	; 0x42
 80021ec:	e77f      	b.n	80020ee <_printf_i+0x166>
 80021ee:	2610      	movs	r6, #16
 80021f0:	e76d      	b.n	80020ce <_printf_i+0x146>
 80021f2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80021f6:	680b      	ldr	r3, [r1, #0]
 80021f8:	f103 0504 	add.w	r5, r3, #4
 80021fc:	600d      	str	r5, [r1, #0]
 80021fe:	bf0c      	ite	eq
 8002200:	681d      	ldreq	r5, [r3, #0]
 8002202:	881d      	ldrhne	r5, [r3, #0]
 8002204:	e75d      	b.n	80020c2 <_printf_i+0x13a>
 8002206:	f013 0f40 	tst.w	r3, #64	; 0x40
 800220a:	680b      	ldr	r3, [r1, #0]
 800220c:	6962      	ldr	r2, [r4, #20]
 800220e:	f103 0504 	add.w	r5, r3, #4
 8002212:	600d      	str	r5, [r1, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	bf14      	ite	ne
 8002218:	801a      	strhne	r2, [r3, #0]
 800221a:	601a      	streq	r2, [r3, #0]
 800221c:	e6f5      	b.n	800200a <_printf_i+0x82>
 800221e:	680a      	ldr	r2, [r1, #0]
 8002220:	f9b2 5000 	ldrsh.w	r5, [r2]
 8002224:	3204      	adds	r2, #4
 8002226:	600a      	str	r2, [r1, #0]
 8002228:	462a      	mov	r2, r5
 800222a:	e73c      	b.n	80020a6 <_printf_i+0x11e>
 800222c:	6860      	ldr	r0, [r4, #4]
 800222e:	e77f      	b.n	8002130 <_printf_i+0x1a8>
 8002230:	0800a960 	.word	0x0800a960
 8002234:	0800a974 	.word	0x0800a974

08002238 <__sread>:
 8002238:	b510      	push	{r4, lr}
 800223a:	460c      	mov	r4, r1
 800223c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002240:	f000 fdf4 	bl	8002e2c <_read_r>
 8002244:	2800      	cmp	r0, #0
 8002246:	db03      	blt.n	8002250 <__sread+0x18>
 8002248:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800224a:	4403      	add	r3, r0
 800224c:	6563      	str	r3, [r4, #84]	; 0x54
 800224e:	bd10      	pop	{r4, pc}
 8002250:	89a3      	ldrh	r3, [r4, #12]
 8002252:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002256:	81a3      	strh	r3, [r4, #12]
 8002258:	bd10      	pop	{r4, pc}
 800225a:	bf00      	nop

0800225c <__seofread>:
 800225c:	2000      	movs	r0, #0
 800225e:	4770      	bx	lr

08002260 <__swrite>:
 8002260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002264:	460c      	mov	r4, r1
 8002266:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 800226a:	461f      	mov	r7, r3
 800226c:	05cb      	lsls	r3, r1, #23
 800226e:	4605      	mov	r5, r0
 8002270:	4616      	mov	r6, r2
 8002272:	d40b      	bmi.n	800228c <__swrite+0x2c>
 8002274:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8002278:	81a1      	strh	r1, [r4, #12]
 800227a:	463b      	mov	r3, r7
 800227c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002280:	4632      	mov	r2, r6
 8002282:	4628      	mov	r0, r5
 8002284:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002288:	f000 b882 	b.w	8002390 <_write_r>
 800228c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002290:	2302      	movs	r3, #2
 8002292:	2200      	movs	r2, #0
 8002294:	f000 fb92 	bl	80029bc <_lseek_r>
 8002298:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 800229c:	e7ea      	b.n	8002274 <__swrite+0x14>
 800229e:	bf00      	nop

080022a0 <__sseek>:
 80022a0:	b510      	push	{r4, lr}
 80022a2:	460c      	mov	r4, r1
 80022a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022a8:	f000 fb88 	bl	80029bc <_lseek_r>
 80022ac:	89a3      	ldrh	r3, [r4, #12]
 80022ae:	1c42      	adds	r2, r0, #1
 80022b0:	bf0e      	itee	eq
 80022b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80022b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80022ba:	6560      	strne	r0, [r4, #84]	; 0x54
 80022bc:	81a3      	strh	r3, [r4, #12]
 80022be:	bd10      	pop	{r4, pc}

080022c0 <__sclose>:
 80022c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022c4:	f000 b8fc 	b.w	80024c0 <_close_r>

080022c8 <__swbuf_r>:
 80022c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ca:	460d      	mov	r5, r1
 80022cc:	4614      	mov	r4, r2
 80022ce:	4606      	mov	r6, r0
 80022d0:	b108      	cbz	r0, 80022d6 <__swbuf_r+0xe>
 80022d2:	6983      	ldr	r3, [r0, #24]
 80022d4:	b343      	cbz	r3, 8002328 <__swbuf_r+0x60>
 80022d6:	4b25      	ldr	r3, [pc, #148]	; (800236c <__swbuf_r+0xa4>)
 80022d8:	429c      	cmp	r4, r3
 80022da:	d02a      	beq.n	8002332 <__swbuf_r+0x6a>
 80022dc:	4b24      	ldr	r3, [pc, #144]	; (8002370 <__swbuf_r+0xa8>)
 80022de:	429c      	cmp	r4, r3
 80022e0:	d029      	beq.n	8002336 <__swbuf_r+0x6e>
 80022e2:	4b24      	ldr	r3, [pc, #144]	; (8002374 <__swbuf_r+0xac>)
 80022e4:	429c      	cmp	r4, r3
 80022e6:	bf08      	it	eq
 80022e8:	68f4      	ldreq	r4, [r6, #12]
 80022ea:	89a3      	ldrh	r3, [r4, #12]
 80022ec:	69a2      	ldr	r2, [r4, #24]
 80022ee:	60a2      	str	r2, [r4, #8]
 80022f0:	071a      	lsls	r2, r3, #28
 80022f2:	d522      	bpl.n	800233a <__swbuf_r+0x72>
 80022f4:	6923      	ldr	r3, [r4, #16]
 80022f6:	b303      	cbz	r3, 800233a <__swbuf_r+0x72>
 80022f8:	6822      	ldr	r2, [r4, #0]
 80022fa:	6961      	ldr	r1, [r4, #20]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	b2ed      	uxtb	r5, r5
 8002300:	4299      	cmp	r1, r3
 8002302:	462f      	mov	r7, r5
 8002304:	dd29      	ble.n	800235a <__swbuf_r+0x92>
 8002306:	3301      	adds	r3, #1
 8002308:	68a1      	ldr	r1, [r4, #8]
 800230a:	3901      	subs	r1, #1
 800230c:	60a1      	str	r1, [r4, #8]
 800230e:	1c51      	adds	r1, r2, #1
 8002310:	6021      	str	r1, [r4, #0]
 8002312:	7015      	strb	r5, [r2, #0]
 8002314:	6962      	ldr	r2, [r4, #20]
 8002316:	429a      	cmp	r2, r3
 8002318:	d016      	beq.n	8002348 <__swbuf_r+0x80>
 800231a:	89a3      	ldrh	r3, [r4, #12]
 800231c:	07db      	lsls	r3, r3, #31
 800231e:	d501      	bpl.n	8002324 <__swbuf_r+0x5c>
 8002320:	2d0a      	cmp	r5, #10
 8002322:	d011      	beq.n	8002348 <__swbuf_r+0x80>
 8002324:	4638      	mov	r0, r7
 8002326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002328:	f7ff fb9c 	bl	8001a64 <__sinit>
 800232c:	4b0f      	ldr	r3, [pc, #60]	; (800236c <__swbuf_r+0xa4>)
 800232e:	429c      	cmp	r4, r3
 8002330:	d1d4      	bne.n	80022dc <__swbuf_r+0x14>
 8002332:	6874      	ldr	r4, [r6, #4]
 8002334:	e7d9      	b.n	80022ea <__swbuf_r+0x22>
 8002336:	68b4      	ldr	r4, [r6, #8]
 8002338:	e7d7      	b.n	80022ea <__swbuf_r+0x22>
 800233a:	4621      	mov	r1, r4
 800233c:	4630      	mov	r0, r6
 800233e:	f000 f83d 	bl	80023bc <__swsetup_r>
 8002342:	b938      	cbnz	r0, 8002354 <__swbuf_r+0x8c>
 8002344:	6923      	ldr	r3, [r4, #16]
 8002346:	e7d7      	b.n	80022f8 <__swbuf_r+0x30>
 8002348:	4621      	mov	r1, r4
 800234a:	4630      	mov	r0, r6
 800234c:	f000 f954 	bl	80025f8 <_fflush_r>
 8002350:	2800      	cmp	r0, #0
 8002352:	d0e7      	beq.n	8002324 <__swbuf_r+0x5c>
 8002354:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002358:	e7e4      	b.n	8002324 <__swbuf_r+0x5c>
 800235a:	4621      	mov	r1, r4
 800235c:	4630      	mov	r0, r6
 800235e:	f000 f94b 	bl	80025f8 <_fflush_r>
 8002362:	2800      	cmp	r0, #0
 8002364:	d1f6      	bne.n	8002354 <__swbuf_r+0x8c>
 8002366:	6822      	ldr	r2, [r4, #0]
 8002368:	2301      	movs	r3, #1
 800236a:	e7cd      	b.n	8002308 <__swbuf_r+0x40>
 800236c:	0800a918 	.word	0x0800a918
 8002370:	0800a8f8 	.word	0x0800a8f8
 8002374:	0800a8d8 	.word	0x0800a8d8

08002378 <__swbuf>:
 8002378:	b410      	push	{r4}
 800237a:	4c04      	ldr	r4, [pc, #16]	; (800238c <__swbuf+0x14>)
 800237c:	4603      	mov	r3, r0
 800237e:	460a      	mov	r2, r1
 8002380:	6820      	ldr	r0, [r4, #0]
 8002382:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002386:	4619      	mov	r1, r3
 8002388:	f7ff bf9e 	b.w	80022c8 <__swbuf_r>
 800238c:	20000004 	.word	0x20000004

08002390 <_write_r>:
 8002390:	b538      	push	{r3, r4, r5, lr}
 8002392:	460c      	mov	r4, r1
 8002394:	4d08      	ldr	r5, [pc, #32]	; (80023b8 <_write_r+0x28>)
 8002396:	4684      	mov	ip, r0
 8002398:	4611      	mov	r1, r2
 800239a:	4620      	mov	r0, r4
 800239c:	461a      	mov	r2, r3
 800239e:	2300      	movs	r3, #0
 80023a0:	602b      	str	r3, [r5, #0]
 80023a2:	4664      	mov	r4, ip
 80023a4:	f7fe ff12 	bl	80011cc <_write>
 80023a8:	1c43      	adds	r3, r0, #1
 80023aa:	d000      	beq.n	80023ae <_write_r+0x1e>
 80023ac:	bd38      	pop	{r3, r4, r5, pc}
 80023ae:	682b      	ldr	r3, [r5, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0fb      	beq.n	80023ac <_write_r+0x1c>
 80023b4:	6023      	str	r3, [r4, #0]
 80023b6:	bd38      	pop	{r3, r4, r5, pc}
 80023b8:	20000214 	.word	0x20000214

080023bc <__swsetup_r>:
 80023bc:	4b3c      	ldr	r3, [pc, #240]	; (80024b0 <__swsetup_r+0xf4>)
 80023be:	b570      	push	{r4, r5, r6, lr}
 80023c0:	681d      	ldr	r5, [r3, #0]
 80023c2:	4606      	mov	r6, r0
 80023c4:	460c      	mov	r4, r1
 80023c6:	b10d      	cbz	r5, 80023cc <__swsetup_r+0x10>
 80023c8:	69ab      	ldr	r3, [r5, #24]
 80023ca:	b1e3      	cbz	r3, 8002406 <__swsetup_r+0x4a>
 80023cc:	4b39      	ldr	r3, [pc, #228]	; (80024b4 <__swsetup_r+0xf8>)
 80023ce:	429c      	cmp	r4, r3
 80023d0:	d01f      	beq.n	8002412 <__swsetup_r+0x56>
 80023d2:	4b39      	ldr	r3, [pc, #228]	; (80024b8 <__swsetup_r+0xfc>)
 80023d4:	429c      	cmp	r4, r3
 80023d6:	d04d      	beq.n	8002474 <__swsetup_r+0xb8>
 80023d8:	4b38      	ldr	r3, [pc, #224]	; (80024bc <__swsetup_r+0x100>)
 80023da:	429c      	cmp	r4, r3
 80023dc:	bf08      	it	eq
 80023de:	68ec      	ldreq	r4, [r5, #12]
 80023e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023e4:	0718      	lsls	r0, r3, #28
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	d519      	bpl.n	800241e <__swsetup_r+0x62>
 80023ea:	6921      	ldr	r1, [r4, #16]
 80023ec:	b311      	cbz	r1, 8002434 <__swsetup_r+0x78>
 80023ee:	f012 0001 	ands.w	r0, r2, #1
 80023f2:	d02f      	beq.n	8002454 <__swsetup_r+0x98>
 80023f4:	2000      	movs	r0, #0
 80023f6:	60a0      	str	r0, [r4, #8]
 80023f8:	6960      	ldr	r0, [r4, #20]
 80023fa:	4240      	negs	r0, r0
 80023fc:	61a0      	str	r0, [r4, #24]
 80023fe:	2900      	cmp	r1, #0
 8002400:	d02e      	beq.n	8002460 <__swsetup_r+0xa4>
 8002402:	2000      	movs	r0, #0
 8002404:	bd70      	pop	{r4, r5, r6, pc}
 8002406:	4628      	mov	r0, r5
 8002408:	f7ff fb2c 	bl	8001a64 <__sinit>
 800240c:	4b29      	ldr	r3, [pc, #164]	; (80024b4 <__swsetup_r+0xf8>)
 800240e:	429c      	cmp	r4, r3
 8002410:	d1df      	bne.n	80023d2 <__swsetup_r+0x16>
 8002412:	686c      	ldr	r4, [r5, #4]
 8002414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002418:	0718      	lsls	r0, r3, #28
 800241a:	b29a      	uxth	r2, r3
 800241c:	d4e5      	bmi.n	80023ea <__swsetup_r+0x2e>
 800241e:	06d1      	lsls	r1, r2, #27
 8002420:	d53e      	bpl.n	80024a0 <__swsetup_r+0xe4>
 8002422:	0752      	lsls	r2, r2, #29
 8002424:	d428      	bmi.n	8002478 <__swsetup_r+0xbc>
 8002426:	6921      	ldr	r1, [r4, #16]
 8002428:	f043 0308 	orr.w	r3, r3, #8
 800242c:	81a3      	strh	r3, [r4, #12]
 800242e:	b29a      	uxth	r2, r3
 8002430:	2900      	cmp	r1, #0
 8002432:	d1dc      	bne.n	80023ee <__swsetup_r+0x32>
 8002434:	f402 7020 	and.w	r0, r2, #640	; 0x280
 8002438:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800243c:	d0d7      	beq.n	80023ee <__swsetup_r+0x32>
 800243e:	4621      	mov	r1, r4
 8002440:	4630      	mov	r0, r6
 8002442:	f000 fad1 	bl	80029e8 <__smakebuf_r>
 8002446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800244a:	6921      	ldr	r1, [r4, #16]
 800244c:	b29a      	uxth	r2, r3
 800244e:	f012 0001 	ands.w	r0, r2, #1
 8002452:	d1cf      	bne.n	80023f4 <__swsetup_r+0x38>
 8002454:	0795      	lsls	r5, r2, #30
 8002456:	bf58      	it	pl
 8002458:	6960      	ldrpl	r0, [r4, #20]
 800245a:	60a0      	str	r0, [r4, #8]
 800245c:	2900      	cmp	r1, #0
 800245e:	d1d0      	bne.n	8002402 <__swsetup_r+0x46>
 8002460:	0612      	lsls	r2, r2, #24
 8002462:	bf58      	it	pl
 8002464:	4608      	movpl	r0, r1
 8002466:	d5cd      	bpl.n	8002404 <__swsetup_r+0x48>
 8002468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800246c:	81a3      	strh	r3, [r4, #12]
 800246e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002472:	bd70      	pop	{r4, r5, r6, pc}
 8002474:	68ac      	ldr	r4, [r5, #8]
 8002476:	e7b3      	b.n	80023e0 <__swsetup_r+0x24>
 8002478:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800247a:	b151      	cbz	r1, 8002492 <__swsetup_r+0xd6>
 800247c:	f104 0244 	add.w	r2, r4, #68	; 0x44
 8002480:	4291      	cmp	r1, r2
 8002482:	d004      	beq.n	800248e <__swsetup_r+0xd2>
 8002484:	4630      	mov	r0, r6
 8002486:	f7ff f8f3 	bl	8001670 <_free_r>
 800248a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	6362      	str	r2, [r4, #52]	; 0x34
 8002492:	6921      	ldr	r1, [r4, #16]
 8002494:	2200      	movs	r2, #0
 8002496:	e9c4 1200 	strd	r1, r2, [r4]
 800249a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800249e:	e7c3      	b.n	8002428 <__swsetup_r+0x6c>
 80024a0:	2209      	movs	r2, #9
 80024a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024a6:	6032      	str	r2, [r6, #0]
 80024a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024ac:	81a3      	strh	r3, [r4, #12]
 80024ae:	bd70      	pop	{r4, r5, r6, pc}
 80024b0:	20000004 	.word	0x20000004
 80024b4:	0800a918 	.word	0x0800a918
 80024b8:	0800a8f8 	.word	0x0800a8f8
 80024bc:	0800a8d8 	.word	0x0800a8d8

080024c0 <_close_r>:
 80024c0:	b538      	push	{r3, r4, r5, lr}
 80024c2:	4d07      	ldr	r5, [pc, #28]	; (80024e0 <_close_r+0x20>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	4604      	mov	r4, r0
 80024c8:	4608      	mov	r0, r1
 80024ca:	602a      	str	r2, [r5, #0]
 80024cc:	f7fe fe9a 	bl	8001204 <_close>
 80024d0:	1c43      	adds	r3, r0, #1
 80024d2:	d000      	beq.n	80024d6 <_close_r+0x16>
 80024d4:	bd38      	pop	{r3, r4, r5, pc}
 80024d6:	682b      	ldr	r3, [r5, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0fb      	beq.n	80024d4 <_close_r+0x14>
 80024dc:	6023      	str	r3, [r4, #0]
 80024de:	bd38      	pop	{r3, r4, r5, pc}
 80024e0:	20000214 	.word	0x20000214

080024e4 <__sflush_r>:
 80024e4:	898b      	ldrh	r3, [r1, #12]
 80024e6:	071a      	lsls	r2, r3, #28
 80024e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024ec:	460c      	mov	r4, r1
 80024ee:	4680      	mov	r8, r0
 80024f0:	d43f      	bmi.n	8002572 <__sflush_r+0x8e>
 80024f2:	684a      	ldr	r2, [r1, #4]
 80024f4:	2a00      	cmp	r2, #0
 80024f6:	dd58      	ble.n	80025aa <__sflush_r+0xc6>
 80024f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80024fa:	2e00      	cmp	r6, #0
 80024fc:	d052      	beq.n	80025a4 <__sflush_r+0xc0>
 80024fe:	2200      	movs	r2, #0
 8002500:	f8d8 5000 	ldr.w	r5, [r8]
 8002504:	f8c8 2000 	str.w	r2, [r8]
 8002508:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
 800250c:	d151      	bne.n	80025b2 <__sflush_r+0xce>
 800250e:	2301      	movs	r3, #1
 8002510:	6a21      	ldr	r1, [r4, #32]
 8002512:	4640      	mov	r0, r8
 8002514:	47b0      	blx	r6
 8002516:	1c43      	adds	r3, r0, #1
 8002518:	d05e      	beq.n	80025d8 <__sflush_r+0xf4>
 800251a:	89a3      	ldrh	r3, [r4, #12]
 800251c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800251e:	075f      	lsls	r7, r3, #29
 8002520:	d505      	bpl.n	800252e <__sflush_r+0x4a>
 8002522:	6863      	ldr	r3, [r4, #4]
 8002524:	1ac0      	subs	r0, r0, r3
 8002526:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002528:	b10b      	cbz	r3, 800252e <__sflush_r+0x4a>
 800252a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800252c:	1ac0      	subs	r0, r0, r3
 800252e:	6a21      	ldr	r1, [r4, #32]
 8002530:	4602      	mov	r2, r0
 8002532:	2300      	movs	r3, #0
 8002534:	4640      	mov	r0, r8
 8002536:	47b0      	blx	r6
 8002538:	1c41      	adds	r1, r0, #1
 800253a:	d13c      	bne.n	80025b6 <__sflush_r+0xd2>
 800253c:	f8d8 3000 	ldr.w	r3, [r8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d038      	beq.n	80025b6 <__sflush_r+0xd2>
 8002544:	2b1d      	cmp	r3, #29
 8002546:	d001      	beq.n	800254c <__sflush_r+0x68>
 8002548:	2b16      	cmp	r3, #22
 800254a:	d14d      	bne.n	80025e8 <__sflush_r+0x104>
 800254c:	6923      	ldr	r3, [r4, #16]
 800254e:	2200      	movs	r2, #0
 8002550:	e9c4 3200 	strd	r3, r2, [r4]
 8002554:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002556:	f8c8 5000 	str.w	r5, [r8]
 800255a:	b319      	cbz	r1, 80025a4 <__sflush_r+0xc0>
 800255c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002560:	4299      	cmp	r1, r3
 8002562:	d002      	beq.n	800256a <__sflush_r+0x86>
 8002564:	4640      	mov	r0, r8
 8002566:	f7ff f883 	bl	8001670 <_free_r>
 800256a:	2000      	movs	r0, #0
 800256c:	6360      	str	r0, [r4, #52]	; 0x34
 800256e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002572:	690e      	ldr	r6, [r1, #16]
 8002574:	b1b6      	cbz	r6, 80025a4 <__sflush_r+0xc0>
 8002576:	680d      	ldr	r5, [r1, #0]
 8002578:	600e      	str	r6, [r1, #0]
 800257a:	079a      	lsls	r2, r3, #30
 800257c:	bf0c      	ite	eq
 800257e:	694b      	ldreq	r3, [r1, #20]
 8002580:	2300      	movne	r3, #0
 8002582:	1bad      	subs	r5, r5, r6
 8002584:	608b      	str	r3, [r1, #8]
 8002586:	e00b      	b.n	80025a0 <__sflush_r+0xbc>
 8002588:	462b      	mov	r3, r5
 800258a:	4632      	mov	r2, r6
 800258c:	6a21      	ldr	r1, [r4, #32]
 800258e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8002590:	4640      	mov	r0, r8
 8002592:	47b8      	blx	r7
 8002594:	f1b0 0c00 	subs.w	ip, r0, #0
 8002598:	eba5 050c 	sub.w	r5, r5, ip
 800259c:	4466      	add	r6, ip
 800259e:	dd13      	ble.n	80025c8 <__sflush_r+0xe4>
 80025a0:	2d00      	cmp	r5, #0
 80025a2:	dcf1      	bgt.n	8002588 <__sflush_r+0xa4>
 80025a4:	2000      	movs	r0, #0
 80025a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025aa:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80025ac:	2a00      	cmp	r2, #0
 80025ae:	dca3      	bgt.n	80024f8 <__sflush_r+0x14>
 80025b0:	e7f8      	b.n	80025a4 <__sflush_r+0xc0>
 80025b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80025b4:	e7b3      	b.n	800251e <__sflush_r+0x3a>
 80025b6:	2300      	movs	r3, #0
 80025b8:	6063      	str	r3, [r4, #4]
 80025ba:	6923      	ldr	r3, [r4, #16]
 80025bc:	6023      	str	r3, [r4, #0]
 80025be:	89a3      	ldrh	r3, [r4, #12]
 80025c0:	04db      	lsls	r3, r3, #19
 80025c2:	d5c7      	bpl.n	8002554 <__sflush_r+0x70>
 80025c4:	6560      	str	r0, [r4, #84]	; 0x54
 80025c6:	e7c5      	b.n	8002554 <__sflush_r+0x70>
 80025c8:	89a3      	ldrh	r3, [r4, #12]
 80025ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025d2:	81a3      	strh	r3, [r4, #12]
 80025d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025d8:	f8d8 3000 	ldr.w	r3, [r8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d09c      	beq.n	800251a <__sflush_r+0x36>
 80025e0:	2b1d      	cmp	r3, #29
 80025e2:	d006      	beq.n	80025f2 <__sflush_r+0x10e>
 80025e4:	2b16      	cmp	r3, #22
 80025e6:	d004      	beq.n	80025f2 <__sflush_r+0x10e>
 80025e8:	89a3      	ldrh	r3, [r4, #12]
 80025ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025ee:	81a3      	strh	r3, [r4, #12]
 80025f0:	e7d9      	b.n	80025a6 <__sflush_r+0xc2>
 80025f2:	f8c8 5000 	str.w	r5, [r8]
 80025f6:	e7d5      	b.n	80025a4 <__sflush_r+0xc0>

080025f8 <_fflush_r>:
 80025f8:	b538      	push	{r3, r4, r5, lr}
 80025fa:	690b      	ldr	r3, [r1, #16]
 80025fc:	b1bb      	cbz	r3, 800262e <_fflush_r+0x36>
 80025fe:	460d      	mov	r5, r1
 8002600:	4604      	mov	r4, r0
 8002602:	b108      	cbz	r0, 8002608 <_fflush_r+0x10>
 8002604:	6983      	ldr	r3, [r0, #24]
 8002606:	b1b3      	cbz	r3, 8002636 <_fflush_r+0x3e>
 8002608:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <_fflush_r+0x48>)
 800260a:	429d      	cmp	r5, r3
 800260c:	d011      	beq.n	8002632 <_fflush_r+0x3a>
 800260e:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <_fflush_r+0x4c>)
 8002610:	429d      	cmp	r5, r3
 8002612:	d013      	beq.n	800263c <_fflush_r+0x44>
 8002614:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <_fflush_r+0x50>)
 8002616:	429d      	cmp	r5, r3
 8002618:	bf08      	it	eq
 800261a:	68e5      	ldreq	r5, [r4, #12]
 800261c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8002620:	b12b      	cbz	r3, 800262e <_fflush_r+0x36>
 8002622:	4629      	mov	r1, r5
 8002624:	4620      	mov	r0, r4
 8002626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800262a:	f7ff bf5b 	b.w	80024e4 <__sflush_r>
 800262e:	2000      	movs	r0, #0
 8002630:	bd38      	pop	{r3, r4, r5, pc}
 8002632:	6865      	ldr	r5, [r4, #4]
 8002634:	e7f2      	b.n	800261c <_fflush_r+0x24>
 8002636:	f7ff fa15 	bl	8001a64 <__sinit>
 800263a:	e7e5      	b.n	8002608 <_fflush_r+0x10>
 800263c:	68a5      	ldr	r5, [r4, #8]
 800263e:	e7ed      	b.n	800261c <_fflush_r+0x24>
 8002640:	0800a918 	.word	0x0800a918
 8002644:	0800a8f8 	.word	0x0800a8f8
 8002648:	0800a8d8 	.word	0x0800a8d8

0800264c <fflush>:
 800264c:	b538      	push	{r3, r4, r5, lr}
 800264e:	b340      	cbz	r0, 80026a2 <fflush+0x56>
 8002650:	6903      	ldr	r3, [r0, #16]
 8002652:	4604      	mov	r4, r0
 8002654:	b1e3      	cbz	r3, 8002690 <fflush+0x44>
 8002656:	4b17      	ldr	r3, [pc, #92]	; (80026b4 <fflush+0x68>)
 8002658:	681d      	ldr	r5, [r3, #0]
 800265a:	b10d      	cbz	r5, 8002660 <fflush+0x14>
 800265c:	69ab      	ldr	r3, [r5, #24]
 800265e:	b1cb      	cbz	r3, 8002694 <fflush+0x48>
 8002660:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <fflush+0x6c>)
 8002662:	429c      	cmp	r4, r3
 8002664:	d00f      	beq.n	8002686 <fflush+0x3a>
 8002666:	4b15      	ldr	r3, [pc, #84]	; (80026bc <fflush+0x70>)
 8002668:	429c      	cmp	r4, r3
 800266a:	d021      	beq.n	80026b0 <fflush+0x64>
 800266c:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <fflush+0x74>)
 800266e:	429c      	cmp	r4, r3
 8002670:	bf08      	it	eq
 8002672:	68ec      	ldreq	r4, [r5, #12]
 8002674:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002678:	b153      	cbz	r3, 8002690 <fflush+0x44>
 800267a:	4621      	mov	r1, r4
 800267c:	4628      	mov	r0, r5
 800267e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002682:	f7ff bf2f 	b.w	80024e4 <__sflush_r>
 8002686:	686c      	ldr	r4, [r5, #4]
 8002688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1f4      	bne.n	800267a <fflush+0x2e>
 8002690:	2000      	movs	r0, #0
 8002692:	bd38      	pop	{r3, r4, r5, pc}
 8002694:	4628      	mov	r0, r5
 8002696:	f7ff f9e5 	bl	8001a64 <__sinit>
 800269a:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <fflush+0x6c>)
 800269c:	429c      	cmp	r4, r3
 800269e:	d1e2      	bne.n	8002666 <fflush+0x1a>
 80026a0:	e7f1      	b.n	8002686 <fflush+0x3a>
 80026a2:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <fflush+0x78>)
 80026a4:	4908      	ldr	r1, [pc, #32]	; (80026c8 <fflush+0x7c>)
 80026a6:	6818      	ldr	r0, [r3, #0]
 80026a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80026ac:	f7ff ba1a 	b.w	8001ae4 <_fwalk_reent>
 80026b0:	68ac      	ldr	r4, [r5, #8]
 80026b2:	e7df      	b.n	8002674 <fflush+0x28>
 80026b4:	20000004 	.word	0x20000004
 80026b8:	0800a918 	.word	0x0800a918
 80026bc:	0800a8f8 	.word	0x0800a8f8
 80026c0:	0800a8d8 	.word	0x0800a8d8
 80026c4:	0800a8d4 	.word	0x0800a8d4
 80026c8:	080025f9 	.word	0x080025f9

080026cc <__sfvwrite_r>:
 80026cc:	6893      	ldr	r3, [r2, #8]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 8085 	beq.w	80027de <__sfvwrite_r+0x112>
 80026d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026d8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 80026dc:	460c      	mov	r4, r1
 80026de:	0719      	lsls	r1, r3, #28
 80026e0:	4680      	mov	r8, r0
 80026e2:	b083      	sub	sp, #12
 80026e4:	4617      	mov	r7, r2
 80026e6:	b298      	uxth	r0, r3
 80026e8:	d525      	bpl.n	8002736 <__sfvwrite_r+0x6a>
 80026ea:	6923      	ldr	r3, [r4, #16]
 80026ec:	b31b      	cbz	r3, 8002736 <__sfvwrite_r+0x6a>
 80026ee:	f010 0302 	ands.w	r3, r0, #2
 80026f2:	683d      	ldr	r5, [r7, #0]
 80026f4:	d02d      	beq.n	8002752 <__sfvwrite_r+0x86>
 80026f6:	f04f 0a00 	mov.w	sl, #0
 80026fa:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 80029b8 <__sfvwrite_r+0x2ec>
 80026fe:	4656      	mov	r6, sl
 8002700:	46b9      	mov	r9, r7
 8002702:	455e      	cmp	r6, fp
 8002704:	4633      	mov	r3, r6
 8002706:	4652      	mov	r2, sl
 8002708:	bf28      	it	cs
 800270a:	465b      	movcs	r3, fp
 800270c:	4640      	mov	r0, r8
 800270e:	2e00      	cmp	r6, #0
 8002710:	d052      	beq.n	80027b8 <__sfvwrite_r+0xec>
 8002712:	6a21      	ldr	r1, [r4, #32]
 8002714:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8002716:	47b8      	blx	r7
 8002718:	2800      	cmp	r0, #0
 800271a:	dd56      	ble.n	80027ca <__sfvwrite_r+0xfe>
 800271c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8002720:	1a1b      	subs	r3, r3, r0
 8002722:	4482      	add	sl, r0
 8002724:	1a36      	subs	r6, r6, r0
 8002726:	f8c9 3008 	str.w	r3, [r9, #8]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1e9      	bne.n	8002702 <__sfvwrite_r+0x36>
 800272e:	2000      	movs	r0, #0
 8002730:	b003      	add	sp, #12
 8002732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002736:	4621      	mov	r1, r4
 8002738:	4640      	mov	r0, r8
 800273a:	f7ff fe3f 	bl	80023bc <__swsetup_r>
 800273e:	2800      	cmp	r0, #0
 8002740:	f040 8136 	bne.w	80029b0 <__sfvwrite_r+0x2e4>
 8002744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002748:	683d      	ldr	r5, [r7, #0]
 800274a:	b298      	uxth	r0, r3
 800274c:	f010 0302 	ands.w	r3, r0, #2
 8002750:	d1d1      	bne.n	80026f6 <__sfvwrite_r+0x2a>
 8002752:	f010 0901 	ands.w	r9, r0, #1
 8002756:	d144      	bne.n	80027e2 <__sfvwrite_r+0x116>
 8002758:	464e      	mov	r6, r9
 800275a:	9700      	str	r7, [sp, #0]
 800275c:	b346      	cbz	r6, 80027b0 <__sfvwrite_r+0xe4>
 800275e:	0582      	lsls	r2, r0, #22
 8002760:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8002764:	f140 8083 	bpl.w	800286e <__sfvwrite_r+0x1a2>
 8002768:	45b3      	cmp	fp, r6
 800276a:	465a      	mov	r2, fp
 800276c:	f200 80b2 	bhi.w	80028d4 <__sfvwrite_r+0x208>
 8002770:	f410 6f90 	tst.w	r0, #1152	; 0x480
 8002774:	f040 80bf 	bne.w	80028f6 <__sfvwrite_r+0x22a>
 8002778:	6820      	ldr	r0, [r4, #0]
 800277a:	9201      	str	r2, [sp, #4]
 800277c:	4649      	mov	r1, r9
 800277e:	f000 fab1 	bl	8002ce4 <memmove>
 8002782:	68a3      	ldr	r3, [r4, #8]
 8002784:	9a01      	ldr	r2, [sp, #4]
 8002786:	eba3 010b 	sub.w	r1, r3, fp
 800278a:	6823      	ldr	r3, [r4, #0]
 800278c:	60a1      	str	r1, [r4, #8]
 800278e:	4413      	add	r3, r2
 8002790:	46b2      	mov	sl, r6
 8002792:	6023      	str	r3, [r4, #0]
 8002794:	2600      	movs	r6, #0
 8002796:	9b00      	ldr	r3, [sp, #0]
 8002798:	6898      	ldr	r0, [r3, #8]
 800279a:	eba0 000a 	sub.w	r0, r0, sl
 800279e:	44d1      	add	r9, sl
 80027a0:	6098      	str	r0, [r3, #8]
 80027a2:	2800      	cmp	r0, #0
 80027a4:	d0c3      	beq.n	800272e <__sfvwrite_r+0x62>
 80027a6:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80027aa:	b280      	uxth	r0, r0
 80027ac:	2e00      	cmp	r6, #0
 80027ae:	d1d6      	bne.n	800275e <__sfvwrite_r+0x92>
 80027b0:	e9d5 9600 	ldrd	r9, r6, [r5]
 80027b4:	3508      	adds	r5, #8
 80027b6:	e7d1      	b.n	800275c <__sfvwrite_r+0x90>
 80027b8:	e9d5 a600 	ldrd	sl, r6, [r5]
 80027bc:	3508      	adds	r5, #8
 80027be:	e7a0      	b.n	8002702 <__sfvwrite_r+0x36>
 80027c0:	4621      	mov	r1, r4
 80027c2:	4640      	mov	r0, r8
 80027c4:	f7ff ff18 	bl	80025f8 <_fflush_r>
 80027c8:	b380      	cbz	r0, 800282c <__sfvwrite_r+0x160>
 80027ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027d6:	81a3      	strh	r3, [r4, #12]
 80027d8:	b003      	add	sp, #12
 80027da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027de:	2000      	movs	r0, #0
 80027e0:	4770      	bx	lr
 80027e2:	461e      	mov	r6, r3
 80027e4:	46aa      	mov	sl, r5
 80027e6:	4699      	mov	r9, r3
 80027e8:	4618      	mov	r0, r3
 80027ea:	461d      	mov	r5, r3
 80027ec:	9700      	str	r7, [sp, #0]
 80027ee:	b356      	cbz	r6, 8002846 <__sfvwrite_r+0x17a>
 80027f0:	b388      	cbz	r0, 8002856 <__sfvwrite_r+0x18a>
 80027f2:	464a      	mov	r2, r9
 80027f4:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
 80027f8:	6820      	ldr	r0, [r4, #0]
 80027fa:	42b2      	cmp	r2, r6
 80027fc:	bf28      	it	cs
 80027fe:	4632      	movcs	r2, r6
 8002800:	4288      	cmp	r0, r1
 8002802:	d905      	bls.n	8002810 <__sfvwrite_r+0x144>
 8002804:	68a1      	ldr	r1, [r4, #8]
 8002806:	eb03 0b01 	add.w	fp, r3, r1
 800280a:	455a      	cmp	r2, fp
 800280c:	f300 80a6 	bgt.w	800295c <__sfvwrite_r+0x290>
 8002810:	4293      	cmp	r3, r2
 8002812:	dc63      	bgt.n	80028dc <__sfvwrite_r+0x210>
 8002814:	6a21      	ldr	r1, [r4, #32]
 8002816:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8002818:	462a      	mov	r2, r5
 800281a:	4640      	mov	r0, r8
 800281c:	47b8      	blx	r7
 800281e:	f1b0 0b00 	subs.w	fp, r0, #0
 8002822:	ddd2      	ble.n	80027ca <__sfvwrite_r+0xfe>
 8002824:	ebb9 090b 	subs.w	r9, r9, fp
 8002828:	d0ca      	beq.n	80027c0 <__sfvwrite_r+0xf4>
 800282a:	2001      	movs	r0, #1
 800282c:	9a00      	ldr	r2, [sp, #0]
 800282e:	6893      	ldr	r3, [r2, #8]
 8002830:	eba3 030b 	sub.w	r3, r3, fp
 8002834:	445d      	add	r5, fp
 8002836:	eba6 060b 	sub.w	r6, r6, fp
 800283a:	6093      	str	r3, [r2, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	f43f af76 	beq.w	800272e <__sfvwrite_r+0x62>
 8002842:	2e00      	cmp	r6, #0
 8002844:	d1d4      	bne.n	80027f0 <__sfvwrite_r+0x124>
 8002846:	f10a 0308 	add.w	r3, sl, #8
 800284a:	e953 5602 	ldrd	r5, r6, [r3, #-8]
 800284e:	469a      	mov	sl, r3
 8002850:	3308      	adds	r3, #8
 8002852:	2e00      	cmp	r6, #0
 8002854:	d0f9      	beq.n	800284a <__sfvwrite_r+0x17e>
 8002856:	4632      	mov	r2, r6
 8002858:	210a      	movs	r1, #10
 800285a:	4628      	mov	r0, r5
 800285c:	f000 f958 	bl	8002b10 <memchr>
 8002860:	2800      	cmp	r0, #0
 8002862:	f000 809c 	beq.w	800299e <__sfvwrite_r+0x2d2>
 8002866:	3001      	adds	r0, #1
 8002868:	eba0 0905 	sub.w	r9, r0, r5
 800286c:	e7c1      	b.n	80027f2 <__sfvwrite_r+0x126>
 800286e:	6820      	ldr	r0, [r4, #0]
 8002870:	6923      	ldr	r3, [r4, #16]
 8002872:	4298      	cmp	r0, r3
 8002874:	d816      	bhi.n	80028a4 <__sfvwrite_r+0x1d8>
 8002876:	6963      	ldr	r3, [r4, #20]
 8002878:	42b3      	cmp	r3, r6
 800287a:	d813      	bhi.n	80028a4 <__sfvwrite_r+0x1d8>
 800287c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002880:	42b2      	cmp	r2, r6
 8002882:	bf28      	it	cs
 8002884:	4632      	movcs	r2, r6
 8002886:	6a21      	ldr	r1, [r4, #32]
 8002888:	fb92 f2f3 	sdiv	r2, r2, r3
 800288c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800288e:	fb02 f303 	mul.w	r3, r2, r3
 8002892:	4640      	mov	r0, r8
 8002894:	464a      	mov	r2, r9
 8002896:	47b8      	blx	r7
 8002898:	f1b0 0a00 	subs.w	sl, r0, #0
 800289c:	dd95      	ble.n	80027ca <__sfvwrite_r+0xfe>
 800289e:	eba6 060a 	sub.w	r6, r6, sl
 80028a2:	e778      	b.n	8002796 <__sfvwrite_r+0xca>
 80028a4:	45b3      	cmp	fp, r6
 80028a6:	46da      	mov	sl, fp
 80028a8:	bf28      	it	cs
 80028aa:	46b2      	movcs	sl, r6
 80028ac:	4652      	mov	r2, sl
 80028ae:	4649      	mov	r1, r9
 80028b0:	f000 fa18 	bl	8002ce4 <memmove>
 80028b4:	68a3      	ldr	r3, [r4, #8]
 80028b6:	6822      	ldr	r2, [r4, #0]
 80028b8:	eba3 030a 	sub.w	r3, r3, sl
 80028bc:	4452      	add	r2, sl
 80028be:	60a3      	str	r3, [r4, #8]
 80028c0:	6022      	str	r2, [r4, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1eb      	bne.n	800289e <__sfvwrite_r+0x1d2>
 80028c6:	4621      	mov	r1, r4
 80028c8:	4640      	mov	r0, r8
 80028ca:	f7ff fe95 	bl	80025f8 <_fflush_r>
 80028ce:	2800      	cmp	r0, #0
 80028d0:	d0e5      	beq.n	800289e <__sfvwrite_r+0x1d2>
 80028d2:	e77a      	b.n	80027ca <__sfvwrite_r+0xfe>
 80028d4:	6820      	ldr	r0, [r4, #0]
 80028d6:	46b3      	mov	fp, r6
 80028d8:	4632      	mov	r2, r6
 80028da:	e74e      	b.n	800277a <__sfvwrite_r+0xae>
 80028dc:	4629      	mov	r1, r5
 80028de:	9201      	str	r2, [sp, #4]
 80028e0:	f000 fa00 	bl	8002ce4 <memmove>
 80028e4:	9a01      	ldr	r2, [sp, #4]
 80028e6:	68a3      	ldr	r3, [r4, #8]
 80028e8:	1a9b      	subs	r3, r3, r2
 80028ea:	60a3      	str	r3, [r4, #8]
 80028ec:	6823      	ldr	r3, [r4, #0]
 80028ee:	4413      	add	r3, r2
 80028f0:	6023      	str	r3, [r4, #0]
 80028f2:	4693      	mov	fp, r2
 80028f4:	e796      	b.n	8002824 <__sfvwrite_r+0x158>
 80028f6:	6823      	ldr	r3, [r4, #0]
 80028f8:	6921      	ldr	r1, [r4, #16]
 80028fa:	eba3 0b01 	sub.w	fp, r3, r1
 80028fe:	6963      	ldr	r3, [r4, #20]
 8002900:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 8002904:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 8002908:	f10b 0301 	add.w	r3, fp, #1
 800290c:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 8002910:	4433      	add	r3, r6
 8002912:	4553      	cmp	r3, sl
 8002914:	4652      	mov	r2, sl
 8002916:	bf84      	itt	hi
 8002918:	469a      	movhi	sl, r3
 800291a:	4652      	movhi	r2, sl
 800291c:	0543      	lsls	r3, r0, #21
 800291e:	d52c      	bpl.n	800297a <__sfvwrite_r+0x2ae>
 8002920:	4611      	mov	r1, r2
 8002922:	4640      	mov	r0, r8
 8002924:	f7fe ff06 	bl	8001734 <_malloc_r>
 8002928:	2800      	cmp	r0, #0
 800292a:	d03b      	beq.n	80029a4 <__sfvwrite_r+0x2d8>
 800292c:	465a      	mov	r2, fp
 800292e:	6921      	ldr	r1, [r4, #16]
 8002930:	9001      	str	r0, [sp, #4]
 8002932:	f000 f93d 	bl	8002bb0 <memcpy>
 8002936:	89a2      	ldrh	r2, [r4, #12]
 8002938:	9b01      	ldr	r3, [sp, #4]
 800293a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800293e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002942:	81a2      	strh	r2, [r4, #12]
 8002944:	eb03 000b 	add.w	r0, r3, fp
 8002948:	6123      	str	r3, [r4, #16]
 800294a:	ebaa 030b 	sub.w	r3, sl, fp
 800294e:	f8c4 a014 	str.w	sl, [r4, #20]
 8002952:	60a3      	str	r3, [r4, #8]
 8002954:	6020      	str	r0, [r4, #0]
 8002956:	46b3      	mov	fp, r6
 8002958:	4632      	mov	r2, r6
 800295a:	e70e      	b.n	800277a <__sfvwrite_r+0xae>
 800295c:	4629      	mov	r1, r5
 800295e:	465a      	mov	r2, fp
 8002960:	f000 f9c0 	bl	8002ce4 <memmove>
 8002964:	6823      	ldr	r3, [r4, #0]
 8002966:	445b      	add	r3, fp
 8002968:	6023      	str	r3, [r4, #0]
 800296a:	4621      	mov	r1, r4
 800296c:	4640      	mov	r0, r8
 800296e:	f7ff fe43 	bl	80025f8 <_fflush_r>
 8002972:	2800      	cmp	r0, #0
 8002974:	f43f af56 	beq.w	8002824 <__sfvwrite_r+0x158>
 8002978:	e727      	b.n	80027ca <__sfvwrite_r+0xfe>
 800297a:	4640      	mov	r0, r8
 800297c:	f000 fa2e 	bl	8002ddc <_realloc_r>
 8002980:	4603      	mov	r3, r0
 8002982:	2800      	cmp	r0, #0
 8002984:	d1de      	bne.n	8002944 <__sfvwrite_r+0x278>
 8002986:	6921      	ldr	r1, [r4, #16]
 8002988:	4640      	mov	r0, r8
 800298a:	f7fe fe71 	bl	8001670 <_free_r>
 800298e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002992:	220c      	movs	r2, #12
 8002994:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002998:	f8c8 2000 	str.w	r2, [r8]
 800299c:	e717      	b.n	80027ce <__sfvwrite_r+0x102>
 800299e:	1c72      	adds	r2, r6, #1
 80029a0:	4691      	mov	r9, r2
 80029a2:	e727      	b.n	80027f4 <__sfvwrite_r+0x128>
 80029a4:	220c      	movs	r2, #12
 80029a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029aa:	f8c8 2000 	str.w	r2, [r8]
 80029ae:	e70e      	b.n	80027ce <__sfvwrite_r+0x102>
 80029b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029b4:	e6bc      	b.n	8002730 <__sfvwrite_r+0x64>
 80029b6:	bf00      	nop
 80029b8:	7ffffc00 	.word	0x7ffffc00

080029bc <_lseek_r>:
 80029bc:	b538      	push	{r3, r4, r5, lr}
 80029be:	460c      	mov	r4, r1
 80029c0:	4d08      	ldr	r5, [pc, #32]	; (80029e4 <_lseek_r+0x28>)
 80029c2:	4684      	mov	ip, r0
 80029c4:	4611      	mov	r1, r2
 80029c6:	4620      	mov	r0, r4
 80029c8:	461a      	mov	r2, r3
 80029ca:	2300      	movs	r3, #0
 80029cc:	602b      	str	r3, [r5, #0]
 80029ce:	4664      	mov	r4, ip
 80029d0:	f7fe fc2e 	bl	8001230 <_lseek>
 80029d4:	1c43      	adds	r3, r0, #1
 80029d6:	d000      	beq.n	80029da <_lseek_r+0x1e>
 80029d8:	bd38      	pop	{r3, r4, r5, pc}
 80029da:	682b      	ldr	r3, [r5, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0fb      	beq.n	80029d8 <_lseek_r+0x1c>
 80029e0:	6023      	str	r3, [r4, #0]
 80029e2:	bd38      	pop	{r3, r4, r5, pc}
 80029e4:	20000214 	.word	0x20000214

080029e8 <__smakebuf_r>:
 80029e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ea:	898b      	ldrh	r3, [r1, #12]
 80029ec:	460c      	mov	r4, r1
 80029ee:	0799      	lsls	r1, r3, #30
 80029f0:	b097      	sub	sp, #92	; 0x5c
 80029f2:	d507      	bpl.n	8002a04 <__smakebuf_r+0x1c>
 80029f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80029f8:	2201      	movs	r2, #1
 80029fa:	e9c4 3204 	strd	r3, r2, [r4, #16]
 80029fe:	6023      	str	r3, [r4, #0]
 8002a00:	b017      	add	sp, #92	; 0x5c
 8002a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a08:	2900      	cmp	r1, #0
 8002a0a:	4605      	mov	r5, r0
 8002a0c:	db2d      	blt.n	8002a6a <__smakebuf_r+0x82>
 8002a0e:	466a      	mov	r2, sp
 8002a10:	f000 fa22 	bl	8002e58 <_fstat_r>
 8002a14:	2800      	cmp	r0, #0
 8002a16:	db27      	blt.n	8002a68 <__smakebuf_r+0x80>
 8002a18:	9e01      	ldr	r6, [sp, #4]
 8002a1a:	f406 4670 	and.w	r6, r6, #61440	; 0xf000
 8002a1e:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8002a22:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
 8002a26:	fab6 f686 	clz	r6, r6
 8002a2a:	4639      	mov	r1, r7
 8002a2c:	4628      	mov	r0, r5
 8002a2e:	0976      	lsrs	r6, r6, #5
 8002a30:	f7fe fe80 	bl	8001734 <_malloc_r>
 8002a34:	b330      	cbz	r0, 8002a84 <__smakebuf_r+0x9c>
 8002a36:	89a3      	ldrh	r3, [r4, #12]
 8002a38:	4a1a      	ldr	r2, [pc, #104]	; (8002aa4 <__smakebuf_r+0xbc>)
 8002a3a:	62aa      	str	r2, [r5, #40]	; 0x28
 8002a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a40:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002a44:	81a3      	strh	r3, [r4, #12]
 8002a46:	6020      	str	r0, [r4, #0]
 8002a48:	2e00      	cmp	r6, #0
 8002a4a:	d0d9      	beq.n	8002a00 <__smakebuf_r+0x18>
 8002a4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a50:	4628      	mov	r0, r5
 8002a52:	f000 fa17 	bl	8002e84 <_isatty_r>
 8002a56:	2800      	cmp	r0, #0
 8002a58:	d0d2      	beq.n	8002a00 <__smakebuf_r+0x18>
 8002a5a:	89a3      	ldrh	r3, [r4, #12]
 8002a5c:	f023 0303 	bic.w	r3, r3, #3
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	81a3      	strh	r3, [r4, #12]
 8002a66:	e7cb      	b.n	8002a00 <__smakebuf_r+0x18>
 8002a68:	89a3      	ldrh	r3, [r4, #12]
 8002a6a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002a6e:	bf14      	ite	ne
 8002a70:	2740      	movne	r7, #64	; 0x40
 8002a72:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 8002a76:	4639      	mov	r1, r7
 8002a78:	4628      	mov	r0, r5
 8002a7a:	2600      	movs	r6, #0
 8002a7c:	f7fe fe5a 	bl	8001734 <_malloc_r>
 8002a80:	2800      	cmp	r0, #0
 8002a82:	d1d8      	bne.n	8002a36 <__smakebuf_r+0x4e>
 8002a84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a88:	059a      	lsls	r2, r3, #22
 8002a8a:	d4b9      	bmi.n	8002a00 <__smakebuf_r+0x18>
 8002a8c:	f023 0303 	bic.w	r3, r3, #3
 8002a90:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002a94:	f043 0302 	orr.w	r3, r3, #2
 8002a98:	2101      	movs	r1, #1
 8002a9a:	e9c4 2104 	strd	r2, r1, [r4, #16]
 8002a9e:	81a3      	strh	r3, [r4, #12]
 8002aa0:	6022      	str	r2, [r4, #0]
 8002aa2:	e7ad      	b.n	8002a00 <__smakebuf_r+0x18>
 8002aa4:	08001871 	.word	0x08001871

08002aa8 <__swhatbuf_r>:
 8002aa8:	b570      	push	{r4, r5, r6, lr}
 8002aaa:	460c      	mov	r4, r1
 8002aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ab0:	2900      	cmp	r1, #0
 8002ab2:	b096      	sub	sp, #88	; 0x58
 8002ab4:	4616      	mov	r6, r2
 8002ab6:	461d      	mov	r5, r3
 8002ab8:	db13      	blt.n	8002ae2 <__swhatbuf_r+0x3a>
 8002aba:	466a      	mov	r2, sp
 8002abc:	f000 f9cc 	bl	8002e58 <_fstat_r>
 8002ac0:	2800      	cmp	r0, #0
 8002ac2:	db0e      	blt.n	8002ae2 <__swhatbuf_r+0x3a>
 8002ac4:	9901      	ldr	r1, [sp, #4]
 8002ac6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002aca:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
 8002ace:	fab1 f181 	clz	r1, r1
 8002ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ad6:	0949      	lsrs	r1, r1, #5
 8002ad8:	2000      	movs	r0, #0
 8002ada:	6029      	str	r1, [r5, #0]
 8002adc:	6033      	str	r3, [r6, #0]
 8002ade:	b016      	add	sp, #88	; 0x58
 8002ae0:	bd70      	pop	{r4, r5, r6, pc}
 8002ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	061b      	lsls	r3, r3, #24
 8002aea:	602a      	str	r2, [r5, #0]
 8002aec:	d504      	bpl.n	8002af8 <__swhatbuf_r+0x50>
 8002aee:	2340      	movs	r3, #64	; 0x40
 8002af0:	2000      	movs	r0, #0
 8002af2:	6033      	str	r3, [r6, #0]
 8002af4:	b016      	add	sp, #88	; 0x58
 8002af6:	bd70      	pop	{r4, r5, r6, pc}
 8002af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002afc:	2000      	movs	r0, #0
 8002afe:	6033      	str	r3, [r6, #0]
 8002b00:	b016      	add	sp, #88	; 0x58
 8002b02:	bd70      	pop	{r4, r5, r6, pc}
	...

08002b10 <memchr>:
 8002b10:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8002b14:	2a10      	cmp	r2, #16
 8002b16:	db2b      	blt.n	8002b70 <memchr+0x60>
 8002b18:	f010 0f07 	tst.w	r0, #7
 8002b1c:	d008      	beq.n	8002b30 <memchr+0x20>
 8002b1e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002b22:	3a01      	subs	r2, #1
 8002b24:	428b      	cmp	r3, r1
 8002b26:	d02d      	beq.n	8002b84 <memchr+0x74>
 8002b28:	f010 0f07 	tst.w	r0, #7
 8002b2c:	b342      	cbz	r2, 8002b80 <memchr+0x70>
 8002b2e:	d1f6      	bne.n	8002b1e <memchr+0xe>
 8002b30:	b4f0      	push	{r4, r5, r6, r7}
 8002b32:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8002b36:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8002b3a:	f022 0407 	bic.w	r4, r2, #7
 8002b3e:	f07f 0700 	mvns.w	r7, #0
 8002b42:	2300      	movs	r3, #0
 8002b44:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8002b48:	3c08      	subs	r4, #8
 8002b4a:	ea85 0501 	eor.w	r5, r5, r1
 8002b4e:	ea86 0601 	eor.w	r6, r6, r1
 8002b52:	fa85 f547 	uadd8	r5, r5, r7
 8002b56:	faa3 f587 	sel	r5, r3, r7
 8002b5a:	fa86 f647 	uadd8	r6, r6, r7
 8002b5e:	faa5 f687 	sel	r6, r5, r7
 8002b62:	b98e      	cbnz	r6, 8002b88 <memchr+0x78>
 8002b64:	d1ee      	bne.n	8002b44 <memchr+0x34>
 8002b66:	bcf0      	pop	{r4, r5, r6, r7}
 8002b68:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8002b6c:	f002 0207 	and.w	r2, r2, #7
 8002b70:	b132      	cbz	r2, 8002b80 <memchr+0x70>
 8002b72:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002b76:	3a01      	subs	r2, #1
 8002b78:	ea83 0301 	eor.w	r3, r3, r1
 8002b7c:	b113      	cbz	r3, 8002b84 <memchr+0x74>
 8002b7e:	d1f8      	bne.n	8002b72 <memchr+0x62>
 8002b80:	2000      	movs	r0, #0
 8002b82:	4770      	bx	lr
 8002b84:	3801      	subs	r0, #1
 8002b86:	4770      	bx	lr
 8002b88:	2d00      	cmp	r5, #0
 8002b8a:	bf06      	itte	eq
 8002b8c:	4635      	moveq	r5, r6
 8002b8e:	3803      	subeq	r0, #3
 8002b90:	3807      	subne	r0, #7
 8002b92:	f015 0f01 	tst.w	r5, #1
 8002b96:	d107      	bne.n	8002ba8 <memchr+0x98>
 8002b98:	3001      	adds	r0, #1
 8002b9a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8002b9e:	bf02      	ittt	eq
 8002ba0:	3001      	addeq	r0, #1
 8002ba2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8002ba6:	3001      	addeq	r0, #1
 8002ba8:	bcf0      	pop	{r4, r5, r6, r7}
 8002baa:	3801      	subs	r0, #1
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop

08002bb0 <memcpy>:
 8002bb0:	4684      	mov	ip, r0
 8002bb2:	ea41 0300 	orr.w	r3, r1, r0
 8002bb6:	f013 0303 	ands.w	r3, r3, #3
 8002bba:	d16d      	bne.n	8002c98 <memcpy+0xe8>
 8002bbc:	3a40      	subs	r2, #64	; 0x40
 8002bbe:	d341      	bcc.n	8002c44 <memcpy+0x94>
 8002bc0:	f851 3b04 	ldr.w	r3, [r1], #4
 8002bc4:	f840 3b04 	str.w	r3, [r0], #4
 8002bc8:	f851 3b04 	ldr.w	r3, [r1], #4
 8002bcc:	f840 3b04 	str.w	r3, [r0], #4
 8002bd0:	f851 3b04 	ldr.w	r3, [r1], #4
 8002bd4:	f840 3b04 	str.w	r3, [r0], #4
 8002bd8:	f851 3b04 	ldr.w	r3, [r1], #4
 8002bdc:	f840 3b04 	str.w	r3, [r0], #4
 8002be0:	f851 3b04 	ldr.w	r3, [r1], #4
 8002be4:	f840 3b04 	str.w	r3, [r0], #4
 8002be8:	f851 3b04 	ldr.w	r3, [r1], #4
 8002bec:	f840 3b04 	str.w	r3, [r0], #4
 8002bf0:	f851 3b04 	ldr.w	r3, [r1], #4
 8002bf4:	f840 3b04 	str.w	r3, [r0], #4
 8002bf8:	f851 3b04 	ldr.w	r3, [r1], #4
 8002bfc:	f840 3b04 	str.w	r3, [r0], #4
 8002c00:	f851 3b04 	ldr.w	r3, [r1], #4
 8002c04:	f840 3b04 	str.w	r3, [r0], #4
 8002c08:	f851 3b04 	ldr.w	r3, [r1], #4
 8002c0c:	f840 3b04 	str.w	r3, [r0], #4
 8002c10:	f851 3b04 	ldr.w	r3, [r1], #4
 8002c14:	f840 3b04 	str.w	r3, [r0], #4
 8002c18:	f851 3b04 	ldr.w	r3, [r1], #4
 8002c1c:	f840 3b04 	str.w	r3, [r0], #4
 8002c20:	f851 3b04 	ldr.w	r3, [r1], #4
 8002c24:	f840 3b04 	str.w	r3, [r0], #4
 8002c28:	f851 3b04 	ldr.w	r3, [r1], #4
 8002c2c:	f840 3b04 	str.w	r3, [r0], #4
 8002c30:	f851 3b04 	ldr.w	r3, [r1], #4
 8002c34:	f840 3b04 	str.w	r3, [r0], #4
 8002c38:	f851 3b04 	ldr.w	r3, [r1], #4
 8002c3c:	f840 3b04 	str.w	r3, [r0], #4
 8002c40:	3a40      	subs	r2, #64	; 0x40
 8002c42:	d2bd      	bcs.n	8002bc0 <memcpy+0x10>
 8002c44:	3230      	adds	r2, #48	; 0x30
 8002c46:	d311      	bcc.n	8002c6c <memcpy+0xbc>
 8002c48:	f851 3b04 	ldr.w	r3, [r1], #4
 8002c4c:	f840 3b04 	str.w	r3, [r0], #4
 8002c50:	f851 3b04 	ldr.w	r3, [r1], #4
 8002c54:	f840 3b04 	str.w	r3, [r0], #4
 8002c58:	f851 3b04 	ldr.w	r3, [r1], #4
 8002c5c:	f840 3b04 	str.w	r3, [r0], #4
 8002c60:	f851 3b04 	ldr.w	r3, [r1], #4
 8002c64:	f840 3b04 	str.w	r3, [r0], #4
 8002c68:	3a10      	subs	r2, #16
 8002c6a:	d2ed      	bcs.n	8002c48 <memcpy+0x98>
 8002c6c:	320c      	adds	r2, #12
 8002c6e:	d305      	bcc.n	8002c7c <memcpy+0xcc>
 8002c70:	f851 3b04 	ldr.w	r3, [r1], #4
 8002c74:	f840 3b04 	str.w	r3, [r0], #4
 8002c78:	3a04      	subs	r2, #4
 8002c7a:	d2f9      	bcs.n	8002c70 <memcpy+0xc0>
 8002c7c:	3204      	adds	r2, #4
 8002c7e:	d008      	beq.n	8002c92 <memcpy+0xe2>
 8002c80:	07d2      	lsls	r2, r2, #31
 8002c82:	bf1c      	itt	ne
 8002c84:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8002c88:	f800 3b01 	strbne.w	r3, [r0], #1
 8002c8c:	d301      	bcc.n	8002c92 <memcpy+0xe2>
 8002c8e:	880b      	ldrh	r3, [r1, #0]
 8002c90:	8003      	strh	r3, [r0, #0]
 8002c92:	4660      	mov	r0, ip
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	2a08      	cmp	r2, #8
 8002c9a:	d313      	bcc.n	8002cc4 <memcpy+0x114>
 8002c9c:	078b      	lsls	r3, r1, #30
 8002c9e:	d08d      	beq.n	8002bbc <memcpy+0xc>
 8002ca0:	f010 0303 	ands.w	r3, r0, #3
 8002ca4:	d08a      	beq.n	8002bbc <memcpy+0xc>
 8002ca6:	f1c3 0304 	rsb	r3, r3, #4
 8002caa:	1ad2      	subs	r2, r2, r3
 8002cac:	07db      	lsls	r3, r3, #31
 8002cae:	bf1c      	itt	ne
 8002cb0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8002cb4:	f800 3b01 	strbne.w	r3, [r0], #1
 8002cb8:	d380      	bcc.n	8002bbc <memcpy+0xc>
 8002cba:	f831 3b02 	ldrh.w	r3, [r1], #2
 8002cbe:	f820 3b02 	strh.w	r3, [r0], #2
 8002cc2:	e77b      	b.n	8002bbc <memcpy+0xc>
 8002cc4:	3a04      	subs	r2, #4
 8002cc6:	d3d9      	bcc.n	8002c7c <memcpy+0xcc>
 8002cc8:	3a01      	subs	r2, #1
 8002cca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002cce:	f800 3b01 	strb.w	r3, [r0], #1
 8002cd2:	d2f9      	bcs.n	8002cc8 <memcpy+0x118>
 8002cd4:	780b      	ldrb	r3, [r1, #0]
 8002cd6:	7003      	strb	r3, [r0, #0]
 8002cd8:	784b      	ldrb	r3, [r1, #1]
 8002cda:	7043      	strb	r3, [r0, #1]
 8002cdc:	788b      	ldrb	r3, [r1, #2]
 8002cde:	7083      	strb	r3, [r0, #2]
 8002ce0:	4660      	mov	r0, ip
 8002ce2:	4770      	bx	lr

08002ce4 <memmove>:
 8002ce4:	4288      	cmp	r0, r1
 8002ce6:	d90d      	bls.n	8002d04 <memmove+0x20>
 8002ce8:	188b      	adds	r3, r1, r2
 8002cea:	4283      	cmp	r3, r0
 8002cec:	d90a      	bls.n	8002d04 <memmove+0x20>
 8002cee:	eb00 0c02 	add.w	ip, r0, r2
 8002cf2:	b1ba      	cbz	r2, 8002d24 <memmove+0x40>
 8002cf4:	4662      	mov	r2, ip
 8002cf6:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 8002cfa:	f802 cd01 	strb.w	ip, [r2, #-1]!
 8002cfe:	4299      	cmp	r1, r3
 8002d00:	d1f9      	bne.n	8002cf6 <memmove+0x12>
 8002d02:	4770      	bx	lr
 8002d04:	2a0f      	cmp	r2, #15
 8002d06:	d80e      	bhi.n	8002d26 <memmove+0x42>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8002d0e:	b14a      	cbz	r2, 8002d24 <memmove+0x40>
 8002d10:	f10c 0c01 	add.w	ip, ip, #1
 8002d14:	3b01      	subs	r3, #1
 8002d16:	448c      	add	ip, r1
 8002d18:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d1c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002d20:	4561      	cmp	r1, ip
 8002d22:	d1f9      	bne.n	8002d18 <memmove+0x34>
 8002d24:	4770      	bx	lr
 8002d26:	ea40 0301 	orr.w	r3, r0, r1
 8002d2a:	079b      	lsls	r3, r3, #30
 8002d2c:	d150      	bne.n	8002dd0 <memmove+0xec>
 8002d2e:	f1a2 0310 	sub.w	r3, r2, #16
 8002d32:	b570      	push	{r4, r5, r6, lr}
 8002d34:	f101 0c20 	add.w	ip, r1, #32
 8002d38:	f023 050f 	bic.w	r5, r3, #15
 8002d3c:	f101 0e10 	add.w	lr, r1, #16
 8002d40:	f100 0410 	add.w	r4, r0, #16
 8002d44:	44ac      	add	ip, r5
 8002d46:	091b      	lsrs	r3, r3, #4
 8002d48:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 8002d4c:	f844 5c10 	str.w	r5, [r4, #-16]
 8002d50:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
 8002d54:	f844 5c0c 	str.w	r5, [r4, #-12]
 8002d58:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 8002d5c:	f844 5c08 	str.w	r5, [r4, #-8]
 8002d60:	f85e 5c04 	ldr.w	r5, [lr, #-4]
 8002d64:	f844 5c04 	str.w	r5, [r4, #-4]
 8002d68:	f10e 0e10 	add.w	lr, lr, #16
 8002d6c:	45e6      	cmp	lr, ip
 8002d6e:	f104 0410 	add.w	r4, r4, #16
 8002d72:	d1e9      	bne.n	8002d48 <memmove+0x64>
 8002d74:	3301      	adds	r3, #1
 8002d76:	f012 0f0c 	tst.w	r2, #12
 8002d7a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8002d7e:	f002 040f 	and.w	r4, r2, #15
 8002d82:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8002d86:	d027      	beq.n	8002dd8 <memmove+0xf4>
 8002d88:	3c04      	subs	r4, #4
 8002d8a:	f024 0603 	bic.w	r6, r4, #3
 8002d8e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 8002d92:	441e      	add	r6, r3
 8002d94:	1f1c      	subs	r4, r3, #4
 8002d96:	468e      	mov	lr, r1
 8002d98:	f85e 5b04 	ldr.w	r5, [lr], #4
 8002d9c:	f844 5f04 	str.w	r5, [r4, #4]!
 8002da0:	42b4      	cmp	r4, r6
 8002da2:	d1f9      	bne.n	8002d98 <memmove+0xb4>
 8002da4:	f10c 0401 	add.w	r4, ip, #1
 8002da8:	f002 0203 	and.w	r2, r2, #3
 8002dac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002db0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8002db4:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8002db8:	b14a      	cbz	r2, 8002dce <memmove+0xea>
 8002dba:	f10c 0c01 	add.w	ip, ip, #1
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	448c      	add	ip, r1
 8002dc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002dc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002dca:	4561      	cmp	r1, ip
 8002dcc:	d1f9      	bne.n	8002dc2 <memmove+0xde>
 8002dce:	bd70      	pop	{r4, r5, r6, pc}
 8002dd0:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	e79b      	b.n	8002d10 <memmove+0x2c>
 8002dd8:	4622      	mov	r2, r4
 8002dda:	e7eb      	b.n	8002db4 <memmove+0xd0>

08002ddc <_realloc_r>:
 8002ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dde:	4614      	mov	r4, r2
 8002de0:	b1f9      	cbz	r1, 8002e22 <_realloc_r+0x46>
 8002de2:	b1ca      	cbz	r2, 8002e18 <_realloc_r+0x3c>
 8002de4:	4606      	mov	r6, r0
 8002de6:	460d      	mov	r5, r1
 8002de8:	f000 f85e 	bl	8002ea8 <_malloc_usable_size_r>
 8002dec:	42a0      	cmp	r0, r4
 8002dee:	d302      	bcc.n	8002df6 <_realloc_r+0x1a>
 8002df0:	462f      	mov	r7, r5
 8002df2:	4638      	mov	r0, r7
 8002df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002df6:	4621      	mov	r1, r4
 8002df8:	4630      	mov	r0, r6
 8002dfa:	f7fe fc9b 	bl	8001734 <_malloc_r>
 8002dfe:	4607      	mov	r7, r0
 8002e00:	2800      	cmp	r0, #0
 8002e02:	d0f6      	beq.n	8002df2 <_realloc_r+0x16>
 8002e04:	4622      	mov	r2, r4
 8002e06:	4629      	mov	r1, r5
 8002e08:	f7ff fed2 	bl	8002bb0 <memcpy>
 8002e0c:	4630      	mov	r0, r6
 8002e0e:	4629      	mov	r1, r5
 8002e10:	f7fe fc2e 	bl	8001670 <_free_r>
 8002e14:	4638      	mov	r0, r7
 8002e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e18:	4627      	mov	r7, r4
 8002e1a:	f7fe fc29 	bl	8001670 <_free_r>
 8002e1e:	4638      	mov	r0, r7
 8002e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002e26:	4611      	mov	r1, r2
 8002e28:	f7fe bc84 	b.w	8001734 <_malloc_r>

08002e2c <_read_r>:
 8002e2c:	b538      	push	{r3, r4, r5, lr}
 8002e2e:	460c      	mov	r4, r1
 8002e30:	4d08      	ldr	r5, [pc, #32]	; (8002e54 <_read_r+0x28>)
 8002e32:	4684      	mov	ip, r0
 8002e34:	4611      	mov	r1, r2
 8002e36:	4620      	mov	r0, r4
 8002e38:	461a      	mov	r2, r3
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	602b      	str	r3, [r5, #0]
 8002e3e:	4664      	mov	r4, ip
 8002e40:	f7fe f9a8 	bl	8001194 <_read>
 8002e44:	1c43      	adds	r3, r0, #1
 8002e46:	d000      	beq.n	8002e4a <_read_r+0x1e>
 8002e48:	bd38      	pop	{r3, r4, r5, pc}
 8002e4a:	682b      	ldr	r3, [r5, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0fb      	beq.n	8002e48 <_read_r+0x1c>
 8002e50:	6023      	str	r3, [r4, #0]
 8002e52:	bd38      	pop	{r3, r4, r5, pc}
 8002e54:	20000214 	.word	0x20000214

08002e58 <_fstat_r>:
 8002e58:	b570      	push	{r4, r5, r6, lr}
 8002e5a:	460c      	mov	r4, r1
 8002e5c:	4d08      	ldr	r5, [pc, #32]	; (8002e80 <_fstat_r+0x28>)
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2600      	movs	r6, #0
 8002e62:	4620      	mov	r0, r4
 8002e64:	4611      	mov	r1, r2
 8002e66:	461c      	mov	r4, r3
 8002e68:	602e      	str	r6, [r5, #0]
 8002e6a:	f7fe f9d1 	bl	8001210 <_fstat>
 8002e6e:	1c43      	adds	r3, r0, #1
 8002e70:	d000      	beq.n	8002e74 <_fstat_r+0x1c>
 8002e72:	bd70      	pop	{r4, r5, r6, pc}
 8002e74:	682b      	ldr	r3, [r5, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0fb      	beq.n	8002e72 <_fstat_r+0x1a>
 8002e7a:	6023      	str	r3, [r4, #0]
 8002e7c:	bd70      	pop	{r4, r5, r6, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000214 	.word	0x20000214

08002e84 <_isatty_r>:
 8002e84:	b538      	push	{r3, r4, r5, lr}
 8002e86:	4d07      	ldr	r5, [pc, #28]	; (8002ea4 <_isatty_r+0x20>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	4604      	mov	r4, r0
 8002e8c:	4608      	mov	r0, r1
 8002e8e:	602a      	str	r2, [r5, #0]
 8002e90:	f7fe f9c8 	bl	8001224 <_isatty>
 8002e94:	1c43      	adds	r3, r0, #1
 8002e96:	d000      	beq.n	8002e9a <_isatty_r+0x16>
 8002e98:	bd38      	pop	{r3, r4, r5, pc}
 8002e9a:	682b      	ldr	r3, [r5, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0fb      	beq.n	8002e98 <_isatty_r+0x14>
 8002ea0:	6023      	str	r3, [r4, #0]
 8002ea2:	bd38      	pop	{r3, r4, r5, pc}
 8002ea4:	20000214 	.word	0x20000214

08002ea8 <_malloc_usable_size_r>:
 8002ea8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002eac:	2800      	cmp	r0, #0
 8002eae:	f1a0 0004 	sub.w	r0, r0, #4
 8002eb2:	bfbc      	itt	lt
 8002eb4:	580b      	ldrlt	r3, [r1, r0]
 8002eb6:	18c0      	addlt	r0, r0, r3
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop

08002ebc <__aeabi_uldivmod>:
 8002ebc:	b953      	cbnz	r3, 8002ed4 <__aeabi_uldivmod+0x18>
 8002ebe:	b94a      	cbnz	r2, 8002ed4 <__aeabi_uldivmod+0x18>
 8002ec0:	2900      	cmp	r1, #0
 8002ec2:	bf08      	it	eq
 8002ec4:	2800      	cmpeq	r0, #0
 8002ec6:	bf1c      	itt	ne
 8002ec8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8002ecc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8002ed0:	f000 b974 	b.w	80031bc <__aeabi_idiv0>
 8002ed4:	f1ad 0c08 	sub.w	ip, sp, #8
 8002ed8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8002edc:	f000 f806 	bl	8002eec <__udivmoddi4>
 8002ee0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8002ee4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002ee8:	b004      	add	sp, #16
 8002eea:	4770      	bx	lr

08002eec <__udivmoddi4>:
 8002eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ef0:	9d08      	ldr	r5, [sp, #32]
 8002ef2:	4604      	mov	r4, r0
 8002ef4:	468e      	mov	lr, r1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d14d      	bne.n	8002f96 <__udivmoddi4+0xaa>
 8002efa:	428a      	cmp	r2, r1
 8002efc:	4694      	mov	ip, r2
 8002efe:	d969      	bls.n	8002fd4 <__udivmoddi4+0xe8>
 8002f00:	fab2 f282 	clz	r2, r2
 8002f04:	b152      	cbz	r2, 8002f1c <__udivmoddi4+0x30>
 8002f06:	fa01 f302 	lsl.w	r3, r1, r2
 8002f0a:	f1c2 0120 	rsb	r1, r2, #32
 8002f0e:	fa20 f101 	lsr.w	r1, r0, r1
 8002f12:	fa0c fc02 	lsl.w	ip, ip, r2
 8002f16:	ea41 0e03 	orr.w	lr, r1, r3
 8002f1a:	4094      	lsls	r4, r2
 8002f1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8002f20:	0c21      	lsrs	r1, r4, #16
 8002f22:	fbbe f6f8 	udiv	r6, lr, r8
 8002f26:	fa1f f78c 	uxth.w	r7, ip
 8002f2a:	fb08 e316 	mls	r3, r8, r6, lr
 8002f2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8002f32:	fb06 f107 	mul.w	r1, r6, r7
 8002f36:	4299      	cmp	r1, r3
 8002f38:	d90a      	bls.n	8002f50 <__udivmoddi4+0x64>
 8002f3a:	eb1c 0303 	adds.w	r3, ip, r3
 8002f3e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8002f42:	f080 811f 	bcs.w	8003184 <__udivmoddi4+0x298>
 8002f46:	4299      	cmp	r1, r3
 8002f48:	f240 811c 	bls.w	8003184 <__udivmoddi4+0x298>
 8002f4c:	3e02      	subs	r6, #2
 8002f4e:	4463      	add	r3, ip
 8002f50:	1a5b      	subs	r3, r3, r1
 8002f52:	b2a4      	uxth	r4, r4
 8002f54:	fbb3 f0f8 	udiv	r0, r3, r8
 8002f58:	fb08 3310 	mls	r3, r8, r0, r3
 8002f5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8002f60:	fb00 f707 	mul.w	r7, r0, r7
 8002f64:	42a7      	cmp	r7, r4
 8002f66:	d90a      	bls.n	8002f7e <__udivmoddi4+0x92>
 8002f68:	eb1c 0404 	adds.w	r4, ip, r4
 8002f6c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002f70:	f080 810a 	bcs.w	8003188 <__udivmoddi4+0x29c>
 8002f74:	42a7      	cmp	r7, r4
 8002f76:	f240 8107 	bls.w	8003188 <__udivmoddi4+0x29c>
 8002f7a:	4464      	add	r4, ip
 8002f7c:	3802      	subs	r0, #2
 8002f7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8002f82:	1be4      	subs	r4, r4, r7
 8002f84:	2600      	movs	r6, #0
 8002f86:	b11d      	cbz	r5, 8002f90 <__udivmoddi4+0xa4>
 8002f88:	40d4      	lsrs	r4, r2
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e9c5 4300 	strd	r4, r3, [r5]
 8002f90:	4631      	mov	r1, r6
 8002f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f96:	428b      	cmp	r3, r1
 8002f98:	d909      	bls.n	8002fae <__udivmoddi4+0xc2>
 8002f9a:	2d00      	cmp	r5, #0
 8002f9c:	f000 80ef 	beq.w	800317e <__udivmoddi4+0x292>
 8002fa0:	2600      	movs	r6, #0
 8002fa2:	e9c5 0100 	strd	r0, r1, [r5]
 8002fa6:	4630      	mov	r0, r6
 8002fa8:	4631      	mov	r1, r6
 8002faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fae:	fab3 f683 	clz	r6, r3
 8002fb2:	2e00      	cmp	r6, #0
 8002fb4:	d14a      	bne.n	800304c <__udivmoddi4+0x160>
 8002fb6:	428b      	cmp	r3, r1
 8002fb8:	d302      	bcc.n	8002fc0 <__udivmoddi4+0xd4>
 8002fba:	4282      	cmp	r2, r0
 8002fbc:	f200 80f9 	bhi.w	80031b2 <__udivmoddi4+0x2c6>
 8002fc0:	1a84      	subs	r4, r0, r2
 8002fc2:	eb61 0303 	sbc.w	r3, r1, r3
 8002fc6:	2001      	movs	r0, #1
 8002fc8:	469e      	mov	lr, r3
 8002fca:	2d00      	cmp	r5, #0
 8002fcc:	d0e0      	beq.n	8002f90 <__udivmoddi4+0xa4>
 8002fce:	e9c5 4e00 	strd	r4, lr, [r5]
 8002fd2:	e7dd      	b.n	8002f90 <__udivmoddi4+0xa4>
 8002fd4:	b902      	cbnz	r2, 8002fd8 <__udivmoddi4+0xec>
 8002fd6:	deff      	udf	#255	; 0xff
 8002fd8:	fab2 f282 	clz	r2, r2
 8002fdc:	2a00      	cmp	r2, #0
 8002fde:	f040 8092 	bne.w	8003106 <__udivmoddi4+0x21a>
 8002fe2:	eba1 010c 	sub.w	r1, r1, ip
 8002fe6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8002fea:	fa1f fe8c 	uxth.w	lr, ip
 8002fee:	2601      	movs	r6, #1
 8002ff0:	0c20      	lsrs	r0, r4, #16
 8002ff2:	fbb1 f3f7 	udiv	r3, r1, r7
 8002ff6:	fb07 1113 	mls	r1, r7, r3, r1
 8002ffa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8002ffe:	fb0e f003 	mul.w	r0, lr, r3
 8003002:	4288      	cmp	r0, r1
 8003004:	d908      	bls.n	8003018 <__udivmoddi4+0x12c>
 8003006:	eb1c 0101 	adds.w	r1, ip, r1
 800300a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800300e:	d202      	bcs.n	8003016 <__udivmoddi4+0x12a>
 8003010:	4288      	cmp	r0, r1
 8003012:	f200 80cb 	bhi.w	80031ac <__udivmoddi4+0x2c0>
 8003016:	4643      	mov	r3, r8
 8003018:	1a09      	subs	r1, r1, r0
 800301a:	b2a4      	uxth	r4, r4
 800301c:	fbb1 f0f7 	udiv	r0, r1, r7
 8003020:	fb07 1110 	mls	r1, r7, r0, r1
 8003024:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8003028:	fb0e fe00 	mul.w	lr, lr, r0
 800302c:	45a6      	cmp	lr, r4
 800302e:	d908      	bls.n	8003042 <__udivmoddi4+0x156>
 8003030:	eb1c 0404 	adds.w	r4, ip, r4
 8003034:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8003038:	d202      	bcs.n	8003040 <__udivmoddi4+0x154>
 800303a:	45a6      	cmp	lr, r4
 800303c:	f200 80bb 	bhi.w	80031b6 <__udivmoddi4+0x2ca>
 8003040:	4608      	mov	r0, r1
 8003042:	eba4 040e 	sub.w	r4, r4, lr
 8003046:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800304a:	e79c      	b.n	8002f86 <__udivmoddi4+0x9a>
 800304c:	f1c6 0720 	rsb	r7, r6, #32
 8003050:	40b3      	lsls	r3, r6
 8003052:	fa22 fc07 	lsr.w	ip, r2, r7
 8003056:	ea4c 0c03 	orr.w	ip, ip, r3
 800305a:	fa20 f407 	lsr.w	r4, r0, r7
 800305e:	fa01 f306 	lsl.w	r3, r1, r6
 8003062:	431c      	orrs	r4, r3
 8003064:	40f9      	lsrs	r1, r7
 8003066:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800306a:	fa00 f306 	lsl.w	r3, r0, r6
 800306e:	fbb1 f8f9 	udiv	r8, r1, r9
 8003072:	0c20      	lsrs	r0, r4, #16
 8003074:	fa1f fe8c 	uxth.w	lr, ip
 8003078:	fb09 1118 	mls	r1, r9, r8, r1
 800307c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8003080:	fb08 f00e 	mul.w	r0, r8, lr
 8003084:	4288      	cmp	r0, r1
 8003086:	fa02 f206 	lsl.w	r2, r2, r6
 800308a:	d90b      	bls.n	80030a4 <__udivmoddi4+0x1b8>
 800308c:	eb1c 0101 	adds.w	r1, ip, r1
 8003090:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8003094:	f080 8088 	bcs.w	80031a8 <__udivmoddi4+0x2bc>
 8003098:	4288      	cmp	r0, r1
 800309a:	f240 8085 	bls.w	80031a8 <__udivmoddi4+0x2bc>
 800309e:	f1a8 0802 	sub.w	r8, r8, #2
 80030a2:	4461      	add	r1, ip
 80030a4:	1a09      	subs	r1, r1, r0
 80030a6:	b2a4      	uxth	r4, r4
 80030a8:	fbb1 f0f9 	udiv	r0, r1, r9
 80030ac:	fb09 1110 	mls	r1, r9, r0, r1
 80030b0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80030b4:	fb00 fe0e 	mul.w	lr, r0, lr
 80030b8:	458e      	cmp	lr, r1
 80030ba:	d908      	bls.n	80030ce <__udivmoddi4+0x1e2>
 80030bc:	eb1c 0101 	adds.w	r1, ip, r1
 80030c0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80030c4:	d26c      	bcs.n	80031a0 <__udivmoddi4+0x2b4>
 80030c6:	458e      	cmp	lr, r1
 80030c8:	d96a      	bls.n	80031a0 <__udivmoddi4+0x2b4>
 80030ca:	3802      	subs	r0, #2
 80030cc:	4461      	add	r1, ip
 80030ce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80030d2:	fba0 9402 	umull	r9, r4, r0, r2
 80030d6:	eba1 010e 	sub.w	r1, r1, lr
 80030da:	42a1      	cmp	r1, r4
 80030dc:	46c8      	mov	r8, r9
 80030de:	46a6      	mov	lr, r4
 80030e0:	d356      	bcc.n	8003190 <__udivmoddi4+0x2a4>
 80030e2:	d053      	beq.n	800318c <__udivmoddi4+0x2a0>
 80030e4:	b15d      	cbz	r5, 80030fe <__udivmoddi4+0x212>
 80030e6:	ebb3 0208 	subs.w	r2, r3, r8
 80030ea:	eb61 010e 	sbc.w	r1, r1, lr
 80030ee:	fa01 f707 	lsl.w	r7, r1, r7
 80030f2:	fa22 f306 	lsr.w	r3, r2, r6
 80030f6:	40f1      	lsrs	r1, r6
 80030f8:	431f      	orrs	r7, r3
 80030fa:	e9c5 7100 	strd	r7, r1, [r5]
 80030fe:	2600      	movs	r6, #0
 8003100:	4631      	mov	r1, r6
 8003102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003106:	f1c2 0320 	rsb	r3, r2, #32
 800310a:	40d8      	lsrs	r0, r3
 800310c:	fa0c fc02 	lsl.w	ip, ip, r2
 8003110:	fa21 f303 	lsr.w	r3, r1, r3
 8003114:	4091      	lsls	r1, r2
 8003116:	4301      	orrs	r1, r0
 8003118:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800311c:	fa1f fe8c 	uxth.w	lr, ip
 8003120:	fbb3 f0f7 	udiv	r0, r3, r7
 8003124:	fb07 3610 	mls	r6, r7, r0, r3
 8003128:	0c0b      	lsrs	r3, r1, #16
 800312a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800312e:	fb00 f60e 	mul.w	r6, r0, lr
 8003132:	429e      	cmp	r6, r3
 8003134:	fa04 f402 	lsl.w	r4, r4, r2
 8003138:	d908      	bls.n	800314c <__udivmoddi4+0x260>
 800313a:	eb1c 0303 	adds.w	r3, ip, r3
 800313e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8003142:	d22f      	bcs.n	80031a4 <__udivmoddi4+0x2b8>
 8003144:	429e      	cmp	r6, r3
 8003146:	d92d      	bls.n	80031a4 <__udivmoddi4+0x2b8>
 8003148:	3802      	subs	r0, #2
 800314a:	4463      	add	r3, ip
 800314c:	1b9b      	subs	r3, r3, r6
 800314e:	b289      	uxth	r1, r1
 8003150:	fbb3 f6f7 	udiv	r6, r3, r7
 8003154:	fb07 3316 	mls	r3, r7, r6, r3
 8003158:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800315c:	fb06 f30e 	mul.w	r3, r6, lr
 8003160:	428b      	cmp	r3, r1
 8003162:	d908      	bls.n	8003176 <__udivmoddi4+0x28a>
 8003164:	eb1c 0101 	adds.w	r1, ip, r1
 8003168:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800316c:	d216      	bcs.n	800319c <__udivmoddi4+0x2b0>
 800316e:	428b      	cmp	r3, r1
 8003170:	d914      	bls.n	800319c <__udivmoddi4+0x2b0>
 8003172:	3e02      	subs	r6, #2
 8003174:	4461      	add	r1, ip
 8003176:	1ac9      	subs	r1, r1, r3
 8003178:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800317c:	e738      	b.n	8002ff0 <__udivmoddi4+0x104>
 800317e:	462e      	mov	r6, r5
 8003180:	4628      	mov	r0, r5
 8003182:	e705      	b.n	8002f90 <__udivmoddi4+0xa4>
 8003184:	4606      	mov	r6, r0
 8003186:	e6e3      	b.n	8002f50 <__udivmoddi4+0x64>
 8003188:	4618      	mov	r0, r3
 800318a:	e6f8      	b.n	8002f7e <__udivmoddi4+0x92>
 800318c:	454b      	cmp	r3, r9
 800318e:	d2a9      	bcs.n	80030e4 <__udivmoddi4+0x1f8>
 8003190:	ebb9 0802 	subs.w	r8, r9, r2
 8003194:	eb64 0e0c 	sbc.w	lr, r4, ip
 8003198:	3801      	subs	r0, #1
 800319a:	e7a3      	b.n	80030e4 <__udivmoddi4+0x1f8>
 800319c:	4646      	mov	r6, r8
 800319e:	e7ea      	b.n	8003176 <__udivmoddi4+0x28a>
 80031a0:	4620      	mov	r0, r4
 80031a2:	e794      	b.n	80030ce <__udivmoddi4+0x1e2>
 80031a4:	4640      	mov	r0, r8
 80031a6:	e7d1      	b.n	800314c <__udivmoddi4+0x260>
 80031a8:	46d0      	mov	r8, sl
 80031aa:	e77b      	b.n	80030a4 <__udivmoddi4+0x1b8>
 80031ac:	3b02      	subs	r3, #2
 80031ae:	4461      	add	r1, ip
 80031b0:	e732      	b.n	8003018 <__udivmoddi4+0x12c>
 80031b2:	4630      	mov	r0, r6
 80031b4:	e709      	b.n	8002fca <__udivmoddi4+0xde>
 80031b6:	4464      	add	r4, ip
 80031b8:	3802      	subs	r0, #2
 80031ba:	e742      	b.n	8003042 <__udivmoddi4+0x156>

080031bc <__aeabi_idiv0>:
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop

080031c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80031c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031c4:	480d      	ldr	r0, [pc, #52]	; (80031fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031c6:	490e      	ldr	r1, [pc, #56]	; (8003200 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031c8:	4a0e      	ldr	r2, [pc, #56]	; (8003204 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031cc:	e002      	b.n	80031d4 <LoopCopyDataInit>

080031ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031d2:	3304      	adds	r3, #4

080031d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031d8:	d3f9      	bcc.n	80031ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031da:	4a0b      	ldr	r2, [pc, #44]	; (8003208 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031dc:	4c0b      	ldr	r4, [pc, #44]	; (800320c <LoopFillZerobss+0x26>)
  movs r3, #0
 80031de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031e0:	e001      	b.n	80031e6 <LoopFillZerobss>

080031e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031e4:	3204      	adds	r2, #4

080031e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031e8:	d3fb      	bcc.n	80031e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031ea:	f7fe f8c3 	bl	8001374 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031ee:	f7fe f9b9 	bl	8001564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031f2:	f7fd f991 	bl	8000518 <main>
  bx  lr    
 80031f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80031f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003200:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8003204:	0800a998 	.word	0x0800a998
  ldr r2, =_sbss
 8003208:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800320c:	200008fc 	.word	0x200008fc

08003210 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003210:	e7fe      	b.n	8003210 <ADC_IRQHandler>
	...

08003214 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003218:	4b0e      	ldr	r3, [pc, #56]	; (8003254 <HAL_Init+0x40>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a0d      	ldr	r2, [pc, #52]	; (8003254 <HAL_Init+0x40>)
 800321e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003222:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003224:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <HAL_Init+0x40>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a0a      	ldr	r2, [pc, #40]	; (8003254 <HAL_Init+0x40>)
 800322a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800322e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003230:	4b08      	ldr	r3, [pc, #32]	; (8003254 <HAL_Init+0x40>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a07      	ldr	r2, [pc, #28]	; (8003254 <HAL_Init+0x40>)
 8003236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800323a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800323c:	2003      	movs	r0, #3
 800323e:	f000 f94f 	bl	80034e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003242:	2000      	movs	r0, #0
 8003244:	f000 f808 	bl	8003258 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003248:	f7fd fd5a 	bl	8000d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40023c00 	.word	0x40023c00

08003258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003260:	4b12      	ldr	r3, [pc, #72]	; (80032ac <HAL_InitTick+0x54>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <HAL_InitTick+0x58>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	4619      	mov	r1, r3
 800326a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800326e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003272:	fbb2 f3f3 	udiv	r3, r2, r3
 8003276:	4618      	mov	r0, r3
 8003278:	f000 f967 	bl	800354a <HAL_SYSTICK_Config>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e00e      	b.n	80032a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b0f      	cmp	r3, #15
 800328a:	d80a      	bhi.n	80032a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800328c:	2200      	movs	r2, #0
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003294:	f000 f92f 	bl	80034f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003298:	4a06      	ldr	r2, [pc, #24]	; (80032b4 <HAL_InitTick+0x5c>)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	e000      	b.n	80032a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	20000000 	.word	0x20000000
 80032b0:	2000006c 	.word	0x2000006c
 80032b4:	20000068 	.word	0x20000068

080032b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032bc:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <HAL_IncTick+0x20>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	461a      	mov	r2, r3
 80032c2:	4b06      	ldr	r3, [pc, #24]	; (80032dc <HAL_IncTick+0x24>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4413      	add	r3, r2
 80032c8:	4a04      	ldr	r2, [pc, #16]	; (80032dc <HAL_IncTick+0x24>)
 80032ca:	6013      	str	r3, [r2, #0]
}
 80032cc:	bf00      	nop
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	2000006c 	.word	0x2000006c
 80032dc:	20000218 	.word	0x20000218

080032e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  return uwTick;
 80032e4:	4b03      	ldr	r3, [pc, #12]	; (80032f4 <HAL_GetTick+0x14>)
 80032e6:	681b      	ldr	r3, [r3, #0]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	20000218 	.word	0x20000218

080032f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003300:	f7ff ffee 	bl	80032e0 <HAL_GetTick>
 8003304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003310:	d005      	beq.n	800331e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003312:	4b0a      	ldr	r3, [pc, #40]	; (800333c <HAL_Delay+0x44>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	461a      	mov	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4413      	add	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800331e:	bf00      	nop
 8003320:	f7ff ffde 	bl	80032e0 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	429a      	cmp	r2, r3
 800332e:	d8f7      	bhi.n	8003320 <HAL_Delay+0x28>
  {
  }
}
 8003330:	bf00      	nop
 8003332:	bf00      	nop
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	2000006c 	.word	0x2000006c

08003340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003350:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <__NVIC_SetPriorityGrouping+0x44>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800335c:	4013      	ands	r3, r2
 800335e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800336c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003372:	4a04      	ldr	r2, [pc, #16]	; (8003384 <__NVIC_SetPriorityGrouping+0x44>)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	60d3      	str	r3, [r2, #12]
}
 8003378:	bf00      	nop
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800338c:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <__NVIC_GetPriorityGrouping+0x18>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	0a1b      	lsrs	r3, r3, #8
 8003392:	f003 0307 	and.w	r3, r3, #7
}
 8003396:	4618      	mov	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	e000ed00 	.word	0xe000ed00

080033a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	db0b      	blt.n	80033ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	f003 021f 	and.w	r2, r3, #31
 80033bc:	4907      	ldr	r1, [pc, #28]	; (80033dc <__NVIC_EnableIRQ+0x38>)
 80033be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	2001      	movs	r0, #1
 80033c6:	fa00 f202 	lsl.w	r2, r0, r2
 80033ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	e000e100 	.word	0xe000e100

080033e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	6039      	str	r1, [r7, #0]
 80033ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	db0a      	blt.n	800340a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	490c      	ldr	r1, [pc, #48]	; (800342c <__NVIC_SetPriority+0x4c>)
 80033fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fe:	0112      	lsls	r2, r2, #4
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	440b      	add	r3, r1
 8003404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003408:	e00a      	b.n	8003420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	b2da      	uxtb	r2, r3
 800340e:	4908      	ldr	r1, [pc, #32]	; (8003430 <__NVIC_SetPriority+0x50>)
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	3b04      	subs	r3, #4
 8003418:	0112      	lsls	r2, r2, #4
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	440b      	add	r3, r1
 800341e:	761a      	strb	r2, [r3, #24]
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	e000e100 	.word	0xe000e100
 8003430:	e000ed00 	.word	0xe000ed00

08003434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003434:	b480      	push	{r7}
 8003436:	b089      	sub	sp, #36	; 0x24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f1c3 0307 	rsb	r3, r3, #7
 800344e:	2b04      	cmp	r3, #4
 8003450:	bf28      	it	cs
 8003452:	2304      	movcs	r3, #4
 8003454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	3304      	adds	r3, #4
 800345a:	2b06      	cmp	r3, #6
 800345c:	d902      	bls.n	8003464 <NVIC_EncodePriority+0x30>
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	3b03      	subs	r3, #3
 8003462:	e000      	b.n	8003466 <NVIC_EncodePriority+0x32>
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43da      	mvns	r2, r3
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	401a      	ands	r2, r3
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800347c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	fa01 f303 	lsl.w	r3, r1, r3
 8003486:	43d9      	mvns	r1, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800348c:	4313      	orrs	r3, r2
         );
}
 800348e:	4618      	mov	r0, r3
 8003490:	3724      	adds	r7, #36	; 0x24
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
	...

0800349c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034ac:	d301      	bcc.n	80034b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034ae:	2301      	movs	r3, #1
 80034b0:	e00f      	b.n	80034d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034b2:	4a0a      	ldr	r2, [pc, #40]	; (80034dc <SysTick_Config+0x40>)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ba:	210f      	movs	r1, #15
 80034bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034c0:	f7ff ff8e 	bl	80033e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034c4:	4b05      	ldr	r3, [pc, #20]	; (80034dc <SysTick_Config+0x40>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ca:	4b04      	ldr	r3, [pc, #16]	; (80034dc <SysTick_Config+0x40>)
 80034cc:	2207      	movs	r2, #7
 80034ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	e000e010 	.word	0xe000e010

080034e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7ff ff29 	bl	8003340 <__NVIC_SetPriorityGrouping>
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b086      	sub	sp, #24
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	4603      	mov	r3, r0
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	607a      	str	r2, [r7, #4]
 8003502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003508:	f7ff ff3e 	bl	8003388 <__NVIC_GetPriorityGrouping>
 800350c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	6978      	ldr	r0, [r7, #20]
 8003514:	f7ff ff8e 	bl	8003434 <NVIC_EncodePriority>
 8003518:	4602      	mov	r2, r0
 800351a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800351e:	4611      	mov	r1, r2
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff ff5d 	bl	80033e0 <__NVIC_SetPriority>
}
 8003526:	bf00      	nop
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	4603      	mov	r3, r0
 8003536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff ff31 	bl	80033a4 <__NVIC_EnableIRQ>
}
 8003542:	bf00      	nop
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b082      	sub	sp, #8
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff ffa2 	bl	800349c <SysTick_Config>
 8003558:	4603      	mov	r3, r0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003564:	b480      	push	{r7}
 8003566:	b089      	sub	sp, #36	; 0x24
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003572:	2300      	movs	r3, #0
 8003574:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003576:	2300      	movs	r3, #0
 8003578:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800357a:	2300      	movs	r3, #0
 800357c:	61fb      	str	r3, [r7, #28]
 800357e:	e16b      	b.n	8003858 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003580:	2201      	movs	r2, #1
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4013      	ands	r3, r2
 8003592:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	429a      	cmp	r2, r3
 800359a:	f040 815a 	bne.w	8003852 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d005      	beq.n	80035b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d130      	bne.n	8003618 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	2203      	movs	r2, #3
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43db      	mvns	r3, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4013      	ands	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4313      	orrs	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035ec:	2201      	movs	r2, #1
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	43db      	mvns	r3, r3
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4013      	ands	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	091b      	lsrs	r3, r3, #4
 8003602:	f003 0201 	and.w	r2, r3, #1
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4313      	orrs	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f003 0303 	and.w	r3, r3, #3
 8003620:	2b03      	cmp	r3, #3
 8003622:	d017      	beq.n	8003654 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	2203      	movs	r2, #3
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	43db      	mvns	r3, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4013      	ands	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 0303 	and.w	r3, r3, #3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d123      	bne.n	80036a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	08da      	lsrs	r2, r3, #3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3208      	adds	r2, #8
 8003668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800366c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	220f      	movs	r2, #15
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	43db      	mvns	r3, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4013      	ands	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	691a      	ldr	r2, [r3, #16]
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4313      	orrs	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	08da      	lsrs	r2, r3, #3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3208      	adds	r2, #8
 80036a2:	69b9      	ldr	r1, [r7, #24]
 80036a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	2203      	movs	r2, #3
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	43db      	mvns	r3, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4013      	ands	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f003 0203 	and.w	r2, r3, #3
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 80b4 	beq.w	8003852 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ea:	2300      	movs	r3, #0
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	4b60      	ldr	r3, [pc, #384]	; (8003870 <HAL_GPIO_Init+0x30c>)
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	4a5f      	ldr	r2, [pc, #380]	; (8003870 <HAL_GPIO_Init+0x30c>)
 80036f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036f8:	6453      	str	r3, [r2, #68]	; 0x44
 80036fa:	4b5d      	ldr	r3, [pc, #372]	; (8003870 <HAL_GPIO_Init+0x30c>)
 80036fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003706:	4a5b      	ldr	r2, [pc, #364]	; (8003874 <HAL_GPIO_Init+0x310>)
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	089b      	lsrs	r3, r3, #2
 800370c:	3302      	adds	r3, #2
 800370e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003712:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	220f      	movs	r2, #15
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	43db      	mvns	r3, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4013      	ands	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a52      	ldr	r2, [pc, #328]	; (8003878 <HAL_GPIO_Init+0x314>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d02b      	beq.n	800378a <HAL_GPIO_Init+0x226>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a51      	ldr	r2, [pc, #324]	; (800387c <HAL_GPIO_Init+0x318>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d025      	beq.n	8003786 <HAL_GPIO_Init+0x222>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a50      	ldr	r2, [pc, #320]	; (8003880 <HAL_GPIO_Init+0x31c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d01f      	beq.n	8003782 <HAL_GPIO_Init+0x21e>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a4f      	ldr	r2, [pc, #316]	; (8003884 <HAL_GPIO_Init+0x320>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d019      	beq.n	800377e <HAL_GPIO_Init+0x21a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a4e      	ldr	r2, [pc, #312]	; (8003888 <HAL_GPIO_Init+0x324>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d013      	beq.n	800377a <HAL_GPIO_Init+0x216>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a4d      	ldr	r2, [pc, #308]	; (800388c <HAL_GPIO_Init+0x328>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d00d      	beq.n	8003776 <HAL_GPIO_Init+0x212>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a4c      	ldr	r2, [pc, #304]	; (8003890 <HAL_GPIO_Init+0x32c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d007      	beq.n	8003772 <HAL_GPIO_Init+0x20e>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a4b      	ldr	r2, [pc, #300]	; (8003894 <HAL_GPIO_Init+0x330>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d101      	bne.n	800376e <HAL_GPIO_Init+0x20a>
 800376a:	2307      	movs	r3, #7
 800376c:	e00e      	b.n	800378c <HAL_GPIO_Init+0x228>
 800376e:	2308      	movs	r3, #8
 8003770:	e00c      	b.n	800378c <HAL_GPIO_Init+0x228>
 8003772:	2306      	movs	r3, #6
 8003774:	e00a      	b.n	800378c <HAL_GPIO_Init+0x228>
 8003776:	2305      	movs	r3, #5
 8003778:	e008      	b.n	800378c <HAL_GPIO_Init+0x228>
 800377a:	2304      	movs	r3, #4
 800377c:	e006      	b.n	800378c <HAL_GPIO_Init+0x228>
 800377e:	2303      	movs	r3, #3
 8003780:	e004      	b.n	800378c <HAL_GPIO_Init+0x228>
 8003782:	2302      	movs	r3, #2
 8003784:	e002      	b.n	800378c <HAL_GPIO_Init+0x228>
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <HAL_GPIO_Init+0x228>
 800378a:	2300      	movs	r3, #0
 800378c:	69fa      	ldr	r2, [r7, #28]
 800378e:	f002 0203 	and.w	r2, r2, #3
 8003792:	0092      	lsls	r2, r2, #2
 8003794:	4093      	lsls	r3, r2
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4313      	orrs	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800379c:	4935      	ldr	r1, [pc, #212]	; (8003874 <HAL_GPIO_Init+0x310>)
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	089b      	lsrs	r3, r3, #2
 80037a2:	3302      	adds	r3, #2
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037aa:	4b3b      	ldr	r3, [pc, #236]	; (8003898 <HAL_GPIO_Init+0x334>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	43db      	mvns	r3, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4013      	ands	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037ce:	4a32      	ldr	r2, [pc, #200]	; (8003898 <HAL_GPIO_Init+0x334>)
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037d4:	4b30      	ldr	r3, [pc, #192]	; (8003898 <HAL_GPIO_Init+0x334>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	43db      	mvns	r3, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4013      	ands	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037f8:	4a27      	ldr	r2, [pc, #156]	; (8003898 <HAL_GPIO_Init+0x334>)
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037fe:	4b26      	ldr	r3, [pc, #152]	; (8003898 <HAL_GPIO_Init+0x334>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	43db      	mvns	r3, r3
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	4013      	ands	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	4313      	orrs	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003822:	4a1d      	ldr	r2, [pc, #116]	; (8003898 <HAL_GPIO_Init+0x334>)
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003828:	4b1b      	ldr	r3, [pc, #108]	; (8003898 <HAL_GPIO_Init+0x334>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	43db      	mvns	r3, r3
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4013      	ands	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	4313      	orrs	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800384c:	4a12      	ldr	r2, [pc, #72]	; (8003898 <HAL_GPIO_Init+0x334>)
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	3301      	adds	r3, #1
 8003856:	61fb      	str	r3, [r7, #28]
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	2b0f      	cmp	r3, #15
 800385c:	f67f ae90 	bls.w	8003580 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003860:	bf00      	nop
 8003862:	bf00      	nop
 8003864:	3724      	adds	r7, #36	; 0x24
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	40023800 	.word	0x40023800
 8003874:	40013800 	.word	0x40013800
 8003878:	40020000 	.word	0x40020000
 800387c:	40020400 	.word	0x40020400
 8003880:	40020800 	.word	0x40020800
 8003884:	40020c00 	.word	0x40020c00
 8003888:	40021000 	.word	0x40021000
 800388c:	40021400 	.word	0x40021400
 8003890:	40021800 	.word	0x40021800
 8003894:	40021c00 	.word	0x40021c00
 8003898:	40013c00 	.word	0x40013c00

0800389c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038b2:	2300      	movs	r3, #0
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	e0cd      	b.n	8003a54 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038b8:	2201      	movs	r2, #1
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	4013      	ands	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	f040 80bd 	bne.w	8003a4e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80038d4:	4a65      	ldr	r2, [pc, #404]	; (8003a6c <HAL_GPIO_DeInit+0x1d0>)
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	089b      	lsrs	r3, r3, #2
 80038da:	3302      	adds	r3, #2
 80038dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	220f      	movs	r2, #15
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	4013      	ands	r3, r2
 80038f4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a5d      	ldr	r2, [pc, #372]	; (8003a70 <HAL_GPIO_DeInit+0x1d4>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d02b      	beq.n	8003956 <HAL_GPIO_DeInit+0xba>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a5c      	ldr	r2, [pc, #368]	; (8003a74 <HAL_GPIO_DeInit+0x1d8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d025      	beq.n	8003952 <HAL_GPIO_DeInit+0xb6>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a5b      	ldr	r2, [pc, #364]	; (8003a78 <HAL_GPIO_DeInit+0x1dc>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d01f      	beq.n	800394e <HAL_GPIO_DeInit+0xb2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a5a      	ldr	r2, [pc, #360]	; (8003a7c <HAL_GPIO_DeInit+0x1e0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d019      	beq.n	800394a <HAL_GPIO_DeInit+0xae>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a59      	ldr	r2, [pc, #356]	; (8003a80 <HAL_GPIO_DeInit+0x1e4>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d013      	beq.n	8003946 <HAL_GPIO_DeInit+0xaa>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a58      	ldr	r2, [pc, #352]	; (8003a84 <HAL_GPIO_DeInit+0x1e8>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d00d      	beq.n	8003942 <HAL_GPIO_DeInit+0xa6>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a57      	ldr	r2, [pc, #348]	; (8003a88 <HAL_GPIO_DeInit+0x1ec>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d007      	beq.n	800393e <HAL_GPIO_DeInit+0xa2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a56      	ldr	r2, [pc, #344]	; (8003a8c <HAL_GPIO_DeInit+0x1f0>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d101      	bne.n	800393a <HAL_GPIO_DeInit+0x9e>
 8003936:	2307      	movs	r3, #7
 8003938:	e00e      	b.n	8003958 <HAL_GPIO_DeInit+0xbc>
 800393a:	2308      	movs	r3, #8
 800393c:	e00c      	b.n	8003958 <HAL_GPIO_DeInit+0xbc>
 800393e:	2306      	movs	r3, #6
 8003940:	e00a      	b.n	8003958 <HAL_GPIO_DeInit+0xbc>
 8003942:	2305      	movs	r3, #5
 8003944:	e008      	b.n	8003958 <HAL_GPIO_DeInit+0xbc>
 8003946:	2304      	movs	r3, #4
 8003948:	e006      	b.n	8003958 <HAL_GPIO_DeInit+0xbc>
 800394a:	2303      	movs	r3, #3
 800394c:	e004      	b.n	8003958 <HAL_GPIO_DeInit+0xbc>
 800394e:	2302      	movs	r3, #2
 8003950:	e002      	b.n	8003958 <HAL_GPIO_DeInit+0xbc>
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <HAL_GPIO_DeInit+0xbc>
 8003956:	2300      	movs	r3, #0
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	f002 0203 	and.w	r2, r2, #3
 800395e:	0092      	lsls	r2, r2, #2
 8003960:	4093      	lsls	r3, r2
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	429a      	cmp	r2, r3
 8003966:	d132      	bne.n	80039ce <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003968:	4b49      	ldr	r3, [pc, #292]	; (8003a90 <HAL_GPIO_DeInit+0x1f4>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	43db      	mvns	r3, r3
 8003970:	4947      	ldr	r1, [pc, #284]	; (8003a90 <HAL_GPIO_DeInit+0x1f4>)
 8003972:	4013      	ands	r3, r2
 8003974:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003976:	4b46      	ldr	r3, [pc, #280]	; (8003a90 <HAL_GPIO_DeInit+0x1f4>)
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	43db      	mvns	r3, r3
 800397e:	4944      	ldr	r1, [pc, #272]	; (8003a90 <HAL_GPIO_DeInit+0x1f4>)
 8003980:	4013      	ands	r3, r2
 8003982:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003984:	4b42      	ldr	r3, [pc, #264]	; (8003a90 <HAL_GPIO_DeInit+0x1f4>)
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	43db      	mvns	r3, r3
 800398c:	4940      	ldr	r1, [pc, #256]	; (8003a90 <HAL_GPIO_DeInit+0x1f4>)
 800398e:	4013      	ands	r3, r2
 8003990:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003992:	4b3f      	ldr	r3, [pc, #252]	; (8003a90 <HAL_GPIO_DeInit+0x1f4>)
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	43db      	mvns	r3, r3
 800399a:	493d      	ldr	r1, [pc, #244]	; (8003a90 <HAL_GPIO_DeInit+0x1f4>)
 800399c:	4013      	ands	r3, r2
 800399e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	220f      	movs	r2, #15
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80039b0:	4a2e      	ldr	r2, [pc, #184]	; (8003a6c <HAL_GPIO_DeInit+0x1d0>)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	089b      	lsrs	r3, r3, #2
 80039b6:	3302      	adds	r3, #2
 80039b8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	43da      	mvns	r2, r3
 80039c0:	482a      	ldr	r0, [pc, #168]	; (8003a6c <HAL_GPIO_DeInit+0x1d0>)
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	089b      	lsrs	r3, r3, #2
 80039c6:	400a      	ands	r2, r1
 80039c8:	3302      	adds	r3, #2
 80039ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	2103      	movs	r1, #3
 80039d8:	fa01 f303 	lsl.w	r3, r1, r3
 80039dc:	43db      	mvns	r3, r3
 80039de:	401a      	ands	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	08da      	lsrs	r2, r3, #3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3208      	adds	r2, #8
 80039ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	220f      	movs	r2, #15
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43db      	mvns	r3, r3
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	08d2      	lsrs	r2, r2, #3
 8003a04:	4019      	ands	r1, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3208      	adds	r2, #8
 8003a0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68da      	ldr	r2, [r3, #12]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	2103      	movs	r1, #3
 8003a18:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	401a      	ands	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	2101      	movs	r1, #1
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a30:	43db      	mvns	r3, r3
 8003a32:	401a      	ands	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	2103      	movs	r1, #3
 8003a42:	fa01 f303 	lsl.w	r3, r1, r3
 8003a46:	43db      	mvns	r3, r3
 8003a48:	401a      	ands	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	3301      	adds	r3, #1
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	2b0f      	cmp	r3, #15
 8003a58:	f67f af2e 	bls.w	80038b8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003a5c:	bf00      	nop
 8003a5e:	bf00      	nop
 8003a60:	371c      	adds	r7, #28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	40013800 	.word	0x40013800
 8003a70:	40020000 	.word	0x40020000
 8003a74:	40020400 	.word	0x40020400
 8003a78:	40020800 	.word	0x40020800
 8003a7c:	40020c00 	.word	0x40020c00
 8003a80:	40021000 	.word	0x40021000
 8003a84:	40021400 	.word	0x40021400
 8003a88:	40021800 	.word	0x40021800
 8003a8c:	40021c00 	.word	0x40021c00
 8003a90:	40013c00 	.word	0x40013c00

08003a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	807b      	strh	r3, [r7, #2]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003aa4:	787b      	ldrb	r3, [r7, #1]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aaa:	887a      	ldrh	r2, [r7, #2]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ab0:	e003      	b.n	8003aba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ab2:	887b      	ldrh	r3, [r7, #2]
 8003ab4:	041a      	lsls	r2, r3, #16
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	619a      	str	r2, [r3, #24]
}
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003ac6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ac8:	b08f      	sub	sp, #60	; 0x3c
 8003aca:	af0a      	add	r7, sp, #40	; 0x28
 8003acc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e054      	b.n	8003b82 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f006 fc2a 	bl	800a34c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2203      	movs	r2, #3
 8003afc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d102      	bne.n	8003b12 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f003 fc58 	bl	80073cc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	603b      	str	r3, [r7, #0]
 8003b22:	687e      	ldr	r6, [r7, #4]
 8003b24:	466d      	mov	r5, sp
 8003b26:	f106 0410 	add.w	r4, r6, #16
 8003b2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b36:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b3a:	1d33      	adds	r3, r6, #4
 8003b3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b3e:	6838      	ldr	r0, [r7, #0]
 8003b40:	f003 fbd2 	bl	80072e8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2101      	movs	r1, #1
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f003 fc4f 	bl	80073ee <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	603b      	str	r3, [r7, #0]
 8003b56:	687e      	ldr	r6, [r7, #4]
 8003b58:	466d      	mov	r5, sp
 8003b5a:	f106 0410 	add.w	r4, r6, #16
 8003b5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b6e:	1d33      	adds	r3, r6, #4
 8003b70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b72:	6838      	ldr	r0, [r7, #0]
 8003b74:	f003 fdd8 	bl	8007728 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b8a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003b8a:	b590      	push	{r4, r7, lr}
 8003b8c:	b089      	sub	sp, #36	; 0x24
 8003b8e:	af04      	add	r7, sp, #16
 8003b90:	6078      	str	r0, [r7, #4]
 8003b92:	4608      	mov	r0, r1
 8003b94:	4611      	mov	r1, r2
 8003b96:	461a      	mov	r2, r3
 8003b98:	4603      	mov	r3, r0
 8003b9a:	70fb      	strb	r3, [r7, #3]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	70bb      	strb	r3, [r7, #2]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d101      	bne.n	8003bb2 <HAL_HCD_HC_Init+0x28>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e076      	b.n	8003ca0 <HAL_HCD_HC_Init+0x116>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003bba:	78fb      	ldrb	r3, [r7, #3]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	212c      	movs	r1, #44	; 0x2c
 8003bc0:	fb01 f303 	mul.w	r3, r1, r3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	333d      	adds	r3, #61	; 0x3d
 8003bc8:	2200      	movs	r2, #0
 8003bca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003bcc:	78fb      	ldrb	r3, [r7, #3]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	212c      	movs	r1, #44	; 0x2c
 8003bd2:	fb01 f303 	mul.w	r3, r1, r3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3338      	adds	r3, #56	; 0x38
 8003bda:	787a      	ldrb	r2, [r7, #1]
 8003bdc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003bde:	78fb      	ldrb	r3, [r7, #3]
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	212c      	movs	r1, #44	; 0x2c
 8003be4:	fb01 f303 	mul.w	r3, r1, r3
 8003be8:	4413      	add	r3, r2
 8003bea:	3340      	adds	r3, #64	; 0x40
 8003bec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003bee:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	212c      	movs	r1, #44	; 0x2c
 8003bf6:	fb01 f303 	mul.w	r3, r1, r3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3339      	adds	r3, #57	; 0x39
 8003bfe:	78fa      	ldrb	r2, [r7, #3]
 8003c00:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	212c      	movs	r1, #44	; 0x2c
 8003c08:	fb01 f303 	mul.w	r3, r1, r3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	333f      	adds	r3, #63	; 0x3f
 8003c10:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003c14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003c16:	78fb      	ldrb	r3, [r7, #3]
 8003c18:	78ba      	ldrb	r2, [r7, #2]
 8003c1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c1e:	b2d0      	uxtb	r0, r2
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	212c      	movs	r1, #44	; 0x2c
 8003c24:	fb01 f303 	mul.w	r3, r1, r3
 8003c28:	4413      	add	r3, r2
 8003c2a:	333a      	adds	r3, #58	; 0x3a
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003c30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	da09      	bge.n	8003c4c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	212c      	movs	r1, #44	; 0x2c
 8003c3e:	fb01 f303 	mul.w	r3, r1, r3
 8003c42:	4413      	add	r3, r2
 8003c44:	333b      	adds	r3, #59	; 0x3b
 8003c46:	2201      	movs	r2, #1
 8003c48:	701a      	strb	r2, [r3, #0]
 8003c4a:	e008      	b.n	8003c5e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003c4c:	78fb      	ldrb	r3, [r7, #3]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	212c      	movs	r1, #44	; 0x2c
 8003c52:	fb01 f303 	mul.w	r3, r1, r3
 8003c56:	4413      	add	r3, r2
 8003c58:	333b      	adds	r3, #59	; 0x3b
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003c5e:	78fb      	ldrb	r3, [r7, #3]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	212c      	movs	r1, #44	; 0x2c
 8003c64:	fb01 f303 	mul.w	r3, r1, r3
 8003c68:	4413      	add	r3, r2
 8003c6a:	333c      	adds	r3, #60	; 0x3c
 8003c6c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003c70:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6818      	ldr	r0, [r3, #0]
 8003c76:	787c      	ldrb	r4, [r7, #1]
 8003c78:	78ba      	ldrb	r2, [r7, #2]
 8003c7a:	78f9      	ldrb	r1, [r7, #3]
 8003c7c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003c7e:	9302      	str	r3, [sp, #8]
 8003c80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003c84:	9301      	str	r3, [sp, #4]
 8003c86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	4623      	mov	r3, r4
 8003c8e:	f003 fed1 	bl	8007a34 <USB_HC_Init>
 8003c92:	4603      	mov	r3, r0
 8003c94:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd90      	pop	{r4, r7, pc}

08003ca8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d101      	bne.n	8003cc6 <HAL_HCD_HC_Halt+0x1e>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e00f      	b.n	8003ce6 <HAL_HCD_HC_Halt+0x3e>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	78fa      	ldrb	r2, [r7, #3]
 8003cd4:	4611      	mov	r1, r2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f004 f921 	bl	8007f1e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	4608      	mov	r0, r1
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4603      	mov	r3, r0
 8003d00:	70fb      	strb	r3, [r7, #3]
 8003d02:	460b      	mov	r3, r1
 8003d04:	70bb      	strb	r3, [r7, #2]
 8003d06:	4613      	mov	r3, r2
 8003d08:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003d0a:	78fb      	ldrb	r3, [r7, #3]
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	212c      	movs	r1, #44	; 0x2c
 8003d10:	fb01 f303 	mul.w	r3, r1, r3
 8003d14:	4413      	add	r3, r2
 8003d16:	333b      	adds	r3, #59	; 0x3b
 8003d18:	78ba      	ldrb	r2, [r7, #2]
 8003d1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003d1c:	78fb      	ldrb	r3, [r7, #3]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	212c      	movs	r1, #44	; 0x2c
 8003d22:	fb01 f303 	mul.w	r3, r1, r3
 8003d26:	4413      	add	r3, r2
 8003d28:	333f      	adds	r3, #63	; 0x3f
 8003d2a:	787a      	ldrb	r2, [r7, #1]
 8003d2c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003d2e:	7c3b      	ldrb	r3, [r7, #16]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d112      	bne.n	8003d5a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003d34:	78fb      	ldrb	r3, [r7, #3]
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	212c      	movs	r1, #44	; 0x2c
 8003d3a:	fb01 f303 	mul.w	r3, r1, r3
 8003d3e:	4413      	add	r3, r2
 8003d40:	3342      	adds	r3, #66	; 0x42
 8003d42:	2203      	movs	r2, #3
 8003d44:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	212c      	movs	r1, #44	; 0x2c
 8003d4c:	fb01 f303 	mul.w	r3, r1, r3
 8003d50:	4413      	add	r3, r2
 8003d52:	333d      	adds	r3, #61	; 0x3d
 8003d54:	7f3a      	ldrb	r2, [r7, #28]
 8003d56:	701a      	strb	r2, [r3, #0]
 8003d58:	e008      	b.n	8003d6c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003d5a:	78fb      	ldrb	r3, [r7, #3]
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	212c      	movs	r1, #44	; 0x2c
 8003d60:	fb01 f303 	mul.w	r3, r1, r3
 8003d64:	4413      	add	r3, r2
 8003d66:	3342      	adds	r3, #66	; 0x42
 8003d68:	2202      	movs	r2, #2
 8003d6a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003d6c:	787b      	ldrb	r3, [r7, #1]
 8003d6e:	2b03      	cmp	r3, #3
 8003d70:	f200 80c6 	bhi.w	8003f00 <HAL_HCD_HC_SubmitRequest+0x210>
 8003d74:	a201      	add	r2, pc, #4	; (adr r2, 8003d7c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7a:	bf00      	nop
 8003d7c:	08003d8d 	.word	0x08003d8d
 8003d80:	08003eed 	.word	0x08003eed
 8003d84:	08003df1 	.word	0x08003df1
 8003d88:	08003e6f 	.word	0x08003e6f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003d8c:	7c3b      	ldrb	r3, [r7, #16]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	f040 80b8 	bne.w	8003f04 <HAL_HCD_HC_SubmitRequest+0x214>
 8003d94:	78bb      	ldrb	r3, [r7, #2]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f040 80b4 	bne.w	8003f04 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003d9c:	8b3b      	ldrh	r3, [r7, #24]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d108      	bne.n	8003db4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003da2:	78fb      	ldrb	r3, [r7, #3]
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	212c      	movs	r1, #44	; 0x2c
 8003da8:	fb01 f303 	mul.w	r3, r1, r3
 8003dac:	4413      	add	r3, r2
 8003dae:	3355      	adds	r3, #85	; 0x55
 8003db0:	2201      	movs	r2, #1
 8003db2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003db4:	78fb      	ldrb	r3, [r7, #3]
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	212c      	movs	r1, #44	; 0x2c
 8003dba:	fb01 f303 	mul.w	r3, r1, r3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	3355      	adds	r3, #85	; 0x55
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d109      	bne.n	8003ddc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003dc8:	78fb      	ldrb	r3, [r7, #3]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	212c      	movs	r1, #44	; 0x2c
 8003dce:	fb01 f303 	mul.w	r3, r1, r3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	3342      	adds	r3, #66	; 0x42
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003dda:	e093      	b.n	8003f04 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ddc:	78fb      	ldrb	r3, [r7, #3]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	212c      	movs	r1, #44	; 0x2c
 8003de2:	fb01 f303 	mul.w	r3, r1, r3
 8003de6:	4413      	add	r3, r2
 8003de8:	3342      	adds	r3, #66	; 0x42
 8003dea:	2202      	movs	r2, #2
 8003dec:	701a      	strb	r2, [r3, #0]
      break;
 8003dee:	e089      	b.n	8003f04 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003df0:	78bb      	ldrb	r3, [r7, #2]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d11d      	bne.n	8003e32 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003df6:	78fb      	ldrb	r3, [r7, #3]
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	212c      	movs	r1, #44	; 0x2c
 8003dfc:	fb01 f303 	mul.w	r3, r1, r3
 8003e00:	4413      	add	r3, r2
 8003e02:	3355      	adds	r3, #85	; 0x55
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d109      	bne.n	8003e1e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e0a:	78fb      	ldrb	r3, [r7, #3]
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	212c      	movs	r1, #44	; 0x2c
 8003e10:	fb01 f303 	mul.w	r3, r1, r3
 8003e14:	4413      	add	r3, r2
 8003e16:	3342      	adds	r3, #66	; 0x42
 8003e18:	2200      	movs	r2, #0
 8003e1a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003e1c:	e073      	b.n	8003f06 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e1e:	78fb      	ldrb	r3, [r7, #3]
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	212c      	movs	r1, #44	; 0x2c
 8003e24:	fb01 f303 	mul.w	r3, r1, r3
 8003e28:	4413      	add	r3, r2
 8003e2a:	3342      	adds	r3, #66	; 0x42
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	701a      	strb	r2, [r3, #0]
      break;
 8003e30:	e069      	b.n	8003f06 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003e32:	78fb      	ldrb	r3, [r7, #3]
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	212c      	movs	r1, #44	; 0x2c
 8003e38:	fb01 f303 	mul.w	r3, r1, r3
 8003e3c:	4413      	add	r3, r2
 8003e3e:	3354      	adds	r3, #84	; 0x54
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d109      	bne.n	8003e5a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e46:	78fb      	ldrb	r3, [r7, #3]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	212c      	movs	r1, #44	; 0x2c
 8003e4c:	fb01 f303 	mul.w	r3, r1, r3
 8003e50:	4413      	add	r3, r2
 8003e52:	3342      	adds	r3, #66	; 0x42
 8003e54:	2200      	movs	r2, #0
 8003e56:	701a      	strb	r2, [r3, #0]
      break;
 8003e58:	e055      	b.n	8003f06 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e5a:	78fb      	ldrb	r3, [r7, #3]
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	212c      	movs	r1, #44	; 0x2c
 8003e60:	fb01 f303 	mul.w	r3, r1, r3
 8003e64:	4413      	add	r3, r2
 8003e66:	3342      	adds	r3, #66	; 0x42
 8003e68:	2202      	movs	r2, #2
 8003e6a:	701a      	strb	r2, [r3, #0]
      break;
 8003e6c:	e04b      	b.n	8003f06 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003e6e:	78bb      	ldrb	r3, [r7, #2]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d11d      	bne.n	8003eb0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003e74:	78fb      	ldrb	r3, [r7, #3]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	212c      	movs	r1, #44	; 0x2c
 8003e7a:	fb01 f303 	mul.w	r3, r1, r3
 8003e7e:	4413      	add	r3, r2
 8003e80:	3355      	adds	r3, #85	; 0x55
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d109      	bne.n	8003e9c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	212c      	movs	r1, #44	; 0x2c
 8003e8e:	fb01 f303 	mul.w	r3, r1, r3
 8003e92:	4413      	add	r3, r2
 8003e94:	3342      	adds	r3, #66	; 0x42
 8003e96:	2200      	movs	r2, #0
 8003e98:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003e9a:	e034      	b.n	8003f06 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003e9c:	78fb      	ldrb	r3, [r7, #3]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	212c      	movs	r1, #44	; 0x2c
 8003ea2:	fb01 f303 	mul.w	r3, r1, r3
 8003ea6:	4413      	add	r3, r2
 8003ea8:	3342      	adds	r3, #66	; 0x42
 8003eaa:	2202      	movs	r2, #2
 8003eac:	701a      	strb	r2, [r3, #0]
      break;
 8003eae:	e02a      	b.n	8003f06 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003eb0:	78fb      	ldrb	r3, [r7, #3]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	212c      	movs	r1, #44	; 0x2c
 8003eb6:	fb01 f303 	mul.w	r3, r1, r3
 8003eba:	4413      	add	r3, r2
 8003ebc:	3354      	adds	r3, #84	; 0x54
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d109      	bne.n	8003ed8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ec4:	78fb      	ldrb	r3, [r7, #3]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	212c      	movs	r1, #44	; 0x2c
 8003eca:	fb01 f303 	mul.w	r3, r1, r3
 8003ece:	4413      	add	r3, r2
 8003ed0:	3342      	adds	r3, #66	; 0x42
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	701a      	strb	r2, [r3, #0]
      break;
 8003ed6:	e016      	b.n	8003f06 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	212c      	movs	r1, #44	; 0x2c
 8003ede:	fb01 f303 	mul.w	r3, r1, r3
 8003ee2:	4413      	add	r3, r2
 8003ee4:	3342      	adds	r3, #66	; 0x42
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	701a      	strb	r2, [r3, #0]
      break;
 8003eea:	e00c      	b.n	8003f06 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003eec:	78fb      	ldrb	r3, [r7, #3]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	212c      	movs	r1, #44	; 0x2c
 8003ef2:	fb01 f303 	mul.w	r3, r1, r3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	3342      	adds	r3, #66	; 0x42
 8003efa:	2200      	movs	r2, #0
 8003efc:	701a      	strb	r2, [r3, #0]
      break;
 8003efe:	e002      	b.n	8003f06 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003f00:	bf00      	nop
 8003f02:	e000      	b.n	8003f06 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003f04:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003f06:	78fb      	ldrb	r3, [r7, #3]
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	212c      	movs	r1, #44	; 0x2c
 8003f0c:	fb01 f303 	mul.w	r3, r1, r3
 8003f10:	4413      	add	r3, r2
 8003f12:	3344      	adds	r3, #68	; 0x44
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003f18:	78fb      	ldrb	r3, [r7, #3]
 8003f1a:	8b3a      	ldrh	r2, [r7, #24]
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	202c      	movs	r0, #44	; 0x2c
 8003f20:	fb00 f303 	mul.w	r3, r0, r3
 8003f24:	440b      	add	r3, r1
 8003f26:	334c      	adds	r3, #76	; 0x4c
 8003f28:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003f2a:	78fb      	ldrb	r3, [r7, #3]
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	212c      	movs	r1, #44	; 0x2c
 8003f30:	fb01 f303 	mul.w	r3, r1, r3
 8003f34:	4413      	add	r3, r2
 8003f36:	3360      	adds	r3, #96	; 0x60
 8003f38:	2200      	movs	r2, #0
 8003f3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003f3c:	78fb      	ldrb	r3, [r7, #3]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	212c      	movs	r1, #44	; 0x2c
 8003f42:	fb01 f303 	mul.w	r3, r1, r3
 8003f46:	4413      	add	r3, r2
 8003f48:	3350      	adds	r3, #80	; 0x50
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003f4e:	78fb      	ldrb	r3, [r7, #3]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	212c      	movs	r1, #44	; 0x2c
 8003f54:	fb01 f303 	mul.w	r3, r1, r3
 8003f58:	4413      	add	r3, r2
 8003f5a:	3339      	adds	r3, #57	; 0x39
 8003f5c:	78fa      	ldrb	r2, [r7, #3]
 8003f5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003f60:	78fb      	ldrb	r3, [r7, #3]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	212c      	movs	r1, #44	; 0x2c
 8003f66:	fb01 f303 	mul.w	r3, r1, r3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	3361      	adds	r3, #97	; 0x61
 8003f6e:	2200      	movs	r2, #0
 8003f70:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	78fb      	ldrb	r3, [r7, #3]
 8003f78:	222c      	movs	r2, #44	; 0x2c
 8003f7a:	fb02 f303 	mul.w	r3, r2, r3
 8003f7e:	3338      	adds	r3, #56	; 0x38
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	18d1      	adds	r1, r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	f003 fe74 	bl	8007c78 <USB_HC_StartXfer>
 8003f90:	4603      	mov	r3, r0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop

08003f9c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f003 fb75 	bl	80076a2 <USB_GetMode>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	f040 80f6 	bne.w	80041ac <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f003 fb59 	bl	800767c <USB_ReadInterrupts>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 80ec 	beq.w	80041aa <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f003 fb50 	bl	800767c <USB_ReadInterrupts>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fe2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fe6:	d104      	bne.n	8003ff2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003ff0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f003 fb40 	bl	800767c <USB_ReadInterrupts>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004006:	d104      	bne.n	8004012 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004010:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f003 fb30 	bl	800767c <USB_ReadInterrupts>
 800401c:	4603      	mov	r3, r0
 800401e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004022:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004026:	d104      	bne.n	8004032 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004030:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f003 fb20 	bl	800767c <USB_ReadInterrupts>
 800403c:	4603      	mov	r3, r0
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b02      	cmp	r3, #2
 8004044:	d103      	bne.n	800404e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2202      	movs	r2, #2
 800404c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4618      	mov	r0, r3
 8004054:	f003 fb12 	bl	800767c <USB_ReadInterrupts>
 8004058:	4603      	mov	r3, r0
 800405a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800405e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004062:	d11c      	bne.n	800409e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800406c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10f      	bne.n	800409e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800407e:	2110      	movs	r1, #16
 8004080:	6938      	ldr	r0, [r7, #16]
 8004082:	f003 fa01 	bl	8007488 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004086:	6938      	ldr	r0, [r7, #16]
 8004088:	f003 fa32 	bl	80074f0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2101      	movs	r1, #1
 8004092:	4618      	mov	r0, r3
 8004094:	f003 fc08 	bl	80078a8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f006 f9d5 	bl	800a448 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f003 faea 	bl	800767c <USB_ReadInterrupts>
 80040a8:	4603      	mov	r3, r0
 80040aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040b2:	d102      	bne.n	80040ba <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f001 f89e 	bl	80051f6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f003 fadc 	bl	800767c <USB_ReadInterrupts>
 80040c4:	4603      	mov	r3, r0
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d106      	bne.n	80040dc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f006 f99e 	bl	800a410 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2208      	movs	r2, #8
 80040da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f003 facb 	bl	800767c <USB_ReadInterrupts>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f003 0310 	and.w	r3, r3, #16
 80040ec:	2b10      	cmp	r3, #16
 80040ee:	d101      	bne.n	80040f4 <HAL_HCD_IRQHandler+0x158>
 80040f0:	2301      	movs	r3, #1
 80040f2:	e000      	b.n	80040f6 <HAL_HCD_IRQHandler+0x15a>
 80040f4:	2300      	movs	r3, #0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d012      	beq.n	8004120 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	699a      	ldr	r2, [r3, #24]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0210 	bic.w	r2, r2, #16
 8004108:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 ffa1 	bl	8005052 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699a      	ldr	r2, [r3, #24]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0210 	orr.w	r2, r2, #16
 800411e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f003 faa9 	bl	800767c <USB_ReadInterrupts>
 800412a:	4603      	mov	r3, r0
 800412c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004130:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004134:	d13a      	bne.n	80041ac <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f003 fede 	bl	8007efc <USB_HC_ReadInterrupt>
 8004140:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004142:	2300      	movs	r3, #0
 8004144:	617b      	str	r3, [r7, #20]
 8004146:	e025      	b.n	8004194 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	fa22 f303 	lsr.w	r3, r2, r3
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d018      	beq.n	800418e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4413      	add	r3, r2
 8004164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800416e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004172:	d106      	bne.n	8004182 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	b2db      	uxtb	r3, r3
 8004178:	4619      	mov	r1, r3
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f8ab 	bl	80042d6 <HCD_HC_IN_IRQHandler>
 8004180:	e005      	b.n	800418e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	b2db      	uxtb	r3, r3
 8004186:	4619      	mov	r1, r3
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 fbf9 	bl	8004980 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	3301      	adds	r3, #1
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	429a      	cmp	r2, r3
 800419c:	d3d4      	bcc.n	8004148 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041a6:	615a      	str	r2, [r3, #20]
 80041a8:	e000      	b.n	80041ac <HAL_HCD_IRQHandler+0x210>
      return;
 80041aa:	bf00      	nop
    }
  }
}
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b082      	sub	sp, #8
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d101      	bne.n	80041c8 <HAL_HCD_Start+0x16>
 80041c4:	2302      	movs	r3, #2
 80041c6:	e013      	b.n	80041f0 <HAL_HCD_Start+0x3e>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2101      	movs	r1, #1
 80041d6:	4618      	mov	r0, r3
 80041d8:	f003 fbca 	bl	8007970 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f003 f8e2 	bl	80073aa <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004206:	2b01      	cmp	r3, #1
 8004208:	d101      	bne.n	800420e <HAL_HCD_Stop+0x16>
 800420a:	2302      	movs	r3, #2
 800420c:	e00d      	b.n	800422a <HAL_HCD_Stop+0x32>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f003 ffb8 	bl	8008190 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b082      	sub	sp, #8
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f003 fb6c 	bl	800791c <USB_ResetPort>
 8004244:	4603      	mov	r3, r0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	460b      	mov	r3, r1
 8004258:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800425a:	78fb      	ldrb	r3, [r7, #3]
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	212c      	movs	r1, #44	; 0x2c
 8004260:	fb01 f303 	mul.w	r3, r1, r3
 8004264:	4413      	add	r3, r2
 8004266:	3360      	adds	r3, #96	; 0x60
 8004268:	781b      	ldrb	r3, [r3, #0]
}
 800426a:	4618      	mov	r0, r3
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	460b      	mov	r3, r1
 8004280:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004282:	78fb      	ldrb	r3, [r7, #3]
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	212c      	movs	r1, #44	; 0x2c
 8004288:	fb01 f303 	mul.w	r3, r1, r3
 800428c:	4413      	add	r3, r2
 800428e:	3350      	adds	r3, #80	; 0x50
 8004290:	681b      	ldr	r3, [r3, #0]
}
 8004292:	4618      	mov	r0, r3
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b082      	sub	sp, #8
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f003 fbb0 	bl	8007a10 <USB_GetCurrentFrame>
 80042b0:	4603      	mov	r3, r0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b082      	sub	sp, #8
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f003 fb8b 	bl	80079e2 <USB_GetHostSpeed>
 80042cc:	4603      	mov	r3, r0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b086      	sub	sp, #24
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	460b      	mov	r3, r1
 80042e0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80042ec:	78fb      	ldrb	r3, [r7, #3]
 80042ee:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	2b04      	cmp	r3, #4
 8004304:	d11a      	bne.n	800433c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	4413      	add	r3, r2
 800430e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004312:	461a      	mov	r2, r3
 8004314:	2304      	movs	r3, #4
 8004316:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	212c      	movs	r1, #44	; 0x2c
 800431e:	fb01 f303 	mul.w	r3, r1, r3
 8004322:	4413      	add	r3, r2
 8004324:	3361      	adds	r3, #97	; 0x61
 8004326:	2206      	movs	r2, #6
 8004328:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	b2d2      	uxtb	r2, r2
 8004332:	4611      	mov	r1, r2
 8004334:	4618      	mov	r0, r3
 8004336:	f003 fdf2 	bl	8007f1e <USB_HC_Halt>
 800433a:	e0af      	b.n	800449c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	4413      	add	r3, r2
 8004344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004352:	d11b      	bne.n	800438c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	4413      	add	r3, r2
 800435c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004360:	461a      	mov	r2, r3
 8004362:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004366:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	212c      	movs	r1, #44	; 0x2c
 800436e:	fb01 f303 	mul.w	r3, r1, r3
 8004372:	4413      	add	r3, r2
 8004374:	3361      	adds	r3, #97	; 0x61
 8004376:	2207      	movs	r2, #7
 8004378:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	b2d2      	uxtb	r2, r2
 8004382:	4611      	mov	r1, r2
 8004384:	4618      	mov	r0, r3
 8004386:	f003 fdca 	bl	8007f1e <USB_HC_Halt>
 800438a:	e087      	b.n	800449c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	4413      	add	r3, r2
 8004394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 0320 	and.w	r3, r3, #32
 800439e:	2b20      	cmp	r3, #32
 80043a0:	d109      	bne.n	80043b6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	015a      	lsls	r2, r3, #5
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ae:	461a      	mov	r2, r3
 80043b0:	2320      	movs	r3, #32
 80043b2:	6093      	str	r3, [r2, #8]
 80043b4:	e072      	b.n	800449c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d11a      	bne.n	8004402 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d8:	461a      	mov	r2, r3
 80043da:	2308      	movs	r3, #8
 80043dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	212c      	movs	r1, #44	; 0x2c
 80043e4:	fb01 f303 	mul.w	r3, r1, r3
 80043e8:	4413      	add	r3, r2
 80043ea:	3361      	adds	r3, #97	; 0x61
 80043ec:	2205      	movs	r2, #5
 80043ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	b2d2      	uxtb	r2, r2
 80043f8:	4611      	mov	r1, r2
 80043fa:	4618      	mov	r0, r3
 80043fc:	f003 fd8f 	bl	8007f1e <USB_HC_Halt>
 8004400:	e04c      	b.n	800449c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	015a      	lsls	r2, r3, #5
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	4413      	add	r3, r2
 800440a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004418:	d11b      	bne.n	8004452 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	4413      	add	r3, r2
 8004422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004426:	461a      	mov	r2, r3
 8004428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800442c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	212c      	movs	r1, #44	; 0x2c
 8004434:	fb01 f303 	mul.w	r3, r1, r3
 8004438:	4413      	add	r3, r2
 800443a:	3361      	adds	r3, #97	; 0x61
 800443c:	2208      	movs	r2, #8
 800443e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	4611      	mov	r1, r2
 800444a:	4618      	mov	r0, r3
 800444c:	f003 fd67 	bl	8007f1e <USB_HC_Halt>
 8004450:	e024      	b.n	800449c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	4413      	add	r3, r2
 800445a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004464:	2b80      	cmp	r3, #128	; 0x80
 8004466:	d119      	bne.n	800449c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	4413      	add	r3, r2
 8004470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004474:	461a      	mov	r2, r3
 8004476:	2380      	movs	r3, #128	; 0x80
 8004478:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	212c      	movs	r1, #44	; 0x2c
 8004480:	fb01 f303 	mul.w	r3, r1, r3
 8004484:	4413      	add	r3, r2
 8004486:	3361      	adds	r3, #97	; 0x61
 8004488:	2206      	movs	r2, #6
 800448a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	4611      	mov	r1, r2
 8004496:	4618      	mov	r0, r3
 8004498:	f003 fd41 	bl	8007f1e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044b2:	d112      	bne.n	80044da <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	4611      	mov	r1, r2
 80044be:	4618      	mov	r0, r3
 80044c0:	f003 fd2d 	bl	8007f1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044d0:	461a      	mov	r2, r3
 80044d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044d6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80044d8:	e24e      	b.n	8004978 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	f040 80df 	bne.w	80046b0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d019      	beq.n	800452e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	212c      	movs	r1, #44	; 0x2c
 8004500:	fb01 f303 	mul.w	r3, r1, r3
 8004504:	4413      	add	r3, r2
 8004506:	3348      	adds	r3, #72	; 0x48
 8004508:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	0159      	lsls	r1, r3, #5
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	440b      	add	r3, r1
 8004512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800451c:	1ad2      	subs	r2, r2, r3
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	202c      	movs	r0, #44	; 0x2c
 8004524:	fb00 f303 	mul.w	r3, r0, r3
 8004528:	440b      	add	r3, r1
 800452a:	3350      	adds	r3, #80	; 0x50
 800452c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	212c      	movs	r1, #44	; 0x2c
 8004534:	fb01 f303 	mul.w	r3, r1, r3
 8004538:	4413      	add	r3, r2
 800453a:	3361      	adds	r3, #97	; 0x61
 800453c:	2201      	movs	r2, #1
 800453e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	212c      	movs	r1, #44	; 0x2c
 8004546:	fb01 f303 	mul.w	r3, r1, r3
 800454a:	4413      	add	r3, r2
 800454c:	335c      	adds	r3, #92	; 0x5c
 800454e:	2200      	movs	r2, #0
 8004550:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	4413      	add	r3, r2
 800455a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800455e:	461a      	mov	r2, r3
 8004560:	2301      	movs	r3, #1
 8004562:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	212c      	movs	r1, #44	; 0x2c
 800456a:	fb01 f303 	mul.w	r3, r1, r3
 800456e:	4413      	add	r3, r2
 8004570:	333f      	adds	r3, #63	; 0x3f
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d009      	beq.n	800458c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	212c      	movs	r1, #44	; 0x2c
 800457e:	fb01 f303 	mul.w	r3, r1, r3
 8004582:	4413      	add	r3, r2
 8004584:	333f      	adds	r3, #63	; 0x3f
 8004586:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004588:	2b02      	cmp	r3, #2
 800458a:	d111      	bne.n	80045b0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	4611      	mov	r1, r2
 8004596:	4618      	mov	r0, r3
 8004598:	f003 fcc1 	bl	8007f1e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a8:	461a      	mov	r2, r3
 80045aa:	2310      	movs	r3, #16
 80045ac:	6093      	str	r3, [r2, #8]
 80045ae:	e03a      	b.n	8004626 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	212c      	movs	r1, #44	; 0x2c
 80045b6:	fb01 f303 	mul.w	r3, r1, r3
 80045ba:	4413      	add	r3, r2
 80045bc:	333f      	adds	r3, #63	; 0x3f
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	2b03      	cmp	r3, #3
 80045c2:	d009      	beq.n	80045d8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	212c      	movs	r1, #44	; 0x2c
 80045ca:	fb01 f303 	mul.w	r3, r1, r3
 80045ce:	4413      	add	r3, r2
 80045d0:	333f      	adds	r3, #63	; 0x3f
 80045d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d126      	bne.n	8004626 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	0151      	lsls	r1, r2, #5
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	440a      	add	r2, r1
 80045ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045f6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	212c      	movs	r1, #44	; 0x2c
 80045fe:	fb01 f303 	mul.w	r3, r1, r3
 8004602:	4413      	add	r3, r2
 8004604:	3360      	adds	r3, #96	; 0x60
 8004606:	2201      	movs	r2, #1
 8004608:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	b2d9      	uxtb	r1, r3
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	202c      	movs	r0, #44	; 0x2c
 8004614:	fb00 f303 	mul.w	r3, r0, r3
 8004618:	4413      	add	r3, r2
 800461a:	3360      	adds	r3, #96	; 0x60
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f005 ff1f 	bl	800a464 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d12b      	bne.n	8004686 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	212c      	movs	r1, #44	; 0x2c
 8004634:	fb01 f303 	mul.w	r3, r1, r3
 8004638:	4413      	add	r3, r2
 800463a:	3348      	adds	r3, #72	; 0x48
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	202c      	movs	r0, #44	; 0x2c
 8004644:	fb00 f202 	mul.w	r2, r0, r2
 8004648:	440a      	add	r2, r1
 800464a:	3240      	adds	r2, #64	; 0x40
 800464c:	8812      	ldrh	r2, [r2, #0]
 800464e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 818e 	beq.w	8004978 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	212c      	movs	r1, #44	; 0x2c
 8004662:	fb01 f303 	mul.w	r3, r1, r3
 8004666:	4413      	add	r3, r2
 8004668:	3354      	adds	r3, #84	; 0x54
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	f083 0301 	eor.w	r3, r3, #1
 8004670:	b2d8      	uxtb	r0, r3
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	212c      	movs	r1, #44	; 0x2c
 8004678:	fb01 f303 	mul.w	r3, r1, r3
 800467c:	4413      	add	r3, r2
 800467e:	3354      	adds	r3, #84	; 0x54
 8004680:	4602      	mov	r2, r0
 8004682:	701a      	strb	r2, [r3, #0]
}
 8004684:	e178      	b.n	8004978 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	212c      	movs	r1, #44	; 0x2c
 800468c:	fb01 f303 	mul.w	r3, r1, r3
 8004690:	4413      	add	r3, r2
 8004692:	3354      	adds	r3, #84	; 0x54
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	f083 0301 	eor.w	r3, r3, #1
 800469a:	b2d8      	uxtb	r0, r3
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	212c      	movs	r1, #44	; 0x2c
 80046a2:	fb01 f303 	mul.w	r3, r1, r3
 80046a6:	4413      	add	r3, r2
 80046a8:	3354      	adds	r3, #84	; 0x54
 80046aa:	4602      	mov	r2, r0
 80046ac:	701a      	strb	r2, [r3, #0]
}
 80046ae:	e163      	b.n	8004978 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	f040 80f6 	bne.w	80048b4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	212c      	movs	r1, #44	; 0x2c
 80046ce:	fb01 f303 	mul.w	r3, r1, r3
 80046d2:	4413      	add	r3, r2
 80046d4:	3361      	adds	r3, #97	; 0x61
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d109      	bne.n	80046f0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	212c      	movs	r1, #44	; 0x2c
 80046e2:	fb01 f303 	mul.w	r3, r1, r3
 80046e6:	4413      	add	r3, r2
 80046e8:	3360      	adds	r3, #96	; 0x60
 80046ea:	2201      	movs	r2, #1
 80046ec:	701a      	strb	r2, [r3, #0]
 80046ee:	e0c9      	b.n	8004884 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	212c      	movs	r1, #44	; 0x2c
 80046f6:	fb01 f303 	mul.w	r3, r1, r3
 80046fa:	4413      	add	r3, r2
 80046fc:	3361      	adds	r3, #97	; 0x61
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b05      	cmp	r3, #5
 8004702:	d109      	bne.n	8004718 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	212c      	movs	r1, #44	; 0x2c
 800470a:	fb01 f303 	mul.w	r3, r1, r3
 800470e:	4413      	add	r3, r2
 8004710:	3360      	adds	r3, #96	; 0x60
 8004712:	2205      	movs	r2, #5
 8004714:	701a      	strb	r2, [r3, #0]
 8004716:	e0b5      	b.n	8004884 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	212c      	movs	r1, #44	; 0x2c
 800471e:	fb01 f303 	mul.w	r3, r1, r3
 8004722:	4413      	add	r3, r2
 8004724:	3361      	adds	r3, #97	; 0x61
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2b06      	cmp	r3, #6
 800472a:	d009      	beq.n	8004740 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	212c      	movs	r1, #44	; 0x2c
 8004732:	fb01 f303 	mul.w	r3, r1, r3
 8004736:	4413      	add	r3, r2
 8004738:	3361      	adds	r3, #97	; 0x61
 800473a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800473c:	2b08      	cmp	r3, #8
 800473e:	d150      	bne.n	80047e2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	212c      	movs	r1, #44	; 0x2c
 8004746:	fb01 f303 	mul.w	r3, r1, r3
 800474a:	4413      	add	r3, r2
 800474c:	335c      	adds	r3, #92	; 0x5c
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	202c      	movs	r0, #44	; 0x2c
 8004758:	fb00 f303 	mul.w	r3, r0, r3
 800475c:	440b      	add	r3, r1
 800475e:	335c      	adds	r3, #92	; 0x5c
 8004760:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	212c      	movs	r1, #44	; 0x2c
 8004768:	fb01 f303 	mul.w	r3, r1, r3
 800476c:	4413      	add	r3, r2
 800476e:	335c      	adds	r3, #92	; 0x5c
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b02      	cmp	r3, #2
 8004774:	d912      	bls.n	800479c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	212c      	movs	r1, #44	; 0x2c
 800477c:	fb01 f303 	mul.w	r3, r1, r3
 8004780:	4413      	add	r3, r2
 8004782:	335c      	adds	r3, #92	; 0x5c
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	212c      	movs	r1, #44	; 0x2c
 800478e:	fb01 f303 	mul.w	r3, r1, r3
 8004792:	4413      	add	r3, r2
 8004794:	3360      	adds	r3, #96	; 0x60
 8004796:	2204      	movs	r2, #4
 8004798:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800479a:	e073      	b.n	8004884 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	212c      	movs	r1, #44	; 0x2c
 80047a2:	fb01 f303 	mul.w	r3, r1, r3
 80047a6:	4413      	add	r3, r2
 80047a8:	3360      	adds	r3, #96	; 0x60
 80047aa:	2202      	movs	r2, #2
 80047ac:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80047c4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047cc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047da:	461a      	mov	r2, r3
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80047e0:	e050      	b.n	8004884 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	212c      	movs	r1, #44	; 0x2c
 80047e8:	fb01 f303 	mul.w	r3, r1, r3
 80047ec:	4413      	add	r3, r2
 80047ee:	3361      	adds	r3, #97	; 0x61
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	2b03      	cmp	r3, #3
 80047f4:	d122      	bne.n	800483c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	212c      	movs	r1, #44	; 0x2c
 80047fc:	fb01 f303 	mul.w	r3, r1, r3
 8004800:	4413      	add	r3, r2
 8004802:	3360      	adds	r3, #96	; 0x60
 8004804:	2202      	movs	r2, #2
 8004806:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	4413      	add	r3, r2
 8004810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800481e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004826:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	4413      	add	r3, r2
 8004830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004834:	461a      	mov	r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	e023      	b.n	8004884 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	212c      	movs	r1, #44	; 0x2c
 8004842:	fb01 f303 	mul.w	r3, r1, r3
 8004846:	4413      	add	r3, r2
 8004848:	3361      	adds	r3, #97	; 0x61
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	2b07      	cmp	r3, #7
 800484e:	d119      	bne.n	8004884 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	212c      	movs	r1, #44	; 0x2c
 8004856:	fb01 f303 	mul.w	r3, r1, r3
 800485a:	4413      	add	r3, r2
 800485c:	335c      	adds	r3, #92	; 0x5c
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	1c5a      	adds	r2, r3, #1
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	202c      	movs	r0, #44	; 0x2c
 8004868:	fb00 f303 	mul.w	r3, r0, r3
 800486c:	440b      	add	r3, r1
 800486e:	335c      	adds	r3, #92	; 0x5c
 8004870:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	212c      	movs	r1, #44	; 0x2c
 8004878:	fb01 f303 	mul.w	r3, r1, r3
 800487c:	4413      	add	r3, r2
 800487e:	3360      	adds	r3, #96	; 0x60
 8004880:	2204      	movs	r2, #4
 8004882:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	4413      	add	r3, r2
 800488c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004890:	461a      	mov	r2, r3
 8004892:	2302      	movs	r3, #2
 8004894:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	b2d9      	uxtb	r1, r3
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	202c      	movs	r0, #44	; 0x2c
 80048a0:	fb00 f303 	mul.w	r3, r0, r3
 80048a4:	4413      	add	r3, r2
 80048a6:	3360      	adds	r3, #96	; 0x60
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	461a      	mov	r2, r3
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f005 fdd9 	bl	800a464 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80048b2:	e061      	b.n	8004978 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 0310 	and.w	r3, r3, #16
 80048c6:	2b10      	cmp	r3, #16
 80048c8:	d156      	bne.n	8004978 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	212c      	movs	r1, #44	; 0x2c
 80048d0:	fb01 f303 	mul.w	r3, r1, r3
 80048d4:	4413      	add	r3, r2
 80048d6:	333f      	adds	r3, #63	; 0x3f
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	2b03      	cmp	r3, #3
 80048dc:	d111      	bne.n	8004902 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	212c      	movs	r1, #44	; 0x2c
 80048e4:	fb01 f303 	mul.w	r3, r1, r3
 80048e8:	4413      	add	r3, r2
 80048ea:	335c      	adds	r3, #92	; 0x5c
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	b2d2      	uxtb	r2, r2
 80048f8:	4611      	mov	r1, r2
 80048fa:	4618      	mov	r0, r3
 80048fc:	f003 fb0f 	bl	8007f1e <USB_HC_Halt>
 8004900:	e031      	b.n	8004966 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	212c      	movs	r1, #44	; 0x2c
 8004908:	fb01 f303 	mul.w	r3, r1, r3
 800490c:	4413      	add	r3, r2
 800490e:	333f      	adds	r3, #63	; 0x3f
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d009      	beq.n	800492a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	212c      	movs	r1, #44	; 0x2c
 800491c:	fb01 f303 	mul.w	r3, r1, r3
 8004920:	4413      	add	r3, r2
 8004922:	333f      	adds	r3, #63	; 0x3f
 8004924:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004926:	2b02      	cmp	r3, #2
 8004928:	d11d      	bne.n	8004966 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	212c      	movs	r1, #44	; 0x2c
 8004930:	fb01 f303 	mul.w	r3, r1, r3
 8004934:	4413      	add	r3, r2
 8004936:	335c      	adds	r3, #92	; 0x5c
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d110      	bne.n	8004966 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	212c      	movs	r1, #44	; 0x2c
 800494a:	fb01 f303 	mul.w	r3, r1, r3
 800494e:	4413      	add	r3, r2
 8004950:	3361      	adds	r3, #97	; 0x61
 8004952:	2203      	movs	r2, #3
 8004954:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	4611      	mov	r1, r2
 8004960:	4618      	mov	r0, r3
 8004962:	f003 fadc 	bl	8007f1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	4413      	add	r3, r2
 800496e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004972:	461a      	mov	r2, r3
 8004974:	2310      	movs	r3, #16
 8004976:	6093      	str	r3, [r2, #8]
}
 8004978:	bf00      	nop
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b088      	sub	sp, #32
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	460b      	mov	r3, r1
 800498a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004996:	78fb      	ldrb	r3, [r7, #3]
 8004998:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b04      	cmp	r3, #4
 80049ae:	d11a      	bne.n	80049e6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049bc:	461a      	mov	r2, r3
 80049be:	2304      	movs	r3, #4
 80049c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	212c      	movs	r1, #44	; 0x2c
 80049c8:	fb01 f303 	mul.w	r3, r1, r3
 80049cc:	4413      	add	r3, r2
 80049ce:	3361      	adds	r3, #97	; 0x61
 80049d0:	2206      	movs	r2, #6
 80049d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	b2d2      	uxtb	r2, r2
 80049dc:	4611      	mov	r1, r2
 80049de:	4618      	mov	r0, r3
 80049e0:	f003 fa9d 	bl	8007f1e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80049e4:	e331      	b.n	800504a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	015a      	lsls	r2, r3, #5
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 0320 	and.w	r3, r3, #32
 80049f8:	2b20      	cmp	r3, #32
 80049fa:	d12e      	bne.n	8004a5a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a08:	461a      	mov	r2, r3
 8004a0a:	2320      	movs	r3, #32
 8004a0c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	212c      	movs	r1, #44	; 0x2c
 8004a14:	fb01 f303 	mul.w	r3, r1, r3
 8004a18:	4413      	add	r3, r2
 8004a1a:	333d      	adds	r3, #61	; 0x3d
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	f040 8313 	bne.w	800504a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	212c      	movs	r1, #44	; 0x2c
 8004a2a:	fb01 f303 	mul.w	r3, r1, r3
 8004a2e:	4413      	add	r3, r2
 8004a30:	333d      	adds	r3, #61	; 0x3d
 8004a32:	2200      	movs	r2, #0
 8004a34:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	212c      	movs	r1, #44	; 0x2c
 8004a3c:	fb01 f303 	mul.w	r3, r1, r3
 8004a40:	4413      	add	r3, r2
 8004a42:	3360      	adds	r3, #96	; 0x60
 8004a44:	2202      	movs	r2, #2
 8004a46:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	4611      	mov	r1, r2
 8004a52:	4618      	mov	r0, r3
 8004a54:	f003 fa63 	bl	8007f1e <USB_HC_Halt>
}
 8004a58:	e2f7      	b.n	800504a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a70:	d112      	bne.n	8004a98 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a7e:	461a      	mov	r2, r3
 8004a80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a84:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	b2d2      	uxtb	r2, r2
 8004a8e:	4611      	mov	r1, r2
 8004a90:	4618      	mov	r0, r3
 8004a92:	f003 fa44 	bl	8007f1e <USB_HC_Halt>
}
 8004a96:	e2d8      	b.n	800504a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d140      	bne.n	8004b30 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	212c      	movs	r1, #44	; 0x2c
 8004ab4:	fb01 f303 	mul.w	r3, r1, r3
 8004ab8:	4413      	add	r3, r2
 8004aba:	335c      	adds	r3, #92	; 0x5c
 8004abc:	2200      	movs	r2, #0
 8004abe:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad2:	2b40      	cmp	r3, #64	; 0x40
 8004ad4:	d111      	bne.n	8004afa <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	212c      	movs	r1, #44	; 0x2c
 8004adc:	fb01 f303 	mul.w	r3, r1, r3
 8004ae0:	4413      	add	r3, r2
 8004ae2:	333d      	adds	r3, #61	; 0x3d
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af4:	461a      	mov	r2, r3
 8004af6:	2340      	movs	r3, #64	; 0x40
 8004af8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b06:	461a      	mov	r2, r3
 8004b08:	2301      	movs	r3, #1
 8004b0a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	212c      	movs	r1, #44	; 0x2c
 8004b12:	fb01 f303 	mul.w	r3, r1, r3
 8004b16:	4413      	add	r3, r2
 8004b18:	3361      	adds	r3, #97	; 0x61
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	b2d2      	uxtb	r2, r2
 8004b26:	4611      	mov	r1, r2
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f003 f9f8 	bl	8007f1e <USB_HC_Halt>
}
 8004b2e:	e28c      	b.n	800504a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b42:	2b40      	cmp	r3, #64	; 0x40
 8004b44:	d12c      	bne.n	8004ba0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	212c      	movs	r1, #44	; 0x2c
 8004b4c:	fb01 f303 	mul.w	r3, r1, r3
 8004b50:	4413      	add	r3, r2
 8004b52:	3361      	adds	r3, #97	; 0x61
 8004b54:	2204      	movs	r2, #4
 8004b56:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	212c      	movs	r1, #44	; 0x2c
 8004b5e:	fb01 f303 	mul.w	r3, r1, r3
 8004b62:	4413      	add	r3, r2
 8004b64:	333d      	adds	r3, #61	; 0x3d
 8004b66:	2201      	movs	r2, #1
 8004b68:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	212c      	movs	r1, #44	; 0x2c
 8004b70:	fb01 f303 	mul.w	r3, r1, r3
 8004b74:	4413      	add	r3, r2
 8004b76:	335c      	adds	r3, #92	; 0x5c
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	4611      	mov	r1, r2
 8004b86:	4618      	mov	r0, r3
 8004b88:	f003 f9c9 	bl	8007f1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	015a      	lsls	r2, r3, #5
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b98:	461a      	mov	r2, r3
 8004b9a:	2340      	movs	r3, #64	; 0x40
 8004b9c:	6093      	str	r3, [r2, #8]
}
 8004b9e:	e254      	b.n	800504a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 0308 	and.w	r3, r3, #8
 8004bb2:	2b08      	cmp	r3, #8
 8004bb4:	d11a      	bne.n	8004bec <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	2308      	movs	r3, #8
 8004bc6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	212c      	movs	r1, #44	; 0x2c
 8004bce:	fb01 f303 	mul.w	r3, r1, r3
 8004bd2:	4413      	add	r3, r2
 8004bd4:	3361      	adds	r3, #97	; 0x61
 8004bd6:	2205      	movs	r2, #5
 8004bd8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	b2d2      	uxtb	r2, r2
 8004be2:	4611      	mov	r1, r2
 8004be4:	4618      	mov	r0, r3
 8004be6:	f003 f99a 	bl	8007f1e <USB_HC_Halt>
}
 8004bea:	e22e      	b.n	800504a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 0310 	and.w	r3, r3, #16
 8004bfe:	2b10      	cmp	r3, #16
 8004c00:	d140      	bne.n	8004c84 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	212c      	movs	r1, #44	; 0x2c
 8004c08:	fb01 f303 	mul.w	r3, r1, r3
 8004c0c:	4413      	add	r3, r2
 8004c0e:	335c      	adds	r3, #92	; 0x5c
 8004c10:	2200      	movs	r2, #0
 8004c12:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	212c      	movs	r1, #44	; 0x2c
 8004c1a:	fb01 f303 	mul.w	r3, r1, r3
 8004c1e:	4413      	add	r3, r2
 8004c20:	3361      	adds	r3, #97	; 0x61
 8004c22:	2203      	movs	r2, #3
 8004c24:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	212c      	movs	r1, #44	; 0x2c
 8004c2c:	fb01 f303 	mul.w	r3, r1, r3
 8004c30:	4413      	add	r3, r2
 8004c32:	333d      	adds	r3, #61	; 0x3d
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d112      	bne.n	8004c60 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	212c      	movs	r1, #44	; 0x2c
 8004c40:	fb01 f303 	mul.w	r3, r1, r3
 8004c44:	4413      	add	r3, r2
 8004c46:	333c      	adds	r3, #60	; 0x3c
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d108      	bne.n	8004c60 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	212c      	movs	r1, #44	; 0x2c
 8004c54:	fb01 f303 	mul.w	r3, r1, r3
 8004c58:	4413      	add	r3, r2
 8004c5a:	333d      	adds	r3, #61	; 0x3d
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	4611      	mov	r1, r2
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f003 f957 	bl	8007f1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	2310      	movs	r3, #16
 8004c80:	6093      	str	r3, [r2, #8]
}
 8004c82:	e1e2      	b.n	800504a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c96:	2b80      	cmp	r3, #128	; 0x80
 8004c98:	d164      	bne.n	8004d64 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d111      	bne.n	8004cc6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	212c      	movs	r1, #44	; 0x2c
 8004ca8:	fb01 f303 	mul.w	r3, r1, r3
 8004cac:	4413      	add	r3, r2
 8004cae:	3361      	adds	r3, #97	; 0x61
 8004cb0:	2206      	movs	r2, #6
 8004cb2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	4611      	mov	r1, r2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f003 f92d 	bl	8007f1e <USB_HC_Halt>
 8004cc4:	e044      	b.n	8004d50 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	212c      	movs	r1, #44	; 0x2c
 8004ccc:	fb01 f303 	mul.w	r3, r1, r3
 8004cd0:	4413      	add	r3, r2
 8004cd2:	335c      	adds	r3, #92	; 0x5c
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	1c5a      	adds	r2, r3, #1
 8004cd8:	6879      	ldr	r1, [r7, #4]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	202c      	movs	r0, #44	; 0x2c
 8004cde:	fb00 f303 	mul.w	r3, r0, r3
 8004ce2:	440b      	add	r3, r1
 8004ce4:	335c      	adds	r3, #92	; 0x5c
 8004ce6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	212c      	movs	r1, #44	; 0x2c
 8004cee:	fb01 f303 	mul.w	r3, r1, r3
 8004cf2:	4413      	add	r3, r2
 8004cf4:	335c      	adds	r3, #92	; 0x5c
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d920      	bls.n	8004d3e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	212c      	movs	r1, #44	; 0x2c
 8004d02:	fb01 f303 	mul.w	r3, r1, r3
 8004d06:	4413      	add	r3, r2
 8004d08:	335c      	adds	r3, #92	; 0x5c
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	212c      	movs	r1, #44	; 0x2c
 8004d14:	fb01 f303 	mul.w	r3, r1, r3
 8004d18:	4413      	add	r3, r2
 8004d1a:	3360      	adds	r3, #96	; 0x60
 8004d1c:	2204      	movs	r2, #4
 8004d1e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	b2d9      	uxtb	r1, r3
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	202c      	movs	r0, #44	; 0x2c
 8004d2a:	fb00 f303 	mul.w	r3, r0, r3
 8004d2e:	4413      	add	r3, r2
 8004d30:	3360      	adds	r3, #96	; 0x60
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	461a      	mov	r2, r3
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f005 fb94 	bl	800a464 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004d3c:	e008      	b.n	8004d50 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	212c      	movs	r1, #44	; 0x2c
 8004d44:	fb01 f303 	mul.w	r3, r1, r3
 8004d48:	4413      	add	r3, r2
 8004d4a:	3360      	adds	r3, #96	; 0x60
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	2380      	movs	r3, #128	; 0x80
 8004d60:	6093      	str	r3, [r2, #8]
}
 8004d62:	e172      	b.n	800504a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d7a:	d11b      	bne.n	8004db4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	212c      	movs	r1, #44	; 0x2c
 8004d82:	fb01 f303 	mul.w	r3, r1, r3
 8004d86:	4413      	add	r3, r2
 8004d88:	3361      	adds	r3, #97	; 0x61
 8004d8a:	2208      	movs	r2, #8
 8004d8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	4611      	mov	r1, r2
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f003 f8c0 	bl	8007f1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004daa:	461a      	mov	r2, r3
 8004dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004db0:	6093      	str	r3, [r2, #8]
}
 8004db2:	e14a      	b.n	800504a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	f040 813f 	bne.w	800504a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	212c      	movs	r1, #44	; 0x2c
 8004dd2:	fb01 f303 	mul.w	r3, r1, r3
 8004dd6:	4413      	add	r3, r2
 8004dd8:	3361      	adds	r3, #97	; 0x61
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d17d      	bne.n	8004edc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	212c      	movs	r1, #44	; 0x2c
 8004de6:	fb01 f303 	mul.w	r3, r1, r3
 8004dea:	4413      	add	r3, r2
 8004dec:	3360      	adds	r3, #96	; 0x60
 8004dee:	2201      	movs	r2, #1
 8004df0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	212c      	movs	r1, #44	; 0x2c
 8004df8:	fb01 f303 	mul.w	r3, r1, r3
 8004dfc:	4413      	add	r3, r2
 8004dfe:	333f      	adds	r3, #63	; 0x3f
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d00a      	beq.n	8004e1c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	212c      	movs	r1, #44	; 0x2c
 8004e0c:	fb01 f303 	mul.w	r3, r1, r3
 8004e10:	4413      	add	r3, r2
 8004e12:	333f      	adds	r3, #63	; 0x3f
 8004e14:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004e16:	2b03      	cmp	r3, #3
 8004e18:	f040 8100 	bne.w	800501c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d113      	bne.n	8004e4c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	212c      	movs	r1, #44	; 0x2c
 8004e2a:	fb01 f303 	mul.w	r3, r1, r3
 8004e2e:	4413      	add	r3, r2
 8004e30:	3355      	adds	r3, #85	; 0x55
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	f083 0301 	eor.w	r3, r3, #1
 8004e38:	b2d8      	uxtb	r0, r3
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	212c      	movs	r1, #44	; 0x2c
 8004e40:	fb01 f303 	mul.w	r3, r1, r3
 8004e44:	4413      	add	r3, r2
 8004e46:	3355      	adds	r3, #85	; 0x55
 8004e48:	4602      	mov	r2, r0
 8004e4a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	f040 80e3 	bne.w	800501c <HCD_HC_OUT_IRQHandler+0x69c>
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	212c      	movs	r1, #44	; 0x2c
 8004e5c:	fb01 f303 	mul.w	r3, r1, r3
 8004e60:	4413      	add	r3, r2
 8004e62:	334c      	adds	r3, #76	; 0x4c
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 80d8 	beq.w	800501c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	212c      	movs	r1, #44	; 0x2c
 8004e72:	fb01 f303 	mul.w	r3, r1, r3
 8004e76:	4413      	add	r3, r2
 8004e78:	334c      	adds	r3, #76	; 0x4c
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6879      	ldr	r1, [r7, #4]
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	202c      	movs	r0, #44	; 0x2c
 8004e82:	fb00 f202 	mul.w	r2, r0, r2
 8004e86:	440a      	add	r2, r1
 8004e88:	3240      	adds	r2, #64	; 0x40
 8004e8a:	8812      	ldrh	r2, [r2, #0]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	6879      	ldr	r1, [r7, #4]
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	202c      	movs	r0, #44	; 0x2c
 8004e96:	fb00 f202 	mul.w	r2, r0, r2
 8004e9a:	440a      	add	r2, r1
 8004e9c:	3240      	adds	r2, #64	; 0x40
 8004e9e:	8812      	ldrh	r2, [r2, #0]
 8004ea0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 80b5 	beq.w	800501c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	212c      	movs	r1, #44	; 0x2c
 8004eb8:	fb01 f303 	mul.w	r3, r1, r3
 8004ebc:	4413      	add	r3, r2
 8004ebe:	3355      	adds	r3, #85	; 0x55
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	f083 0301 	eor.w	r3, r3, #1
 8004ec6:	b2d8      	uxtb	r0, r3
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	212c      	movs	r1, #44	; 0x2c
 8004ece:	fb01 f303 	mul.w	r3, r1, r3
 8004ed2:	4413      	add	r3, r2
 8004ed4:	3355      	adds	r3, #85	; 0x55
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	701a      	strb	r2, [r3, #0]
 8004eda:	e09f      	b.n	800501c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	212c      	movs	r1, #44	; 0x2c
 8004ee2:	fb01 f303 	mul.w	r3, r1, r3
 8004ee6:	4413      	add	r3, r2
 8004ee8:	3361      	adds	r3, #97	; 0x61
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b03      	cmp	r3, #3
 8004eee:	d109      	bne.n	8004f04 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	212c      	movs	r1, #44	; 0x2c
 8004ef6:	fb01 f303 	mul.w	r3, r1, r3
 8004efa:	4413      	add	r3, r2
 8004efc:	3360      	adds	r3, #96	; 0x60
 8004efe:	2202      	movs	r2, #2
 8004f00:	701a      	strb	r2, [r3, #0]
 8004f02:	e08b      	b.n	800501c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	212c      	movs	r1, #44	; 0x2c
 8004f0a:	fb01 f303 	mul.w	r3, r1, r3
 8004f0e:	4413      	add	r3, r2
 8004f10:	3361      	adds	r3, #97	; 0x61
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	d109      	bne.n	8004f2c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	212c      	movs	r1, #44	; 0x2c
 8004f1e:	fb01 f303 	mul.w	r3, r1, r3
 8004f22:	4413      	add	r3, r2
 8004f24:	3360      	adds	r3, #96	; 0x60
 8004f26:	2202      	movs	r2, #2
 8004f28:	701a      	strb	r2, [r3, #0]
 8004f2a:	e077      	b.n	800501c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	212c      	movs	r1, #44	; 0x2c
 8004f32:	fb01 f303 	mul.w	r3, r1, r3
 8004f36:	4413      	add	r3, r2
 8004f38:	3361      	adds	r3, #97	; 0x61
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2b05      	cmp	r3, #5
 8004f3e:	d109      	bne.n	8004f54 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	212c      	movs	r1, #44	; 0x2c
 8004f46:	fb01 f303 	mul.w	r3, r1, r3
 8004f4a:	4413      	add	r3, r2
 8004f4c:	3360      	adds	r3, #96	; 0x60
 8004f4e:	2205      	movs	r2, #5
 8004f50:	701a      	strb	r2, [r3, #0]
 8004f52:	e063      	b.n	800501c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	212c      	movs	r1, #44	; 0x2c
 8004f5a:	fb01 f303 	mul.w	r3, r1, r3
 8004f5e:	4413      	add	r3, r2
 8004f60:	3361      	adds	r3, #97	; 0x61
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	2b06      	cmp	r3, #6
 8004f66:	d009      	beq.n	8004f7c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	212c      	movs	r1, #44	; 0x2c
 8004f6e:	fb01 f303 	mul.w	r3, r1, r3
 8004f72:	4413      	add	r3, r2
 8004f74:	3361      	adds	r3, #97	; 0x61
 8004f76:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d14f      	bne.n	800501c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	212c      	movs	r1, #44	; 0x2c
 8004f82:	fb01 f303 	mul.w	r3, r1, r3
 8004f86:	4413      	add	r3, r2
 8004f88:	335c      	adds	r3, #92	; 0x5c
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	1c5a      	adds	r2, r3, #1
 8004f8e:	6879      	ldr	r1, [r7, #4]
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	202c      	movs	r0, #44	; 0x2c
 8004f94:	fb00 f303 	mul.w	r3, r0, r3
 8004f98:	440b      	add	r3, r1
 8004f9a:	335c      	adds	r3, #92	; 0x5c
 8004f9c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	212c      	movs	r1, #44	; 0x2c
 8004fa4:	fb01 f303 	mul.w	r3, r1, r3
 8004fa8:	4413      	add	r3, r2
 8004faa:	335c      	adds	r3, #92	; 0x5c
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d912      	bls.n	8004fd8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	212c      	movs	r1, #44	; 0x2c
 8004fb8:	fb01 f303 	mul.w	r3, r1, r3
 8004fbc:	4413      	add	r3, r2
 8004fbe:	335c      	adds	r3, #92	; 0x5c
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	212c      	movs	r1, #44	; 0x2c
 8004fca:	fb01 f303 	mul.w	r3, r1, r3
 8004fce:	4413      	add	r3, r2
 8004fd0:	3360      	adds	r3, #96	; 0x60
 8004fd2:	2204      	movs	r2, #4
 8004fd4:	701a      	strb	r2, [r3, #0]
 8004fd6:	e021      	b.n	800501c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	212c      	movs	r1, #44	; 0x2c
 8004fde:	fb01 f303 	mul.w	r3, r1, r3
 8004fe2:	4413      	add	r3, r2
 8004fe4:	3360      	adds	r3, #96	; 0x60
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005000:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005008:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	4413      	add	r3, r2
 8005012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005016:	461a      	mov	r2, r3
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	4413      	add	r3, r2
 8005024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005028:	461a      	mov	r2, r3
 800502a:	2302      	movs	r3, #2
 800502c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	b2d9      	uxtb	r1, r3
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	202c      	movs	r0, #44	; 0x2c
 8005038:	fb00 f303 	mul.w	r3, r0, r3
 800503c:	4413      	add	r3, r2
 800503e:	3360      	adds	r3, #96	; 0x60
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f005 fa0d 	bl	800a464 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800504a:	bf00      	nop
 800504c:	3720      	adds	r7, #32
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b08a      	sub	sp, #40	; 0x28
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	0c5b      	lsrs	r3, r3, #17
 8005078:	f003 030f 	and.w	r3, r3, #15
 800507c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	091b      	lsrs	r3, r3, #4
 8005082:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005086:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	2b02      	cmp	r3, #2
 800508c:	d004      	beq.n	8005098 <HCD_RXQLVL_IRQHandler+0x46>
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2b05      	cmp	r3, #5
 8005092:	f000 80a9 	beq.w	80051e8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005096:	e0aa      	b.n	80051ee <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 80a6 	beq.w	80051ec <HCD_RXQLVL_IRQHandler+0x19a>
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	212c      	movs	r1, #44	; 0x2c
 80050a6:	fb01 f303 	mul.w	r3, r1, r3
 80050aa:	4413      	add	r3, r2
 80050ac:	3344      	adds	r3, #68	; 0x44
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 809b 	beq.w	80051ec <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	212c      	movs	r1, #44	; 0x2c
 80050bc:	fb01 f303 	mul.w	r3, r1, r3
 80050c0:	4413      	add	r3, r2
 80050c2:	3350      	adds	r3, #80	; 0x50
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	441a      	add	r2, r3
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	202c      	movs	r0, #44	; 0x2c
 80050d0:	fb00 f303 	mul.w	r3, r0, r3
 80050d4:	440b      	add	r3, r1
 80050d6:	334c      	adds	r3, #76	; 0x4c
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d87a      	bhi.n	80051d4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6818      	ldr	r0, [r3, #0]
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	212c      	movs	r1, #44	; 0x2c
 80050e8:	fb01 f303 	mul.w	r3, r1, r3
 80050ec:	4413      	add	r3, r2
 80050ee:	3344      	adds	r3, #68	; 0x44
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	b292      	uxth	r2, r2
 80050f6:	4619      	mov	r1, r3
 80050f8:	f002 fa68 	bl	80075cc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	212c      	movs	r1, #44	; 0x2c
 8005102:	fb01 f303 	mul.w	r3, r1, r3
 8005106:	4413      	add	r3, r2
 8005108:	3344      	adds	r3, #68	; 0x44
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	441a      	add	r2, r3
 8005110:	6879      	ldr	r1, [r7, #4]
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	202c      	movs	r0, #44	; 0x2c
 8005116:	fb00 f303 	mul.w	r3, r0, r3
 800511a:	440b      	add	r3, r1
 800511c:	3344      	adds	r3, #68	; 0x44
 800511e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	212c      	movs	r1, #44	; 0x2c
 8005126:	fb01 f303 	mul.w	r3, r1, r3
 800512a:	4413      	add	r3, r2
 800512c:	3350      	adds	r3, #80	; 0x50
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	441a      	add	r2, r3
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	202c      	movs	r0, #44	; 0x2c
 800513a:	fb00 f303 	mul.w	r3, r0, r3
 800513e:	440b      	add	r3, r1
 8005140:	3350      	adds	r3, #80	; 0x50
 8005142:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	4413      	add	r3, r2
 800514c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	0cdb      	lsrs	r3, r3, #19
 8005154:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005158:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	212c      	movs	r1, #44	; 0x2c
 8005160:	fb01 f303 	mul.w	r3, r1, r3
 8005164:	4413      	add	r3, r2
 8005166:	3340      	adds	r3, #64	; 0x40
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	461a      	mov	r2, r3
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	4293      	cmp	r3, r2
 8005170:	d13c      	bne.n	80051ec <HCD_RXQLVL_IRQHandler+0x19a>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d039      	beq.n	80051ec <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	4413      	add	r3, r2
 8005180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800518e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005196:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a4:	461a      	mov	r2, r3
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	212c      	movs	r1, #44	; 0x2c
 80051b0:	fb01 f303 	mul.w	r3, r1, r3
 80051b4:	4413      	add	r3, r2
 80051b6:	3354      	adds	r3, #84	; 0x54
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	f083 0301 	eor.w	r3, r3, #1
 80051be:	b2d8      	uxtb	r0, r3
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	212c      	movs	r1, #44	; 0x2c
 80051c6:	fb01 f303 	mul.w	r3, r1, r3
 80051ca:	4413      	add	r3, r2
 80051cc:	3354      	adds	r3, #84	; 0x54
 80051ce:	4602      	mov	r2, r0
 80051d0:	701a      	strb	r2, [r3, #0]
      break;
 80051d2:	e00b      	b.n	80051ec <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	212c      	movs	r1, #44	; 0x2c
 80051da:	fb01 f303 	mul.w	r3, r1, r3
 80051de:	4413      	add	r3, r2
 80051e0:	3360      	adds	r3, #96	; 0x60
 80051e2:	2204      	movs	r2, #4
 80051e4:	701a      	strb	r2, [r3, #0]
      break;
 80051e6:	e001      	b.n	80051ec <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80051e8:	bf00      	nop
 80051ea:	e000      	b.n	80051ee <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80051ec:	bf00      	nop
  }
}
 80051ee:	bf00      	nop
 80051f0:	3728      	adds	r7, #40	; 0x28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b086      	sub	sp, #24
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005222:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b02      	cmp	r3, #2
 800522c:	d10b      	bne.n	8005246 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b01      	cmp	r3, #1
 8005236:	d102      	bne.n	800523e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f005 f8f7 	bl	800a42c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	f043 0302 	orr.w	r3, r3, #2
 8005244:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f003 0308 	and.w	r3, r3, #8
 800524c:	2b08      	cmp	r3, #8
 800524e:	d132      	bne.n	80052b6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	f043 0308 	orr.w	r3, r3, #8
 8005256:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f003 0304 	and.w	r3, r3, #4
 800525e:	2b04      	cmp	r3, #4
 8005260:	d126      	bne.n	80052b0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	2b02      	cmp	r3, #2
 8005268:	d113      	bne.n	8005292 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005270:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005274:	d106      	bne.n	8005284 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2102      	movs	r1, #2
 800527c:	4618      	mov	r0, r3
 800527e:	f002 fb13 	bl	80078a8 <USB_InitFSLSPClkSel>
 8005282:	e011      	b.n	80052a8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2101      	movs	r1, #1
 800528a:	4618      	mov	r0, r3
 800528c:	f002 fb0c 	bl	80078a8 <USB_InitFSLSPClkSel>
 8005290:	e00a      	b.n	80052a8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d106      	bne.n	80052a8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052a0:	461a      	mov	r2, r3
 80052a2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80052a6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f005 f8e9 	bl	800a480 <HAL_HCD_PortEnabled_Callback>
 80052ae:	e002      	b.n	80052b6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f005 f8f3 	bl	800a49c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f003 0320 	and.w	r3, r3, #32
 80052bc:	2b20      	cmp	r3, #32
 80052be:	d103      	bne.n	80052c8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	f043 0320 	orr.w	r3, r3, #32
 80052c6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80052ce:	461a      	mov	r2, r3
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	6013      	str	r3, [r2, #0]
}
 80052d4:	bf00      	nop
 80052d6:	3718      	adds	r7, #24
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e12b      	b.n	8005546 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d106      	bne.n	8005308 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7fb fd26 	bl	8000d54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2224      	movs	r2, #36	; 0x24
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0201 	bic.w	r2, r2, #1
 800531e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800532e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800533e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005340:	f001 fa20 	bl	8006784 <HAL_RCC_GetPCLK1Freq>
 8005344:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	4a81      	ldr	r2, [pc, #516]	; (8005550 <HAL_I2C_Init+0x274>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d807      	bhi.n	8005360 <HAL_I2C_Init+0x84>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4a80      	ldr	r2, [pc, #512]	; (8005554 <HAL_I2C_Init+0x278>)
 8005354:	4293      	cmp	r3, r2
 8005356:	bf94      	ite	ls
 8005358:	2301      	movls	r3, #1
 800535a:	2300      	movhi	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	e006      	b.n	800536e <HAL_I2C_Init+0x92>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4a7d      	ldr	r2, [pc, #500]	; (8005558 <HAL_I2C_Init+0x27c>)
 8005364:	4293      	cmp	r3, r2
 8005366:	bf94      	ite	ls
 8005368:	2301      	movls	r3, #1
 800536a:	2300      	movhi	r3, #0
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e0e7      	b.n	8005546 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	4a78      	ldr	r2, [pc, #480]	; (800555c <HAL_I2C_Init+0x280>)
 800537a:	fba2 2303 	umull	r2, r3, r2, r3
 800537e:	0c9b      	lsrs	r3, r3, #18
 8005380:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	430a      	orrs	r2, r1
 8005394:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	4a6a      	ldr	r2, [pc, #424]	; (8005550 <HAL_I2C_Init+0x274>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d802      	bhi.n	80053b0 <HAL_I2C_Init+0xd4>
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	3301      	adds	r3, #1
 80053ae:	e009      	b.n	80053c4 <HAL_I2C_Init+0xe8>
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80053b6:	fb02 f303 	mul.w	r3, r2, r3
 80053ba:	4a69      	ldr	r2, [pc, #420]	; (8005560 <HAL_I2C_Init+0x284>)
 80053bc:	fba2 2303 	umull	r2, r3, r2, r3
 80053c0:	099b      	lsrs	r3, r3, #6
 80053c2:	3301      	adds	r3, #1
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	6812      	ldr	r2, [r2, #0]
 80053c8:	430b      	orrs	r3, r1
 80053ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80053d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	495c      	ldr	r1, [pc, #368]	; (8005550 <HAL_I2C_Init+0x274>)
 80053e0:	428b      	cmp	r3, r1
 80053e2:	d819      	bhi.n	8005418 <HAL_I2C_Init+0x13c>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	1e59      	subs	r1, r3, #1
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80053f2:	1c59      	adds	r1, r3, #1
 80053f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80053f8:	400b      	ands	r3, r1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <HAL_I2C_Init+0x138>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	1e59      	subs	r1, r3, #1
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	005b      	lsls	r3, r3, #1
 8005408:	fbb1 f3f3 	udiv	r3, r1, r3
 800540c:	3301      	adds	r3, #1
 800540e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005412:	e051      	b.n	80054b8 <HAL_I2C_Init+0x1dc>
 8005414:	2304      	movs	r3, #4
 8005416:	e04f      	b.n	80054b8 <HAL_I2C_Init+0x1dc>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d111      	bne.n	8005444 <HAL_I2C_Init+0x168>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	1e58      	subs	r0, r3, #1
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6859      	ldr	r1, [r3, #4]
 8005428:	460b      	mov	r3, r1
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	440b      	add	r3, r1
 800542e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005432:	3301      	adds	r3, #1
 8005434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005438:	2b00      	cmp	r3, #0
 800543a:	bf0c      	ite	eq
 800543c:	2301      	moveq	r3, #1
 800543e:	2300      	movne	r3, #0
 8005440:	b2db      	uxtb	r3, r3
 8005442:	e012      	b.n	800546a <HAL_I2C_Init+0x18e>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	1e58      	subs	r0, r3, #1
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6859      	ldr	r1, [r3, #4]
 800544c:	460b      	mov	r3, r1
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	440b      	add	r3, r1
 8005452:	0099      	lsls	r1, r3, #2
 8005454:	440b      	add	r3, r1
 8005456:	fbb0 f3f3 	udiv	r3, r0, r3
 800545a:	3301      	adds	r3, #1
 800545c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005460:	2b00      	cmp	r3, #0
 8005462:	bf0c      	ite	eq
 8005464:	2301      	moveq	r3, #1
 8005466:	2300      	movne	r3, #0
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <HAL_I2C_Init+0x196>
 800546e:	2301      	movs	r3, #1
 8005470:	e022      	b.n	80054b8 <HAL_I2C_Init+0x1dc>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10e      	bne.n	8005498 <HAL_I2C_Init+0x1bc>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	1e58      	subs	r0, r3, #1
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6859      	ldr	r1, [r3, #4]
 8005482:	460b      	mov	r3, r1
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	440b      	add	r3, r1
 8005488:	fbb0 f3f3 	udiv	r3, r0, r3
 800548c:	3301      	adds	r3, #1
 800548e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005496:	e00f      	b.n	80054b8 <HAL_I2C_Init+0x1dc>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	1e58      	subs	r0, r3, #1
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6859      	ldr	r1, [r3, #4]
 80054a0:	460b      	mov	r3, r1
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	440b      	add	r3, r1
 80054a6:	0099      	lsls	r1, r3, #2
 80054a8:	440b      	add	r3, r1
 80054aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80054ae:	3301      	adds	r3, #1
 80054b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054b8:	6879      	ldr	r1, [r7, #4]
 80054ba:	6809      	ldr	r1, [r1, #0]
 80054bc:	4313      	orrs	r3, r2
 80054be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	69da      	ldr	r2, [r3, #28]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	431a      	orrs	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80054e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6911      	ldr	r1, [r2, #16]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	68d2      	ldr	r2, [r2, #12]
 80054f2:	4311      	orrs	r1, r2
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	6812      	ldr	r2, [r2, #0]
 80054f8:	430b      	orrs	r3, r1
 80054fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	695a      	ldr	r2, [r3, #20]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	431a      	orrs	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0201 	orr.w	r2, r2, #1
 8005526:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2220      	movs	r2, #32
 8005532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	000186a0 	.word	0x000186a0
 8005554:	001e847f 	.word	0x001e847f
 8005558:	003d08ff 	.word	0x003d08ff
 800555c:	431bde83 	.word	0x431bde83
 8005560:	10624dd3 	.word	0x10624dd3

08005564 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b088      	sub	sp, #32
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e128      	b.n	80057c8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d109      	bne.n	8005596 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a90      	ldr	r2, [pc, #576]	; (80057d0 <HAL_I2S_Init+0x26c>)
 800558e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7fb fc4f 	bl	8000e34 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2202      	movs	r2, #2
 800559a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	6812      	ldr	r2, [r2, #0]
 80055a8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80055ac:	f023 030f 	bic.w	r3, r3, #15
 80055b0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2202      	movs	r2, #2
 80055b8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d060      	beq.n	8005684 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d102      	bne.n	80055d0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80055ca:	2310      	movs	r3, #16
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	e001      	b.n	80055d4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80055d0:	2320      	movs	r3, #32
 80055d2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	2b20      	cmp	r3, #32
 80055da:	d802      	bhi.n	80055e2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	005b      	lsls	r3, r3, #1
 80055e0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80055e2:	2001      	movs	r0, #1
 80055e4:	f001 f9d8 	bl	8006998 <HAL_RCCEx_GetPeriphCLKFreq>
 80055e8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055f2:	d125      	bne.n	8005640 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d010      	beq.n	800561e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	fbb2 f2f3 	udiv	r2, r2, r3
 8005606:	4613      	mov	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	461a      	mov	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	fbb2 f3f3 	udiv	r3, r2, r3
 8005618:	3305      	adds	r3, #5
 800561a:	613b      	str	r3, [r7, #16]
 800561c:	e01f      	b.n	800565e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	fbb2 f2f3 	udiv	r2, r2, r3
 8005628:	4613      	mov	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	461a      	mov	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	fbb2 f3f3 	udiv	r3, r2, r3
 800563a:	3305      	adds	r3, #5
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	e00e      	b.n	800565e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	fbb2 f2f3 	udiv	r2, r2, r3
 8005648:	4613      	mov	r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	461a      	mov	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	fbb2 f3f3 	udiv	r3, r2, r3
 800565a:	3305      	adds	r3, #5
 800565c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	4a5c      	ldr	r2, [pc, #368]	; (80057d4 <HAL_I2S_Init+0x270>)
 8005662:	fba2 2303 	umull	r2, r3, r2, r3
 8005666:	08db      	lsrs	r3, r3, #3
 8005668:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	085b      	lsrs	r3, r3, #1
 800567a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	021b      	lsls	r3, r3, #8
 8005680:	61bb      	str	r3, [r7, #24]
 8005682:	e003      	b.n	800568c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005684:	2302      	movs	r3, #2
 8005686:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d902      	bls.n	8005698 <HAL_I2S_Init+0x134>
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	2bff      	cmp	r3, #255	; 0xff
 8005696:	d907      	bls.n	80056a8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569c:	f043 0210 	orr.w	r2, r3, #16
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e08f      	b.n	80057c8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691a      	ldr	r2, [r3, #16]
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	ea42 0103 	orr.w	r1, r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	69fa      	ldr	r2, [r7, #28]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80056c6:	f023 030f 	bic.w	r3, r3, #15
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	6851      	ldr	r1, [r2, #4]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	6892      	ldr	r2, [r2, #8]
 80056d2:	4311      	orrs	r1, r2
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	68d2      	ldr	r2, [r2, #12]
 80056d8:	4311      	orrs	r1, r2
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	6992      	ldr	r2, [r2, #24]
 80056de:	430a      	orrs	r2, r1
 80056e0:	431a      	orrs	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056ea:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d161      	bne.n	80057b8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a38      	ldr	r2, [pc, #224]	; (80057d8 <HAL_I2S_Init+0x274>)
 80056f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a37      	ldr	r2, [pc, #220]	; (80057dc <HAL_I2S_Init+0x278>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d101      	bne.n	8005708 <HAL_I2S_Init+0x1a4>
 8005704:	4b36      	ldr	r3, [pc, #216]	; (80057e0 <HAL_I2S_Init+0x27c>)
 8005706:	e001      	b.n	800570c <HAL_I2S_Init+0x1a8>
 8005708:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	6812      	ldr	r2, [r2, #0]
 8005712:	4932      	ldr	r1, [pc, #200]	; (80057dc <HAL_I2S_Init+0x278>)
 8005714:	428a      	cmp	r2, r1
 8005716:	d101      	bne.n	800571c <HAL_I2S_Init+0x1b8>
 8005718:	4a31      	ldr	r2, [pc, #196]	; (80057e0 <HAL_I2S_Init+0x27c>)
 800571a:	e001      	b.n	8005720 <HAL_I2S_Init+0x1bc>
 800571c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005720:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005724:	f023 030f 	bic.w	r3, r3, #15
 8005728:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a2b      	ldr	r2, [pc, #172]	; (80057dc <HAL_I2S_Init+0x278>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d101      	bne.n	8005738 <HAL_I2S_Init+0x1d4>
 8005734:	4b2a      	ldr	r3, [pc, #168]	; (80057e0 <HAL_I2S_Init+0x27c>)
 8005736:	e001      	b.n	800573c <HAL_I2S_Init+0x1d8>
 8005738:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800573c:	2202      	movs	r2, #2
 800573e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a25      	ldr	r2, [pc, #148]	; (80057dc <HAL_I2S_Init+0x278>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d101      	bne.n	800574e <HAL_I2S_Init+0x1ea>
 800574a:	4b25      	ldr	r3, [pc, #148]	; (80057e0 <HAL_I2S_Init+0x27c>)
 800574c:	e001      	b.n	8005752 <HAL_I2S_Init+0x1ee>
 800574e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005752:	69db      	ldr	r3, [r3, #28]
 8005754:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800575e:	d003      	beq.n	8005768 <HAL_I2S_Init+0x204>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d103      	bne.n	8005770 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005768:	f44f 7380 	mov.w	r3, #256	; 0x100
 800576c:	613b      	str	r3, [r7, #16]
 800576e:	e001      	b.n	8005774 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005770:	2300      	movs	r3, #0
 8005772:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800577e:	4313      	orrs	r3, r2
 8005780:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005788:	4313      	orrs	r3, r2
 800578a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005792:	4313      	orrs	r3, r2
 8005794:	b29a      	uxth	r2, r3
 8005796:	897b      	ldrh	r3, [r7, #10]
 8005798:	4313      	orrs	r3, r2
 800579a:	b29b      	uxth	r3, r3
 800579c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80057a0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a0d      	ldr	r2, [pc, #52]	; (80057dc <HAL_I2S_Init+0x278>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d101      	bne.n	80057b0 <HAL_I2S_Init+0x24c>
 80057ac:	4b0c      	ldr	r3, [pc, #48]	; (80057e0 <HAL_I2S_Init+0x27c>)
 80057ae:	e001      	b.n	80057b4 <HAL_I2S_Init+0x250>
 80057b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057b4:	897a      	ldrh	r2, [r7, #10]
 80057b6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3720      	adds	r7, #32
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	080058db 	.word	0x080058db
 80057d4:	cccccccd 	.word	0xcccccccd
 80057d8:	080059f1 	.word	0x080059f1
 80057dc:	40003800 	.word	0x40003800
 80057e0:	40003400 	.word	0x40003400

080057e4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	881a      	ldrh	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005838:	1c9a      	adds	r2, r3, #2
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005842:	b29b      	uxth	r3, r3
 8005844:	3b01      	subs	r3, #1
 8005846:	b29a      	uxth	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005850:	b29b      	uxth	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10e      	bne.n	8005874 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005864:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7ff ffb8 	bl	80057e4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005874:	bf00      	nop
 8005876:	3708      	adds	r7, #8
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68da      	ldr	r2, [r3, #12]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588e:	b292      	uxth	r2, r2
 8005890:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005896:	1c9a      	adds	r2, r3, #2
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	3b01      	subs	r3, #1
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10e      	bne.n	80058d2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685a      	ldr	r2, [r3, #4]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80058c2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7ff ff93 	bl	80057f8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80058d2:	bf00      	nop
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b086      	sub	sp, #24
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	d13a      	bne.n	800596c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f003 0301 	and.w	r3, r3, #1
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d109      	bne.n	8005914 <I2S_IRQHandler+0x3a>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590a:	2b40      	cmp	r3, #64	; 0x40
 800590c:	d102      	bne.n	8005914 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7ff ffb4 	bl	800587c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591a:	2b40      	cmp	r3, #64	; 0x40
 800591c:	d126      	bne.n	800596c <I2S_IRQHandler+0x92>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f003 0320 	and.w	r3, r3, #32
 8005928:	2b20      	cmp	r3, #32
 800592a:	d11f      	bne.n	800596c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800593a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800593c:	2300      	movs	r3, #0
 800593e:	613b      	str	r3, [r7, #16]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	613b      	str	r3, [r7, #16]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	613b      	str	r3, [r7, #16]
 8005950:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595e:	f043 0202 	orr.w	r2, r3, #2
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7ff ff50 	bl	800580c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b03      	cmp	r3, #3
 8005976:	d136      	bne.n	80059e6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b02      	cmp	r3, #2
 8005980:	d109      	bne.n	8005996 <I2S_IRQHandler+0xbc>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598c:	2b80      	cmp	r3, #128	; 0x80
 800598e:	d102      	bne.n	8005996 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7ff ff45 	bl	8005820 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	f003 0308 	and.w	r3, r3, #8
 800599c:	2b08      	cmp	r3, #8
 800599e:	d122      	bne.n	80059e6 <I2S_IRQHandler+0x10c>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f003 0320 	and.w	r3, r3, #32
 80059aa:	2b20      	cmp	r3, #32
 80059ac:	d11b      	bne.n	80059e6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80059bc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80059be:	2300      	movs	r3, #0
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d8:	f043 0204 	orr.w	r2, r3, #4
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f7ff ff13 	bl	800580c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80059e6:	bf00      	nop
 80059e8:	3718      	adds	r7, #24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
	...

080059f0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b088      	sub	sp, #32
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a92      	ldr	r2, [pc, #584]	; (8005c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d101      	bne.n	8005a0e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005a0a:	4b92      	ldr	r3, [pc, #584]	; (8005c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a0c:	e001      	b.n	8005a12 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005a0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a8b      	ldr	r2, [pc, #556]	; (8005c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d101      	bne.n	8005a2c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005a28:	4b8a      	ldr	r3, [pc, #552]	; (8005c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a2a:	e001      	b.n	8005a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005a2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a3c:	d004      	beq.n	8005a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f040 8099 	bne.w	8005b7a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d107      	bne.n	8005a62 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f925 	bl	8005cac <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	f003 0301 	and.w	r3, r3, #1
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d107      	bne.n	8005a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d002      	beq.n	8005a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f9c8 	bl	8005e0c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a82:	2b40      	cmp	r3, #64	; 0x40
 8005a84:	d13a      	bne.n	8005afc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f003 0320 	and.w	r3, r3, #32
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d035      	beq.n	8005afc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a6e      	ldr	r2, [pc, #440]	; (8005c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d101      	bne.n	8005a9e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005a9a:	4b6e      	ldr	r3, [pc, #440]	; (8005c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a9c:	e001      	b.n	8005aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005a9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4969      	ldr	r1, [pc, #420]	; (8005c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005aaa:	428b      	cmp	r3, r1
 8005aac:	d101      	bne.n	8005ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005aae:	4b69      	ldr	r3, [pc, #420]	; (8005c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ab0:	e001      	b.n	8005ab6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005ab2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ab6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005aba:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005aca:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005acc:	2300      	movs	r3, #0
 8005ace:	60fb      	str	r3, [r7, #12]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	60fb      	str	r3, [r7, #12]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aee:	f043 0202 	orr.w	r2, r3, #2
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7ff fe88 	bl	800580c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	f003 0308 	and.w	r3, r3, #8
 8005b02:	2b08      	cmp	r3, #8
 8005b04:	f040 80c3 	bne.w	8005c8e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f003 0320 	and.w	r3, r3, #32
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f000 80bd 	beq.w	8005c8e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b22:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a49      	ldr	r2, [pc, #292]	; (8005c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d101      	bne.n	8005b32 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005b2e:	4b49      	ldr	r3, [pc, #292]	; (8005c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b30:	e001      	b.n	8005b36 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005b32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4944      	ldr	r1, [pc, #272]	; (8005c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b3e:	428b      	cmp	r3, r1
 8005b40:	d101      	bne.n	8005b46 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005b42:	4b44      	ldr	r3, [pc, #272]	; (8005c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b44:	e001      	b.n	8005b4a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005b46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b4e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005b50:	2300      	movs	r3, #0
 8005b52:	60bb      	str	r3, [r7, #8]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	60bb      	str	r3, [r7, #8]
 8005b5c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b6a:	f043 0204 	orr.w	r2, r3, #4
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7ff fe4a 	bl	800580c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005b78:	e089      	b.n	8005c8e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	f003 0302 	and.w	r3, r3, #2
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d107      	bne.n	8005b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f8be 	bl	8005d10 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d107      	bne.n	8005bae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d002      	beq.n	8005bae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 f8fd 	bl	8005da8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb4:	2b40      	cmp	r3, #64	; 0x40
 8005bb6:	d12f      	bne.n	8005c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f003 0320 	and.w	r3, r3, #32
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d02a      	beq.n	8005c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005bd0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a1e      	ldr	r2, [pc, #120]	; (8005c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d101      	bne.n	8005be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005bdc:	4b1d      	ldr	r3, [pc, #116]	; (8005c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005bde:	e001      	b.n	8005be4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005be0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4919      	ldr	r1, [pc, #100]	; (8005c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005bec:	428b      	cmp	r3, r1
 8005bee:	d101      	bne.n	8005bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005bf0:	4b18      	ldr	r3, [pc, #96]	; (8005c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005bf2:	e001      	b.n	8005bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005bf4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bf8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005bfc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c0a:	f043 0202 	orr.w	r2, r3, #2
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7ff fdfa 	bl	800580c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	f003 0308 	and.w	r3, r3, #8
 8005c1e:	2b08      	cmp	r3, #8
 8005c20:	d136      	bne.n	8005c90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f003 0320 	and.w	r3, r3, #32
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d031      	beq.n	8005c90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a07      	ldr	r2, [pc, #28]	; (8005c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d101      	bne.n	8005c3a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005c36:	4b07      	ldr	r3, [pc, #28]	; (8005c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c38:	e001      	b.n	8005c3e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005c3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4902      	ldr	r1, [pc, #8]	; (8005c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c46:	428b      	cmp	r3, r1
 8005c48:	d106      	bne.n	8005c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005c4a:	4b02      	ldr	r3, [pc, #8]	; (8005c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c4c:	e006      	b.n	8005c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005c4e:	bf00      	nop
 8005c50:	40003800 	.word	0x40003800
 8005c54:	40003400 	.word	0x40003400
 8005c58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c60:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c70:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c7e:	f043 0204 	orr.w	r2, r3, #4
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7ff fdc0 	bl	800580c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c8c:	e000      	b.n	8005c90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005c8e:	bf00      	nop
}
 8005c90:	bf00      	nop
 8005c92:	3720      	adds	r7, #32
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	1c99      	adds	r1, r3, #2
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	6251      	str	r1, [r2, #36]	; 0x24
 8005cbe:	881a      	ldrh	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d113      	bne.n	8005d06 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005cec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d106      	bne.n	8005d06 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f7ff ffc9 	bl	8005c98 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d06:	bf00      	nop
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
	...

08005d10 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1c:	1c99      	adds	r1, r3, #2
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	6251      	str	r1, [r2, #36]	; 0x24
 8005d22:	8819      	ldrh	r1, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a1d      	ldr	r2, [pc, #116]	; (8005da0 <I2SEx_TxISR_I2SExt+0x90>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d101      	bne.n	8005d32 <I2SEx_TxISR_I2SExt+0x22>
 8005d2e:	4b1d      	ldr	r3, [pc, #116]	; (8005da4 <I2SEx_TxISR_I2SExt+0x94>)
 8005d30:	e001      	b.n	8005d36 <I2SEx_TxISR_I2SExt+0x26>
 8005d32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d36:	460a      	mov	r2, r1
 8005d38:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	3b01      	subs	r3, #1
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d121      	bne.n	8005d96 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a12      	ldr	r2, [pc, #72]	; (8005da0 <I2SEx_TxISR_I2SExt+0x90>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d101      	bne.n	8005d60 <I2SEx_TxISR_I2SExt+0x50>
 8005d5c:	4b11      	ldr	r3, [pc, #68]	; (8005da4 <I2SEx_TxISR_I2SExt+0x94>)
 8005d5e:	e001      	b.n	8005d64 <I2SEx_TxISR_I2SExt+0x54>
 8005d60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	490d      	ldr	r1, [pc, #52]	; (8005da0 <I2SEx_TxISR_I2SExt+0x90>)
 8005d6c:	428b      	cmp	r3, r1
 8005d6e:	d101      	bne.n	8005d74 <I2SEx_TxISR_I2SExt+0x64>
 8005d70:	4b0c      	ldr	r3, [pc, #48]	; (8005da4 <I2SEx_TxISR_I2SExt+0x94>)
 8005d72:	e001      	b.n	8005d78 <I2SEx_TxISR_I2SExt+0x68>
 8005d74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d7c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d106      	bne.n	8005d96 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f7ff ff81 	bl	8005c98 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d96:	bf00      	nop
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	40003800 	.word	0x40003800
 8005da4:	40003400 	.word	0x40003400

08005da8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68d8      	ldr	r0, [r3, #12]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dba:	1c99      	adds	r1, r3, #2
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005dc0:	b282      	uxth	r2, r0
 8005dc2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d113      	bne.n	8005e04 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005dea:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d106      	bne.n	8005e04 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff ff4a 	bl	8005c98 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e04:	bf00      	nop
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a20      	ldr	r2, [pc, #128]	; (8005e9c <I2SEx_RxISR_I2SExt+0x90>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d101      	bne.n	8005e22 <I2SEx_RxISR_I2SExt+0x16>
 8005e1e:	4b20      	ldr	r3, [pc, #128]	; (8005ea0 <I2SEx_RxISR_I2SExt+0x94>)
 8005e20:	e001      	b.n	8005e26 <I2SEx_RxISR_I2SExt+0x1a>
 8005e22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e26:	68d8      	ldr	r0, [r3, #12]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2c:	1c99      	adds	r1, r3, #2
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005e32:	b282      	uxth	r2, r0
 8005e34:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d121      	bne.n	8005e92 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a12      	ldr	r2, [pc, #72]	; (8005e9c <I2SEx_RxISR_I2SExt+0x90>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d101      	bne.n	8005e5c <I2SEx_RxISR_I2SExt+0x50>
 8005e58:	4b11      	ldr	r3, [pc, #68]	; (8005ea0 <I2SEx_RxISR_I2SExt+0x94>)
 8005e5a:	e001      	b.n	8005e60 <I2SEx_RxISR_I2SExt+0x54>
 8005e5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	490d      	ldr	r1, [pc, #52]	; (8005e9c <I2SEx_RxISR_I2SExt+0x90>)
 8005e68:	428b      	cmp	r3, r1
 8005e6a:	d101      	bne.n	8005e70 <I2SEx_RxISR_I2SExt+0x64>
 8005e6c:	4b0c      	ldr	r3, [pc, #48]	; (8005ea0 <I2SEx_RxISR_I2SExt+0x94>)
 8005e6e:	e001      	b.n	8005e74 <I2SEx_RxISR_I2SExt+0x68>
 8005e70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e74:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e78:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d106      	bne.n	8005e92 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7ff ff03 	bl	8005c98 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e92:	bf00      	nop
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	40003800 	.word	0x40003800
 8005ea0:	40003400 	.word	0x40003400

08005ea4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e267      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d075      	beq.n	8005fae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ec2:	4b88      	ldr	r3, [pc, #544]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f003 030c 	and.w	r3, r3, #12
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	d00c      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ece:	4b85      	ldr	r3, [pc, #532]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ed6:	2b08      	cmp	r3, #8
 8005ed8:	d112      	bne.n	8005f00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005eda:	4b82      	ldr	r3, [pc, #520]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ee2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ee6:	d10b      	bne.n	8005f00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ee8:	4b7e      	ldr	r3, [pc, #504]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d05b      	beq.n	8005fac <HAL_RCC_OscConfig+0x108>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d157      	bne.n	8005fac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e242      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f08:	d106      	bne.n	8005f18 <HAL_RCC_OscConfig+0x74>
 8005f0a:	4b76      	ldr	r3, [pc, #472]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a75      	ldr	r2, [pc, #468]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f14:	6013      	str	r3, [r2, #0]
 8005f16:	e01d      	b.n	8005f54 <HAL_RCC_OscConfig+0xb0>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f20:	d10c      	bne.n	8005f3c <HAL_RCC_OscConfig+0x98>
 8005f22:	4b70      	ldr	r3, [pc, #448]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a6f      	ldr	r2, [pc, #444]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f2c:	6013      	str	r3, [r2, #0]
 8005f2e:	4b6d      	ldr	r3, [pc, #436]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a6c      	ldr	r2, [pc, #432]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f38:	6013      	str	r3, [r2, #0]
 8005f3a:	e00b      	b.n	8005f54 <HAL_RCC_OscConfig+0xb0>
 8005f3c:	4b69      	ldr	r3, [pc, #420]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a68      	ldr	r2, [pc, #416]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f46:	6013      	str	r3, [r2, #0]
 8005f48:	4b66      	ldr	r3, [pc, #408]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a65      	ldr	r2, [pc, #404]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d013      	beq.n	8005f84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f5c:	f7fd f9c0 	bl	80032e0 <HAL_GetTick>
 8005f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f62:	e008      	b.n	8005f76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f64:	f7fd f9bc 	bl	80032e0 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b64      	cmp	r3, #100	; 0x64
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e207      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f76:	4b5b      	ldr	r3, [pc, #364]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d0f0      	beq.n	8005f64 <HAL_RCC_OscConfig+0xc0>
 8005f82:	e014      	b.n	8005fae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f84:	f7fd f9ac 	bl	80032e0 <HAL_GetTick>
 8005f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f8a:	e008      	b.n	8005f9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f8c:	f7fd f9a8 	bl	80032e0 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b64      	cmp	r3, #100	; 0x64
 8005f98:	d901      	bls.n	8005f9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e1f3      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f9e:	4b51      	ldr	r3, [pc, #324]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1f0      	bne.n	8005f8c <HAL_RCC_OscConfig+0xe8>
 8005faa:	e000      	b.n	8005fae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d063      	beq.n	8006082 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005fba:	4b4a      	ldr	r3, [pc, #296]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f003 030c 	and.w	r3, r3, #12
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00b      	beq.n	8005fde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fc6:	4b47      	ldr	r3, [pc, #284]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005fce:	2b08      	cmp	r3, #8
 8005fd0:	d11c      	bne.n	800600c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fd2:	4b44      	ldr	r3, [pc, #272]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d116      	bne.n	800600c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fde:	4b41      	ldr	r3, [pc, #260]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d005      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x152>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d001      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e1c7      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ff6:	4b3b      	ldr	r3, [pc, #236]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	00db      	lsls	r3, r3, #3
 8006004:	4937      	ldr	r1, [pc, #220]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8006006:	4313      	orrs	r3, r2
 8006008:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800600a:	e03a      	b.n	8006082 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d020      	beq.n	8006056 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006014:	4b34      	ldr	r3, [pc, #208]	; (80060e8 <HAL_RCC_OscConfig+0x244>)
 8006016:	2201      	movs	r2, #1
 8006018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800601a:	f7fd f961 	bl	80032e0 <HAL_GetTick>
 800601e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006020:	e008      	b.n	8006034 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006022:	f7fd f95d 	bl	80032e0 <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	2b02      	cmp	r3, #2
 800602e:	d901      	bls.n	8006034 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e1a8      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006034:	4b2b      	ldr	r3, [pc, #172]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b00      	cmp	r3, #0
 800603e:	d0f0      	beq.n	8006022 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006040:	4b28      	ldr	r3, [pc, #160]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	00db      	lsls	r3, r3, #3
 800604e:	4925      	ldr	r1, [pc, #148]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8006050:	4313      	orrs	r3, r2
 8006052:	600b      	str	r3, [r1, #0]
 8006054:	e015      	b.n	8006082 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006056:	4b24      	ldr	r3, [pc, #144]	; (80060e8 <HAL_RCC_OscConfig+0x244>)
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800605c:	f7fd f940 	bl	80032e0 <HAL_GetTick>
 8006060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006062:	e008      	b.n	8006076 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006064:	f7fd f93c 	bl	80032e0 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2b02      	cmp	r3, #2
 8006070:	d901      	bls.n	8006076 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e187      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006076:	4b1b      	ldr	r3, [pc, #108]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1f0      	bne.n	8006064 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0308 	and.w	r3, r3, #8
 800608a:	2b00      	cmp	r3, #0
 800608c:	d036      	beq.n	80060fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d016      	beq.n	80060c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006096:	4b15      	ldr	r3, [pc, #84]	; (80060ec <HAL_RCC_OscConfig+0x248>)
 8006098:	2201      	movs	r2, #1
 800609a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800609c:	f7fd f920 	bl	80032e0 <HAL_GetTick>
 80060a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060a2:	e008      	b.n	80060b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060a4:	f7fd f91c 	bl	80032e0 <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e167      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060b6:	4b0b      	ldr	r3, [pc, #44]	; (80060e4 <HAL_RCC_OscConfig+0x240>)
 80060b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0f0      	beq.n	80060a4 <HAL_RCC_OscConfig+0x200>
 80060c2:	e01b      	b.n	80060fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060c4:	4b09      	ldr	r3, [pc, #36]	; (80060ec <HAL_RCC_OscConfig+0x248>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060ca:	f7fd f909 	bl	80032e0 <HAL_GetTick>
 80060ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060d0:	e00e      	b.n	80060f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060d2:	f7fd f905 	bl	80032e0 <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d907      	bls.n	80060f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e150      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
 80060e4:	40023800 	.word	0x40023800
 80060e8:	42470000 	.word	0x42470000
 80060ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060f0:	4b88      	ldr	r3, [pc, #544]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 80060f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1ea      	bne.n	80060d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0304 	and.w	r3, r3, #4
 8006104:	2b00      	cmp	r3, #0
 8006106:	f000 8097 	beq.w	8006238 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800610a:	2300      	movs	r3, #0
 800610c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800610e:	4b81      	ldr	r3, [pc, #516]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10f      	bne.n	800613a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800611a:	2300      	movs	r3, #0
 800611c:	60bb      	str	r3, [r7, #8]
 800611e:	4b7d      	ldr	r3, [pc, #500]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	4a7c      	ldr	r2, [pc, #496]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 8006124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006128:	6413      	str	r3, [r2, #64]	; 0x40
 800612a:	4b7a      	ldr	r3, [pc, #488]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 800612c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006132:	60bb      	str	r3, [r7, #8]
 8006134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006136:	2301      	movs	r3, #1
 8006138:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800613a:	4b77      	ldr	r3, [pc, #476]	; (8006318 <HAL_RCC_OscConfig+0x474>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006142:	2b00      	cmp	r3, #0
 8006144:	d118      	bne.n	8006178 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006146:	4b74      	ldr	r3, [pc, #464]	; (8006318 <HAL_RCC_OscConfig+0x474>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a73      	ldr	r2, [pc, #460]	; (8006318 <HAL_RCC_OscConfig+0x474>)
 800614c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006152:	f7fd f8c5 	bl	80032e0 <HAL_GetTick>
 8006156:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006158:	e008      	b.n	800616c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800615a:	f7fd f8c1 	bl	80032e0 <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	2b02      	cmp	r3, #2
 8006166:	d901      	bls.n	800616c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e10c      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800616c:	4b6a      	ldr	r3, [pc, #424]	; (8006318 <HAL_RCC_OscConfig+0x474>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006174:	2b00      	cmp	r3, #0
 8006176:	d0f0      	beq.n	800615a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d106      	bne.n	800618e <HAL_RCC_OscConfig+0x2ea>
 8006180:	4b64      	ldr	r3, [pc, #400]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 8006182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006184:	4a63      	ldr	r2, [pc, #396]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 8006186:	f043 0301 	orr.w	r3, r3, #1
 800618a:	6713      	str	r3, [r2, #112]	; 0x70
 800618c:	e01c      	b.n	80061c8 <HAL_RCC_OscConfig+0x324>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	2b05      	cmp	r3, #5
 8006194:	d10c      	bne.n	80061b0 <HAL_RCC_OscConfig+0x30c>
 8006196:	4b5f      	ldr	r3, [pc, #380]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 8006198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800619a:	4a5e      	ldr	r2, [pc, #376]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 800619c:	f043 0304 	orr.w	r3, r3, #4
 80061a0:	6713      	str	r3, [r2, #112]	; 0x70
 80061a2:	4b5c      	ldr	r3, [pc, #368]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 80061a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a6:	4a5b      	ldr	r2, [pc, #364]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 80061a8:	f043 0301 	orr.w	r3, r3, #1
 80061ac:	6713      	str	r3, [r2, #112]	; 0x70
 80061ae:	e00b      	b.n	80061c8 <HAL_RCC_OscConfig+0x324>
 80061b0:	4b58      	ldr	r3, [pc, #352]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 80061b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b4:	4a57      	ldr	r2, [pc, #348]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 80061b6:	f023 0301 	bic.w	r3, r3, #1
 80061ba:	6713      	str	r3, [r2, #112]	; 0x70
 80061bc:	4b55      	ldr	r3, [pc, #340]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 80061be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c0:	4a54      	ldr	r2, [pc, #336]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 80061c2:	f023 0304 	bic.w	r3, r3, #4
 80061c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d015      	beq.n	80061fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061d0:	f7fd f886 	bl	80032e0 <HAL_GetTick>
 80061d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061d6:	e00a      	b.n	80061ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061d8:	f7fd f882 	bl	80032e0 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d901      	bls.n	80061ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e0cb      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061ee:	4b49      	ldr	r3, [pc, #292]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 80061f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d0ee      	beq.n	80061d8 <HAL_RCC_OscConfig+0x334>
 80061fa:	e014      	b.n	8006226 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061fc:	f7fd f870 	bl	80032e0 <HAL_GetTick>
 8006200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006202:	e00a      	b.n	800621a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006204:	f7fd f86c 	bl	80032e0 <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006212:	4293      	cmp	r3, r2
 8006214:	d901      	bls.n	800621a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e0b5      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800621a:	4b3e      	ldr	r3, [pc, #248]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 800621c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1ee      	bne.n	8006204 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006226:	7dfb      	ldrb	r3, [r7, #23]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d105      	bne.n	8006238 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800622c:	4b39      	ldr	r3, [pc, #228]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 800622e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006230:	4a38      	ldr	r2, [pc, #224]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 8006232:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006236:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 80a1 	beq.w	8006384 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006242:	4b34      	ldr	r3, [pc, #208]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f003 030c 	and.w	r3, r3, #12
 800624a:	2b08      	cmp	r3, #8
 800624c:	d05c      	beq.n	8006308 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	2b02      	cmp	r3, #2
 8006254:	d141      	bne.n	80062da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006256:	4b31      	ldr	r3, [pc, #196]	; (800631c <HAL_RCC_OscConfig+0x478>)
 8006258:	2200      	movs	r2, #0
 800625a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800625c:	f7fd f840 	bl	80032e0 <HAL_GetTick>
 8006260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006262:	e008      	b.n	8006276 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006264:	f7fd f83c 	bl	80032e0 <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	2b02      	cmp	r3, #2
 8006270:	d901      	bls.n	8006276 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e087      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006276:	4b27      	ldr	r3, [pc, #156]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1f0      	bne.n	8006264 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	69da      	ldr	r2, [r3, #28]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	431a      	orrs	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006290:	019b      	lsls	r3, r3, #6
 8006292:	431a      	orrs	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006298:	085b      	lsrs	r3, r3, #1
 800629a:	3b01      	subs	r3, #1
 800629c:	041b      	lsls	r3, r3, #16
 800629e:	431a      	orrs	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a4:	061b      	lsls	r3, r3, #24
 80062a6:	491b      	ldr	r1, [pc, #108]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 80062a8:	4313      	orrs	r3, r2
 80062aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062ac:	4b1b      	ldr	r3, [pc, #108]	; (800631c <HAL_RCC_OscConfig+0x478>)
 80062ae:	2201      	movs	r2, #1
 80062b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b2:	f7fd f815 	bl	80032e0 <HAL_GetTick>
 80062b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062b8:	e008      	b.n	80062cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062ba:	f7fd f811 	bl	80032e0 <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d901      	bls.n	80062cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e05c      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062cc:	4b11      	ldr	r3, [pc, #68]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d0f0      	beq.n	80062ba <HAL_RCC_OscConfig+0x416>
 80062d8:	e054      	b.n	8006384 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062da:	4b10      	ldr	r3, [pc, #64]	; (800631c <HAL_RCC_OscConfig+0x478>)
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062e0:	f7fc fffe 	bl	80032e0 <HAL_GetTick>
 80062e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062e6:	e008      	b.n	80062fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062e8:	f7fc fffa 	bl	80032e0 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d901      	bls.n	80062fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e045      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062fa:	4b06      	ldr	r3, [pc, #24]	; (8006314 <HAL_RCC_OscConfig+0x470>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1f0      	bne.n	80062e8 <HAL_RCC_OscConfig+0x444>
 8006306:	e03d      	b.n	8006384 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d107      	bne.n	8006320 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e038      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
 8006314:	40023800 	.word	0x40023800
 8006318:	40007000 	.word	0x40007000
 800631c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006320:	4b1b      	ldr	r3, [pc, #108]	; (8006390 <HAL_RCC_OscConfig+0x4ec>)
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d028      	beq.n	8006380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006338:	429a      	cmp	r2, r3
 800633a:	d121      	bne.n	8006380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006346:	429a      	cmp	r2, r3
 8006348:	d11a      	bne.n	8006380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006350:	4013      	ands	r3, r2
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006356:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006358:	4293      	cmp	r3, r2
 800635a:	d111      	bne.n	8006380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006366:	085b      	lsrs	r3, r3, #1
 8006368:	3b01      	subs	r3, #1
 800636a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800636c:	429a      	cmp	r2, r3
 800636e:	d107      	bne.n	8006380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800637c:	429a      	cmp	r2, r3
 800637e:	d001      	beq.n	8006384 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e000      	b.n	8006386 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	40023800 	.word	0x40023800

08006394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e0cc      	b.n	8006542 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063a8:	4b68      	ldr	r3, [pc, #416]	; (800654c <HAL_RCC_ClockConfig+0x1b8>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0307 	and.w	r3, r3, #7
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d90c      	bls.n	80063d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063b6:	4b65      	ldr	r3, [pc, #404]	; (800654c <HAL_RCC_ClockConfig+0x1b8>)
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	b2d2      	uxtb	r2, r2
 80063bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063be:	4b63      	ldr	r3, [pc, #396]	; (800654c <HAL_RCC_ClockConfig+0x1b8>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0307 	and.w	r3, r3, #7
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d001      	beq.n	80063d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e0b8      	b.n	8006542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d020      	beq.n	800641e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0304 	and.w	r3, r3, #4
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d005      	beq.n	80063f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063e8:	4b59      	ldr	r3, [pc, #356]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	4a58      	ldr	r2, [pc, #352]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 80063ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80063f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0308 	and.w	r3, r3, #8
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d005      	beq.n	800640c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006400:	4b53      	ldr	r3, [pc, #332]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	4a52      	ldr	r2, [pc, #328]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 8006406:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800640a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800640c:	4b50      	ldr	r3, [pc, #320]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	494d      	ldr	r1, [pc, #308]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 800641a:	4313      	orrs	r3, r2
 800641c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d044      	beq.n	80064b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d107      	bne.n	8006442 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006432:	4b47      	ldr	r3, [pc, #284]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d119      	bne.n	8006472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e07f      	b.n	8006542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	2b02      	cmp	r3, #2
 8006448:	d003      	beq.n	8006452 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800644e:	2b03      	cmp	r3, #3
 8006450:	d107      	bne.n	8006462 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006452:	4b3f      	ldr	r3, [pc, #252]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d109      	bne.n	8006472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e06f      	b.n	8006542 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006462:	4b3b      	ldr	r3, [pc, #236]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e067      	b.n	8006542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006472:	4b37      	ldr	r3, [pc, #220]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f023 0203 	bic.w	r2, r3, #3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	4934      	ldr	r1, [pc, #208]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 8006480:	4313      	orrs	r3, r2
 8006482:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006484:	f7fc ff2c 	bl	80032e0 <HAL_GetTick>
 8006488:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800648a:	e00a      	b.n	80064a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800648c:	f7fc ff28 	bl	80032e0 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	f241 3288 	movw	r2, #5000	; 0x1388
 800649a:	4293      	cmp	r3, r2
 800649c:	d901      	bls.n	80064a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e04f      	b.n	8006542 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064a2:	4b2b      	ldr	r3, [pc, #172]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f003 020c 	and.w	r2, r3, #12
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d1eb      	bne.n	800648c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064b4:	4b25      	ldr	r3, [pc, #148]	; (800654c <HAL_RCC_ClockConfig+0x1b8>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0307 	and.w	r3, r3, #7
 80064bc:	683a      	ldr	r2, [r7, #0]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d20c      	bcs.n	80064dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064c2:	4b22      	ldr	r3, [pc, #136]	; (800654c <HAL_RCC_ClockConfig+0x1b8>)
 80064c4:	683a      	ldr	r2, [r7, #0]
 80064c6:	b2d2      	uxtb	r2, r2
 80064c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ca:	4b20      	ldr	r3, [pc, #128]	; (800654c <HAL_RCC_ClockConfig+0x1b8>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d001      	beq.n	80064dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e032      	b.n	8006542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d008      	beq.n	80064fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064e8:	4b19      	ldr	r3, [pc, #100]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	4916      	ldr	r1, [pc, #88]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0308 	and.w	r3, r3, #8
 8006502:	2b00      	cmp	r3, #0
 8006504:	d009      	beq.n	800651a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006506:	4b12      	ldr	r3, [pc, #72]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	00db      	lsls	r3, r3, #3
 8006514:	490e      	ldr	r1, [pc, #56]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 8006516:	4313      	orrs	r3, r2
 8006518:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800651a:	f000 f821 	bl	8006560 <HAL_RCC_GetSysClockFreq>
 800651e:	4602      	mov	r2, r0
 8006520:	4b0b      	ldr	r3, [pc, #44]	; (8006550 <HAL_RCC_ClockConfig+0x1bc>)
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	091b      	lsrs	r3, r3, #4
 8006526:	f003 030f 	and.w	r3, r3, #15
 800652a:	490a      	ldr	r1, [pc, #40]	; (8006554 <HAL_RCC_ClockConfig+0x1c0>)
 800652c:	5ccb      	ldrb	r3, [r1, r3]
 800652e:	fa22 f303 	lsr.w	r3, r2, r3
 8006532:	4a09      	ldr	r2, [pc, #36]	; (8006558 <HAL_RCC_ClockConfig+0x1c4>)
 8006534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006536:	4b09      	ldr	r3, [pc, #36]	; (800655c <HAL_RCC_ClockConfig+0x1c8>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4618      	mov	r0, r3
 800653c:	f7fc fe8c 	bl	8003258 <HAL_InitTick>

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	40023c00 	.word	0x40023c00
 8006550:	40023800 	.word	0x40023800
 8006554:	0800a8b8 	.word	0x0800a8b8
 8006558:	20000000 	.word	0x20000000
 800655c:	20000068 	.word	0x20000068

08006560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006564:	b094      	sub	sp, #80	; 0x50
 8006566:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006568:	2300      	movs	r3, #0
 800656a:	647b      	str	r3, [r7, #68]	; 0x44
 800656c:	2300      	movs	r3, #0
 800656e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006570:	2300      	movs	r3, #0
 8006572:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006574:	2300      	movs	r3, #0
 8006576:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006578:	4b79      	ldr	r3, [pc, #484]	; (8006760 <HAL_RCC_GetSysClockFreq+0x200>)
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f003 030c 	and.w	r3, r3, #12
 8006580:	2b08      	cmp	r3, #8
 8006582:	d00d      	beq.n	80065a0 <HAL_RCC_GetSysClockFreq+0x40>
 8006584:	2b08      	cmp	r3, #8
 8006586:	f200 80e1 	bhi.w	800674c <HAL_RCC_GetSysClockFreq+0x1ec>
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <HAL_RCC_GetSysClockFreq+0x34>
 800658e:	2b04      	cmp	r3, #4
 8006590:	d003      	beq.n	800659a <HAL_RCC_GetSysClockFreq+0x3a>
 8006592:	e0db      	b.n	800674c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006594:	4b73      	ldr	r3, [pc, #460]	; (8006764 <HAL_RCC_GetSysClockFreq+0x204>)
 8006596:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006598:	e0db      	b.n	8006752 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800659a:	4b73      	ldr	r3, [pc, #460]	; (8006768 <HAL_RCC_GetSysClockFreq+0x208>)
 800659c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800659e:	e0d8      	b.n	8006752 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065a0:	4b6f      	ldr	r3, [pc, #444]	; (8006760 <HAL_RCC_GetSysClockFreq+0x200>)
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065a8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065aa:	4b6d      	ldr	r3, [pc, #436]	; (8006760 <HAL_RCC_GetSysClockFreq+0x200>)
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d063      	beq.n	800667e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065b6:	4b6a      	ldr	r3, [pc, #424]	; (8006760 <HAL_RCC_GetSysClockFreq+0x200>)
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	099b      	lsrs	r3, r3, #6
 80065bc:	2200      	movs	r2, #0
 80065be:	63bb      	str	r3, [r7, #56]	; 0x38
 80065c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80065c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065c8:	633b      	str	r3, [r7, #48]	; 0x30
 80065ca:	2300      	movs	r3, #0
 80065cc:	637b      	str	r3, [r7, #52]	; 0x34
 80065ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80065d2:	4622      	mov	r2, r4
 80065d4:	462b      	mov	r3, r5
 80065d6:	f04f 0000 	mov.w	r0, #0
 80065da:	f04f 0100 	mov.w	r1, #0
 80065de:	0159      	lsls	r1, r3, #5
 80065e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065e4:	0150      	lsls	r0, r2, #5
 80065e6:	4602      	mov	r2, r0
 80065e8:	460b      	mov	r3, r1
 80065ea:	4621      	mov	r1, r4
 80065ec:	1a51      	subs	r1, r2, r1
 80065ee:	6139      	str	r1, [r7, #16]
 80065f0:	4629      	mov	r1, r5
 80065f2:	eb63 0301 	sbc.w	r3, r3, r1
 80065f6:	617b      	str	r3, [r7, #20]
 80065f8:	f04f 0200 	mov.w	r2, #0
 80065fc:	f04f 0300 	mov.w	r3, #0
 8006600:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006604:	4659      	mov	r1, fp
 8006606:	018b      	lsls	r3, r1, #6
 8006608:	4651      	mov	r1, sl
 800660a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800660e:	4651      	mov	r1, sl
 8006610:	018a      	lsls	r2, r1, #6
 8006612:	4651      	mov	r1, sl
 8006614:	ebb2 0801 	subs.w	r8, r2, r1
 8006618:	4659      	mov	r1, fp
 800661a:	eb63 0901 	sbc.w	r9, r3, r1
 800661e:	f04f 0200 	mov.w	r2, #0
 8006622:	f04f 0300 	mov.w	r3, #0
 8006626:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800662a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800662e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006632:	4690      	mov	r8, r2
 8006634:	4699      	mov	r9, r3
 8006636:	4623      	mov	r3, r4
 8006638:	eb18 0303 	adds.w	r3, r8, r3
 800663c:	60bb      	str	r3, [r7, #8]
 800663e:	462b      	mov	r3, r5
 8006640:	eb49 0303 	adc.w	r3, r9, r3
 8006644:	60fb      	str	r3, [r7, #12]
 8006646:	f04f 0200 	mov.w	r2, #0
 800664a:	f04f 0300 	mov.w	r3, #0
 800664e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006652:	4629      	mov	r1, r5
 8006654:	024b      	lsls	r3, r1, #9
 8006656:	4621      	mov	r1, r4
 8006658:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800665c:	4621      	mov	r1, r4
 800665e:	024a      	lsls	r2, r1, #9
 8006660:	4610      	mov	r0, r2
 8006662:	4619      	mov	r1, r3
 8006664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006666:	2200      	movs	r2, #0
 8006668:	62bb      	str	r3, [r7, #40]	; 0x28
 800666a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800666c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006670:	f7fc fc24 	bl	8002ebc <__aeabi_uldivmod>
 8006674:	4602      	mov	r2, r0
 8006676:	460b      	mov	r3, r1
 8006678:	4613      	mov	r3, r2
 800667a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800667c:	e058      	b.n	8006730 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800667e:	4b38      	ldr	r3, [pc, #224]	; (8006760 <HAL_RCC_GetSysClockFreq+0x200>)
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	099b      	lsrs	r3, r3, #6
 8006684:	2200      	movs	r2, #0
 8006686:	4618      	mov	r0, r3
 8006688:	4611      	mov	r1, r2
 800668a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800668e:	623b      	str	r3, [r7, #32]
 8006690:	2300      	movs	r3, #0
 8006692:	627b      	str	r3, [r7, #36]	; 0x24
 8006694:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006698:	4642      	mov	r2, r8
 800669a:	464b      	mov	r3, r9
 800669c:	f04f 0000 	mov.w	r0, #0
 80066a0:	f04f 0100 	mov.w	r1, #0
 80066a4:	0159      	lsls	r1, r3, #5
 80066a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066aa:	0150      	lsls	r0, r2, #5
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	4641      	mov	r1, r8
 80066b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80066b6:	4649      	mov	r1, r9
 80066b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80066bc:	f04f 0200 	mov.w	r2, #0
 80066c0:	f04f 0300 	mov.w	r3, #0
 80066c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80066c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80066cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80066d0:	ebb2 040a 	subs.w	r4, r2, sl
 80066d4:	eb63 050b 	sbc.w	r5, r3, fp
 80066d8:	f04f 0200 	mov.w	r2, #0
 80066dc:	f04f 0300 	mov.w	r3, #0
 80066e0:	00eb      	lsls	r3, r5, #3
 80066e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066e6:	00e2      	lsls	r2, r4, #3
 80066e8:	4614      	mov	r4, r2
 80066ea:	461d      	mov	r5, r3
 80066ec:	4643      	mov	r3, r8
 80066ee:	18e3      	adds	r3, r4, r3
 80066f0:	603b      	str	r3, [r7, #0]
 80066f2:	464b      	mov	r3, r9
 80066f4:	eb45 0303 	adc.w	r3, r5, r3
 80066f8:	607b      	str	r3, [r7, #4]
 80066fa:	f04f 0200 	mov.w	r2, #0
 80066fe:	f04f 0300 	mov.w	r3, #0
 8006702:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006706:	4629      	mov	r1, r5
 8006708:	028b      	lsls	r3, r1, #10
 800670a:	4621      	mov	r1, r4
 800670c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006710:	4621      	mov	r1, r4
 8006712:	028a      	lsls	r2, r1, #10
 8006714:	4610      	mov	r0, r2
 8006716:	4619      	mov	r1, r3
 8006718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800671a:	2200      	movs	r2, #0
 800671c:	61bb      	str	r3, [r7, #24]
 800671e:	61fa      	str	r2, [r7, #28]
 8006720:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006724:	f7fc fbca 	bl	8002ebc <__aeabi_uldivmod>
 8006728:	4602      	mov	r2, r0
 800672a:	460b      	mov	r3, r1
 800672c:	4613      	mov	r3, r2
 800672e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006730:	4b0b      	ldr	r3, [pc, #44]	; (8006760 <HAL_RCC_GetSysClockFreq+0x200>)
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	0c1b      	lsrs	r3, r3, #16
 8006736:	f003 0303 	and.w	r3, r3, #3
 800673a:	3301      	adds	r3, #1
 800673c:	005b      	lsls	r3, r3, #1
 800673e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006740:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006744:	fbb2 f3f3 	udiv	r3, r2, r3
 8006748:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800674a:	e002      	b.n	8006752 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800674c:	4b05      	ldr	r3, [pc, #20]	; (8006764 <HAL_RCC_GetSysClockFreq+0x204>)
 800674e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006750:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006754:	4618      	mov	r0, r3
 8006756:	3750      	adds	r7, #80	; 0x50
 8006758:	46bd      	mov	sp, r7
 800675a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800675e:	bf00      	nop
 8006760:	40023800 	.word	0x40023800
 8006764:	00f42400 	.word	0x00f42400
 8006768:	007a1200 	.word	0x007a1200

0800676c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800676c:	b480      	push	{r7}
 800676e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006770:	4b03      	ldr	r3, [pc, #12]	; (8006780 <HAL_RCC_GetHCLKFreq+0x14>)
 8006772:	681b      	ldr	r3, [r3, #0]
}
 8006774:	4618      	mov	r0, r3
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	20000000 	.word	0x20000000

08006784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006788:	f7ff fff0 	bl	800676c <HAL_RCC_GetHCLKFreq>
 800678c:	4602      	mov	r2, r0
 800678e:	4b05      	ldr	r3, [pc, #20]	; (80067a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	0a9b      	lsrs	r3, r3, #10
 8006794:	f003 0307 	and.w	r3, r3, #7
 8006798:	4903      	ldr	r1, [pc, #12]	; (80067a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800679a:	5ccb      	ldrb	r3, [r1, r3]
 800679c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	40023800 	.word	0x40023800
 80067a8:	0800a8c8 	.word	0x0800a8c8

080067ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80067b0:	f7ff ffdc 	bl	800676c <HAL_RCC_GetHCLKFreq>
 80067b4:	4602      	mov	r2, r0
 80067b6:	4b05      	ldr	r3, [pc, #20]	; (80067cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	0b5b      	lsrs	r3, r3, #13
 80067bc:	f003 0307 	and.w	r3, r3, #7
 80067c0:	4903      	ldr	r1, [pc, #12]	; (80067d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067c2:	5ccb      	ldrb	r3, [r1, r3]
 80067c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	40023800 	.word	0x40023800
 80067d0:	0800a8c8 	.word	0x0800a8c8

080067d4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067dc:	2300      	movs	r3, #0
 80067de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80067e0:	2300      	movs	r3, #0
 80067e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d105      	bne.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d035      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80067fc:	4b62      	ldr	r3, [pc, #392]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80067fe:	2200      	movs	r2, #0
 8006800:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006802:	f7fc fd6d 	bl	80032e0 <HAL_GetTick>
 8006806:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006808:	e008      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800680a:	f7fc fd69 	bl	80032e0 <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	2b02      	cmp	r3, #2
 8006816:	d901      	bls.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e0b0      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800681c:	4b5b      	ldr	r3, [pc, #364]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1f0      	bne.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	019a      	lsls	r2, r3, #6
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	071b      	lsls	r3, r3, #28
 8006834:	4955      	ldr	r1, [pc, #340]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006836:	4313      	orrs	r3, r2
 8006838:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800683c:	4b52      	ldr	r3, [pc, #328]	; (8006988 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800683e:	2201      	movs	r2, #1
 8006840:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006842:	f7fc fd4d 	bl	80032e0 <HAL_GetTick>
 8006846:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006848:	e008      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800684a:	f7fc fd49 	bl	80032e0 <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	2b02      	cmp	r3, #2
 8006856:	d901      	bls.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e090      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800685c:	4b4b      	ldr	r3, [pc, #300]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d0f0      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0302 	and.w	r3, r3, #2
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 8083 	beq.w	800697c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006876:	2300      	movs	r3, #0
 8006878:	60fb      	str	r3, [r7, #12]
 800687a:	4b44      	ldr	r3, [pc, #272]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800687c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687e:	4a43      	ldr	r2, [pc, #268]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006884:	6413      	str	r3, [r2, #64]	; 0x40
 8006886:	4b41      	ldr	r3, [pc, #260]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006892:	4b3f      	ldr	r3, [pc, #252]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a3e      	ldr	r2, [pc, #248]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800689c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800689e:	f7fc fd1f 	bl	80032e0 <HAL_GetTick>
 80068a2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80068a4:	e008      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80068a6:	f7fc fd1b 	bl	80032e0 <HAL_GetTick>
 80068aa:	4602      	mov	r2, r0
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d901      	bls.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e062      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80068b8:	4b35      	ldr	r3, [pc, #212]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d0f0      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068c4:	4b31      	ldr	r3, [pc, #196]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068cc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d02f      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d028      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068e2:	4b2a      	ldr	r3, [pc, #168]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80068ec:	4b29      	ldr	r3, [pc, #164]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80068ee:	2201      	movs	r2, #1
 80068f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80068f2:	4b28      	ldr	r3, [pc, #160]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80068f8:	4a24      	ldr	r2, [pc, #144]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80068fe:	4b23      	ldr	r3, [pc, #140]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b01      	cmp	r3, #1
 8006908:	d114      	bne.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800690a:	f7fc fce9 	bl	80032e0 <HAL_GetTick>
 800690e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006910:	e00a      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006912:	f7fc fce5 	bl	80032e0 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006920:	4293      	cmp	r3, r2
 8006922:	d901      	bls.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e02a      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006928:	4b18      	ldr	r3, [pc, #96]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800692a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692c:	f003 0302 	and.w	r3, r3, #2
 8006930:	2b00      	cmp	r3, #0
 8006932:	d0ee      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800693c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006940:	d10d      	bne.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006942:	4b12      	ldr	r3, [pc, #72]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006956:	490d      	ldr	r1, [pc, #52]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006958:	4313      	orrs	r3, r2
 800695a:	608b      	str	r3, [r1, #8]
 800695c:	e005      	b.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800695e:	4b0b      	ldr	r3, [pc, #44]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	4a0a      	ldr	r2, [pc, #40]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006964:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006968:	6093      	str	r3, [r2, #8]
 800696a:	4b08      	ldr	r3, [pc, #32]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800696c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006976:	4905      	ldr	r1, [pc, #20]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006978:	4313      	orrs	r3, r2
 800697a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3718      	adds	r7, #24
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	42470068 	.word	0x42470068
 800698c:	40023800 	.word	0x40023800
 8006990:	40007000 	.word	0x40007000
 8006994:	42470e40 	.word	0x42470e40

08006998 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006998:	b480      	push	{r7}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80069a4:	2300      	movs	r3, #0
 80069a6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80069a8:	2300      	movs	r3, #0
 80069aa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d13e      	bne.n	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80069b6:	4b23      	ldr	r3, [pc, #140]	; (8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069be:	60fb      	str	r3, [r7, #12]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d005      	beq.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d12f      	bne.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80069cc:	4b1e      	ldr	r3, [pc, #120]	; (8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80069ce:	617b      	str	r3, [r7, #20]
          break;
 80069d0:	e02f      	b.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80069d2:	4b1c      	ldr	r3, [pc, #112]	; (8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069de:	d108      	bne.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80069e0:	4b18      	ldr	r3, [pc, #96]	; (8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069e8:	4a18      	ldr	r2, [pc, #96]	; (8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80069ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ee:	613b      	str	r3, [r7, #16]
 80069f0:	e007      	b.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80069f2:	4b14      	ldr	r3, [pc, #80]	; (8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069fa:	4a15      	ldr	r2, [pc, #84]	; (8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80069fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a00:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006a02:	4b10      	ldr	r3, [pc, #64]	; (8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a08:	099b      	lsrs	r3, r3, #6
 8006a0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	fb02 f303 	mul.w	r3, r2, r3
 8006a14:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006a16:	4b0b      	ldr	r3, [pc, #44]	; (8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a1c:	0f1b      	lsrs	r3, r3, #28
 8006a1e:	f003 0307 	and.w	r3, r3, #7
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a28:	617b      	str	r3, [r7, #20]
          break;
 8006a2a:	e002      	b.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	617b      	str	r3, [r7, #20]
          break;
 8006a30:	bf00      	nop
        }
      }
      break;
 8006a32:	bf00      	nop
    }
  }
  return frequency;
 8006a34:	697b      	ldr	r3, [r7, #20]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	371c      	adds	r7, #28
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	40023800 	.word	0x40023800
 8006a48:	00bb8000 	.word	0x00bb8000
 8006a4c:	007a1200 	.word	0x007a1200
 8006a50:	00f42400 	.word	0x00f42400

08006a54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e07b      	b.n	8006b5e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d108      	bne.n	8006a80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a76:	d009      	beq.n	8006a8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	61da      	str	r2, [r3, #28]
 8006a7e:	e005      	b.n	8006a8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d106      	bne.n	8006aac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f7fa fa6a 	bl	8000f80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ac2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ad4:	431a      	orrs	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ade:	431a      	orrs	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	431a      	orrs	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006afc:	431a      	orrs	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	69db      	ldr	r3, [r3, #28]
 8006b02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b06:	431a      	orrs	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a1b      	ldr	r3, [r3, #32]
 8006b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b10:	ea42 0103 	orr.w	r1, r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b18:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	430a      	orrs	r2, r1
 8006b22:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	0c1b      	lsrs	r3, r3, #16
 8006b2a:	f003 0104 	and.w	r1, r3, #4
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b32:	f003 0210 	and.w	r2, r3, #16
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	69da      	ldr	r2, [r3, #28]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b082      	sub	sp, #8
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d101      	bne.n	8006b78 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e03f      	b.n	8006bf8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d106      	bne.n	8006b92 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f7fa fa5d 	bl	800104c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2224      	movs	r2, #36	; 0x24
 8006b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68da      	ldr	r2, [r3, #12]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ba8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f928 	bl	8006e00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	691a      	ldr	r2, [r3, #16]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bbe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	695a      	ldr	r2, [r3, #20]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bce:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68da      	ldr	r2, [r3, #12]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bde:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2220      	movs	r2, #32
 8006bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2220      	movs	r2, #32
 8006bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b08a      	sub	sp, #40	; 0x28
 8006c04:	af02      	add	r7, sp, #8
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	603b      	str	r3, [r7, #0]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c10:	2300      	movs	r3, #0
 8006c12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	2b20      	cmp	r3, #32
 8006c1e:	d17c      	bne.n	8006d1a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d002      	beq.n	8006c2c <HAL_UART_Transmit+0x2c>
 8006c26:	88fb      	ldrh	r3, [r7, #6]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e075      	b.n	8006d1c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d101      	bne.n	8006c3e <HAL_UART_Transmit+0x3e>
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	e06e      	b.n	8006d1c <HAL_UART_Transmit+0x11c>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2221      	movs	r2, #33	; 0x21
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c54:	f7fc fb44 	bl	80032e0 <HAL_GetTick>
 8006c58:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	88fa      	ldrh	r2, [r7, #6]
 8006c5e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	88fa      	ldrh	r2, [r7, #6]
 8006c64:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c6e:	d108      	bne.n	8006c82 <HAL_UART_Transmit+0x82>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d104      	bne.n	8006c82 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	61bb      	str	r3, [r7, #24]
 8006c80:	e003      	b.n	8006c8a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c86:	2300      	movs	r3, #0
 8006c88:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006c92:	e02a      	b.n	8006cea <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	9300      	str	r3, [sp, #0]
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	2180      	movs	r1, #128	; 0x80
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f000 f840 	bl	8006d24 <UART_WaitOnFlagUntilTimeout>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e036      	b.n	8006d1c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10b      	bne.n	8006ccc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	881b      	ldrh	r3, [r3, #0]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cc2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	3302      	adds	r3, #2
 8006cc8:	61bb      	str	r3, [r7, #24]
 8006cca:	e007      	b.n	8006cdc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	781a      	ldrb	r2, [r3, #0]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1cf      	bne.n	8006c94 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2140      	movs	r1, #64	; 0x40
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f000 f810 	bl	8006d24 <UART_WaitOnFlagUntilTimeout>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d001      	beq.n	8006d0e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e006      	b.n	8006d1c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2220      	movs	r2, #32
 8006d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006d16:	2300      	movs	r3, #0
 8006d18:	e000      	b.n	8006d1c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006d1a:	2302      	movs	r3, #2
  }
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3720      	adds	r7, #32
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b090      	sub	sp, #64	; 0x40
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	603b      	str	r3, [r7, #0]
 8006d30:	4613      	mov	r3, r2
 8006d32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d34:	e050      	b.n	8006dd8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d3c:	d04c      	beq.n	8006dd8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d007      	beq.n	8006d54 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d44:	f7fc facc 	bl	80032e0 <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d241      	bcs.n	8006dd8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	330c      	adds	r3, #12
 8006d5a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5e:	e853 3f00 	ldrex	r3, [r3]
 8006d62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	330c      	adds	r3, #12
 8006d72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d74:	637a      	str	r2, [r7, #52]	; 0x34
 8006d76:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d7c:	e841 2300 	strex	r3, r2, [r1]
 8006d80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1e5      	bne.n	8006d54 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3314      	adds	r3, #20
 8006d8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	e853 3f00 	ldrex	r3, [r3]
 8006d96:	613b      	str	r3, [r7, #16]
   return(result);
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	f023 0301 	bic.w	r3, r3, #1
 8006d9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3314      	adds	r3, #20
 8006da6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006da8:	623a      	str	r2, [r7, #32]
 8006daa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dac:	69f9      	ldr	r1, [r7, #28]
 8006dae:	6a3a      	ldr	r2, [r7, #32]
 8006db0:	e841 2300 	strex	r3, r2, [r1]
 8006db4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1e5      	bne.n	8006d88 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e00f      	b.n	8006df8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	4013      	ands	r3, r2
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	bf0c      	ite	eq
 8006de8:	2301      	moveq	r3, #1
 8006dea:	2300      	movne	r3, #0
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	461a      	mov	r2, r3
 8006df0:	79fb      	ldrb	r3, [r7, #7]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d09f      	beq.n	8006d36 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3740      	adds	r7, #64	; 0x40
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e04:	b0c0      	sub	sp, #256	; 0x100
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e1c:	68d9      	ldr	r1, [r3, #12]
 8006e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	ea40 0301 	orr.w	r3, r0, r1
 8006e28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	431a      	orrs	r2, r3
 8006e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e3c:	695b      	ldr	r3, [r3, #20]
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e44:	69db      	ldr	r3, [r3, #28]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006e58:	f021 010c 	bic.w	r1, r1, #12
 8006e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e66:	430b      	orrs	r3, r1
 8006e68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	695b      	ldr	r3, [r3, #20]
 8006e72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e7a:	6999      	ldr	r1, [r3, #24]
 8006e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	ea40 0301 	orr.w	r3, r0, r1
 8006e86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	4b8f      	ldr	r3, [pc, #572]	; (80070cc <UART_SetConfig+0x2cc>)
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d005      	beq.n	8006ea0 <UART_SetConfig+0xa0>
 8006e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	4b8d      	ldr	r3, [pc, #564]	; (80070d0 <UART_SetConfig+0x2d0>)
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d104      	bne.n	8006eaa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ea0:	f7ff fc84 	bl	80067ac <HAL_RCC_GetPCLK2Freq>
 8006ea4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006ea8:	e003      	b.n	8006eb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006eaa:	f7ff fc6b 	bl	8006784 <HAL_RCC_GetPCLK1Freq>
 8006eae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eb6:	69db      	ldr	r3, [r3, #28]
 8006eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ebc:	f040 810c 	bne.w	80070d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006eca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006ece:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006ed2:	4622      	mov	r2, r4
 8006ed4:	462b      	mov	r3, r5
 8006ed6:	1891      	adds	r1, r2, r2
 8006ed8:	65b9      	str	r1, [r7, #88]	; 0x58
 8006eda:	415b      	adcs	r3, r3
 8006edc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ede:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006ee2:	4621      	mov	r1, r4
 8006ee4:	eb12 0801 	adds.w	r8, r2, r1
 8006ee8:	4629      	mov	r1, r5
 8006eea:	eb43 0901 	adc.w	r9, r3, r1
 8006eee:	f04f 0200 	mov.w	r2, #0
 8006ef2:	f04f 0300 	mov.w	r3, #0
 8006ef6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006efa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006efe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f02:	4690      	mov	r8, r2
 8006f04:	4699      	mov	r9, r3
 8006f06:	4623      	mov	r3, r4
 8006f08:	eb18 0303 	adds.w	r3, r8, r3
 8006f0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f10:	462b      	mov	r3, r5
 8006f12:	eb49 0303 	adc.w	r3, r9, r3
 8006f16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006f2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006f2e:	460b      	mov	r3, r1
 8006f30:	18db      	adds	r3, r3, r3
 8006f32:	653b      	str	r3, [r7, #80]	; 0x50
 8006f34:	4613      	mov	r3, r2
 8006f36:	eb42 0303 	adc.w	r3, r2, r3
 8006f3a:	657b      	str	r3, [r7, #84]	; 0x54
 8006f3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006f40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006f44:	f7fb ffba 	bl	8002ebc <__aeabi_uldivmod>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4b61      	ldr	r3, [pc, #388]	; (80070d4 <UART_SetConfig+0x2d4>)
 8006f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8006f52:	095b      	lsrs	r3, r3, #5
 8006f54:	011c      	lsls	r4, r3, #4
 8006f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006f64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006f68:	4642      	mov	r2, r8
 8006f6a:	464b      	mov	r3, r9
 8006f6c:	1891      	adds	r1, r2, r2
 8006f6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006f70:	415b      	adcs	r3, r3
 8006f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006f78:	4641      	mov	r1, r8
 8006f7a:	eb12 0a01 	adds.w	sl, r2, r1
 8006f7e:	4649      	mov	r1, r9
 8006f80:	eb43 0b01 	adc.w	fp, r3, r1
 8006f84:	f04f 0200 	mov.w	r2, #0
 8006f88:	f04f 0300 	mov.w	r3, #0
 8006f8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f98:	4692      	mov	sl, r2
 8006f9a:	469b      	mov	fp, r3
 8006f9c:	4643      	mov	r3, r8
 8006f9e:	eb1a 0303 	adds.w	r3, sl, r3
 8006fa2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fa6:	464b      	mov	r3, r9
 8006fa8:	eb4b 0303 	adc.w	r3, fp, r3
 8006fac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fbc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006fc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	18db      	adds	r3, r3, r3
 8006fc8:	643b      	str	r3, [r7, #64]	; 0x40
 8006fca:	4613      	mov	r3, r2
 8006fcc:	eb42 0303 	adc.w	r3, r2, r3
 8006fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8006fd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006fd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006fda:	f7fb ff6f 	bl	8002ebc <__aeabi_uldivmod>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	4611      	mov	r1, r2
 8006fe4:	4b3b      	ldr	r3, [pc, #236]	; (80070d4 <UART_SetConfig+0x2d4>)
 8006fe6:	fba3 2301 	umull	r2, r3, r3, r1
 8006fea:	095b      	lsrs	r3, r3, #5
 8006fec:	2264      	movs	r2, #100	; 0x64
 8006fee:	fb02 f303 	mul.w	r3, r2, r3
 8006ff2:	1acb      	subs	r3, r1, r3
 8006ff4:	00db      	lsls	r3, r3, #3
 8006ff6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006ffa:	4b36      	ldr	r3, [pc, #216]	; (80070d4 <UART_SetConfig+0x2d4>)
 8006ffc:	fba3 2302 	umull	r2, r3, r3, r2
 8007000:	095b      	lsrs	r3, r3, #5
 8007002:	005b      	lsls	r3, r3, #1
 8007004:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007008:	441c      	add	r4, r3
 800700a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800700e:	2200      	movs	r2, #0
 8007010:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007014:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007018:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800701c:	4642      	mov	r2, r8
 800701e:	464b      	mov	r3, r9
 8007020:	1891      	adds	r1, r2, r2
 8007022:	63b9      	str	r1, [r7, #56]	; 0x38
 8007024:	415b      	adcs	r3, r3
 8007026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007028:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800702c:	4641      	mov	r1, r8
 800702e:	1851      	adds	r1, r2, r1
 8007030:	6339      	str	r1, [r7, #48]	; 0x30
 8007032:	4649      	mov	r1, r9
 8007034:	414b      	adcs	r3, r1
 8007036:	637b      	str	r3, [r7, #52]	; 0x34
 8007038:	f04f 0200 	mov.w	r2, #0
 800703c:	f04f 0300 	mov.w	r3, #0
 8007040:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007044:	4659      	mov	r1, fp
 8007046:	00cb      	lsls	r3, r1, #3
 8007048:	4651      	mov	r1, sl
 800704a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800704e:	4651      	mov	r1, sl
 8007050:	00ca      	lsls	r2, r1, #3
 8007052:	4610      	mov	r0, r2
 8007054:	4619      	mov	r1, r3
 8007056:	4603      	mov	r3, r0
 8007058:	4642      	mov	r2, r8
 800705a:	189b      	adds	r3, r3, r2
 800705c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007060:	464b      	mov	r3, r9
 8007062:	460a      	mov	r2, r1
 8007064:	eb42 0303 	adc.w	r3, r2, r3
 8007068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800706c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007078:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800707c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007080:	460b      	mov	r3, r1
 8007082:	18db      	adds	r3, r3, r3
 8007084:	62bb      	str	r3, [r7, #40]	; 0x28
 8007086:	4613      	mov	r3, r2
 8007088:	eb42 0303 	adc.w	r3, r2, r3
 800708c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800708e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007092:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007096:	f7fb ff11 	bl	8002ebc <__aeabi_uldivmod>
 800709a:	4602      	mov	r2, r0
 800709c:	460b      	mov	r3, r1
 800709e:	4b0d      	ldr	r3, [pc, #52]	; (80070d4 <UART_SetConfig+0x2d4>)
 80070a0:	fba3 1302 	umull	r1, r3, r3, r2
 80070a4:	095b      	lsrs	r3, r3, #5
 80070a6:	2164      	movs	r1, #100	; 0x64
 80070a8:	fb01 f303 	mul.w	r3, r1, r3
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	00db      	lsls	r3, r3, #3
 80070b0:	3332      	adds	r3, #50	; 0x32
 80070b2:	4a08      	ldr	r2, [pc, #32]	; (80070d4 <UART_SetConfig+0x2d4>)
 80070b4:	fba2 2303 	umull	r2, r3, r2, r3
 80070b8:	095b      	lsrs	r3, r3, #5
 80070ba:	f003 0207 	and.w	r2, r3, #7
 80070be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4422      	add	r2, r4
 80070c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80070c8:	e105      	b.n	80072d6 <UART_SetConfig+0x4d6>
 80070ca:	bf00      	nop
 80070cc:	40011000 	.word	0x40011000
 80070d0:	40011400 	.word	0x40011400
 80070d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070dc:	2200      	movs	r2, #0
 80070de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80070e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80070e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80070ea:	4642      	mov	r2, r8
 80070ec:	464b      	mov	r3, r9
 80070ee:	1891      	adds	r1, r2, r2
 80070f0:	6239      	str	r1, [r7, #32]
 80070f2:	415b      	adcs	r3, r3
 80070f4:	627b      	str	r3, [r7, #36]	; 0x24
 80070f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80070fa:	4641      	mov	r1, r8
 80070fc:	1854      	adds	r4, r2, r1
 80070fe:	4649      	mov	r1, r9
 8007100:	eb43 0501 	adc.w	r5, r3, r1
 8007104:	f04f 0200 	mov.w	r2, #0
 8007108:	f04f 0300 	mov.w	r3, #0
 800710c:	00eb      	lsls	r3, r5, #3
 800710e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007112:	00e2      	lsls	r2, r4, #3
 8007114:	4614      	mov	r4, r2
 8007116:	461d      	mov	r5, r3
 8007118:	4643      	mov	r3, r8
 800711a:	18e3      	adds	r3, r4, r3
 800711c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007120:	464b      	mov	r3, r9
 8007122:	eb45 0303 	adc.w	r3, r5, r3
 8007126:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800712a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007136:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800713a:	f04f 0200 	mov.w	r2, #0
 800713e:	f04f 0300 	mov.w	r3, #0
 8007142:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007146:	4629      	mov	r1, r5
 8007148:	008b      	lsls	r3, r1, #2
 800714a:	4621      	mov	r1, r4
 800714c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007150:	4621      	mov	r1, r4
 8007152:	008a      	lsls	r2, r1, #2
 8007154:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007158:	f7fb feb0 	bl	8002ebc <__aeabi_uldivmod>
 800715c:	4602      	mov	r2, r0
 800715e:	460b      	mov	r3, r1
 8007160:	4b60      	ldr	r3, [pc, #384]	; (80072e4 <UART_SetConfig+0x4e4>)
 8007162:	fba3 2302 	umull	r2, r3, r3, r2
 8007166:	095b      	lsrs	r3, r3, #5
 8007168:	011c      	lsls	r4, r3, #4
 800716a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800716e:	2200      	movs	r2, #0
 8007170:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007174:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007178:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800717c:	4642      	mov	r2, r8
 800717e:	464b      	mov	r3, r9
 8007180:	1891      	adds	r1, r2, r2
 8007182:	61b9      	str	r1, [r7, #24]
 8007184:	415b      	adcs	r3, r3
 8007186:	61fb      	str	r3, [r7, #28]
 8007188:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800718c:	4641      	mov	r1, r8
 800718e:	1851      	adds	r1, r2, r1
 8007190:	6139      	str	r1, [r7, #16]
 8007192:	4649      	mov	r1, r9
 8007194:	414b      	adcs	r3, r1
 8007196:	617b      	str	r3, [r7, #20]
 8007198:	f04f 0200 	mov.w	r2, #0
 800719c:	f04f 0300 	mov.w	r3, #0
 80071a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071a4:	4659      	mov	r1, fp
 80071a6:	00cb      	lsls	r3, r1, #3
 80071a8:	4651      	mov	r1, sl
 80071aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071ae:	4651      	mov	r1, sl
 80071b0:	00ca      	lsls	r2, r1, #3
 80071b2:	4610      	mov	r0, r2
 80071b4:	4619      	mov	r1, r3
 80071b6:	4603      	mov	r3, r0
 80071b8:	4642      	mov	r2, r8
 80071ba:	189b      	adds	r3, r3, r2
 80071bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80071c0:	464b      	mov	r3, r9
 80071c2:	460a      	mov	r2, r1
 80071c4:	eb42 0303 	adc.w	r3, r2, r3
 80071c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80071cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80071d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80071d8:	f04f 0200 	mov.w	r2, #0
 80071dc:	f04f 0300 	mov.w	r3, #0
 80071e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80071e4:	4649      	mov	r1, r9
 80071e6:	008b      	lsls	r3, r1, #2
 80071e8:	4641      	mov	r1, r8
 80071ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071ee:	4641      	mov	r1, r8
 80071f0:	008a      	lsls	r2, r1, #2
 80071f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80071f6:	f7fb fe61 	bl	8002ebc <__aeabi_uldivmod>
 80071fa:	4602      	mov	r2, r0
 80071fc:	460b      	mov	r3, r1
 80071fe:	4b39      	ldr	r3, [pc, #228]	; (80072e4 <UART_SetConfig+0x4e4>)
 8007200:	fba3 1302 	umull	r1, r3, r3, r2
 8007204:	095b      	lsrs	r3, r3, #5
 8007206:	2164      	movs	r1, #100	; 0x64
 8007208:	fb01 f303 	mul.w	r3, r1, r3
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	011b      	lsls	r3, r3, #4
 8007210:	3332      	adds	r3, #50	; 0x32
 8007212:	4a34      	ldr	r2, [pc, #208]	; (80072e4 <UART_SetConfig+0x4e4>)
 8007214:	fba2 2303 	umull	r2, r3, r2, r3
 8007218:	095b      	lsrs	r3, r3, #5
 800721a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800721e:	441c      	add	r4, r3
 8007220:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007224:	2200      	movs	r2, #0
 8007226:	673b      	str	r3, [r7, #112]	; 0x70
 8007228:	677a      	str	r2, [r7, #116]	; 0x74
 800722a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800722e:	4642      	mov	r2, r8
 8007230:	464b      	mov	r3, r9
 8007232:	1891      	adds	r1, r2, r2
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	415b      	adcs	r3, r3
 8007238:	60fb      	str	r3, [r7, #12]
 800723a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800723e:	4641      	mov	r1, r8
 8007240:	1851      	adds	r1, r2, r1
 8007242:	6039      	str	r1, [r7, #0]
 8007244:	4649      	mov	r1, r9
 8007246:	414b      	adcs	r3, r1
 8007248:	607b      	str	r3, [r7, #4]
 800724a:	f04f 0200 	mov.w	r2, #0
 800724e:	f04f 0300 	mov.w	r3, #0
 8007252:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007256:	4659      	mov	r1, fp
 8007258:	00cb      	lsls	r3, r1, #3
 800725a:	4651      	mov	r1, sl
 800725c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007260:	4651      	mov	r1, sl
 8007262:	00ca      	lsls	r2, r1, #3
 8007264:	4610      	mov	r0, r2
 8007266:	4619      	mov	r1, r3
 8007268:	4603      	mov	r3, r0
 800726a:	4642      	mov	r2, r8
 800726c:	189b      	adds	r3, r3, r2
 800726e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007270:	464b      	mov	r3, r9
 8007272:	460a      	mov	r2, r1
 8007274:	eb42 0303 	adc.w	r3, r2, r3
 8007278:	66fb      	str	r3, [r7, #108]	; 0x6c
 800727a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	663b      	str	r3, [r7, #96]	; 0x60
 8007284:	667a      	str	r2, [r7, #100]	; 0x64
 8007286:	f04f 0200 	mov.w	r2, #0
 800728a:	f04f 0300 	mov.w	r3, #0
 800728e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007292:	4649      	mov	r1, r9
 8007294:	008b      	lsls	r3, r1, #2
 8007296:	4641      	mov	r1, r8
 8007298:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800729c:	4641      	mov	r1, r8
 800729e:	008a      	lsls	r2, r1, #2
 80072a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80072a4:	f7fb fe0a 	bl	8002ebc <__aeabi_uldivmod>
 80072a8:	4602      	mov	r2, r0
 80072aa:	460b      	mov	r3, r1
 80072ac:	4b0d      	ldr	r3, [pc, #52]	; (80072e4 <UART_SetConfig+0x4e4>)
 80072ae:	fba3 1302 	umull	r1, r3, r3, r2
 80072b2:	095b      	lsrs	r3, r3, #5
 80072b4:	2164      	movs	r1, #100	; 0x64
 80072b6:	fb01 f303 	mul.w	r3, r1, r3
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	011b      	lsls	r3, r3, #4
 80072be:	3332      	adds	r3, #50	; 0x32
 80072c0:	4a08      	ldr	r2, [pc, #32]	; (80072e4 <UART_SetConfig+0x4e4>)
 80072c2:	fba2 2303 	umull	r2, r3, r2, r3
 80072c6:	095b      	lsrs	r3, r3, #5
 80072c8:	f003 020f 	and.w	r2, r3, #15
 80072cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4422      	add	r2, r4
 80072d4:	609a      	str	r2, [r3, #8]
}
 80072d6:	bf00      	nop
 80072d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80072dc:	46bd      	mov	sp, r7
 80072de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072e2:	bf00      	nop
 80072e4:	51eb851f 	.word	0x51eb851f

080072e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072e8:	b084      	sub	sp, #16
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b084      	sub	sp, #16
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	f107 001c 	add.w	r0, r7, #28
 80072f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80072fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d122      	bne.n	8007346 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007304:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800732a:	2b01      	cmp	r3, #1
 800732c:	d105      	bne.n	800733a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f9c0 	bl	80076c0 <USB_CoreReset>
 8007340:	4603      	mov	r3, r0
 8007342:	73fb      	strb	r3, [r7, #15]
 8007344:	e01a      	b.n	800737c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f9b4 	bl	80076c0 <USB_CoreReset>
 8007358:	4603      	mov	r3, r0
 800735a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800735c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800735e:	2b00      	cmp	r3, #0
 8007360:	d106      	bne.n	8007370 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007366:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	639a      	str	r2, [r3, #56]	; 0x38
 800736e:	e005      	b.n	800737c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007374:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800737c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737e:	2b01      	cmp	r3, #1
 8007380:	d10b      	bne.n	800739a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f043 0206 	orr.w	r2, r3, #6
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f043 0220 	orr.w	r2, r3, #32
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800739a:	7bfb      	ldrb	r3, [r7, #15]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073a6:	b004      	add	sp, #16
 80073a8:	4770      	bx	lr

080073aa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073aa:	b480      	push	{r7}
 80073ac:	b083      	sub	sp, #12
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	f043 0201 	orr.w	r2, r3, #1
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f023 0201 	bic.w	r2, r3, #1
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b084      	sub	sp, #16
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	460b      	mov	r3, r1
 80073f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80073fa:	2300      	movs	r3, #0
 80073fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800740a:	78fb      	ldrb	r3, [r7, #3]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d115      	bne.n	800743c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800741c:	2001      	movs	r0, #1
 800741e:	f7fb ff6b 	bl	80032f8 <HAL_Delay>
      ms++;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	3301      	adds	r3, #1
 8007426:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f93a 	bl	80076a2 <USB_GetMode>
 800742e:	4603      	mov	r3, r0
 8007430:	2b01      	cmp	r3, #1
 8007432:	d01e      	beq.n	8007472 <USB_SetCurrentMode+0x84>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2b31      	cmp	r3, #49	; 0x31
 8007438:	d9f0      	bls.n	800741c <USB_SetCurrentMode+0x2e>
 800743a:	e01a      	b.n	8007472 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800743c:	78fb      	ldrb	r3, [r7, #3]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d115      	bne.n	800746e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800744e:	2001      	movs	r0, #1
 8007450:	f7fb ff52 	bl	80032f8 <HAL_Delay>
      ms++;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	3301      	adds	r3, #1
 8007458:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f921 	bl	80076a2 <USB_GetMode>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d005      	beq.n	8007472 <USB_SetCurrentMode+0x84>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2b31      	cmp	r3, #49	; 0x31
 800746a:	d9f0      	bls.n	800744e <USB_SetCurrentMode+0x60>
 800746c:	e001      	b.n	8007472 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e005      	b.n	800747e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2b32      	cmp	r3, #50	; 0x32
 8007476:	d101      	bne.n	800747c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	e000      	b.n	800747e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
	...

08007488 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007492:	2300      	movs	r3, #0
 8007494:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	3301      	adds	r3, #1
 800749a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4a13      	ldr	r2, [pc, #76]	; (80074ec <USB_FlushTxFifo+0x64>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d901      	bls.n	80074a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e01b      	b.n	80074e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	daf2      	bge.n	8007496 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80074b0:	2300      	movs	r3, #0
 80074b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	019b      	lsls	r3, r3, #6
 80074b8:	f043 0220 	orr.w	r2, r3, #32
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	3301      	adds	r3, #1
 80074c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	4a08      	ldr	r2, [pc, #32]	; (80074ec <USB_FlushTxFifo+0x64>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d901      	bls.n	80074d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e006      	b.n	80074e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	f003 0320 	and.w	r3, r3, #32
 80074da:	2b20      	cmp	r3, #32
 80074dc:	d0f0      	beq.n	80074c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3714      	adds	r7, #20
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr
 80074ec:	00030d40 	.word	0x00030d40

080074f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074f8:	2300      	movs	r3, #0
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	3301      	adds	r3, #1
 8007500:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	4a11      	ldr	r2, [pc, #68]	; (800754c <USB_FlushRxFifo+0x5c>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d901      	bls.n	800750e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e018      	b.n	8007540 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	2b00      	cmp	r3, #0
 8007514:	daf2      	bge.n	80074fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007516:	2300      	movs	r3, #0
 8007518:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2210      	movs	r2, #16
 800751e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	3301      	adds	r3, #1
 8007524:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	4a08      	ldr	r2, [pc, #32]	; (800754c <USB_FlushRxFifo+0x5c>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d901      	bls.n	8007532 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800752e:	2303      	movs	r3, #3
 8007530:	e006      	b.n	8007540 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	f003 0310 	and.w	r3, r3, #16
 800753a:	2b10      	cmp	r3, #16
 800753c:	d0f0      	beq.n	8007520 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr
 800754c:	00030d40 	.word	0x00030d40

08007550 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007550:	b480      	push	{r7}
 8007552:	b089      	sub	sp, #36	; 0x24
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	4611      	mov	r1, r2
 800755c:	461a      	mov	r2, r3
 800755e:	460b      	mov	r3, r1
 8007560:	71fb      	strb	r3, [r7, #7]
 8007562:	4613      	mov	r3, r2
 8007564:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800756e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007572:	2b00      	cmp	r3, #0
 8007574:	d123      	bne.n	80075be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007576:	88bb      	ldrh	r3, [r7, #4]
 8007578:	3303      	adds	r3, #3
 800757a:	089b      	lsrs	r3, r3, #2
 800757c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800757e:	2300      	movs	r3, #0
 8007580:	61bb      	str	r3, [r7, #24]
 8007582:	e018      	b.n	80075b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007584:	79fb      	ldrb	r3, [r7, #7]
 8007586:	031a      	lsls	r2, r3, #12
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	4413      	add	r3, r2
 800758c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007590:	461a      	mov	r2, r3
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	3301      	adds	r3, #1
 800759c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	3301      	adds	r3, #1
 80075a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	3301      	adds	r3, #1
 80075a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	3301      	adds	r3, #1
 80075ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	3301      	adds	r3, #1
 80075b4:	61bb      	str	r3, [r7, #24]
 80075b6:	69ba      	ldr	r2, [r7, #24]
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d3e2      	bcc.n	8007584 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3724      	adds	r7, #36	; 0x24
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b08b      	sub	sp, #44	; 0x2c
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	4613      	mov	r3, r2
 80075d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80075e2:	88fb      	ldrh	r3, [r7, #6]
 80075e4:	089b      	lsrs	r3, r3, #2
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80075ea:	88fb      	ldrh	r3, [r7, #6]
 80075ec:	f003 0303 	and.w	r3, r3, #3
 80075f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80075f2:	2300      	movs	r3, #0
 80075f4:	623b      	str	r3, [r7, #32]
 80075f6:	e014      	b.n	8007622 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007602:	601a      	str	r2, [r3, #0]
    pDest++;
 8007604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007606:	3301      	adds	r3, #1
 8007608:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760c:	3301      	adds	r3, #1
 800760e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007612:	3301      	adds	r3, #1
 8007614:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	3301      	adds	r3, #1
 800761a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800761c:	6a3b      	ldr	r3, [r7, #32]
 800761e:	3301      	adds	r3, #1
 8007620:	623b      	str	r3, [r7, #32]
 8007622:	6a3a      	ldr	r2, [r7, #32]
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	429a      	cmp	r2, r3
 8007628:	d3e6      	bcc.n	80075f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800762a:	8bfb      	ldrh	r3, [r7, #30]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d01e      	beq.n	800766e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007630:	2300      	movs	r3, #0
 8007632:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800763a:	461a      	mov	r2, r3
 800763c:	f107 0310 	add.w	r3, r7, #16
 8007640:	6812      	ldr	r2, [r2, #0]
 8007642:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	6a3b      	ldr	r3, [r7, #32]
 8007648:	b2db      	uxtb	r3, r3
 800764a:	00db      	lsls	r3, r3, #3
 800764c:	fa22 f303 	lsr.w	r3, r2, r3
 8007650:	b2da      	uxtb	r2, r3
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	701a      	strb	r2, [r3, #0]
      i++;
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	3301      	adds	r3, #1
 800765a:	623b      	str	r3, [r7, #32]
      pDest++;
 800765c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765e:	3301      	adds	r3, #1
 8007660:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007662:	8bfb      	ldrh	r3, [r7, #30]
 8007664:	3b01      	subs	r3, #1
 8007666:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007668:	8bfb      	ldrh	r3, [r7, #30]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1ea      	bne.n	8007644 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007670:	4618      	mov	r0, r3
 8007672:	372c      	adds	r7, #44	; 0x2c
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	695b      	ldr	r3, [r3, #20]
 8007688:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	4013      	ands	r3, r2
 8007692:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007694:	68fb      	ldr	r3, [r7, #12]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b083      	sub	sp, #12
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	f003 0301 	and.w	r3, r3, #1
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	370c      	adds	r7, #12
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
	...

080076c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076c8:	2300      	movs	r3, #0
 80076ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	3301      	adds	r3, #1
 80076d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	4a13      	ldr	r2, [pc, #76]	; (8007724 <USB_CoreReset+0x64>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d901      	bls.n	80076de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e01b      	b.n	8007716 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	daf2      	bge.n	80076cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80076e6:	2300      	movs	r3, #0
 80076e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	f043 0201 	orr.w	r2, r3, #1
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	3301      	adds	r3, #1
 80076fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	4a09      	ldr	r2, [pc, #36]	; (8007724 <USB_CoreReset+0x64>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d901      	bls.n	8007708 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007704:	2303      	movs	r3, #3
 8007706:	e006      	b.n	8007716 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	f003 0301 	and.w	r3, r3, #1
 8007710:	2b01      	cmp	r3, #1
 8007712:	d0f0      	beq.n	80076f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3714      	adds	r7, #20
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	00030d40 	.word	0x00030d40

08007728 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007728:	b084      	sub	sp, #16
 800772a:	b580      	push	{r7, lr}
 800772c:	b086      	sub	sp, #24
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
 8007732:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007748:	461a      	mov	r2, r3
 800774a:	2300      	movs	r3, #0
 800774c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007752:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800776a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800777a:	2b00      	cmp	r3, #0
 800777c:	d018      	beq.n	80077b0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800777e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007780:	2b01      	cmp	r3, #1
 8007782:	d10a      	bne.n	800779a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007792:	f043 0304 	orr.w	r3, r3, #4
 8007796:	6013      	str	r3, [r2, #0]
 8007798:	e014      	b.n	80077c4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80077a8:	f023 0304 	bic.w	r3, r3, #4
 80077ac:	6013      	str	r3, [r2, #0]
 80077ae:	e009      	b.n	80077c4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80077be:	f023 0304 	bic.w	r3, r3, #4
 80077c2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80077c4:	2110      	movs	r1, #16
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7ff fe5e 	bl	8007488 <USB_FlushTxFifo>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f7ff fe8a 	bl	80074f0 <USB_FlushRxFifo>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80077e6:	2300      	movs	r3, #0
 80077e8:	613b      	str	r3, [r7, #16]
 80077ea:	e015      	b.n	8007818 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	015a      	lsls	r2, r3, #5
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	4413      	add	r3, r2
 80077f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077f8:	461a      	mov	r2, r3
 80077fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077fe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	015a      	lsls	r2, r3, #5
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	4413      	add	r3, r2
 8007808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800780c:	461a      	mov	r2, r3
 800780e:	2300      	movs	r3, #0
 8007810:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	3301      	adds	r3, #1
 8007816:	613b      	str	r3, [r7, #16]
 8007818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	429a      	cmp	r2, r3
 800781e:	d3e5      	bcc.n	80077ec <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800782c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00b      	beq.n	8007852 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007840:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a13      	ldr	r2, [pc, #76]	; (8007894 <USB_HostInit+0x16c>)
 8007846:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a13      	ldr	r2, [pc, #76]	; (8007898 <USB_HostInit+0x170>)
 800784c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007850:	e009      	b.n	8007866 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2280      	movs	r2, #128	; 0x80
 8007856:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4a10      	ldr	r2, [pc, #64]	; (800789c <USB_HostInit+0x174>)
 800785c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a0f      	ldr	r2, [pc, #60]	; (80078a0 <USB_HostInit+0x178>)
 8007862:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007868:	2b00      	cmp	r3, #0
 800786a:	d105      	bne.n	8007878 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	f043 0210 	orr.w	r2, r3, #16
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	699a      	ldr	r2, [r3, #24]
 800787c:	4b09      	ldr	r3, [pc, #36]	; (80078a4 <USB_HostInit+0x17c>)
 800787e:	4313      	orrs	r3, r2
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007884:	7dfb      	ldrb	r3, [r7, #23]
}
 8007886:	4618      	mov	r0, r3
 8007888:	3718      	adds	r7, #24
 800788a:	46bd      	mov	sp, r7
 800788c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007890:	b004      	add	sp, #16
 8007892:	4770      	bx	lr
 8007894:	01000200 	.word	0x01000200
 8007898:	00e00300 	.word	0x00e00300
 800789c:	00600080 	.word	0x00600080
 80078a0:	004000e0 	.word	0x004000e0
 80078a4:	a3200008 	.word	0xa3200008

080078a8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	460b      	mov	r3, r1
 80078b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80078c6:	f023 0303 	bic.w	r3, r3, #3
 80078ca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	78fb      	ldrb	r3, [r7, #3]
 80078d6:	f003 0303 	and.w	r3, r3, #3
 80078da:	68f9      	ldr	r1, [r7, #12]
 80078dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80078e0:	4313      	orrs	r3, r2
 80078e2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80078e4:	78fb      	ldrb	r3, [r7, #3]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d107      	bne.n	80078fa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078f0:	461a      	mov	r2, r3
 80078f2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80078f6:	6053      	str	r3, [r2, #4]
 80078f8:	e009      	b.n	800790e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80078fa:	78fb      	ldrb	r3, [r7, #3]
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d106      	bne.n	800790e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007906:	461a      	mov	r2, r3
 8007908:	f241 7370 	movw	r3, #6000	; 0x1770
 800790c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3714      	adds	r7, #20
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007928:	2300      	movs	r3, #0
 800792a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800793c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800794a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800794c:	2064      	movs	r0, #100	; 0x64
 800794e:	f7fb fcd3 	bl	80032f8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800795a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800795e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007960:	200a      	movs	r0, #10
 8007962:	f7fb fcc9 	bl	80032f8 <HAL_Delay>

  return HAL_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3710      	adds	r7, #16
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	460b      	mov	r3, r1
 800797a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007980:	2300      	movs	r3, #0
 8007982:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007994:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800799c:	2b00      	cmp	r3, #0
 800799e:	d109      	bne.n	80079b4 <USB_DriveVbus+0x44>
 80079a0:	78fb      	ldrb	r3, [r7, #3]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d106      	bne.n	80079b4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80079ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80079b2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079be:	d109      	bne.n	80079d4 <USB_DriveVbus+0x64>
 80079c0:	78fb      	ldrb	r3, [r7, #3]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d106      	bne.n	80079d4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80079ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079d2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3714      	adds	r7, #20
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b085      	sub	sp, #20
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80079ee:	2300      	movs	r3, #0
 80079f0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	0c5b      	lsrs	r3, r3, #17
 8007a00:	f003 0303 	and.w	r3, r3, #3
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3714      	adds	r7, #20
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	b29b      	uxth	r3, r3
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3714      	adds	r7, #20
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
	...

08007a34 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b088      	sub	sp, #32
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	4608      	mov	r0, r1
 8007a3e:	4611      	mov	r1, r2
 8007a40:	461a      	mov	r2, r3
 8007a42:	4603      	mov	r3, r0
 8007a44:	70fb      	strb	r3, [r7, #3]
 8007a46:	460b      	mov	r3, r1
 8007a48:	70bb      	strb	r3, [r7, #2]
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007a56:	78fb      	ldrb	r3, [r7, #3]
 8007a58:	015a      	lsls	r2, r3, #5
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a62:	461a      	mov	r2, r3
 8007a64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a68:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007a6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a6e:	2b03      	cmp	r3, #3
 8007a70:	d87e      	bhi.n	8007b70 <USB_HC_Init+0x13c>
 8007a72:	a201      	add	r2, pc, #4	; (adr r2, 8007a78 <USB_HC_Init+0x44>)
 8007a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a78:	08007a89 	.word	0x08007a89
 8007a7c:	08007b33 	.word	0x08007b33
 8007a80:	08007a89 	.word	0x08007a89
 8007a84:	08007af5 	.word	0x08007af5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007a88:	78fb      	ldrb	r3, [r7, #3]
 8007a8a:	015a      	lsls	r2, r3, #5
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	4413      	add	r3, r2
 8007a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a94:	461a      	mov	r2, r3
 8007a96:	f240 439d 	movw	r3, #1181	; 0x49d
 8007a9a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007a9c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	da10      	bge.n	8007ac6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007aa4:	78fb      	ldrb	r3, [r7, #3]
 8007aa6:	015a      	lsls	r2, r3, #5
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	4413      	add	r3, r2
 8007aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	78fa      	ldrb	r2, [r7, #3]
 8007ab4:	0151      	lsls	r1, r2, #5
 8007ab6:	693a      	ldr	r2, [r7, #16]
 8007ab8:	440a      	add	r2, r1
 8007aba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ac2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007ac4:	e057      	b.n	8007b76 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d051      	beq.n	8007b76 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007ad2:	78fb      	ldrb	r3, [r7, #3]
 8007ad4:	015a      	lsls	r2, r3, #5
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	4413      	add	r3, r2
 8007ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	78fa      	ldrb	r2, [r7, #3]
 8007ae2:	0151      	lsls	r1, r2, #5
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	440a      	add	r2, r1
 8007ae8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007aec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007af0:	60d3      	str	r3, [r2, #12]
      break;
 8007af2:	e040      	b.n	8007b76 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007af4:	78fb      	ldrb	r3, [r7, #3]
 8007af6:	015a      	lsls	r2, r3, #5
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	4413      	add	r3, r2
 8007afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b00:	461a      	mov	r2, r3
 8007b02:	f240 639d 	movw	r3, #1693	; 0x69d
 8007b06:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007b08:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	da34      	bge.n	8007b7a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007b10:	78fb      	ldrb	r3, [r7, #3]
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	78fa      	ldrb	r2, [r7, #3]
 8007b20:	0151      	lsls	r1, r2, #5
 8007b22:	693a      	ldr	r2, [r7, #16]
 8007b24:	440a      	add	r2, r1
 8007b26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b2e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007b30:	e023      	b.n	8007b7a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007b32:	78fb      	ldrb	r3, [r7, #3]
 8007b34:	015a      	lsls	r2, r3, #5
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	4413      	add	r3, r2
 8007b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b3e:	461a      	mov	r2, r3
 8007b40:	f240 2325 	movw	r3, #549	; 0x225
 8007b44:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007b46:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	da17      	bge.n	8007b7e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007b4e:	78fb      	ldrb	r3, [r7, #3]
 8007b50:	015a      	lsls	r2, r3, #5
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	4413      	add	r3, r2
 8007b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	78fa      	ldrb	r2, [r7, #3]
 8007b5e:	0151      	lsls	r1, r2, #5
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	440a      	add	r2, r1
 8007b64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b68:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007b6c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007b6e:	e006      	b.n	8007b7e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	77fb      	strb	r3, [r7, #31]
      break;
 8007b74:	e004      	b.n	8007b80 <USB_HC_Init+0x14c>
      break;
 8007b76:	bf00      	nop
 8007b78:	e002      	b.n	8007b80 <USB_HC_Init+0x14c>
      break;
 8007b7a:	bf00      	nop
 8007b7c:	e000      	b.n	8007b80 <USB_HC_Init+0x14c>
      break;
 8007b7e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007b80:	78fb      	ldrb	r3, [r7, #3]
 8007b82:	015a      	lsls	r2, r3, #5
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	4413      	add	r3, r2
 8007b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	78fa      	ldrb	r2, [r7, #3]
 8007b90:	0151      	lsls	r1, r2, #5
 8007b92:	693a      	ldr	r2, [r7, #16]
 8007b94:	440a      	add	r2, r1
 8007b96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b9a:	f043 0302 	orr.w	r3, r3, #2
 8007b9e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ba6:	699a      	ldr	r2, [r3, #24]
 8007ba8:	78fb      	ldrb	r3, [r7, #3]
 8007baa:	f003 030f 	and.w	r3, r3, #15
 8007bae:	2101      	movs	r1, #1
 8007bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8007bb4:	6939      	ldr	r1, [r7, #16]
 8007bb6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007bca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	da03      	bge.n	8007bda <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bd6:	61bb      	str	r3, [r7, #24]
 8007bd8:	e001      	b.n	8007bde <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f7ff feff 	bl	80079e2 <USB_GetHostSpeed>
 8007be4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007be6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d106      	bne.n	8007bfc <USB_HC_Init+0x1c8>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d003      	beq.n	8007bfc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007bf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007bf8:	617b      	str	r3, [r7, #20]
 8007bfa:	e001      	b.n	8007c00 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c00:	787b      	ldrb	r3, [r7, #1]
 8007c02:	059b      	lsls	r3, r3, #22
 8007c04:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007c08:	78bb      	ldrb	r3, [r7, #2]
 8007c0a:	02db      	lsls	r3, r3, #11
 8007c0c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c10:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007c12:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c16:	049b      	lsls	r3, r3, #18
 8007c18:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007c1c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007c1e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007c20:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007c24:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c2a:	78fb      	ldrb	r3, [r7, #3]
 8007c2c:	0159      	lsls	r1, r3, #5
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	440b      	add	r3, r1
 8007c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c36:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c3c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007c3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	d003      	beq.n	8007c4e <USB_HC_Init+0x21a>
 8007c46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d10f      	bne.n	8007c6e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007c4e:	78fb      	ldrb	r3, [r7, #3]
 8007c50:	015a      	lsls	r2, r3, #5
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	4413      	add	r3, r2
 8007c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	78fa      	ldrb	r2, [r7, #3]
 8007c5e:	0151      	lsls	r1, r2, #5
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	440a      	add	r2, r1
 8007c64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c6c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007c6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3720      	adds	r7, #32
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08c      	sub	sp, #48	; 0x30
 8007c7c:	af02      	add	r7, sp, #8
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	4613      	mov	r3, r2
 8007c84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	785b      	ldrb	r3, [r3, #1]
 8007c8e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c94:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d02d      	beq.n	8007cfe <USB_HC_StartXfer+0x86>
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	791b      	ldrb	r3, [r3, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d129      	bne.n	8007cfe <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007caa:	79fb      	ldrb	r3, [r7, #7]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d117      	bne.n	8007ce0 <USB_HC_StartXfer+0x68>
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	79db      	ldrb	r3, [r3, #7]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d003      	beq.n	8007cc0 <USB_HC_StartXfer+0x48>
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	79db      	ldrb	r3, [r3, #7]
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d10f      	bne.n	8007ce0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	015a      	lsls	r2, r3, #5
 8007cc4:	6a3b      	ldr	r3, [r7, #32]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	69fa      	ldr	r2, [r7, #28]
 8007cd0:	0151      	lsls	r1, r2, #5
 8007cd2:	6a3a      	ldr	r2, [r7, #32]
 8007cd4:	440a      	add	r2, r1
 8007cd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cde:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007ce0:	79fb      	ldrb	r3, [r7, #7]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10b      	bne.n	8007cfe <USB_HC_StartXfer+0x86>
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	795b      	ldrb	r3, [r3, #5]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d107      	bne.n	8007cfe <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	785b      	ldrb	r3, [r3, #1]
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f000 fa0f 	bl	8008118 <USB_DoPing>
      return HAL_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	e0f8      	b.n	8007ef0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	695b      	ldr	r3, [r3, #20]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d018      	beq.n	8007d38 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	68ba      	ldr	r2, [r7, #8]
 8007d0c:	8912      	ldrh	r2, [r2, #8]
 8007d0e:	4413      	add	r3, r2
 8007d10:	3b01      	subs	r3, #1
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	8912      	ldrh	r2, [r2, #8]
 8007d16:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d1a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007d1c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007d1e:	8b7b      	ldrh	r3, [r7, #26]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d90b      	bls.n	8007d3c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007d24:	8b7b      	ldrh	r3, [r7, #26]
 8007d26:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007d28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	8912      	ldrh	r2, [r2, #8]
 8007d2e:	fb03 f202 	mul.w	r2, r3, r2
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	611a      	str	r2, [r3, #16]
 8007d36:	e001      	b.n	8007d3c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	78db      	ldrb	r3, [r3, #3]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d007      	beq.n	8007d54 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007d44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	8912      	ldrh	r2, [r2, #8]
 8007d4a:	fb03 f202 	mul.w	r2, r3, r2
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	611a      	str	r2, [r3, #16]
 8007d52:	e003      	b.n	8007d5c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	695a      	ldr	r2, [r3, #20]
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007d64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d66:	04d9      	lsls	r1, r3, #19
 8007d68:	4b63      	ldr	r3, [pc, #396]	; (8007ef8 <USB_HC_StartXfer+0x280>)
 8007d6a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007d6c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	7a9b      	ldrb	r3, [r3, #10]
 8007d72:	075b      	lsls	r3, r3, #29
 8007d74:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007d78:	69f9      	ldr	r1, [r7, #28]
 8007d7a:	0148      	lsls	r0, r1, #5
 8007d7c:	6a39      	ldr	r1, [r7, #32]
 8007d7e:	4401      	add	r1, r0
 8007d80:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007d84:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007d86:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007d88:	79fb      	ldrb	r3, [r7, #7]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d009      	beq.n	8007da2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	68d9      	ldr	r1, [r3, #12]
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	015a      	lsls	r2, r3, #5
 8007d96:	6a3b      	ldr	r3, [r7, #32]
 8007d98:	4413      	add	r3, r2
 8007d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d9e:	460a      	mov	r2, r1
 8007da0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007da2:	6a3b      	ldr	r3, [r7, #32]
 8007da4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f003 0301 	and.w	r3, r3, #1
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	bf0c      	ite	eq
 8007db2:	2301      	moveq	r3, #1
 8007db4:	2300      	movne	r3, #0
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	015a      	lsls	r2, r3, #5
 8007dbe:	6a3b      	ldr	r3, [r7, #32]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	69fa      	ldr	r2, [r7, #28]
 8007dca:	0151      	lsls	r1, r2, #5
 8007dcc:	6a3a      	ldr	r2, [r7, #32]
 8007dce:	440a      	add	r2, r1
 8007dd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dd4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007dd8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	015a      	lsls	r2, r3, #5
 8007dde:	6a3b      	ldr	r3, [r7, #32]
 8007de0:	4413      	add	r3, r2
 8007de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	7e7b      	ldrb	r3, [r7, #25]
 8007dea:	075b      	lsls	r3, r3, #29
 8007dec:	69f9      	ldr	r1, [r7, #28]
 8007dee:	0148      	lsls	r0, r1, #5
 8007df0:	6a39      	ldr	r1, [r7, #32]
 8007df2:	4401      	add	r1, r0
 8007df4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	015a      	lsls	r2, r3, #5
 8007e00:	6a3b      	ldr	r3, [r7, #32]
 8007e02:	4413      	add	r3, r2
 8007e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007e12:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	78db      	ldrb	r3, [r3, #3]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d004      	beq.n	8007e26 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e22:	613b      	str	r3, [r7, #16]
 8007e24:	e003      	b.n	8007e2e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e2c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e34:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	015a      	lsls	r2, r3, #5
 8007e3a:	6a3b      	ldr	r3, [r7, #32]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e42:	461a      	mov	r2, r3
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007e48:	79fb      	ldrb	r3, [r7, #7]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	e04e      	b.n	8007ef0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	78db      	ldrb	r3, [r3, #3]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d149      	bne.n	8007eee <USB_HC_StartXfer+0x276>
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	695b      	ldr	r3, [r3, #20]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d045      	beq.n	8007eee <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	79db      	ldrb	r3, [r3, #7]
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	d830      	bhi.n	8007ecc <USB_HC_StartXfer+0x254>
 8007e6a:	a201      	add	r2, pc, #4	; (adr r2, 8007e70 <USB_HC_StartXfer+0x1f8>)
 8007e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e70:	08007e81 	.word	0x08007e81
 8007e74:	08007ea5 	.word	0x08007ea5
 8007e78:	08007e81 	.word	0x08007e81
 8007e7c:	08007ea5 	.word	0x08007ea5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	695b      	ldr	r3, [r3, #20]
 8007e84:	3303      	adds	r3, #3
 8007e86:	089b      	lsrs	r3, r3, #2
 8007e88:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007e8a:	8afa      	ldrh	r2, [r7, #22]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d91c      	bls.n	8007ed0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	f043 0220 	orr.w	r2, r3, #32
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	619a      	str	r2, [r3, #24]
        }
        break;
 8007ea2:	e015      	b.n	8007ed0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	695b      	ldr	r3, [r3, #20]
 8007ea8:	3303      	adds	r3, #3
 8007eaa:	089b      	lsrs	r3, r3, #2
 8007eac:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007eae:	8afa      	ldrh	r2, [r7, #22]
 8007eb0:	6a3b      	ldr	r3, [r7, #32]
 8007eb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d90a      	bls.n	8007ed4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	699b      	ldr	r3, [r3, #24]
 8007ec2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	619a      	str	r2, [r3, #24]
        }
        break;
 8007eca:	e003      	b.n	8007ed4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007ecc:	bf00      	nop
 8007ece:	e002      	b.n	8007ed6 <USB_HC_StartXfer+0x25e>
        break;
 8007ed0:	bf00      	nop
 8007ed2:	e000      	b.n	8007ed6 <USB_HC_StartXfer+0x25e>
        break;
 8007ed4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	68d9      	ldr	r1, [r3, #12]
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	785a      	ldrb	r2, [r3, #1]
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	2000      	movs	r0, #0
 8007ee6:	9000      	str	r0, [sp, #0]
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f7ff fb31 	bl	8007550 <USB_WritePacket>
  }

  return HAL_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3728      	adds	r7, #40	; 0x28
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	1ff80000 	.word	0x1ff80000

08007efc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	b29b      	uxth	r3, r3
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3714      	adds	r7, #20
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b089      	sub	sp, #36	; 0x24
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
 8007f26:	460b      	mov	r3, r1
 8007f28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007f2e:	78fb      	ldrb	r3, [r7, #3]
 8007f30:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007f32:	2300      	movs	r3, #0
 8007f34:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	015a      	lsls	r2, r3, #5
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	0c9b      	lsrs	r3, r3, #18
 8007f46:	f003 0303 	and.w	r3, r3, #3
 8007f4a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	015a      	lsls	r2, r3, #5
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	4413      	add	r3, r2
 8007f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	0fdb      	lsrs	r3, r3, #31
 8007f5c:	f003 0301 	and.w	r3, r3, #1
 8007f60:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f003 0320 	and.w	r3, r3, #32
 8007f6a:	2b20      	cmp	r3, #32
 8007f6c:	d104      	bne.n	8007f78 <USB_HC_Halt+0x5a>
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d101      	bne.n	8007f78 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007f74:	2300      	movs	r3, #0
 8007f76:	e0c8      	b.n	800810a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d002      	beq.n	8007f84 <USB_HC_Halt+0x66>
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	d163      	bne.n	800804c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	015a      	lsls	r2, r3, #5
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	69ba      	ldr	r2, [r7, #24]
 8007f94:	0151      	lsls	r1, r2, #5
 8007f96:	69fa      	ldr	r2, [r7, #28]
 8007f98:	440a      	add	r2, r1
 8007f9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fa2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	f003 0320 	and.w	r3, r3, #32
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f040 80ab 	bne.w	8008108 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d133      	bne.n	8008026 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	015a      	lsls	r2, r3, #5
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	69ba      	ldr	r2, [r7, #24]
 8007fce:	0151      	lsls	r1, r2, #5
 8007fd0:	69fa      	ldr	r2, [r7, #28]
 8007fd2:	440a      	add	r2, r1
 8007fd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fdc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	015a      	lsls	r2, r3, #5
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	69ba      	ldr	r2, [r7, #24]
 8007fee:	0151      	lsls	r1, r2, #5
 8007ff0:	69fa      	ldr	r2, [r7, #28]
 8007ff2:	440a      	add	r2, r1
 8007ff4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ff8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ffc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	3301      	adds	r3, #1
 8008002:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800800a:	d81d      	bhi.n	8008048 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	015a      	lsls	r2, r3, #5
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	4413      	add	r3, r2
 8008014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800801e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008022:	d0ec      	beq.n	8007ffe <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008024:	e070      	b.n	8008108 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	015a      	lsls	r2, r3, #5
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	4413      	add	r3, r2
 800802e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	69ba      	ldr	r2, [r7, #24]
 8008036:	0151      	lsls	r1, r2, #5
 8008038:	69fa      	ldr	r2, [r7, #28]
 800803a:	440a      	add	r2, r1
 800803c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008040:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008044:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008046:	e05f      	b.n	8008108 <USB_HC_Halt+0x1ea>
            break;
 8008048:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800804a:	e05d      	b.n	8008108 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	015a      	lsls	r2, r3, #5
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	4413      	add	r3, r2
 8008054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	69ba      	ldr	r2, [r7, #24]
 800805c:	0151      	lsls	r1, r2, #5
 800805e:	69fa      	ldr	r2, [r7, #28]
 8008060:	440a      	add	r2, r1
 8008062:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008066:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800806a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008078:	2b00      	cmp	r3, #0
 800807a:	d133      	bne.n	80080e4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	015a      	lsls	r2, r3, #5
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	4413      	add	r3, r2
 8008084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	69ba      	ldr	r2, [r7, #24]
 800808c:	0151      	lsls	r1, r2, #5
 800808e:	69fa      	ldr	r2, [r7, #28]
 8008090:	440a      	add	r2, r1
 8008092:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008096:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800809a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	015a      	lsls	r2, r3, #5
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	4413      	add	r3, r2
 80080a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	69ba      	ldr	r2, [r7, #24]
 80080ac:	0151      	lsls	r1, r2, #5
 80080ae:	69fa      	ldr	r2, [r7, #28]
 80080b0:	440a      	add	r2, r1
 80080b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80080ba:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	3301      	adds	r3, #1
 80080c0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080c8:	d81d      	bhi.n	8008106 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	015a      	lsls	r2, r3, #5
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	4413      	add	r3, r2
 80080d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080e0:	d0ec      	beq.n	80080bc <USB_HC_Halt+0x19e>
 80080e2:	e011      	b.n	8008108 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	015a      	lsls	r2, r3, #5
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	4413      	add	r3, r2
 80080ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	69ba      	ldr	r2, [r7, #24]
 80080f4:	0151      	lsls	r1, r2, #5
 80080f6:	69fa      	ldr	r2, [r7, #28]
 80080f8:	440a      	add	r2, r1
 80080fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008102:	6013      	str	r3, [r2, #0]
 8008104:	e000      	b.n	8008108 <USB_HC_Halt+0x1ea>
          break;
 8008106:	bf00      	nop
    }
  }

  return HAL_OK;
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3724      	adds	r7, #36	; 0x24
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr
	...

08008118 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008118:	b480      	push	{r7}
 800811a:	b087      	sub	sp, #28
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	460b      	mov	r3, r1
 8008122:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008128:	78fb      	ldrb	r3, [r7, #3]
 800812a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800812c:	2301      	movs	r3, #1
 800812e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	04da      	lsls	r2, r3, #19
 8008134:	4b15      	ldr	r3, [pc, #84]	; (800818c <USB_DoPing+0x74>)
 8008136:	4013      	ands	r3, r2
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	0151      	lsls	r1, r2, #5
 800813c:	697a      	ldr	r2, [r7, #20]
 800813e:	440a      	add	r2, r1
 8008140:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008144:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008148:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	015a      	lsls	r2, r3, #5
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	4413      	add	r3, r2
 8008152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008160:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008168:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	015a      	lsls	r2, r3, #5
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	4413      	add	r3, r2
 8008172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008176:	461a      	mov	r2, r3
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	371c      	adds	r7, #28
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	1ff80000 	.word	0x1ff80000

08008190 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b088      	sub	sp, #32
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008198:	2300      	movs	r3, #0
 800819a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80081a0:	2300      	movs	r3, #0
 80081a2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f7ff f911 	bl	80073cc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80081aa:	2110      	movs	r1, #16
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f7ff f96b 	bl	8007488 <USB_FlushTxFifo>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d001      	beq.n	80081bc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f7ff f997 	bl	80074f0 <USB_FlushRxFifo>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d001      	beq.n	80081cc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80081cc:	2300      	movs	r3, #0
 80081ce:	61bb      	str	r3, [r7, #24]
 80081d0:	e01f      	b.n	8008212 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	015a      	lsls	r2, r3, #5
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	4413      	add	r3, r2
 80081da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081e8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80081f0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80081f8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	015a      	lsls	r2, r3, #5
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	4413      	add	r3, r2
 8008202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008206:	461a      	mov	r2, r3
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	3301      	adds	r3, #1
 8008210:	61bb      	str	r3, [r7, #24]
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	2b0f      	cmp	r3, #15
 8008216:	d9dc      	bls.n	80081d2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008218:	2300      	movs	r3, #0
 800821a:	61bb      	str	r3, [r7, #24]
 800821c:	e034      	b.n	8008288 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	015a      	lsls	r2, r3, #5
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	4413      	add	r3, r2
 8008226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008234:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800823c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008244:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	015a      	lsls	r2, r3, #5
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	4413      	add	r3, r2
 800824e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008252:	461a      	mov	r2, r3
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	3301      	adds	r3, #1
 800825c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008264:	d80c      	bhi.n	8008280 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	015a      	lsls	r2, r3, #5
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	4413      	add	r3, r2
 800826e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008278:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800827c:	d0ec      	beq.n	8008258 <USB_StopHost+0xc8>
 800827e:	e000      	b.n	8008282 <USB_StopHost+0xf2>
        break;
 8008280:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	3301      	adds	r3, #1
 8008286:	61bb      	str	r3, [r7, #24]
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	2b0f      	cmp	r3, #15
 800828c:	d9c7      	bls.n	800821e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008294:	461a      	mov	r2, r3
 8008296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800829a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082a2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f7ff f880 	bl	80073aa <USB_EnableGlobalInt>

  return ret;
 80082aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3720      	adds	r7, #32
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80082b4:	b590      	push	{r4, r7, lr}
 80082b6:	b089      	sub	sp, #36	; 0x24
 80082b8:	af04      	add	r7, sp, #16
 80082ba:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80082bc:	2301      	movs	r3, #1
 80082be:	2202      	movs	r2, #2
 80082c0:	2102      	movs	r1, #2
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fc66 	bl	8008b94 <USBH_FindInterface>
 80082c8:	4603      	mov	r3, r0
 80082ca:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
 80082ce:	2bff      	cmp	r3, #255	; 0xff
 80082d0:	d002      	beq.n	80082d8 <USBH_CDC_InterfaceInit+0x24>
 80082d2:	7bfb      	ldrb	r3, [r7, #15]
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d901      	bls.n	80082dc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80082d8:	2302      	movs	r3, #2
 80082da:	e13d      	b.n	8008558 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80082dc:	7bfb      	ldrb	r3, [r7, #15]
 80082de:	4619      	mov	r1, r3
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 fc3b 	bl	8008b5c <USBH_SelectInterface>
 80082e6:	4603      	mov	r3, r0
 80082e8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80082ea:	7bbb      	ldrb	r3, [r7, #14]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d001      	beq.n	80082f4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80082f0:	2302      	movs	r3, #2
 80082f2:	e131      	b.n	8008558 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80082fa:	2050      	movs	r0, #80	; 0x50
 80082fc:	f7f9 f956 	bl	80015ac <malloc>
 8008300:	4603      	mov	r3, r0
 8008302:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800830a:	69db      	ldr	r3, [r3, #28]
 800830c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d101      	bne.n	8008318 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008314:	2302      	movs	r3, #2
 8008316:	e11f      	b.n	8008558 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008318:	2250      	movs	r2, #80	; 0x50
 800831a:	2100      	movs	r1, #0
 800831c:	68b8      	ldr	r0, [r7, #8]
 800831e:	f7f9 f955 	bl	80015cc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008322:	7bfb      	ldrb	r3, [r7, #15]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	211a      	movs	r1, #26
 8008328:	fb01 f303 	mul.w	r3, r1, r3
 800832c:	4413      	add	r3, r2
 800832e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	b25b      	sxtb	r3, r3
 8008336:	2b00      	cmp	r3, #0
 8008338:	da15      	bge.n	8008366 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800833a:	7bfb      	ldrb	r3, [r7, #15]
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	211a      	movs	r1, #26
 8008340:	fb01 f303 	mul.w	r3, r1, r3
 8008344:	4413      	add	r3, r2
 8008346:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800834a:	781a      	ldrb	r2, [r3, #0]
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008350:	7bfb      	ldrb	r3, [r7, #15]
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	211a      	movs	r1, #26
 8008356:	fb01 f303 	mul.w	r3, r1, r3
 800835a:	4413      	add	r3, r2
 800835c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008360:	881a      	ldrh	r2, [r3, #0]
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	785b      	ldrb	r3, [r3, #1]
 800836a:	4619      	mov	r1, r3
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f001 ff2c 	bl	800a1ca <USBH_AllocPipe>
 8008372:	4603      	mov	r3, r0
 8008374:	461a      	mov	r2, r3
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	7819      	ldrb	r1, [r3, #0]
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	7858      	ldrb	r0, [r3, #1]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800838e:	68ba      	ldr	r2, [r7, #8]
 8008390:	8952      	ldrh	r2, [r2, #10]
 8008392:	9202      	str	r2, [sp, #8]
 8008394:	2203      	movs	r2, #3
 8008396:	9201      	str	r2, [sp, #4]
 8008398:	9300      	str	r3, [sp, #0]
 800839a:	4623      	mov	r3, r4
 800839c:	4602      	mov	r2, r0
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f001 fee4 	bl	800a16c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	2200      	movs	r2, #0
 80083aa:	4619      	mov	r1, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f002 f9f3 	bl	800a798 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80083b2:	2300      	movs	r3, #0
 80083b4:	2200      	movs	r2, #0
 80083b6:	210a      	movs	r1, #10
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 fbeb 	bl	8008b94 <USBH_FindInterface>
 80083be:	4603      	mov	r3, r0
 80083c0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80083c2:	7bfb      	ldrb	r3, [r7, #15]
 80083c4:	2bff      	cmp	r3, #255	; 0xff
 80083c6:	d002      	beq.n	80083ce <USBH_CDC_InterfaceInit+0x11a>
 80083c8:	7bfb      	ldrb	r3, [r7, #15]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d901      	bls.n	80083d2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80083ce:	2302      	movs	r3, #2
 80083d0:	e0c2      	b.n	8008558 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80083d2:	7bfb      	ldrb	r3, [r7, #15]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	211a      	movs	r1, #26
 80083d8:	fb01 f303 	mul.w	r3, r1, r3
 80083dc:	4413      	add	r3, r2
 80083de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	b25b      	sxtb	r3, r3
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	da16      	bge.n	8008418 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80083ea:	7bfb      	ldrb	r3, [r7, #15]
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	211a      	movs	r1, #26
 80083f0:	fb01 f303 	mul.w	r3, r1, r3
 80083f4:	4413      	add	r3, r2
 80083f6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80083fa:	781a      	ldrb	r2, [r3, #0]
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008400:	7bfb      	ldrb	r3, [r7, #15]
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	211a      	movs	r1, #26
 8008406:	fb01 f303 	mul.w	r3, r1, r3
 800840a:	4413      	add	r3, r2
 800840c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008410:	881a      	ldrh	r2, [r3, #0]
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	835a      	strh	r2, [r3, #26]
 8008416:	e015      	b.n	8008444 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008418:	7bfb      	ldrb	r3, [r7, #15]
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	211a      	movs	r1, #26
 800841e:	fb01 f303 	mul.w	r3, r1, r3
 8008422:	4413      	add	r3, r2
 8008424:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008428:	781a      	ldrb	r2, [r3, #0]
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800842e:	7bfb      	ldrb	r3, [r7, #15]
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	211a      	movs	r1, #26
 8008434:	fb01 f303 	mul.w	r3, r1, r3
 8008438:	4413      	add	r3, r2
 800843a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800843e:	881a      	ldrh	r2, [r3, #0]
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008444:	7bfb      	ldrb	r3, [r7, #15]
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	211a      	movs	r1, #26
 800844a:	fb01 f303 	mul.w	r3, r1, r3
 800844e:	4413      	add	r3, r2
 8008450:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	b25b      	sxtb	r3, r3
 8008458:	2b00      	cmp	r3, #0
 800845a:	da16      	bge.n	800848a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800845c:	7bfb      	ldrb	r3, [r7, #15]
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	211a      	movs	r1, #26
 8008462:	fb01 f303 	mul.w	r3, r1, r3
 8008466:	4413      	add	r3, r2
 8008468:	f203 3356 	addw	r3, r3, #854	; 0x356
 800846c:	781a      	ldrb	r2, [r3, #0]
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008472:	7bfb      	ldrb	r3, [r7, #15]
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	211a      	movs	r1, #26
 8008478:	fb01 f303 	mul.w	r3, r1, r3
 800847c:	4413      	add	r3, r2
 800847e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008482:	881a      	ldrh	r2, [r3, #0]
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	835a      	strh	r2, [r3, #26]
 8008488:	e015      	b.n	80084b6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800848a:	7bfb      	ldrb	r3, [r7, #15]
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	211a      	movs	r1, #26
 8008490:	fb01 f303 	mul.w	r3, r1, r3
 8008494:	4413      	add	r3, r2
 8008496:	f203 3356 	addw	r3, r3, #854	; 0x356
 800849a:	781a      	ldrb	r2, [r3, #0]
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	211a      	movs	r1, #26
 80084a6:	fb01 f303 	mul.w	r3, r1, r3
 80084aa:	4413      	add	r3, r2
 80084ac:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80084b0:	881a      	ldrh	r2, [r3, #0]
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	7b9b      	ldrb	r3, [r3, #14]
 80084ba:	4619      	mov	r1, r3
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f001 fe84 	bl	800a1ca <USBH_AllocPipe>
 80084c2:	4603      	mov	r3, r0
 80084c4:	461a      	mov	r2, r3
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	7bdb      	ldrb	r3, [r3, #15]
 80084ce:	4619      	mov	r1, r3
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f001 fe7a 	bl	800a1ca <USBH_AllocPipe>
 80084d6:	4603      	mov	r3, r0
 80084d8:	461a      	mov	r2, r3
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	7b59      	ldrb	r1, [r3, #13]
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	7b98      	ldrb	r0, [r3, #14]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80084f2:	68ba      	ldr	r2, [r7, #8]
 80084f4:	8b12      	ldrh	r2, [r2, #24]
 80084f6:	9202      	str	r2, [sp, #8]
 80084f8:	2202      	movs	r2, #2
 80084fa:	9201      	str	r2, [sp, #4]
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	4623      	mov	r3, r4
 8008500:	4602      	mov	r2, r0
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f001 fe32 	bl	800a16c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	7b19      	ldrb	r1, [r3, #12]
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	7bd8      	ldrb	r0, [r3, #15]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800851c:	68ba      	ldr	r2, [r7, #8]
 800851e:	8b52      	ldrh	r2, [r2, #26]
 8008520:	9202      	str	r2, [sp, #8]
 8008522:	2202      	movs	r2, #2
 8008524:	9201      	str	r2, [sp, #4]
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	4623      	mov	r3, r4
 800852a:	4602      	mov	r2, r0
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f001 fe1d 	bl	800a16c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	7b5b      	ldrb	r3, [r3, #13]
 800853e:	2200      	movs	r2, #0
 8008540:	4619      	mov	r1, r3
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f002 f928 	bl	800a798 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	7b1b      	ldrb	r3, [r3, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	4619      	mov	r1, r3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f002 f921 	bl	800a798 <USBH_LL_SetToggle>

  return USBH_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3714      	adds	r7, #20
 800855c:	46bd      	mov	sp, r7
 800855e:	bd90      	pop	{r4, r7, pc}

08008560 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800856e:	69db      	ldr	r3, [r3, #28]
 8008570:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00e      	beq.n	8008598 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	4619      	mov	r1, r3
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f001 fe12 	bl	800a1aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f001 fe3d 	bl	800a20c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	7b1b      	ldrb	r3, [r3, #12]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00e      	beq.n	80085be <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	7b1b      	ldrb	r3, [r3, #12]
 80085a4:	4619      	mov	r1, r3
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f001 fdff 	bl	800a1aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	7b1b      	ldrb	r3, [r3, #12]
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f001 fe2a 	bl	800a20c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2200      	movs	r2, #0
 80085bc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	7b5b      	ldrb	r3, [r3, #13]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00e      	beq.n	80085e4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	7b5b      	ldrb	r3, [r3, #13]
 80085ca:	4619      	mov	r1, r3
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f001 fdec 	bl	800a1aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	7b5b      	ldrb	r3, [r3, #13]
 80085d6:	4619      	mov	r1, r3
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f001 fe17 	bl	800a20c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085ea:	69db      	ldr	r3, [r3, #28]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00b      	beq.n	8008608 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085f6:	69db      	ldr	r3, [r3, #28]
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7f8 ffdf 	bl	80015bc <free>
    phost->pActiveClass->pData = 0U;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008604:	2200      	movs	r2, #0
 8008606:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b084      	sub	sp, #16
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008620:	69db      	ldr	r3, [r3, #28]
 8008622:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	3340      	adds	r3, #64	; 0x40
 8008628:	4619      	mov	r1, r3
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 f8b1 	bl	8008792 <GetLineCoding>
 8008630:	4603      	mov	r3, r0
 8008632:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008634:	7afb      	ldrb	r3, [r7, #11]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d105      	bne.n	8008646 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008640:	2102      	movs	r1, #2
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008646:	7afb      	ldrb	r3, [r7, #11]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008658:	2301      	movs	r3, #1
 800865a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800865c:	2300      	movs	r3, #0
 800865e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008666:	69db      	ldr	r3, [r3, #28]
 8008668:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008670:	2b04      	cmp	r3, #4
 8008672:	d877      	bhi.n	8008764 <USBH_CDC_Process+0x114>
 8008674:	a201      	add	r2, pc, #4	; (adr r2, 800867c <USBH_CDC_Process+0x2c>)
 8008676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800867a:	bf00      	nop
 800867c:	08008691 	.word	0x08008691
 8008680:	08008697 	.word	0x08008697
 8008684:	080086c7 	.word	0x080086c7
 8008688:	0800873b 	.word	0x0800873b
 800868c:	08008749 	.word	0x08008749
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008690:	2300      	movs	r3, #0
 8008692:	73fb      	strb	r3, [r7, #15]
      break;
 8008694:	e06d      	b.n	8008772 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800869a:	4619      	mov	r1, r3
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 f897 	bl	80087d0 <SetLineCoding>
 80086a2:	4603      	mov	r3, r0
 80086a4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80086a6:	7bbb      	ldrb	r3, [r7, #14]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d104      	bne.n	80086b6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	2202      	movs	r2, #2
 80086b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80086b4:	e058      	b.n	8008768 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80086b6:	7bbb      	ldrb	r3, [r7, #14]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d055      	beq.n	8008768 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	2204      	movs	r2, #4
 80086c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80086c4:	e050      	b.n	8008768 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	3340      	adds	r3, #64	; 0x40
 80086ca:	4619      	mov	r1, r3
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 f860 	bl	8008792 <GetLineCoding>
 80086d2:	4603      	mov	r3, r0
 80086d4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80086d6:	7bbb      	ldrb	r3, [r7, #14]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d126      	bne.n	800872a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	2200      	movs	r2, #0
 80086e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086ee:	791b      	ldrb	r3, [r3, #4]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d13b      	bne.n	800876c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086fe:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008700:	429a      	cmp	r2, r3
 8008702:	d133      	bne.n	800876c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800870e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008710:	429a      	cmp	r2, r3
 8008712:	d12b      	bne.n	800876c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800871c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800871e:	429a      	cmp	r2, r3
 8008720:	d124      	bne.n	800876c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f958 	bl	80089d8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008728:	e020      	b.n	800876c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800872a:	7bbb      	ldrb	r3, [r7, #14]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d01d      	beq.n	800876c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	2204      	movs	r2, #4
 8008734:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008738:	e018      	b.n	800876c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 f867 	bl	800880e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 f8da 	bl	80088fa <CDC_ProcessReception>
      break;
 8008746:	e014      	b.n	8008772 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008748:	2100      	movs	r1, #0
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 ffef 	bl	800972e <USBH_ClrFeature>
 8008750:	4603      	mov	r3, r0
 8008752:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008754:	7bbb      	ldrb	r3, [r7, #14]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d10a      	bne.n	8008770 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008762:	e005      	b.n	8008770 <USBH_CDC_Process+0x120>

    default:
      break;
 8008764:	bf00      	nop
 8008766:	e004      	b.n	8008772 <USBH_CDC_Process+0x122>
      break;
 8008768:	bf00      	nop
 800876a:	e002      	b.n	8008772 <USBH_CDC_Process+0x122>
      break;
 800876c:	bf00      	nop
 800876e:	e000      	b.n	8008772 <USBH_CDC_Process+0x122>
      break;
 8008770:	bf00      	nop

  }

  return status;
 8008772:	7bfb      	ldrb	r3, [r7, #15]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	370c      	adds	r7, #12
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr

08008792 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b082      	sub	sp, #8
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	22a1      	movs	r2, #161	; 0xa1
 80087a0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2221      	movs	r2, #33	; 0x21
 80087a6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2207      	movs	r2, #7
 80087b8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	2207      	movs	r2, #7
 80087be:	4619      	mov	r1, r3
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f001 fa81 	bl	8009cc8 <USBH_CtlReq>
 80087c6:	4603      	mov	r3, r0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3708      	adds	r7, #8
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2221      	movs	r2, #33	; 0x21
 80087de:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2220      	movs	r2, #32
 80087e4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2207      	movs	r2, #7
 80087f6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	2207      	movs	r2, #7
 80087fc:	4619      	mov	r1, r3
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f001 fa62 	bl	8009cc8 <USBH_CtlReq>
 8008804:	4603      	mov	r3, r0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3708      	adds	r7, #8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b086      	sub	sp, #24
 8008812:	af02      	add	r7, sp, #8
 8008814:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800881c:	69db      	ldr	r3, [r3, #28]
 800881e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008820:	2300      	movs	r3, #0
 8008822:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800882a:	2b01      	cmp	r3, #1
 800882c:	d002      	beq.n	8008834 <CDC_ProcessTransmission+0x26>
 800882e:	2b02      	cmp	r3, #2
 8008830:	d023      	beq.n	800887a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008832:	e05e      	b.n	80088f2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	8b12      	ldrh	r2, [r2, #24]
 800883c:	4293      	cmp	r3, r2
 800883e:	d90b      	bls.n	8008858 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	69d9      	ldr	r1, [r3, #28]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	8b1a      	ldrh	r2, [r3, #24]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	7b5b      	ldrb	r3, [r3, #13]
 800884c:	2001      	movs	r0, #1
 800884e:	9000      	str	r0, [sp, #0]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f001 fc48 	bl	800a0e6 <USBH_BulkSendData>
 8008856:	e00b      	b.n	8008870 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8008860:	b29a      	uxth	r2, r3
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	7b5b      	ldrb	r3, [r3, #13]
 8008866:	2001      	movs	r0, #1
 8008868:	9000      	str	r0, [sp, #0]
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f001 fc3b 	bl	800a0e6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2202      	movs	r2, #2
 8008874:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008878:	e03b      	b.n	80088f2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	7b5b      	ldrb	r3, [r3, #13]
 800887e:	4619      	mov	r1, r3
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f001 ff5f 	bl	800a744 <USBH_LL_GetURBState>
 8008886:	4603      	mov	r3, r0
 8008888:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800888a:	7afb      	ldrb	r3, [r7, #11]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d128      	bne.n	80088e2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008894:	68fa      	ldr	r2, [r7, #12]
 8008896:	8b12      	ldrh	r2, [r2, #24]
 8008898:	4293      	cmp	r3, r2
 800889a:	d90e      	bls.n	80088ba <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	8b12      	ldrh	r2, [r2, #24]
 80088a4:	1a9a      	subs	r2, r3, r2
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	69db      	ldr	r3, [r3, #28]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	8b12      	ldrh	r2, [r2, #24]
 80088b2:	441a      	add	r2, r3
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	61da      	str	r2, [r3, #28]
 80088b8:	e002      	b.n	80088c0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2200      	movs	r2, #0
 80088be:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d004      	beq.n	80088d2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80088d0:	e00e      	b.n	80088f0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f868 	bl	80089b0 <USBH_CDC_TransmitCallback>
      break;
 80088e0:	e006      	b.n	80088f0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80088e2:	7afb      	ldrb	r3, [r7, #11]
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d103      	bne.n	80088f0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80088f0:	bf00      	nop
  }
}
 80088f2:	bf00      	nop
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b086      	sub	sp, #24
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008908:	69db      	ldr	r3, [r3, #28]
 800890a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800890c:	2300      	movs	r3, #0
 800890e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008916:	2b03      	cmp	r3, #3
 8008918:	d002      	beq.n	8008920 <CDC_ProcessReception+0x26>
 800891a:	2b04      	cmp	r3, #4
 800891c:	d00e      	beq.n	800893c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800891e:	e043      	b.n	80089a8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	6a19      	ldr	r1, [r3, #32]
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	8b5a      	ldrh	r2, [r3, #26]
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	7b1b      	ldrb	r3, [r3, #12]
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f001 fbff 	bl	800a130 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	2204      	movs	r2, #4
 8008936:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800893a:	e035      	b.n	80089a8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	7b1b      	ldrb	r3, [r3, #12]
 8008940:	4619      	mov	r1, r3
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f001 fefe 	bl	800a744 <USBH_LL_GetURBState>
 8008948:	4603      	mov	r3, r0
 800894a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800894c:	7cfb      	ldrb	r3, [r7, #19]
 800894e:	2b01      	cmp	r3, #1
 8008950:	d129      	bne.n	80089a6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	7b1b      	ldrb	r3, [r3, #12]
 8008956:	4619      	mov	r1, r3
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f001 fe61 	bl	800a620 <USBH_LL_GetLastXferSize>
 800895e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	429a      	cmp	r2, r3
 8008968:	d016      	beq.n	8008998 <CDC_ProcessReception+0x9e>
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	8b5b      	ldrh	r3, [r3, #26]
 800896e:	461a      	mov	r2, r3
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	4293      	cmp	r3, r2
 8008974:	d910      	bls.n	8008998 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	1ad2      	subs	r2, r2, r3
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	6a1a      	ldr	r2, [r3, #32]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	441a      	add	r2, r3
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	2203      	movs	r2, #3
 8008992:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008996:	e006      	b.n	80089a6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	2200      	movs	r2, #0
 800899c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 f80f 	bl	80089c4 <USBH_CDC_ReceiveCallback>
      break;
 80089a6:	bf00      	nop
  }
}
 80089a8:	bf00      	nop
 80089aa:	3718      	adds	r7, #24
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80089b8:	bf00      	nop
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80089cc:	bf00      	nop
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80089e0:	bf00      	nop
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	4613      	mov	r3, r2
 80089f8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d101      	bne.n	8008a04 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008a00:	2302      	movs	r3, #2
 8008a02:	e029      	b.n	8008a58 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	79fa      	ldrb	r2, [r7, #7]
 8008a08:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f000 f81f 	bl	8008a60 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d003      	beq.n	8008a50 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	68ba      	ldr	r2, [r7, #8]
 8008a4c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f001 fd31 	bl	800a4b8 <USBH_LL_Init>

  return USBH_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	60fb      	str	r3, [r7, #12]
 8008a70:	e009      	b.n	8008a86 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	33e0      	adds	r3, #224	; 0xe0
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	4413      	add	r3, r2
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	3301      	adds	r3, #1
 8008a84:	60fb      	str	r3, [r7, #12]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2b0f      	cmp	r3, #15
 8008a8a:	d9f2      	bls.n	8008a72 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	60fb      	str	r3, [r7, #12]
 8008a90:	e009      	b.n	8008aa6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	4413      	add	r3, r2
 8008a98:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	60fb      	str	r3, [r7, #12]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aac:	d3f1      	bcc.n	8008a92 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2201      	movs	r2, #1
 8008abe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2240      	movs	r2, #64	; 0x40
 8008ad2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3714      	adds	r7, #20
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008b12:	2300      	movs	r3, #0
 8008b14:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d016      	beq.n	8008b4a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d10e      	bne.n	8008b44 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008b2c:	1c59      	adds	r1, r3, #1
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	33de      	adds	r3, #222	; 0xde
 8008b38:	6839      	ldr	r1, [r7, #0]
 8008b3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	73fb      	strb	r3, [r7, #15]
 8008b42:	e004      	b.n	8008b4e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008b44:	2302      	movs	r3, #2
 8008b46:	73fb      	strb	r3, [r7, #15]
 8008b48:	e001      	b.n	8008b4e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008b4a:	2302      	movs	r3, #2
 8008b4c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3714      	adds	r7, #20
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b085      	sub	sp, #20
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	460b      	mov	r3, r1
 8008b66:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008b72:	78fa      	ldrb	r2, [r7, #3]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d204      	bcs.n	8008b82 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	78fa      	ldrb	r2, [r7, #3]
 8008b7c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008b80:	e001      	b.n	8008b86 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008b82:	2302      	movs	r3, #2
 8008b84:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3714      	adds	r7, #20
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b087      	sub	sp, #28
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	4608      	mov	r0, r1
 8008b9e:	4611      	mov	r1, r2
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	70fb      	strb	r3, [r7, #3]
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	70bb      	strb	r3, [r7, #2]
 8008baa:	4613      	mov	r3, r2
 8008bac:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008bbc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008bbe:	e025      	b.n	8008c0c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008bc0:	7dfb      	ldrb	r3, [r7, #23]
 8008bc2:	221a      	movs	r2, #26
 8008bc4:	fb02 f303 	mul.w	r3, r2, r3
 8008bc8:	3308      	adds	r3, #8
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	4413      	add	r3, r2
 8008bce:	3302      	adds	r3, #2
 8008bd0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	795b      	ldrb	r3, [r3, #5]
 8008bd6:	78fa      	ldrb	r2, [r7, #3]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d002      	beq.n	8008be2 <USBH_FindInterface+0x4e>
 8008bdc:	78fb      	ldrb	r3, [r7, #3]
 8008bde:	2bff      	cmp	r3, #255	; 0xff
 8008be0:	d111      	bne.n	8008c06 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008be6:	78ba      	ldrb	r2, [r7, #2]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d002      	beq.n	8008bf2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008bec:	78bb      	ldrb	r3, [r7, #2]
 8008bee:	2bff      	cmp	r3, #255	; 0xff
 8008bf0:	d109      	bne.n	8008c06 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008bf6:	787a      	ldrb	r2, [r7, #1]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d002      	beq.n	8008c02 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008bfc:	787b      	ldrb	r3, [r7, #1]
 8008bfe:	2bff      	cmp	r3, #255	; 0xff
 8008c00:	d101      	bne.n	8008c06 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008c02:	7dfb      	ldrb	r3, [r7, #23]
 8008c04:	e006      	b.n	8008c14 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008c06:	7dfb      	ldrb	r3, [r7, #23]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008c0c:	7dfb      	ldrb	r3, [r7, #23]
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d9d6      	bls.n	8008bc0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008c12:	23ff      	movs	r3, #255	; 0xff
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	371c      	adds	r7, #28
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f001 fc81 	bl	800a530 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008c2e:	2101      	movs	r1, #1
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f001 fd9a 	bl	800a76a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008c36:	2300      	movs	r3, #0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3708      	adds	r7, #8
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b088      	sub	sp, #32
 8008c44:	af04      	add	r7, sp, #16
 8008c46:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008c48:	2302      	movs	r3, #2
 8008c4a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d102      	bne.n	8008c62 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2203      	movs	r2, #3
 8008c60:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	2b0b      	cmp	r3, #11
 8008c6a:	f200 81be 	bhi.w	8008fea <USBH_Process+0x3aa>
 8008c6e:	a201      	add	r2, pc, #4	; (adr r2, 8008c74 <USBH_Process+0x34>)
 8008c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c74:	08008ca5 	.word	0x08008ca5
 8008c78:	08008cd7 	.word	0x08008cd7
 8008c7c:	08008d3f 	.word	0x08008d3f
 8008c80:	08008f85 	.word	0x08008f85
 8008c84:	08008feb 	.word	0x08008feb
 8008c88:	08008de3 	.word	0x08008de3
 8008c8c:	08008f2b 	.word	0x08008f2b
 8008c90:	08008e19 	.word	0x08008e19
 8008c94:	08008e39 	.word	0x08008e39
 8008c98:	08008e59 	.word	0x08008e59
 8008c9c:	08008e9d 	.word	0x08008e9d
 8008ca0:	08008f6d 	.word	0x08008f6d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f000 819e 	beq.w	8008fee <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008cb8:	20c8      	movs	r0, #200	; 0xc8
 8008cba:	f001 fd9d 	bl	800a7f8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f001 fc93 	bl	800a5ea <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008cd4:	e18b      	b.n	8008fee <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d107      	bne.n	8008cf0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2202      	movs	r2, #2
 8008cec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008cee:	e18d      	b.n	800900c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008cf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cfa:	d914      	bls.n	8008d26 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008d02:	3301      	adds	r3, #1
 8008d04:	b2da      	uxtb	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008d12:	2b03      	cmp	r3, #3
 8008d14:	d903      	bls.n	8008d1e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	220d      	movs	r2, #13
 8008d1a:	701a      	strb	r2, [r3, #0]
      break;
 8008d1c:	e176      	b.n	800900c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2200      	movs	r2, #0
 8008d22:	701a      	strb	r2, [r3, #0]
      break;
 8008d24:	e172      	b.n	800900c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008d2c:	f103 020a 	add.w	r2, r3, #10
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008d36:	200a      	movs	r0, #10
 8008d38:	f001 fd5e 	bl	800a7f8 <USBH_Delay>
      break;
 8008d3c:	e166      	b.n	800900c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d005      	beq.n	8008d54 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d4e:	2104      	movs	r1, #4
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008d54:	2064      	movs	r0, #100	; 0x64
 8008d56:	f001 fd4f 	bl	800a7f8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f001 fc1e 	bl	800a59c <USBH_LL_GetSpeed>
 8008d60:	4603      	mov	r3, r0
 8008d62:	461a      	mov	r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2205      	movs	r2, #5
 8008d6e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008d70:	2100      	movs	r1, #0
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f001 fa29 	bl	800a1ca <USBH_AllocPipe>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008d80:	2180      	movs	r1, #128	; 0x80
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f001 fa21 	bl	800a1ca <USBH_AllocPipe>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	7919      	ldrb	r1, [r3, #4]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008da4:	b292      	uxth	r2, r2
 8008da6:	9202      	str	r2, [sp, #8]
 8008da8:	2200      	movs	r2, #0
 8008daa:	9201      	str	r2, [sp, #4]
 8008dac:	9300      	str	r3, [sp, #0]
 8008dae:	4603      	mov	r3, r0
 8008db0:	2280      	movs	r2, #128	; 0x80
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f001 f9da 	bl	800a16c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	7959      	ldrb	r1, [r3, #5]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008dcc:	b292      	uxth	r2, r2
 8008dce:	9202      	str	r2, [sp, #8]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	9201      	str	r2, [sp, #4]
 8008dd4:	9300      	str	r3, [sp, #0]
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2200      	movs	r2, #0
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f001 f9c6 	bl	800a16c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008de0:	e114      	b.n	800900c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 f918 	bl	8009018 <USBH_HandleEnum>
 8008de8:	4603      	mov	r3, r0
 8008dea:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008dec:	7bbb      	ldrb	r3, [r7, #14]
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	f040 80fe 	bne.w	8008ff2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d103      	bne.n	8008e10 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2208      	movs	r2, #8
 8008e0c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008e0e:	e0f0      	b.n	8008ff2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2207      	movs	r2, #7
 8008e14:	701a      	strb	r2, [r3, #0]
      break;
 8008e16:	e0ec      	b.n	8008ff2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	f000 80e9 	beq.w	8008ff6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e2a:	2101      	movs	r1, #1
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2208      	movs	r2, #8
 8008e34:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008e36:	e0de      	b.n	8008ff6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	4619      	mov	r1, r3
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 fc2c 	bl	80096a0 <USBH_SetCfg>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f040 80d5 	bne.w	8008ffa <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2209      	movs	r2, #9
 8008e54:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e56:	e0d0      	b.n	8008ffa <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008e5e:	f003 0320 	and.w	r3, r3, #32
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d016      	beq.n	8008e94 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008e66:	2101      	movs	r1, #1
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fc3c 	bl	80096e6 <USBH_SetFeature>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008e72:	7bbb      	ldrb	r3, [r7, #14]
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d103      	bne.n	8008e82 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	220a      	movs	r2, #10
 8008e7e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e80:	e0bd      	b.n	8008ffe <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8008e82:	7bbb      	ldrb	r3, [r7, #14]
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	2b03      	cmp	r3, #3
 8008e88:	f040 80b9 	bne.w	8008ffe <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	220a      	movs	r2, #10
 8008e90:	701a      	strb	r2, [r3, #0]
      break;
 8008e92:	e0b4      	b.n	8008ffe <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	220a      	movs	r2, #10
 8008e98:	701a      	strb	r2, [r3, #0]
      break;
 8008e9a:	e0b0      	b.n	8008ffe <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f000 80ad 	beq.w	8009002 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	73fb      	strb	r3, [r7, #15]
 8008eb4:	e016      	b.n	8008ee4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008eb6:	7bfa      	ldrb	r2, [r7, #15]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	32de      	adds	r2, #222	; 0xde
 8008ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec0:	791a      	ldrb	r2, [r3, #4]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d108      	bne.n	8008ede <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008ecc:	7bfa      	ldrb	r2, [r7, #15]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	32de      	adds	r2, #222	; 0xde
 8008ed2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008edc:	e005      	b.n	8008eea <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008ede:	7bfb      	ldrb	r3, [r7, #15]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	73fb      	strb	r3, [r7, #15]
 8008ee4:	7bfb      	ldrb	r3, [r7, #15]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d0e5      	beq.n	8008eb6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d016      	beq.n	8008f22 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	4798      	blx	r3
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d109      	bne.n	8008f1a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2206      	movs	r2, #6
 8008f0a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f12:	2103      	movs	r1, #3
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008f18:	e073      	b.n	8009002 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	220d      	movs	r2, #13
 8008f1e:	701a      	strb	r2, [r3, #0]
      break;
 8008f20:	e06f      	b.n	8009002 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	220d      	movs	r2, #13
 8008f26:	701a      	strb	r2, [r3, #0]
      break;
 8008f28:	e06b      	b.n	8009002 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d017      	beq.n	8008f64 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	4798      	blx	r3
 8008f40:	4603      	mov	r3, r0
 8008f42:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008f44:	7bbb      	ldrb	r3, [r7, #14]
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d103      	bne.n	8008f54 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	220b      	movs	r2, #11
 8008f50:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008f52:	e058      	b.n	8009006 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8008f54:	7bbb      	ldrb	r3, [r7, #14]
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	d154      	bne.n	8009006 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	220d      	movs	r2, #13
 8008f60:	701a      	strb	r2, [r3, #0]
      break;
 8008f62:	e050      	b.n	8009006 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	220d      	movs	r2, #13
 8008f68:	701a      	strb	r2, [r3, #0]
      break;
 8008f6a:	e04c      	b.n	8009006 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d049      	beq.n	800900a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f7c:	695b      	ldr	r3, [r3, #20]
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	4798      	blx	r3
      }
      break;
 8008f82:	e042      	b.n	800900a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f7ff fd67 	bl	8008a60 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d009      	beq.n	8008fb0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d005      	beq.n	8008fc6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008fc0:	2105      	movs	r1, #5
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d107      	bne.n	8008fe2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f7ff fe20 	bl	8008c20 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008fe0:	e014      	b.n	800900c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f001 faa4 	bl	800a530 <USBH_LL_Start>
      break;
 8008fe8:	e010      	b.n	800900c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008fea:	bf00      	nop
 8008fec:	e00e      	b.n	800900c <USBH_Process+0x3cc>
      break;
 8008fee:	bf00      	nop
 8008ff0:	e00c      	b.n	800900c <USBH_Process+0x3cc>
      break;
 8008ff2:	bf00      	nop
 8008ff4:	e00a      	b.n	800900c <USBH_Process+0x3cc>
    break;
 8008ff6:	bf00      	nop
 8008ff8:	e008      	b.n	800900c <USBH_Process+0x3cc>
      break;
 8008ffa:	bf00      	nop
 8008ffc:	e006      	b.n	800900c <USBH_Process+0x3cc>
      break;
 8008ffe:	bf00      	nop
 8009000:	e004      	b.n	800900c <USBH_Process+0x3cc>
      break;
 8009002:	bf00      	nop
 8009004:	e002      	b.n	800900c <USBH_Process+0x3cc>
      break;
 8009006:	bf00      	nop
 8009008:	e000      	b.n	800900c <USBH_Process+0x3cc>
      break;
 800900a:	bf00      	nop
  }
  return USBH_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop

08009018 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b088      	sub	sp, #32
 800901c:	af04      	add	r7, sp, #16
 800901e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009020:	2301      	movs	r3, #1
 8009022:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009024:	2301      	movs	r3, #1
 8009026:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	785b      	ldrb	r3, [r3, #1]
 800902c:	2b07      	cmp	r3, #7
 800902e:	f200 81c1 	bhi.w	80093b4 <USBH_HandleEnum+0x39c>
 8009032:	a201      	add	r2, pc, #4	; (adr r2, 8009038 <USBH_HandleEnum+0x20>)
 8009034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009038:	08009059 	.word	0x08009059
 800903c:	08009117 	.word	0x08009117
 8009040:	08009181 	.word	0x08009181
 8009044:	0800920f 	.word	0x0800920f
 8009048:	08009279 	.word	0x08009279
 800904c:	080092e9 	.word	0x080092e9
 8009050:	0800932f 	.word	0x0800932f
 8009054:	08009375 	.word	0x08009375
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009058:	2108      	movs	r1, #8
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 fa50 	bl	8009500 <USBH_Get_DevDesc>
 8009060:	4603      	mov	r3, r0
 8009062:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009064:	7bbb      	ldrb	r3, [r7, #14]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d130      	bne.n	80090cc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	7919      	ldrb	r1, [r3, #4]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800908e:	b292      	uxth	r2, r2
 8009090:	9202      	str	r2, [sp, #8]
 8009092:	2200      	movs	r2, #0
 8009094:	9201      	str	r2, [sp, #4]
 8009096:	9300      	str	r3, [sp, #0]
 8009098:	4603      	mov	r3, r0
 800909a:	2280      	movs	r2, #128	; 0x80
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f001 f865 	bl	800a16c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	7959      	ldrb	r1, [r3, #5]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80090b6:	b292      	uxth	r2, r2
 80090b8:	9202      	str	r2, [sp, #8]
 80090ba:	2200      	movs	r2, #0
 80090bc:	9201      	str	r2, [sp, #4]
 80090be:	9300      	str	r3, [sp, #0]
 80090c0:	4603      	mov	r3, r0
 80090c2:	2200      	movs	r2, #0
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f001 f851 	bl	800a16c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80090ca:	e175      	b.n	80093b8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090cc:	7bbb      	ldrb	r3, [r7, #14]
 80090ce:	2b03      	cmp	r3, #3
 80090d0:	f040 8172 	bne.w	80093b8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80090da:	3301      	adds	r3, #1
 80090dc:	b2da      	uxtb	r2, r3
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80090ea:	2b03      	cmp	r3, #3
 80090ec:	d903      	bls.n	80090f6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	220d      	movs	r2, #13
 80090f2:	701a      	strb	r2, [r3, #0]
      break;
 80090f4:	e160      	b.n	80093b8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	795b      	ldrb	r3, [r3, #5]
 80090fa:	4619      	mov	r1, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f001 f885 	bl	800a20c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	791b      	ldrb	r3, [r3, #4]
 8009106:	4619      	mov	r1, r3
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f001 f87f 	bl	800a20c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	701a      	strb	r2, [r3, #0]
      break;
 8009114:	e150      	b.n	80093b8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009116:	2112      	movs	r1, #18
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 f9f1 	bl	8009500 <USBH_Get_DevDesc>
 800911e:	4603      	mov	r3, r0
 8009120:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009122:	7bbb      	ldrb	r3, [r7, #14]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d103      	bne.n	8009130 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2202      	movs	r2, #2
 800912c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800912e:	e145      	b.n	80093bc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009130:	7bbb      	ldrb	r3, [r7, #14]
 8009132:	2b03      	cmp	r3, #3
 8009134:	f040 8142 	bne.w	80093bc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800913e:	3301      	adds	r3, #1
 8009140:	b2da      	uxtb	r2, r3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800914e:	2b03      	cmp	r3, #3
 8009150:	d903      	bls.n	800915a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	220d      	movs	r2, #13
 8009156:	701a      	strb	r2, [r3, #0]
      break;
 8009158:	e130      	b.n	80093bc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	795b      	ldrb	r3, [r3, #5]
 800915e:	4619      	mov	r1, r3
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f001 f853 	bl	800a20c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	791b      	ldrb	r3, [r3, #4]
 800916a:	4619      	mov	r1, r3
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f001 f84d 	bl	800a20c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	701a      	strb	r2, [r3, #0]
      break;
 800917e:	e11d      	b.n	80093bc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009180:	2101      	movs	r1, #1
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 fa68 	bl	8009658 <USBH_SetAddress>
 8009188:	4603      	mov	r3, r0
 800918a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800918c:	7bbb      	ldrb	r3, [r7, #14]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d132      	bne.n	80091f8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009192:	2002      	movs	r0, #2
 8009194:	f001 fb30 	bl	800a7f8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2203      	movs	r2, #3
 80091a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	7919      	ldrb	r1, [r3, #4]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80091ba:	b292      	uxth	r2, r2
 80091bc:	9202      	str	r2, [sp, #8]
 80091be:	2200      	movs	r2, #0
 80091c0:	9201      	str	r2, [sp, #4]
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	4603      	mov	r3, r0
 80091c6:	2280      	movs	r2, #128	; 0x80
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 ffcf 	bl	800a16c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	7959      	ldrb	r1, [r3, #5]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80091e2:	b292      	uxth	r2, r2
 80091e4:	9202      	str	r2, [sp, #8]
 80091e6:	2200      	movs	r2, #0
 80091e8:	9201      	str	r2, [sp, #4]
 80091ea:	9300      	str	r3, [sp, #0]
 80091ec:	4603      	mov	r3, r0
 80091ee:	2200      	movs	r2, #0
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 ffbb 	bl	800a16c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80091f6:	e0e3      	b.n	80093c0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091f8:	7bbb      	ldrb	r3, [r7, #14]
 80091fa:	2b03      	cmp	r3, #3
 80091fc:	f040 80e0 	bne.w	80093c0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	220d      	movs	r2, #13
 8009204:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	705a      	strb	r2, [r3, #1]
      break;
 800920c:	e0d8      	b.n	80093c0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800920e:	2109      	movs	r1, #9
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 f99d 	bl	8009550 <USBH_Get_CfgDesc>
 8009216:	4603      	mov	r3, r0
 8009218:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800921a:	7bbb      	ldrb	r3, [r7, #14]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d103      	bne.n	8009228 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2204      	movs	r2, #4
 8009224:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009226:	e0cd      	b.n	80093c4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009228:	7bbb      	ldrb	r3, [r7, #14]
 800922a:	2b03      	cmp	r3, #3
 800922c:	f040 80ca 	bne.w	80093c4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009236:	3301      	adds	r3, #1
 8009238:	b2da      	uxtb	r2, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009246:	2b03      	cmp	r3, #3
 8009248:	d903      	bls.n	8009252 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	220d      	movs	r2, #13
 800924e:	701a      	strb	r2, [r3, #0]
      break;
 8009250:	e0b8      	b.n	80093c4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	795b      	ldrb	r3, [r3, #5]
 8009256:	4619      	mov	r1, r3
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 ffd7 	bl	800a20c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	791b      	ldrb	r3, [r3, #4]
 8009262:	4619      	mov	r1, r3
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 ffd1 	bl	800a20c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	701a      	strb	r2, [r3, #0]
      break;
 8009276:	e0a5      	b.n	80093c4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800927e:	4619      	mov	r1, r3
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 f965 	bl	8009550 <USBH_Get_CfgDesc>
 8009286:	4603      	mov	r3, r0
 8009288:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800928a:	7bbb      	ldrb	r3, [r7, #14]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d103      	bne.n	8009298 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2205      	movs	r2, #5
 8009294:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009296:	e097      	b.n	80093c8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009298:	7bbb      	ldrb	r3, [r7, #14]
 800929a:	2b03      	cmp	r3, #3
 800929c:	f040 8094 	bne.w	80093c8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80092a6:	3301      	adds	r3, #1
 80092a8:	b2da      	uxtb	r2, r3
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80092b6:	2b03      	cmp	r3, #3
 80092b8:	d903      	bls.n	80092c2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	220d      	movs	r2, #13
 80092be:	701a      	strb	r2, [r3, #0]
      break;
 80092c0:	e082      	b.n	80093c8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	795b      	ldrb	r3, [r3, #5]
 80092c6:	4619      	mov	r1, r3
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 ff9f 	bl	800a20c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	791b      	ldrb	r3, [r3, #4]
 80092d2:	4619      	mov	r1, r3
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 ff99 	bl	800a20c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	701a      	strb	r2, [r3, #0]
      break;
 80092e6:	e06f      	b.n	80093c8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d019      	beq.n	8009326 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80092fe:	23ff      	movs	r3, #255	; 0xff
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 f949 	bl	8009598 <USBH_Get_StringDesc>
 8009306:	4603      	mov	r3, r0
 8009308:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800930a:	7bbb      	ldrb	r3, [r7, #14]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d103      	bne.n	8009318 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2206      	movs	r2, #6
 8009314:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009316:	e059      	b.n	80093cc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009318:	7bbb      	ldrb	r3, [r7, #14]
 800931a:	2b03      	cmp	r3, #3
 800931c:	d156      	bne.n	80093cc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2206      	movs	r2, #6
 8009322:	705a      	strb	r2, [r3, #1]
      break;
 8009324:	e052      	b.n	80093cc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2206      	movs	r2, #6
 800932a:	705a      	strb	r2, [r3, #1]
      break;
 800932c:	e04e      	b.n	80093cc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009334:	2b00      	cmp	r3, #0
 8009336:	d019      	beq.n	800936c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009344:	23ff      	movs	r3, #255	; 0xff
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f926 	bl	8009598 <USBH_Get_StringDesc>
 800934c:	4603      	mov	r3, r0
 800934e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009350:	7bbb      	ldrb	r3, [r7, #14]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d103      	bne.n	800935e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2207      	movs	r2, #7
 800935a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800935c:	e038      	b.n	80093d0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800935e:	7bbb      	ldrb	r3, [r7, #14]
 8009360:	2b03      	cmp	r3, #3
 8009362:	d135      	bne.n	80093d0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2207      	movs	r2, #7
 8009368:	705a      	strb	r2, [r3, #1]
      break;
 800936a:	e031      	b.n	80093d0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2207      	movs	r2, #7
 8009370:	705a      	strb	r2, [r3, #1]
      break;
 8009372:	e02d      	b.n	80093d0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800937a:	2b00      	cmp	r3, #0
 800937c:	d017      	beq.n	80093ae <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800938a:	23ff      	movs	r3, #255	; 0xff
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f903 	bl	8009598 <USBH_Get_StringDesc>
 8009392:	4603      	mov	r3, r0
 8009394:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009396:	7bbb      	ldrb	r3, [r7, #14]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d102      	bne.n	80093a2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800939c:	2300      	movs	r3, #0
 800939e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80093a0:	e018      	b.n	80093d4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093a2:	7bbb      	ldrb	r3, [r7, #14]
 80093a4:	2b03      	cmp	r3, #3
 80093a6:	d115      	bne.n	80093d4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	73fb      	strb	r3, [r7, #15]
      break;
 80093ac:	e012      	b.n	80093d4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80093ae:	2300      	movs	r3, #0
 80093b0:	73fb      	strb	r3, [r7, #15]
      break;
 80093b2:	e00f      	b.n	80093d4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80093b4:	bf00      	nop
 80093b6:	e00e      	b.n	80093d6 <USBH_HandleEnum+0x3be>
      break;
 80093b8:	bf00      	nop
 80093ba:	e00c      	b.n	80093d6 <USBH_HandleEnum+0x3be>
      break;
 80093bc:	bf00      	nop
 80093be:	e00a      	b.n	80093d6 <USBH_HandleEnum+0x3be>
      break;
 80093c0:	bf00      	nop
 80093c2:	e008      	b.n	80093d6 <USBH_HandleEnum+0x3be>
      break;
 80093c4:	bf00      	nop
 80093c6:	e006      	b.n	80093d6 <USBH_HandleEnum+0x3be>
      break;
 80093c8:	bf00      	nop
 80093ca:	e004      	b.n	80093d6 <USBH_HandleEnum+0x3be>
      break;
 80093cc:	bf00      	nop
 80093ce:	e002      	b.n	80093d6 <USBH_HandleEnum+0x3be>
      break;
 80093d0:	bf00      	nop
 80093d2:	e000      	b.n	80093d6 <USBH_HandleEnum+0x3be>
      break;
 80093d4:	bf00      	nop
  }
  return Status;
 80093d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3710      	adds	r7, #16
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	683a      	ldr	r2, [r7, #0]
 80093ee:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80093f2:	bf00      	nop
 80093f4:	370c      	adds	r7, #12
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr

080093fe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b082      	sub	sp, #8
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800940c:	1c5a      	adds	r2, r3, #1
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 f804 	bl	8009422 <USBH_HandleSof>
}
 800941a:	bf00      	nop
 800941c:	3708      	adds	r7, #8
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b082      	sub	sp, #8
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	b2db      	uxtb	r3, r3
 8009430:	2b0b      	cmp	r3, #11
 8009432:	d10a      	bne.n	800944a <USBH_HandleSof+0x28>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800943a:	2b00      	cmp	r3, #0
 800943c:	d005      	beq.n	800944a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009444:	699b      	ldr	r3, [r3, #24]
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	4798      	blx	r3
  }
}
 800944a:	bf00      	nop
 800944c:	3708      	adds	r7, #8
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009452:	b480      	push	{r7}
 8009454:	b083      	sub	sp, #12
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2201      	movs	r2, #1
 800945e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009462:	bf00      	nop
}
 8009464:	370c      	adds	r7, #12
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr

0800946e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800946e:	b480      	push	{r7}
 8009470:	b083      	sub	sp, #12
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800947e:	bf00      	nop
}
 8009480:	370c      	adds	r7, #12
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr

0800948a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800948a:	b480      	push	{r7}
 800948c:	b083      	sub	sp, #12
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2201      	movs	r2, #1
 8009496:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f001 f844 	bl	800a566 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	791b      	ldrb	r3, [r3, #4]
 80094e2:	4619      	mov	r1, r3
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 fe91 	bl	800a20c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	795b      	ldrb	r3, [r3, #5]
 80094ee:	4619      	mov	r1, r3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 fe8b 	bl	800a20c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80094f6:	2300      	movs	r3, #0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b086      	sub	sp, #24
 8009504:	af02      	add	r7, sp, #8
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	460b      	mov	r3, r1
 800950a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009512:	78fb      	ldrb	r3, [r7, #3]
 8009514:	b29b      	uxth	r3, r3
 8009516:	9300      	str	r3, [sp, #0]
 8009518:	4613      	mov	r3, r2
 800951a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800951e:	2100      	movs	r1, #0
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 f864 	bl	80095ee <USBH_GetDescriptor>
 8009526:	4603      	mov	r3, r0
 8009528:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800952a:	7bfb      	ldrb	r3, [r7, #15]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d10a      	bne.n	8009546 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800953c:	78fa      	ldrb	r2, [r7, #3]
 800953e:	b292      	uxth	r2, r2
 8009540:	4619      	mov	r1, r3
 8009542:	f000 f918 	bl	8009776 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009546:	7bfb      	ldrb	r3, [r7, #15]
}
 8009548:	4618      	mov	r0, r3
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009550:	b580      	push	{r7, lr}
 8009552:	b086      	sub	sp, #24
 8009554:	af02      	add	r7, sp, #8
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	460b      	mov	r3, r1
 800955a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	331c      	adds	r3, #28
 8009560:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009562:	887b      	ldrh	r3, [r7, #2]
 8009564:	9300      	str	r3, [sp, #0]
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	f44f 7200 	mov.w	r2, #512	; 0x200
 800956c:	2100      	movs	r1, #0
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 f83d 	bl	80095ee <USBH_GetDescriptor>
 8009574:	4603      	mov	r3, r0
 8009576:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009578:	7bfb      	ldrb	r3, [r7, #15]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d107      	bne.n	800958e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800957e:	887b      	ldrh	r3, [r7, #2]
 8009580:	461a      	mov	r2, r3
 8009582:	68b9      	ldr	r1, [r7, #8]
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 f987 	bl	8009898 <USBH_ParseCfgDesc>
 800958a:	4603      	mov	r3, r0
 800958c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800958e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009590:	4618      	mov	r0, r3
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b088      	sub	sp, #32
 800959c:	af02      	add	r7, sp, #8
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	607a      	str	r2, [r7, #4]
 80095a2:	461a      	mov	r2, r3
 80095a4:	460b      	mov	r3, r1
 80095a6:	72fb      	strb	r3, [r7, #11]
 80095a8:	4613      	mov	r3, r2
 80095aa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80095ac:	7afb      	ldrb	r3, [r7, #11]
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80095b4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80095bc:	893b      	ldrh	r3, [r7, #8]
 80095be:	9300      	str	r3, [sp, #0]
 80095c0:	460b      	mov	r3, r1
 80095c2:	2100      	movs	r1, #0
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	f000 f812 	bl	80095ee <USBH_GetDescriptor>
 80095ca:	4603      	mov	r3, r0
 80095cc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80095ce:	7dfb      	ldrb	r3, [r7, #23]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d107      	bne.n	80095e4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80095da:	893a      	ldrh	r2, [r7, #8]
 80095dc:	6879      	ldr	r1, [r7, #4]
 80095de:	4618      	mov	r0, r3
 80095e0:	f000 fb24 	bl	8009c2c <USBH_ParseStringDesc>
  }

  return status;
 80095e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3718      	adds	r7, #24
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b084      	sub	sp, #16
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	60f8      	str	r0, [r7, #12]
 80095f6:	607b      	str	r3, [r7, #4]
 80095f8:	460b      	mov	r3, r1
 80095fa:	72fb      	strb	r3, [r7, #11]
 80095fc:	4613      	mov	r3, r2
 80095fe:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	789b      	ldrb	r3, [r3, #2]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d11c      	bne.n	8009642 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009608:	7afb      	ldrb	r3, [r7, #11]
 800960a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800960e:	b2da      	uxtb	r2, r3
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2206      	movs	r2, #6
 8009618:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	893a      	ldrh	r2, [r7, #8]
 800961e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009620:	893b      	ldrh	r3, [r7, #8]
 8009622:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009626:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800962a:	d104      	bne.n	8009636 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f240 4209 	movw	r2, #1033	; 0x409
 8009632:	829a      	strh	r2, [r3, #20]
 8009634:	e002      	b.n	800963c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2200      	movs	r2, #0
 800963a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	8b3a      	ldrh	r2, [r7, #24]
 8009640:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009642:	8b3b      	ldrh	r3, [r7, #24]
 8009644:	461a      	mov	r2, r3
 8009646:	6879      	ldr	r1, [r7, #4]
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f000 fb3d 	bl	8009cc8 <USBH_CtlReq>
 800964e:	4603      	mov	r3, r0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	460b      	mov	r3, r1
 8009662:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	789b      	ldrb	r3, [r3, #2]
 8009668:	2b01      	cmp	r3, #1
 800966a:	d10f      	bne.n	800968c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2205      	movs	r2, #5
 8009676:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009678:	78fb      	ldrb	r3, [r7, #3]
 800967a:	b29a      	uxth	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800968c:	2200      	movs	r2, #0
 800968e:	2100      	movs	r1, #0
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 fb19 	bl	8009cc8 <USBH_CtlReq>
 8009696:	4603      	mov	r3, r0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	460b      	mov	r3, r1
 80096aa:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	789b      	ldrb	r3, [r3, #2]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d10e      	bne.n	80096d2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2209      	movs	r2, #9
 80096be:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	887a      	ldrh	r2, [r7, #2]
 80096c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80096d2:	2200      	movs	r2, #0
 80096d4:	2100      	movs	r1, #0
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 faf6 	bl	8009cc8 <USBH_CtlReq>
 80096dc:	4603      	mov	r3, r0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b082      	sub	sp, #8
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
 80096ee:	460b      	mov	r3, r1
 80096f0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	789b      	ldrb	r3, [r3, #2]
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d10f      	bne.n	800971a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2203      	movs	r2, #3
 8009704:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009706:	78fb      	ldrb	r3, [r7, #3]
 8009708:	b29a      	uxth	r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800971a:	2200      	movs	r2, #0
 800971c:	2100      	movs	r1, #0
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 fad2 	bl	8009cc8 <USBH_CtlReq>
 8009724:	4603      	mov	r3, r0
}
 8009726:	4618      	mov	r0, r3
 8009728:	3708      	adds	r7, #8
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b082      	sub	sp, #8
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
 8009736:	460b      	mov	r3, r1
 8009738:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	789b      	ldrb	r3, [r3, #2]
 800973e:	2b01      	cmp	r3, #1
 8009740:	d10f      	bne.n	8009762 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2202      	movs	r2, #2
 8009746:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009754:	78fb      	ldrb	r3, [r7, #3]
 8009756:	b29a      	uxth	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8009762:	2200      	movs	r2, #0
 8009764:	2100      	movs	r1, #0
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 faae 	bl	8009cc8 <USBH_CtlReq>
 800976c:	4603      	mov	r3, r0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3708      	adds	r7, #8
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009776:	b480      	push	{r7}
 8009778:	b085      	sub	sp, #20
 800977a:	af00      	add	r7, sp, #0
 800977c:	60f8      	str	r0, [r7, #12]
 800977e:	60b9      	str	r1, [r7, #8]
 8009780:	4613      	mov	r3, r2
 8009782:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	781a      	ldrb	r2, [r3, #0]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	785a      	ldrb	r2, [r3, #1]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	3302      	adds	r3, #2
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	b29a      	uxth	r2, r3
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	3303      	adds	r3, #3
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	021b      	lsls	r3, r3, #8
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	4313      	orrs	r3, r2
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	791a      	ldrb	r2, [r3, #4]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	795a      	ldrb	r2, [r3, #5]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	799a      	ldrb	r2, [r3, #6]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	79da      	ldrb	r2, [r3, #7]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	79db      	ldrb	r3, [r3, #7]
 80097d4:	2b20      	cmp	r3, #32
 80097d6:	dc11      	bgt.n	80097fc <USBH_ParseDevDesc+0x86>
 80097d8:	2b08      	cmp	r3, #8
 80097da:	db16      	blt.n	800980a <USBH_ParseDevDesc+0x94>
 80097dc:	3b08      	subs	r3, #8
 80097de:	2201      	movs	r2, #1
 80097e0:	fa02 f303 	lsl.w	r3, r2, r3
 80097e4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80097e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	bf14      	ite	ne
 80097f0:	2301      	movne	r3, #1
 80097f2:	2300      	moveq	r3, #0
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d102      	bne.n	8009800 <USBH_ParseDevDesc+0x8a>
 80097fa:	e006      	b.n	800980a <USBH_ParseDevDesc+0x94>
 80097fc:	2b40      	cmp	r3, #64	; 0x40
 80097fe:	d104      	bne.n	800980a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	79da      	ldrb	r2, [r3, #7]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	71da      	strb	r2, [r3, #7]
      break;
 8009808:	e003      	b.n	8009812 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2240      	movs	r2, #64	; 0x40
 800980e:	71da      	strb	r2, [r3, #7]
      break;
 8009810:	bf00      	nop
  }

  if (length > 8U)
 8009812:	88fb      	ldrh	r3, [r7, #6]
 8009814:	2b08      	cmp	r3, #8
 8009816:	d939      	bls.n	800988c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	3308      	adds	r3, #8
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	b29a      	uxth	r2, r3
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	3309      	adds	r3, #9
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	b29b      	uxth	r3, r3
 8009828:	021b      	lsls	r3, r3, #8
 800982a:	b29b      	uxth	r3, r3
 800982c:	4313      	orrs	r3, r2
 800982e:	b29a      	uxth	r2, r3
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	330a      	adds	r3, #10
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	b29a      	uxth	r2, r3
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	330b      	adds	r3, #11
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	b29b      	uxth	r3, r3
 8009844:	021b      	lsls	r3, r3, #8
 8009846:	b29b      	uxth	r3, r3
 8009848:	4313      	orrs	r3, r2
 800984a:	b29a      	uxth	r2, r3
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	330c      	adds	r3, #12
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	b29a      	uxth	r2, r3
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	330d      	adds	r3, #13
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	b29b      	uxth	r3, r3
 8009860:	021b      	lsls	r3, r3, #8
 8009862:	b29b      	uxth	r3, r3
 8009864:	4313      	orrs	r3, r2
 8009866:	b29a      	uxth	r2, r3
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	7b9a      	ldrb	r2, [r3, #14]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	7bda      	ldrb	r2, [r3, #15]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	7c1a      	ldrb	r2, [r3, #16]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	7c5a      	ldrb	r2, [r3, #17]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	745a      	strb	r2, [r3, #17]
  }
}
 800988c:	bf00      	nop
 800988e:	3714      	adds	r7, #20
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b08c      	sub	sp, #48	; 0x30
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	4613      	mov	r3, r2
 80098a4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80098ac:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80098ae:	2300      	movs	r3, #0
 80098b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80098b8:	2300      	movs	r3, #0
 80098ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80098be:	2300      	movs	r3, #0
 80098c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	781a      	ldrb	r2, [r3, #0]
 80098cc:	6a3b      	ldr	r3, [r7, #32]
 80098ce:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	785a      	ldrb	r2, [r3, #1]
 80098d4:	6a3b      	ldr	r3, [r7, #32]
 80098d6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	3302      	adds	r3, #2
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	b29a      	uxth	r2, r3
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	3303      	adds	r3, #3
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	021b      	lsls	r3, r3, #8
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	4313      	orrs	r3, r2
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098f4:	bf28      	it	cs
 80098f6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80098fa:	b29a      	uxth	r2, r3
 80098fc:	6a3b      	ldr	r3, [r7, #32]
 80098fe:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	791a      	ldrb	r2, [r3, #4]
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	795a      	ldrb	r2, [r3, #5]
 800990c:	6a3b      	ldr	r3, [r7, #32]
 800990e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	799a      	ldrb	r2, [r3, #6]
 8009914:	6a3b      	ldr	r3, [r7, #32]
 8009916:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	79da      	ldrb	r2, [r3, #7]
 800991c:	6a3b      	ldr	r3, [r7, #32]
 800991e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	7a1a      	ldrb	r2, [r3, #8]
 8009924:	6a3b      	ldr	r3, [r7, #32]
 8009926:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8009928:	6a3b      	ldr	r3, [r7, #32]
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	2b09      	cmp	r3, #9
 800992e:	d002      	beq.n	8009936 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009930:	6a3b      	ldr	r3, [r7, #32]
 8009932:	2209      	movs	r2, #9
 8009934:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009936:	88fb      	ldrh	r3, [r7, #6]
 8009938:	2b09      	cmp	r3, #9
 800993a:	f240 809d 	bls.w	8009a78 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800993e:	2309      	movs	r3, #9
 8009940:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009942:	2300      	movs	r3, #0
 8009944:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009946:	e081      	b.n	8009a4c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009948:	f107 0316 	add.w	r3, r7, #22
 800994c:	4619      	mov	r1, r3
 800994e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009950:	f000 f99f 	bl	8009c92 <USBH_GetNextDesc>
 8009954:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009958:	785b      	ldrb	r3, [r3, #1]
 800995a:	2b04      	cmp	r3, #4
 800995c:	d176      	bne.n	8009a4c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800995e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	2b09      	cmp	r3, #9
 8009964:	d002      	beq.n	800996c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009968:	2209      	movs	r2, #9
 800996a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800996c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009970:	221a      	movs	r2, #26
 8009972:	fb02 f303 	mul.w	r3, r2, r3
 8009976:	3308      	adds	r3, #8
 8009978:	6a3a      	ldr	r2, [r7, #32]
 800997a:	4413      	add	r3, r2
 800997c:	3302      	adds	r3, #2
 800997e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009980:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009982:	69f8      	ldr	r0, [r7, #28]
 8009984:	f000 f87e 	bl	8009a84 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009988:	2300      	movs	r3, #0
 800998a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800998e:	2300      	movs	r3, #0
 8009990:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009992:	e043      	b.n	8009a1c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009994:	f107 0316 	add.w	r3, r7, #22
 8009998:	4619      	mov	r1, r3
 800999a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800999c:	f000 f979 	bl	8009c92 <USBH_GetNextDesc>
 80099a0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80099a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a4:	785b      	ldrb	r3, [r3, #1]
 80099a6:	2b05      	cmp	r3, #5
 80099a8:	d138      	bne.n	8009a1c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	795b      	ldrb	r3, [r3, #5]
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d10f      	bne.n	80099d2 <USBH_ParseCfgDesc+0x13a>
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	799b      	ldrb	r3, [r3, #6]
 80099b6:	2b02      	cmp	r3, #2
 80099b8:	d10b      	bne.n	80099d2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	79db      	ldrb	r3, [r3, #7]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d10f      	bne.n	80099e2 <USBH_ParseCfgDesc+0x14a>
 80099c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	2b09      	cmp	r3, #9
 80099c8:	d00b      	beq.n	80099e2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80099ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099cc:	2209      	movs	r2, #9
 80099ce:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80099d0:	e007      	b.n	80099e2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80099d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	2b07      	cmp	r3, #7
 80099d8:	d004      	beq.n	80099e4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80099da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099dc:	2207      	movs	r2, #7
 80099de:	701a      	strb	r2, [r3, #0]
 80099e0:	e000      	b.n	80099e4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80099e2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80099e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099e8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80099ec:	3201      	adds	r2, #1
 80099ee:	00d2      	lsls	r2, r2, #3
 80099f0:	211a      	movs	r1, #26
 80099f2:	fb01 f303 	mul.w	r3, r1, r3
 80099f6:	4413      	add	r3, r2
 80099f8:	3308      	adds	r3, #8
 80099fa:	6a3a      	ldr	r2, [r7, #32]
 80099fc:	4413      	add	r3, r2
 80099fe:	3304      	adds	r3, #4
 8009a00:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009a02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a04:	69b9      	ldr	r1, [r7, #24]
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	f000 f86b 	bl	8009ae2 <USBH_ParseEPDesc>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8009a12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009a16:	3301      	adds	r3, #1
 8009a18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	791b      	ldrb	r3, [r3, #4]
 8009a20:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d204      	bcs.n	8009a32 <USBH_ParseCfgDesc+0x19a>
 8009a28:	6a3b      	ldr	r3, [r7, #32]
 8009a2a:	885a      	ldrh	r2, [r3, #2]
 8009a2c:	8afb      	ldrh	r3, [r7, #22]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d8b0      	bhi.n	8009994 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	791b      	ldrb	r3, [r3, #4]
 8009a36:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d201      	bcs.n	8009a42 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	e01c      	b.n	8009a7c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8009a42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a46:	3301      	adds	r3, #1
 8009a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d805      	bhi.n	8009a60 <USBH_ParseCfgDesc+0x1c8>
 8009a54:	6a3b      	ldr	r3, [r7, #32]
 8009a56:	885a      	ldrh	r2, [r3, #2]
 8009a58:	8afb      	ldrh	r3, [r7, #22]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	f63f af74 	bhi.w	8009948 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009a60:	6a3b      	ldr	r3, [r7, #32]
 8009a62:	791b      	ldrb	r3, [r3, #4]
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	bf28      	it	cs
 8009a68:	2302      	movcs	r3, #2
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d201      	bcs.n	8009a78 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8009a74:	2303      	movs	r3, #3
 8009a76:	e001      	b.n	8009a7c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8009a78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3730      	adds	r7, #48	; 0x30
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	781a      	ldrb	r2, [r3, #0]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	785a      	ldrb	r2, [r3, #1]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	789a      	ldrb	r2, [r3, #2]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	78da      	ldrb	r2, [r3, #3]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	791a      	ldrb	r2, [r3, #4]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	795a      	ldrb	r2, [r3, #5]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	799a      	ldrb	r2, [r3, #6]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	79da      	ldrb	r2, [r3, #7]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	7a1a      	ldrb	r2, [r3, #8]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	721a      	strb	r2, [r3, #8]
}
 8009ad6:	bf00      	nop
 8009ad8:	370c      	adds	r7, #12
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr

08009ae2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8009ae2:	b480      	push	{r7}
 8009ae4:	b087      	sub	sp, #28
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	60f8      	str	r0, [r7, #12]
 8009aea:	60b9      	str	r1, [r7, #8]
 8009aec:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009aee:	2300      	movs	r3, #0
 8009af0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	781a      	ldrb	r2, [r3, #0]
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	785a      	ldrb	r2, [r3, #1]
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	789a      	ldrb	r2, [r3, #2]
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	78da      	ldrb	r2, [r3, #3]
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	3304      	adds	r3, #4
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	b29a      	uxth	r2, r3
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	3305      	adds	r3, #5
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	021b      	lsls	r3, r3, #8
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	4313      	orrs	r3, r2
 8009b28:	b29a      	uxth	r2, r3
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	799a      	ldrb	r2, [r3, #6]
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	889b      	ldrh	r3, [r3, #4]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d102      	bne.n	8009b44 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8009b3e:	2303      	movs	r3, #3
 8009b40:	75fb      	strb	r3, [r7, #23]
 8009b42:	e033      	b.n	8009bac <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	889b      	ldrh	r3, [r3, #4]
 8009b48:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009b4c:	f023 0307 	bic.w	r3, r3, #7
 8009b50:	b29a      	uxth	r2, r3
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	889b      	ldrh	r3, [r3, #4]
 8009b5a:	b21a      	sxth	r2, r3
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	3304      	adds	r3, #4
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	b299      	uxth	r1, r3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	3305      	adds	r3, #5
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	021b      	lsls	r3, r3, #8
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	430b      	orrs	r3, r1
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d110      	bne.n	8009b9e <USBH_ParseEPDesc+0xbc>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	3304      	adds	r3, #4
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	b299      	uxth	r1, r3
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	3305      	adds	r3, #5
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	021b      	lsls	r3, r3, #8
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	430b      	orrs	r3, r1
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	b21b      	sxth	r3, r3
 8009b96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b9a:	b21b      	sxth	r3, r3
 8009b9c:	e001      	b.n	8009ba2 <USBH_ParseEPDesc+0xc0>
 8009b9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	b21b      	sxth	r3, r3
 8009ba6:	b29a      	uxth	r2, r3
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d116      	bne.n	8009be4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	78db      	ldrb	r3, [r3, #3]
 8009bba:	f003 0303 	and.w	r3, r3, #3
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d005      	beq.n	8009bce <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	78db      	ldrb	r3, [r3, #3]
 8009bc6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009bca:	2b03      	cmp	r3, #3
 8009bcc:	d127      	bne.n	8009c1e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	799b      	ldrb	r3, [r3, #6]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d003      	beq.n	8009bde <USBH_ParseEPDesc+0xfc>
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	799b      	ldrb	r3, [r3, #6]
 8009bda:	2b10      	cmp	r3, #16
 8009bdc:	d91f      	bls.n	8009c1e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009bde:	2303      	movs	r3, #3
 8009be0:	75fb      	strb	r3, [r7, #23]
 8009be2:	e01c      	b.n	8009c1e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	78db      	ldrb	r3, [r3, #3]
 8009be8:	f003 0303 	and.w	r3, r3, #3
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d10a      	bne.n	8009c06 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	799b      	ldrb	r3, [r3, #6]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d003      	beq.n	8009c00 <USBH_ParseEPDesc+0x11e>
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	799b      	ldrb	r3, [r3, #6]
 8009bfc:	2b10      	cmp	r3, #16
 8009bfe:	d90e      	bls.n	8009c1e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009c00:	2303      	movs	r3, #3
 8009c02:	75fb      	strb	r3, [r7, #23]
 8009c04:	e00b      	b.n	8009c1e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	78db      	ldrb	r3, [r3, #3]
 8009c0a:	f003 0303 	and.w	r3, r3, #3
 8009c0e:	2b03      	cmp	r3, #3
 8009c10:	d105      	bne.n	8009c1e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	799b      	ldrb	r3, [r3, #6]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d101      	bne.n	8009c1e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009c1a:	2303      	movs	r3, #3
 8009c1c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8009c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	371c      	adds	r7, #28
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b087      	sub	sp, #28
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	60b9      	str	r1, [r7, #8]
 8009c36:	4613      	mov	r3, r2
 8009c38:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	2b03      	cmp	r3, #3
 8009c42:	d120      	bne.n	8009c86 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	1e9a      	subs	r2, r3, #2
 8009c4a:	88fb      	ldrh	r3, [r7, #6]
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	bf28      	it	cs
 8009c50:	4613      	movcs	r3, r2
 8009c52:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	3302      	adds	r3, #2
 8009c58:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	82fb      	strh	r3, [r7, #22]
 8009c5e:	e00b      	b.n	8009c78 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009c60:	8afb      	ldrh	r3, [r7, #22]
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	4413      	add	r3, r2
 8009c66:	781a      	ldrb	r2, [r3, #0]
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009c72:	8afb      	ldrh	r3, [r7, #22]
 8009c74:	3302      	adds	r3, #2
 8009c76:	82fb      	strh	r3, [r7, #22]
 8009c78:	8afa      	ldrh	r2, [r7, #22]
 8009c7a:	8abb      	ldrh	r3, [r7, #20]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d3ef      	bcc.n	8009c60 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	2200      	movs	r2, #0
 8009c84:	701a      	strb	r2, [r3, #0]
  }
}
 8009c86:	bf00      	nop
 8009c88:	371c      	adds	r7, #28
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr

08009c92 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8009c92:	b480      	push	{r7}
 8009c94:	b085      	sub	sp, #20
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
 8009c9a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	881a      	ldrh	r2, [r3, #0]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	4413      	add	r3, r2
 8009ca8:	b29a      	uxth	r2, r3
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009cba:	68fb      	ldr	r3, [r7, #12]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3714      	adds	r7, #20
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b086      	sub	sp, #24
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	789b      	ldrb	r3, [r3, #2]
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d002      	beq.n	8009ce8 <USBH_CtlReq+0x20>
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d00f      	beq.n	8009d06 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009ce6:	e027      	b.n	8009d38 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	68ba      	ldr	r2, [r7, #8]
 8009cec:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	88fa      	ldrh	r2, [r7, #6]
 8009cf2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2202      	movs	r2, #2
 8009cfe:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009d00:	2301      	movs	r3, #1
 8009d02:	75fb      	strb	r3, [r7, #23]
      break;
 8009d04:	e018      	b.n	8009d38 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009d06:	68f8      	ldr	r0, [r7, #12]
 8009d08:	f000 f81c 	bl	8009d44 <USBH_HandleControl>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009d10:	7dfb      	ldrb	r3, [r7, #23]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d002      	beq.n	8009d1c <USBH_CtlReq+0x54>
 8009d16:	7dfb      	ldrb	r3, [r7, #23]
 8009d18:	2b03      	cmp	r3, #3
 8009d1a:	d106      	bne.n	8009d2a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2200      	movs	r2, #0
 8009d26:	761a      	strb	r2, [r3, #24]
      break;
 8009d28:	e005      	b.n	8009d36 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009d2a:	7dfb      	ldrb	r3, [r7, #23]
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	d102      	bne.n	8009d36 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2201      	movs	r2, #1
 8009d34:	709a      	strb	r2, [r3, #2]
      break;
 8009d36:	bf00      	nop
  }
  return status;
 8009d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3718      	adds	r7, #24
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
	...

08009d44 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b086      	sub	sp, #24
 8009d48:	af02      	add	r7, sp, #8
 8009d4a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009d50:	2300      	movs	r3, #0
 8009d52:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	7e1b      	ldrb	r3, [r3, #24]
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	2b0a      	cmp	r3, #10
 8009d5c:	f200 8156 	bhi.w	800a00c <USBH_HandleControl+0x2c8>
 8009d60:	a201      	add	r2, pc, #4	; (adr r2, 8009d68 <USBH_HandleControl+0x24>)
 8009d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d66:	bf00      	nop
 8009d68:	08009d95 	.word	0x08009d95
 8009d6c:	08009daf 	.word	0x08009daf
 8009d70:	08009e19 	.word	0x08009e19
 8009d74:	08009e3f 	.word	0x08009e3f
 8009d78:	08009e77 	.word	0x08009e77
 8009d7c:	08009ea1 	.word	0x08009ea1
 8009d80:	08009ef3 	.word	0x08009ef3
 8009d84:	08009f15 	.word	0x08009f15
 8009d88:	08009f51 	.word	0x08009f51
 8009d8c:	08009f77 	.word	0x08009f77
 8009d90:	08009fb5 	.word	0x08009fb5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f103 0110 	add.w	r1, r3, #16
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	795b      	ldrb	r3, [r3, #5]
 8009d9e:	461a      	mov	r2, r3
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 f943 	bl	800a02c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2202      	movs	r2, #2
 8009daa:	761a      	strb	r2, [r3, #24]
      break;
 8009dac:	e139      	b.n	800a022 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	795b      	ldrb	r3, [r3, #5]
 8009db2:	4619      	mov	r1, r3
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 fcc5 	bl	800a744 <USBH_LL_GetURBState>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009dbe:	7bbb      	ldrb	r3, [r7, #14]
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d11e      	bne.n	8009e02 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	7c1b      	ldrb	r3, [r3, #16]
 8009dc8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009dcc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	8adb      	ldrh	r3, [r3, #22]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d00a      	beq.n	8009dec <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009dd6:	7b7b      	ldrb	r3, [r7, #13]
 8009dd8:	2b80      	cmp	r3, #128	; 0x80
 8009dda:	d103      	bne.n	8009de4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2203      	movs	r2, #3
 8009de0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009de2:	e115      	b.n	800a010 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2205      	movs	r2, #5
 8009de8:	761a      	strb	r2, [r3, #24]
      break;
 8009dea:	e111      	b.n	800a010 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009dec:	7b7b      	ldrb	r3, [r7, #13]
 8009dee:	2b80      	cmp	r3, #128	; 0x80
 8009df0:	d103      	bne.n	8009dfa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2209      	movs	r2, #9
 8009df6:	761a      	strb	r2, [r3, #24]
      break;
 8009df8:	e10a      	b.n	800a010 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2207      	movs	r2, #7
 8009dfe:	761a      	strb	r2, [r3, #24]
      break;
 8009e00:	e106      	b.n	800a010 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009e02:	7bbb      	ldrb	r3, [r7, #14]
 8009e04:	2b04      	cmp	r3, #4
 8009e06:	d003      	beq.n	8009e10 <USBH_HandleControl+0xcc>
 8009e08:	7bbb      	ldrb	r3, [r7, #14]
 8009e0a:	2b02      	cmp	r3, #2
 8009e0c:	f040 8100 	bne.w	800a010 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	220b      	movs	r2, #11
 8009e14:	761a      	strb	r2, [r3, #24]
      break;
 8009e16:	e0fb      	b.n	800a010 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009e1e:	b29a      	uxth	r2, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6899      	ldr	r1, [r3, #8]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	899a      	ldrh	r2, [r3, #12]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	791b      	ldrb	r3, [r3, #4]
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 f93a 	bl	800a0aa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2204      	movs	r2, #4
 8009e3a:	761a      	strb	r2, [r3, #24]
      break;
 8009e3c:	e0f1      	b.n	800a022 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	791b      	ldrb	r3, [r3, #4]
 8009e42:	4619      	mov	r1, r3
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 fc7d 	bl	800a744 <USBH_LL_GetURBState>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009e4e:	7bbb      	ldrb	r3, [r7, #14]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d102      	bne.n	8009e5a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2209      	movs	r2, #9
 8009e58:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009e5a:	7bbb      	ldrb	r3, [r7, #14]
 8009e5c:	2b05      	cmp	r3, #5
 8009e5e:	d102      	bne.n	8009e66 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009e60:	2303      	movs	r3, #3
 8009e62:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009e64:	e0d6      	b.n	800a014 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009e66:	7bbb      	ldrb	r3, [r7, #14]
 8009e68:	2b04      	cmp	r3, #4
 8009e6a:	f040 80d3 	bne.w	800a014 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	220b      	movs	r2, #11
 8009e72:	761a      	strb	r2, [r3, #24]
      break;
 8009e74:	e0ce      	b.n	800a014 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6899      	ldr	r1, [r3, #8]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	899a      	ldrh	r2, [r3, #12]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	795b      	ldrb	r3, [r3, #5]
 8009e82:	2001      	movs	r0, #1
 8009e84:	9000      	str	r0, [sp, #0]
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 f8ea 	bl	800a060 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009e92:	b29a      	uxth	r2, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2206      	movs	r2, #6
 8009e9c:	761a      	strb	r2, [r3, #24]
      break;
 8009e9e:	e0c0      	b.n	800a022 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	795b      	ldrb	r3, [r3, #5]
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 fc4c 	bl	800a744 <USBH_LL_GetURBState>
 8009eac:	4603      	mov	r3, r0
 8009eae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009eb0:	7bbb      	ldrb	r3, [r7, #14]
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d103      	bne.n	8009ebe <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2207      	movs	r2, #7
 8009eba:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009ebc:	e0ac      	b.n	800a018 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009ebe:	7bbb      	ldrb	r3, [r7, #14]
 8009ec0:	2b05      	cmp	r3, #5
 8009ec2:	d105      	bne.n	8009ed0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	220c      	movs	r2, #12
 8009ec8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009eca:	2303      	movs	r3, #3
 8009ecc:	73fb      	strb	r3, [r7, #15]
      break;
 8009ece:	e0a3      	b.n	800a018 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009ed0:	7bbb      	ldrb	r3, [r7, #14]
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	d103      	bne.n	8009ede <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2205      	movs	r2, #5
 8009eda:	761a      	strb	r2, [r3, #24]
      break;
 8009edc:	e09c      	b.n	800a018 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009ede:	7bbb      	ldrb	r3, [r7, #14]
 8009ee0:	2b04      	cmp	r3, #4
 8009ee2:	f040 8099 	bne.w	800a018 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	220b      	movs	r2, #11
 8009eea:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009eec:	2302      	movs	r3, #2
 8009eee:	73fb      	strb	r3, [r7, #15]
      break;
 8009ef0:	e092      	b.n	800a018 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	791b      	ldrb	r3, [r3, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	2100      	movs	r1, #0
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 f8d5 	bl	800a0aa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2208      	movs	r2, #8
 8009f10:	761a      	strb	r2, [r3, #24]

      break;
 8009f12:	e086      	b.n	800a022 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	791b      	ldrb	r3, [r3, #4]
 8009f18:	4619      	mov	r1, r3
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 fc12 	bl	800a744 <USBH_LL_GetURBState>
 8009f20:	4603      	mov	r3, r0
 8009f22:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009f24:	7bbb      	ldrb	r3, [r7, #14]
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d105      	bne.n	8009f36 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	220d      	movs	r2, #13
 8009f2e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009f30:	2300      	movs	r3, #0
 8009f32:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009f34:	e072      	b.n	800a01c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009f36:	7bbb      	ldrb	r3, [r7, #14]
 8009f38:	2b04      	cmp	r3, #4
 8009f3a:	d103      	bne.n	8009f44 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	220b      	movs	r2, #11
 8009f40:	761a      	strb	r2, [r3, #24]
      break;
 8009f42:	e06b      	b.n	800a01c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009f44:	7bbb      	ldrb	r3, [r7, #14]
 8009f46:	2b05      	cmp	r3, #5
 8009f48:	d168      	bne.n	800a01c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009f4a:	2303      	movs	r3, #3
 8009f4c:	73fb      	strb	r3, [r7, #15]
      break;
 8009f4e:	e065      	b.n	800a01c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	795b      	ldrb	r3, [r3, #5]
 8009f54:	2201      	movs	r2, #1
 8009f56:	9200      	str	r2, [sp, #0]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 f87f 	bl	800a060 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009f68:	b29a      	uxth	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	220a      	movs	r2, #10
 8009f72:	761a      	strb	r2, [r3, #24]
      break;
 8009f74:	e055      	b.n	800a022 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	795b      	ldrb	r3, [r3, #5]
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 fbe1 	bl	800a744 <USBH_LL_GetURBState>
 8009f82:	4603      	mov	r3, r0
 8009f84:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009f86:	7bbb      	ldrb	r3, [r7, #14]
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d105      	bne.n	8009f98 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	220d      	movs	r2, #13
 8009f94:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009f96:	e043      	b.n	800a020 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009f98:	7bbb      	ldrb	r3, [r7, #14]
 8009f9a:	2b02      	cmp	r3, #2
 8009f9c:	d103      	bne.n	8009fa6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2209      	movs	r2, #9
 8009fa2:	761a      	strb	r2, [r3, #24]
      break;
 8009fa4:	e03c      	b.n	800a020 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009fa6:	7bbb      	ldrb	r3, [r7, #14]
 8009fa8:	2b04      	cmp	r3, #4
 8009faa:	d139      	bne.n	800a020 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	220b      	movs	r2, #11
 8009fb0:	761a      	strb	r2, [r3, #24]
      break;
 8009fb2:	e035      	b.n	800a020 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	7e5b      	ldrb	r3, [r3, #25]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	b2da      	uxtb	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	765a      	strb	r2, [r3, #25]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	7e5b      	ldrb	r3, [r3, #25]
 8009fc4:	2b02      	cmp	r3, #2
 8009fc6:	d806      	bhi.n	8009fd6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2201      	movs	r2, #1
 8009fcc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009fd4:	e025      	b.n	800a022 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009fdc:	2106      	movs	r1, #6
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	795b      	ldrb	r3, [r3, #5]
 8009fec:	4619      	mov	r1, r3
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 f90c 	bl	800a20c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	791b      	ldrb	r3, [r3, #4]
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 f906 	bl	800a20c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a006:	2302      	movs	r3, #2
 800a008:	73fb      	strb	r3, [r7, #15]
      break;
 800a00a:	e00a      	b.n	800a022 <USBH_HandleControl+0x2de>

    default:
      break;
 800a00c:	bf00      	nop
 800a00e:	e008      	b.n	800a022 <USBH_HandleControl+0x2de>
      break;
 800a010:	bf00      	nop
 800a012:	e006      	b.n	800a022 <USBH_HandleControl+0x2de>
      break;
 800a014:	bf00      	nop
 800a016:	e004      	b.n	800a022 <USBH_HandleControl+0x2de>
      break;
 800a018:	bf00      	nop
 800a01a:	e002      	b.n	800a022 <USBH_HandleControl+0x2de>
      break;
 800a01c:	bf00      	nop
 800a01e:	e000      	b.n	800a022 <USBH_HandleControl+0x2de>
      break;
 800a020:	bf00      	nop
  }

  return status;
 800a022:	7bfb      	ldrb	r3, [r7, #15]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b088      	sub	sp, #32
 800a030:	af04      	add	r7, sp, #16
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	4613      	mov	r3, r2
 800a038:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a03a:	79f9      	ldrb	r1, [r7, #7]
 800a03c:	2300      	movs	r3, #0
 800a03e:	9303      	str	r3, [sp, #12]
 800a040:	2308      	movs	r3, #8
 800a042:	9302      	str	r3, [sp, #8]
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	9301      	str	r3, [sp, #4]
 800a048:	2300      	movs	r3, #0
 800a04a:	9300      	str	r3, [sp, #0]
 800a04c:	2300      	movs	r3, #0
 800a04e:	2200      	movs	r2, #0
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f000 fb46 	bl	800a6e2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a056:	2300      	movs	r3, #0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3710      	adds	r7, #16
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b088      	sub	sp, #32
 800a064:	af04      	add	r7, sp, #16
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	60b9      	str	r1, [r7, #8]
 800a06a:	4611      	mov	r1, r2
 800a06c:	461a      	mov	r2, r3
 800a06e:	460b      	mov	r3, r1
 800a070:	80fb      	strh	r3, [r7, #6]
 800a072:	4613      	mov	r3, r2
 800a074:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d001      	beq.n	800a084 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a080:	2300      	movs	r3, #0
 800a082:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a084:	7979      	ldrb	r1, [r7, #5]
 800a086:	7e3b      	ldrb	r3, [r7, #24]
 800a088:	9303      	str	r3, [sp, #12]
 800a08a:	88fb      	ldrh	r3, [r7, #6]
 800a08c:	9302      	str	r3, [sp, #8]
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	9301      	str	r3, [sp, #4]
 800a092:	2301      	movs	r3, #1
 800a094:	9300      	str	r3, [sp, #0]
 800a096:	2300      	movs	r3, #0
 800a098:	2200      	movs	r2, #0
 800a09a:	68f8      	ldr	r0, [r7, #12]
 800a09c:	f000 fb21 	bl	800a6e2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a0a0:	2300      	movs	r3, #0
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b088      	sub	sp, #32
 800a0ae:	af04      	add	r7, sp, #16
 800a0b0:	60f8      	str	r0, [r7, #12]
 800a0b2:	60b9      	str	r1, [r7, #8]
 800a0b4:	4611      	mov	r1, r2
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	80fb      	strh	r3, [r7, #6]
 800a0bc:	4613      	mov	r3, r2
 800a0be:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a0c0:	7979      	ldrb	r1, [r7, #5]
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	9303      	str	r3, [sp, #12]
 800a0c6:	88fb      	ldrh	r3, [r7, #6]
 800a0c8:	9302      	str	r3, [sp, #8]
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	9301      	str	r3, [sp, #4]
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	f000 fb03 	bl	800a6e2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a0dc:	2300      	movs	r3, #0

}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b088      	sub	sp, #32
 800a0ea:	af04      	add	r7, sp, #16
 800a0ec:	60f8      	str	r0, [r7, #12]
 800a0ee:	60b9      	str	r1, [r7, #8]
 800a0f0:	4611      	mov	r1, r2
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	80fb      	strh	r3, [r7, #6]
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a102:	2b00      	cmp	r3, #0
 800a104:	d001      	beq.n	800a10a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a106:	2300      	movs	r3, #0
 800a108:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a10a:	7979      	ldrb	r1, [r7, #5]
 800a10c:	7e3b      	ldrb	r3, [r7, #24]
 800a10e:	9303      	str	r3, [sp, #12]
 800a110:	88fb      	ldrh	r3, [r7, #6]
 800a112:	9302      	str	r3, [sp, #8]
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	9301      	str	r3, [sp, #4]
 800a118:	2301      	movs	r3, #1
 800a11a:	9300      	str	r3, [sp, #0]
 800a11c:	2302      	movs	r3, #2
 800a11e:	2200      	movs	r2, #0
 800a120:	68f8      	ldr	r0, [r7, #12]
 800a122:	f000 fade 	bl	800a6e2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a126:	2300      	movs	r3, #0
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3710      	adds	r7, #16
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b088      	sub	sp, #32
 800a134:	af04      	add	r7, sp, #16
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	4611      	mov	r1, r2
 800a13c:	461a      	mov	r2, r3
 800a13e:	460b      	mov	r3, r1
 800a140:	80fb      	strh	r3, [r7, #6]
 800a142:	4613      	mov	r3, r2
 800a144:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a146:	7979      	ldrb	r1, [r7, #5]
 800a148:	2300      	movs	r3, #0
 800a14a:	9303      	str	r3, [sp, #12]
 800a14c:	88fb      	ldrh	r3, [r7, #6]
 800a14e:	9302      	str	r3, [sp, #8]
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	9301      	str	r3, [sp, #4]
 800a154:	2301      	movs	r3, #1
 800a156:	9300      	str	r3, [sp, #0]
 800a158:	2302      	movs	r3, #2
 800a15a:	2201      	movs	r2, #1
 800a15c:	68f8      	ldr	r0, [r7, #12]
 800a15e:	f000 fac0 	bl	800a6e2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a162:	2300      	movs	r3, #0
}
 800a164:	4618      	mov	r0, r3
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b086      	sub	sp, #24
 800a170:	af04      	add	r7, sp, #16
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	4608      	mov	r0, r1
 800a176:	4611      	mov	r1, r2
 800a178:	461a      	mov	r2, r3
 800a17a:	4603      	mov	r3, r0
 800a17c:	70fb      	strb	r3, [r7, #3]
 800a17e:	460b      	mov	r3, r1
 800a180:	70bb      	strb	r3, [r7, #2]
 800a182:	4613      	mov	r3, r2
 800a184:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a186:	7878      	ldrb	r0, [r7, #1]
 800a188:	78ba      	ldrb	r2, [r7, #2]
 800a18a:	78f9      	ldrb	r1, [r7, #3]
 800a18c:	8b3b      	ldrh	r3, [r7, #24]
 800a18e:	9302      	str	r3, [sp, #8]
 800a190:	7d3b      	ldrb	r3, [r7, #20]
 800a192:	9301      	str	r3, [sp, #4]
 800a194:	7c3b      	ldrb	r3, [r7, #16]
 800a196:	9300      	str	r3, [sp, #0]
 800a198:	4603      	mov	r3, r0
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 fa53 	bl	800a646 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a1a0:	2300      	movs	r3, #0
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3708      	adds	r7, #8
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b082      	sub	sp, #8
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a1b6:	78fb      	ldrb	r3, [r7, #3]
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 fa72 	bl	800a6a4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3708      	adds	r7, #8
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a1ca:	b580      	push	{r7, lr}
 800a1cc:	b084      	sub	sp, #16
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 f836 	bl	800a248 <USBH_GetFreePipe>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a1e0:	89fb      	ldrh	r3, [r7, #14]
 800a1e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d00a      	beq.n	800a200 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a1ea:	78fa      	ldrb	r2, [r7, #3]
 800a1ec:	89fb      	ldrh	r3, [r7, #14]
 800a1ee:	f003 030f 	and.w	r3, r3, #15
 800a1f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a1f6:	6879      	ldr	r1, [r7, #4]
 800a1f8:	33e0      	adds	r3, #224	; 0xe0
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	440b      	add	r3, r1
 800a1fe:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a200:	89fb      	ldrh	r3, [r7, #14]
 800a202:	b2db      	uxtb	r3, r3
}
 800a204:	4618      	mov	r0, r3
 800a206:	3710      	adds	r7, #16
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	460b      	mov	r3, r1
 800a216:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a218:	78fb      	ldrb	r3, [r7, #3]
 800a21a:	2b0f      	cmp	r3, #15
 800a21c:	d80d      	bhi.n	800a23a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a21e:	78fb      	ldrb	r3, [r7, #3]
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	33e0      	adds	r3, #224	; 0xe0
 800a224:	009b      	lsls	r3, r3, #2
 800a226:	4413      	add	r3, r2
 800a228:	685a      	ldr	r2, [r3, #4]
 800a22a:	78fb      	ldrb	r3, [r7, #3]
 800a22c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a230:	6879      	ldr	r1, [r7, #4]
 800a232:	33e0      	adds	r3, #224	; 0xe0
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	440b      	add	r3, r1
 800a238:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a23a:	2300      	movs	r3, #0
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a248:	b480      	push	{r7}
 800a24a:	b085      	sub	sp, #20
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a250:	2300      	movs	r3, #0
 800a252:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a254:	2300      	movs	r3, #0
 800a256:	73fb      	strb	r3, [r7, #15]
 800a258:	e00f      	b.n	800a27a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a25a:	7bfb      	ldrb	r3, [r7, #15]
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	33e0      	adds	r3, #224	; 0xe0
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	4413      	add	r3, r2
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d102      	bne.n	800a274 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a26e:	7bfb      	ldrb	r3, [r7, #15]
 800a270:	b29b      	uxth	r3, r3
 800a272:	e007      	b.n	800a284 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a274:	7bfb      	ldrb	r3, [r7, #15]
 800a276:	3301      	adds	r3, #1
 800a278:	73fb      	strb	r3, [r7, #15]
 800a27a:	7bfb      	ldrb	r3, [r7, #15]
 800a27c:	2b0f      	cmp	r3, #15
 800a27e:	d9ec      	bls.n	800a25a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a280:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a284:	4618      	mov	r0, r3
 800a286:	3714      	adds	r7, #20
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a294:	2201      	movs	r2, #1
 800a296:	490e      	ldr	r1, [pc, #56]	; (800a2d0 <MX_USB_HOST_Init+0x40>)
 800a298:	480e      	ldr	r0, [pc, #56]	; (800a2d4 <MX_USB_HOST_Init+0x44>)
 800a29a:	f7fe fba7 	bl	80089ec <USBH_Init>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d001      	beq.n	800a2a8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a2a4:	f7f6 fd24 	bl	8000cf0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a2a8:	490b      	ldr	r1, [pc, #44]	; (800a2d8 <MX_USB_HOST_Init+0x48>)
 800a2aa:	480a      	ldr	r0, [pc, #40]	; (800a2d4 <MX_USB_HOST_Init+0x44>)
 800a2ac:	f7fe fc2c 	bl	8008b08 <USBH_RegisterClass>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d001      	beq.n	800a2ba <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a2b6:	f7f6 fd1b 	bl	8000cf0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a2ba:	4806      	ldr	r0, [pc, #24]	; (800a2d4 <MX_USB_HOST_Init+0x44>)
 800a2bc:	f7fe fcb0 	bl	8008c20 <USBH_Start>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d001      	beq.n	800a2ca <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a2c6:	f7f6 fd13 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a2ca:	bf00      	nop
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	0800a2f1 	.word	0x0800a2f1
 800a2d4:	2000021c 	.word	0x2000021c
 800a2d8:	20000070 	.word	0x20000070

0800a2dc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a2e0:	4802      	ldr	r0, [pc, #8]	; (800a2ec <MX_USB_HOST_Process+0x10>)
 800a2e2:	f7fe fcad 	bl	8008c40 <USBH_Process>
}
 800a2e6:	bf00      	nop
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	2000021c 	.word	0x2000021c

0800a2f0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a2fc:	78fb      	ldrb	r3, [r7, #3]
 800a2fe:	3b01      	subs	r3, #1
 800a300:	2b04      	cmp	r3, #4
 800a302:	d819      	bhi.n	800a338 <USBH_UserProcess+0x48>
 800a304:	a201      	add	r2, pc, #4	; (adr r2, 800a30c <USBH_UserProcess+0x1c>)
 800a306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a30a:	bf00      	nop
 800a30c:	0800a339 	.word	0x0800a339
 800a310:	0800a329 	.word	0x0800a329
 800a314:	0800a339 	.word	0x0800a339
 800a318:	0800a331 	.word	0x0800a331
 800a31c:	0800a321 	.word	0x0800a321
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a320:	4b09      	ldr	r3, [pc, #36]	; (800a348 <USBH_UserProcess+0x58>)
 800a322:	2203      	movs	r2, #3
 800a324:	701a      	strb	r2, [r3, #0]
  break;
 800a326:	e008      	b.n	800a33a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a328:	4b07      	ldr	r3, [pc, #28]	; (800a348 <USBH_UserProcess+0x58>)
 800a32a:	2202      	movs	r2, #2
 800a32c:	701a      	strb	r2, [r3, #0]
  break;
 800a32e:	e004      	b.n	800a33a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a330:	4b05      	ldr	r3, [pc, #20]	; (800a348 <USBH_UserProcess+0x58>)
 800a332:	2201      	movs	r2, #1
 800a334:	701a      	strb	r2, [r3, #0]
  break;
 800a336:	e000      	b.n	800a33a <USBH_UserProcess+0x4a>

  default:
  break;
 800a338:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a33a:	bf00      	nop
 800a33c:	370c      	adds	r7, #12
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
 800a346:	bf00      	nop
 800a348:	200005f4 	.word	0x200005f4

0800a34c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b08a      	sub	sp, #40	; 0x28
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a354:	f107 0314 	add.w	r3, r7, #20
 800a358:	2200      	movs	r2, #0
 800a35a:	601a      	str	r2, [r3, #0]
 800a35c:	605a      	str	r2, [r3, #4]
 800a35e:	609a      	str	r2, [r3, #8]
 800a360:	60da      	str	r2, [r3, #12]
 800a362:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a36c:	d147      	bne.n	800a3fe <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a36e:	2300      	movs	r3, #0
 800a370:	613b      	str	r3, [r7, #16]
 800a372:	4b25      	ldr	r3, [pc, #148]	; (800a408 <HAL_HCD_MspInit+0xbc>)
 800a374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a376:	4a24      	ldr	r2, [pc, #144]	; (800a408 <HAL_HCD_MspInit+0xbc>)
 800a378:	f043 0301 	orr.w	r3, r3, #1
 800a37c:	6313      	str	r3, [r2, #48]	; 0x30
 800a37e:	4b22      	ldr	r3, [pc, #136]	; (800a408 <HAL_HCD_MspInit+0xbc>)
 800a380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a382:	f003 0301 	and.w	r3, r3, #1
 800a386:	613b      	str	r3, [r7, #16]
 800a388:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a38a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a38e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a390:	2300      	movs	r3, #0
 800a392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a394:	2300      	movs	r3, #0
 800a396:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a398:	f107 0314 	add.w	r3, r7, #20
 800a39c:	4619      	mov	r1, r3
 800a39e:	481b      	ldr	r0, [pc, #108]	; (800a40c <HAL_HCD_MspInit+0xc0>)
 800a3a0:	f7f9 f8e0 	bl	8003564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a3a4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a3a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3aa:	2302      	movs	r3, #2
 800a3ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a3b6:	230a      	movs	r3, #10
 800a3b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a3ba:	f107 0314 	add.w	r3, r7, #20
 800a3be:	4619      	mov	r1, r3
 800a3c0:	4812      	ldr	r0, [pc, #72]	; (800a40c <HAL_HCD_MspInit+0xc0>)
 800a3c2:	f7f9 f8cf 	bl	8003564 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a3c6:	4b10      	ldr	r3, [pc, #64]	; (800a408 <HAL_HCD_MspInit+0xbc>)
 800a3c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ca:	4a0f      	ldr	r2, [pc, #60]	; (800a408 <HAL_HCD_MspInit+0xbc>)
 800a3cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3d0:	6353      	str	r3, [r2, #52]	; 0x34
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	60fb      	str	r3, [r7, #12]
 800a3d6:	4b0c      	ldr	r3, [pc, #48]	; (800a408 <HAL_HCD_MspInit+0xbc>)
 800a3d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3da:	4a0b      	ldr	r2, [pc, #44]	; (800a408 <HAL_HCD_MspInit+0xbc>)
 800a3dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a3e0:	6453      	str	r3, [r2, #68]	; 0x44
 800a3e2:	4b09      	ldr	r3, [pc, #36]	; (800a408 <HAL_HCD_MspInit+0xbc>)
 800a3e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3ea:	60fb      	str	r3, [r7, #12]
 800a3ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	2043      	movs	r0, #67	; 0x43
 800a3f4:	f7f9 f87f 	bl	80034f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a3f8:	2043      	movs	r0, #67	; 0x43
 800a3fa:	f7f9 f898 	bl	800352e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a3fe:	bf00      	nop
 800a400:	3728      	adds	r7, #40	; 0x28
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	40023800 	.word	0x40023800
 800a40c:	40020000 	.word	0x40020000

0800a410 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a41e:	4618      	mov	r0, r3
 800a420:	f7fe ffed 	bl	80093fe <USBH_LL_IncTimer>
}
 800a424:	bf00      	nop
 800a426:	3708      	adds	r7, #8
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7ff f825 	bl	800948a <USBH_LL_Connect>
}
 800a440:	bf00      	nop
 800a442:	3708      	adds	r7, #8
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a456:	4618      	mov	r0, r3
 800a458:	f7ff f82e 	bl	80094b8 <USBH_LL_Disconnect>
}
 800a45c:	bf00      	nop
 800a45e:	3708      	adds	r7, #8
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	460b      	mov	r3, r1
 800a46e:	70fb      	strb	r3, [r7, #3]
 800a470:	4613      	mov	r3, r2
 800a472:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a474:	bf00      	nop
 800a476:	370c      	adds	r7, #12
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a48e:	4618      	mov	r0, r3
 800a490:	f7fe ffdf 	bl	8009452 <USBH_LL_PortEnabled>
}
 800a494:	bf00      	nop
 800a496:	3708      	adds	r7, #8
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7fe ffdf 	bl	800946e <USBH_LL_PortDisabled>
}
 800a4b0:	bf00      	nop
 800a4b2:	3708      	adds	r7, #8
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b082      	sub	sp, #8
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d12a      	bne.n	800a520 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a4ca:	4a18      	ldr	r2, [pc, #96]	; (800a52c <USBH_LL_Init+0x74>)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	4a15      	ldr	r2, [pc, #84]	; (800a52c <USBH_LL_Init+0x74>)
 800a4d6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a4da:	4b14      	ldr	r3, [pc, #80]	; (800a52c <USBH_LL_Init+0x74>)
 800a4dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a4e0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a4e2:	4b12      	ldr	r3, [pc, #72]	; (800a52c <USBH_LL_Init+0x74>)
 800a4e4:	2208      	movs	r2, #8
 800a4e6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a4e8:	4b10      	ldr	r3, [pc, #64]	; (800a52c <USBH_LL_Init+0x74>)
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a4ee:	4b0f      	ldr	r3, [pc, #60]	; (800a52c <USBH_LL_Init+0x74>)
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a4f4:	4b0d      	ldr	r3, [pc, #52]	; (800a52c <USBH_LL_Init+0x74>)
 800a4f6:	2202      	movs	r2, #2
 800a4f8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a4fa:	4b0c      	ldr	r3, [pc, #48]	; (800a52c <USBH_LL_Init+0x74>)
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a500:	480a      	ldr	r0, [pc, #40]	; (800a52c <USBH_LL_Init+0x74>)
 800a502:	f7f9 fae0 	bl	8003ac6 <HAL_HCD_Init>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d001      	beq.n	800a510 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a50c:	f7f6 fbf0 	bl	8000cf0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a510:	4806      	ldr	r0, [pc, #24]	; (800a52c <USBH_LL_Init+0x74>)
 800a512:	f7f9 fec4 	bl	800429e <HAL_HCD_GetCurrentFrame>
 800a516:	4603      	mov	r3, r0
 800a518:	4619      	mov	r1, r3
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f7fe ff60 	bl	80093e0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a520:	2300      	movs	r3, #0
}
 800a522:	4618      	mov	r0, r3
 800a524:	3708      	adds	r7, #8
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	200005f8 	.word	0x200005f8

0800a530 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a538:	2300      	movs	r3, #0
 800a53a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a53c:	2300      	movs	r3, #0
 800a53e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a546:	4618      	mov	r0, r3
 800a548:	f7f9 fe33 	bl	80041b2 <HAL_HCD_Start>
 800a54c:	4603      	mov	r3, r0
 800a54e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a550:	7bfb      	ldrb	r3, [r7, #15]
 800a552:	4618      	mov	r0, r3
 800a554:	f000 f95c 	bl	800a810 <USBH_Get_USB_Status>
 800a558:	4603      	mov	r3, r0
 800a55a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a55c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a566:	b580      	push	{r7, lr}
 800a568:	b084      	sub	sp, #16
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a56e:	2300      	movs	r3, #0
 800a570:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a572:	2300      	movs	r3, #0
 800a574:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7f9 fe3b 	bl	80041f8 <HAL_HCD_Stop>
 800a582:	4603      	mov	r3, r0
 800a584:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a586:	7bfb      	ldrb	r3, [r7, #15]
 800a588:	4618      	mov	r0, r3
 800a58a:	f000 f941 	bl	800a810 <USBH_Get_USB_Status>
 800a58e:	4603      	mov	r3, r0
 800a590:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a592:	7bbb      	ldrb	r3, [r7, #14]
}
 800a594:	4618      	mov	r0, r3
 800a596:	3710      	adds	r7, #16
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7f9 fe83 	bl	80042ba <HAL_HCD_GetCurrentSpeed>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	2b02      	cmp	r3, #2
 800a5b8:	d00c      	beq.n	800a5d4 <USBH_LL_GetSpeed+0x38>
 800a5ba:	2b02      	cmp	r3, #2
 800a5bc:	d80d      	bhi.n	800a5da <USBH_LL_GetSpeed+0x3e>
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d002      	beq.n	800a5c8 <USBH_LL_GetSpeed+0x2c>
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d003      	beq.n	800a5ce <USBH_LL_GetSpeed+0x32>
 800a5c6:	e008      	b.n	800a5da <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	73fb      	strb	r3, [r7, #15]
    break;
 800a5cc:	e008      	b.n	800a5e0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	73fb      	strb	r3, [r7, #15]
    break;
 800a5d2:	e005      	b.n	800a5e0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a5d4:	2302      	movs	r3, #2
 800a5d6:	73fb      	strb	r3, [r7, #15]
    break;
 800a5d8:	e002      	b.n	800a5e0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	73fb      	strb	r3, [r7, #15]
    break;
 800a5de:	bf00      	nop
  }
  return  speed;
 800a5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b084      	sub	sp, #16
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a600:	4618      	mov	r0, r3
 800a602:	f7f9 fe16 	bl	8004232 <HAL_HCD_ResetPort>
 800a606:	4603      	mov	r3, r0
 800a608:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a60a:	7bfb      	ldrb	r3, [r7, #15]
 800a60c:	4618      	mov	r0, r3
 800a60e:	f000 f8ff 	bl	800a810 <USBH_Get_USB_Status>
 800a612:	4603      	mov	r3, r0
 800a614:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a616:	7bbb      	ldrb	r3, [r7, #14]
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3710      	adds	r7, #16
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	460b      	mov	r3, r1
 800a62a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a632:	78fa      	ldrb	r2, [r7, #3]
 800a634:	4611      	mov	r1, r2
 800a636:	4618      	mov	r0, r3
 800a638:	f7f9 fe1d 	bl	8004276 <HAL_HCD_HC_GetXferCount>
 800a63c:	4603      	mov	r3, r0
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3708      	adds	r7, #8
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}

0800a646 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a646:	b590      	push	{r4, r7, lr}
 800a648:	b089      	sub	sp, #36	; 0x24
 800a64a:	af04      	add	r7, sp, #16
 800a64c:	6078      	str	r0, [r7, #4]
 800a64e:	4608      	mov	r0, r1
 800a650:	4611      	mov	r1, r2
 800a652:	461a      	mov	r2, r3
 800a654:	4603      	mov	r3, r0
 800a656:	70fb      	strb	r3, [r7, #3]
 800a658:	460b      	mov	r3, r1
 800a65a:	70bb      	strb	r3, [r7, #2]
 800a65c:	4613      	mov	r3, r2
 800a65e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a660:	2300      	movs	r3, #0
 800a662:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a664:	2300      	movs	r3, #0
 800a666:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a66e:	787c      	ldrb	r4, [r7, #1]
 800a670:	78ba      	ldrb	r2, [r7, #2]
 800a672:	78f9      	ldrb	r1, [r7, #3]
 800a674:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a676:	9302      	str	r3, [sp, #8]
 800a678:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a67c:	9301      	str	r3, [sp, #4]
 800a67e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a682:	9300      	str	r3, [sp, #0]
 800a684:	4623      	mov	r3, r4
 800a686:	f7f9 fa80 	bl	8003b8a <HAL_HCD_HC_Init>
 800a68a:	4603      	mov	r3, r0
 800a68c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a68e:	7bfb      	ldrb	r3, [r7, #15]
 800a690:	4618      	mov	r0, r3
 800a692:	f000 f8bd 	bl	800a810 <USBH_Get_USB_Status>
 800a696:	4603      	mov	r3, r0
 800a698:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a69a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3714      	adds	r7, #20
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd90      	pop	{r4, r7, pc}

0800a6a4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a6be:	78fa      	ldrb	r2, [r7, #3]
 800a6c0:	4611      	mov	r1, r2
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7f9 faf0 	bl	8003ca8 <HAL_HCD_HC_Halt>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a6cc:	7bfb      	ldrb	r3, [r7, #15]
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f000 f89e 	bl	800a810 <USBH_Get_USB_Status>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a6e2:	b590      	push	{r4, r7, lr}
 800a6e4:	b089      	sub	sp, #36	; 0x24
 800a6e6:	af04      	add	r7, sp, #16
 800a6e8:	6078      	str	r0, [r7, #4]
 800a6ea:	4608      	mov	r0, r1
 800a6ec:	4611      	mov	r1, r2
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	70fb      	strb	r3, [r7, #3]
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	70bb      	strb	r3, [r7, #2]
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a700:	2300      	movs	r3, #0
 800a702:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a70a:	787c      	ldrb	r4, [r7, #1]
 800a70c:	78ba      	ldrb	r2, [r7, #2]
 800a70e:	78f9      	ldrb	r1, [r7, #3]
 800a710:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a714:	9303      	str	r3, [sp, #12]
 800a716:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a718:	9302      	str	r3, [sp, #8]
 800a71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71c:	9301      	str	r3, [sp, #4]
 800a71e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a722:	9300      	str	r3, [sp, #0]
 800a724:	4623      	mov	r3, r4
 800a726:	f7f9 fae3 	bl	8003cf0 <HAL_HCD_HC_SubmitRequest>
 800a72a:	4603      	mov	r3, r0
 800a72c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a72e:	7bfb      	ldrb	r3, [r7, #15]
 800a730:	4618      	mov	r0, r3
 800a732:	f000 f86d 	bl	800a810 <USBH_Get_USB_Status>
 800a736:	4603      	mov	r3, r0
 800a738:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a73a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3714      	adds	r7, #20
 800a740:	46bd      	mov	sp, r7
 800a742:	bd90      	pop	{r4, r7, pc}

0800a744 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	460b      	mov	r3, r1
 800a74e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a756:	78fa      	ldrb	r2, [r7, #3]
 800a758:	4611      	mov	r1, r2
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7f9 fd77 	bl	800424e <HAL_HCD_HC_GetURBState>
 800a760:	4603      	mov	r3, r0
}
 800a762:	4618      	mov	r0, r3
 800a764:	3708      	adds	r7, #8
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b082      	sub	sp, #8
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
 800a772:	460b      	mov	r3, r1
 800a774:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d103      	bne.n	800a788 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a780:	78fb      	ldrb	r3, [r7, #3]
 800a782:	4618      	mov	r0, r3
 800a784:	f000 f870 	bl	800a868 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a788:	20c8      	movs	r0, #200	; 0xc8
 800a78a:	f7f8 fdb5 	bl	80032f8 <HAL_Delay>
  return USBH_OK;
 800a78e:	2300      	movs	r3, #0
}
 800a790:	4618      	mov	r0, r3
 800a792:	3708      	adds	r7, #8
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a798:	b480      	push	{r7}
 800a79a:	b085      	sub	sp, #20
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	70fb      	strb	r3, [r7, #3]
 800a7a4:	4613      	mov	r3, r2
 800a7a6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a7ae:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a7b0:	78fb      	ldrb	r3, [r7, #3]
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	212c      	movs	r1, #44	; 0x2c
 800a7b6:	fb01 f303 	mul.w	r3, r1, r3
 800a7ba:	4413      	add	r3, r2
 800a7bc:	333b      	adds	r3, #59	; 0x3b
 800a7be:	781b      	ldrb	r3, [r3, #0]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d009      	beq.n	800a7d8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a7c4:	78fb      	ldrb	r3, [r7, #3]
 800a7c6:	68fa      	ldr	r2, [r7, #12]
 800a7c8:	212c      	movs	r1, #44	; 0x2c
 800a7ca:	fb01 f303 	mul.w	r3, r1, r3
 800a7ce:	4413      	add	r3, r2
 800a7d0:	3354      	adds	r3, #84	; 0x54
 800a7d2:	78ba      	ldrb	r2, [r7, #2]
 800a7d4:	701a      	strb	r2, [r3, #0]
 800a7d6:	e008      	b.n	800a7ea <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a7d8:	78fb      	ldrb	r3, [r7, #3]
 800a7da:	68fa      	ldr	r2, [r7, #12]
 800a7dc:	212c      	movs	r1, #44	; 0x2c
 800a7de:	fb01 f303 	mul.w	r3, r1, r3
 800a7e2:	4413      	add	r3, r2
 800a7e4:	3355      	adds	r3, #85	; 0x55
 800a7e6:	78ba      	ldrb	r2, [r7, #2]
 800a7e8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a7ea:	2300      	movs	r3, #0
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3714      	adds	r7, #20
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f7f8 fd79 	bl	80032f8 <HAL_Delay>
}
 800a806:	bf00      	nop
 800a808:	3708      	adds	r7, #8
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
	...

0800a810 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a810:	b480      	push	{r7}
 800a812:	b085      	sub	sp, #20
 800a814:	af00      	add	r7, sp, #0
 800a816:	4603      	mov	r3, r0
 800a818:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a81a:	2300      	movs	r3, #0
 800a81c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a81e:	79fb      	ldrb	r3, [r7, #7]
 800a820:	2b03      	cmp	r3, #3
 800a822:	d817      	bhi.n	800a854 <USBH_Get_USB_Status+0x44>
 800a824:	a201      	add	r2, pc, #4	; (adr r2, 800a82c <USBH_Get_USB_Status+0x1c>)
 800a826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a82a:	bf00      	nop
 800a82c:	0800a83d 	.word	0x0800a83d
 800a830:	0800a843 	.word	0x0800a843
 800a834:	0800a849 	.word	0x0800a849
 800a838:	0800a84f 	.word	0x0800a84f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a83c:	2300      	movs	r3, #0
 800a83e:	73fb      	strb	r3, [r7, #15]
    break;
 800a840:	e00b      	b.n	800a85a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a842:	2302      	movs	r3, #2
 800a844:	73fb      	strb	r3, [r7, #15]
    break;
 800a846:	e008      	b.n	800a85a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a848:	2301      	movs	r3, #1
 800a84a:	73fb      	strb	r3, [r7, #15]
    break;
 800a84c:	e005      	b.n	800a85a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a84e:	2302      	movs	r3, #2
 800a850:	73fb      	strb	r3, [r7, #15]
    break;
 800a852:	e002      	b.n	800a85a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a854:	2302      	movs	r3, #2
 800a856:	73fb      	strb	r3, [r7, #15]
    break;
 800a858:	bf00      	nop
  }
  return usb_status;
 800a85a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3714      	adds	r7, #20
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	4603      	mov	r3, r0
 800a870:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a872:	79fb      	ldrb	r3, [r7, #7]
 800a874:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a876:	79fb      	ldrb	r3, [r7, #7]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d102      	bne.n	800a882 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a87c:	2300      	movs	r3, #0
 800a87e:	73fb      	strb	r3, [r7, #15]
 800a880:	e001      	b.n	800a886 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a882:	2301      	movs	r3, #1
 800a884:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a886:	7bfb      	ldrb	r3, [r7, #15]
 800a888:	461a      	mov	r2, r3
 800a88a:	2101      	movs	r1, #1
 800a88c:	4803      	ldr	r0, [pc, #12]	; (800a89c <MX_DriverVbusFS+0x34>)
 800a88e:	f7f9 f901 	bl	8003a94 <HAL_GPIO_WritePin>
}
 800a892:	bf00      	nop
 800a894:	3710      	adds	r7, #16
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	40020800 	.word	0x40020800

0800a8a0 <_init>:
 800a8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8a2:	bf00      	nop
 800a8a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8a6:	bc08      	pop	{r3}
 800a8a8:	469e      	mov	lr, r3
 800a8aa:	4770      	bx	lr

0800a8ac <_fini>:
 800a8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ae:	bf00      	nop
 800a8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8b2:	bc08      	pop	{r3}
 800a8b4:	469e      	mov	lr, r3
 800a8b6:	4770      	bx	lr
