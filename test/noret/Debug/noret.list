
noret.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  0800b640  0800b640  0001b640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000018  0800b894  0800b894  0001b894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000c8  0800b8ac  0800b8ac  0001b8ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b974  0800b974  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b974  0800b974  0001b974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b978  0800b978  0001b978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800b97c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000009fc  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a8c  20000a8c  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000034  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .comment      0000009e  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 14 .debug_line   0001b384  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0002a40a  00000000  00000000  0003b4e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000077ab  00000000  00000000  000658f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001740  00000000  00000000  0006d0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf916  00000000  00000000  0006e7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00001738  00000000  00000000  0013e0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000236a3  00000000  00000000  0013f830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005a68  00000000  00000000  00162ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00007c26  00000000  00000000  0016893c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <deregister_tm_clones>:
 8000190:	4803      	ldr	r0, [pc, #12]	; (80001a0 <deregister_tm_clones+0x10>)
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <deregister_tm_clones+0x14>)
 8000194:	4283      	cmp	r3, r0
 8000196:	d002      	beq.n	800019e <deregister_tm_clones+0xe>
 8000198:	4b03      	ldr	r3, [pc, #12]	; (80001a8 <deregister_tm_clones+0x18>)
 800019a:	b103      	cbz	r3, 800019e <deregister_tm_clones+0xe>
 800019c:	4718      	bx	r3
 800019e:	4770      	bx	lr
 80001a0:	20000090 	.word	0x20000090
 80001a4:	20000090 	.word	0x20000090
 80001a8:	00000000 	.word	0x00000000

080001ac <register_tm_clones>:
 80001ac:	4805      	ldr	r0, [pc, #20]	; (80001c4 <register_tm_clones+0x18>)
 80001ae:	4906      	ldr	r1, [pc, #24]	; (80001c8 <register_tm_clones+0x1c>)
 80001b0:	1a0b      	subs	r3, r1, r0
 80001b2:	0fd9      	lsrs	r1, r3, #31
 80001b4:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001b8:	1049      	asrs	r1, r1, #1
 80001ba:	d002      	beq.n	80001c2 <register_tm_clones+0x16>
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <register_tm_clones+0x20>)
 80001be:	b103      	cbz	r3, 80001c2 <register_tm_clones+0x16>
 80001c0:	4718      	bx	r3
 80001c2:	4770      	bx	lr
 80001c4:	20000090 	.word	0x20000090
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c06      	ldr	r4, [pc, #24]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b943      	cbnz	r3, 80001ea <__do_global_dtors_aux+0x1a>
 80001d8:	f7ff ffda 	bl	8000190 <deregister_tm_clones>
 80001dc:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	b113      	cbz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001e0:	4804      	ldr	r0, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x24>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	2301      	movs	r3, #1
 80001e8:	7023      	strb	r3, [r4, #0]
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000090 	.word	0x20000090
 80001f0:	00000000 	.word	0x00000000
 80001f4:	0800b628 	.word	0x0800b628

080001f8 <frame_dummy>:
 80001f8:	b508      	push	{r3, lr}
 80001fa:	4b04      	ldr	r3, [pc, #16]	; (800020c <frame_dummy+0x14>)
 80001fc:	b11b      	cbz	r3, 8000206 <frame_dummy+0xe>
 80001fe:	4904      	ldr	r1, [pc, #16]	; (8000210 <frame_dummy+0x18>)
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <frame_dummy+0x1c>)
 8000202:	f3af 8000 	nop.w
 8000206:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800020a:	e7cf      	b.n	80001ac <register_tm_clones>
 800020c:	00000000 	.word	0x00000000
 8000210:	20000094 	.word	0x20000094
 8000214:	0800b628 	.word	0x0800b628

08000218 <benchmark>:
 8000218:	b580      	push	{r7, lr}
 800021a:	466f      	mov	r7, sp

0800021c <benchmark_0_FORPUSH>:
 800021c:	f240 0e00 	movw	lr, #0
 8000220:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 8000224:	b500      	push	{lr}
 8000226:	f240 00ac 	movw	r0, #172	; 0xac
 800022a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800022e:	f000 fb4a 	bl	80008c6 <MasterForward>
 8000232:	2000      	movs	r0, #0
 8000234:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000238:	f000 fb58 	bl	80008ec <MasterBackward>

0800023c <BubbleSort>:
 800023c:	b085      	sub	sp, #20
 800023e:	9004      	str	r0, [sp, #16]
 8000240:	2000      	movs	r0, #0
 8000242:	9003      	str	r0, [sp, #12]
 8000244:	9000      	str	r0, [sp, #0]
 8000246:	e7ff      	b.n	8000248 <BubbleSort+0xc>
 8000248:	9800      	ldr	r0, [sp, #0]
 800024a:	2863      	cmp	r0, #99	; 0x63
 800024c:	dc3f      	bgt.n	80002ce <BubbleSort+0x92>
 800024e:	e7ff      	b.n	8000250 <BubbleSort+0x14>
 8000250:	2001      	movs	r0, #1
 8000252:	9003      	str	r0, [sp, #12]
 8000254:	2000      	movs	r0, #0
 8000256:	9001      	str	r0, [sp, #4]
 8000258:	e7ff      	b.n	800025a <BubbleSort+0x1e>
 800025a:	9801      	ldr	r0, [sp, #4]
 800025c:	2863      	cmp	r0, #99	; 0x63
 800025e:	dc2c      	bgt.n	80002ba <BubbleSort+0x7e>
 8000260:	e7ff      	b.n	8000262 <BubbleSort+0x26>
 8000262:	9801      	ldr	r0, [sp, #4]
 8000264:	9900      	ldr	r1, [sp, #0]
 8000266:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
 800026a:	4288      	cmp	r0, r1
 800026c:	db01      	blt.n	8000272 <BubbleSort+0x36>
 800026e:	e7ff      	b.n	8000270 <BubbleSort+0x34>
 8000270:	e024      	b.n	80002bc <BubbleSort+0x80>
 8000272:	9804      	ldr	r0, [sp, #16]
 8000274:	9901      	ldr	r1, [sp, #4]
 8000276:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 800027a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800027e:	6851      	ldr	r1, [r2, #4]
 8000280:	4288      	cmp	r0, r1
 8000282:	dd15      	ble.n	80002b0 <BubbleSort+0x74>
 8000284:	e7ff      	b.n	8000286 <BubbleSort+0x4a>
 8000286:	9804      	ldr	r0, [sp, #16]
 8000288:	9901      	ldr	r1, [sp, #4]
 800028a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800028e:	9002      	str	r0, [sp, #8]
 8000290:	9804      	ldr	r0, [sp, #16]
 8000292:	9901      	ldr	r1, [sp, #4]
 8000294:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8000298:	6852      	ldr	r2, [r2, #4]
 800029a:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
 800029e:	9802      	ldr	r0, [sp, #8]
 80002a0:	9904      	ldr	r1, [sp, #16]
 80002a2:	9a01      	ldr	r2, [sp, #4]
 80002a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80002a8:	6048      	str	r0, [r1, #4]
 80002aa:	2000      	movs	r0, #0
 80002ac:	9003      	str	r0, [sp, #12]
 80002ae:	e7ff      	b.n	80002b0 <BubbleSort+0x74>
 80002b0:	e7ff      	b.n	80002b2 <BubbleSort+0x76>
 80002b2:	9801      	ldr	r0, [sp, #4]
 80002b4:	3001      	adds	r0, #1
 80002b6:	9001      	str	r0, [sp, #4]
 80002b8:	e7cf      	b.n	800025a <BubbleSort+0x1e>
 80002ba:	e7ff      	b.n	80002bc <BubbleSort+0x80>
 80002bc:	9803      	ldr	r0, [sp, #12]
 80002be:	b108      	cbz	r0, 80002c4 <BubbleSort+0x88>
 80002c0:	e7ff      	b.n	80002c2 <BubbleSort+0x86>
 80002c2:	e005      	b.n	80002d0 <BubbleSort+0x94>
 80002c4:	e7ff      	b.n	80002c6 <BubbleSort+0x8a>
 80002c6:	9800      	ldr	r0, [sp, #0]
 80002c8:	3001      	adds	r0, #1
 80002ca:	9000      	str	r0, [sp, #0]
 80002cc:	e7bc      	b.n	8000248 <BubbleSort+0xc>
 80002ce:	e7ff      	b.n	80002d0 <BubbleSort+0x94>
 80002d0:	b005      	add	sp, #20
 80002d2:	f000 fb0b 	bl	80008ec <MasterBackward>
 80002d6:	bf00      	nop

080002d8 <initialise_benchmark>:
 80002d8:	b082      	sub	sp, #8
 80002da:	f240 2040 	movw	r0, #576	; 0x240
 80002de:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80002e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80002e6:	6001      	str	r1, [r0, #0]
 80002e8:	6800      	ldr	r0, [r0, #0]
 80002ea:	9000      	str	r0, [sp, #0]
 80002ec:	2000      	movs	r0, #0
 80002ee:	9001      	str	r0, [sp, #4]
 80002f0:	e7ff      	b.n	80002f2 <initialise_benchmark+0x1a>
 80002f2:	9801      	ldr	r0, [sp, #4]
 80002f4:	2863      	cmp	r0, #99	; 0x63
 80002f6:	dc0e      	bgt.n	8000316 <initialise_benchmark+0x3e>
 80002f8:	e7ff      	b.n	80002fa <initialise_benchmark+0x22>
 80002fa:	9801      	ldr	r0, [sp, #4]
 80002fc:	9900      	ldr	r1, [sp, #0]
 80002fe:	4341      	muls	r1, r0
 8000300:	f240 02ac 	movw	r2, #172	; 0xac
 8000304:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000308:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 800030c:	e7ff      	b.n	800030e <initialise_benchmark+0x36>
 800030e:	9801      	ldr	r0, [sp, #4]
 8000310:	3001      	adds	r0, #1
 8000312:	9001      	str	r0, [sp, #4]
 8000314:	e7ed      	b.n	80002f2 <initialise_benchmark+0x1a>
 8000316:	b002      	add	sp, #8
 8000318:	f000 fae8 	bl	80008ec <MasterBackward>

0800031c <verify_benchmark>:
 800031c:	b580      	push	{r7, lr}
 800031e:	466f      	mov	r7, sp
 8000320:	b0e8      	sub	sp, #416	; 0x1a0
 8000322:	9066      	str	r0, [sp, #408]	; 0x198
 8000324:	f24b 61c0 	movw	r1, #46784	; 0xb6c0
 8000328:	f6c0 0100 	movt	r1, #2048	; 0x800
 800032c:	a802      	add	r0, sp, #8
 800032e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000332:	f000 fecd 	bl	80010d0 <__aeabi_memcpy>
 8000336:	2000      	movs	r0, #0
 8000338:	9001      	str	r0, [sp, #4]
 800033a:	e7ff      	b.n	800033c <verify_benchmark+0x20>
 800033c:	9801      	ldr	r0, [sp, #4]
 800033e:	2863      	cmp	r0, #99	; 0x63
 8000340:	dc15      	bgt.n	800036e <verify_benchmark+0x52>
 8000342:	e7ff      	b.n	8000344 <verify_benchmark+0x28>
 8000344:	9801      	ldr	r0, [sp, #4]
 8000346:	f240 01ac 	movw	r1, #172	; 0xac
 800034a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800034e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8000352:	aa02      	add	r2, sp, #8
 8000354:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000358:	4281      	cmp	r1, r0
 800035a:	d003      	beq.n	8000364 <verify_benchmark+0x48>
 800035c:	e7ff      	b.n	800035e <verify_benchmark+0x42>
 800035e:	2000      	movs	r0, #0
 8000360:	9067      	str	r0, [sp, #412]	; 0x19c
 8000362:	e007      	b.n	8000374 <verify_benchmark+0x58>
 8000364:	e7ff      	b.n	8000366 <verify_benchmark+0x4a>
 8000366:	9801      	ldr	r0, [sp, #4]
 8000368:	3001      	adds	r0, #1
 800036a:	9001      	str	r0, [sp, #4]
 800036c:	e7e6      	b.n	800033c <verify_benchmark+0x20>
 800036e:	2001      	movs	r0, #1
 8000370:	9067      	str	r0, [sp, #412]	; 0x19c
 8000372:	e7ff      	b.n	8000374 <verify_benchmark+0x58>
 8000374:	9867      	ldr	r0, [sp, #412]	; 0x19c
 8000376:	b068      	add	sp, #416	; 0x1a0
 8000378:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800037c:	f000 fab6 	bl	80008ec <MasterBackward>

08000380 <__io_putchar>:
 8000380:	b580      	push	{r7, lr}
 8000382:	466f      	mov	r7, sp
 8000384:	b082      	sub	sp, #8
 8000386:	9001      	str	r0, [sp, #4]
 8000388:	f240 2044 	movw	r0, #580	; 0x244
 800038c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000390:	a901      	add	r1, sp, #4
 8000392:	2201      	movs	r2, #1
 8000394:	2364      	movs	r3, #100	; 0x64
 8000396:	f007 faf7 	bl	8007988 <HAL_UART_Transmit>
 800039a:	9801      	ldr	r0, [sp, #4]
 800039c:	b002      	add	sp, #8
 800039e:	bd80      	pop	{r7, pc}

080003a0 <main>:
 80003a0:	b580      	push	{r7, lr}
 80003a2:	466f      	mov	r7, sp
 80003a4:	b084      	sub	sp, #16
 80003a6:	f8df 0564 	ldr.w	r0, [pc, #1380]	; 800090c <fail_back+0x2>
 80003aa:	f8df 1564 	ldr.w	r1, [pc, #1380]	; 8000910 <fail_back+0x6>
 80003ae:	6001      	str	r1, [r0, #0]
 80003b0:	2000      	movs	r0, #0
 80003b2:	9003      	str	r0, [sp, #12]
 80003b4:	f003 fdf2 	bl	8003f9c <HAL_Init>

080003b8 <main_4_FORPUSH>:
 80003b8:	f240 0e0c 	movw	lr, #12
 80003bc:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 80003c0:	b500      	push	{lr}
 80003c2:	f000 fa80 	bl	80008c6 <MasterForward>

080003c6 <main_8_FORPUSH>:
 80003c6:	f240 0e18 	movw	lr, #24
 80003ca:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 80003ce:	b500      	push	{lr}
 80003d0:	f000 fa79 	bl	80008c6 <MasterForward>

080003d4 <main_12_FORPUSH>:
 80003d4:	f240 0e24 	movw	lr, #36	; 0x24
 80003d8:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 80003dc:	b500      	push	{lr}
 80003de:	f000 fa72 	bl	80008c6 <MasterForward>

080003e2 <main_16_FORPUSH>:
 80003e2:	f240 0e30 	movw	lr, #48	; 0x30
 80003e6:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 80003ea:	b500      	push	{lr}
 80003ec:	f000 fa6b 	bl	80008c6 <MasterForward>

080003f0 <main_20_FORPUSH>:
 80003f0:	f240 0e3c 	movw	lr, #60	; 0x3c
 80003f4:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 80003f8:	b500      	push	{lr}
 80003fa:	f000 fa64 	bl	80008c6 <MasterForward>
 80003fe:	f00a fe0b 	bl	800b018 <MX_USB_HOST_Init>

08000402 <main_24_FORPUSH>:
 8000402:	f240 0e48 	movw	lr, #72	; 0x48
 8000406:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 800040a:	b500      	push	{lr}
 800040c:	f000 fa5b 	bl	80008c6 <MasterForward>
 8000410:	f003 fe2a 	bl	8004068 <HAL_GetTick>
 8000414:	9002      	str	r0, [sp, #8]

08000416 <main_28_FORPUSH>:
 8000416:	f240 0e54 	movw	lr, #84	; 0x54
 800041a:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 800041e:	b500      	push	{lr}
 8000420:	f000 fa51 	bl	80008c6 <MasterForward>
 8000424:	e7ff      	b.n	8000426 <main_28_FORPUSH+0x10>
 8000426:	f00a fe1d 	bl	800b064 <MX_USB_HOST_Process>
 800042a:	2000      	movs	r0, #0
 800042c:	9001      	str	r0, [sp, #4]
 800042e:	e7ff      	b.n	8000430 <main_28_FORPUSH+0x1a>
 8000430:	9801      	ldr	r0, [sp, #4]
 8000432:	f242 710f 	movw	r1, #9999	; 0x270f
 8000436:	4288      	cmp	r0, r1
 8000438:	dc0c      	bgt.n	8000454 <main_36_FORPUSH>
 800043a:	e7ff      	b.n	800043c <main_32_FORPUSH>

0800043c <main_32_FORPUSH>:
 800043c:	f240 0e60 	movw	lr, #96	; 0x60
 8000440:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 8000444:	b500      	push	{lr}
 8000446:	f000 fa3e 	bl	80008c6 <MasterForward>
 800044a:	e7ff      	b.n	800044c <main_32_FORPUSH+0x10>
 800044c:	9801      	ldr	r0, [sp, #4]
 800044e:	3001      	adds	r0, #1
 8000450:	9001      	str	r0, [sp, #4]
 8000452:	e7ed      	b.n	8000430 <main_28_FORPUSH+0x1a>

08000454 <main_36_FORPUSH>:
 8000454:	f240 0e6c 	movw	lr, #108	; 0x6c
 8000458:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 800045c:	b500      	push	{lr}
 800045e:	2001      	movs	r0, #1
 8000460:	f000 fa31 	bl	80008c6 <MasterForward>
 8000464:	9000      	str	r0, [sp, #0]
 8000466:	9800      	ldr	r0, [sp, #0]
 8000468:	2801      	cmp	r0, #1
 800046a:	d10b      	bne.n	8000484 <main_36_FORPUSH+0x30>
 800046c:	e7ff      	b.n	800046e <main_36_FORPUSH+0x1a>
 800046e:	f003 fdfb 	bl	8004068 <HAL_GetTick>
 8000472:	9902      	ldr	r1, [sp, #8]
 8000474:	1a41      	subs	r1, r0, r1
 8000476:	f64b 0050 	movw	r0, #47184	; 0xb850
 800047a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800047e:	f001 f86f 	bl	8001560 <iprintf>
 8000482:	e7ff      	b.n	8000484 <main_36_FORPUSH+0x30>
 8000484:	f003 fdf0 	bl	8004068 <HAL_GetTick>
 8000488:	9002      	str	r0, [sp, #8]
 800048a:	e7cc      	b.n	8000426 <main_28_FORPUSH+0x10>

0800048c <SystemClock_Config>:
 800048c:	b580      	push	{r7, lr}
 800048e:	466f      	mov	r7, sp
 8000490:	b094      	sub	sp, #80	; 0x50
 8000492:	a808      	add	r0, sp, #32
 8000494:	2130      	movs	r1, #48	; 0x30
 8000496:	f000 fe17 	bl	80010c8 <__aeabi_memclr>
 800049a:	2000      	movs	r0, #0
 800049c:	9007      	str	r0, [sp, #28]
 800049e:	9006      	str	r0, [sp, #24]
 80004a0:	9005      	str	r0, [sp, #20]
 80004a2:	9004      	str	r0, [sp, #16]
 80004a4:	9003      	str	r0, [sp, #12]
 80004a6:	e7ff      	b.n	80004a8 <SystemClock_Config+0x1c>
 80004a8:	2000      	movs	r0, #0
 80004aa:	9002      	str	r0, [sp, #8]
 80004ac:	f643 0040 	movw	r0, #14400	; 0x3840
 80004b0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80004b4:	6801      	ldr	r1, [r0, #0]
 80004b6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80004ba:	6001      	str	r1, [r0, #0]
 80004bc:	6800      	ldr	r0, [r0, #0]
 80004be:	f000 5080 	and.w	r0, r0, #268435456	; 0x10000000
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	9802      	ldr	r0, [sp, #8]
 80004c6:	e7ff      	b.n	80004c8 <SystemClock_Config+0x3c>
 80004c8:	e7ff      	b.n	80004ca <SystemClock_Config+0x3e>
 80004ca:	2000      	movs	r0, #0
 80004cc:	9001      	str	r0, [sp, #4]
 80004ce:	f247 0000 	movw	r0, #28672	; 0x7000
 80004d2:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80004d6:	6801      	ldr	r1, [r0, #0]
 80004d8:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80004dc:	6001      	str	r1, [r0, #0]
 80004de:	6800      	ldr	r0, [r0, #0]
 80004e0:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
 80004e4:	9001      	str	r0, [sp, #4]
 80004e6:	9801      	ldr	r0, [sp, #4]
 80004e8:	e7ff      	b.n	80004ea <SystemClock_Config+0x5e>
 80004ea:	2001      	movs	r0, #1
 80004ec:	9008      	str	r0, [sp, #32]
 80004ee:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80004f2:	9009      	str	r0, [sp, #36]	; 0x24
 80004f4:	2002      	movs	r0, #2
 80004f6:	900e      	str	r0, [sp, #56]	; 0x38
 80004f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80004fc:	910f      	str	r1, [sp, #60]	; 0x3c
 80004fe:	2108      	movs	r1, #8
 8000500:	9110      	str	r1, [sp, #64]	; 0x40
 8000502:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8000506:	9111      	str	r1, [sp, #68]	; 0x44
 8000508:	9012      	str	r0, [sp, #72]	; 0x48
 800050a:	2007      	movs	r0, #7
 800050c:	9013      	str	r0, [sp, #76]	; 0x4c
 800050e:	a808      	add	r0, sp, #32
 8000510:	f006 fb8c 	bl	8006c2c <HAL_RCC_OscConfig>
 8000514:	b140      	cbz	r0, 8000528 <SystemClock_Config_40_FORPUSH+0x10>
 8000516:	e7ff      	b.n	8000518 <SystemClock_Config_40_FORPUSH>

08000518 <SystemClock_Config_40_FORPUSH>:
 8000518:	f240 0e78 	movw	lr, #120	; 0x78
 800051c:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 8000520:	b500      	push	{lr}
 8000522:	f000 f9d0 	bl	80008c6 <MasterForward>
 8000526:	e7ff      	b.n	8000528 <SystemClock_Config_40_FORPUSH+0x10>
 8000528:	200f      	movs	r0, #15
 800052a:	9003      	str	r0, [sp, #12]
 800052c:	2002      	movs	r0, #2
 800052e:	9004      	str	r0, [sp, #16]
 8000530:	2000      	movs	r0, #0
 8000532:	9005      	str	r0, [sp, #20]
 8000534:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000538:	9006      	str	r0, [sp, #24]
 800053a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800053e:	9007      	str	r0, [sp, #28]
 8000540:	a803      	add	r0, sp, #12
 8000542:	2105      	movs	r1, #5
 8000544:	f006 fdea 	bl	800711c <HAL_RCC_ClockConfig>
 8000548:	b140      	cbz	r0, 800055c <SystemClock_Config_44_FORPUSH+0x10>
 800054a:	e7ff      	b.n	800054c <SystemClock_Config_44_FORPUSH>

0800054c <SystemClock_Config_44_FORPUSH>:
 800054c:	f240 0e84 	movw	lr, #132	; 0x84
 8000550:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 8000554:	b500      	push	{lr}
 8000556:	f000 f9b6 	bl	80008c6 <MasterForward>
 800055a:	e7ff      	b.n	800055c <SystemClock_Config_44_FORPUSH+0x10>
 800055c:	b014      	add	sp, #80	; 0x50
 800055e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000562:	f000 f9c3 	bl	80008ec <MasterBackward>
 8000566:	bf00      	nop

08000568 <MX_GPIO_Init>:
 8000568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056a:	af03      	add	r7, sp, #12
 800056c:	e92d 0f00 	stmdb	sp!, {r8, r9, sl, fp}
 8000570:	b08b      	sub	sp, #44	; 0x2c
 8000572:	2000      	movs	r0, #0
 8000574:	900a      	str	r0, [sp, #40]	; 0x28
 8000576:	9009      	str	r0, [sp, #36]	; 0x24
 8000578:	9008      	str	r0, [sp, #32]
 800057a:	9007      	str	r0, [sp, #28]
 800057c:	9006      	str	r0, [sp, #24]
 800057e:	e7ff      	b.n	8000580 <MX_GPIO_Init+0x18>
 8000580:	2000      	movs	r0, #0
 8000582:	9005      	str	r0, [sp, #20]
 8000584:	f643 0030 	movw	r0, #14384	; 0x3830
 8000588:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800058c:	6801      	ldr	r1, [r0, #0]
 800058e:	f041 0110 	orr.w	r1, r1, #16
 8000592:	6001      	str	r1, [r0, #0]
 8000594:	6800      	ldr	r0, [r0, #0]
 8000596:	f000 0010 	and.w	r0, r0, #16
 800059a:	9005      	str	r0, [sp, #20]
 800059c:	9805      	ldr	r0, [sp, #20]
 800059e:	e7ff      	b.n	80005a0 <MX_GPIO_Init+0x38>
 80005a0:	e7ff      	b.n	80005a2 <MX_GPIO_Init+0x3a>
 80005a2:	2000      	movs	r0, #0
 80005a4:	9004      	str	r0, [sp, #16]
 80005a6:	f643 0030 	movw	r0, #14384	; 0x3830
 80005aa:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80005ae:	6801      	ldr	r1, [r0, #0]
 80005b0:	f041 0104 	orr.w	r1, r1, #4
 80005b4:	6001      	str	r1, [r0, #0]
 80005b6:	6800      	ldr	r0, [r0, #0]
 80005b8:	f000 0004 	and.w	r0, r0, #4
 80005bc:	9004      	str	r0, [sp, #16]
 80005be:	9804      	ldr	r0, [sp, #16]
 80005c0:	e7ff      	b.n	80005c2 <MX_GPIO_Init+0x5a>
 80005c2:	e7ff      	b.n	80005c4 <MX_GPIO_Init+0x5c>
 80005c4:	2000      	movs	r0, #0
 80005c6:	9003      	str	r0, [sp, #12]
 80005c8:	f643 0030 	movw	r0, #14384	; 0x3830
 80005cc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80005d0:	6801      	ldr	r1, [r0, #0]
 80005d2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80005d6:	6001      	str	r1, [r0, #0]
 80005d8:	6800      	ldr	r0, [r0, #0]
 80005da:	f000 0080 	and.w	r0, r0, #128	; 0x80
 80005de:	9003      	str	r0, [sp, #12]
 80005e0:	9803      	ldr	r0, [sp, #12]
 80005e2:	e7ff      	b.n	80005e4 <MX_GPIO_Init+0x7c>
 80005e4:	e7ff      	b.n	80005e6 <MX_GPIO_Init+0x7e>
 80005e6:	2000      	movs	r0, #0
 80005e8:	9002      	str	r0, [sp, #8]
 80005ea:	f643 0030 	movw	r0, #14384	; 0x3830
 80005ee:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80005f2:	6801      	ldr	r1, [r0, #0]
 80005f4:	f041 0101 	orr.w	r1, r1, #1
 80005f8:	6001      	str	r1, [r0, #0]
 80005fa:	6800      	ldr	r0, [r0, #0]
 80005fc:	f000 0001 	and.w	r0, r0, #1
 8000600:	9002      	str	r0, [sp, #8]
 8000602:	9802      	ldr	r0, [sp, #8]
 8000604:	e7ff      	b.n	8000606 <MX_GPIO_Init+0x9e>
 8000606:	e7ff      	b.n	8000608 <MX_GPIO_Init+0xa0>
 8000608:	2000      	movs	r0, #0
 800060a:	9001      	str	r0, [sp, #4]
 800060c:	f643 0030 	movw	r0, #14384	; 0x3830
 8000610:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000614:	6801      	ldr	r1, [r0, #0]
 8000616:	f041 0102 	orr.w	r1, r1, #2
 800061a:	6001      	str	r1, [r0, #0]
 800061c:	6800      	ldr	r0, [r0, #0]
 800061e:	f000 0002 	and.w	r0, r0, #2
 8000622:	9001      	str	r0, [sp, #4]
 8000624:	9801      	ldr	r0, [sp, #4]
 8000626:	e7ff      	b.n	8000628 <MX_GPIO_Init+0xc0>
 8000628:	e7ff      	b.n	800062a <MX_GPIO_Init+0xc2>
 800062a:	2000      	movs	r0, #0
 800062c:	9000      	str	r0, [sp, #0]
 800062e:	f643 0030 	movw	r0, #14384	; 0x3830
 8000632:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000636:	6801      	ldr	r1, [r0, #0]
 8000638:	f041 0108 	orr.w	r1, r1, #8
 800063c:	6001      	str	r1, [r0, #0]
 800063e:	6800      	ldr	r0, [r0, #0]
 8000640:	f000 0008 	and.w	r0, r0, #8
 8000644:	9000      	str	r0, [sp, #0]
 8000646:	9800      	ldr	r0, [sp, #0]
 8000648:	e7ff      	b.n	800064a <MX_GPIO_Init+0xe2>
 800064a:	f241 0900 	movw	r9, #4096	; 0x1000
 800064e:	f2c4 0902 	movt	r9, #16386	; 0x4002
 8000652:	f04f 0808 	mov.w	r8, #8
 8000656:	2500      	movs	r5, #0
 8000658:	4648      	mov	r0, r9
 800065a:	2108      	movs	r1, #8
 800065c:	2200      	movs	r2, #0
 800065e:	f004 f8dd 	bl	800481c <HAL_GPIO_WritePin>
 8000662:	f640 0400 	movw	r4, #2048	; 0x800
 8000666:	f2c4 0402 	movt	r4, #16386	; 0x4002
 800066a:	f04f 0a01 	mov.w	sl, #1
 800066e:	4620      	mov	r0, r4
 8000670:	2101      	movs	r1, #1
 8000672:	2201      	movs	r2, #1
 8000674:	f004 f8d2 	bl	800481c <HAL_GPIO_WritePin>
 8000678:	f640 4000 	movw	r0, #3072	; 0xc00
 800067c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000680:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000684:	2200      	movs	r2, #0
 8000686:	f004 f8c9 	bl	800481c <HAL_GPIO_WritePin>
 800068a:	f8cd 8018 	str.w	r8, [sp, #24]
 800068e:	f8cd a01c 	str.w	sl, [sp, #28]
 8000692:	9508      	str	r5, [sp, #32]
 8000694:	9509      	str	r5, [sp, #36]	; 0x24
 8000696:	ae06      	add	r6, sp, #24
 8000698:	4648      	mov	r0, r9
 800069a:	4631      	mov	r1, r6
 800069c:	f003 fe26 	bl	80042ec <HAL_GPIO_Init>
 80006a0:	f8cd a018 	str.w	sl, [sp, #24]
 80006a4:	f8cd a01c 	str.w	sl, [sp, #28]
 80006a8:	9508      	str	r5, [sp, #32]
 80006aa:	9509      	str	r5, [sp, #36]	; 0x24
 80006ac:	4620      	mov	r0, r4
 80006ae:	4631      	mov	r1, r6
 80006b0:	f003 fe1c 	bl	80042ec <HAL_GPIO_Init>
 80006b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80006b8:	f04f 0b02 	mov.w	fp, #2
 80006bc:	f8cd b01c 	str.w	fp, [sp, #28]
 80006c0:	9508      	str	r5, [sp, #32]
 80006c2:	9509      	str	r5, [sp, #36]	; 0x24
 80006c4:	f04f 0905 	mov.w	r9, #5
 80006c8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80006cc:	4620      	mov	r0, r4
 80006ce:	4631      	mov	r1, r6
 80006d0:	f003 fe0c 	bl	80042ec <HAL_GPIO_Init>
 80006d4:	f8cd a018 	str.w	sl, [sp, #24]
 80006d8:	f44f 1890 	mov.w	r8, #1179648	; 0x120000
 80006dc:	f8cd 801c 	str.w	r8, [sp, #28]
 80006e0:	9508      	str	r5, [sp, #32]
 80006e2:	2000      	movs	r0, #0
 80006e4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80006e8:	4631      	mov	r1, r6
 80006ea:	f003 fdff 	bl	80042ec <HAL_GPIO_Init>
 80006ee:	2004      	movs	r0, #4
 80006f0:	9006      	str	r0, [sp, #24]
 80006f2:	9507      	str	r5, [sp, #28]
 80006f4:	9508      	str	r5, [sp, #32]
 80006f6:	f240 4400 	movw	r4, #1024	; 0x400
 80006fa:	f2c4 0402 	movt	r4, #16386	; 0x4002
 80006fe:	4620      	mov	r0, r4
 8000700:	4631      	mov	r1, r6
 8000702:	f003 fdf3 	bl	80042ec <HAL_GPIO_Init>
 8000706:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800070a:	9006      	str	r0, [sp, #24]
 800070c:	f8cd b01c 	str.w	fp, [sp, #28]
 8000710:	9508      	str	r5, [sp, #32]
 8000712:	9509      	str	r5, [sp, #36]	; 0x24
 8000714:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8000718:	4620      	mov	r0, r4
 800071a:	4631      	mov	r1, r6
 800071c:	f003 fde6 	bl	80042ec <HAL_GPIO_Init>
 8000720:	f24f 0010 	movw	r0, #61456	; 0xf010
 8000724:	9006      	str	r0, [sp, #24]
 8000726:	f8cd a01c 	str.w	sl, [sp, #28]
 800072a:	9508      	str	r5, [sp, #32]
 800072c:	9509      	str	r5, [sp, #36]	; 0x24
 800072e:	f640 4400 	movw	r4, #3072	; 0xc00
 8000732:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8000736:	4620      	mov	r0, r4
 8000738:	4631      	mov	r1, r6
 800073a:	f003 fdd7 	bl	80042ec <HAL_GPIO_Init>
 800073e:	2020      	movs	r0, #32
 8000740:	9006      	str	r0, [sp, #24]
 8000742:	9507      	str	r5, [sp, #28]
 8000744:	9508      	str	r5, [sp, #32]
 8000746:	4620      	mov	r0, r4
 8000748:	4631      	mov	r1, r6
 800074a:	f003 fdcf 	bl	80042ec <HAL_GPIO_Init>
 800074e:	f8cd b018 	str.w	fp, [sp, #24]
 8000752:	f8cd 801c 	str.w	r8, [sp, #28]
 8000756:	9508      	str	r5, [sp, #32]
 8000758:	f241 0000 	movw	r0, #4096	; 0x1000
 800075c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000760:	4631      	mov	r1, r6
 8000762:	f003 fdc3 	bl	80042ec <HAL_GPIO_Init>
 8000766:	b00b      	add	sp, #44	; 0x2c
 8000768:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
 800076c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000770:	f000 f8bc 	bl	80008ec <MasterBackward>

08000774 <MX_I2C1_Init>:
 8000774:	b580      	push	{r7, lr}
 8000776:	466f      	mov	r7, sp
 8000778:	f240 2090 	movw	r0, #656	; 0x290
 800077c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000780:	f245 4100 	movw	r1, #21504	; 0x5400
 8000784:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000788:	6001      	str	r1, [r0, #0]
 800078a:	f248 61a0 	movw	r1, #34464	; 0x86a0
 800078e:	f2c0 0101 	movt	r1, #1
 8000792:	6041      	str	r1, [r0, #4]
 8000794:	2100      	movs	r1, #0
 8000796:	6081      	str	r1, [r0, #8]
 8000798:	60c1      	str	r1, [r0, #12]
 800079a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800079e:	6102      	str	r2, [r0, #16]
 80007a0:	6141      	str	r1, [r0, #20]
 80007a2:	6181      	str	r1, [r0, #24]
 80007a4:	61c1      	str	r1, [r0, #28]
 80007a6:	6201      	str	r1, [r0, #32]
 80007a8:	f005 fc5c 	bl	8006064 <HAL_I2C_Init>
 80007ac:	b140      	cbz	r0, 80007c0 <MX_I2C1_Init_48_FORPUSH+0x10>
 80007ae:	e7ff      	b.n	80007b0 <MX_I2C1_Init_48_FORPUSH>

080007b0 <MX_I2C1_Init_48_FORPUSH>:
 80007b0:	f240 0e90 	movw	lr, #144	; 0x90
 80007b4:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 80007b8:	b500      	push	{lr}
 80007ba:	f000 f884 	bl	80008c6 <MasterForward>
 80007be:	e7ff      	b.n	80007c0 <MX_I2C1_Init_48_FORPUSH+0x10>
 80007c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007c4:	f000 f892 	bl	80008ec <MasterBackward>

080007c8 <MX_I2S3_Init>:
 80007c8:	b580      	push	{r7, lr}
 80007ca:	466f      	mov	r7, sp
 80007cc:	f240 20ec 	movw	r0, #748	; 0x2ec
 80007d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80007d4:	f643 4100 	movw	r1, #15360	; 0x3c00
 80007d8:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80007dc:	6001      	str	r1, [r0, #0]
 80007de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e2:	6041      	str	r1, [r0, #4]
 80007e4:	2200      	movs	r2, #0
 80007e6:	6082      	str	r2, [r0, #8]
 80007e8:	60c2      	str	r2, [r0, #12]
 80007ea:	6101      	str	r1, [r0, #16]
 80007ec:	f247 7100 	movw	r1, #30464	; 0x7700
 80007f0:	f2c0 0101 	movt	r1, #1
 80007f4:	6141      	str	r1, [r0, #20]
 80007f6:	6182      	str	r2, [r0, #24]
 80007f8:	61c2      	str	r2, [r0, #28]
 80007fa:	6202      	str	r2, [r0, #32]
 80007fc:	f005 fd76 	bl	80062ec <HAL_I2S_Init>
 8000800:	b140      	cbz	r0, 8000814 <MX_I2S3_Init_52_FORPUSH+0x10>
 8000802:	e7ff      	b.n	8000804 <MX_I2S3_Init_52_FORPUSH>

08000804 <MX_I2S3_Init_52_FORPUSH>:
 8000804:	f240 0e9c 	movw	lr, #156	; 0x9c
 8000808:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 800080c:	b500      	push	{lr}
 800080e:	f000 f85a 	bl	80008c6 <MasterForward>
 8000812:	e7ff      	b.n	8000814 <MX_I2S3_Init_52_FORPUSH+0x10>
 8000814:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000818:	f000 f868 	bl	80008ec <MasterBackward>

0800081c <MX_SPI1_Init>:
 800081c:	b580      	push	{r7, lr}
 800081e:	466f      	mov	r7, sp
 8000820:	f240 3038 	movw	r0, #824	; 0x338
 8000824:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000828:	f243 0100 	movw	r1, #12288	; 0x3000
 800082c:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8000830:	6001      	str	r1, [r0, #0]
 8000832:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000836:	6041      	str	r1, [r0, #4]
 8000838:	2100      	movs	r1, #0
 800083a:	6081      	str	r1, [r0, #8]
 800083c:	60c1      	str	r1, [r0, #12]
 800083e:	6101      	str	r1, [r0, #16]
 8000840:	6141      	str	r1, [r0, #20]
 8000842:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000846:	6182      	str	r2, [r0, #24]
 8000848:	61c1      	str	r1, [r0, #28]
 800084a:	6201      	str	r1, [r0, #32]
 800084c:	6241      	str	r1, [r0, #36]	; 0x24
 800084e:	6281      	str	r1, [r0, #40]	; 0x28
 8000850:	210a      	movs	r1, #10
 8000852:	62c1      	str	r1, [r0, #44]	; 0x2c
 8000854:	f006 ffc2 	bl	80077dc <HAL_SPI_Init>
 8000858:	b140      	cbz	r0, 800086c <MX_SPI1_Init_56_FORPUSH+0x10>
 800085a:	e7ff      	b.n	800085c <MX_SPI1_Init_56_FORPUSH>

0800085c <MX_SPI1_Init_56_FORPUSH>:
 800085c:	f240 0ea8 	movw	lr, #168	; 0xa8
 8000860:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 8000864:	b500      	push	{lr}
 8000866:	f000 f82e 	bl	80008c6 <MasterForward>
 800086a:	e7ff      	b.n	800086c <MX_SPI1_Init_56_FORPUSH+0x10>
 800086c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000870:	f000 f83c 	bl	80008ec <MasterBackward>

08000874 <MX_USART2_UART_Init>:
 8000874:	b580      	push	{r7, lr}
 8000876:	466f      	mov	r7, sp
 8000878:	f240 2044 	movw	r0, #580	; 0x244
 800087c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000880:	f244 4100 	movw	r1, #17408	; 0x4400
 8000884:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000888:	6001      	str	r1, [r0, #0]
 800088a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800088e:	6041      	str	r1, [r0, #4]
 8000890:	2100      	movs	r1, #0
 8000892:	6081      	str	r1, [r0, #8]
 8000894:	60c1      	str	r1, [r0, #12]
 8000896:	6101      	str	r1, [r0, #16]
 8000898:	220c      	movs	r2, #12
 800089a:	6142      	str	r2, [r0, #20]
 800089c:	6181      	str	r1, [r0, #24]
 800089e:	61c1      	str	r1, [r0, #28]
 80008a0:	f007 f825 	bl	80078ee <HAL_UART_Init>
 80008a4:	b140      	cbz	r0, 80008b8 <MX_USART2_UART_Init_60_FORPUSH+0x10>
 80008a6:	e7ff      	b.n	80008a8 <MX_USART2_UART_Init_60_FORPUSH>

080008a8 <MX_USART2_UART_Init_60_FORPUSH>:
 80008a8:	f240 0eb4 	movw	lr, #180	; 0xb4
 80008ac:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 80008b0:	b500      	push	{lr}
 80008b2:	f000 f808 	bl	80008c6 <MasterForward>
 80008b6:	e7ff      	b.n	80008b8 <MX_USART2_UART_Init_60_FORPUSH+0x10>
 80008b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008bc:	f000 f816 	bl	80008ec <MasterBackward>

080008c0 <Error_Handler>:
 80008c0:	b672      	cpsid	i
 80008c2:	e7ff      	b.n	80008c4 <Error_Handler+0x4>
 80008c4:	e7fe      	b.n	80008c4 <Error_Handler+0x4>

080008c6 <MasterForward>:
 80008c6:	b40f      	push	{r0, r1, r2, r3}
 80008c8:	9804      	ldr	r0, [sp, #16]
 80008ca:	6801      	ldr	r1, [r0, #0]
 80008cc:	4571      	cmp	r1, lr
 80008ce:	d10c      	bne.n	80008ea <fail>
 80008d0:	490e      	ldr	r1, [pc, #56]	; (800090c <fail_back+0x2>)
 80008d2:	680a      	ldr	r2, [r1, #0]
 80008d4:	6010      	str	r0, [r2, #0]
 80008d6:	f102 0204 	add.w	r2, r2, #4
 80008da:	600a      	str	r2, [r1, #0]
 80008dc:	e8bd 400f 	ldmia.w	sp!, {r0, r1, r2, r3, lr}
 80008e0:	f10e 0e04 	add.w	lr, lr, #4
 80008e4:	f8de e000 	ldr.w	lr, [lr]
 80008e8:	4770      	bx	lr

080008ea <fail>:
 80008ea:	4770      	bx	lr

080008ec <MasterBackward>:
 80008ec:	4907      	ldr	r1, [pc, #28]	; (800090c <fail_back+0x2>)
 80008ee:	680a      	ldr	r2, [r1, #0]
 80008f0:	f1a2 0204 	sub.w	r2, r2, #4
 80008f4:	6813      	ldr	r3, [r2, #0]
 80008f6:	f103 0308 	add.w	r3, r3, #8
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4573      	cmp	r3, lr
 80008fe:	d104      	bne.n	800090a <fail_back>
 8000900:	6813      	ldr	r3, [r2, #0]
 8000902:	f8d3 e000 	ldr.w	lr, [r3]
 8000906:	600a      	str	r2, [r1, #0]
 8000908:	4770      	bx	lr

0800090a <fail_back>:
 800090a:	4770      	bx	lr
 800090c:	20010000 	.word	0x20010000
 8000910:	20010004 	.word	0x20010004

08000914 <HAL_MspInit>:
 8000914:	b580      	push	{r7, lr}
 8000916:	466f      	mov	r7, sp
 8000918:	b082      	sub	sp, #8
 800091a:	e7ff      	b.n	800091c <HAL_MspInit+0x8>
 800091c:	2000      	movs	r0, #0
 800091e:	9001      	str	r0, [sp, #4]
 8000920:	f643 0044 	movw	r0, #14404	; 0x3844
 8000924:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000928:	6801      	ldr	r1, [r0, #0]
 800092a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800092e:	6001      	str	r1, [r0, #0]
 8000930:	6800      	ldr	r0, [r0, #0]
 8000932:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
 8000936:	9001      	str	r0, [sp, #4]
 8000938:	9801      	ldr	r0, [sp, #4]
 800093a:	e7ff      	b.n	800093c <HAL_MspInit+0x28>
 800093c:	e7ff      	b.n	800093e <HAL_MspInit+0x2a>
 800093e:	2000      	movs	r0, #0
 8000940:	9000      	str	r0, [sp, #0]
 8000942:	f643 0040 	movw	r0, #14400	; 0x3840
 8000946:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800094a:	6801      	ldr	r1, [r0, #0]
 800094c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000950:	6001      	str	r1, [r0, #0]
 8000952:	6800      	ldr	r0, [r0, #0]
 8000954:	f000 5080 	and.w	r0, r0, #268435456	; 0x10000000
 8000958:	9000      	str	r0, [sp, #0]
 800095a:	9800      	ldr	r0, [sp, #0]
 800095c:	e7ff      	b.n	800095e <HAL_MspInit+0x4a>
 800095e:	2007      	movs	r0, #7
 8000960:	f003 fc82 	bl	8004268 <HAL_NVIC_SetPriorityGrouping>
 8000964:	b002      	add	sp, #8
 8000966:	bd80      	pop	{r7, pc}

08000968 <HAL_I2C_MspInit>:
 8000968:	b580      	push	{r7, lr}
 800096a:	466f      	mov	r7, sp
 800096c:	b088      	sub	sp, #32
 800096e:	9007      	str	r0, [sp, #28]
 8000970:	2000      	movs	r0, #0
 8000972:	9006      	str	r0, [sp, #24]
 8000974:	9005      	str	r0, [sp, #20]
 8000976:	9004      	str	r0, [sp, #16]
 8000978:	9003      	str	r0, [sp, #12]
 800097a:	9002      	str	r0, [sp, #8]
 800097c:	9807      	ldr	r0, [sp, #28]
 800097e:	6800      	ldr	r0, [r0, #0]
 8000980:	f245 4100 	movw	r1, #21504	; 0x5400
 8000984:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000988:	4288      	cmp	r0, r1
 800098a:	d135      	bne.n	80009f8 <HAL_I2C_MspInit+0x90>
 800098c:	e7ff      	b.n	800098e <HAL_I2C_MspInit+0x26>
 800098e:	e7ff      	b.n	8000990 <HAL_I2C_MspInit+0x28>
 8000990:	2000      	movs	r0, #0
 8000992:	9001      	str	r0, [sp, #4]
 8000994:	f643 0030 	movw	r0, #14384	; 0x3830
 8000998:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800099c:	6801      	ldr	r1, [r0, #0]
 800099e:	f041 0102 	orr.w	r1, r1, #2
 80009a2:	6001      	str	r1, [r0, #0]
 80009a4:	6800      	ldr	r0, [r0, #0]
 80009a6:	f000 0002 	and.w	r0, r0, #2
 80009aa:	9001      	str	r0, [sp, #4]
 80009ac:	9801      	ldr	r0, [sp, #4]
 80009ae:	e7ff      	b.n	80009b0 <HAL_I2C_MspInit+0x48>
 80009b0:	f44f 7010 	mov.w	r0, #576	; 0x240
 80009b4:	9002      	str	r0, [sp, #8]
 80009b6:	2012      	movs	r0, #18
 80009b8:	9003      	str	r0, [sp, #12]
 80009ba:	2001      	movs	r0, #1
 80009bc:	9004      	str	r0, [sp, #16]
 80009be:	2000      	movs	r0, #0
 80009c0:	9005      	str	r0, [sp, #20]
 80009c2:	2004      	movs	r0, #4
 80009c4:	9006      	str	r0, [sp, #24]
 80009c6:	f240 4000 	movw	r0, #1024	; 0x400
 80009ca:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80009ce:	a902      	add	r1, sp, #8
 80009d0:	f003 fc8c 	bl	80042ec <HAL_GPIO_Init>
 80009d4:	e7ff      	b.n	80009d6 <HAL_I2C_MspInit+0x6e>
 80009d6:	2000      	movs	r0, #0
 80009d8:	9000      	str	r0, [sp, #0]
 80009da:	f643 0040 	movw	r0, #14400	; 0x3840
 80009de:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80009e2:	6801      	ldr	r1, [r0, #0]
 80009e4:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 80009e8:	6001      	str	r1, [r0, #0]
 80009ea:	6800      	ldr	r0, [r0, #0]
 80009ec:	f400 1000 	and.w	r0, r0, #2097152	; 0x200000
 80009f0:	9000      	str	r0, [sp, #0]
 80009f2:	9800      	ldr	r0, [sp, #0]
 80009f4:	e7ff      	b.n	80009f6 <HAL_I2C_MspInit+0x8e>
 80009f6:	e7ff      	b.n	80009f8 <HAL_I2C_MspInit+0x90>
 80009f8:	b008      	add	sp, #32
 80009fa:	bd80      	pop	{r7, pc}

080009fc <HAL_I2C_MspDeInit>:
 80009fc:	b5d0      	push	{r4, r6, r7, lr}
 80009fe:	af02      	add	r7, sp, #8
 8000a00:	b082      	sub	sp, #8
 8000a02:	9001      	str	r0, [sp, #4]
 8000a04:	9801      	ldr	r0, [sp, #4]
 8000a06:	6800      	ldr	r0, [r0, #0]
 8000a08:	f245 4100 	movw	r1, #21504	; 0x5400
 8000a0c:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000a10:	4288      	cmp	r0, r1
 8000a12:	d116      	bne.n	8000a42 <HAL_I2C_MspDeInit+0x46>
 8000a14:	e7ff      	b.n	8000a16 <HAL_I2C_MspDeInit+0x1a>
 8000a16:	f643 0040 	movw	r0, #14400	; 0x3840
 8000a1a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000a1e:	6801      	ldr	r1, [r0, #0]
 8000a20:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 8000a24:	6001      	str	r1, [r0, #0]
 8000a26:	f240 4400 	movw	r4, #1024	; 0x400
 8000a2a:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8000a2e:	4620      	mov	r0, r4
 8000a30:	2140      	movs	r1, #64	; 0x40
 8000a32:	f003 fdf7 	bl	8004624 <HAL_GPIO_DeInit>
 8000a36:	4620      	mov	r0, r4
 8000a38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a3c:	f003 fdf2 	bl	8004624 <HAL_GPIO_DeInit>
 8000a40:	e7ff      	b.n	8000a42 <HAL_I2C_MspDeInit+0x46>
 8000a42:	b002      	add	sp, #8
 8000a44:	bdd0      	pop	{r4, r6, r7, pc}
 8000a46:	bf00      	nop

08000a48 <HAL_I2S_MspInit>:
 8000a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a4a:	af03      	add	r7, sp, #12
 8000a4c:	f84d 8d04 	str.w	r8, [sp, #-4]!
 8000a50:	b08e      	sub	sp, #56	; 0x38
 8000a52:	900d      	str	r0, [sp, #52]	; 0x34
 8000a54:	2000      	movs	r0, #0
 8000a56:	900c      	str	r0, [sp, #48]	; 0x30
 8000a58:	900b      	str	r0, [sp, #44]	; 0x2c
 8000a5a:	900a      	str	r0, [sp, #40]	; 0x28
 8000a5c:	9009      	str	r0, [sp, #36]	; 0x24
 8000a5e:	9008      	str	r0, [sp, #32]
 8000a60:	9007      	str	r0, [sp, #28]
 8000a62:	9006      	str	r0, [sp, #24]
 8000a64:	9005      	str	r0, [sp, #20]
 8000a66:	9004      	str	r0, [sp, #16]
 8000a68:	980d      	ldr	r0, [sp, #52]	; 0x34
 8000a6a:	6800      	ldr	r0, [r0, #0]
 8000a6c:	f643 4100 	movw	r1, #15360	; 0x3c00
 8000a70:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000a74:	4288      	cmp	r0, r1
 8000a76:	d163      	bne.n	8000b40 <HAL_I2S_MspInit+0xf8>
 8000a78:	e7ff      	b.n	8000a7a <HAL_I2S_MspInit+0x32>
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	9004      	str	r0, [sp, #16]
 8000a7e:	20c0      	movs	r0, #192	; 0xc0
 8000a80:	9005      	str	r0, [sp, #20]
 8000a82:	2002      	movs	r0, #2
 8000a84:	9006      	str	r0, [sp, #24]
 8000a86:	a804      	add	r0, sp, #16
 8000a88:	f006 fd68 	bl	800755c <HAL_RCCEx_PeriphCLKConfig>
 8000a8c:	b118      	cbz	r0, 8000a96 <HAL_I2S_MspInit+0x4e>
 8000a8e:	e7ff      	b.n	8000a90 <HAL_I2S_MspInit+0x48>
 8000a90:	f7ff ff16 	bl	80008c0 <Error_Handler>
 8000a94:	e7ff      	b.n	8000a96 <HAL_I2S_MspInit+0x4e>
 8000a96:	e7ff      	b.n	8000a98 <HAL_I2S_MspInit+0x50>
 8000a98:	2000      	movs	r0, #0
 8000a9a:	9003      	str	r0, [sp, #12]
 8000a9c:	f643 0040 	movw	r0, #14400	; 0x3840
 8000aa0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000aa4:	6801      	ldr	r1, [r0, #0]
 8000aa6:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8000aaa:	6001      	str	r1, [r0, #0]
 8000aac:	6800      	ldr	r0, [r0, #0]
 8000aae:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
 8000ab2:	9003      	str	r0, [sp, #12]
 8000ab4:	9803      	ldr	r0, [sp, #12]
 8000ab6:	e7ff      	b.n	8000ab8 <HAL_I2S_MspInit+0x70>
 8000ab8:	e7ff      	b.n	8000aba <HAL_I2S_MspInit+0x72>
 8000aba:	2000      	movs	r0, #0
 8000abc:	9002      	str	r0, [sp, #8]
 8000abe:	f643 0030 	movw	r0, #14384	; 0x3830
 8000ac2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000ac6:	6801      	ldr	r1, [r0, #0]
 8000ac8:	f041 0101 	orr.w	r1, r1, #1
 8000acc:	6001      	str	r1, [r0, #0]
 8000ace:	6800      	ldr	r0, [r0, #0]
 8000ad0:	f000 0001 	and.w	r0, r0, #1
 8000ad4:	9002      	str	r0, [sp, #8]
 8000ad6:	9802      	ldr	r0, [sp, #8]
 8000ad8:	e7ff      	b.n	8000ada <HAL_I2S_MspInit+0x92>
 8000ada:	e7ff      	b.n	8000adc <HAL_I2S_MspInit+0x94>
 8000adc:	2000      	movs	r0, #0
 8000ade:	9001      	str	r0, [sp, #4]
 8000ae0:	f643 0030 	movw	r0, #14384	; 0x3830
 8000ae4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000ae8:	6801      	ldr	r1, [r0, #0]
 8000aea:	f041 0104 	orr.w	r1, r1, #4
 8000aee:	6001      	str	r1, [r0, #0]
 8000af0:	6800      	ldr	r0, [r0, #0]
 8000af2:	f000 0004 	and.w	r0, r0, #4
 8000af6:	9001      	str	r0, [sp, #4]
 8000af8:	9801      	ldr	r0, [sp, #4]
 8000afa:	e7ff      	b.n	8000afc <HAL_I2S_MspInit+0xb4>
 8000afc:	2010      	movs	r0, #16
 8000afe:	9008      	str	r0, [sp, #32]
 8000b00:	f04f 0802 	mov.w	r8, #2
 8000b04:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8000b08:	2600      	movs	r6, #0
 8000b0a:	960a      	str	r6, [sp, #40]	; 0x28
 8000b0c:	960b      	str	r6, [sp, #44]	; 0x2c
 8000b0e:	2506      	movs	r5, #6
 8000b10:	950c      	str	r5, [sp, #48]	; 0x30
 8000b12:	2000      	movs	r0, #0
 8000b14:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000b18:	ac08      	add	r4, sp, #32
 8000b1a:	4621      	mov	r1, r4
 8000b1c:	f003 fbe6 	bl	80042ec <HAL_GPIO_Init>
 8000b20:	f44f 50a4 	mov.w	r0, #5248	; 0x1480
 8000b24:	9008      	str	r0, [sp, #32]
 8000b26:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8000b2a:	960a      	str	r6, [sp, #40]	; 0x28
 8000b2c:	960b      	str	r6, [sp, #44]	; 0x2c
 8000b2e:	950c      	str	r5, [sp, #48]	; 0x30
 8000b30:	f640 0000 	movw	r0, #2048	; 0x800
 8000b34:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000b38:	4621      	mov	r1, r4
 8000b3a:	f003 fbd7 	bl	80042ec <HAL_GPIO_Init>
 8000b3e:	e7ff      	b.n	8000b40 <HAL_I2S_MspInit+0xf8>
 8000b40:	b00e      	add	sp, #56	; 0x38
 8000b42:	f85d 8b04 	ldr.w	r8, [sp], #4
 8000b46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000b48 <HAL_I2S_MspDeInit>:
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	466f      	mov	r7, sp
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	9001      	str	r0, [sp, #4]
 8000b50:	9801      	ldr	r0, [sp, #4]
 8000b52:	6800      	ldr	r0, [r0, #0]
 8000b54:	f643 4100 	movw	r1, #15360	; 0x3c00
 8000b58:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000b5c:	4288      	cmp	r0, r1
 8000b5e:	d117      	bne.n	8000b90 <HAL_I2S_MspDeInit+0x48>
 8000b60:	e7ff      	b.n	8000b62 <HAL_I2S_MspDeInit+0x1a>
 8000b62:	f643 0040 	movw	r0, #14400	; 0x3840
 8000b66:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000b6a:	6801      	ldr	r1, [r0, #0]
 8000b6c:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8000b70:	6001      	str	r1, [r0, #0]
 8000b72:	2000      	movs	r0, #0
 8000b74:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000b78:	2110      	movs	r1, #16
 8000b7a:	f003 fd53 	bl	8004624 <HAL_GPIO_DeInit>
 8000b7e:	f640 0000 	movw	r0, #2048	; 0x800
 8000b82:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000b86:	f44f 51a4 	mov.w	r1, #5248	; 0x1480
 8000b8a:	f003 fd4b 	bl	8004624 <HAL_GPIO_DeInit>
 8000b8e:	e7ff      	b.n	8000b90 <HAL_I2S_MspDeInit+0x48>
 8000b90:	b002      	add	sp, #8
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <HAL_SPI_MspInit>:
 8000b94:	b580      	push	{r7, lr}
 8000b96:	466f      	mov	r7, sp
 8000b98:	b088      	sub	sp, #32
 8000b9a:	9007      	str	r0, [sp, #28]
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	9006      	str	r0, [sp, #24]
 8000ba0:	9005      	str	r0, [sp, #20]
 8000ba2:	9004      	str	r0, [sp, #16]
 8000ba4:	9003      	str	r0, [sp, #12]
 8000ba6:	9002      	str	r0, [sp, #8]
 8000ba8:	9807      	ldr	r0, [sp, #28]
 8000baa:	6800      	ldr	r0, [r0, #0]
 8000bac:	f243 0100 	movw	r1, #12288	; 0x3000
 8000bb0:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8000bb4:	4288      	cmp	r0, r1
 8000bb6:	d132      	bne.n	8000c1e <HAL_SPI_MspInit+0x8a>
 8000bb8:	e7ff      	b.n	8000bba <HAL_SPI_MspInit+0x26>
 8000bba:	e7ff      	b.n	8000bbc <HAL_SPI_MspInit+0x28>
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	9001      	str	r0, [sp, #4]
 8000bc0:	f643 0044 	movw	r0, #14404	; 0x3844
 8000bc4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000bc8:	6801      	ldr	r1, [r0, #0]
 8000bca:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8000bce:	6001      	str	r1, [r0, #0]
 8000bd0:	6800      	ldr	r0, [r0, #0]
 8000bd2:	f400 5080 	and.w	r0, r0, #4096	; 0x1000
 8000bd6:	9001      	str	r0, [sp, #4]
 8000bd8:	9801      	ldr	r0, [sp, #4]
 8000bda:	e7ff      	b.n	8000bdc <HAL_SPI_MspInit+0x48>
 8000bdc:	e7ff      	b.n	8000bde <HAL_SPI_MspInit+0x4a>
 8000bde:	2000      	movs	r0, #0
 8000be0:	9000      	str	r0, [sp, #0]
 8000be2:	f643 0030 	movw	r0, #14384	; 0x3830
 8000be6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000bea:	6801      	ldr	r1, [r0, #0]
 8000bec:	f041 0101 	orr.w	r1, r1, #1
 8000bf0:	6001      	str	r1, [r0, #0]
 8000bf2:	6800      	ldr	r0, [r0, #0]
 8000bf4:	f000 0001 	and.w	r0, r0, #1
 8000bf8:	9000      	str	r0, [sp, #0]
 8000bfa:	9800      	ldr	r0, [sp, #0]
 8000bfc:	e7ff      	b.n	8000bfe <HAL_SPI_MspInit+0x6a>
 8000bfe:	20e0      	movs	r0, #224	; 0xe0
 8000c00:	9002      	str	r0, [sp, #8]
 8000c02:	2002      	movs	r0, #2
 8000c04:	9003      	str	r0, [sp, #12]
 8000c06:	2000      	movs	r0, #0
 8000c08:	9004      	str	r0, [sp, #16]
 8000c0a:	9005      	str	r0, [sp, #20]
 8000c0c:	2005      	movs	r0, #5
 8000c0e:	9006      	str	r0, [sp, #24]
 8000c10:	2000      	movs	r0, #0
 8000c12:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000c16:	a902      	add	r1, sp, #8
 8000c18:	f003 fb68 	bl	80042ec <HAL_GPIO_Init>
 8000c1c:	e7ff      	b.n	8000c1e <HAL_SPI_MspInit+0x8a>
 8000c1e:	b008      	add	sp, #32
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop

08000c24 <HAL_SPI_MspDeInit>:
 8000c24:	b580      	push	{r7, lr}
 8000c26:	466f      	mov	r7, sp
 8000c28:	b082      	sub	sp, #8
 8000c2a:	9001      	str	r0, [sp, #4]
 8000c2c:	9801      	ldr	r0, [sp, #4]
 8000c2e:	6800      	ldr	r0, [r0, #0]
 8000c30:	f243 0100 	movw	r1, #12288	; 0x3000
 8000c34:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	d10f      	bne.n	8000c5c <HAL_SPI_MspDeInit+0x38>
 8000c3c:	e7ff      	b.n	8000c3e <HAL_SPI_MspDeInit+0x1a>
 8000c3e:	f643 0044 	movw	r0, #14404	; 0x3844
 8000c42:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000c46:	6801      	ldr	r1, [r0, #0]
 8000c48:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8000c4c:	6001      	str	r1, [r0, #0]
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000c54:	21e0      	movs	r1, #224	; 0xe0
 8000c56:	f003 fce5 	bl	8004624 <HAL_GPIO_DeInit>
 8000c5a:	e7ff      	b.n	8000c5c <HAL_SPI_MspDeInit+0x38>
 8000c5c:	b002      	add	sp, #8
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <HAL_UART_MspInit>:
 8000c60:	b580      	push	{r7, lr}
 8000c62:	466f      	mov	r7, sp
 8000c64:	b088      	sub	sp, #32
 8000c66:	9007      	str	r0, [sp, #28]
 8000c68:	2000      	movs	r0, #0
 8000c6a:	9006      	str	r0, [sp, #24]
 8000c6c:	9005      	str	r0, [sp, #20]
 8000c6e:	9004      	str	r0, [sp, #16]
 8000c70:	9003      	str	r0, [sp, #12]
 8000c72:	9002      	str	r0, [sp, #8]
 8000c74:	9807      	ldr	r0, [sp, #28]
 8000c76:	6800      	ldr	r0, [r0, #0]
 8000c78:	f244 4100 	movw	r1, #17408	; 0x4400
 8000c7c:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000c80:	4288      	cmp	r0, r1
 8000c82:	d133      	bne.n	8000cec <HAL_UART_MspInit+0x8c>
 8000c84:	e7ff      	b.n	8000c86 <HAL_UART_MspInit+0x26>
 8000c86:	e7ff      	b.n	8000c88 <HAL_UART_MspInit+0x28>
 8000c88:	2000      	movs	r0, #0
 8000c8a:	9001      	str	r0, [sp, #4]
 8000c8c:	f643 0040 	movw	r0, #14400	; 0x3840
 8000c90:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000c94:	6801      	ldr	r1, [r0, #0]
 8000c96:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8000c9a:	6001      	str	r1, [r0, #0]
 8000c9c:	6800      	ldr	r0, [r0, #0]
 8000c9e:	f400 3000 	and.w	r0, r0, #131072	; 0x20000
 8000ca2:	9001      	str	r0, [sp, #4]
 8000ca4:	9801      	ldr	r0, [sp, #4]
 8000ca6:	e7ff      	b.n	8000ca8 <HAL_UART_MspInit+0x48>
 8000ca8:	e7ff      	b.n	8000caa <HAL_UART_MspInit+0x4a>
 8000caa:	2000      	movs	r0, #0
 8000cac:	9000      	str	r0, [sp, #0]
 8000cae:	f643 0030 	movw	r0, #14384	; 0x3830
 8000cb2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000cb6:	6801      	ldr	r1, [r0, #0]
 8000cb8:	f041 0101 	orr.w	r1, r1, #1
 8000cbc:	6001      	str	r1, [r0, #0]
 8000cbe:	6800      	ldr	r0, [r0, #0]
 8000cc0:	f000 0001 	and.w	r0, r0, #1
 8000cc4:	9000      	str	r0, [sp, #0]
 8000cc6:	9800      	ldr	r0, [sp, #0]
 8000cc8:	e7ff      	b.n	8000cca <HAL_UART_MspInit+0x6a>
 8000cca:	200c      	movs	r0, #12
 8000ccc:	9002      	str	r0, [sp, #8]
 8000cce:	2002      	movs	r0, #2
 8000cd0:	9003      	str	r0, [sp, #12]
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	9004      	str	r0, [sp, #16]
 8000cd6:	2003      	movs	r0, #3
 8000cd8:	9005      	str	r0, [sp, #20]
 8000cda:	2007      	movs	r0, #7
 8000cdc:	9006      	str	r0, [sp, #24]
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000ce4:	a902      	add	r1, sp, #8
 8000ce6:	f003 fb01 	bl	80042ec <HAL_GPIO_Init>
 8000cea:	e7ff      	b.n	8000cec <HAL_UART_MspInit+0x8c>
 8000cec:	b008      	add	sp, #32
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <HAL_UART_MspDeInit>:
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	466f      	mov	r7, sp
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	9001      	str	r0, [sp, #4]
 8000cf8:	9801      	ldr	r0, [sp, #4]
 8000cfa:	6800      	ldr	r0, [r0, #0]
 8000cfc:	f244 4100 	movw	r1, #17408	; 0x4400
 8000d00:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000d04:	4288      	cmp	r0, r1
 8000d06:	d10f      	bne.n	8000d28 <HAL_UART_MspDeInit+0x38>
 8000d08:	e7ff      	b.n	8000d0a <HAL_UART_MspDeInit+0x1a>
 8000d0a:	f643 0040 	movw	r0, #14400	; 0x3840
 8000d0e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000d12:	6801      	ldr	r1, [r0, #0]
 8000d14:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
 8000d18:	6001      	str	r1, [r0, #0]
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000d20:	210c      	movs	r1, #12
 8000d22:	f003 fc7f 	bl	8004624 <HAL_GPIO_DeInit>
 8000d26:	e7ff      	b.n	8000d28 <HAL_UART_MspDeInit+0x38>
 8000d28:	b002      	add	sp, #8
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <NMI_Handler>:
 8000d2c:	e7ff      	b.n	8000d2e <NMI_Handler+0x2>
 8000d2e:	e7fe      	b.n	8000d2e <NMI_Handler+0x2>

08000d30 <HardFault_Handler>:
 8000d30:	e7ff      	b.n	8000d32 <HardFault_Handler+0x2>
 8000d32:	e7fe      	b.n	8000d32 <HardFault_Handler+0x2>

08000d34 <MemManage_Handler>:
 8000d34:	e7ff      	b.n	8000d36 <MemManage_Handler+0x2>
 8000d36:	e7fe      	b.n	8000d36 <MemManage_Handler+0x2>

08000d38 <BusFault_Handler>:
 8000d38:	e7ff      	b.n	8000d3a <BusFault_Handler+0x2>
 8000d3a:	e7fe      	b.n	8000d3a <BusFault_Handler+0x2>

08000d3c <UsageFault_Handler>:
 8000d3c:	e7ff      	b.n	8000d3e <UsageFault_Handler+0x2>
 8000d3e:	e7fe      	b.n	8000d3e <UsageFault_Handler+0x2>

08000d40 <SVC_Handler>:
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <DebugMon_Handler>:
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <PendSV_Handler>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <SysTick_Handler>:
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	466f      	mov	r7, sp
 8000d50:	f003 f976 	bl	8004040 <HAL_IncTick>
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop

08000d58 <OTG_FS_IRQHandler>:
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	466f      	mov	r7, sp
 8000d5c:	f240 7088 	movw	r0, #1928	; 0x788
 8000d60:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000d64:	f003 ffde 	bl	8004d24 <HAL_HCD_IRQHandler>
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop

08000d6c <initialise_monitor_handles>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <_getpid>:
 8000d70:	2001      	movs	r0, #1
 8000d72:	4770      	bx	lr

08000d74 <_kill>:
 8000d74:	b580      	push	{r7, lr}
 8000d76:	466f      	mov	r7, sp
 8000d78:	b082      	sub	sp, #8
 8000d7a:	9001      	str	r0, [sp, #4]
 8000d7c:	9100      	str	r1, [sp, #0]
 8000d7e:	f000 f9f7 	bl	8001170 <__errno>
 8000d82:	2116      	movs	r1, #22
 8000d84:	6001      	str	r1, [r0, #0]
 8000d86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d8a:	b002      	add	sp, #8
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop

08000d90 <_exit>:
 8000d90:	b580      	push	{r7, lr}
 8000d92:	466f      	mov	r7, sp
 8000d94:	b082      	sub	sp, #8
 8000d96:	9001      	str	r0, [sp, #4]
 8000d98:	9801      	ldr	r0, [sp, #4]
 8000d9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d9e:	f7ff ffe9 	bl	8000d74 <_kill>
 8000da2:	e7ff      	b.n	8000da4 <_exit+0x14>
 8000da4:	e7fe      	b.n	8000da4 <_exit+0x14>
 8000da6:	bf00      	nop

08000da8 <_read>:
 8000da8:	b580      	push	{r7, lr}
 8000daa:	466f      	mov	r7, sp
 8000dac:	b084      	sub	sp, #16
 8000dae:	9003      	str	r0, [sp, #12]
 8000db0:	9102      	str	r1, [sp, #8]
 8000db2:	9201      	str	r2, [sp, #4]
 8000db4:	2000      	movs	r0, #0
 8000db6:	9000      	str	r0, [sp, #0]
 8000db8:	e7ff      	b.n	8000dba <_read+0x12>
 8000dba:	9800      	ldr	r0, [sp, #0]
 8000dbc:	9901      	ldr	r1, [sp, #4]
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	da0b      	bge.n	8000dda <_read+0x32>
 8000dc2:	e7ff      	b.n	8000dc4 <_read+0x1c>
 8000dc4:	f3af 8000 	nop.w
 8000dc8:	9902      	ldr	r1, [sp, #8]
 8000dca:	1c4a      	adds	r2, r1, #1
 8000dcc:	9202      	str	r2, [sp, #8]
 8000dce:	7008      	strb	r0, [r1, #0]
 8000dd0:	e7ff      	b.n	8000dd2 <_read+0x2a>
 8000dd2:	9800      	ldr	r0, [sp, #0]
 8000dd4:	3001      	adds	r0, #1
 8000dd6:	9000      	str	r0, [sp, #0]
 8000dd8:	e7ef      	b.n	8000dba <_read+0x12>
 8000dda:	9801      	ldr	r0, [sp, #4]
 8000ddc:	b004      	add	sp, #16
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <_write>:
 8000de0:	b580      	push	{r7, lr}
 8000de2:	466f      	mov	r7, sp
 8000de4:	b084      	sub	sp, #16
 8000de6:	9003      	str	r0, [sp, #12]
 8000de8:	9102      	str	r1, [sp, #8]
 8000dea:	9201      	str	r2, [sp, #4]
 8000dec:	2000      	movs	r0, #0
 8000dee:	9000      	str	r0, [sp, #0]
 8000df0:	e7ff      	b.n	8000df2 <_write+0x12>
 8000df2:	9800      	ldr	r0, [sp, #0]
 8000df4:	9901      	ldr	r1, [sp, #4]
 8000df6:	4288      	cmp	r0, r1
 8000df8:	da0b      	bge.n	8000e12 <_write+0x32>
 8000dfa:	e7ff      	b.n	8000dfc <_write+0x1c>
 8000dfc:	9802      	ldr	r0, [sp, #8]
 8000dfe:	1c41      	adds	r1, r0, #1
 8000e00:	9102      	str	r1, [sp, #8]
 8000e02:	7800      	ldrb	r0, [r0, #0]
 8000e04:	f7ff fabc 	bl	8000380 <__io_putchar>
 8000e08:	e7ff      	b.n	8000e0a <_write+0x2a>
 8000e0a:	9800      	ldr	r0, [sp, #0]
 8000e0c:	3001      	adds	r0, #1
 8000e0e:	9000      	str	r0, [sp, #0]
 8000e10:	e7ef      	b.n	8000df2 <_write+0x12>
 8000e12:	9801      	ldr	r0, [sp, #4]
 8000e14:	b004      	add	sp, #16
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <_close>:
 8000e18:	b081      	sub	sp, #4
 8000e1a:	9000      	str	r0, [sp, #0]
 8000e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e20:	b001      	add	sp, #4
 8000e22:	4770      	bx	lr

08000e24 <_fstat>:
 8000e24:	b082      	sub	sp, #8
 8000e26:	9001      	str	r0, [sp, #4]
 8000e28:	9100      	str	r1, [sp, #0]
 8000e2a:	9800      	ldr	r0, [sp, #0]
 8000e2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e30:	6041      	str	r1, [r0, #4]
 8000e32:	2000      	movs	r0, #0
 8000e34:	b002      	add	sp, #8
 8000e36:	4770      	bx	lr

08000e38 <_isatty>:
 8000e38:	b081      	sub	sp, #4
 8000e3a:	9000      	str	r0, [sp, #0]
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	b001      	add	sp, #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop

08000e44 <_lseek>:
 8000e44:	b083      	sub	sp, #12
 8000e46:	9002      	str	r0, [sp, #8]
 8000e48:	9101      	str	r1, [sp, #4]
 8000e4a:	9200      	str	r2, [sp, #0]
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	b003      	add	sp, #12
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <_open>:
 8000e54:	b082      	sub	sp, #8
 8000e56:	9001      	str	r0, [sp, #4]
 8000e58:	9100      	str	r1, [sp, #0]
 8000e5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e5e:	b002      	add	sp, #8
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <_wait>:
 8000e64:	b580      	push	{r7, lr}
 8000e66:	466f      	mov	r7, sp
 8000e68:	b082      	sub	sp, #8
 8000e6a:	9001      	str	r0, [sp, #4]
 8000e6c:	f000 f980 	bl	8001170 <__errno>
 8000e70:	210a      	movs	r1, #10
 8000e72:	6001      	str	r1, [r0, #0]
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e78:	b002      	add	sp, #8
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <_unlink>:
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	466f      	mov	r7, sp
 8000e80:	b082      	sub	sp, #8
 8000e82:	9001      	str	r0, [sp, #4]
 8000e84:	f000 f974 	bl	8001170 <__errno>
 8000e88:	2102      	movs	r1, #2
 8000e8a:	6001      	str	r1, [r0, #0]
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e90:	b002      	add	sp, #8
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <_times>:
 8000e94:	b081      	sub	sp, #4
 8000e96:	9000      	str	r0, [sp, #0]
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e9c:	b001      	add	sp, #4
 8000e9e:	4770      	bx	lr

08000ea0 <_stat>:
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	9001      	str	r0, [sp, #4]
 8000ea4:	9100      	str	r1, [sp, #0]
 8000ea6:	9800      	ldr	r0, [sp, #0]
 8000ea8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eac:	6041      	str	r1, [r0, #4]
 8000eae:	2000      	movs	r0, #0
 8000eb0:	b002      	add	sp, #8
 8000eb2:	4770      	bx	lr

08000eb4 <_link>:
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	466f      	mov	r7, sp
 8000eb8:	b082      	sub	sp, #8
 8000eba:	9001      	str	r0, [sp, #4]
 8000ebc:	9100      	str	r1, [sp, #0]
 8000ebe:	f000 f957 	bl	8001170 <__errno>
 8000ec2:	211f      	movs	r1, #31
 8000ec4:	6001      	str	r1, [r0, #0]
 8000ec6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eca:	b002      	add	sp, #8
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop

08000ed0 <_fork>:
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	466f      	mov	r7, sp
 8000ed4:	f000 f94c 	bl	8001170 <__errno>
 8000ed8:	210b      	movs	r1, #11
 8000eda:	6001      	str	r1, [r0, #0]
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop

08000ee4 <_execve>:
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	466f      	mov	r7, sp
 8000ee8:	b084      	sub	sp, #16
 8000eea:	9003      	str	r0, [sp, #12]
 8000eec:	9102      	str	r1, [sp, #8]
 8000eee:	9201      	str	r2, [sp, #4]
 8000ef0:	f000 f93e 	bl	8001170 <__errno>
 8000ef4:	210c      	movs	r1, #12
 8000ef6:	6001      	str	r1, [r0, #0]
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000efc:	b004      	add	sp, #16
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <_sbrk>:
 8000f00:	b580      	push	{r7, lr}
 8000f02:	466f      	mov	r7, sp
 8000f04:	b086      	sub	sp, #24
 8000f06:	9004      	str	r0, [sp, #16]
 8000f08:	f240 4000 	movw	r0, #1024	; 0x400
 8000f0c:	f2c0 0000 	movt	r0, #0
 8000f10:	f240 0100 	movw	r1, #0
 8000f14:	f2c2 0102 	movt	r1, #8194	; 0x2002
 8000f18:	1a08      	subs	r0, r1, r0
 8000f1a:	9003      	str	r0, [sp, #12]
 8000f1c:	9803      	ldr	r0, [sp, #12]
 8000f1e:	9002      	str	r0, [sp, #8]
 8000f20:	f240 3098 	movw	r0, #920	; 0x398
 8000f24:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000f28:	6800      	ldr	r0, [r0, #0]
 8000f2a:	b950      	cbnz	r0, 8000f42 <_sbrk+0x42>
 8000f2c:	e7ff      	b.n	8000f2e <_sbrk+0x2e>
 8000f2e:	f240 3098 	movw	r0, #920	; 0x398
 8000f32:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000f36:	f640 2190 	movw	r1, #2704	; 0xa90
 8000f3a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000f3e:	6001      	str	r1, [r0, #0]
 8000f40:	e7ff      	b.n	8000f42 <_sbrk+0x42>
 8000f42:	f240 3098 	movw	r0, #920	; 0x398
 8000f46:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000f4a:	6800      	ldr	r0, [r0, #0]
 8000f4c:	9904      	ldr	r1, [sp, #16]
 8000f4e:	4408      	add	r0, r1
 8000f50:	9902      	ldr	r1, [sp, #8]
 8000f52:	4288      	cmp	r0, r1
 8000f54:	d908      	bls.n	8000f68 <_sbrk+0x68>
 8000f56:	e7ff      	b.n	8000f58 <_sbrk+0x58>
 8000f58:	f000 f90a 	bl	8001170 <__errno>
 8000f5c:	210c      	movs	r1, #12
 8000f5e:	6001      	str	r1, [r0, #0]
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f64:	9005      	str	r0, [sp, #20]
 8000f66:	e00c      	b.n	8000f82 <_sbrk+0x82>
 8000f68:	f240 3098 	movw	r0, #920	; 0x398
 8000f6c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000f70:	6801      	ldr	r1, [r0, #0]
 8000f72:	9101      	str	r1, [sp, #4]
 8000f74:	9904      	ldr	r1, [sp, #16]
 8000f76:	6802      	ldr	r2, [r0, #0]
 8000f78:	4411      	add	r1, r2
 8000f7a:	6001      	str	r1, [r0, #0]
 8000f7c:	9801      	ldr	r0, [sp, #4]
 8000f7e:	9005      	str	r0, [sp, #20]
 8000f80:	e7ff      	b.n	8000f82 <_sbrk+0x82>
 8000f82:	9805      	ldr	r0, [sp, #20]
 8000f84:	b006      	add	sp, #24
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <SystemInit>:
 8000f88:	f64e 5088 	movw	r0, #60808	; 0xed88
 8000f8c:	f2ce 0000 	movt	r0, #57344	; 0xe000
 8000f90:	6801      	ldr	r1, [r0, #0]
 8000f92:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000f96:	6001      	str	r1, [r0, #0]
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <SystemCoreClockUpdate>:
 8000f9c:	b085      	sub	sp, #20
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	9004      	str	r0, [sp, #16]
 8000fa2:	9003      	str	r0, [sp, #12]
 8000fa4:	2102      	movs	r1, #2
 8000fa6:	9102      	str	r1, [sp, #8]
 8000fa8:	9001      	str	r0, [sp, #4]
 8000faa:	9100      	str	r1, [sp, #0]
 8000fac:	f643 0008 	movw	r0, #14344	; 0x3808
 8000fb0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000fb4:	6800      	ldr	r0, [r0, #0]
 8000fb6:	f000 000c 	and.w	r0, r0, #12
 8000fba:	9004      	str	r0, [sp, #16]
 8000fbc:	9804      	ldr	r0, [sp, #16]
 8000fbe:	b130      	cbz	r0, 8000fce <SystemCoreClockUpdate+0x32>
 8000fc0:	e7ff      	b.n	8000fc2 <SystemCoreClockUpdate+0x26>
 8000fc2:	2804      	cmp	r0, #4
 8000fc4:	d00d      	beq.n	8000fe2 <SystemCoreClockUpdate+0x46>
 8000fc6:	e7ff      	b.n	8000fc8 <SystemCoreClockUpdate+0x2c>
 8000fc8:	2808      	cmp	r0, #8
 8000fca:	d014      	beq.n	8000ff6 <SystemCoreClockUpdate+0x5a>
 8000fcc:	e059      	b.n	8001082 <SystemCoreClockUpdate+0xe6>
 8000fce:	f240 0000 	movw	r0, #0
 8000fd2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000fd6:	f242 4100 	movw	r1, #9216	; 0x2400
 8000fda:	f2c0 01f4 	movt	r1, #244	; 0xf4
 8000fde:	6001      	str	r1, [r0, #0]
 8000fe0:	e059      	b.n	8001096 <SystemCoreClockUpdate+0xfa>
 8000fe2:	f240 0000 	movw	r0, #0
 8000fe6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000fea:	f241 2100 	movw	r1, #4608	; 0x1200
 8000fee:	f2c0 017a 	movt	r1, #122	; 0x7a
 8000ff2:	6001      	str	r1, [r0, #0]
 8000ff4:	e04f      	b.n	8001096 <SystemCoreClockUpdate+0xfa>
 8000ff6:	f643 0004 	movw	r0, #14340	; 0x3804
 8000ffa:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000ffe:	6801      	ldr	r1, [r0, #0]
 8001000:	f3c1 5180 	ubfx	r1, r1, #22, #1
 8001004:	9101      	str	r1, [sp, #4]
 8001006:	6800      	ldr	r0, [r0, #0]
 8001008:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800100c:	9000      	str	r0, [sp, #0]
 800100e:	9801      	ldr	r0, [sp, #4]
 8001010:	b188      	cbz	r0, 8001036 <SystemCoreClockUpdate+0x9a>
 8001012:	e7ff      	b.n	8001014 <SystemCoreClockUpdate+0x78>
 8001014:	9800      	ldr	r0, [sp, #0]
 8001016:	f241 2100 	movw	r1, #4608	; 0x1200
 800101a:	f2c0 017a 	movt	r1, #122	; 0x7a
 800101e:	fbb1 f0f0 	udiv	r0, r1, r0
 8001022:	f643 0104 	movw	r1, #14340	; 0x3804
 8001026:	f2c4 0102 	movt	r1, #16386	; 0x4002
 800102a:	6809      	ldr	r1, [r1, #0]
 800102c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001030:	4348      	muls	r0, r1
 8001032:	9003      	str	r0, [sp, #12]
 8001034:	e010      	b.n	8001058 <SystemCoreClockUpdate+0xbc>
 8001036:	9800      	ldr	r0, [sp, #0]
 8001038:	f242 4100 	movw	r1, #9216	; 0x2400
 800103c:	f2c0 01f4 	movt	r1, #244	; 0xf4
 8001040:	fbb1 f0f0 	udiv	r0, r1, r0
 8001044:	f643 0104 	movw	r1, #14340	; 0x3804
 8001048:	f2c4 0102 	movt	r1, #16386	; 0x4002
 800104c:	6809      	ldr	r1, [r1, #0]
 800104e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001052:	4348      	muls	r0, r1
 8001054:	9003      	str	r0, [sp, #12]
 8001056:	e7ff      	b.n	8001058 <SystemCoreClockUpdate+0xbc>
 8001058:	f643 0004 	movw	r0, #14340	; 0x3804
 800105c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001060:	6800      	ldr	r0, [r0, #0]
 8001062:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001066:	2102      	movs	r1, #2
 8001068:	eb01 30d0 	add.w	r0, r1, r0, lsr #15
 800106c:	9002      	str	r0, [sp, #8]
 800106e:	9803      	ldr	r0, [sp, #12]
 8001070:	9902      	ldr	r1, [sp, #8]
 8001072:	fbb0 f0f1 	udiv	r0, r0, r1
 8001076:	f240 0100 	movw	r1, #0
 800107a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800107e:	6008      	str	r0, [r1, #0]
 8001080:	e009      	b.n	8001096 <SystemCoreClockUpdate+0xfa>
 8001082:	f240 0000 	movw	r0, #0
 8001086:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800108a:	f242 4100 	movw	r1, #9216	; 0x2400
 800108e:	f2c0 01f4 	movt	r1, #244	; 0xf4
 8001092:	6001      	str	r1, [r0, #0]
 8001094:	e7ff      	b.n	8001096 <SystemCoreClockUpdate+0xfa>
 8001096:	f643 0008 	movw	r0, #14344	; 0x3808
 800109a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800109e:	6800      	ldr	r0, [r0, #0]
 80010a0:	b2c0      	uxtb	r0, r0
 80010a2:	0900      	lsrs	r0, r0, #4
 80010a4:	f24b 6140 	movw	r1, #46656	; 0xb640
 80010a8:	f6c0 0100 	movt	r1, #2048	; 0x800
 80010ac:	5c08      	ldrb	r0, [r1, r0]
 80010ae:	9004      	str	r0, [sp, #16]
 80010b0:	9804      	ldr	r0, [sp, #16]
 80010b2:	f240 0100 	movw	r1, #0
 80010b6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80010ba:	680a      	ldr	r2, [r1, #0]
 80010bc:	fa22 f000 	lsr.w	r0, r2, r0
 80010c0:	6008      	str	r0, [r1, #0]
 80010c2:	b005      	add	sp, #20
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop

080010c8 <__aeabi_memclr>:
 80010c8:	2200      	movs	r2, #0
 80010ca:	f000 b803 	b.w	80010d4 <__aeabi_memset>
 80010ce:	bf00      	nop

080010d0 <__aeabi_memcpy>:
 80010d0:	f000 b888 	b.w	80011e4 <memcpy>

080010d4 <__aeabi_memset>:
 80010d4:	b470      	push	{r4, r5, r6}
 80010d6:	0784      	lsls	r4, r0, #30
 80010d8:	d046      	beq.n	8001168 <__aeabi_memset+0x94>
 80010da:	1e4c      	subs	r4, r1, #1
 80010dc:	2900      	cmp	r1, #0
 80010de:	d041      	beq.n	8001164 <__aeabi_memset+0x90>
 80010e0:	b2d5      	uxtb	r5, r2
 80010e2:	4603      	mov	r3, r0
 80010e4:	e002      	b.n	80010ec <__aeabi_memset+0x18>
 80010e6:	1e61      	subs	r1, r4, #1
 80010e8:	b3e4      	cbz	r4, 8001164 <__aeabi_memset+0x90>
 80010ea:	460c      	mov	r4, r1
 80010ec:	f803 5b01 	strb.w	r5, [r3], #1
 80010f0:	0799      	lsls	r1, r3, #30
 80010f2:	d1f8      	bne.n	80010e6 <__aeabi_memset+0x12>
 80010f4:	2c03      	cmp	r4, #3
 80010f6:	d92e      	bls.n	8001156 <__aeabi_memset+0x82>
 80010f8:	b2d5      	uxtb	r5, r2
 80010fa:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80010fe:	2c0f      	cmp	r4, #15
 8001100:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8001104:	d919      	bls.n	800113a <__aeabi_memset+0x66>
 8001106:	4626      	mov	r6, r4
 8001108:	f103 0110 	add.w	r1, r3, #16
 800110c:	3e10      	subs	r6, #16
 800110e:	2e0f      	cmp	r6, #15
 8001110:	f841 5c10 	str.w	r5, [r1, #-16]
 8001114:	f841 5c0c 	str.w	r5, [r1, #-12]
 8001118:	f841 5c08 	str.w	r5, [r1, #-8]
 800111c:	f841 5c04 	str.w	r5, [r1, #-4]
 8001120:	f101 0110 	add.w	r1, r1, #16
 8001124:	d8f2      	bhi.n	800110c <__aeabi_memset+0x38>
 8001126:	f1a4 0110 	sub.w	r1, r4, #16
 800112a:	f021 010f 	bic.w	r1, r1, #15
 800112e:	f004 040f 	and.w	r4, r4, #15
 8001132:	3110      	adds	r1, #16
 8001134:	2c03      	cmp	r4, #3
 8001136:	440b      	add	r3, r1
 8001138:	d90d      	bls.n	8001156 <__aeabi_memset+0x82>
 800113a:	461e      	mov	r6, r3
 800113c:	4621      	mov	r1, r4
 800113e:	3904      	subs	r1, #4
 8001140:	2903      	cmp	r1, #3
 8001142:	f846 5b04 	str.w	r5, [r6], #4
 8001146:	d8fa      	bhi.n	800113e <__aeabi_memset+0x6a>
 8001148:	1f21      	subs	r1, r4, #4
 800114a:	f021 0103 	bic.w	r1, r1, #3
 800114e:	3104      	adds	r1, #4
 8001150:	440b      	add	r3, r1
 8001152:	f004 0403 	and.w	r4, r4, #3
 8001156:	b12c      	cbz	r4, 8001164 <__aeabi_memset+0x90>
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	441c      	add	r4, r3
 800115c:	f803 2b01 	strb.w	r2, [r3], #1
 8001160:	42a3      	cmp	r3, r4
 8001162:	d1fb      	bne.n	800115c <__aeabi_memset+0x88>
 8001164:	bc70      	pop	{r4, r5, r6}
 8001166:	4770      	bx	lr
 8001168:	460c      	mov	r4, r1
 800116a:	4603      	mov	r3, r0
 800116c:	e7c2      	b.n	80010f4 <__aeabi_memset+0x20>
	...

08001170 <__errno>:
 8001170:	4b01      	ldr	r3, [pc, #4]	; (8001178 <__errno+0x8>)
 8001172:	6818      	ldr	r0, [r3, #0]
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000004 	.word	0x20000004

0800117c <__libc_init_array>:
 800117c:	b570      	push	{r4, r5, r6, lr}
 800117e:	4e0d      	ldr	r6, [pc, #52]	; (80011b4 <__libc_init_array+0x38>)
 8001180:	4d0d      	ldr	r5, [pc, #52]	; (80011b8 <__libc_init_array+0x3c>)
 8001182:	1b76      	subs	r6, r6, r5
 8001184:	10b6      	asrs	r6, r6, #2
 8001186:	d006      	beq.n	8001196 <__libc_init_array+0x1a>
 8001188:	2400      	movs	r4, #0
 800118a:	f855 3b04 	ldr.w	r3, [r5], #4
 800118e:	3401      	adds	r4, #1
 8001190:	4798      	blx	r3
 8001192:	42a6      	cmp	r6, r4
 8001194:	d1f9      	bne.n	800118a <__libc_init_array+0xe>
 8001196:	4e09      	ldr	r6, [pc, #36]	; (80011bc <__libc_init_array+0x40>)
 8001198:	4d09      	ldr	r5, [pc, #36]	; (80011c0 <__libc_init_array+0x44>)
 800119a:	1b76      	subs	r6, r6, r5
 800119c:	f00a fa44 	bl	800b628 <_init>
 80011a0:	10b6      	asrs	r6, r6, #2
 80011a2:	d006      	beq.n	80011b2 <__libc_init_array+0x36>
 80011a4:	2400      	movs	r4, #0
 80011a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80011aa:	3401      	adds	r4, #1
 80011ac:	4798      	blx	r3
 80011ae:	42a6      	cmp	r6, r4
 80011b0:	d1f9      	bne.n	80011a6 <__libc_init_array+0x2a>
 80011b2:	bd70      	pop	{r4, r5, r6, pc}
 80011b4:	0800b974 	.word	0x0800b974
 80011b8:	0800b974 	.word	0x0800b974
 80011bc:	0800b978 	.word	0x0800b978
 80011c0:	0800b974 	.word	0x0800b974

080011c4 <malloc>:
 80011c4:	4b02      	ldr	r3, [pc, #8]	; (80011d0 <malloc+0xc>)
 80011c6:	4601      	mov	r1, r0
 80011c8:	6818      	ldr	r0, [r3, #0]
 80011ca:	f000 b959 	b.w	8001480 <_malloc_r>
 80011ce:	bf00      	nop
 80011d0:	20000004 	.word	0x20000004

080011d4 <free>:
 80011d4:	4b02      	ldr	r3, [pc, #8]	; (80011e0 <free+0xc>)
 80011d6:	4601      	mov	r1, r0
 80011d8:	6818      	ldr	r0, [r3, #0]
 80011da:	f000 b8ef 	b.w	80013bc <_free_r>
 80011de:	bf00      	nop
 80011e0:	20000004 	.word	0x20000004

080011e4 <memcpy>:
 80011e4:	4684      	mov	ip, r0
 80011e6:	ea41 0300 	orr.w	r3, r1, r0
 80011ea:	f013 0303 	ands.w	r3, r3, #3
 80011ee:	d16d      	bne.n	80012cc <memcpy+0xe8>
 80011f0:	3a40      	subs	r2, #64	; 0x40
 80011f2:	d341      	bcc.n	8001278 <memcpy+0x94>
 80011f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80011f8:	f840 3b04 	str.w	r3, [r0], #4
 80011fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8001200:	f840 3b04 	str.w	r3, [r0], #4
 8001204:	f851 3b04 	ldr.w	r3, [r1], #4
 8001208:	f840 3b04 	str.w	r3, [r0], #4
 800120c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001210:	f840 3b04 	str.w	r3, [r0], #4
 8001214:	f851 3b04 	ldr.w	r3, [r1], #4
 8001218:	f840 3b04 	str.w	r3, [r0], #4
 800121c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001220:	f840 3b04 	str.w	r3, [r0], #4
 8001224:	f851 3b04 	ldr.w	r3, [r1], #4
 8001228:	f840 3b04 	str.w	r3, [r0], #4
 800122c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001230:	f840 3b04 	str.w	r3, [r0], #4
 8001234:	f851 3b04 	ldr.w	r3, [r1], #4
 8001238:	f840 3b04 	str.w	r3, [r0], #4
 800123c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001240:	f840 3b04 	str.w	r3, [r0], #4
 8001244:	f851 3b04 	ldr.w	r3, [r1], #4
 8001248:	f840 3b04 	str.w	r3, [r0], #4
 800124c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001250:	f840 3b04 	str.w	r3, [r0], #4
 8001254:	f851 3b04 	ldr.w	r3, [r1], #4
 8001258:	f840 3b04 	str.w	r3, [r0], #4
 800125c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001260:	f840 3b04 	str.w	r3, [r0], #4
 8001264:	f851 3b04 	ldr.w	r3, [r1], #4
 8001268:	f840 3b04 	str.w	r3, [r0], #4
 800126c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001270:	f840 3b04 	str.w	r3, [r0], #4
 8001274:	3a40      	subs	r2, #64	; 0x40
 8001276:	d2bd      	bcs.n	80011f4 <memcpy+0x10>
 8001278:	3230      	adds	r2, #48	; 0x30
 800127a:	d311      	bcc.n	80012a0 <memcpy+0xbc>
 800127c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001280:	f840 3b04 	str.w	r3, [r0], #4
 8001284:	f851 3b04 	ldr.w	r3, [r1], #4
 8001288:	f840 3b04 	str.w	r3, [r0], #4
 800128c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001290:	f840 3b04 	str.w	r3, [r0], #4
 8001294:	f851 3b04 	ldr.w	r3, [r1], #4
 8001298:	f840 3b04 	str.w	r3, [r0], #4
 800129c:	3a10      	subs	r2, #16
 800129e:	d2ed      	bcs.n	800127c <memcpy+0x98>
 80012a0:	320c      	adds	r2, #12
 80012a2:	d305      	bcc.n	80012b0 <memcpy+0xcc>
 80012a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80012a8:	f840 3b04 	str.w	r3, [r0], #4
 80012ac:	3a04      	subs	r2, #4
 80012ae:	d2f9      	bcs.n	80012a4 <memcpy+0xc0>
 80012b0:	3204      	adds	r2, #4
 80012b2:	d008      	beq.n	80012c6 <memcpy+0xe2>
 80012b4:	07d2      	lsls	r2, r2, #31
 80012b6:	bf1c      	itt	ne
 80012b8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80012bc:	f800 3b01 	strbne.w	r3, [r0], #1
 80012c0:	d301      	bcc.n	80012c6 <memcpy+0xe2>
 80012c2:	880b      	ldrh	r3, [r1, #0]
 80012c4:	8003      	strh	r3, [r0, #0]
 80012c6:	4660      	mov	r0, ip
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	2a08      	cmp	r2, #8
 80012ce:	d313      	bcc.n	80012f8 <memcpy+0x114>
 80012d0:	078b      	lsls	r3, r1, #30
 80012d2:	d08d      	beq.n	80011f0 <memcpy+0xc>
 80012d4:	f010 0303 	ands.w	r3, r0, #3
 80012d8:	d08a      	beq.n	80011f0 <memcpy+0xc>
 80012da:	f1c3 0304 	rsb	r3, r3, #4
 80012de:	1ad2      	subs	r2, r2, r3
 80012e0:	07db      	lsls	r3, r3, #31
 80012e2:	bf1c      	itt	ne
 80012e4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80012e8:	f800 3b01 	strbne.w	r3, [r0], #1
 80012ec:	d380      	bcc.n	80011f0 <memcpy+0xc>
 80012ee:	f831 3b02 	ldrh.w	r3, [r1], #2
 80012f2:	f820 3b02 	strh.w	r3, [r0], #2
 80012f6:	e77b      	b.n	80011f0 <memcpy+0xc>
 80012f8:	3a04      	subs	r2, #4
 80012fa:	d3d9      	bcc.n	80012b0 <memcpy+0xcc>
 80012fc:	3a01      	subs	r2, #1
 80012fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001302:	f800 3b01 	strb.w	r3, [r0], #1
 8001306:	d2f9      	bcs.n	80012fc <memcpy+0x118>
 8001308:	780b      	ldrb	r3, [r1, #0]
 800130a:	7003      	strb	r3, [r0, #0]
 800130c:	784b      	ldrb	r3, [r1, #1]
 800130e:	7043      	strb	r3, [r0, #1]
 8001310:	788b      	ldrb	r3, [r1, #2]
 8001312:	7083      	strb	r3, [r0, #2]
 8001314:	4660      	mov	r0, ip
 8001316:	4770      	bx	lr

08001318 <memset>:
 8001318:	0783      	lsls	r3, r0, #30
 800131a:	b530      	push	{r4, r5, lr}
 800131c:	d048      	beq.n	80013b0 <memset+0x98>
 800131e:	1e54      	subs	r4, r2, #1
 8001320:	2a00      	cmp	r2, #0
 8001322:	d03f      	beq.n	80013a4 <memset+0x8c>
 8001324:	b2ca      	uxtb	r2, r1
 8001326:	4603      	mov	r3, r0
 8001328:	e001      	b.n	800132e <memset+0x16>
 800132a:	3c01      	subs	r4, #1
 800132c:	d33a      	bcc.n	80013a4 <memset+0x8c>
 800132e:	f803 2b01 	strb.w	r2, [r3], #1
 8001332:	079d      	lsls	r5, r3, #30
 8001334:	d1f9      	bne.n	800132a <memset+0x12>
 8001336:	2c03      	cmp	r4, #3
 8001338:	d92d      	bls.n	8001396 <memset+0x7e>
 800133a:	b2cd      	uxtb	r5, r1
 800133c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8001340:	2c0f      	cmp	r4, #15
 8001342:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8001346:	d936      	bls.n	80013b6 <memset+0x9e>
 8001348:	f1a4 0210 	sub.w	r2, r4, #16
 800134c:	f022 0c0f 	bic.w	ip, r2, #15
 8001350:	f103 0e20 	add.w	lr, r3, #32
 8001354:	44e6      	add	lr, ip
 8001356:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 800135a:	f103 0210 	add.w	r2, r3, #16
 800135e:	e942 5504 	strd	r5, r5, [r2, #-16]
 8001362:	e942 5502 	strd	r5, r5, [r2, #-8]
 8001366:	3210      	adds	r2, #16
 8001368:	4572      	cmp	r2, lr
 800136a:	d1f8      	bne.n	800135e <memset+0x46>
 800136c:	f10c 0201 	add.w	r2, ip, #1
 8001370:	f014 0f0c 	tst.w	r4, #12
 8001374:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001378:	f004 0c0f 	and.w	ip, r4, #15
 800137c:	d013      	beq.n	80013a6 <memset+0x8e>
 800137e:	f1ac 0304 	sub.w	r3, ip, #4
 8001382:	f023 0303 	bic.w	r3, r3, #3
 8001386:	3304      	adds	r3, #4
 8001388:	4413      	add	r3, r2
 800138a:	f842 5b04 	str.w	r5, [r2], #4
 800138e:	4293      	cmp	r3, r2
 8001390:	d1fb      	bne.n	800138a <memset+0x72>
 8001392:	f00c 0403 	and.w	r4, ip, #3
 8001396:	b12c      	cbz	r4, 80013a4 <memset+0x8c>
 8001398:	b2ca      	uxtb	r2, r1
 800139a:	441c      	add	r4, r3
 800139c:	f803 2b01 	strb.w	r2, [r3], #1
 80013a0:	429c      	cmp	r4, r3
 80013a2:	d1fb      	bne.n	800139c <memset+0x84>
 80013a4:	bd30      	pop	{r4, r5, pc}
 80013a6:	4664      	mov	r4, ip
 80013a8:	4613      	mov	r3, r2
 80013aa:	2c00      	cmp	r4, #0
 80013ac:	d1f4      	bne.n	8001398 <memset+0x80>
 80013ae:	e7f9      	b.n	80013a4 <memset+0x8c>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4614      	mov	r4, r2
 80013b4:	e7bf      	b.n	8001336 <memset+0x1e>
 80013b6:	461a      	mov	r2, r3
 80013b8:	46a4      	mov	ip, r4
 80013ba:	e7e0      	b.n	800137e <memset+0x66>

080013bc <_free_r>:
 80013bc:	2900      	cmp	r1, #0
 80013be:	d058      	beq.n	8001472 <_free_r+0xb6>
 80013c0:	b530      	push	{r4, r5, lr}
 80013c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80013c6:	b083      	sub	sp, #12
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f1a1 0404 	sub.w	r4, r1, #4
 80013ce:	bfb8      	it	lt
 80013d0:	18e4      	addlt	r4, r4, r3
 80013d2:	9001      	str	r0, [sp, #4]
 80013d4:	f000 fa50 	bl	8001878 <__malloc_lock>
 80013d8:	4a28      	ldr	r2, [pc, #160]	; (800147c <_free_r+0xc0>)
 80013da:	9801      	ldr	r0, [sp, #4]
 80013dc:	6813      	ldr	r3, [r2, #0]
 80013de:	b133      	cbz	r3, 80013ee <_free_r+0x32>
 80013e0:	42a3      	cmp	r3, r4
 80013e2:	d90d      	bls.n	8001400 <_free_r+0x44>
 80013e4:	6821      	ldr	r1, [r4, #0]
 80013e6:	eb04 0c01 	add.w	ip, r4, r1
 80013ea:	4563      	cmp	r3, ip
 80013ec:	d02f      	beq.n	800144e <_free_r+0x92>
 80013ee:	6063      	str	r3, [r4, #4]
 80013f0:	6014      	str	r4, [r2, #0]
 80013f2:	b003      	add	sp, #12
 80013f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80013f8:	f000 ba40 	b.w	800187c <__malloc_unlock>
 80013fc:	42a3      	cmp	r3, r4
 80013fe:	d810      	bhi.n	8001422 <_free_r+0x66>
 8001400:	461a      	mov	r2, r3
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f9      	bne.n	80013fc <_free_r+0x40>
 8001408:	6811      	ldr	r1, [r2, #0]
 800140a:	eb02 0c01 	add.w	ip, r2, r1
 800140e:	4564      	cmp	r4, ip
 8001410:	d019      	beq.n	8001446 <_free_r+0x8a>
 8001412:	d32f      	bcc.n	8001474 <_free_r+0xb8>
 8001414:	6063      	str	r3, [r4, #4]
 8001416:	6054      	str	r4, [r2, #4]
 8001418:	b003      	add	sp, #12
 800141a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800141e:	f000 ba2d 	b.w	800187c <__malloc_unlock>
 8001422:	6811      	ldr	r1, [r2, #0]
 8001424:	eb02 0c01 	add.w	ip, r2, r1
 8001428:	45a4      	cmp	ip, r4
 800142a:	d016      	beq.n	800145a <_free_r+0x9e>
 800142c:	d822      	bhi.n	8001474 <_free_r+0xb8>
 800142e:	6821      	ldr	r1, [r4, #0]
 8001430:	eb04 0c01 	add.w	ip, r4, r1
 8001434:	4563      	cmp	r3, ip
 8001436:	d1ed      	bne.n	8001414 <_free_r+0x58>
 8001438:	681d      	ldr	r5, [r3, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	4429      	add	r1, r5
 800143e:	e9c4 1300 	strd	r1, r3, [r4]
 8001442:	6054      	str	r4, [r2, #4]
 8001444:	e7d5      	b.n	80013f2 <_free_r+0x36>
 8001446:	6823      	ldr	r3, [r4, #0]
 8001448:	4419      	add	r1, r3
 800144a:	6011      	str	r1, [r2, #0]
 800144c:	e7d1      	b.n	80013f2 <_free_r+0x36>
 800144e:	681d      	ldr	r5, [r3, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	4429      	add	r1, r5
 8001454:	e9c4 1300 	strd	r1, r3, [r4]
 8001458:	e7ca      	b.n	80013f0 <_free_r+0x34>
 800145a:	6824      	ldr	r4, [r4, #0]
 800145c:	4421      	add	r1, r4
 800145e:	1854      	adds	r4, r2, r1
 8001460:	42a3      	cmp	r3, r4
 8001462:	6011      	str	r1, [r2, #0]
 8001464:	d1c5      	bne.n	80013f2 <_free_r+0x36>
 8001466:	e9d3 4300 	ldrd	r4, r3, [r3]
 800146a:	4421      	add	r1, r4
 800146c:	e9c2 1300 	strd	r1, r3, [r2]
 8001470:	e7bf      	b.n	80013f2 <_free_r+0x36>
 8001472:	4770      	bx	lr
 8001474:	230c      	movs	r3, #12
 8001476:	6003      	str	r3, [r0, #0]
 8001478:	e7bb      	b.n	80013f2 <_free_r+0x36>
 800147a:	bf00      	nop
 800147c:	2000039c 	.word	0x2000039c

08001480 <_malloc_r>:
 8001480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001482:	1ccd      	adds	r5, r1, #3
 8001484:	f025 0503 	bic.w	r5, r5, #3
 8001488:	3508      	adds	r5, #8
 800148a:	2d0c      	cmp	r5, #12
 800148c:	bf38      	it	cc
 800148e:	250c      	movcc	r5, #12
 8001490:	2d00      	cmp	r5, #0
 8001492:	4606      	mov	r6, r0
 8001494:	db23      	blt.n	80014de <_malloc_r+0x5e>
 8001496:	42a9      	cmp	r1, r5
 8001498:	d821      	bhi.n	80014de <_malloc_r+0x5e>
 800149a:	4f25      	ldr	r7, [pc, #148]	; (8001530 <_malloc_r+0xb0>)
 800149c:	f000 f9ec 	bl	8001878 <__malloc_lock>
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	b322      	cbz	r2, 80014ee <_malloc_r+0x6e>
 80014a4:	4614      	mov	r4, r2
 80014a6:	e003      	b.n	80014b0 <_malloc_r+0x30>
 80014a8:	6863      	ldr	r3, [r4, #4]
 80014aa:	4622      	mov	r2, r4
 80014ac:	b1fb      	cbz	r3, 80014ee <_malloc_r+0x6e>
 80014ae:	461c      	mov	r4, r3
 80014b0:	6823      	ldr	r3, [r4, #0]
 80014b2:	1b5b      	subs	r3, r3, r5
 80014b4:	d4f8      	bmi.n	80014a8 <_malloc_r+0x28>
 80014b6:	2b0b      	cmp	r3, #11
 80014b8:	d815      	bhi.n	80014e6 <_malloc_r+0x66>
 80014ba:	6863      	ldr	r3, [r4, #4]
 80014bc:	4294      	cmp	r4, r2
 80014be:	bf0c      	ite	eq
 80014c0:	603b      	streq	r3, [r7, #0]
 80014c2:	6053      	strne	r3, [r2, #4]
 80014c4:	4630      	mov	r0, r6
 80014c6:	f000 f9d9 	bl	800187c <__malloc_unlock>
 80014ca:	f104 000b 	add.w	r0, r4, #11
 80014ce:	1d23      	adds	r3, r4, #4
 80014d0:	f020 0007 	bic.w	r0, r0, #7
 80014d4:	1ac2      	subs	r2, r0, r3
 80014d6:	d001      	beq.n	80014dc <_malloc_r+0x5c>
 80014d8:	1a1b      	subs	r3, r3, r0
 80014da:	50a3      	str	r3, [r4, r2]
 80014dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014de:	230c      	movs	r3, #12
 80014e0:	6033      	str	r3, [r6, #0]
 80014e2:	2000      	movs	r0, #0
 80014e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014e6:	6023      	str	r3, [r4, #0]
 80014e8:	441c      	add	r4, r3
 80014ea:	6025      	str	r5, [r4, #0]
 80014ec:	e7ea      	b.n	80014c4 <_malloc_r+0x44>
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	b1c9      	cbz	r1, 8001526 <_malloc_r+0xa6>
 80014f2:	4629      	mov	r1, r5
 80014f4:	4630      	mov	r0, r6
 80014f6:	f000 f84d 	bl	8001594 <_sbrk_r>
 80014fa:	1c43      	adds	r3, r0, #1
 80014fc:	d00c      	beq.n	8001518 <_malloc_r+0x98>
 80014fe:	1cc4      	adds	r4, r0, #3
 8001500:	f024 0403 	bic.w	r4, r4, #3
 8001504:	42a0      	cmp	r0, r4
 8001506:	d005      	beq.n	8001514 <_malloc_r+0x94>
 8001508:	1a21      	subs	r1, r4, r0
 800150a:	4630      	mov	r0, r6
 800150c:	f000 f842 	bl	8001594 <_sbrk_r>
 8001510:	3001      	adds	r0, #1
 8001512:	d001      	beq.n	8001518 <_malloc_r+0x98>
 8001514:	6025      	str	r5, [r4, #0]
 8001516:	e7d5      	b.n	80014c4 <_malloc_r+0x44>
 8001518:	230c      	movs	r3, #12
 800151a:	4630      	mov	r0, r6
 800151c:	6033      	str	r3, [r6, #0]
 800151e:	f000 f9ad 	bl	800187c <__malloc_unlock>
 8001522:	2000      	movs	r0, #0
 8001524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001526:	4630      	mov	r0, r6
 8001528:	f000 f834 	bl	8001594 <_sbrk_r>
 800152c:	6078      	str	r0, [r7, #4]
 800152e:	e7e0      	b.n	80014f2 <_malloc_r+0x72>
 8001530:	2000039c 	.word	0x2000039c

08001534 <_iprintf_r>:
 8001534:	b40e      	push	{r1, r2, r3}
 8001536:	b510      	push	{r4, lr}
 8001538:	4604      	mov	r4, r0
 800153a:	b083      	sub	sp, #12
 800153c:	b108      	cbz	r0, 8001542 <_iprintf_r+0xe>
 800153e:	6983      	ldr	r3, [r0, #24]
 8001540:	b15b      	cbz	r3, 800155a <_iprintf_r+0x26>
 8001542:	ab06      	add	r3, sp, #24
 8001544:	68a1      	ldr	r1, [r4, #8]
 8001546:	9a05      	ldr	r2, [sp, #20]
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	4620      	mov	r0, r4
 800154c:	f000 f9dc 	bl	8001908 <_vfiprintf_r>
 8001550:	b003      	add	sp, #12
 8001552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001556:	b003      	add	sp, #12
 8001558:	4770      	bx	lr
 800155a:	f000 f929 	bl	80017b0 <__sinit>
 800155e:	e7f0      	b.n	8001542 <_iprintf_r+0xe>

08001560 <iprintf>:
 8001560:	b40f      	push	{r0, r1, r2, r3}
 8001562:	b510      	push	{r4, lr}
 8001564:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <iprintf+0x30>)
 8001566:	681c      	ldr	r4, [r3, #0]
 8001568:	b082      	sub	sp, #8
 800156a:	b10c      	cbz	r4, 8001570 <iprintf+0x10>
 800156c:	69a3      	ldr	r3, [r4, #24]
 800156e:	b15b      	cbz	r3, 8001588 <iprintf+0x28>
 8001570:	ab05      	add	r3, sp, #20
 8001572:	68a1      	ldr	r1, [r4, #8]
 8001574:	9a04      	ldr	r2, [sp, #16]
 8001576:	9301      	str	r3, [sp, #4]
 8001578:	4620      	mov	r0, r4
 800157a:	f000 f9c5 	bl	8001908 <_vfiprintf_r>
 800157e:	b002      	add	sp, #8
 8001580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001584:	b004      	add	sp, #16
 8001586:	4770      	bx	lr
 8001588:	4620      	mov	r0, r4
 800158a:	f000 f911 	bl	80017b0 <__sinit>
 800158e:	e7ef      	b.n	8001570 <iprintf+0x10>
 8001590:	20000004 	.word	0x20000004

08001594 <_sbrk_r>:
 8001594:	b538      	push	{r3, r4, r5, lr}
 8001596:	4d07      	ldr	r5, [pc, #28]	; (80015b4 <_sbrk_r+0x20>)
 8001598:	2200      	movs	r2, #0
 800159a:	4604      	mov	r4, r0
 800159c:	4608      	mov	r0, r1
 800159e:	602a      	str	r2, [r5, #0]
 80015a0:	f7ff fcae 	bl	8000f00 <_sbrk>
 80015a4:	1c43      	adds	r3, r0, #1
 80015a6:	d000      	beq.n	80015aa <_sbrk_r+0x16>
 80015a8:	bd38      	pop	{r3, r4, r5, pc}
 80015aa:	682b      	ldr	r3, [r5, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0fb      	beq.n	80015a8 <_sbrk_r+0x14>
 80015b0:	6023      	str	r3, [r4, #0]
 80015b2:	bd38      	pop	{r3, r4, r5, pc}
 80015b4:	200003a4 	.word	0x200003a4

080015b8 <__fp_lock>:
 80015b8:	2000      	movs	r0, #0
 80015ba:	4770      	bx	lr

080015bc <_cleanup_r>:
 80015bc:	4901      	ldr	r1, [pc, #4]	; (80015c4 <_cleanup_r+0x8>)
 80015be:	f000 b937 	b.w	8001830 <_fwalk_reent>
 80015c2:	bf00      	nop
 80015c4:	08002345 	.word	0x08002345

080015c8 <__fp_unlock>:
 80015c8:	2000      	movs	r0, #0
 80015ca:	4770      	bx	lr

080015cc <__sfmoreglue>:
 80015cc:	b570      	push	{r4, r5, r6, lr}
 80015ce:	2268      	movs	r2, #104	; 0x68
 80015d0:	1e4d      	subs	r5, r1, #1
 80015d2:	fb02 f505 	mul.w	r5, r2, r5
 80015d6:	460e      	mov	r6, r1
 80015d8:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80015dc:	f7ff ff50 	bl	8001480 <_malloc_r>
 80015e0:	4604      	mov	r4, r0
 80015e2:	b140      	cbz	r0, 80015f6 <__sfmoreglue+0x2a>
 80015e4:	2100      	movs	r1, #0
 80015e6:	300c      	adds	r0, #12
 80015e8:	e9c4 1600 	strd	r1, r6, [r4]
 80015ec:	60a0      	str	r0, [r4, #8]
 80015ee:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80015f2:	f7ff fe91 	bl	8001318 <memset>
 80015f6:	4620      	mov	r0, r4
 80015f8:	bd70      	pop	{r4, r5, r6, pc}
 80015fa:	bf00      	nop

080015fc <__sfp>:
 80015fc:	4b27      	ldr	r3, [pc, #156]	; (800169c <__sfp+0xa0>)
 80015fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001602:	681e      	ldr	r6, [r3, #0]
 8001604:	69b3      	ldr	r3, [r6, #24]
 8001606:	4607      	mov	r7, r0
 8001608:	b353      	cbz	r3, 8001660 <__sfp+0x64>
 800160a:	3648      	adds	r6, #72	; 0x48
 800160c:	f04f 0804 	mov.w	r8, #4
 8001610:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001614:	3b01      	subs	r3, #1
 8001616:	d504      	bpl.n	8001622 <__sfp+0x26>
 8001618:	e01e      	b.n	8001658 <__sfp+0x5c>
 800161a:	1c5a      	adds	r2, r3, #1
 800161c:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8001620:	d01a      	beq.n	8001658 <__sfp+0x5c>
 8001622:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001626:	3b01      	subs	r3, #1
 8001628:	2d00      	cmp	r5, #0
 800162a:	d1f6      	bne.n	800161a <__sfp+0x1e>
 800162c:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <__sfp+0xa4>)
 800162e:	6665      	str	r5, [r4, #100]	; 0x64
 8001630:	e9c4 5500 	strd	r5, r5, [r4]
 8001634:	e9c4 5302 	strd	r5, r3, [r4, #8]
 8001638:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800163c:	61a5      	str	r5, [r4, #24]
 800163e:	2208      	movs	r2, #8
 8001640:	4629      	mov	r1, r5
 8001642:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001646:	f7ff fe67 	bl	8001318 <memset>
 800164a:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800164e:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001652:	4620      	mov	r0, r4
 8001654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001658:	6835      	ldr	r5, [r6, #0]
 800165a:	b12d      	cbz	r5, 8001668 <__sfp+0x6c>
 800165c:	462e      	mov	r6, r5
 800165e:	e7d7      	b.n	8001610 <__sfp+0x14>
 8001660:	4630      	mov	r0, r6
 8001662:	f000 f81f 	bl	80016a4 <__sinit.part.0>
 8001666:	e7d0      	b.n	800160a <__sfp+0xe>
 8001668:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800166c:	4638      	mov	r0, r7
 800166e:	f7ff ff07 	bl	8001480 <_malloc_r>
 8001672:	4604      	mov	r4, r0
 8001674:	b168      	cbz	r0, 8001692 <__sfp+0x96>
 8001676:	6005      	str	r5, [r0, #0]
 8001678:	f8c0 8004 	str.w	r8, [r0, #4]
 800167c:	300c      	adds	r0, #12
 800167e:	4629      	mov	r1, r5
 8001680:	60a0      	str	r0, [r4, #8]
 8001682:	4625      	mov	r5, r4
 8001684:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001688:	f7ff fe46 	bl	8001318 <memset>
 800168c:	6034      	str	r4, [r6, #0]
 800168e:	462e      	mov	r6, r5
 8001690:	e7be      	b.n	8001610 <__sfp+0x14>
 8001692:	230c      	movs	r3, #12
 8001694:	6030      	str	r0, [r6, #0]
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	e7db      	b.n	8001652 <__sfp+0x56>
 800169a:	bf00      	nop
 800169c:	0800b65c 	.word	0x0800b65c
 80016a0:	ffff0001 	.word	0xffff0001

080016a4 <__sinit.part.0>:
 80016a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016a8:	4b34      	ldr	r3, [pc, #208]	; (800177c <__sinit.part.0+0xd8>)
 80016aa:	4935      	ldr	r1, [pc, #212]	; (8001780 <__sinit.part.0+0xdc>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	6281      	str	r1, [r0, #40]	; 0x28
 80016b0:	4290      	cmp	r0, r2
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80016ba:	6503      	str	r3, [r0, #80]	; 0x50
 80016bc:	bf04      	itt	eq
 80016be:	2301      	moveq	r3, #1
 80016c0:	6183      	streq	r3, [r0, #24]
 80016c2:	4605      	mov	r5, r0
 80016c4:	f7ff ff9a 	bl	80015fc <__sfp>
 80016c8:	6068      	str	r0, [r5, #4]
 80016ca:	4628      	mov	r0, r5
 80016cc:	f7ff ff96 	bl	80015fc <__sfp>
 80016d0:	60a8      	str	r0, [r5, #8]
 80016d2:	4628      	mov	r0, r5
 80016d4:	f7ff ff92 	bl	80015fc <__sfp>
 80016d8:	686f      	ldr	r7, [r5, #4]
 80016da:	60e8      	str	r0, [r5, #12]
 80016dc:	2400      	movs	r4, #0
 80016de:	2304      	movs	r3, #4
 80016e0:	e9c7 4302 	strd	r4, r3, [r7, #8]
 80016e4:	2208      	movs	r2, #8
 80016e6:	4621      	mov	r1, r4
 80016e8:	e9c7 4400 	strd	r4, r4, [r7]
 80016ec:	e9c7 4404 	strd	r4, r4, [r7, #16]
 80016f0:	667c      	str	r4, [r7, #100]	; 0x64
 80016f2:	61bc      	str	r4, [r7, #24]
 80016f4:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80016f8:	f7ff fe0e 	bl	8001318 <memset>
 80016fc:	f8df b08c 	ldr.w	fp, [pc, #140]	; 800178c <__sinit.part.0+0xe8>
 8001700:	68ae      	ldr	r6, [r5, #8]
 8001702:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8001790 <__sinit.part.0+0xec>
 8001706:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8001794 <__sinit.part.0+0xf0>
 800170a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8001798 <__sinit.part.0+0xf4>
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <__sinit.part.0+0xe0>)
 8001710:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
 8001714:	e9c7 7b08 	strd	r7, fp, [r7, #32]
 8001718:	f8c7 902c 	str.w	r9, [r7, #44]	; 0x2c
 800171c:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
 8001720:	2208      	movs	r2, #8
 8001722:	60f3      	str	r3, [r6, #12]
 8001724:	e9c6 4400 	strd	r4, r4, [r6]
 8001728:	e9c6 4404 	strd	r4, r4, [r6, #16]
 800172c:	6674      	str	r4, [r6, #100]	; 0x64
 800172e:	60b4      	str	r4, [r6, #8]
 8001730:	61b4      	str	r4, [r6, #24]
 8001732:	4621      	mov	r1, r4
 8001734:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8001738:	f7ff fdee 	bl	8001318 <memset>
 800173c:	e9c6 6b08 	strd	r6, fp, [r6, #32]
 8001740:	e9c6 a90a 	strd	sl, r9, [r6, #40]	; 0x28
 8001744:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
 8001748:	68ee      	ldr	r6, [r5, #12]
 800174a:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <__sinit.part.0+0xe4>)
 800174c:	60f3      	str	r3, [r6, #12]
 800174e:	e9c6 4400 	strd	r4, r4, [r6]
 8001752:	e9c6 4404 	strd	r4, r4, [r6, #16]
 8001756:	6674      	str	r4, [r6, #100]	; 0x64
 8001758:	60b4      	str	r4, [r6, #8]
 800175a:	61b4      	str	r4, [r6, #24]
 800175c:	4621      	mov	r1, r4
 800175e:	2208      	movs	r2, #8
 8001760:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8001764:	f7ff fdd8 	bl	8001318 <memset>
 8001768:	2301      	movs	r3, #1
 800176a:	e9c6 6b08 	strd	r6, fp, [r6, #32]
 800176e:	e9c6 980b 	strd	r9, r8, [r6, #44]	; 0x2c
 8001772:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
 8001776:	61ab      	str	r3, [r5, #24]
 8001778:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800177c:	0800b65c 	.word	0x0800b65c
 8001780:	080015bd 	.word	0x080015bd
 8001784:	00010009 	.word	0x00010009
 8001788:	00020012 	.word	0x00020012
 800178c:	08001f85 	.word	0x08001f85
 8001790:	08001fad 	.word	0x08001fad
 8001794:	08001fed 	.word	0x08001fed
 8001798:	0800200d 	.word	0x0800200d

0800179c <_cleanup>:
 800179c:	4b02      	ldr	r3, [pc, #8]	; (80017a8 <_cleanup+0xc>)
 800179e:	4903      	ldr	r1, [pc, #12]	; (80017ac <_cleanup+0x10>)
 80017a0:	6818      	ldr	r0, [r3, #0]
 80017a2:	f000 b845 	b.w	8001830 <_fwalk_reent>
 80017a6:	bf00      	nop
 80017a8:	0800b65c 	.word	0x0800b65c
 80017ac:	08002345 	.word	0x08002345

080017b0 <__sinit>:
 80017b0:	6983      	ldr	r3, [r0, #24]
 80017b2:	b903      	cbnz	r3, 80017b6 <__sinit+0x6>
 80017b4:	e776      	b.n	80016a4 <__sinit.part.0>
 80017b6:	4770      	bx	lr

080017b8 <__sfp_lock_acquire>:
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop

080017bc <__sfp_lock_release>:
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop

080017c0 <__sinit_lock_acquire>:
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop

080017c4 <__sinit_lock_release>:
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop

080017c8 <__fp_lock_all>:
 80017c8:	4b02      	ldr	r3, [pc, #8]	; (80017d4 <__fp_lock_all+0xc>)
 80017ca:	4903      	ldr	r1, [pc, #12]	; (80017d8 <__fp_lock_all+0x10>)
 80017cc:	6818      	ldr	r0, [r3, #0]
 80017ce:	f000 b80f 	b.w	80017f0 <_fwalk>
 80017d2:	bf00      	nop
 80017d4:	20000004 	.word	0x20000004
 80017d8:	080015b9 	.word	0x080015b9

080017dc <__fp_unlock_all>:
 80017dc:	4b02      	ldr	r3, [pc, #8]	; (80017e8 <__fp_unlock_all+0xc>)
 80017de:	4903      	ldr	r1, [pc, #12]	; (80017ec <__fp_unlock_all+0x10>)
 80017e0:	6818      	ldr	r0, [r3, #0]
 80017e2:	f000 b805 	b.w	80017f0 <_fwalk>
 80017e6:	bf00      	nop
 80017e8:	20000004 	.word	0x20000004
 80017ec:	080015c9 	.word	0x080015c9

080017f0 <_fwalk>:
 80017f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017f4:	4688      	mov	r8, r1
 80017f6:	f100 0748 	add.w	r7, r0, #72	; 0x48
 80017fa:	2600      	movs	r6, #0
 80017fc:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 8001800:	3d01      	subs	r5, #1
 8001802:	d40f      	bmi.n	8001824 <_fwalk+0x34>
 8001804:	89a3      	ldrh	r3, [r4, #12]
 8001806:	2b01      	cmp	r3, #1
 8001808:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800180c:	d906      	bls.n	800181c <_fwalk+0x2c>
 800180e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8001812:	3301      	adds	r3, #1
 8001814:	4620      	mov	r0, r4
 8001816:	d001      	beq.n	800181c <_fwalk+0x2c>
 8001818:	47c0      	blx	r8
 800181a:	4306      	orrs	r6, r0
 800181c:	1c6b      	adds	r3, r5, #1
 800181e:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8001822:	d1ef      	bne.n	8001804 <_fwalk+0x14>
 8001824:	683f      	ldr	r7, [r7, #0]
 8001826:	2f00      	cmp	r7, #0
 8001828:	d1e8      	bne.n	80017fc <_fwalk+0xc>
 800182a:	4630      	mov	r0, r6
 800182c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001830 <_fwalk_reent>:
 8001830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001834:	4607      	mov	r7, r0
 8001836:	4688      	mov	r8, r1
 8001838:	f100 0648 	add.w	r6, r0, #72	; 0x48
 800183c:	f04f 0900 	mov.w	r9, #0
 8001840:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 8001844:	3d01      	subs	r5, #1
 8001846:	d411      	bmi.n	800186c <_fwalk_reent+0x3c>
 8001848:	89a3      	ldrh	r3, [r4, #12]
 800184a:	2b01      	cmp	r3, #1
 800184c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8001850:	d908      	bls.n	8001864 <_fwalk_reent+0x34>
 8001852:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8001856:	3301      	adds	r3, #1
 8001858:	4621      	mov	r1, r4
 800185a:	d003      	beq.n	8001864 <_fwalk_reent+0x34>
 800185c:	4638      	mov	r0, r7
 800185e:	47c0      	blx	r8
 8001860:	ea49 0900 	orr.w	r9, r9, r0
 8001864:	1c6b      	adds	r3, r5, #1
 8001866:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800186a:	d1ed      	bne.n	8001848 <_fwalk_reent+0x18>
 800186c:	6836      	ldr	r6, [r6, #0]
 800186e:	2e00      	cmp	r6, #0
 8001870:	d1e6      	bne.n	8001840 <_fwalk_reent+0x10>
 8001872:	4648      	mov	r0, r9
 8001874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001878 <__malloc_lock>:
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop

0800187c <__malloc_unlock>:
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop

08001880 <__sfputc_r>:
 8001880:	6893      	ldr	r3, [r2, #8]
 8001882:	3b01      	subs	r3, #1
 8001884:	2b00      	cmp	r3, #0
 8001886:	6093      	str	r3, [r2, #8]
 8001888:	da11      	bge.n	80018ae <__sfputc_r+0x2e>
 800188a:	b410      	push	{r4}
 800188c:	6994      	ldr	r4, [r2, #24]
 800188e:	42a3      	cmp	r3, r4
 8001890:	db09      	blt.n	80018a6 <__sfputc_r+0x26>
 8001892:	290a      	cmp	r1, #10
 8001894:	d007      	beq.n	80018a6 <__sfputc_r+0x26>
 8001896:	6813      	ldr	r3, [r2, #0]
 8001898:	1c58      	adds	r0, r3, #1
 800189a:	6010      	str	r0, [r2, #0]
 800189c:	7019      	strb	r1, [r3, #0]
 800189e:	4608      	mov	r0, r1
 80018a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018aa:	f000 bbb3 	b.w	8002014 <__swbuf_r>
 80018ae:	6813      	ldr	r3, [r2, #0]
 80018b0:	1c58      	adds	r0, r3, #1
 80018b2:	6010      	str	r0, [r2, #0]
 80018b4:	7019      	strb	r1, [r3, #0]
 80018b6:	4608      	mov	r0, r1
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop

080018bc <__sfputs_r>:
 80018bc:	b19b      	cbz	r3, 80018e6 <__sfputs_r+0x2a>
 80018be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018c0:	4413      	add	r3, r2
 80018c2:	4606      	mov	r6, r0
 80018c4:	460f      	mov	r7, r1
 80018c6:	1e54      	subs	r4, r2, #1
 80018c8:	1e5d      	subs	r5, r3, #1
 80018ca:	e001      	b.n	80018d0 <__sfputs_r+0x14>
 80018cc:	42ac      	cmp	r4, r5
 80018ce:	d008      	beq.n	80018e2 <__sfputs_r+0x26>
 80018d0:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80018d4:	463a      	mov	r2, r7
 80018d6:	4630      	mov	r0, r6
 80018d8:	f7ff ffd2 	bl	8001880 <__sfputc_r>
 80018dc:	1c43      	adds	r3, r0, #1
 80018de:	d1f5      	bne.n	80018cc <__sfputs_r+0x10>
 80018e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018e2:	2000      	movs	r0, #0
 80018e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018e6:	2000      	movs	r0, #0
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop

080018ec <__sprint_r>:
 80018ec:	6893      	ldr	r3, [r2, #8]
 80018ee:	b510      	push	{r4, lr}
 80018f0:	4614      	mov	r4, r2
 80018f2:	b913      	cbnz	r3, 80018fa <__sprint_r+0xe>
 80018f4:	6053      	str	r3, [r2, #4]
 80018f6:	4618      	mov	r0, r3
 80018f8:	bd10      	pop	{r4, pc}
 80018fa:	f000 fd8d 	bl	8002418 <__sfvwrite_r>
 80018fe:	2300      	movs	r3, #0
 8001900:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8001904:	bd10      	pop	{r4, pc}
 8001906:	bf00      	nop

08001908 <_vfiprintf_r>:
 8001908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800190c:	4688      	mov	r8, r1
 800190e:	b09f      	sub	sp, #124	; 0x7c
 8001910:	4615      	mov	r5, r2
 8001912:	461c      	mov	r4, r3
 8001914:	4681      	mov	r9, r0
 8001916:	b118      	cbz	r0, 8001920 <_vfiprintf_r+0x18>
 8001918:	6983      	ldr	r3, [r0, #24]
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 80a2 	beq.w	8001a64 <_vfiprintf_r+0x15c>
 8001920:	4b92      	ldr	r3, [pc, #584]	; (8001b6c <_vfiprintf_r+0x264>)
 8001922:	4598      	cmp	r8, r3
 8001924:	f000 80a4 	beq.w	8001a70 <_vfiprintf_r+0x168>
 8001928:	4b91      	ldr	r3, [pc, #580]	; (8001b70 <_vfiprintf_r+0x268>)
 800192a:	4598      	cmp	r8, r3
 800192c:	f000 80b1 	beq.w	8001a92 <_vfiprintf_r+0x18a>
 8001930:	4b90      	ldr	r3, [pc, #576]	; (8001b74 <_vfiprintf_r+0x26c>)
 8001932:	4598      	cmp	r8, r3
 8001934:	bf08      	it	eq
 8001936:	f8d9 800c 	ldreq.w	r8, [r9, #12]
 800193a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800193e:	0718      	lsls	r0, r3, #28
 8001940:	f140 809d 	bpl.w	8001a7e <_vfiprintf_r+0x176>
 8001944:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 8098 	beq.w	8001a7e <_vfiprintf_r+0x176>
 800194e:	2300      	movs	r3, #0
 8001950:	930b      	str	r3, [sp, #44]	; 0x2c
 8001952:	7829      	ldrb	r1, [r5, #0]
 8001954:	4e88      	ldr	r6, [pc, #544]	; (8001b78 <_vfiprintf_r+0x270>)
 8001956:	9405      	str	r4, [sp, #20]
 8001958:	2320      	movs	r3, #32
 800195a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 800195e:	2330      	movs	r3, #48	; 0x30
 8001960:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 8001964:	2701      	movs	r7, #1
 8001966:	2900      	cmp	r1, #0
 8001968:	d074      	beq.n	8001a54 <_vfiprintf_r+0x14c>
 800196a:	462c      	mov	r4, r5
 800196c:	460b      	mov	r3, r1
 800196e:	e004      	b.n	800197a <_vfiprintf_r+0x72>
 8001970:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 808f 	beq.w	8001a98 <_vfiprintf_r+0x190>
 800197a:	2b25      	cmp	r3, #37	; 0x25
 800197c:	d1f8      	bne.n	8001970 <_vfiprintf_r+0x68>
 800197e:	ebb4 0b05 	subs.w	fp, r4, r5
 8001982:	f040 808c 	bne.w	8001a9e <_vfiprintf_r+0x196>
 8001986:	7823      	ldrb	r3, [r4, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d063      	beq.n	8001a54 <_vfiprintf_r+0x14c>
 800198c:	2300      	movs	r3, #0
 800198e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001992:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8001996:	9306      	str	r3, [sp, #24]
 8001998:	9309      	str	r3, [sp, #36]	; 0x24
 800199a:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 800199e:	931c      	str	r3, [sp, #112]	; 0x70
 80019a0:	3401      	adds	r4, #1
 80019a2:	e004      	b.n	80019ae <_vfiprintf_r+0xa6>
 80019a4:	9a06      	ldr	r2, [sp, #24]
 80019a6:	fa07 f303 	lsl.w	r3, r7, r3
 80019aa:	4313      	orrs	r3, r2
 80019ac:	9306      	str	r3, [sp, #24]
 80019ae:	4625      	mov	r5, r4
 80019b0:	2205      	movs	r2, #5
 80019b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019b6:	4630      	mov	r0, r6
 80019b8:	f000 ff4a 	bl	8002850 <memchr>
 80019bc:	1b83      	subs	r3, r0, r6
 80019be:	2800      	cmp	r0, #0
 80019c0:	d1f0      	bne.n	80019a4 <_vfiprintf_r+0x9c>
 80019c2:	9b06      	ldr	r3, [sp, #24]
 80019c4:	06d9      	lsls	r1, r3, #27
 80019c6:	bf44      	itt	mi
 80019c8:	2220      	movmi	r2, #32
 80019ca:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 80019ce:	7829      	ldrb	r1, [r5, #0]
 80019d0:	071a      	lsls	r2, r3, #28
 80019d2:	bf44      	itt	mi
 80019d4:	222b      	movmi	r2, #43	; 0x2b
 80019d6:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 80019da:	292a      	cmp	r1, #42	; 0x2a
 80019dc:	d170      	bne.n	8001ac0 <_vfiprintf_r+0x1b8>
 80019de:	9a05      	ldr	r2, [sp, #20]
 80019e0:	6811      	ldr	r1, [r2, #0]
 80019e2:	3204      	adds	r2, #4
 80019e4:	2900      	cmp	r1, #0
 80019e6:	9205      	str	r2, [sp, #20]
 80019e8:	f2c0 809b 	blt.w	8001b22 <_vfiprintf_r+0x21a>
 80019ec:	9109      	str	r1, [sp, #36]	; 0x24
 80019ee:	7869      	ldrb	r1, [r5, #1]
 80019f0:	3501      	adds	r5, #1
 80019f2:	292e      	cmp	r1, #46	; 0x2e
 80019f4:	d076      	beq.n	8001ae4 <_vfiprintf_r+0x1dc>
 80019f6:	4c61      	ldr	r4, [pc, #388]	; (8001b7c <_vfiprintf_r+0x274>)
 80019f8:	2203      	movs	r2, #3
 80019fa:	4620      	mov	r0, r4
 80019fc:	f000 ff28 	bl	8002850 <memchr>
 8001a00:	b138      	cbz	r0, 8001a12 <_vfiprintf_r+0x10a>
 8001a02:	9b06      	ldr	r3, [sp, #24]
 8001a04:	1b00      	subs	r0, r0, r4
 8001a06:	2440      	movs	r4, #64	; 0x40
 8001a08:	fa04 f000 	lsl.w	r0, r4, r0
 8001a0c:	4303      	orrs	r3, r0
 8001a0e:	9306      	str	r3, [sp, #24]
 8001a10:	3501      	adds	r5, #1
 8001a12:	f815 1b01 	ldrb.w	r1, [r5], #1
 8001a16:	485a      	ldr	r0, [pc, #360]	; (8001b80 <_vfiprintf_r+0x278>)
 8001a18:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 8001a1c:	2206      	movs	r2, #6
 8001a1e:	f000 ff17 	bl	8002850 <memchr>
 8001a22:	2800      	cmp	r0, #0
 8001a24:	f000 8083 	beq.w	8001b2e <_vfiprintf_r+0x226>
 8001a28:	4b56      	ldr	r3, [pc, #344]	; (8001b84 <_vfiprintf_r+0x27c>)
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d06d      	beq.n	8001b0a <_vfiprintf_r+0x202>
 8001a2e:	aa05      	add	r2, sp, #20
 8001a30:	9200      	str	r2, [sp, #0]
 8001a32:	4b55      	ldr	r3, [pc, #340]	; (8001b88 <_vfiprintf_r+0x280>)
 8001a34:	4642      	mov	r2, r8
 8001a36:	a906      	add	r1, sp, #24
 8001a38:	4648      	mov	r0, r9
 8001a3a:	f3af 8000 	nop.w
 8001a3e:	9003      	str	r0, [sp, #12]
 8001a40:	9b03      	ldr	r3, [sp, #12]
 8001a42:	3301      	adds	r3, #1
 8001a44:	d006      	beq.n	8001a54 <_vfiprintf_r+0x14c>
 8001a46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001a48:	9a03      	ldr	r2, [sp, #12]
 8001a4a:	7829      	ldrb	r1, [r5, #0]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001a50:	2900      	cmp	r1, #0
 8001a52:	d18a      	bne.n	800196a <_vfiprintf_r+0x62>
 8001a54:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8001a58:	065b      	lsls	r3, r3, #25
 8001a5a:	d417      	bmi.n	8001a8c <_vfiprintf_r+0x184>
 8001a5c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001a5e:	b01f      	add	sp, #124	; 0x7c
 8001a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a64:	f7ff fea4 	bl	80017b0 <__sinit>
 8001a68:	4b40      	ldr	r3, [pc, #256]	; (8001b6c <_vfiprintf_r+0x264>)
 8001a6a:	4598      	cmp	r8, r3
 8001a6c:	f47f af5c 	bne.w	8001928 <_vfiprintf_r+0x20>
 8001a70:	f8d9 8004 	ldr.w	r8, [r9, #4]
 8001a74:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8001a78:	0718      	lsls	r0, r3, #28
 8001a7a:	f53f af63 	bmi.w	8001944 <_vfiprintf_r+0x3c>
 8001a7e:	4641      	mov	r1, r8
 8001a80:	4648      	mov	r0, r9
 8001a82:	f000 fb41 	bl	8002108 <__swsetup_r>
 8001a86:	2800      	cmp	r0, #0
 8001a88:	f43f af61 	beq.w	800194e <_vfiprintf_r+0x46>
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a90:	e7e5      	b.n	8001a5e <_vfiprintf_r+0x156>
 8001a92:	f8d9 8008 	ldr.w	r8, [r9, #8]
 8001a96:	e750      	b.n	800193a <_vfiprintf_r+0x32>
 8001a98:	ebb4 0b05 	subs.w	fp, r4, r5
 8001a9c:	d0da      	beq.n	8001a54 <_vfiprintf_r+0x14c>
 8001a9e:	46aa      	mov	sl, r5
 8001aa0:	f1c5 0501 	rsb	r5, r5, #1
 8001aa4:	e003      	b.n	8001aae <_vfiprintf_r+0x1a6>
 8001aa6:	4593      	cmp	fp, r2
 8001aa8:	d936      	bls.n	8001b18 <_vfiprintf_r+0x210>
 8001aaa:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8001aae:	4642      	mov	r2, r8
 8001ab0:	4648      	mov	r0, r9
 8001ab2:	f7ff fee5 	bl	8001880 <__sfputc_r>
 8001ab6:	3001      	adds	r0, #1
 8001ab8:	eb05 020a 	add.w	r2, r5, sl
 8001abc:	d1f3      	bne.n	8001aa6 <_vfiprintf_r+0x19e>
 8001abe:	e7c9      	b.n	8001a54 <_vfiprintf_r+0x14c>
 8001ac0:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8001ac4:	2a09      	cmp	r2, #9
 8001ac6:	d894      	bhi.n	80019f2 <_vfiprintf_r+0xea>
 8001ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001aca:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8001ace:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ad2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001ad6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8001ada:	2a09      	cmp	r2, #9
 8001adc:	d9f5      	bls.n	8001aca <_vfiprintf_r+0x1c2>
 8001ade:	292e      	cmp	r1, #46	; 0x2e
 8001ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8001ae2:	d188      	bne.n	80019f6 <_vfiprintf_r+0xee>
 8001ae4:	7869      	ldrb	r1, [r5, #1]
 8001ae6:	292a      	cmp	r1, #42	; 0x2a
 8001ae8:	d12b      	bne.n	8001b42 <_vfiprintf_r+0x23a>
 8001aea:	9b05      	ldr	r3, [sp, #20]
 8001aec:	78a9      	ldrb	r1, [r5, #2]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	9207      	str	r2, [sp, #28]
 8001af2:	3304      	adds	r3, #4
 8001af4:	2a00      	cmp	r2, #0
 8001af6:	f105 0002 	add.w	r0, r5, #2
 8001afa:	9305      	str	r3, [sp, #20]
 8001afc:	bfb8      	it	lt
 8001afe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001b02:	4605      	mov	r5, r0
 8001b04:	bfb8      	it	lt
 8001b06:	9307      	strlt	r3, [sp, #28]
 8001b08:	e775      	b.n	80019f6 <_vfiprintf_r+0xee>
 8001b0a:	9b05      	ldr	r3, [sp, #20]
 8001b0c:	3307      	adds	r3, #7
 8001b0e:	f023 0307 	bic.w	r3, r3, #7
 8001b12:	3308      	adds	r3, #8
 8001b14:	9305      	str	r3, [sp, #20]
 8001b16:	e796      	b.n	8001a46 <_vfiprintf_r+0x13e>
 8001b18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001b1a:	7823      	ldrb	r3, [r4, #0]
 8001b1c:	445a      	add	r2, fp
 8001b1e:	920b      	str	r2, [sp, #44]	; 0x2c
 8001b20:	e732      	b.n	8001988 <_vfiprintf_r+0x80>
 8001b22:	4249      	negs	r1, r1
 8001b24:	f043 0302 	orr.w	r3, r3, #2
 8001b28:	9109      	str	r1, [sp, #36]	; 0x24
 8001b2a:	9306      	str	r3, [sp, #24]
 8001b2c:	e75f      	b.n	80019ee <_vfiprintf_r+0xe6>
 8001b2e:	aa05      	add	r2, sp, #20
 8001b30:	9200      	str	r2, [sp, #0]
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <_vfiprintf_r+0x280>)
 8001b34:	4642      	mov	r2, r8
 8001b36:	a906      	add	r1, sp, #24
 8001b38:	4648      	mov	r0, r9
 8001b3a:	f000 f8cb 	bl	8001cd4 <_printf_i>
 8001b3e:	9003      	str	r0, [sp, #12]
 8001b40:	e77e      	b.n	8001a40 <_vfiprintf_r+0x138>
 8001b42:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8001b46:	2300      	movs	r3, #0
 8001b48:	2a09      	cmp	r2, #9
 8001b4a:	9307      	str	r3, [sp, #28]
 8001b4c:	f105 0501 	add.w	r5, r5, #1
 8001b50:	f63f af51 	bhi.w	80019f6 <_vfiprintf_r+0xee>
 8001b54:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8001b58:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001b5c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001b60:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8001b64:	2a09      	cmp	r2, #9
 8001b66:	d9f5      	bls.n	8001b54 <_vfiprintf_r+0x24c>
 8001b68:	9307      	str	r3, [sp, #28]
 8001b6a:	e744      	b.n	80019f6 <_vfiprintf_r+0xee>
 8001b6c:	0800b6a0 	.word	0x0800b6a0
 8001b70:	0800b680 	.word	0x0800b680
 8001b74:	0800b660 	.word	0x0800b660
 8001b78:	0800b858 	.word	0x0800b858
 8001b7c:	0800b860 	.word	0x0800b860
 8001b80:	0800b864 	.word	0x0800b864
 8001b84:	00000000 	.word	0x00000000
 8001b88:	080018bd 	.word	0x080018bd

08001b8c <vfiprintf>:
 8001b8c:	b410      	push	{r4}
 8001b8e:	4c05      	ldr	r4, [pc, #20]	; (8001ba4 <vfiprintf+0x18>)
 8001b90:	4684      	mov	ip, r0
 8001b92:	4613      	mov	r3, r2
 8001b94:	6820      	ldr	r0, [r4, #0]
 8001b96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b9a:	460a      	mov	r2, r1
 8001b9c:	4661      	mov	r1, ip
 8001b9e:	f7ff beb3 	b.w	8001908 <_vfiprintf_r>
 8001ba2:	bf00      	nop
 8001ba4:	20000004 	.word	0x20000004

08001ba8 <_printf_common>:
 8001ba8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bac:	4692      	mov	sl, r2
 8001bae:	461f      	mov	r7, r3
 8001bb0:	690a      	ldr	r2, [r1, #16]
 8001bb2:	688b      	ldr	r3, [r1, #8]
 8001bb4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	bfb8      	it	lt
 8001bbc:	461a      	movlt	r2, r3
 8001bbe:	f8ca 2000 	str.w	r2, [sl]
 8001bc2:	f891 3043 	ldrb.w	r3, [r1, #67]	; 0x43
 8001bc6:	460c      	mov	r4, r1
 8001bc8:	4606      	mov	r6, r0
 8001bca:	b113      	cbz	r3, 8001bd2 <_printf_common+0x2a>
 8001bcc:	3201      	adds	r2, #1
 8001bce:	f8ca 2000 	str.w	r2, [sl]
 8001bd2:	6822      	ldr	r2, [r4, #0]
 8001bd4:	0691      	lsls	r1, r2, #26
 8001bd6:	d55d      	bpl.n	8001c94 <_printf_common+0xec>
 8001bd8:	f8da 3000 	ldr.w	r3, [sl]
 8001bdc:	3302      	adds	r3, #2
 8001bde:	f8ca 3000 	str.w	r3, [sl]
 8001be2:	6822      	ldr	r2, [r4, #0]
 8001be4:	f012 0f06 	tst.w	r2, #6
 8001be8:	4611      	mov	r1, r2
 8001bea:	d11e      	bne.n	8001c2a <_printf_common+0x82>
 8001bec:	68e1      	ldr	r1, [r4, #12]
 8001bee:	1acb      	subs	r3, r1, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	bfd8      	it	le
 8001bf4:	4611      	movle	r1, r2
 8001bf6:	dd18      	ble.n	8001c2a <_printf_common+0x82>
 8001bf8:	f104 0b19 	add.w	fp, r4, #25
 8001bfc:	f04f 0800 	mov.w	r8, #0
 8001c00:	e005      	b.n	8001c0e <_printf_common+0x66>
 8001c02:	68e5      	ldr	r5, [r4, #12]
 8001c04:	f8da 3000 	ldr.w	r3, [sl]
 8001c08:	1aed      	subs	r5, r5, r3
 8001c0a:	4545      	cmp	r5, r8
 8001c0c:	dd0c      	ble.n	8001c28 <_printf_common+0x80>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	465a      	mov	r2, fp
 8001c12:	4639      	mov	r1, r7
 8001c14:	4630      	mov	r0, r6
 8001c16:	47c8      	blx	r9
 8001c18:	3001      	adds	r0, #1
 8001c1a:	f108 0801 	add.w	r8, r8, #1
 8001c1e:	d1f0      	bne.n	8001c02 <_printf_common+0x5a>
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c28:	6821      	ldr	r1, [r4, #0]
 8001c2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001c2e:	3b00      	subs	r3, #0
 8001c30:	bf18      	it	ne
 8001c32:	2301      	movne	r3, #1
 8001c34:	068a      	lsls	r2, r1, #26
 8001c36:	d50a      	bpl.n	8001c4e <_printf_common+0xa6>
 8001c38:	18e1      	adds	r1, r4, r3
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	2030      	movs	r0, #48	; 0x30
 8001c3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001c42:	4422      	add	r2, r4
 8001c44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001c48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001c52:	4639      	mov	r1, r7
 8001c54:	4630      	mov	r0, r6
 8001c56:	47c8      	blx	r9
 8001c58:	3001      	adds	r0, #1
 8001c5a:	d0e1      	beq.n	8001c20 <_printf_common+0x78>
 8001c5c:	6823      	ldr	r3, [r4, #0]
 8001c5e:	f003 0306 	and.w	r3, r3, #6
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	d01d      	beq.n	8001ca2 <_printf_common+0xfa>
 8001c66:	68a3      	ldr	r3, [r4, #8]
 8001c68:	6922      	ldr	r2, [r4, #16]
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	dd25      	ble.n	8001cba <_printf_common+0x112>
 8001c6e:	f04f 0800 	mov.w	r8, #0
 8001c72:	1a9b      	subs	r3, r3, r2
 8001c74:	4498      	add	r8, r3
 8001c76:	341a      	adds	r4, #26
 8001c78:	2500      	movs	r5, #0
 8001c7a:	e001      	b.n	8001c80 <_printf_common+0xd8>
 8001c7c:	4545      	cmp	r5, r8
 8001c7e:	da1c      	bge.n	8001cba <_printf_common+0x112>
 8001c80:	2301      	movs	r3, #1
 8001c82:	4622      	mov	r2, r4
 8001c84:	4639      	mov	r1, r7
 8001c86:	4630      	mov	r0, r6
 8001c88:	47c8      	blx	r9
 8001c8a:	3001      	adds	r0, #1
 8001c8c:	f105 0501 	add.w	r5, r5, #1
 8001c90:	d1f4      	bne.n	8001c7c <_printf_common+0xd4>
 8001c92:	e7c5      	b.n	8001c20 <_printf_common+0x78>
 8001c94:	f012 0f06 	tst.w	r2, #6
 8001c98:	d012      	beq.n	8001cc0 <_printf_common+0x118>
 8001c9a:	3b00      	subs	r3, #0
 8001c9c:	bf18      	it	ne
 8001c9e:	2301      	movne	r3, #1
 8001ca0:	e7d5      	b.n	8001c4e <_printf_common+0xa6>
 8001ca2:	f8da 3000 	ldr.w	r3, [sl]
 8001ca6:	68e1      	ldr	r1, [r4, #12]
 8001ca8:	6922      	ldr	r2, [r4, #16]
 8001caa:	1ac9      	subs	r1, r1, r3
 8001cac:	68a3      	ldr	r3, [r4, #8]
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	ea21 78e1 	bic.w	r8, r1, r1, asr #31
 8001cb4:	dcdd      	bgt.n	8001c72 <_printf_common+0xca>
 8001cb6:	2900      	cmp	r1, #0
 8001cb8:	dcdd      	bgt.n	8001c76 <_printf_common+0xce>
 8001cba:	2000      	movs	r0, #0
 8001cbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cc0:	68e1      	ldr	r1, [r4, #12]
 8001cc2:	f8da 3000 	ldr.w	r3, [sl]
 8001cc6:	1acb      	subs	r3, r1, r3
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	bfd8      	it	le
 8001ccc:	4611      	movle	r1, r2
 8001cce:	dc93      	bgt.n	8001bf8 <_printf_common+0x50>
 8001cd0:	e7ab      	b.n	8001c2a <_printf_common+0x82>
 8001cd2:	bf00      	nop

08001cd4 <_printf_i>:
 8001cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cd8:	460c      	mov	r4, r1
 8001cda:	b084      	sub	sp, #16
 8001cdc:	4690      	mov	r8, r2
 8001cde:	7e22      	ldrb	r2, [r4, #24]
 8001ce0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001ce2:	4607      	mov	r7, r0
 8001ce4:	4699      	mov	r9, r3
 8001ce6:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8001cea:	2a00      	cmp	r2, #0
 8001cec:	d033      	beq.n	8001d56 <_printf_i+0x82>
 8001cee:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8001cf2:	b2dd      	uxtb	r5, r3
 8001cf4:	2d20      	cmp	r5, #32
 8001cf6:	d867      	bhi.n	8001dc8 <_printf_i+0xf4>
 8001cf8:	2b20      	cmp	r3, #32
 8001cfa:	d865      	bhi.n	8001dc8 <_printf_i+0xf4>
 8001cfc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001d00:	006400de 	.word	0x006400de
 8001d04:	00640064 	.word	0x00640064
 8001d08:	00640064 	.word	0x00640064
 8001d0c:	00640064 	.word	0x00640064
 8001d10:	00640064 	.word	0x00640064
 8001d14:	00a30064 	.word	0x00a30064
 8001d18:	0064006e 	.word	0x0064006e
 8001d1c:	00640064 	.word	0x00640064
 8001d20:	006e0064 	.word	0x006e0064
 8001d24:	00640064 	.word	0x00640064
 8001d28:	00640064 	.word	0x00640064
 8001d2c:	007f0021 	.word	0x007f0021
 8001d30:	006400c0 	.word	0x006400c0
 8001d34:	00ae0064 	.word	0x00ae0064
 8001d38:	007f0064 	.word	0x007f0064
 8001d3c:	00640064 	.word	0x00640064
 8001d40:	00e5      	.short	0x00e5
 8001d42:	6823      	ldr	r3, [r4, #0]
 8001d44:	061a      	lsls	r2, r3, #24
 8001d46:	f140 8104 	bpl.w	8001f52 <_printf_i+0x27e>
 8001d4a:	680b      	ldr	r3, [r1, #0]
 8001d4c:	6962      	ldr	r2, [r4, #20]
 8001d4e:	1d1d      	adds	r5, r3, #4
 8001d50:	600d      	str	r5, [r1, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	2300      	movs	r3, #0
 8001d58:	4682      	mov	sl, r0
 8001d5a:	6123      	str	r3, [r4, #16]
 8001d5c:	f8cd 9000 	str.w	r9, [sp]
 8001d60:	4643      	mov	r3, r8
 8001d62:	aa03      	add	r2, sp, #12
 8001d64:	4621      	mov	r1, r4
 8001d66:	4638      	mov	r0, r7
 8001d68:	f7ff ff1e 	bl	8001ba8 <_printf_common>
 8001d6c:	3001      	adds	r0, #1
 8001d6e:	d020      	beq.n	8001db2 <_printf_i+0xde>
 8001d70:	6923      	ldr	r3, [r4, #16]
 8001d72:	4652      	mov	r2, sl
 8001d74:	4641      	mov	r1, r8
 8001d76:	4638      	mov	r0, r7
 8001d78:	47c8      	blx	r9
 8001d7a:	3001      	adds	r0, #1
 8001d7c:	d019      	beq.n	8001db2 <_printf_i+0xde>
 8001d7e:	6823      	ldr	r3, [r4, #0]
 8001d80:	68e0      	ldr	r0, [r4, #12]
 8001d82:	9e03      	ldr	r6, [sp, #12]
 8001d84:	079b      	lsls	r3, r3, #30
 8001d86:	d519      	bpl.n	8001dbc <_printf_i+0xe8>
 8001d88:	1b83      	subs	r3, r0, r6
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	dd16      	ble.n	8001dbc <_printf_i+0xe8>
 8001d8e:	f104 0a19 	add.w	sl, r4, #25
 8001d92:	2500      	movs	r5, #0
 8001d94:	e004      	b.n	8001da0 <_printf_i+0xcc>
 8001d96:	68e0      	ldr	r0, [r4, #12]
 8001d98:	9e03      	ldr	r6, [sp, #12]
 8001d9a:	1b83      	subs	r3, r0, r6
 8001d9c:	42ab      	cmp	r3, r5
 8001d9e:	dd0d      	ble.n	8001dbc <_printf_i+0xe8>
 8001da0:	2301      	movs	r3, #1
 8001da2:	4652      	mov	r2, sl
 8001da4:	4641      	mov	r1, r8
 8001da6:	4638      	mov	r0, r7
 8001da8:	47c8      	blx	r9
 8001daa:	3001      	adds	r0, #1
 8001dac:	f105 0501 	add.w	r5, r5, #1
 8001db0:	d1f1      	bne.n	8001d96 <_printf_i+0xc2>
 8001db2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001db6:	b004      	add	sp, #16
 8001db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dbc:	42b0      	cmp	r0, r6
 8001dbe:	bfb8      	it	lt
 8001dc0:	4630      	movlt	r0, r6
 8001dc2:	b004      	add	sp, #16
 8001dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dc8:	2301      	movs	r3, #1
 8001dca:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001dce:	6123      	str	r3, [r4, #16]
 8001dd0:	f104 0a42 	add.w	sl, r4, #66	; 0x42
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001dda:	e7bf      	b.n	8001d5c <_printf_i+0x88>
 8001ddc:	6823      	ldr	r3, [r4, #0]
 8001dde:	061a      	lsls	r2, r3, #24
 8001de0:	d402      	bmi.n	8001de8 <_printf_i+0x114>
 8001de2:	065e      	lsls	r6, r3, #25
 8001de4:	f100 80c1 	bmi.w	8001f6a <_printf_i+0x296>
 8001de8:	680d      	ldr	r5, [r1, #0]
 8001dea:	682a      	ldr	r2, [r5, #0]
 8001dec:	3504      	adds	r5, #4
 8001dee:	600d      	str	r5, [r1, #0]
 8001df0:	4615      	mov	r5, r2
 8001df2:	2a00      	cmp	r2, #0
 8001df4:	db6b      	blt.n	8001ece <_printf_i+0x1fa>
 8001df6:	f8df c184 	ldr.w	ip, [pc, #388]	; 8001f7c <_printf_i+0x2a8>
 8001dfa:	260a      	movs	r6, #10
 8001dfc:	e010      	b.n	8001e20 <_printf_i+0x14c>
 8001dfe:	6823      	ldr	r3, [r4, #0]
 8001e00:	061d      	lsls	r5, r3, #24
 8001e02:	f140 809c 	bpl.w	8001f3e <_printf_i+0x26a>
 8001e06:	680b      	ldr	r3, [r1, #0]
 8001e08:	1d1d      	adds	r5, r3, #4
 8001e0a:	600d      	str	r5, [r1, #0]
 8001e0c:	681d      	ldr	r5, [r3, #0]
 8001e0e:	f8df c16c 	ldr.w	ip, [pc, #364]	; 8001f7c <_printf_i+0x2a8>
 8001e12:	2a6f      	cmp	r2, #111	; 0x6f
 8001e14:	bf0c      	ite	eq
 8001e16:	2608      	moveq	r6, #8
 8001e18:	260a      	movne	r6, #10
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e20:	6862      	ldr	r2, [r4, #4]
 8001e22:	60a2      	str	r2, [r4, #8]
 8001e24:	2a00      	cmp	r2, #0
 8001e26:	db7f      	blt.n	8001f28 <_printf_i+0x254>
 8001e28:	6823      	ldr	r3, [r4, #0]
 8001e2a:	f023 0304 	bic.w	r3, r3, #4
 8001e2e:	6023      	str	r3, [r4, #0]
 8001e30:	2d00      	cmp	r5, #0
 8001e32:	d15b      	bne.n	8001eec <_printf_i+0x218>
 8001e34:	2a00      	cmp	r2, #0
 8001e36:	d179      	bne.n	8001f2c <_printf_i+0x258>
 8001e38:	4682      	mov	sl, r0
 8001e3a:	2e08      	cmp	r6, #8
 8001e3c:	d065      	beq.n	8001f0a <_printf_i+0x236>
 8001e3e:	eba0 000a 	sub.w	r0, r0, sl
 8001e42:	6120      	str	r0, [r4, #16]
 8001e44:	e78a      	b.n	8001d5c <_printf_i+0x88>
 8001e46:	680b      	ldr	r3, [r1, #0]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	6818      	ldr	r0, [r3, #0]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	600b      	str	r3, [r1, #0]
 8001e50:	f104 0a42 	add.w	sl, r4, #66	; 0x42
 8001e54:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
 8001e58:	6122      	str	r2, [r4, #16]
 8001e5a:	e7bb      	b.n	8001dd4 <_printf_i+0x100>
 8001e5c:	680b      	ldr	r3, [r1, #0]
 8001e5e:	6862      	ldr	r2, [r4, #4]
 8001e60:	1d18      	adds	r0, r3, #4
 8001e62:	6008      	str	r0, [r1, #0]
 8001e64:	f8d3 a000 	ldr.w	sl, [r3]
 8001e68:	2100      	movs	r1, #0
 8001e6a:	4650      	mov	r0, sl
 8001e6c:	f000 fcf0 	bl	8002850 <memchr>
 8001e70:	2800      	cmp	r0, #0
 8001e72:	f000 8081 	beq.w	8001f78 <_printf_i+0x2a4>
 8001e76:	eba0 000a 	sub.w	r0, r0, sl
 8001e7a:	6060      	str	r0, [r4, #4]
 8001e7c:	6120      	str	r0, [r4, #16]
 8001e7e:	e7a9      	b.n	8001dd4 <_printf_i+0x100>
 8001e80:	6823      	ldr	r3, [r4, #0]
 8001e82:	f043 0320 	orr.w	r3, r3, #32
 8001e86:	6023      	str	r3, [r4, #0]
 8001e88:	2278      	movs	r2, #120	; 0x78
 8001e8a:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8001f80 <_printf_i+0x2ac>
 8001e8e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001e92:	680a      	ldr	r2, [r1, #0]
 8001e94:	1d15      	adds	r5, r2, #4
 8001e96:	600d      	str	r5, [r1, #0]
 8001e98:	061d      	lsls	r5, r3, #24
 8001e9a:	d443      	bmi.n	8001f24 <_printf_i+0x250>
 8001e9c:	0659      	lsls	r1, r3, #25
 8001e9e:	d541      	bpl.n	8001f24 <_printf_i+0x250>
 8001ea0:	8815      	ldrh	r5, [r2, #0]
 8001ea2:	07de      	lsls	r6, r3, #31
 8001ea4:	bf44      	itt	mi
 8001ea6:	f043 0320 	orrmi.w	r3, r3, #32
 8001eaa:	6023      	strmi	r3, [r4, #0]
 8001eac:	2d00      	cmp	r5, #0
 8001eae:	d144      	bne.n	8001f3a <_printf_i+0x266>
 8001eb0:	6823      	ldr	r3, [r4, #0]
 8001eb2:	f023 0320 	bic.w	r3, r3, #32
 8001eb6:	6023      	str	r3, [r4, #0]
 8001eb8:	2610      	movs	r6, #16
 8001eba:	e7ae      	b.n	8001e1a <_printf_i+0x146>
 8001ebc:	2358      	movs	r3, #88	; 0x58
 8001ebe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001ec2:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8001f7c <_printf_i+0x2a8>
 8001ec6:	6823      	ldr	r3, [r4, #0]
 8001ec8:	e7e3      	b.n	8001e92 <_printf_i+0x1be>
 8001eca:	6823      	ldr	r3, [r4, #0]
 8001ecc:	e7dc      	b.n	8001e88 <_printf_i+0x1b4>
 8001ece:	6862      	ldr	r2, [r4, #4]
 8001ed0:	60a2      	str	r2, [r4, #8]
 8001ed2:	212d      	movs	r1, #45	; 0x2d
 8001ed4:	2a00      	cmp	r2, #0
 8001ed6:	f1c5 0500 	rsb	r5, r5, #0
 8001eda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001ede:	db02      	blt.n	8001ee6 <_printf_i+0x212>
 8001ee0:	f023 0304 	bic.w	r3, r3, #4
 8001ee4:	6023      	str	r3, [r4, #0]
 8001ee6:	f8df c094 	ldr.w	ip, [pc, #148]	; 8001f7c <_printf_i+0x2a8>
 8001eea:	260a      	movs	r6, #10
 8001eec:	4682      	mov	sl, r0
 8001eee:	fbb5 f3f6 	udiv	r3, r5, r6
 8001ef2:	fb06 5113 	mls	r1, r6, r3, r5
 8001ef6:	462a      	mov	r2, r5
 8001ef8:	f81c 1001 	ldrb.w	r1, [ip, r1]
 8001efc:	f80a 1d01 	strb.w	r1, [sl, #-1]!
 8001f00:	42b2      	cmp	r2, r6
 8001f02:	461d      	mov	r5, r3
 8001f04:	d2f3      	bcs.n	8001eee <_printf_i+0x21a>
 8001f06:	2e08      	cmp	r6, #8
 8001f08:	d199      	bne.n	8001e3e <_printf_i+0x16a>
 8001f0a:	6823      	ldr	r3, [r4, #0]
 8001f0c:	07d9      	lsls	r1, r3, #31
 8001f0e:	d596      	bpl.n	8001e3e <_printf_i+0x16a>
 8001f10:	6862      	ldr	r2, [r4, #4]
 8001f12:	6923      	ldr	r3, [r4, #16]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	dc92      	bgt.n	8001e3e <_printf_i+0x16a>
 8001f18:	2330      	movs	r3, #48	; 0x30
 8001f1a:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8001f1e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8001f22:	e78c      	b.n	8001e3e <_printf_i+0x16a>
 8001f24:	6815      	ldr	r5, [r2, #0]
 8001f26:	e7bc      	b.n	8001ea2 <_printf_i+0x1ce>
 8001f28:	2d00      	cmp	r5, #0
 8001f2a:	d1df      	bne.n	8001eec <_printf_i+0x218>
 8001f2c:	f89c 3000 	ldrb.w	r3, [ip]
 8001f30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f34:	f104 0a42 	add.w	sl, r4, #66	; 0x42
 8001f38:	e77f      	b.n	8001e3a <_printf_i+0x166>
 8001f3a:	2610      	movs	r6, #16
 8001f3c:	e76d      	b.n	8001e1a <_printf_i+0x146>
 8001f3e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001f42:	680b      	ldr	r3, [r1, #0]
 8001f44:	f103 0504 	add.w	r5, r3, #4
 8001f48:	600d      	str	r5, [r1, #0]
 8001f4a:	bf0c      	ite	eq
 8001f4c:	681d      	ldreq	r5, [r3, #0]
 8001f4e:	881d      	ldrhne	r5, [r3, #0]
 8001f50:	e75d      	b.n	8001e0e <_printf_i+0x13a>
 8001f52:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001f56:	680b      	ldr	r3, [r1, #0]
 8001f58:	6962      	ldr	r2, [r4, #20]
 8001f5a:	f103 0504 	add.w	r5, r3, #4
 8001f5e:	600d      	str	r5, [r1, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	bf14      	ite	ne
 8001f64:	801a      	strhne	r2, [r3, #0]
 8001f66:	601a      	streq	r2, [r3, #0]
 8001f68:	e6f5      	b.n	8001d56 <_printf_i+0x82>
 8001f6a:	680a      	ldr	r2, [r1, #0]
 8001f6c:	f9b2 5000 	ldrsh.w	r5, [r2]
 8001f70:	3204      	adds	r2, #4
 8001f72:	600a      	str	r2, [r1, #0]
 8001f74:	462a      	mov	r2, r5
 8001f76:	e73c      	b.n	8001df2 <_printf_i+0x11e>
 8001f78:	6860      	ldr	r0, [r4, #4]
 8001f7a:	e77f      	b.n	8001e7c <_printf_i+0x1a8>
 8001f7c:	0800b86c 	.word	0x0800b86c
 8001f80:	0800b880 	.word	0x0800b880

08001f84 <__sread>:
 8001f84:	b510      	push	{r4, lr}
 8001f86:	460c      	mov	r4, r1
 8001f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f8c:	f000 fd54 	bl	8002a38 <_read_r>
 8001f90:	2800      	cmp	r0, #0
 8001f92:	db03      	blt.n	8001f9c <__sread+0x18>
 8001f94:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f96:	4403      	add	r3, r0
 8001f98:	6563      	str	r3, [r4, #84]	; 0x54
 8001f9a:	bd10      	pop	{r4, pc}
 8001f9c:	89a3      	ldrh	r3, [r4, #12]
 8001f9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fa2:	81a3      	strh	r3, [r4, #12]
 8001fa4:	bd10      	pop	{r4, pc}
 8001fa6:	bf00      	nop

08001fa8 <__seofread>:
 8001fa8:	2000      	movs	r0, #0
 8001faa:	4770      	bx	lr

08001fac <__swrite>:
 8001fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fb0:	460c      	mov	r4, r1
 8001fb2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 8001fb6:	461f      	mov	r7, r3
 8001fb8:	05cb      	lsls	r3, r1, #23
 8001fba:	4605      	mov	r5, r0
 8001fbc:	4616      	mov	r6, r2
 8001fbe:	d40b      	bmi.n	8001fd8 <__swrite+0x2c>
 8001fc0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8001fc4:	81a1      	strh	r1, [r4, #12]
 8001fc6:	463b      	mov	r3, r7
 8001fc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001fcc:	4632      	mov	r2, r6
 8001fce:	4628      	mov	r0, r5
 8001fd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001fd4:	f000 b882 	b.w	80020dc <_write_r>
 8001fd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001fdc:	2302      	movs	r3, #2
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f000 fb92 	bl	8002708 <_lseek_r>
 8001fe4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8001fe8:	e7ea      	b.n	8001fc0 <__swrite+0x14>
 8001fea:	bf00      	nop

08001fec <__sseek>:
 8001fec:	b510      	push	{r4, lr}
 8001fee:	460c      	mov	r4, r1
 8001ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ff4:	f000 fb88 	bl	8002708 <_lseek_r>
 8001ff8:	89a3      	ldrh	r3, [r4, #12]
 8001ffa:	1c42      	adds	r2, r0, #1
 8001ffc:	bf0e      	itee	eq
 8001ffe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002002:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002006:	6560      	strne	r0, [r4, #84]	; 0x54
 8002008:	81a3      	strh	r3, [r4, #12]
 800200a:	bd10      	pop	{r4, pc}

0800200c <__sclose>:
 800200c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002010:	f000 b8fc 	b.w	800220c <_close_r>

08002014 <__swbuf_r>:
 8002014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002016:	460d      	mov	r5, r1
 8002018:	4614      	mov	r4, r2
 800201a:	4606      	mov	r6, r0
 800201c:	b108      	cbz	r0, 8002022 <__swbuf_r+0xe>
 800201e:	6983      	ldr	r3, [r0, #24]
 8002020:	b343      	cbz	r3, 8002074 <__swbuf_r+0x60>
 8002022:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <__swbuf_r+0xa4>)
 8002024:	429c      	cmp	r4, r3
 8002026:	d02a      	beq.n	800207e <__swbuf_r+0x6a>
 8002028:	4b24      	ldr	r3, [pc, #144]	; (80020bc <__swbuf_r+0xa8>)
 800202a:	429c      	cmp	r4, r3
 800202c:	d029      	beq.n	8002082 <__swbuf_r+0x6e>
 800202e:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <__swbuf_r+0xac>)
 8002030:	429c      	cmp	r4, r3
 8002032:	bf08      	it	eq
 8002034:	68f4      	ldreq	r4, [r6, #12]
 8002036:	89a3      	ldrh	r3, [r4, #12]
 8002038:	69a2      	ldr	r2, [r4, #24]
 800203a:	60a2      	str	r2, [r4, #8]
 800203c:	071a      	lsls	r2, r3, #28
 800203e:	d522      	bpl.n	8002086 <__swbuf_r+0x72>
 8002040:	6923      	ldr	r3, [r4, #16]
 8002042:	b303      	cbz	r3, 8002086 <__swbuf_r+0x72>
 8002044:	6822      	ldr	r2, [r4, #0]
 8002046:	6961      	ldr	r1, [r4, #20]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	b2ed      	uxtb	r5, r5
 800204c:	4299      	cmp	r1, r3
 800204e:	462f      	mov	r7, r5
 8002050:	dd29      	ble.n	80020a6 <__swbuf_r+0x92>
 8002052:	3301      	adds	r3, #1
 8002054:	68a1      	ldr	r1, [r4, #8]
 8002056:	3901      	subs	r1, #1
 8002058:	60a1      	str	r1, [r4, #8]
 800205a:	1c51      	adds	r1, r2, #1
 800205c:	6021      	str	r1, [r4, #0]
 800205e:	7015      	strb	r5, [r2, #0]
 8002060:	6962      	ldr	r2, [r4, #20]
 8002062:	429a      	cmp	r2, r3
 8002064:	d016      	beq.n	8002094 <__swbuf_r+0x80>
 8002066:	89a3      	ldrh	r3, [r4, #12]
 8002068:	07db      	lsls	r3, r3, #31
 800206a:	d501      	bpl.n	8002070 <__swbuf_r+0x5c>
 800206c:	2d0a      	cmp	r5, #10
 800206e:	d011      	beq.n	8002094 <__swbuf_r+0x80>
 8002070:	4638      	mov	r0, r7
 8002072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002074:	f7ff fb9c 	bl	80017b0 <__sinit>
 8002078:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <__swbuf_r+0xa4>)
 800207a:	429c      	cmp	r4, r3
 800207c:	d1d4      	bne.n	8002028 <__swbuf_r+0x14>
 800207e:	6874      	ldr	r4, [r6, #4]
 8002080:	e7d9      	b.n	8002036 <__swbuf_r+0x22>
 8002082:	68b4      	ldr	r4, [r6, #8]
 8002084:	e7d7      	b.n	8002036 <__swbuf_r+0x22>
 8002086:	4621      	mov	r1, r4
 8002088:	4630      	mov	r0, r6
 800208a:	f000 f83d 	bl	8002108 <__swsetup_r>
 800208e:	b938      	cbnz	r0, 80020a0 <__swbuf_r+0x8c>
 8002090:	6923      	ldr	r3, [r4, #16]
 8002092:	e7d7      	b.n	8002044 <__swbuf_r+0x30>
 8002094:	4621      	mov	r1, r4
 8002096:	4630      	mov	r0, r6
 8002098:	f000 f954 	bl	8002344 <_fflush_r>
 800209c:	2800      	cmp	r0, #0
 800209e:	d0e7      	beq.n	8002070 <__swbuf_r+0x5c>
 80020a0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80020a4:	e7e4      	b.n	8002070 <__swbuf_r+0x5c>
 80020a6:	4621      	mov	r1, r4
 80020a8:	4630      	mov	r0, r6
 80020aa:	f000 f94b 	bl	8002344 <_fflush_r>
 80020ae:	2800      	cmp	r0, #0
 80020b0:	d1f6      	bne.n	80020a0 <__swbuf_r+0x8c>
 80020b2:	6822      	ldr	r2, [r4, #0]
 80020b4:	2301      	movs	r3, #1
 80020b6:	e7cd      	b.n	8002054 <__swbuf_r+0x40>
 80020b8:	0800b6a0 	.word	0x0800b6a0
 80020bc:	0800b680 	.word	0x0800b680
 80020c0:	0800b660 	.word	0x0800b660

080020c4 <__swbuf>:
 80020c4:	b410      	push	{r4}
 80020c6:	4c04      	ldr	r4, [pc, #16]	; (80020d8 <__swbuf+0x14>)
 80020c8:	4603      	mov	r3, r0
 80020ca:	460a      	mov	r2, r1
 80020cc:	6820      	ldr	r0, [r4, #0]
 80020ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020d2:	4619      	mov	r1, r3
 80020d4:	f7ff bf9e 	b.w	8002014 <__swbuf_r>
 80020d8:	20000004 	.word	0x20000004

080020dc <_write_r>:
 80020dc:	b538      	push	{r3, r4, r5, lr}
 80020de:	460c      	mov	r4, r1
 80020e0:	4d08      	ldr	r5, [pc, #32]	; (8002104 <_write_r+0x28>)
 80020e2:	4684      	mov	ip, r0
 80020e4:	4611      	mov	r1, r2
 80020e6:	4620      	mov	r0, r4
 80020e8:	461a      	mov	r2, r3
 80020ea:	2300      	movs	r3, #0
 80020ec:	602b      	str	r3, [r5, #0]
 80020ee:	4664      	mov	r4, ip
 80020f0:	f7fe fe76 	bl	8000de0 <_write>
 80020f4:	1c43      	adds	r3, r0, #1
 80020f6:	d000      	beq.n	80020fa <_write_r+0x1e>
 80020f8:	bd38      	pop	{r3, r4, r5, pc}
 80020fa:	682b      	ldr	r3, [r5, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0fb      	beq.n	80020f8 <_write_r+0x1c>
 8002100:	6023      	str	r3, [r4, #0]
 8002102:	bd38      	pop	{r3, r4, r5, pc}
 8002104:	200003a4 	.word	0x200003a4

08002108 <__swsetup_r>:
 8002108:	4b3c      	ldr	r3, [pc, #240]	; (80021fc <__swsetup_r+0xf4>)
 800210a:	b570      	push	{r4, r5, r6, lr}
 800210c:	681d      	ldr	r5, [r3, #0]
 800210e:	4606      	mov	r6, r0
 8002110:	460c      	mov	r4, r1
 8002112:	b10d      	cbz	r5, 8002118 <__swsetup_r+0x10>
 8002114:	69ab      	ldr	r3, [r5, #24]
 8002116:	b1e3      	cbz	r3, 8002152 <__swsetup_r+0x4a>
 8002118:	4b39      	ldr	r3, [pc, #228]	; (8002200 <__swsetup_r+0xf8>)
 800211a:	429c      	cmp	r4, r3
 800211c:	d01f      	beq.n	800215e <__swsetup_r+0x56>
 800211e:	4b39      	ldr	r3, [pc, #228]	; (8002204 <__swsetup_r+0xfc>)
 8002120:	429c      	cmp	r4, r3
 8002122:	d04d      	beq.n	80021c0 <__swsetup_r+0xb8>
 8002124:	4b38      	ldr	r3, [pc, #224]	; (8002208 <__swsetup_r+0x100>)
 8002126:	429c      	cmp	r4, r3
 8002128:	bf08      	it	eq
 800212a:	68ec      	ldreq	r4, [r5, #12]
 800212c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002130:	0718      	lsls	r0, r3, #28
 8002132:	b29a      	uxth	r2, r3
 8002134:	d519      	bpl.n	800216a <__swsetup_r+0x62>
 8002136:	6921      	ldr	r1, [r4, #16]
 8002138:	b311      	cbz	r1, 8002180 <__swsetup_r+0x78>
 800213a:	f012 0001 	ands.w	r0, r2, #1
 800213e:	d02f      	beq.n	80021a0 <__swsetup_r+0x98>
 8002140:	2000      	movs	r0, #0
 8002142:	60a0      	str	r0, [r4, #8]
 8002144:	6960      	ldr	r0, [r4, #20]
 8002146:	4240      	negs	r0, r0
 8002148:	61a0      	str	r0, [r4, #24]
 800214a:	2900      	cmp	r1, #0
 800214c:	d02e      	beq.n	80021ac <__swsetup_r+0xa4>
 800214e:	2000      	movs	r0, #0
 8002150:	bd70      	pop	{r4, r5, r6, pc}
 8002152:	4628      	mov	r0, r5
 8002154:	f7ff fb2c 	bl	80017b0 <__sinit>
 8002158:	4b29      	ldr	r3, [pc, #164]	; (8002200 <__swsetup_r+0xf8>)
 800215a:	429c      	cmp	r4, r3
 800215c:	d1df      	bne.n	800211e <__swsetup_r+0x16>
 800215e:	686c      	ldr	r4, [r5, #4]
 8002160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002164:	0718      	lsls	r0, r3, #28
 8002166:	b29a      	uxth	r2, r3
 8002168:	d4e5      	bmi.n	8002136 <__swsetup_r+0x2e>
 800216a:	06d1      	lsls	r1, r2, #27
 800216c:	d53e      	bpl.n	80021ec <__swsetup_r+0xe4>
 800216e:	0752      	lsls	r2, r2, #29
 8002170:	d428      	bmi.n	80021c4 <__swsetup_r+0xbc>
 8002172:	6921      	ldr	r1, [r4, #16]
 8002174:	f043 0308 	orr.w	r3, r3, #8
 8002178:	81a3      	strh	r3, [r4, #12]
 800217a:	b29a      	uxth	r2, r3
 800217c:	2900      	cmp	r1, #0
 800217e:	d1dc      	bne.n	800213a <__swsetup_r+0x32>
 8002180:	f402 7020 	and.w	r0, r2, #640	; 0x280
 8002184:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002188:	d0d7      	beq.n	800213a <__swsetup_r+0x32>
 800218a:	4621      	mov	r1, r4
 800218c:	4630      	mov	r0, r6
 800218e:	f000 fad1 	bl	8002734 <__smakebuf_r>
 8002192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002196:	6921      	ldr	r1, [r4, #16]
 8002198:	b29a      	uxth	r2, r3
 800219a:	f012 0001 	ands.w	r0, r2, #1
 800219e:	d1cf      	bne.n	8002140 <__swsetup_r+0x38>
 80021a0:	0795      	lsls	r5, r2, #30
 80021a2:	bf58      	it	pl
 80021a4:	6960      	ldrpl	r0, [r4, #20]
 80021a6:	60a0      	str	r0, [r4, #8]
 80021a8:	2900      	cmp	r1, #0
 80021aa:	d1d0      	bne.n	800214e <__swsetup_r+0x46>
 80021ac:	0612      	lsls	r2, r2, #24
 80021ae:	bf58      	it	pl
 80021b0:	4608      	movpl	r0, r1
 80021b2:	d5cd      	bpl.n	8002150 <__swsetup_r+0x48>
 80021b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021b8:	81a3      	strh	r3, [r4, #12]
 80021ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021be:	bd70      	pop	{r4, r5, r6, pc}
 80021c0:	68ac      	ldr	r4, [r5, #8]
 80021c2:	e7b3      	b.n	800212c <__swsetup_r+0x24>
 80021c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80021c6:	b151      	cbz	r1, 80021de <__swsetup_r+0xd6>
 80021c8:	f104 0244 	add.w	r2, r4, #68	; 0x44
 80021cc:	4291      	cmp	r1, r2
 80021ce:	d004      	beq.n	80021da <__swsetup_r+0xd2>
 80021d0:	4630      	mov	r0, r6
 80021d2:	f7ff f8f3 	bl	80013bc <_free_r>
 80021d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	6362      	str	r2, [r4, #52]	; 0x34
 80021de:	6921      	ldr	r1, [r4, #16]
 80021e0:	2200      	movs	r2, #0
 80021e2:	e9c4 1200 	strd	r1, r2, [r4]
 80021e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80021ea:	e7c3      	b.n	8002174 <__swsetup_r+0x6c>
 80021ec:	2209      	movs	r2, #9
 80021ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021f2:	6032      	str	r2, [r6, #0]
 80021f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021f8:	81a3      	strh	r3, [r4, #12]
 80021fa:	bd70      	pop	{r4, r5, r6, pc}
 80021fc:	20000004 	.word	0x20000004
 8002200:	0800b6a0 	.word	0x0800b6a0
 8002204:	0800b680 	.word	0x0800b680
 8002208:	0800b660 	.word	0x0800b660

0800220c <_close_r>:
 800220c:	b538      	push	{r3, r4, r5, lr}
 800220e:	4d07      	ldr	r5, [pc, #28]	; (800222c <_close_r+0x20>)
 8002210:	2200      	movs	r2, #0
 8002212:	4604      	mov	r4, r0
 8002214:	4608      	mov	r0, r1
 8002216:	602a      	str	r2, [r5, #0]
 8002218:	f7fe fdfe 	bl	8000e18 <_close>
 800221c:	1c43      	adds	r3, r0, #1
 800221e:	d000      	beq.n	8002222 <_close_r+0x16>
 8002220:	bd38      	pop	{r3, r4, r5, pc}
 8002222:	682b      	ldr	r3, [r5, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0fb      	beq.n	8002220 <_close_r+0x14>
 8002228:	6023      	str	r3, [r4, #0]
 800222a:	bd38      	pop	{r3, r4, r5, pc}
 800222c:	200003a4 	.word	0x200003a4

08002230 <__sflush_r>:
 8002230:	898b      	ldrh	r3, [r1, #12]
 8002232:	071a      	lsls	r2, r3, #28
 8002234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002238:	460c      	mov	r4, r1
 800223a:	4680      	mov	r8, r0
 800223c:	d43f      	bmi.n	80022be <__sflush_r+0x8e>
 800223e:	684a      	ldr	r2, [r1, #4]
 8002240:	2a00      	cmp	r2, #0
 8002242:	dd58      	ble.n	80022f6 <__sflush_r+0xc6>
 8002244:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002246:	2e00      	cmp	r6, #0
 8002248:	d052      	beq.n	80022f0 <__sflush_r+0xc0>
 800224a:	2200      	movs	r2, #0
 800224c:	f8d8 5000 	ldr.w	r5, [r8]
 8002250:	f8c8 2000 	str.w	r2, [r8]
 8002254:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
 8002258:	d151      	bne.n	80022fe <__sflush_r+0xce>
 800225a:	2301      	movs	r3, #1
 800225c:	6a21      	ldr	r1, [r4, #32]
 800225e:	4640      	mov	r0, r8
 8002260:	47b0      	blx	r6
 8002262:	1c43      	adds	r3, r0, #1
 8002264:	d05e      	beq.n	8002324 <__sflush_r+0xf4>
 8002266:	89a3      	ldrh	r3, [r4, #12]
 8002268:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800226a:	075f      	lsls	r7, r3, #29
 800226c:	d505      	bpl.n	800227a <__sflush_r+0x4a>
 800226e:	6863      	ldr	r3, [r4, #4]
 8002270:	1ac0      	subs	r0, r0, r3
 8002272:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002274:	b10b      	cbz	r3, 800227a <__sflush_r+0x4a>
 8002276:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002278:	1ac0      	subs	r0, r0, r3
 800227a:	6a21      	ldr	r1, [r4, #32]
 800227c:	4602      	mov	r2, r0
 800227e:	2300      	movs	r3, #0
 8002280:	4640      	mov	r0, r8
 8002282:	47b0      	blx	r6
 8002284:	1c41      	adds	r1, r0, #1
 8002286:	d13c      	bne.n	8002302 <__sflush_r+0xd2>
 8002288:	f8d8 3000 	ldr.w	r3, [r8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d038      	beq.n	8002302 <__sflush_r+0xd2>
 8002290:	2b1d      	cmp	r3, #29
 8002292:	d001      	beq.n	8002298 <__sflush_r+0x68>
 8002294:	2b16      	cmp	r3, #22
 8002296:	d14d      	bne.n	8002334 <__sflush_r+0x104>
 8002298:	6923      	ldr	r3, [r4, #16]
 800229a:	2200      	movs	r2, #0
 800229c:	e9c4 3200 	strd	r3, r2, [r4]
 80022a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80022a2:	f8c8 5000 	str.w	r5, [r8]
 80022a6:	b319      	cbz	r1, 80022f0 <__sflush_r+0xc0>
 80022a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80022ac:	4299      	cmp	r1, r3
 80022ae:	d002      	beq.n	80022b6 <__sflush_r+0x86>
 80022b0:	4640      	mov	r0, r8
 80022b2:	f7ff f883 	bl	80013bc <_free_r>
 80022b6:	2000      	movs	r0, #0
 80022b8:	6360      	str	r0, [r4, #52]	; 0x34
 80022ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022be:	690e      	ldr	r6, [r1, #16]
 80022c0:	b1b6      	cbz	r6, 80022f0 <__sflush_r+0xc0>
 80022c2:	680d      	ldr	r5, [r1, #0]
 80022c4:	600e      	str	r6, [r1, #0]
 80022c6:	079a      	lsls	r2, r3, #30
 80022c8:	bf0c      	ite	eq
 80022ca:	694b      	ldreq	r3, [r1, #20]
 80022cc:	2300      	movne	r3, #0
 80022ce:	1bad      	subs	r5, r5, r6
 80022d0:	608b      	str	r3, [r1, #8]
 80022d2:	e00b      	b.n	80022ec <__sflush_r+0xbc>
 80022d4:	462b      	mov	r3, r5
 80022d6:	4632      	mov	r2, r6
 80022d8:	6a21      	ldr	r1, [r4, #32]
 80022da:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80022dc:	4640      	mov	r0, r8
 80022de:	47b8      	blx	r7
 80022e0:	f1b0 0c00 	subs.w	ip, r0, #0
 80022e4:	eba5 050c 	sub.w	r5, r5, ip
 80022e8:	4466      	add	r6, ip
 80022ea:	dd13      	ble.n	8002314 <__sflush_r+0xe4>
 80022ec:	2d00      	cmp	r5, #0
 80022ee:	dcf1      	bgt.n	80022d4 <__sflush_r+0xa4>
 80022f0:	2000      	movs	r0, #0
 80022f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022f6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80022f8:	2a00      	cmp	r2, #0
 80022fa:	dca3      	bgt.n	8002244 <__sflush_r+0x14>
 80022fc:	e7f8      	b.n	80022f0 <__sflush_r+0xc0>
 80022fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002300:	e7b3      	b.n	800226a <__sflush_r+0x3a>
 8002302:	2300      	movs	r3, #0
 8002304:	6063      	str	r3, [r4, #4]
 8002306:	6923      	ldr	r3, [r4, #16]
 8002308:	6023      	str	r3, [r4, #0]
 800230a:	89a3      	ldrh	r3, [r4, #12]
 800230c:	04db      	lsls	r3, r3, #19
 800230e:	d5c7      	bpl.n	80022a0 <__sflush_r+0x70>
 8002310:	6560      	str	r0, [r4, #84]	; 0x54
 8002312:	e7c5      	b.n	80022a0 <__sflush_r+0x70>
 8002314:	89a3      	ldrh	r3, [r4, #12]
 8002316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800231a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800231e:	81a3      	strh	r3, [r4, #12]
 8002320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002324:	f8d8 3000 	ldr.w	r3, [r8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d09c      	beq.n	8002266 <__sflush_r+0x36>
 800232c:	2b1d      	cmp	r3, #29
 800232e:	d006      	beq.n	800233e <__sflush_r+0x10e>
 8002330:	2b16      	cmp	r3, #22
 8002332:	d004      	beq.n	800233e <__sflush_r+0x10e>
 8002334:	89a3      	ldrh	r3, [r4, #12]
 8002336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800233a:	81a3      	strh	r3, [r4, #12]
 800233c:	e7d9      	b.n	80022f2 <__sflush_r+0xc2>
 800233e:	f8c8 5000 	str.w	r5, [r8]
 8002342:	e7d5      	b.n	80022f0 <__sflush_r+0xc0>

08002344 <_fflush_r>:
 8002344:	b538      	push	{r3, r4, r5, lr}
 8002346:	690b      	ldr	r3, [r1, #16]
 8002348:	b1bb      	cbz	r3, 800237a <_fflush_r+0x36>
 800234a:	460d      	mov	r5, r1
 800234c:	4604      	mov	r4, r0
 800234e:	b108      	cbz	r0, 8002354 <_fflush_r+0x10>
 8002350:	6983      	ldr	r3, [r0, #24]
 8002352:	b1b3      	cbz	r3, 8002382 <_fflush_r+0x3e>
 8002354:	4b0d      	ldr	r3, [pc, #52]	; (800238c <_fflush_r+0x48>)
 8002356:	429d      	cmp	r5, r3
 8002358:	d011      	beq.n	800237e <_fflush_r+0x3a>
 800235a:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <_fflush_r+0x4c>)
 800235c:	429d      	cmp	r5, r3
 800235e:	d013      	beq.n	8002388 <_fflush_r+0x44>
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <_fflush_r+0x50>)
 8002362:	429d      	cmp	r5, r3
 8002364:	bf08      	it	eq
 8002366:	68e5      	ldreq	r5, [r4, #12]
 8002368:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 800236c:	b12b      	cbz	r3, 800237a <_fflush_r+0x36>
 800236e:	4629      	mov	r1, r5
 8002370:	4620      	mov	r0, r4
 8002372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002376:	f7ff bf5b 	b.w	8002230 <__sflush_r>
 800237a:	2000      	movs	r0, #0
 800237c:	bd38      	pop	{r3, r4, r5, pc}
 800237e:	6865      	ldr	r5, [r4, #4]
 8002380:	e7f2      	b.n	8002368 <_fflush_r+0x24>
 8002382:	f7ff fa15 	bl	80017b0 <__sinit>
 8002386:	e7e5      	b.n	8002354 <_fflush_r+0x10>
 8002388:	68a5      	ldr	r5, [r4, #8]
 800238a:	e7ed      	b.n	8002368 <_fflush_r+0x24>
 800238c:	0800b6a0 	.word	0x0800b6a0
 8002390:	0800b680 	.word	0x0800b680
 8002394:	0800b660 	.word	0x0800b660

08002398 <fflush>:
 8002398:	b538      	push	{r3, r4, r5, lr}
 800239a:	b340      	cbz	r0, 80023ee <fflush+0x56>
 800239c:	6903      	ldr	r3, [r0, #16]
 800239e:	4604      	mov	r4, r0
 80023a0:	b1e3      	cbz	r3, 80023dc <fflush+0x44>
 80023a2:	4b17      	ldr	r3, [pc, #92]	; (8002400 <fflush+0x68>)
 80023a4:	681d      	ldr	r5, [r3, #0]
 80023a6:	b10d      	cbz	r5, 80023ac <fflush+0x14>
 80023a8:	69ab      	ldr	r3, [r5, #24]
 80023aa:	b1cb      	cbz	r3, 80023e0 <fflush+0x48>
 80023ac:	4b15      	ldr	r3, [pc, #84]	; (8002404 <fflush+0x6c>)
 80023ae:	429c      	cmp	r4, r3
 80023b0:	d00f      	beq.n	80023d2 <fflush+0x3a>
 80023b2:	4b15      	ldr	r3, [pc, #84]	; (8002408 <fflush+0x70>)
 80023b4:	429c      	cmp	r4, r3
 80023b6:	d021      	beq.n	80023fc <fflush+0x64>
 80023b8:	4b14      	ldr	r3, [pc, #80]	; (800240c <fflush+0x74>)
 80023ba:	429c      	cmp	r4, r3
 80023bc:	bf08      	it	eq
 80023be:	68ec      	ldreq	r4, [r5, #12]
 80023c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023c4:	b153      	cbz	r3, 80023dc <fflush+0x44>
 80023c6:	4621      	mov	r1, r4
 80023c8:	4628      	mov	r0, r5
 80023ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023ce:	f7ff bf2f 	b.w	8002230 <__sflush_r>
 80023d2:	686c      	ldr	r4, [r5, #4]
 80023d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1f4      	bne.n	80023c6 <fflush+0x2e>
 80023dc:	2000      	movs	r0, #0
 80023de:	bd38      	pop	{r3, r4, r5, pc}
 80023e0:	4628      	mov	r0, r5
 80023e2:	f7ff f9e5 	bl	80017b0 <__sinit>
 80023e6:	4b07      	ldr	r3, [pc, #28]	; (8002404 <fflush+0x6c>)
 80023e8:	429c      	cmp	r4, r3
 80023ea:	d1e2      	bne.n	80023b2 <fflush+0x1a>
 80023ec:	e7f1      	b.n	80023d2 <fflush+0x3a>
 80023ee:	4b08      	ldr	r3, [pc, #32]	; (8002410 <fflush+0x78>)
 80023f0:	4908      	ldr	r1, [pc, #32]	; (8002414 <fflush+0x7c>)
 80023f2:	6818      	ldr	r0, [r3, #0]
 80023f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023f8:	f7ff ba1a 	b.w	8001830 <_fwalk_reent>
 80023fc:	68ac      	ldr	r4, [r5, #8]
 80023fe:	e7df      	b.n	80023c0 <fflush+0x28>
 8002400:	20000004 	.word	0x20000004
 8002404:	0800b6a0 	.word	0x0800b6a0
 8002408:	0800b680 	.word	0x0800b680
 800240c:	0800b660 	.word	0x0800b660
 8002410:	0800b65c 	.word	0x0800b65c
 8002414:	08002345 	.word	0x08002345

08002418 <__sfvwrite_r>:
 8002418:	6893      	ldr	r3, [r2, #8]
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 8085 	beq.w	800252a <__sfvwrite_r+0x112>
 8002420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002424:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8002428:	460c      	mov	r4, r1
 800242a:	0719      	lsls	r1, r3, #28
 800242c:	4680      	mov	r8, r0
 800242e:	b083      	sub	sp, #12
 8002430:	4617      	mov	r7, r2
 8002432:	b298      	uxth	r0, r3
 8002434:	d525      	bpl.n	8002482 <__sfvwrite_r+0x6a>
 8002436:	6923      	ldr	r3, [r4, #16]
 8002438:	b31b      	cbz	r3, 8002482 <__sfvwrite_r+0x6a>
 800243a:	f010 0302 	ands.w	r3, r0, #2
 800243e:	683d      	ldr	r5, [r7, #0]
 8002440:	d02d      	beq.n	800249e <__sfvwrite_r+0x86>
 8002442:	f04f 0a00 	mov.w	sl, #0
 8002446:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 8002704 <__sfvwrite_r+0x2ec>
 800244a:	4656      	mov	r6, sl
 800244c:	46b9      	mov	r9, r7
 800244e:	455e      	cmp	r6, fp
 8002450:	4633      	mov	r3, r6
 8002452:	4652      	mov	r2, sl
 8002454:	bf28      	it	cs
 8002456:	465b      	movcs	r3, fp
 8002458:	4640      	mov	r0, r8
 800245a:	2e00      	cmp	r6, #0
 800245c:	d052      	beq.n	8002504 <__sfvwrite_r+0xec>
 800245e:	6a21      	ldr	r1, [r4, #32]
 8002460:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8002462:	47b8      	blx	r7
 8002464:	2800      	cmp	r0, #0
 8002466:	dd56      	ble.n	8002516 <__sfvwrite_r+0xfe>
 8002468:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800246c:	1a1b      	subs	r3, r3, r0
 800246e:	4482      	add	sl, r0
 8002470:	1a36      	subs	r6, r6, r0
 8002472:	f8c9 3008 	str.w	r3, [r9, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1e9      	bne.n	800244e <__sfvwrite_r+0x36>
 800247a:	2000      	movs	r0, #0
 800247c:	b003      	add	sp, #12
 800247e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002482:	4621      	mov	r1, r4
 8002484:	4640      	mov	r0, r8
 8002486:	f7ff fe3f 	bl	8002108 <__swsetup_r>
 800248a:	2800      	cmp	r0, #0
 800248c:	f040 8136 	bne.w	80026fc <__sfvwrite_r+0x2e4>
 8002490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002494:	683d      	ldr	r5, [r7, #0]
 8002496:	b298      	uxth	r0, r3
 8002498:	f010 0302 	ands.w	r3, r0, #2
 800249c:	d1d1      	bne.n	8002442 <__sfvwrite_r+0x2a>
 800249e:	f010 0901 	ands.w	r9, r0, #1
 80024a2:	d144      	bne.n	800252e <__sfvwrite_r+0x116>
 80024a4:	464e      	mov	r6, r9
 80024a6:	9700      	str	r7, [sp, #0]
 80024a8:	b346      	cbz	r6, 80024fc <__sfvwrite_r+0xe4>
 80024aa:	0582      	lsls	r2, r0, #22
 80024ac:	f8d4 b008 	ldr.w	fp, [r4, #8]
 80024b0:	f140 8083 	bpl.w	80025ba <__sfvwrite_r+0x1a2>
 80024b4:	45b3      	cmp	fp, r6
 80024b6:	465a      	mov	r2, fp
 80024b8:	f200 80b2 	bhi.w	8002620 <__sfvwrite_r+0x208>
 80024bc:	f410 6f90 	tst.w	r0, #1152	; 0x480
 80024c0:	f040 80bf 	bne.w	8002642 <__sfvwrite_r+0x22a>
 80024c4:	6820      	ldr	r0, [r4, #0]
 80024c6:	9201      	str	r2, [sp, #4]
 80024c8:	4649      	mov	r1, r9
 80024ca:	f000 fa11 	bl	80028f0 <memmove>
 80024ce:	68a3      	ldr	r3, [r4, #8]
 80024d0:	9a01      	ldr	r2, [sp, #4]
 80024d2:	eba3 010b 	sub.w	r1, r3, fp
 80024d6:	6823      	ldr	r3, [r4, #0]
 80024d8:	60a1      	str	r1, [r4, #8]
 80024da:	4413      	add	r3, r2
 80024dc:	46b2      	mov	sl, r6
 80024de:	6023      	str	r3, [r4, #0]
 80024e0:	2600      	movs	r6, #0
 80024e2:	9b00      	ldr	r3, [sp, #0]
 80024e4:	6898      	ldr	r0, [r3, #8]
 80024e6:	eba0 000a 	sub.w	r0, r0, sl
 80024ea:	44d1      	add	r9, sl
 80024ec:	6098      	str	r0, [r3, #8]
 80024ee:	2800      	cmp	r0, #0
 80024f0:	d0c3      	beq.n	800247a <__sfvwrite_r+0x62>
 80024f2:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80024f6:	b280      	uxth	r0, r0
 80024f8:	2e00      	cmp	r6, #0
 80024fa:	d1d6      	bne.n	80024aa <__sfvwrite_r+0x92>
 80024fc:	e9d5 9600 	ldrd	r9, r6, [r5]
 8002500:	3508      	adds	r5, #8
 8002502:	e7d1      	b.n	80024a8 <__sfvwrite_r+0x90>
 8002504:	e9d5 a600 	ldrd	sl, r6, [r5]
 8002508:	3508      	adds	r5, #8
 800250a:	e7a0      	b.n	800244e <__sfvwrite_r+0x36>
 800250c:	4621      	mov	r1, r4
 800250e:	4640      	mov	r0, r8
 8002510:	f7ff ff18 	bl	8002344 <_fflush_r>
 8002514:	b380      	cbz	r0, 8002578 <__sfvwrite_r+0x160>
 8002516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800251a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800251e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002522:	81a3      	strh	r3, [r4, #12]
 8002524:	b003      	add	sp, #12
 8002526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800252a:	2000      	movs	r0, #0
 800252c:	4770      	bx	lr
 800252e:	461e      	mov	r6, r3
 8002530:	46aa      	mov	sl, r5
 8002532:	4699      	mov	r9, r3
 8002534:	4618      	mov	r0, r3
 8002536:	461d      	mov	r5, r3
 8002538:	9700      	str	r7, [sp, #0]
 800253a:	b356      	cbz	r6, 8002592 <__sfvwrite_r+0x17a>
 800253c:	b388      	cbz	r0, 80025a2 <__sfvwrite_r+0x18a>
 800253e:	464a      	mov	r2, r9
 8002540:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
 8002544:	6820      	ldr	r0, [r4, #0]
 8002546:	42b2      	cmp	r2, r6
 8002548:	bf28      	it	cs
 800254a:	4632      	movcs	r2, r6
 800254c:	4288      	cmp	r0, r1
 800254e:	d905      	bls.n	800255c <__sfvwrite_r+0x144>
 8002550:	68a1      	ldr	r1, [r4, #8]
 8002552:	eb03 0b01 	add.w	fp, r3, r1
 8002556:	455a      	cmp	r2, fp
 8002558:	f300 80a6 	bgt.w	80026a8 <__sfvwrite_r+0x290>
 800255c:	4293      	cmp	r3, r2
 800255e:	dc63      	bgt.n	8002628 <__sfvwrite_r+0x210>
 8002560:	6a21      	ldr	r1, [r4, #32]
 8002562:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8002564:	462a      	mov	r2, r5
 8002566:	4640      	mov	r0, r8
 8002568:	47b8      	blx	r7
 800256a:	f1b0 0b00 	subs.w	fp, r0, #0
 800256e:	ddd2      	ble.n	8002516 <__sfvwrite_r+0xfe>
 8002570:	ebb9 090b 	subs.w	r9, r9, fp
 8002574:	d0ca      	beq.n	800250c <__sfvwrite_r+0xf4>
 8002576:	2001      	movs	r0, #1
 8002578:	9a00      	ldr	r2, [sp, #0]
 800257a:	6893      	ldr	r3, [r2, #8]
 800257c:	eba3 030b 	sub.w	r3, r3, fp
 8002580:	445d      	add	r5, fp
 8002582:	eba6 060b 	sub.w	r6, r6, fp
 8002586:	6093      	str	r3, [r2, #8]
 8002588:	2b00      	cmp	r3, #0
 800258a:	f43f af76 	beq.w	800247a <__sfvwrite_r+0x62>
 800258e:	2e00      	cmp	r6, #0
 8002590:	d1d4      	bne.n	800253c <__sfvwrite_r+0x124>
 8002592:	f10a 0308 	add.w	r3, sl, #8
 8002596:	e953 5602 	ldrd	r5, r6, [r3, #-8]
 800259a:	469a      	mov	sl, r3
 800259c:	3308      	adds	r3, #8
 800259e:	2e00      	cmp	r6, #0
 80025a0:	d0f9      	beq.n	8002596 <__sfvwrite_r+0x17e>
 80025a2:	4632      	mov	r2, r6
 80025a4:	210a      	movs	r1, #10
 80025a6:	4628      	mov	r0, r5
 80025a8:	f000 f952 	bl	8002850 <memchr>
 80025ac:	2800      	cmp	r0, #0
 80025ae:	f000 809c 	beq.w	80026ea <__sfvwrite_r+0x2d2>
 80025b2:	3001      	adds	r0, #1
 80025b4:	eba0 0905 	sub.w	r9, r0, r5
 80025b8:	e7c1      	b.n	800253e <__sfvwrite_r+0x126>
 80025ba:	6820      	ldr	r0, [r4, #0]
 80025bc:	6923      	ldr	r3, [r4, #16]
 80025be:	4298      	cmp	r0, r3
 80025c0:	d816      	bhi.n	80025f0 <__sfvwrite_r+0x1d8>
 80025c2:	6963      	ldr	r3, [r4, #20]
 80025c4:	42b3      	cmp	r3, r6
 80025c6:	d813      	bhi.n	80025f0 <__sfvwrite_r+0x1d8>
 80025c8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80025cc:	42b2      	cmp	r2, r6
 80025ce:	bf28      	it	cs
 80025d0:	4632      	movcs	r2, r6
 80025d2:	6a21      	ldr	r1, [r4, #32]
 80025d4:	fb92 f2f3 	sdiv	r2, r2, r3
 80025d8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80025da:	fb02 f303 	mul.w	r3, r2, r3
 80025de:	4640      	mov	r0, r8
 80025e0:	464a      	mov	r2, r9
 80025e2:	47b8      	blx	r7
 80025e4:	f1b0 0a00 	subs.w	sl, r0, #0
 80025e8:	dd95      	ble.n	8002516 <__sfvwrite_r+0xfe>
 80025ea:	eba6 060a 	sub.w	r6, r6, sl
 80025ee:	e778      	b.n	80024e2 <__sfvwrite_r+0xca>
 80025f0:	45b3      	cmp	fp, r6
 80025f2:	46da      	mov	sl, fp
 80025f4:	bf28      	it	cs
 80025f6:	46b2      	movcs	sl, r6
 80025f8:	4652      	mov	r2, sl
 80025fa:	4649      	mov	r1, r9
 80025fc:	f000 f978 	bl	80028f0 <memmove>
 8002600:	68a3      	ldr	r3, [r4, #8]
 8002602:	6822      	ldr	r2, [r4, #0]
 8002604:	eba3 030a 	sub.w	r3, r3, sl
 8002608:	4452      	add	r2, sl
 800260a:	60a3      	str	r3, [r4, #8]
 800260c:	6022      	str	r2, [r4, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1eb      	bne.n	80025ea <__sfvwrite_r+0x1d2>
 8002612:	4621      	mov	r1, r4
 8002614:	4640      	mov	r0, r8
 8002616:	f7ff fe95 	bl	8002344 <_fflush_r>
 800261a:	2800      	cmp	r0, #0
 800261c:	d0e5      	beq.n	80025ea <__sfvwrite_r+0x1d2>
 800261e:	e77a      	b.n	8002516 <__sfvwrite_r+0xfe>
 8002620:	6820      	ldr	r0, [r4, #0]
 8002622:	46b3      	mov	fp, r6
 8002624:	4632      	mov	r2, r6
 8002626:	e74e      	b.n	80024c6 <__sfvwrite_r+0xae>
 8002628:	4629      	mov	r1, r5
 800262a:	9201      	str	r2, [sp, #4]
 800262c:	f000 f960 	bl	80028f0 <memmove>
 8002630:	9a01      	ldr	r2, [sp, #4]
 8002632:	68a3      	ldr	r3, [r4, #8]
 8002634:	1a9b      	subs	r3, r3, r2
 8002636:	60a3      	str	r3, [r4, #8]
 8002638:	6823      	ldr	r3, [r4, #0]
 800263a:	4413      	add	r3, r2
 800263c:	6023      	str	r3, [r4, #0]
 800263e:	4693      	mov	fp, r2
 8002640:	e796      	b.n	8002570 <__sfvwrite_r+0x158>
 8002642:	6823      	ldr	r3, [r4, #0]
 8002644:	6921      	ldr	r1, [r4, #16]
 8002646:	eba3 0b01 	sub.w	fp, r3, r1
 800264a:	6963      	ldr	r3, [r4, #20]
 800264c:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 8002650:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 8002654:	f10b 0301 	add.w	r3, fp, #1
 8002658:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 800265c:	4433      	add	r3, r6
 800265e:	4553      	cmp	r3, sl
 8002660:	4652      	mov	r2, sl
 8002662:	bf84      	itt	hi
 8002664:	469a      	movhi	sl, r3
 8002666:	4652      	movhi	r2, sl
 8002668:	0543      	lsls	r3, r0, #21
 800266a:	d52c      	bpl.n	80026c6 <__sfvwrite_r+0x2ae>
 800266c:	4611      	mov	r1, r2
 800266e:	4640      	mov	r0, r8
 8002670:	f7fe ff06 	bl	8001480 <_malloc_r>
 8002674:	2800      	cmp	r0, #0
 8002676:	d03b      	beq.n	80026f0 <__sfvwrite_r+0x2d8>
 8002678:	465a      	mov	r2, fp
 800267a:	6921      	ldr	r1, [r4, #16]
 800267c:	9001      	str	r0, [sp, #4]
 800267e:	f7fe fdb1 	bl	80011e4 <memcpy>
 8002682:	89a2      	ldrh	r2, [r4, #12]
 8002684:	9b01      	ldr	r3, [sp, #4]
 8002686:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800268a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800268e:	81a2      	strh	r2, [r4, #12]
 8002690:	eb03 000b 	add.w	r0, r3, fp
 8002694:	6123      	str	r3, [r4, #16]
 8002696:	ebaa 030b 	sub.w	r3, sl, fp
 800269a:	f8c4 a014 	str.w	sl, [r4, #20]
 800269e:	60a3      	str	r3, [r4, #8]
 80026a0:	6020      	str	r0, [r4, #0]
 80026a2:	46b3      	mov	fp, r6
 80026a4:	4632      	mov	r2, r6
 80026a6:	e70e      	b.n	80024c6 <__sfvwrite_r+0xae>
 80026a8:	4629      	mov	r1, r5
 80026aa:	465a      	mov	r2, fp
 80026ac:	f000 f920 	bl	80028f0 <memmove>
 80026b0:	6823      	ldr	r3, [r4, #0]
 80026b2:	445b      	add	r3, fp
 80026b4:	6023      	str	r3, [r4, #0]
 80026b6:	4621      	mov	r1, r4
 80026b8:	4640      	mov	r0, r8
 80026ba:	f7ff fe43 	bl	8002344 <_fflush_r>
 80026be:	2800      	cmp	r0, #0
 80026c0:	f43f af56 	beq.w	8002570 <__sfvwrite_r+0x158>
 80026c4:	e727      	b.n	8002516 <__sfvwrite_r+0xfe>
 80026c6:	4640      	mov	r0, r8
 80026c8:	f000 f98e 	bl	80029e8 <_realloc_r>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2800      	cmp	r0, #0
 80026d0:	d1de      	bne.n	8002690 <__sfvwrite_r+0x278>
 80026d2:	6921      	ldr	r1, [r4, #16]
 80026d4:	4640      	mov	r0, r8
 80026d6:	f7fe fe71 	bl	80013bc <_free_r>
 80026da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026de:	220c      	movs	r2, #12
 80026e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026e4:	f8c8 2000 	str.w	r2, [r8]
 80026e8:	e717      	b.n	800251a <__sfvwrite_r+0x102>
 80026ea:	1c72      	adds	r2, r6, #1
 80026ec:	4691      	mov	r9, r2
 80026ee:	e727      	b.n	8002540 <__sfvwrite_r+0x128>
 80026f0:	220c      	movs	r2, #12
 80026f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026f6:	f8c8 2000 	str.w	r2, [r8]
 80026fa:	e70e      	b.n	800251a <__sfvwrite_r+0x102>
 80026fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002700:	e6bc      	b.n	800247c <__sfvwrite_r+0x64>
 8002702:	bf00      	nop
 8002704:	7ffffc00 	.word	0x7ffffc00

08002708 <_lseek_r>:
 8002708:	b538      	push	{r3, r4, r5, lr}
 800270a:	460c      	mov	r4, r1
 800270c:	4d08      	ldr	r5, [pc, #32]	; (8002730 <_lseek_r+0x28>)
 800270e:	4684      	mov	ip, r0
 8002710:	4611      	mov	r1, r2
 8002712:	4620      	mov	r0, r4
 8002714:	461a      	mov	r2, r3
 8002716:	2300      	movs	r3, #0
 8002718:	602b      	str	r3, [r5, #0]
 800271a:	4664      	mov	r4, ip
 800271c:	f7fe fb92 	bl	8000e44 <_lseek>
 8002720:	1c43      	adds	r3, r0, #1
 8002722:	d000      	beq.n	8002726 <_lseek_r+0x1e>
 8002724:	bd38      	pop	{r3, r4, r5, pc}
 8002726:	682b      	ldr	r3, [r5, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0fb      	beq.n	8002724 <_lseek_r+0x1c>
 800272c:	6023      	str	r3, [r4, #0]
 800272e:	bd38      	pop	{r3, r4, r5, pc}
 8002730:	200003a4 	.word	0x200003a4

08002734 <__smakebuf_r>:
 8002734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002736:	898b      	ldrh	r3, [r1, #12]
 8002738:	460c      	mov	r4, r1
 800273a:	0799      	lsls	r1, r3, #30
 800273c:	b097      	sub	sp, #92	; 0x5c
 800273e:	d507      	bpl.n	8002750 <__smakebuf_r+0x1c>
 8002740:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002744:	2201      	movs	r2, #1
 8002746:	e9c4 3204 	strd	r3, r2, [r4, #16]
 800274a:	6023      	str	r3, [r4, #0]
 800274c:	b017      	add	sp, #92	; 0x5c
 800274e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002750:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002754:	2900      	cmp	r1, #0
 8002756:	4605      	mov	r5, r0
 8002758:	db2d      	blt.n	80027b6 <__smakebuf_r+0x82>
 800275a:	466a      	mov	r2, sp
 800275c:	f000 f982 	bl	8002a64 <_fstat_r>
 8002760:	2800      	cmp	r0, #0
 8002762:	db27      	blt.n	80027b4 <__smakebuf_r+0x80>
 8002764:	9e01      	ldr	r6, [sp, #4]
 8002766:	f406 4670 	and.w	r6, r6, #61440	; 0xf000
 800276a:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800276e:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
 8002772:	fab6 f686 	clz	r6, r6
 8002776:	4639      	mov	r1, r7
 8002778:	4628      	mov	r0, r5
 800277a:	0976      	lsrs	r6, r6, #5
 800277c:	f7fe fe80 	bl	8001480 <_malloc_r>
 8002780:	b330      	cbz	r0, 80027d0 <__smakebuf_r+0x9c>
 8002782:	89a3      	ldrh	r3, [r4, #12]
 8002784:	4a1a      	ldr	r2, [pc, #104]	; (80027f0 <__smakebuf_r+0xbc>)
 8002786:	62aa      	str	r2, [r5, #40]	; 0x28
 8002788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800278c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002790:	81a3      	strh	r3, [r4, #12]
 8002792:	6020      	str	r0, [r4, #0]
 8002794:	2e00      	cmp	r6, #0
 8002796:	d0d9      	beq.n	800274c <__smakebuf_r+0x18>
 8002798:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800279c:	4628      	mov	r0, r5
 800279e:	f000 f977 	bl	8002a90 <_isatty_r>
 80027a2:	2800      	cmp	r0, #0
 80027a4:	d0d2      	beq.n	800274c <__smakebuf_r+0x18>
 80027a6:	89a3      	ldrh	r3, [r4, #12]
 80027a8:	f023 0303 	bic.w	r3, r3, #3
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	81a3      	strh	r3, [r4, #12]
 80027b2:	e7cb      	b.n	800274c <__smakebuf_r+0x18>
 80027b4:	89a3      	ldrh	r3, [r4, #12]
 80027b6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80027ba:	bf14      	ite	ne
 80027bc:	2740      	movne	r7, #64	; 0x40
 80027be:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 80027c2:	4639      	mov	r1, r7
 80027c4:	4628      	mov	r0, r5
 80027c6:	2600      	movs	r6, #0
 80027c8:	f7fe fe5a 	bl	8001480 <_malloc_r>
 80027cc:	2800      	cmp	r0, #0
 80027ce:	d1d8      	bne.n	8002782 <__smakebuf_r+0x4e>
 80027d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027d4:	059a      	lsls	r2, r3, #22
 80027d6:	d4b9      	bmi.n	800274c <__smakebuf_r+0x18>
 80027d8:	f023 0303 	bic.w	r3, r3, #3
 80027dc:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80027e0:	f043 0302 	orr.w	r3, r3, #2
 80027e4:	2101      	movs	r1, #1
 80027e6:	e9c4 2104 	strd	r2, r1, [r4, #16]
 80027ea:	81a3      	strh	r3, [r4, #12]
 80027ec:	6022      	str	r2, [r4, #0]
 80027ee:	e7ad      	b.n	800274c <__smakebuf_r+0x18>
 80027f0:	080015bd 	.word	0x080015bd

080027f4 <__swhatbuf_r>:
 80027f4:	b570      	push	{r4, r5, r6, lr}
 80027f6:	460c      	mov	r4, r1
 80027f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027fc:	2900      	cmp	r1, #0
 80027fe:	b096      	sub	sp, #88	; 0x58
 8002800:	4616      	mov	r6, r2
 8002802:	461d      	mov	r5, r3
 8002804:	db13      	blt.n	800282e <__swhatbuf_r+0x3a>
 8002806:	466a      	mov	r2, sp
 8002808:	f000 f92c 	bl	8002a64 <_fstat_r>
 800280c:	2800      	cmp	r0, #0
 800280e:	db0e      	blt.n	800282e <__swhatbuf_r+0x3a>
 8002810:	9901      	ldr	r1, [sp, #4]
 8002812:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002816:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
 800281a:	fab1 f181 	clz	r1, r1
 800281e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002822:	0949      	lsrs	r1, r1, #5
 8002824:	2000      	movs	r0, #0
 8002826:	6029      	str	r1, [r5, #0]
 8002828:	6033      	str	r3, [r6, #0]
 800282a:	b016      	add	sp, #88	; 0x58
 800282c:	bd70      	pop	{r4, r5, r6, pc}
 800282e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	061b      	lsls	r3, r3, #24
 8002836:	602a      	str	r2, [r5, #0]
 8002838:	d504      	bpl.n	8002844 <__swhatbuf_r+0x50>
 800283a:	2340      	movs	r3, #64	; 0x40
 800283c:	2000      	movs	r0, #0
 800283e:	6033      	str	r3, [r6, #0]
 8002840:	b016      	add	sp, #88	; 0x58
 8002842:	bd70      	pop	{r4, r5, r6, pc}
 8002844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002848:	2000      	movs	r0, #0
 800284a:	6033      	str	r3, [r6, #0]
 800284c:	b016      	add	sp, #88	; 0x58
 800284e:	bd70      	pop	{r4, r5, r6, pc}

08002850 <memchr>:
 8002850:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8002854:	2a10      	cmp	r2, #16
 8002856:	db2b      	blt.n	80028b0 <memchr+0x60>
 8002858:	f010 0f07 	tst.w	r0, #7
 800285c:	d008      	beq.n	8002870 <memchr+0x20>
 800285e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002862:	3a01      	subs	r2, #1
 8002864:	428b      	cmp	r3, r1
 8002866:	d02d      	beq.n	80028c4 <memchr+0x74>
 8002868:	f010 0f07 	tst.w	r0, #7
 800286c:	b342      	cbz	r2, 80028c0 <memchr+0x70>
 800286e:	d1f6      	bne.n	800285e <memchr+0xe>
 8002870:	b4f0      	push	{r4, r5, r6, r7}
 8002872:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8002876:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800287a:	f022 0407 	bic.w	r4, r2, #7
 800287e:	f07f 0700 	mvns.w	r7, #0
 8002882:	2300      	movs	r3, #0
 8002884:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8002888:	3c08      	subs	r4, #8
 800288a:	ea85 0501 	eor.w	r5, r5, r1
 800288e:	ea86 0601 	eor.w	r6, r6, r1
 8002892:	fa85 f547 	uadd8	r5, r5, r7
 8002896:	faa3 f587 	sel	r5, r3, r7
 800289a:	fa86 f647 	uadd8	r6, r6, r7
 800289e:	faa5 f687 	sel	r6, r5, r7
 80028a2:	b98e      	cbnz	r6, 80028c8 <memchr+0x78>
 80028a4:	d1ee      	bne.n	8002884 <memchr+0x34>
 80028a6:	bcf0      	pop	{r4, r5, r6, r7}
 80028a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80028ac:	f002 0207 	and.w	r2, r2, #7
 80028b0:	b132      	cbz	r2, 80028c0 <memchr+0x70>
 80028b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80028b6:	3a01      	subs	r2, #1
 80028b8:	ea83 0301 	eor.w	r3, r3, r1
 80028bc:	b113      	cbz	r3, 80028c4 <memchr+0x74>
 80028be:	d1f8      	bne.n	80028b2 <memchr+0x62>
 80028c0:	2000      	movs	r0, #0
 80028c2:	4770      	bx	lr
 80028c4:	3801      	subs	r0, #1
 80028c6:	4770      	bx	lr
 80028c8:	2d00      	cmp	r5, #0
 80028ca:	bf06      	itte	eq
 80028cc:	4635      	moveq	r5, r6
 80028ce:	3803      	subeq	r0, #3
 80028d0:	3807      	subne	r0, #7
 80028d2:	f015 0f01 	tst.w	r5, #1
 80028d6:	d107      	bne.n	80028e8 <memchr+0x98>
 80028d8:	3001      	adds	r0, #1
 80028da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80028de:	bf02      	ittt	eq
 80028e0:	3001      	addeq	r0, #1
 80028e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80028e6:	3001      	addeq	r0, #1
 80028e8:	bcf0      	pop	{r4, r5, r6, r7}
 80028ea:	3801      	subs	r0, #1
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop

080028f0 <memmove>:
 80028f0:	4288      	cmp	r0, r1
 80028f2:	d90d      	bls.n	8002910 <memmove+0x20>
 80028f4:	188b      	adds	r3, r1, r2
 80028f6:	4283      	cmp	r3, r0
 80028f8:	d90a      	bls.n	8002910 <memmove+0x20>
 80028fa:	eb00 0c02 	add.w	ip, r0, r2
 80028fe:	b1ba      	cbz	r2, 8002930 <memmove+0x40>
 8002900:	4662      	mov	r2, ip
 8002902:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 8002906:	f802 cd01 	strb.w	ip, [r2, #-1]!
 800290a:	4299      	cmp	r1, r3
 800290c:	d1f9      	bne.n	8002902 <memmove+0x12>
 800290e:	4770      	bx	lr
 8002910:	2a0f      	cmp	r2, #15
 8002912:	d80e      	bhi.n	8002932 <memmove+0x42>
 8002914:	4603      	mov	r3, r0
 8002916:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 800291a:	b14a      	cbz	r2, 8002930 <memmove+0x40>
 800291c:	f10c 0c01 	add.w	ip, ip, #1
 8002920:	3b01      	subs	r3, #1
 8002922:	448c      	add	ip, r1
 8002924:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002928:	f803 2f01 	strb.w	r2, [r3, #1]!
 800292c:	4561      	cmp	r1, ip
 800292e:	d1f9      	bne.n	8002924 <memmove+0x34>
 8002930:	4770      	bx	lr
 8002932:	ea40 0301 	orr.w	r3, r0, r1
 8002936:	079b      	lsls	r3, r3, #30
 8002938:	d150      	bne.n	80029dc <memmove+0xec>
 800293a:	f1a2 0310 	sub.w	r3, r2, #16
 800293e:	b570      	push	{r4, r5, r6, lr}
 8002940:	f101 0c20 	add.w	ip, r1, #32
 8002944:	f023 050f 	bic.w	r5, r3, #15
 8002948:	f101 0e10 	add.w	lr, r1, #16
 800294c:	f100 0410 	add.w	r4, r0, #16
 8002950:	44ac      	add	ip, r5
 8002952:	091b      	lsrs	r3, r3, #4
 8002954:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 8002958:	f844 5c10 	str.w	r5, [r4, #-16]
 800295c:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
 8002960:	f844 5c0c 	str.w	r5, [r4, #-12]
 8002964:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 8002968:	f844 5c08 	str.w	r5, [r4, #-8]
 800296c:	f85e 5c04 	ldr.w	r5, [lr, #-4]
 8002970:	f844 5c04 	str.w	r5, [r4, #-4]
 8002974:	f10e 0e10 	add.w	lr, lr, #16
 8002978:	45e6      	cmp	lr, ip
 800297a:	f104 0410 	add.w	r4, r4, #16
 800297e:	d1e9      	bne.n	8002954 <memmove+0x64>
 8002980:	3301      	adds	r3, #1
 8002982:	f012 0f0c 	tst.w	r2, #12
 8002986:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800298a:	f002 040f 	and.w	r4, r2, #15
 800298e:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8002992:	d027      	beq.n	80029e4 <memmove+0xf4>
 8002994:	3c04      	subs	r4, #4
 8002996:	f024 0603 	bic.w	r6, r4, #3
 800299a:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 800299e:	441e      	add	r6, r3
 80029a0:	1f1c      	subs	r4, r3, #4
 80029a2:	468e      	mov	lr, r1
 80029a4:	f85e 5b04 	ldr.w	r5, [lr], #4
 80029a8:	f844 5f04 	str.w	r5, [r4, #4]!
 80029ac:	42b4      	cmp	r4, r6
 80029ae:	d1f9      	bne.n	80029a4 <memmove+0xb4>
 80029b0:	f10c 0401 	add.w	r4, ip, #1
 80029b4:	f002 0203 	and.w	r2, r2, #3
 80029b8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80029bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80029c0:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 80029c4:	b14a      	cbz	r2, 80029da <memmove+0xea>
 80029c6:	f10c 0c01 	add.w	ip, ip, #1
 80029ca:	3b01      	subs	r3, #1
 80029cc:	448c      	add	ip, r1
 80029ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80029d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80029d6:	4561      	cmp	r1, ip
 80029d8:	d1f9      	bne.n	80029ce <memmove+0xde>
 80029da:	bd70      	pop	{r4, r5, r6, pc}
 80029dc:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 80029e0:	4603      	mov	r3, r0
 80029e2:	e79b      	b.n	800291c <memmove+0x2c>
 80029e4:	4622      	mov	r2, r4
 80029e6:	e7eb      	b.n	80029c0 <memmove+0xd0>

080029e8 <_realloc_r>:
 80029e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ea:	4614      	mov	r4, r2
 80029ec:	b1f9      	cbz	r1, 8002a2e <_realloc_r+0x46>
 80029ee:	b1ca      	cbz	r2, 8002a24 <_realloc_r+0x3c>
 80029f0:	4606      	mov	r6, r0
 80029f2:	460d      	mov	r5, r1
 80029f4:	f000 f85e 	bl	8002ab4 <_malloc_usable_size_r>
 80029f8:	42a0      	cmp	r0, r4
 80029fa:	d302      	bcc.n	8002a02 <_realloc_r+0x1a>
 80029fc:	462f      	mov	r7, r5
 80029fe:	4638      	mov	r0, r7
 8002a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a02:	4621      	mov	r1, r4
 8002a04:	4630      	mov	r0, r6
 8002a06:	f7fe fd3b 	bl	8001480 <_malloc_r>
 8002a0a:	4607      	mov	r7, r0
 8002a0c:	2800      	cmp	r0, #0
 8002a0e:	d0f6      	beq.n	80029fe <_realloc_r+0x16>
 8002a10:	4622      	mov	r2, r4
 8002a12:	4629      	mov	r1, r5
 8002a14:	f7fe fbe6 	bl	80011e4 <memcpy>
 8002a18:	4630      	mov	r0, r6
 8002a1a:	4629      	mov	r1, r5
 8002a1c:	f7fe fcce 	bl	80013bc <_free_r>
 8002a20:	4638      	mov	r0, r7
 8002a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a24:	4627      	mov	r7, r4
 8002a26:	f7fe fcc9 	bl	80013bc <_free_r>
 8002a2a:	4638      	mov	r0, r7
 8002a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002a32:	4611      	mov	r1, r2
 8002a34:	f7fe bd24 	b.w	8001480 <_malloc_r>

08002a38 <_read_r>:
 8002a38:	b538      	push	{r3, r4, r5, lr}
 8002a3a:	460c      	mov	r4, r1
 8002a3c:	4d08      	ldr	r5, [pc, #32]	; (8002a60 <_read_r+0x28>)
 8002a3e:	4684      	mov	ip, r0
 8002a40:	4611      	mov	r1, r2
 8002a42:	4620      	mov	r0, r4
 8002a44:	461a      	mov	r2, r3
 8002a46:	2300      	movs	r3, #0
 8002a48:	602b      	str	r3, [r5, #0]
 8002a4a:	4664      	mov	r4, ip
 8002a4c:	f7fe f9ac 	bl	8000da8 <_read>
 8002a50:	1c43      	adds	r3, r0, #1
 8002a52:	d000      	beq.n	8002a56 <_read_r+0x1e>
 8002a54:	bd38      	pop	{r3, r4, r5, pc}
 8002a56:	682b      	ldr	r3, [r5, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0fb      	beq.n	8002a54 <_read_r+0x1c>
 8002a5c:	6023      	str	r3, [r4, #0]
 8002a5e:	bd38      	pop	{r3, r4, r5, pc}
 8002a60:	200003a4 	.word	0x200003a4

08002a64 <_fstat_r>:
 8002a64:	b570      	push	{r4, r5, r6, lr}
 8002a66:	460c      	mov	r4, r1
 8002a68:	4d08      	ldr	r5, [pc, #32]	; (8002a8c <_fstat_r+0x28>)
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2600      	movs	r6, #0
 8002a6e:	4620      	mov	r0, r4
 8002a70:	4611      	mov	r1, r2
 8002a72:	461c      	mov	r4, r3
 8002a74:	602e      	str	r6, [r5, #0]
 8002a76:	f7fe f9d5 	bl	8000e24 <_fstat>
 8002a7a:	1c43      	adds	r3, r0, #1
 8002a7c:	d000      	beq.n	8002a80 <_fstat_r+0x1c>
 8002a7e:	bd70      	pop	{r4, r5, r6, pc}
 8002a80:	682b      	ldr	r3, [r5, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0fb      	beq.n	8002a7e <_fstat_r+0x1a>
 8002a86:	6023      	str	r3, [r4, #0]
 8002a88:	bd70      	pop	{r4, r5, r6, pc}
 8002a8a:	bf00      	nop
 8002a8c:	200003a4 	.word	0x200003a4

08002a90 <_isatty_r>:
 8002a90:	b538      	push	{r3, r4, r5, lr}
 8002a92:	4d07      	ldr	r5, [pc, #28]	; (8002ab0 <_isatty_r+0x20>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	4604      	mov	r4, r0
 8002a98:	4608      	mov	r0, r1
 8002a9a:	602a      	str	r2, [r5, #0]
 8002a9c:	f7fe f9cc 	bl	8000e38 <_isatty>
 8002aa0:	1c43      	adds	r3, r0, #1
 8002aa2:	d000      	beq.n	8002aa6 <_isatty_r+0x16>
 8002aa4:	bd38      	pop	{r3, r4, r5, pc}
 8002aa6:	682b      	ldr	r3, [r5, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0fb      	beq.n	8002aa4 <_isatty_r+0x14>
 8002aac:	6023      	str	r3, [r4, #0]
 8002aae:	bd38      	pop	{r3, r4, r5, pc}
 8002ab0:	200003a4 	.word	0x200003a4

08002ab4 <_malloc_usable_size_r>:
 8002ab4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002ab8:	2800      	cmp	r0, #0
 8002aba:	f1a0 0004 	sub.w	r0, r0, #4
 8002abe:	bfbc      	itt	lt
 8002ac0:	580b      	ldrlt	r3, [r1, r0]
 8002ac2:	18c0      	addlt	r0, r0, r3
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop

08002ac8 <__aeabi_uldivmod>:
 8002ac8:	b953      	cbnz	r3, 8002ae0 <__aeabi_uldivmod+0x18>
 8002aca:	b94a      	cbnz	r2, 8002ae0 <__aeabi_uldivmod+0x18>
 8002acc:	2900      	cmp	r1, #0
 8002ace:	bf08      	it	eq
 8002ad0:	2800      	cmpeq	r0, #0
 8002ad2:	bf1c      	itt	ne
 8002ad4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8002ad8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8002adc:	f001 b8de 	b.w	8003c9c <__aeabi_idiv0>
 8002ae0:	f1ad 0c08 	sub.w	ip, sp, #8
 8002ae4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8002ae8:	f000 f806 	bl	8002af8 <__udivmoddi4>
 8002aec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8002af0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002af4:	b004      	add	sp, #16
 8002af6:	4770      	bx	lr

08002af8 <__udivmoddi4>:
 8002af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002afc:	9d08      	ldr	r5, [sp, #32]
 8002afe:	4604      	mov	r4, r0
 8002b00:	468e      	mov	lr, r1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d14d      	bne.n	8002ba2 <__udivmoddi4+0xaa>
 8002b06:	428a      	cmp	r2, r1
 8002b08:	4694      	mov	ip, r2
 8002b0a:	d969      	bls.n	8002be0 <__udivmoddi4+0xe8>
 8002b0c:	fab2 f282 	clz	r2, r2
 8002b10:	b152      	cbz	r2, 8002b28 <__udivmoddi4+0x30>
 8002b12:	fa01 f302 	lsl.w	r3, r1, r2
 8002b16:	f1c2 0120 	rsb	r1, r2, #32
 8002b1a:	fa20 f101 	lsr.w	r1, r0, r1
 8002b1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8002b22:	ea41 0e03 	orr.w	lr, r1, r3
 8002b26:	4094      	lsls	r4, r2
 8002b28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8002b2c:	0c21      	lsrs	r1, r4, #16
 8002b2e:	fbbe f6f8 	udiv	r6, lr, r8
 8002b32:	fa1f f78c 	uxth.w	r7, ip
 8002b36:	fb08 e316 	mls	r3, r8, r6, lr
 8002b3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8002b3e:	fb06 f107 	mul.w	r1, r6, r7
 8002b42:	4299      	cmp	r1, r3
 8002b44:	d90a      	bls.n	8002b5c <__udivmoddi4+0x64>
 8002b46:	eb1c 0303 	adds.w	r3, ip, r3
 8002b4a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8002b4e:	f080 811f 	bcs.w	8002d90 <__udivmoddi4+0x298>
 8002b52:	4299      	cmp	r1, r3
 8002b54:	f240 811c 	bls.w	8002d90 <__udivmoddi4+0x298>
 8002b58:	3e02      	subs	r6, #2
 8002b5a:	4463      	add	r3, ip
 8002b5c:	1a5b      	subs	r3, r3, r1
 8002b5e:	b2a4      	uxth	r4, r4
 8002b60:	fbb3 f0f8 	udiv	r0, r3, r8
 8002b64:	fb08 3310 	mls	r3, r8, r0, r3
 8002b68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8002b6c:	fb00 f707 	mul.w	r7, r0, r7
 8002b70:	42a7      	cmp	r7, r4
 8002b72:	d90a      	bls.n	8002b8a <__udivmoddi4+0x92>
 8002b74:	eb1c 0404 	adds.w	r4, ip, r4
 8002b78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002b7c:	f080 810a 	bcs.w	8002d94 <__udivmoddi4+0x29c>
 8002b80:	42a7      	cmp	r7, r4
 8002b82:	f240 8107 	bls.w	8002d94 <__udivmoddi4+0x29c>
 8002b86:	4464      	add	r4, ip
 8002b88:	3802      	subs	r0, #2
 8002b8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8002b8e:	1be4      	subs	r4, r4, r7
 8002b90:	2600      	movs	r6, #0
 8002b92:	b11d      	cbz	r5, 8002b9c <__udivmoddi4+0xa4>
 8002b94:	40d4      	lsrs	r4, r2
 8002b96:	2300      	movs	r3, #0
 8002b98:	e9c5 4300 	strd	r4, r3, [r5]
 8002b9c:	4631      	mov	r1, r6
 8002b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ba2:	428b      	cmp	r3, r1
 8002ba4:	d909      	bls.n	8002bba <__udivmoddi4+0xc2>
 8002ba6:	2d00      	cmp	r5, #0
 8002ba8:	f000 80ef 	beq.w	8002d8a <__udivmoddi4+0x292>
 8002bac:	2600      	movs	r6, #0
 8002bae:	e9c5 0100 	strd	r0, r1, [r5]
 8002bb2:	4630      	mov	r0, r6
 8002bb4:	4631      	mov	r1, r6
 8002bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bba:	fab3 f683 	clz	r6, r3
 8002bbe:	2e00      	cmp	r6, #0
 8002bc0:	d14a      	bne.n	8002c58 <__udivmoddi4+0x160>
 8002bc2:	428b      	cmp	r3, r1
 8002bc4:	d302      	bcc.n	8002bcc <__udivmoddi4+0xd4>
 8002bc6:	4282      	cmp	r2, r0
 8002bc8:	f200 80f9 	bhi.w	8002dbe <__udivmoddi4+0x2c6>
 8002bcc:	1a84      	subs	r4, r0, r2
 8002bce:	eb61 0303 	sbc.w	r3, r1, r3
 8002bd2:	2001      	movs	r0, #1
 8002bd4:	469e      	mov	lr, r3
 8002bd6:	2d00      	cmp	r5, #0
 8002bd8:	d0e0      	beq.n	8002b9c <__udivmoddi4+0xa4>
 8002bda:	e9c5 4e00 	strd	r4, lr, [r5]
 8002bde:	e7dd      	b.n	8002b9c <__udivmoddi4+0xa4>
 8002be0:	b902      	cbnz	r2, 8002be4 <__udivmoddi4+0xec>
 8002be2:	deff      	udf	#255	; 0xff
 8002be4:	fab2 f282 	clz	r2, r2
 8002be8:	2a00      	cmp	r2, #0
 8002bea:	f040 8092 	bne.w	8002d12 <__udivmoddi4+0x21a>
 8002bee:	eba1 010c 	sub.w	r1, r1, ip
 8002bf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8002bf6:	fa1f fe8c 	uxth.w	lr, ip
 8002bfa:	2601      	movs	r6, #1
 8002bfc:	0c20      	lsrs	r0, r4, #16
 8002bfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8002c02:	fb07 1113 	mls	r1, r7, r3, r1
 8002c06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8002c0a:	fb0e f003 	mul.w	r0, lr, r3
 8002c0e:	4288      	cmp	r0, r1
 8002c10:	d908      	bls.n	8002c24 <__udivmoddi4+0x12c>
 8002c12:	eb1c 0101 	adds.w	r1, ip, r1
 8002c16:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8002c1a:	d202      	bcs.n	8002c22 <__udivmoddi4+0x12a>
 8002c1c:	4288      	cmp	r0, r1
 8002c1e:	f200 80cb 	bhi.w	8002db8 <__udivmoddi4+0x2c0>
 8002c22:	4643      	mov	r3, r8
 8002c24:	1a09      	subs	r1, r1, r0
 8002c26:	b2a4      	uxth	r4, r4
 8002c28:	fbb1 f0f7 	udiv	r0, r1, r7
 8002c2c:	fb07 1110 	mls	r1, r7, r0, r1
 8002c30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8002c34:	fb0e fe00 	mul.w	lr, lr, r0
 8002c38:	45a6      	cmp	lr, r4
 8002c3a:	d908      	bls.n	8002c4e <__udivmoddi4+0x156>
 8002c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8002c40:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8002c44:	d202      	bcs.n	8002c4c <__udivmoddi4+0x154>
 8002c46:	45a6      	cmp	lr, r4
 8002c48:	f200 80bb 	bhi.w	8002dc2 <__udivmoddi4+0x2ca>
 8002c4c:	4608      	mov	r0, r1
 8002c4e:	eba4 040e 	sub.w	r4, r4, lr
 8002c52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002c56:	e79c      	b.n	8002b92 <__udivmoddi4+0x9a>
 8002c58:	f1c6 0720 	rsb	r7, r6, #32
 8002c5c:	40b3      	lsls	r3, r6
 8002c5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8002c62:	ea4c 0c03 	orr.w	ip, ip, r3
 8002c66:	fa20 f407 	lsr.w	r4, r0, r7
 8002c6a:	fa01 f306 	lsl.w	r3, r1, r6
 8002c6e:	431c      	orrs	r4, r3
 8002c70:	40f9      	lsrs	r1, r7
 8002c72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8002c76:	fa00 f306 	lsl.w	r3, r0, r6
 8002c7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8002c7e:	0c20      	lsrs	r0, r4, #16
 8002c80:	fa1f fe8c 	uxth.w	lr, ip
 8002c84:	fb09 1118 	mls	r1, r9, r8, r1
 8002c88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8002c8c:	fb08 f00e 	mul.w	r0, r8, lr
 8002c90:	4288      	cmp	r0, r1
 8002c92:	fa02 f206 	lsl.w	r2, r2, r6
 8002c96:	d90b      	bls.n	8002cb0 <__udivmoddi4+0x1b8>
 8002c98:	eb1c 0101 	adds.w	r1, ip, r1
 8002c9c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8002ca0:	f080 8088 	bcs.w	8002db4 <__udivmoddi4+0x2bc>
 8002ca4:	4288      	cmp	r0, r1
 8002ca6:	f240 8085 	bls.w	8002db4 <__udivmoddi4+0x2bc>
 8002caa:	f1a8 0802 	sub.w	r8, r8, #2
 8002cae:	4461      	add	r1, ip
 8002cb0:	1a09      	subs	r1, r1, r0
 8002cb2:	b2a4      	uxth	r4, r4
 8002cb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8002cb8:	fb09 1110 	mls	r1, r9, r0, r1
 8002cbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8002cc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8002cc4:	458e      	cmp	lr, r1
 8002cc6:	d908      	bls.n	8002cda <__udivmoddi4+0x1e2>
 8002cc8:	eb1c 0101 	adds.w	r1, ip, r1
 8002ccc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8002cd0:	d26c      	bcs.n	8002dac <__udivmoddi4+0x2b4>
 8002cd2:	458e      	cmp	lr, r1
 8002cd4:	d96a      	bls.n	8002dac <__udivmoddi4+0x2b4>
 8002cd6:	3802      	subs	r0, #2
 8002cd8:	4461      	add	r1, ip
 8002cda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8002cde:	fba0 9402 	umull	r9, r4, r0, r2
 8002ce2:	eba1 010e 	sub.w	r1, r1, lr
 8002ce6:	42a1      	cmp	r1, r4
 8002ce8:	46c8      	mov	r8, r9
 8002cea:	46a6      	mov	lr, r4
 8002cec:	d356      	bcc.n	8002d9c <__udivmoddi4+0x2a4>
 8002cee:	d053      	beq.n	8002d98 <__udivmoddi4+0x2a0>
 8002cf0:	b15d      	cbz	r5, 8002d0a <__udivmoddi4+0x212>
 8002cf2:	ebb3 0208 	subs.w	r2, r3, r8
 8002cf6:	eb61 010e 	sbc.w	r1, r1, lr
 8002cfa:	fa01 f707 	lsl.w	r7, r1, r7
 8002cfe:	fa22 f306 	lsr.w	r3, r2, r6
 8002d02:	40f1      	lsrs	r1, r6
 8002d04:	431f      	orrs	r7, r3
 8002d06:	e9c5 7100 	strd	r7, r1, [r5]
 8002d0a:	2600      	movs	r6, #0
 8002d0c:	4631      	mov	r1, r6
 8002d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d12:	f1c2 0320 	rsb	r3, r2, #32
 8002d16:	40d8      	lsrs	r0, r3
 8002d18:	fa0c fc02 	lsl.w	ip, ip, r2
 8002d1c:	fa21 f303 	lsr.w	r3, r1, r3
 8002d20:	4091      	lsls	r1, r2
 8002d22:	4301      	orrs	r1, r0
 8002d24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8002d28:	fa1f fe8c 	uxth.w	lr, ip
 8002d2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8002d30:	fb07 3610 	mls	r6, r7, r0, r3
 8002d34:	0c0b      	lsrs	r3, r1, #16
 8002d36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8002d3a:	fb00 f60e 	mul.w	r6, r0, lr
 8002d3e:	429e      	cmp	r6, r3
 8002d40:	fa04 f402 	lsl.w	r4, r4, r2
 8002d44:	d908      	bls.n	8002d58 <__udivmoddi4+0x260>
 8002d46:	eb1c 0303 	adds.w	r3, ip, r3
 8002d4a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8002d4e:	d22f      	bcs.n	8002db0 <__udivmoddi4+0x2b8>
 8002d50:	429e      	cmp	r6, r3
 8002d52:	d92d      	bls.n	8002db0 <__udivmoddi4+0x2b8>
 8002d54:	3802      	subs	r0, #2
 8002d56:	4463      	add	r3, ip
 8002d58:	1b9b      	subs	r3, r3, r6
 8002d5a:	b289      	uxth	r1, r1
 8002d5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8002d60:	fb07 3316 	mls	r3, r7, r6, r3
 8002d64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8002d68:	fb06 f30e 	mul.w	r3, r6, lr
 8002d6c:	428b      	cmp	r3, r1
 8002d6e:	d908      	bls.n	8002d82 <__udivmoddi4+0x28a>
 8002d70:	eb1c 0101 	adds.w	r1, ip, r1
 8002d74:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8002d78:	d216      	bcs.n	8002da8 <__udivmoddi4+0x2b0>
 8002d7a:	428b      	cmp	r3, r1
 8002d7c:	d914      	bls.n	8002da8 <__udivmoddi4+0x2b0>
 8002d7e:	3e02      	subs	r6, #2
 8002d80:	4461      	add	r1, ip
 8002d82:	1ac9      	subs	r1, r1, r3
 8002d84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8002d88:	e738      	b.n	8002bfc <__udivmoddi4+0x104>
 8002d8a:	462e      	mov	r6, r5
 8002d8c:	4628      	mov	r0, r5
 8002d8e:	e705      	b.n	8002b9c <__udivmoddi4+0xa4>
 8002d90:	4606      	mov	r6, r0
 8002d92:	e6e3      	b.n	8002b5c <__udivmoddi4+0x64>
 8002d94:	4618      	mov	r0, r3
 8002d96:	e6f8      	b.n	8002b8a <__udivmoddi4+0x92>
 8002d98:	454b      	cmp	r3, r9
 8002d9a:	d2a9      	bcs.n	8002cf0 <__udivmoddi4+0x1f8>
 8002d9c:	ebb9 0802 	subs.w	r8, r9, r2
 8002da0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8002da4:	3801      	subs	r0, #1
 8002da6:	e7a3      	b.n	8002cf0 <__udivmoddi4+0x1f8>
 8002da8:	4646      	mov	r6, r8
 8002daa:	e7ea      	b.n	8002d82 <__udivmoddi4+0x28a>
 8002dac:	4620      	mov	r0, r4
 8002dae:	e794      	b.n	8002cda <__udivmoddi4+0x1e2>
 8002db0:	4640      	mov	r0, r8
 8002db2:	e7d1      	b.n	8002d58 <__udivmoddi4+0x260>
 8002db4:	46d0      	mov	r8, sl
 8002db6:	e77b      	b.n	8002cb0 <__udivmoddi4+0x1b8>
 8002db8:	3b02      	subs	r3, #2
 8002dba:	4461      	add	r1, ip
 8002dbc:	e732      	b.n	8002c24 <__udivmoddi4+0x12c>
 8002dbe:	4630      	mov	r0, r6
 8002dc0:	e709      	b.n	8002bd6 <__udivmoddi4+0xde>
 8002dc2:	4464      	add	r4, ip
 8002dc4:	3802      	subs	r0, #2
 8002dc6:	e742      	b.n	8002c4e <__udivmoddi4+0x156>

08002dc8 <selfrel_offset31>:
 8002dc8:	6803      	ldr	r3, [r0, #0]
 8002dca:	005a      	lsls	r2, r3, #1
 8002dcc:	bf4c      	ite	mi
 8002dce:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8002dd2:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8002dd6:	4418      	add	r0, r3
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop

08002ddc <search_EIT_table>:
 8002ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002de0:	b329      	cbz	r1, 8002e2e <search_EIT_table+0x52>
 8002de2:	1e4f      	subs	r7, r1, #1
 8002de4:	4604      	mov	r4, r0
 8002de6:	4615      	mov	r5, r2
 8002de8:	463e      	mov	r6, r7
 8002dea:	f04f 0800 	mov.w	r8, #0
 8002dee:	eb08 0106 	add.w	r1, r8, r6
 8002df2:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8002df6:	1049      	asrs	r1, r1, #1
 8002df8:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8002dfc:	4648      	mov	r0, r9
 8002dfe:	f7ff ffe3 	bl	8002dc8 <selfrel_offset31>
 8002e02:	4603      	mov	r3, r0
 8002e04:	00c8      	lsls	r0, r1, #3
 8002e06:	3008      	adds	r0, #8
 8002e08:	428f      	cmp	r7, r1
 8002e0a:	4420      	add	r0, r4
 8002e0c:	d009      	beq.n	8002e22 <search_EIT_table+0x46>
 8002e0e:	42ab      	cmp	r3, r5
 8002e10:	d809      	bhi.n	8002e26 <search_EIT_table+0x4a>
 8002e12:	f7ff ffd9 	bl	8002dc8 <selfrel_offset31>
 8002e16:	3801      	subs	r0, #1
 8002e18:	42a8      	cmp	r0, r5
 8002e1a:	d20a      	bcs.n	8002e32 <search_EIT_table+0x56>
 8002e1c:	f101 0801 	add.w	r8, r1, #1
 8002e20:	e7e5      	b.n	8002dee <search_EIT_table+0x12>
 8002e22:	42ab      	cmp	r3, r5
 8002e24:	d905      	bls.n	8002e32 <search_EIT_table+0x56>
 8002e26:	4588      	cmp	r8, r1
 8002e28:	d001      	beq.n	8002e2e <search_EIT_table+0x52>
 8002e2a:	1e4e      	subs	r6, r1, #1
 8002e2c:	e7df      	b.n	8002dee <search_EIT_table+0x12>
 8002e2e:	f04f 0900 	mov.w	r9, #0
 8002e32:	4648      	mov	r0, r9
 8002e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002e38 <__gnu_unwind_get_pr_addr>:
 8002e38:	2801      	cmp	r0, #1
 8002e3a:	d007      	beq.n	8002e4c <__gnu_unwind_get_pr_addr+0x14>
 8002e3c:	2802      	cmp	r0, #2
 8002e3e:	d007      	beq.n	8002e50 <__gnu_unwind_get_pr_addr+0x18>
 8002e40:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <__gnu_unwind_get_pr_addr+0x1c>)
 8002e42:	2800      	cmp	r0, #0
 8002e44:	bf0c      	ite	eq
 8002e46:	4618      	moveq	r0, r3
 8002e48:	2000      	movne	r0, #0
 8002e4a:	4770      	bx	lr
 8002e4c:	4802      	ldr	r0, [pc, #8]	; (8002e58 <__gnu_unwind_get_pr_addr+0x20>)
 8002e4e:	4770      	bx	lr
 8002e50:	4802      	ldr	r0, [pc, #8]	; (8002e5c <__gnu_unwind_get_pr_addr+0x24>)
 8002e52:	4770      	bx	lr
 8002e54:	08003511 	.word	0x08003511
 8002e58:	08003515 	.word	0x08003515
 8002e5c:	08003519 	.word	0x08003519

08002e60 <get_eit_entry>:
 8002e60:	b530      	push	{r4, r5, lr}
 8002e62:	4b23      	ldr	r3, [pc, #140]	; (8002ef0 <get_eit_entry+0x90>)
 8002e64:	b083      	sub	sp, #12
 8002e66:	4604      	mov	r4, r0
 8002e68:	1e8d      	subs	r5, r1, #2
 8002e6a:	b33b      	cbz	r3, 8002ebc <get_eit_entry+0x5c>
 8002e6c:	a901      	add	r1, sp, #4
 8002e6e:	4628      	mov	r0, r5
 8002e70:	f3af 8000 	nop.w
 8002e74:	b1e8      	cbz	r0, 8002eb2 <get_eit_entry+0x52>
 8002e76:	9901      	ldr	r1, [sp, #4]
 8002e78:	462a      	mov	r2, r5
 8002e7a:	f7ff ffaf 	bl	8002ddc <search_EIT_table>
 8002e7e:	4601      	mov	r1, r0
 8002e80:	b1b8      	cbz	r0, 8002eb2 <get_eit_entry+0x52>
 8002e82:	f7ff ffa1 	bl	8002dc8 <selfrel_offset31>
 8002e86:	684b      	ldr	r3, [r1, #4]
 8002e88:	64a0      	str	r0, [r4, #72]	; 0x48
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d02c      	beq.n	8002ee8 <get_eit_entry+0x88>
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f101 0004 	add.w	r0, r1, #4
 8002e94:	db24      	blt.n	8002ee0 <get_eit_entry+0x80>
 8002e96:	f7ff ff97 	bl	8002dc8 <selfrel_offset31>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8002ea0:	6803      	ldr	r3, [r0, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	db11      	blt.n	8002eca <get_eit_entry+0x6a>
 8002ea6:	f7ff ff8f 	bl	8002dc8 <selfrel_offset31>
 8002eaa:	6120      	str	r0, [r4, #16]
 8002eac:	2000      	movs	r0, #0
 8002eae:	b003      	add	sp, #12
 8002eb0:	bd30      	pop	{r4, r5, pc}
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	2009      	movs	r0, #9
 8002eb6:	6123      	str	r3, [r4, #16]
 8002eb8:	b003      	add	sp, #12
 8002eba:	bd30      	pop	{r4, r5, pc}
 8002ebc:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <get_eit_entry+0x94>)
 8002ebe:	490e      	ldr	r1, [pc, #56]	; (8002ef8 <get_eit_entry+0x98>)
 8002ec0:	1ac9      	subs	r1, r1, r3
 8002ec2:	10c9      	asrs	r1, r1, #3
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	9101      	str	r1, [sp, #4]
 8002ec8:	e7d6      	b.n	8002e78 <get_eit_entry+0x18>
 8002eca:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8002ece:	f7ff ffb3 	bl	8002e38 <__gnu_unwind_get_pr_addr>
 8002ed2:	2800      	cmp	r0, #0
 8002ed4:	6120      	str	r0, [r4, #16]
 8002ed6:	bf14      	ite	ne
 8002ed8:	2000      	movne	r0, #0
 8002eda:	2009      	moveq	r0, #9
 8002edc:	b003      	add	sp, #12
 8002ede:	bd30      	pop	{r4, r5, pc}
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8002ee6:	e7db      	b.n	8002ea0 <get_eit_entry+0x40>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	6123      	str	r3, [r4, #16]
 8002eec:	2005      	movs	r0, #5
 8002eee:	e7de      	b.n	8002eae <get_eit_entry+0x4e>
 8002ef0:	00000000 	.word	0x00000000
 8002ef4:	0800b8ac 	.word	0x0800b8ac
 8002ef8:	0800b974 	.word	0x0800b974

08002efc <restore_non_core_regs>:
 8002efc:	6803      	ldr	r3, [r0, #0]
 8002efe:	07da      	lsls	r2, r3, #31
 8002f00:	b510      	push	{r4, lr}
 8002f02:	4604      	mov	r4, r0
 8002f04:	d406      	bmi.n	8002f14 <restore_non_core_regs+0x18>
 8002f06:	079b      	lsls	r3, r3, #30
 8002f08:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8002f0c:	d509      	bpl.n	8002f22 <restore_non_core_regs+0x26>
 8002f0e:	f000 fc5b 	bl	80037c8 <__gnu_Unwind_Restore_VFP_D>
 8002f12:	6823      	ldr	r3, [r4, #0]
 8002f14:	0759      	lsls	r1, r3, #29
 8002f16:	d509      	bpl.n	8002f2c <restore_non_core_regs+0x30>
 8002f18:	071a      	lsls	r2, r3, #28
 8002f1a:	d50e      	bpl.n	8002f3a <restore_non_core_regs+0x3e>
 8002f1c:	06db      	lsls	r3, r3, #27
 8002f1e:	d513      	bpl.n	8002f48 <restore_non_core_regs+0x4c>
 8002f20:	bd10      	pop	{r4, pc}
 8002f22:	f000 fc49 	bl	80037b8 <__gnu_Unwind_Restore_VFP>
 8002f26:	6823      	ldr	r3, [r4, #0]
 8002f28:	0759      	lsls	r1, r3, #29
 8002f2a:	d4f5      	bmi.n	8002f18 <restore_non_core_regs+0x1c>
 8002f2c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002f30:	f000 fc52 	bl	80037d8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8002f34:	6823      	ldr	r3, [r4, #0]
 8002f36:	071a      	lsls	r2, r3, #28
 8002f38:	d4f0      	bmi.n	8002f1c <restore_non_core_regs+0x20>
 8002f3a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8002f3e:	f000 fc53 	bl	80037e8 <__gnu_Unwind_Restore_WMMXD>
 8002f42:	6823      	ldr	r3, [r4, #0]
 8002f44:	06db      	lsls	r3, r3, #27
 8002f46:	d4eb      	bmi.n	8002f20 <restore_non_core_regs+0x24>
 8002f48:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8002f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f50:	f000 bc8e 	b.w	8003870 <__gnu_Unwind_Restore_WMMXC>

08002f54 <__gnu_unwind_24bit.constprop.0>:
 8002f54:	2009      	movs	r0, #9
 8002f56:	4770      	bx	lr

08002f58 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8002f58:	4603      	mov	r3, r0
 8002f5a:	6800      	ldr	r0, [r0, #0]
 8002f5c:	b100      	cbz	r0, 8002f60 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 8002f5e:	4418      	add	r0, r3
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop

08002f64 <_Unwind_DebugHook>:
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop

08002f68 <unwind_phase2>:
 8002f68:	b570      	push	{r4, r5, r6, lr}
 8002f6a:	4604      	mov	r4, r0
 8002f6c:	460e      	mov	r6, r1
 8002f6e:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8002f70:	4620      	mov	r0, r4
 8002f72:	f7ff ff75 	bl	8002e60 <get_eit_entry>
 8002f76:	4605      	mov	r5, r0
 8002f78:	b988      	cbnz	r0, 8002f9e <unwind_phase2+0x36>
 8002f7a:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8002f7c:	6162      	str	r2, [r4, #20]
 8002f7e:	6923      	ldr	r3, [r4, #16]
 8002f80:	4632      	mov	r2, r6
 8002f82:	4621      	mov	r1, r4
 8002f84:	2001      	movs	r0, #1
 8002f86:	4798      	blx	r3
 8002f88:	2808      	cmp	r0, #8
 8002f8a:	d0f0      	beq.n	8002f6e <unwind_phase2+0x6>
 8002f8c:	2807      	cmp	r0, #7
 8002f8e:	d106      	bne.n	8002f9e <unwind_phase2+0x36>
 8002f90:	4628      	mov	r0, r5
 8002f92:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8002f94:	f7ff ffe6 	bl	8002f64 <_Unwind_DebugHook>
 8002f98:	1d30      	adds	r0, r6, #4
 8002f9a:	f000 fc01 	bl	80037a0 <__restore_core_regs>
 8002f9e:	f000 fe7f 	bl	8003ca0 <abort>
 8002fa2:	bf00      	nop

08002fa4 <unwind_phase2_forced>:
 8002fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fa8:	1d0d      	adds	r5, r1, #4
 8002faa:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8002fae:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8002fb2:	4607      	mov	r7, r0
 8002fb4:	4614      	mov	r4, r2
 8002fb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fb8:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8002fbc:	f10d 0c0c 	add.w	ip, sp, #12
 8002fc0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fc6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002fca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fcc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002fd0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002fd4:	ae02      	add	r6, sp, #8
 8002fd6:	f04f 0e00 	mov.w	lr, #0
 8002fda:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8002fde:	f8c6 e000 	str.w	lr, [r6]
 8002fe2:	e020      	b.n	8003026 <unwind_phase2_forced+0x82>
 8002fe4:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002fec:	4631      	mov	r1, r6
 8002fee:	a87a      	add	r0, sp, #488	; 0x1e8
 8002ff0:	f7fe f8f8 	bl	80011e4 <memcpy>
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	aa7a      	add	r2, sp, #488	; 0x1e8
 8002ff8:	4639      	mov	r1, r7
 8002ffa:	4650      	mov	r0, sl
 8002ffc:	4798      	blx	r3
 8002ffe:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8003000:	6473      	str	r3, [r6, #68]	; 0x44
 8003002:	4621      	mov	r1, r4
 8003004:	e9cd 6900 	strd	r6, r9, [sp]
 8003008:	4605      	mov	r5, r0
 800300a:	463b      	mov	r3, r7
 800300c:	463a      	mov	r2, r7
 800300e:	2001      	movs	r0, #1
 8003010:	47c0      	blx	r8
 8003012:	4604      	mov	r4, r0
 8003014:	b9e0      	cbnz	r0, 8003050 <unwind_phase2_forced+0xac>
 8003016:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800301a:	a97a      	add	r1, sp, #488	; 0x1e8
 800301c:	4630      	mov	r0, r6
 800301e:	f7fe f8e1 	bl	80011e4 <memcpy>
 8003022:	2d08      	cmp	r5, #8
 8003024:	d11a      	bne.n	800305c <unwind_phase2_forced+0xb8>
 8003026:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8003028:	4638      	mov	r0, r7
 800302a:	f7ff ff19 	bl	8002e60 <get_eit_entry>
 800302e:	3409      	adds	r4, #9
 8003030:	fa5f fa84 	uxtb.w	sl, r4
 8003034:	4605      	mov	r5, r0
 8003036:	2800      	cmp	r0, #0
 8003038:	d0d4      	beq.n	8002fe4 <unwind_phase2_forced+0x40>
 800303a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800303c:	6473      	str	r3, [r6, #68]	; 0x44
 800303e:	463a      	mov	r2, r7
 8003040:	e9cd 6900 	strd	r6, r9, [sp]
 8003044:	463b      	mov	r3, r7
 8003046:	f04a 0110 	orr.w	r1, sl, #16
 800304a:	2001      	movs	r0, #1
 800304c:	47c0      	blx	r8
 800304e:	b100      	cbz	r0, 8003052 <unwind_phase2_forced+0xae>
 8003050:	2509      	movs	r5, #9
 8003052:	4628      	mov	r0, r5
 8003054:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8003058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800305c:	2d07      	cmp	r5, #7
 800305e:	d1f7      	bne.n	8003050 <unwind_phase2_forced+0xac>
 8003060:	4620      	mov	r0, r4
 8003062:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8003064:	f7ff ff7e 	bl	8002f64 <_Unwind_DebugHook>
 8003068:	a803      	add	r0, sp, #12
 800306a:	f000 fb99 	bl	80037a0 <__restore_core_regs>
 800306e:	bf00      	nop

08003070 <_Unwind_GetCFA>:
 8003070:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8003072:	4770      	bx	lr

08003074 <__gnu_Unwind_RaiseException>:
 8003074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003076:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8003078:	640b      	str	r3, [r1, #64]	; 0x40
 800307a:	f101 0c04 	add.w	ip, r1, #4
 800307e:	460e      	mov	r6, r1
 8003080:	4605      	mov	r5, r0
 8003082:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003086:	b0f9      	sub	sp, #484	; 0x1e4
 8003088:	ac01      	add	r4, sp, #4
 800308a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800308c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003092:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003096:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003098:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800309c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80030a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80030a4:	9700      	str	r7, [sp, #0]
 80030a6:	e006      	b.n	80030b6 <__gnu_Unwind_RaiseException+0x42>
 80030a8:	692b      	ldr	r3, [r5, #16]
 80030aa:	466a      	mov	r2, sp
 80030ac:	4629      	mov	r1, r5
 80030ae:	4798      	blx	r3
 80030b0:	2808      	cmp	r0, #8
 80030b2:	4604      	mov	r4, r0
 80030b4:	d108      	bne.n	80030c8 <__gnu_Unwind_RaiseException+0x54>
 80030b6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80030b8:	4628      	mov	r0, r5
 80030ba:	f7ff fed1 	bl	8002e60 <get_eit_entry>
 80030be:	2800      	cmp	r0, #0
 80030c0:	d0f2      	beq.n	80030a8 <__gnu_Unwind_RaiseException+0x34>
 80030c2:	2009      	movs	r0, #9
 80030c4:	b079      	add	sp, #484	; 0x1e4
 80030c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030c8:	4668      	mov	r0, sp
 80030ca:	f7ff ff17 	bl	8002efc <restore_non_core_regs>
 80030ce:	2c06      	cmp	r4, #6
 80030d0:	d1f7      	bne.n	80030c2 <__gnu_Unwind_RaiseException+0x4e>
 80030d2:	4631      	mov	r1, r6
 80030d4:	4628      	mov	r0, r5
 80030d6:	f7ff ff47 	bl	8002f68 <unwind_phase2>
 80030da:	bf00      	nop

080030dc <__gnu_Unwind_ForcedUnwind>:
 80030dc:	60c1      	str	r1, [r0, #12]
 80030de:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80030e0:	6182      	str	r2, [r0, #24]
 80030e2:	6419      	str	r1, [r3, #64]	; 0x40
 80030e4:	2200      	movs	r2, #0
 80030e6:	4619      	mov	r1, r3
 80030e8:	e75c      	b.n	8002fa4 <unwind_phase2_forced>
 80030ea:	bf00      	nop

080030ec <__gnu_Unwind_Resume>:
 80030ec:	b570      	push	{r4, r5, r6, lr}
 80030ee:	68c6      	ldr	r6, [r0, #12]
 80030f0:	6943      	ldr	r3, [r0, #20]
 80030f2:	640b      	str	r3, [r1, #64]	; 0x40
 80030f4:	b9ae      	cbnz	r6, 8003122 <__gnu_Unwind_Resume+0x36>
 80030f6:	6903      	ldr	r3, [r0, #16]
 80030f8:	460a      	mov	r2, r1
 80030fa:	4604      	mov	r4, r0
 80030fc:	460d      	mov	r5, r1
 80030fe:	4601      	mov	r1, r0
 8003100:	2002      	movs	r0, #2
 8003102:	4798      	blx	r3
 8003104:	2807      	cmp	r0, #7
 8003106:	d005      	beq.n	8003114 <__gnu_Unwind_Resume+0x28>
 8003108:	2808      	cmp	r0, #8
 800310a:	d10f      	bne.n	800312c <__gnu_Unwind_Resume+0x40>
 800310c:	4629      	mov	r1, r5
 800310e:	4620      	mov	r0, r4
 8003110:	f7ff ff2a 	bl	8002f68 <unwind_phase2>
 8003114:	4630      	mov	r0, r6
 8003116:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8003118:	f7ff ff24 	bl	8002f64 <_Unwind_DebugHook>
 800311c:	1d28      	adds	r0, r5, #4
 800311e:	f000 fb3f 	bl	80037a0 <__restore_core_regs>
 8003122:	2201      	movs	r2, #1
 8003124:	f7ff ff3e 	bl	8002fa4 <unwind_phase2_forced>
 8003128:	f000 fdba 	bl	8003ca0 <abort>
 800312c:	f000 fdb8 	bl	8003ca0 <abort>

08003130 <__gnu_Unwind_Resume_or_Rethrow>:
 8003130:	68c2      	ldr	r2, [r0, #12]
 8003132:	b11a      	cbz	r2, 800313c <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8003134:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8003136:	640a      	str	r2, [r1, #64]	; 0x40
 8003138:	2200      	movs	r2, #0
 800313a:	e733      	b.n	8002fa4 <unwind_phase2_forced>
 800313c:	e79a      	b.n	8003074 <__gnu_Unwind_RaiseException>
 800313e:	bf00      	nop

08003140 <_Unwind_Complete>:
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop

08003144 <_Unwind_DeleteException>:
 8003144:	6883      	ldr	r3, [r0, #8]
 8003146:	4601      	mov	r1, r0
 8003148:	b10b      	cbz	r3, 800314e <_Unwind_DeleteException+0xa>
 800314a:	2001      	movs	r0, #1
 800314c:	4718      	bx	r3
 800314e:	4770      	bx	lr

08003150 <_Unwind_VRS_Get>:
 8003150:	2901      	cmp	r1, #1
 8003152:	d012      	beq.n	800317a <_Unwind_VRS_Get+0x2a>
 8003154:	d809      	bhi.n	800316a <_Unwind_VRS_Get+0x1a>
 8003156:	b973      	cbnz	r3, 8003176 <_Unwind_VRS_Get+0x26>
 8003158:	2a0f      	cmp	r2, #15
 800315a:	d80c      	bhi.n	8003176 <_Unwind_VRS_Get+0x26>
 800315c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003160:	4618      	mov	r0, r3
 8003162:	6853      	ldr	r3, [r2, #4]
 8003164:	9a00      	ldr	r2, [sp, #0]
 8003166:	6013      	str	r3, [r2, #0]
 8003168:	4770      	bx	lr
 800316a:	3903      	subs	r1, #3
 800316c:	2901      	cmp	r1, #1
 800316e:	bf94      	ite	ls
 8003170:	2001      	movls	r0, #1
 8003172:	2002      	movhi	r0, #2
 8003174:	4770      	bx	lr
 8003176:	2002      	movs	r0, #2
 8003178:	4770      	bx	lr
 800317a:	4608      	mov	r0, r1
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop

08003180 <_Unwind_GetGR>:
 8003180:	b500      	push	{lr}
 8003182:	b085      	sub	sp, #20
 8003184:	460a      	mov	r2, r1
 8003186:	2300      	movs	r3, #0
 8003188:	a903      	add	r1, sp, #12
 800318a:	9100      	str	r1, [sp, #0]
 800318c:	4619      	mov	r1, r3
 800318e:	f7ff ffdf 	bl	8003150 <_Unwind_VRS_Get>
 8003192:	9803      	ldr	r0, [sp, #12]
 8003194:	b005      	add	sp, #20
 8003196:	f85d fb04 	ldr.w	pc, [sp], #4
 800319a:	bf00      	nop

0800319c <_Unwind_VRS_Set>:
 800319c:	2901      	cmp	r1, #1
 800319e:	d012      	beq.n	80031c6 <_Unwind_VRS_Set+0x2a>
 80031a0:	d809      	bhi.n	80031b6 <_Unwind_VRS_Set+0x1a>
 80031a2:	b973      	cbnz	r3, 80031c2 <_Unwind_VRS_Set+0x26>
 80031a4:	2a0f      	cmp	r2, #15
 80031a6:	d80c      	bhi.n	80031c2 <_Unwind_VRS_Set+0x26>
 80031a8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80031ac:	9a00      	ldr	r2, [sp, #0]
 80031ae:	6812      	ldr	r2, [r2, #0]
 80031b0:	6042      	str	r2, [r0, #4]
 80031b2:	4618      	mov	r0, r3
 80031b4:	4770      	bx	lr
 80031b6:	3903      	subs	r1, #3
 80031b8:	2901      	cmp	r1, #1
 80031ba:	bf94      	ite	ls
 80031bc:	2001      	movls	r0, #1
 80031be:	2002      	movhi	r0, #2
 80031c0:	4770      	bx	lr
 80031c2:	2002      	movs	r0, #2
 80031c4:	4770      	bx	lr
 80031c6:	4608      	mov	r0, r1
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop

080031cc <_Unwind_SetGR>:
 80031cc:	b510      	push	{r4, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	2300      	movs	r3, #0
 80031d2:	ac03      	add	r4, sp, #12
 80031d4:	9203      	str	r2, [sp, #12]
 80031d6:	9400      	str	r4, [sp, #0]
 80031d8:	460a      	mov	r2, r1
 80031da:	4619      	mov	r1, r3
 80031dc:	f7ff ffde 	bl	800319c <_Unwind_VRS_Set>
 80031e0:	b004      	add	sp, #16
 80031e2:	bd10      	pop	{r4, pc}

080031e4 <__gnu_Unwind_Backtrace>:
 80031e4:	b570      	push	{r4, r5, r6, lr}
 80031e6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80031e8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ea:	f102 0c04 	add.w	ip, r2, #4
 80031ee:	4605      	mov	r5, r0
 80031f0:	460c      	mov	r4, r1
 80031f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80031f6:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 80031fa:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 80031fe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003202:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003206:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800320a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800320e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003212:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8003216:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800321a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800321e:	9616      	str	r6, [sp, #88]	; 0x58
 8003220:	e010      	b.n	8003244 <__gnu_Unwind_Backtrace+0x60>
 8003222:	f7ff ffd3 	bl	80031cc <_Unwind_SetGR>
 8003226:	4621      	mov	r1, r4
 8003228:	a816      	add	r0, sp, #88	; 0x58
 800322a:	47a8      	blx	r5
 800322c:	4603      	mov	r3, r0
 800322e:	aa16      	add	r2, sp, #88	; 0x58
 8003230:	4669      	mov	r1, sp
 8003232:	2008      	movs	r0, #8
 8003234:	b983      	cbnz	r3, 8003258 <__gnu_Unwind_Backtrace+0x74>
 8003236:	9b04      	ldr	r3, [sp, #16]
 8003238:	4798      	blx	r3
 800323a:	2805      	cmp	r0, #5
 800323c:	4606      	mov	r6, r0
 800323e:	d00c      	beq.n	800325a <__gnu_Unwind_Backtrace+0x76>
 8003240:	2809      	cmp	r0, #9
 8003242:	d009      	beq.n	8003258 <__gnu_Unwind_Backtrace+0x74>
 8003244:	9926      	ldr	r1, [sp, #152]	; 0x98
 8003246:	4668      	mov	r0, sp
 8003248:	f7ff fe0a 	bl	8002e60 <get_eit_entry>
 800324c:	4603      	mov	r3, r0
 800324e:	466a      	mov	r2, sp
 8003250:	210c      	movs	r1, #12
 8003252:	a816      	add	r0, sp, #88	; 0x58
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0e4      	beq.n	8003222 <__gnu_Unwind_Backtrace+0x3e>
 8003258:	2609      	movs	r6, #9
 800325a:	a816      	add	r0, sp, #88	; 0x58
 800325c:	f7ff fe4e 	bl	8002efc <restore_non_core_regs>
 8003260:	4630      	mov	r0, r6
 8003262:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 8003266:	bd70      	pop	{r4, r5, r6, pc}

08003268 <__gnu_unwind_pr_common>:
 8003268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800326c:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800326e:	b089      	sub	sp, #36	; 0x24
 8003270:	461e      	mov	r6, r3
 8003272:	f854 3b04 	ldr.w	r3, [r4], #4
 8003276:	9406      	str	r4, [sp, #24]
 8003278:	460d      	mov	r5, r1
 800327a:	4617      	mov	r7, r2
 800327c:	f000 0803 	and.w	r8, r0, #3
 8003280:	2e00      	cmp	r6, #0
 8003282:	d079      	beq.n	8003378 <__gnu_unwind_pr_common+0x110>
 8003284:	0c1a      	lsrs	r2, r3, #16
 8003286:	041b      	lsls	r3, r3, #16
 8003288:	9305      	str	r3, [sp, #20]
 800328a:	f88d 201d 	strb.w	r2, [sp, #29]
 800328e:	2302      	movs	r3, #2
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8003296:	f88d 301c 	strb.w	r3, [sp, #28]
 800329a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800329c:	f1b8 0f02 	cmp.w	r8, #2
 80032a0:	bf08      	it	eq
 80032a2:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80032a4:	f013 0301 	ands.w	r3, r3, #1
 80032a8:	d00c      	beq.n	80032c4 <__gnu_unwind_pr_common+0x5c>
 80032aa:	a905      	add	r1, sp, #20
 80032ac:	4638      	mov	r0, r7
 80032ae:	f000 fb79 	bl	80039a4 <__gnu_unwind_execute>
 80032b2:	b918      	cbnz	r0, 80032bc <__gnu_unwind_pr_common+0x54>
 80032b4:	2008      	movs	r0, #8
 80032b6:	b009      	add	sp, #36	; 0x24
 80032b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032bc:	2009      	movs	r0, #9
 80032be:	b009      	add	sp, #36	; 0x24
 80032c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032c4:	f8d4 a000 	ldr.w	sl, [r4]
 80032c8:	f1ba 0f00 	cmp.w	sl, #0
 80032cc:	d0ed      	beq.n	80032aa <__gnu_unwind_pr_common+0x42>
 80032ce:	9301      	str	r3, [sp, #4]
 80032d0:	f000 0308 	and.w	r3, r0, #8
 80032d4:	9302      	str	r3, [sp, #8]
 80032d6:	2e02      	cmp	r6, #2
 80032d8:	d04a      	beq.n	8003370 <__gnu_unwind_pr_common+0x108>
 80032da:	f8b4 a000 	ldrh.w	sl, [r4]
 80032de:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 80032e2:	3404      	adds	r4, #4
 80032e4:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80032e6:	f029 0b01 	bic.w	fp, r9, #1
 80032ea:	210f      	movs	r1, #15
 80032ec:	4638      	mov	r0, r7
 80032ee:	449b      	add	fp, r3
 80032f0:	f7ff ff46 	bl	8003180 <_Unwind_GetGR>
 80032f4:	4583      	cmp	fp, r0
 80032f6:	d839      	bhi.n	800336c <__gnu_unwind_pr_common+0x104>
 80032f8:	f02a 0301 	bic.w	r3, sl, #1
 80032fc:	449b      	add	fp, r3
 80032fe:	4583      	cmp	fp, r0
 8003300:	bf94      	ite	ls
 8003302:	2000      	movls	r0, #0
 8003304:	2001      	movhi	r0, #1
 8003306:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	f00a 0a01 	and.w	sl, sl, #1
 8003312:	ea43 030a 	orr.w	r3, r3, sl
 8003316:	2b01      	cmp	r3, #1
 8003318:	d049      	beq.n	80033ae <__gnu_unwind_pr_common+0x146>
 800331a:	2b02      	cmp	r3, #2
 800331c:	d032      	beq.n	8003384 <__gnu_unwind_pr_common+0x11c>
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1cc      	bne.n	80032bc <__gnu_unwind_pr_common+0x54>
 8003322:	f1b8 0f00 	cmp.w	r8, #0
 8003326:	d002      	beq.n	800332e <__gnu_unwind_pr_common+0xc6>
 8003328:	2800      	cmp	r0, #0
 800332a:	f040 80cd 	bne.w	80034c8 <__gnu_unwind_pr_common+0x260>
 800332e:	3404      	adds	r4, #4
 8003330:	f8d4 a000 	ldr.w	sl, [r4]
 8003334:	f1ba 0f00 	cmp.w	sl, #0
 8003338:	d1cd      	bne.n	80032d6 <__gnu_unwind_pr_common+0x6e>
 800333a:	a905      	add	r1, sp, #20
 800333c:	4638      	mov	r0, r7
 800333e:	f000 fb31 	bl	80039a4 <__gnu_unwind_execute>
 8003342:	2800      	cmp	r0, #0
 8003344:	d1ba      	bne.n	80032bc <__gnu_unwind_pr_common+0x54>
 8003346:	9b01      	ldr	r3, [sp, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0b3      	beq.n	80032b4 <__gnu_unwind_pr_common+0x4c>
 800334c:	210f      	movs	r1, #15
 800334e:	4638      	mov	r0, r7
 8003350:	f7ff ff16 	bl	8003180 <_Unwind_GetGR>
 8003354:	210e      	movs	r1, #14
 8003356:	4602      	mov	r2, r0
 8003358:	4638      	mov	r0, r7
 800335a:	f7ff ff37 	bl	80031cc <_Unwind_SetGR>
 800335e:	4638      	mov	r0, r7
 8003360:	4a6a      	ldr	r2, [pc, #424]	; (800350c <__gnu_unwind_pr_common+0x2a4>)
 8003362:	210f      	movs	r1, #15
 8003364:	f7ff ff32 	bl	80031cc <_Unwind_SetGR>
 8003368:	2007      	movs	r0, #7
 800336a:	e7a8      	b.n	80032be <__gnu_unwind_pr_common+0x56>
 800336c:	2000      	movs	r0, #0
 800336e:	e7ca      	b.n	8003306 <__gnu_unwind_pr_common+0x9e>
 8003370:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8003374:	3408      	adds	r4, #8
 8003376:	e7b5      	b.n	80032e4 <__gnu_unwind_pr_common+0x7c>
 8003378:	021b      	lsls	r3, r3, #8
 800337a:	9305      	str	r3, [sp, #20]
 800337c:	2303      	movs	r3, #3
 800337e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8003382:	e78a      	b.n	800329a <__gnu_unwind_pr_common+0x32>
 8003384:	6823      	ldr	r3, [r4, #0]
 8003386:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800338a:	f1b8 0f00 	cmp.w	r8, #0
 800338e:	d145      	bne.n	800341c <__gnu_unwind_pr_common+0x1b4>
 8003390:	b128      	cbz	r0, 800339e <__gnu_unwind_pr_common+0x136>
 8003392:	9a02      	ldr	r2, [sp, #8]
 8003394:	2a00      	cmp	r2, #0
 8003396:	d05c      	beq.n	8003452 <__gnu_unwind_pr_common+0x1ea>
 8003398:	f1bb 0f00 	cmp.w	fp, #0
 800339c:	d074      	beq.n	8003488 <__gnu_unwind_pr_common+0x220>
 800339e:	2b00      	cmp	r3, #0
 80033a0:	da00      	bge.n	80033a4 <__gnu_unwind_pr_common+0x13c>
 80033a2:	3404      	adds	r4, #4
 80033a4:	f10b 0b01 	add.w	fp, fp, #1
 80033a8:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 80033ac:	e7c0      	b.n	8003330 <__gnu_unwind_pr_common+0xc8>
 80033ae:	f1b8 0f00 	cmp.w	r8, #0
 80033b2:	d119      	bne.n	80033e8 <__gnu_unwind_pr_common+0x180>
 80033b4:	b1b0      	cbz	r0, 80033e4 <__gnu_unwind_pr_common+0x17c>
 80033b6:	6863      	ldr	r3, [r4, #4]
 80033b8:	6822      	ldr	r2, [r4, #0]
 80033ba:	1c99      	adds	r1, r3, #2
 80033bc:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80033c0:	f43f af7c 	beq.w	80032bc <__gnu_unwind_pr_common+0x54>
 80033c4:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80033c8:	3301      	adds	r3, #1
 80033ca:	9104      	str	r1, [sp, #16]
 80033cc:	f000 8090 	beq.w	80034f0 <__gnu_unwind_pr_common+0x288>
 80033d0:	1d20      	adds	r0, r4, #4
 80033d2:	f7ff fdc1 	bl	8002f58 <_Unwind_decode_typeinfo_ptr.constprop.0>
 80033d6:	ab04      	add	r3, sp, #16
 80033d8:	4601      	mov	r1, r0
 80033da:	4628      	mov	r0, r5
 80033dc:	f3af 8000 	nop.w
 80033e0:	2800      	cmp	r0, #0
 80033e2:	d15b      	bne.n	800349c <__gnu_unwind_pr_common+0x234>
 80033e4:	3408      	adds	r4, #8
 80033e6:	e7a3      	b.n	8003330 <__gnu_unwind_pr_common+0xc8>
 80033e8:	210d      	movs	r1, #13
 80033ea:	4638      	mov	r0, r7
 80033ec:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80033f0:	f7ff fec6 	bl	8003180 <_Unwind_GetGR>
 80033f4:	4581      	cmp	r9, r0
 80033f6:	d1f5      	bne.n	80033e4 <__gnu_unwind_pr_common+0x17c>
 80033f8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80033fa:	429c      	cmp	r4, r3
 80033fc:	d1f2      	bne.n	80033e4 <__gnu_unwind_pr_common+0x17c>
 80033fe:	4620      	mov	r0, r4
 8003400:	f7ff fce2 	bl	8002dc8 <selfrel_offset31>
 8003404:	210f      	movs	r1, #15
 8003406:	4602      	mov	r2, r0
 8003408:	4638      	mov	r0, r7
 800340a:	f7ff fedf 	bl	80031cc <_Unwind_SetGR>
 800340e:	4638      	mov	r0, r7
 8003410:	462a      	mov	r2, r5
 8003412:	2100      	movs	r1, #0
 8003414:	f7ff feda 	bl	80031cc <_Unwind_SetGR>
 8003418:	2007      	movs	r0, #7
 800341a:	e750      	b.n	80032be <__gnu_unwind_pr_common+0x56>
 800341c:	210d      	movs	r1, #13
 800341e:	4638      	mov	r0, r7
 8003420:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8003424:	f7ff feac 	bl	8003180 <_Unwind_GetGR>
 8003428:	4581      	cmp	r9, r0
 800342a:	d001      	beq.n	8003430 <__gnu_unwind_pr_common+0x1c8>
 800342c:	6823      	ldr	r3, [r4, #0]
 800342e:	e7b6      	b.n	800339e <__gnu_unwind_pr_common+0x136>
 8003430:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003432:	429c      	cmp	r4, r3
 8003434:	d1fa      	bne.n	800342c <__gnu_unwind_pr_common+0x1c4>
 8003436:	2304      	movs	r3, #4
 8003438:	2200      	movs	r2, #0
 800343a:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 800343e:	18e3      	adds	r3, r4, r3
 8003440:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8003444:	636b      	str	r3, [r5, #52]	; 0x34
 8003446:	6823      	ldr	r3, [r4, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	db59      	blt.n	8003500 <__gnu_unwind_pr_common+0x298>
 800344c:	2301      	movs	r3, #1
 800344e:	9301      	str	r3, [sp, #4]
 8003450:	e7a8      	b.n	80033a4 <__gnu_unwind_pr_common+0x13c>
 8003452:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8003456:	f8cd 800c 	str.w	r8, [sp, #12]
 800345a:	f104 0a04 	add.w	sl, r4, #4
 800345e:	46b0      	mov	r8, r6
 8003460:	4691      	mov	r9, r2
 8003462:	461e      	mov	r6, r3
 8003464:	e00e      	b.n	8003484 <__gnu_unwind_pr_common+0x21c>
 8003466:	4650      	mov	r0, sl
 8003468:	9604      	str	r6, [sp, #16]
 800346a:	f7ff fd75 	bl	8002f58 <_Unwind_decode_typeinfo_ptr.constprop.0>
 800346e:	2200      	movs	r2, #0
 8003470:	4601      	mov	r1, r0
 8003472:	ab04      	add	r3, sp, #16
 8003474:	4628      	mov	r0, r5
 8003476:	f109 0901 	add.w	r9, r9, #1
 800347a:	f10a 0a04 	add.w	sl, sl, #4
 800347e:	f3af 8000 	nop.w
 8003482:	b9e0      	cbnz	r0, 80034be <__gnu_unwind_pr_common+0x256>
 8003484:	45d9      	cmp	r9, fp
 8003486:	d1ee      	bne.n	8003466 <__gnu_unwind_pr_common+0x1fe>
 8003488:	210d      	movs	r1, #13
 800348a:	4638      	mov	r0, r7
 800348c:	f7ff fe78 	bl	8003180 <_Unwind_GetGR>
 8003490:	9b04      	ldr	r3, [sp, #16]
 8003492:	62ac      	str	r4, [r5, #40]	; 0x28
 8003494:	e9c5 0308 	strd	r0, r3, [r5, #32]
 8003498:	2006      	movs	r0, #6
 800349a:	e710      	b.n	80032be <__gnu_unwind_pr_common+0x56>
 800349c:	4681      	mov	r9, r0
 800349e:	210d      	movs	r1, #13
 80034a0:	4638      	mov	r0, r7
 80034a2:	f7ff fe6d 	bl	8003180 <_Unwind_GetGR>
 80034a6:	f1b9 0f02 	cmp.w	r9, #2
 80034aa:	6228      	str	r0, [r5, #32]
 80034ac:	d125      	bne.n	80034fa <__gnu_unwind_pr_common+0x292>
 80034ae:	462b      	mov	r3, r5
 80034b0:	9a04      	ldr	r2, [sp, #16]
 80034b2:	f843 2f2c 	str.w	r2, [r3, #44]!
 80034b6:	626b      	str	r3, [r5, #36]	; 0x24
 80034b8:	62ac      	str	r4, [r5, #40]	; 0x28
 80034ba:	2006      	movs	r0, #6
 80034bc:	e6ff      	b.n	80032be <__gnu_unwind_pr_common+0x56>
 80034be:	4646      	mov	r6, r8
 80034c0:	6823      	ldr	r3, [r4, #0]
 80034c2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80034c6:	e76a      	b.n	800339e <__gnu_unwind_pr_common+0x136>
 80034c8:	4620      	mov	r0, r4
 80034ca:	f7ff fc7d 	bl	8002dc8 <selfrel_offset31>
 80034ce:	3404      	adds	r4, #4
 80034d0:	4602      	mov	r2, r0
 80034d2:	63ac      	str	r4, [r5, #56]	; 0x38
 80034d4:	4628      	mov	r0, r5
 80034d6:	4614      	mov	r4, r2
 80034d8:	f3af 8000 	nop.w
 80034dc:	2800      	cmp	r0, #0
 80034de:	f43f aeed 	beq.w	80032bc <__gnu_unwind_pr_common+0x54>
 80034e2:	4638      	mov	r0, r7
 80034e4:	4622      	mov	r2, r4
 80034e6:	210f      	movs	r1, #15
 80034e8:	f7ff fe70 	bl	80031cc <_Unwind_SetGR>
 80034ec:	2007      	movs	r0, #7
 80034ee:	e6e6      	b.n	80032be <__gnu_unwind_pr_common+0x56>
 80034f0:	210d      	movs	r1, #13
 80034f2:	4638      	mov	r0, r7
 80034f4:	f7ff fe44 	bl	8003180 <_Unwind_GetGR>
 80034f8:	6228      	str	r0, [r5, #32]
 80034fa:	9b04      	ldr	r3, [sp, #16]
 80034fc:	626b      	str	r3, [r5, #36]	; 0x24
 80034fe:	e7db      	b.n	80034b8 <__gnu_unwind_pr_common+0x250>
 8003500:	f10b 0001 	add.w	r0, fp, #1
 8003504:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003508:	e77a      	b.n	8003400 <__gnu_unwind_pr_common+0x198>
 800350a:	bf00      	nop
 800350c:	00000000 	.word	0x00000000

08003510 <__aeabi_unwind_cpp_pr0>:
 8003510:	2300      	movs	r3, #0
 8003512:	e6a9      	b.n	8003268 <__gnu_unwind_pr_common>

08003514 <__aeabi_unwind_cpp_pr1>:
 8003514:	2301      	movs	r3, #1
 8003516:	e6a7      	b.n	8003268 <__gnu_unwind_pr_common>

08003518 <__aeabi_unwind_cpp_pr2>:
 8003518:	2302      	movs	r3, #2
 800351a:	e6a5      	b.n	8003268 <__gnu_unwind_pr_common>

0800351c <_Unwind_VRS_Pop>:
 800351c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003520:	4606      	mov	r6, r0
 8003522:	b0c3      	sub	sp, #268	; 0x10c
 8003524:	4615      	mov	r5, r2
 8003526:	461c      	mov	r4, r3
 8003528:	2904      	cmp	r1, #4
 800352a:	f200 80bf 	bhi.w	80036ac <_Unwind_VRS_Pop+0x190>
 800352e:	e8df f001 	tbb	[pc, r1]
 8003532:	579e      	.short	0x579e
 8003534:	2dbd      	.short	0x2dbd
 8003536:	03          	.byte	0x03
 8003537:	00          	.byte	0x00
 8003538:	2c00      	cmp	r4, #0
 800353a:	f040 80b7 	bne.w	80036ac <_Unwind_VRS_Pop+0x190>
 800353e:	2a10      	cmp	r2, #16
 8003540:	f200 80b4 	bhi.w	80036ac <_Unwind_VRS_Pop+0x190>
 8003544:	6803      	ldr	r3, [r0, #0]
 8003546:	06d8      	lsls	r0, r3, #27
 8003548:	f100 80f9 	bmi.w	800373e <_Unwind_VRS_Pop+0x222>
 800354c:	af20      	add	r7, sp, #128	; 0x80
 800354e:	4638      	mov	r0, r7
 8003550:	f000 f998 	bl	8003884 <__gnu_Unwind_Save_WMMXC>
 8003554:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 8003556:	4639      	mov	r1, r7
 8003558:	2300      	movs	r3, #0
 800355a:	f04f 0c01 	mov.w	ip, #1
 800355e:	fa0c f203 	lsl.w	r2, ip, r3
 8003562:	422a      	tst	r2, r5
 8003564:	4620      	mov	r0, r4
 8003566:	f103 0301 	add.w	r3, r3, #1
 800356a:	d003      	beq.n	8003574 <_Unwind_VRS_Pop+0x58>
 800356c:	f850 2b04 	ldr.w	r2, [r0], #4
 8003570:	600a      	str	r2, [r1, #0]
 8003572:	4604      	mov	r4, r0
 8003574:	2b04      	cmp	r3, #4
 8003576:	f101 0104 	add.w	r1, r1, #4
 800357a:	d1f0      	bne.n	800355e <_Unwind_VRS_Pop+0x42>
 800357c:	4638      	mov	r0, r7
 800357e:	63b4      	str	r4, [r6, #56]	; 0x38
 8003580:	f000 f976 	bl	8003870 <__gnu_Unwind_Restore_WMMXC>
 8003584:	2000      	movs	r0, #0
 8003586:	b043      	add	sp, #268	; 0x10c
 8003588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800358c:	2c03      	cmp	r4, #3
 800358e:	f040 808d 	bne.w	80036ac <_Unwind_VRS_Pop+0x190>
 8003592:	b294      	uxth	r4, r2
 8003594:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8003598:	2b10      	cmp	r3, #16
 800359a:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800359e:	f200 8085 	bhi.w	80036ac <_Unwind_VRS_Pop+0x190>
 80035a2:	6803      	ldr	r3, [r0, #0]
 80035a4:	071f      	lsls	r7, r3, #28
 80035a6:	f100 80d2 	bmi.w	800374e <_Unwind_VRS_Pop+0x232>
 80035aa:	af20      	add	r7, sp, #128	; 0x80
 80035ac:	4638      	mov	r0, r7
 80035ae:	f000 f93d 	bl	800382c <__gnu_Unwind_Save_WMMXD>
 80035b2:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 80035b4:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 80035b8:	b154      	cbz	r4, 80035d0 <_Unwind_VRS_Pop+0xb4>
 80035ba:	460b      	mov	r3, r1
 80035bc:	1ad0      	subs	r0, r2, r3
 80035be:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80035c2:	00e4      	lsls	r4, r4, #3
 80035c4:	581d      	ldr	r5, [r3, r0]
 80035c6:	f843 5b04 	str.w	r5, [r3], #4
 80035ca:	428b      	cmp	r3, r1
 80035cc:	d1fa      	bne.n	80035c4 <_Unwind_VRS_Pop+0xa8>
 80035ce:	4422      	add	r2, r4
 80035d0:	4638      	mov	r0, r7
 80035d2:	63b2      	str	r2, [r6, #56]	; 0x38
 80035d4:	f000 f908 	bl	80037e8 <__gnu_Unwind_Restore_WMMXD>
 80035d8:	2000      	movs	r0, #0
 80035da:	b043      	add	sp, #268	; 0x10c
 80035dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035e0:	2c01      	cmp	r4, #1
 80035e2:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80035e6:	b295      	uxth	r5, r2
 80035e8:	d05c      	beq.n	80036a4 <_Unwind_VRS_Pop+0x188>
 80035ea:	2c05      	cmp	r4, #5
 80035ec:	d15e      	bne.n	80036ac <_Unwind_VRS_Pop+0x190>
 80035ee:	eb08 0905 	add.w	r9, r8, r5
 80035f2:	f1b9 0f20 	cmp.w	r9, #32
 80035f6:	d859      	bhi.n	80036ac <_Unwind_VRS_Pop+0x190>
 80035f8:	f1b8 0f0f 	cmp.w	r8, #15
 80035fc:	d979      	bls.n	80036f2 <_Unwind_VRS_Pop+0x1d6>
 80035fe:	46a9      	mov	r9, r5
 8003600:	2d00      	cmp	r5, #0
 8003602:	f040 808a 	bne.w	800371a <_Unwind_VRS_Pop+0x1fe>
 8003606:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8003608:	b36d      	cbz	r5, 8003666 <_Unwind_VRS_Pop+0x14a>
 800360a:	af20      	add	r7, sp, #128	; 0x80
 800360c:	f04f 0900 	mov.w	r9, #0
 8003610:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8003614:	3f04      	subs	r7, #4
 8003616:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800361a:	f853 1b04 	ldr.w	r1, [r3], #4
 800361e:	f847 1f04 	str.w	r1, [r7, #4]!
 8003622:	42ab      	cmp	r3, r5
 8003624:	d1f9      	bne.n	800361a <_Unwind_VRS_Pop+0xfe>
 8003626:	f1b9 0f00 	cmp.w	r9, #0
 800362a:	d00f      	beq.n	800364c <_Unwind_VRS_Pop+0x130>
 800362c:	466f      	mov	r7, sp
 800362e:	4641      	mov	r1, r8
 8003630:	2910      	cmp	r1, #16
 8003632:	bf38      	it	cc
 8003634:	2110      	movcc	r1, #16
 8003636:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800363a:	3984      	subs	r1, #132	; 0x84
 800363c:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8003640:	f853 0b04 	ldr.w	r0, [r3], #4
 8003644:	f841 0f04 	str.w	r0, [r1, #4]!
 8003648:	42ab      	cmp	r3, r5
 800364a:	d1f9      	bne.n	8003640 <_Unwind_VRS_Pop+0x124>
 800364c:	2c01      	cmp	r4, #1
 800364e:	f000 8086 	beq.w	800375e <_Unwind_VRS_Pop+0x242>
 8003652:	f1b8 0f0f 	cmp.w	r8, #15
 8003656:	63b5      	str	r5, [r6, #56]	; 0x38
 8003658:	d947      	bls.n	80036ea <_Unwind_VRS_Pop+0x1ce>
 800365a:	f1b9 0f00 	cmp.w	r9, #0
 800365e:	d002      	beq.n	8003666 <_Unwind_VRS_Pop+0x14a>
 8003660:	4668      	mov	r0, sp
 8003662:	f000 f8b9 	bl	80037d8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8003666:	2000      	movs	r0, #0
 8003668:	b043      	add	sp, #268	; 0x10c
 800366a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800366e:	b9ec      	cbnz	r4, 80036ac <_Unwind_VRS_Pop+0x190>
 8003670:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003672:	4623      	mov	r3, r4
 8003674:	fa1f fc82 	uxth.w	ip, r2
 8003678:	2401      	movs	r4, #1
 800367a:	1d37      	adds	r7, r6, #4
 800367c:	fa04 f203 	lsl.w	r2, r4, r3
 8003680:	ea12 0f0c 	tst.w	r2, ip
 8003684:	4601      	mov	r1, r0
 8003686:	d004      	beq.n	8003692 <_Unwind_VRS_Pop+0x176>
 8003688:	f851 2b04 	ldr.w	r2, [r1], #4
 800368c:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8003690:	4608      	mov	r0, r1
 8003692:	3301      	adds	r3, #1
 8003694:	2b10      	cmp	r3, #16
 8003696:	d1f1      	bne.n	800367c <_Unwind_VRS_Pop+0x160>
 8003698:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
 800369c:	d1e3      	bne.n	8003666 <_Unwind_VRS_Pop+0x14a>
 800369e:	63b0      	str	r0, [r6, #56]	; 0x38
 80036a0:	4628      	mov	r0, r5
 80036a2:	e004      	b.n	80036ae <_Unwind_VRS_Pop+0x192>
 80036a4:	eb08 0305 	add.w	r3, r8, r5
 80036a8:	2b10      	cmp	r3, #16
 80036aa:	d903      	bls.n	80036b4 <_Unwind_VRS_Pop+0x198>
 80036ac:	2002      	movs	r0, #2
 80036ae:	b043      	add	sp, #268	; 0x10c
 80036b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80036b4:	f1b8 0f0f 	cmp.w	r8, #15
 80036b8:	d8f8      	bhi.n	80036ac <_Unwind_VRS_Pop+0x190>
 80036ba:	6833      	ldr	r3, [r6, #0]
 80036bc:	07da      	lsls	r2, r3, #31
 80036be:	d506      	bpl.n	80036ce <_Unwind_VRS_Pop+0x1b2>
 80036c0:	4630      	mov	r0, r6
 80036c2:	f023 0303 	bic.w	r3, r3, #3
 80036c6:	f840 3b48 	str.w	r3, [r0], #72
 80036ca:	f000 f879 	bl	80037c0 <__gnu_Unwind_Save_VFP>
 80036ce:	af20      	add	r7, sp, #128	; 0x80
 80036d0:	4638      	mov	r0, r7
 80036d2:	f000 f875 	bl	80037c0 <__gnu_Unwind_Save_VFP>
 80036d6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80036d8:	2d00      	cmp	r5, #0
 80036da:	d197      	bne.n	800360c <_Unwind_VRS_Pop+0xf0>
 80036dc:	461d      	mov	r5, r3
 80036de:	3504      	adds	r5, #4
 80036e0:	63b5      	str	r5, [r6, #56]	; 0x38
 80036e2:	4638      	mov	r0, r7
 80036e4:	f000 f868 	bl	80037b8 <__gnu_Unwind_Restore_VFP>
 80036e8:	e7bd      	b.n	8003666 <_Unwind_VRS_Pop+0x14a>
 80036ea:	a820      	add	r0, sp, #128	; 0x80
 80036ec:	f000 f86c 	bl	80037c8 <__gnu_Unwind_Restore_VFP_D>
 80036f0:	e7b3      	b.n	800365a <_Unwind_VRS_Pop+0x13e>
 80036f2:	f1b9 0f10 	cmp.w	r9, #16
 80036f6:	d940      	bls.n	800377a <_Unwind_VRS_Pop+0x25e>
 80036f8:	f1a9 0910 	sub.w	r9, r9, #16
 80036fc:	6833      	ldr	r3, [r6, #0]
 80036fe:	07d9      	lsls	r1, r3, #31
 8003700:	d508      	bpl.n	8003714 <_Unwind_VRS_Pop+0x1f8>
 8003702:	f023 0301 	bic.w	r3, r3, #1
 8003706:	4630      	mov	r0, r6
 8003708:	f043 0302 	orr.w	r3, r3, #2
 800370c:	f840 3b48 	str.w	r3, [r0], #72
 8003710:	f000 f85e 	bl	80037d0 <__gnu_Unwind_Save_VFP_D>
 8003714:	f1b9 0f00 	cmp.w	r9, #0
 8003718:	d032      	beq.n	8003780 <_Unwind_VRS_Pop+0x264>
 800371a:	6833      	ldr	r3, [r6, #0]
 800371c:	075a      	lsls	r2, r3, #29
 800371e:	d420      	bmi.n	8003762 <_Unwind_VRS_Pop+0x246>
 8003720:	f1b8 0f0f 	cmp.w	r8, #15
 8003724:	d925      	bls.n	8003772 <_Unwind_VRS_Pop+0x256>
 8003726:	466f      	mov	r7, sp
 8003728:	4638      	mov	r0, r7
 800372a:	f1c8 0510 	rsb	r5, r8, #16
 800372e:	f000 f857 	bl	80037e0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8003732:	2d00      	cmp	r5, #0
 8003734:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8003736:	f77f af7a 	ble.w	800362e <_Unwind_VRS_Pop+0x112>
 800373a:	af20      	add	r7, sp, #128	; 0x80
 800373c:	e768      	b.n	8003610 <_Unwind_VRS_Pop+0xf4>
 800373e:	f023 0310 	bic.w	r3, r3, #16
 8003742:	6033      	str	r3, [r6, #0]
 8003744:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8003748:	f000 f89c 	bl	8003884 <__gnu_Unwind_Save_WMMXC>
 800374c:	e6fe      	b.n	800354c <_Unwind_VRS_Pop+0x30>
 800374e:	f023 0308 	bic.w	r3, r3, #8
 8003752:	6003      	str	r3, [r0, #0]
 8003754:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8003758:	f000 f868 	bl	800382c <__gnu_Unwind_Save_WMMXD>
 800375c:	e725      	b.n	80035aa <_Unwind_VRS_Pop+0x8e>
 800375e:	af20      	add	r7, sp, #128	; 0x80
 8003760:	e7bd      	b.n	80036de <_Unwind_VRS_Pop+0x1c2>
 8003762:	4630      	mov	r0, r6
 8003764:	f023 0304 	bic.w	r3, r3, #4
 8003768:	f840 3bd0 	str.w	r3, [r0], #208
 800376c:	f000 f838 	bl	80037e0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8003770:	e7d6      	b.n	8003720 <_Unwind_VRS_Pop+0x204>
 8003772:	a820      	add	r0, sp, #128	; 0x80
 8003774:	f000 f82c 	bl	80037d0 <__gnu_Unwind_Save_VFP_D>
 8003778:	e7d5      	b.n	8003726 <_Unwind_VRS_Pop+0x20a>
 800377a:	f04f 0900 	mov.w	r9, #0
 800377e:	e7bd      	b.n	80036fc <_Unwind_VRS_Pop+0x1e0>
 8003780:	f1b8 0f0f 	cmp.w	r8, #15
 8003784:	f63f af3f 	bhi.w	8003606 <_Unwind_VRS_Pop+0xea>
 8003788:	af20      	add	r7, sp, #128	; 0x80
 800378a:	4638      	mov	r0, r7
 800378c:	f000 f820 	bl	80037d0 <__gnu_Unwind_Save_VFP_D>
 8003790:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8003792:	2d00      	cmp	r5, #0
 8003794:	f47f af3a 	bne.w	800360c <_Unwind_VRS_Pop+0xf0>
 8003798:	4638      	mov	r0, r7
 800379a:	f000 f815 	bl	80037c8 <__gnu_Unwind_Restore_VFP_D>
 800379e:	e762      	b.n	8003666 <_Unwind_VRS_Pop+0x14a>

080037a0 <__restore_core_regs>:
 80037a0:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80037a4:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80037a8:	469c      	mov	ip, r3
 80037aa:	46a6      	mov	lr, r4
 80037ac:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80037b0:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80037b4:	46e5      	mov	sp, ip
 80037b6:	bd00      	pop	{pc}

080037b8 <__gnu_Unwind_Restore_VFP>:
 80037b8:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop

080037c0 <__gnu_Unwind_Save_VFP>:
 80037c0:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop

080037c8 <__gnu_Unwind_Restore_VFP_D>:
 80037c8:	ec90 0b20 	vldmia	r0, {d0-d15}
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop

080037d0 <__gnu_Unwind_Save_VFP_D>:
 80037d0:	ec80 0b20 	vstmia	r0, {d0-d15}
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop

080037d8 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80037d8:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop

080037e0 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80037e0:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop

080037e8 <__gnu_Unwind_Restore_WMMXD>:
 80037e8:	ecf0 0102 	ldfe	f0, [r0], #8
 80037ec:	ecf0 1102 	ldfe	f1, [r0], #8
 80037f0:	ecf0 2102 	ldfe	f2, [r0], #8
 80037f4:	ecf0 3102 	ldfe	f3, [r0], #8
 80037f8:	ecf0 4102 	ldfe	f4, [r0], #8
 80037fc:	ecf0 5102 	ldfe	f5, [r0], #8
 8003800:	ecf0 6102 	ldfe	f6, [r0], #8
 8003804:	ecf0 7102 	ldfe	f7, [r0], #8
 8003808:	ecf0 8102 	ldfp	f0, [r0], #8
 800380c:	ecf0 9102 	ldfp	f1, [r0], #8
 8003810:	ecf0 a102 	ldfp	f2, [r0], #8
 8003814:	ecf0 b102 	ldfp	f3, [r0], #8
 8003818:	ecf0 c102 	ldfp	f4, [r0], #8
 800381c:	ecf0 d102 	ldfp	f5, [r0], #8
 8003820:	ecf0 e102 	ldfp	f6, [r0], #8
 8003824:	ecf0 f102 	ldfp	f7, [r0], #8
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop

0800382c <__gnu_Unwind_Save_WMMXD>:
 800382c:	ece0 0102 	stfe	f0, [r0], #8
 8003830:	ece0 1102 	stfe	f1, [r0], #8
 8003834:	ece0 2102 	stfe	f2, [r0], #8
 8003838:	ece0 3102 	stfe	f3, [r0], #8
 800383c:	ece0 4102 	stfe	f4, [r0], #8
 8003840:	ece0 5102 	stfe	f5, [r0], #8
 8003844:	ece0 6102 	stfe	f6, [r0], #8
 8003848:	ece0 7102 	stfe	f7, [r0], #8
 800384c:	ece0 8102 	stfp	f0, [r0], #8
 8003850:	ece0 9102 	stfp	f1, [r0], #8
 8003854:	ece0 a102 	stfp	f2, [r0], #8
 8003858:	ece0 b102 	stfp	f3, [r0], #8
 800385c:	ece0 c102 	stfp	f4, [r0], #8
 8003860:	ece0 d102 	stfp	f5, [r0], #8
 8003864:	ece0 e102 	stfp	f6, [r0], #8
 8003868:	ece0 f102 	stfp	f7, [r0], #8
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop

08003870 <__gnu_Unwind_Restore_WMMXC>:
 8003870:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8003874:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8003878:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 800387c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop

08003884 <__gnu_Unwind_Save_WMMXC>:
 8003884:	fca0 8101 	stc2	1, cr8, [r0], #4
 8003888:	fca0 9101 	stc2	1, cr9, [r0], #4
 800388c:	fca0 a101 	stc2	1, cr10, [r0], #4
 8003890:	fca0 b101 	stc2	1, cr11, [r0], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop

08003898 <_Unwind_RaiseException>:
 8003898:	46ec      	mov	ip, sp
 800389a:	b500      	push	{lr}
 800389c:	e92d 5000 	stmdb	sp!, {ip, lr}
 80038a0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80038a4:	f04f 0300 	mov.w	r3, #0
 80038a8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80038ac:	a901      	add	r1, sp, #4
 80038ae:	f7ff fbe1 	bl	8003074 <__gnu_Unwind_RaiseException>
 80038b2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80038b6:	b012      	add	sp, #72	; 0x48
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop

080038bc <_Unwind_Resume>:
 80038bc:	46ec      	mov	ip, sp
 80038be:	b500      	push	{lr}
 80038c0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80038c4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80038c8:	f04f 0300 	mov.w	r3, #0
 80038cc:	e92d 000c 	stmdb	sp!, {r2, r3}
 80038d0:	a901      	add	r1, sp, #4
 80038d2:	f7ff fc0b 	bl	80030ec <__gnu_Unwind_Resume>
 80038d6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80038da:	b012      	add	sp, #72	; 0x48
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop

080038e0 <_Unwind_Resume_or_Rethrow>:
 80038e0:	46ec      	mov	ip, sp
 80038e2:	b500      	push	{lr}
 80038e4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80038e8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80038f4:	a901      	add	r1, sp, #4
 80038f6:	f7ff fc1b 	bl	8003130 <__gnu_Unwind_Resume_or_Rethrow>
 80038fa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80038fe:	b012      	add	sp, #72	; 0x48
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop

08003904 <_Unwind_ForcedUnwind>:
 8003904:	46ec      	mov	ip, sp
 8003906:	b500      	push	{lr}
 8003908:	e92d 5000 	stmdb	sp!, {ip, lr}
 800390c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	e92d 000c 	stmdb	sp!, {r2, r3}
 8003918:	ab01      	add	r3, sp, #4
 800391a:	f7ff fbdf 	bl	80030dc <__gnu_Unwind_ForcedUnwind>
 800391e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8003922:	b012      	add	sp, #72	; 0x48
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop

08003928 <_Unwind_Backtrace>:
 8003928:	46ec      	mov	ip, sp
 800392a:	b500      	push	{lr}
 800392c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8003930:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8003934:	f04f 0300 	mov.w	r3, #0
 8003938:	e92d 000c 	stmdb	sp!, {r2, r3}
 800393c:	aa01      	add	r2, sp, #4
 800393e:	f7ff fc51 	bl	80031e4 <__gnu_Unwind_Backtrace>
 8003942:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8003946:	b012      	add	sp, #72	; 0x48
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop

0800394c <next_unwind_byte>:
 800394c:	7a02      	ldrb	r2, [r0, #8]
 800394e:	4603      	mov	r3, r0
 8003950:	b97a      	cbnz	r2, 8003972 <next_unwind_byte+0x26>
 8003952:	7a42      	ldrb	r2, [r0, #9]
 8003954:	b1a2      	cbz	r2, 8003980 <next_unwind_byte+0x34>
 8003956:	6841      	ldr	r1, [r0, #4]
 8003958:	3a01      	subs	r2, #1
 800395a:	b410      	push	{r4}
 800395c:	7242      	strb	r2, [r0, #9]
 800395e:	6808      	ldr	r0, [r1, #0]
 8003960:	2203      	movs	r2, #3
 8003962:	1d0c      	adds	r4, r1, #4
 8003964:	721a      	strb	r2, [r3, #8]
 8003966:	0202      	lsls	r2, r0, #8
 8003968:	605c      	str	r4, [r3, #4]
 800396a:	0e00      	lsrs	r0, r0, #24
 800396c:	bc10      	pop	{r4}
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	4770      	bx	lr
 8003972:	6800      	ldr	r0, [r0, #0]
 8003974:	3a01      	subs	r2, #1
 8003976:	721a      	strb	r2, [r3, #8]
 8003978:	0202      	lsls	r2, r0, #8
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	0e00      	lsrs	r0, r0, #24
 800397e:	4770      	bx	lr
 8003980:	20b0      	movs	r0, #176	; 0xb0
 8003982:	4770      	bx	lr

08003984 <_Unwind_GetGR.constprop.0>:
 8003984:	b500      	push	{lr}
 8003986:	b085      	sub	sp, #20
 8003988:	2300      	movs	r3, #0
 800398a:	aa03      	add	r2, sp, #12
 800398c:	9200      	str	r2, [sp, #0]
 800398e:	4619      	mov	r1, r3
 8003990:	220c      	movs	r2, #12
 8003992:	f7ff fbdd 	bl	8003150 <_Unwind_VRS_Get>
 8003996:	9803      	ldr	r0, [sp, #12]
 8003998:	b005      	add	sp, #20
 800399a:	f85d fb04 	ldr.w	pc, [sp], #4
 800399e:	bf00      	nop

080039a0 <unwind_UCB_from_context>:
 80039a0:	e7f0      	b.n	8003984 <_Unwind_GetGR.constprop.0>
 80039a2:	bf00      	nop

080039a4 <__gnu_unwind_execute>:
 80039a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039a8:	4605      	mov	r5, r0
 80039aa:	b085      	sub	sp, #20
 80039ac:	460e      	mov	r6, r1
 80039ae:	f04f 0800 	mov.w	r8, #0
 80039b2:	4630      	mov	r0, r6
 80039b4:	f7ff ffca 	bl	800394c <next_unwind_byte>
 80039b8:	28b0      	cmp	r0, #176	; 0xb0
 80039ba:	4604      	mov	r4, r0
 80039bc:	f000 80ba 	beq.w	8003b34 <__gnu_unwind_execute+0x190>
 80039c0:	0607      	lsls	r7, r0, #24
 80039c2:	d520      	bpl.n	8003a06 <__gnu_unwind_execute+0x62>
 80039c4:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80039c8:	2b80      	cmp	r3, #128	; 0x80
 80039ca:	d04d      	beq.n	8003a68 <__gnu_unwind_execute+0xc4>
 80039cc:	2b90      	cmp	r3, #144	; 0x90
 80039ce:	d036      	beq.n	8003a3e <__gnu_unwind_execute+0x9a>
 80039d0:	2ba0      	cmp	r3, #160	; 0xa0
 80039d2:	d060      	beq.n	8003a96 <__gnu_unwind_execute+0xf2>
 80039d4:	2bb0      	cmp	r3, #176	; 0xb0
 80039d6:	d074      	beq.n	8003ac2 <__gnu_unwind_execute+0x11e>
 80039d8:	2bc0      	cmp	r3, #192	; 0xc0
 80039da:	f000 808b 	beq.w	8003af4 <__gnu_unwind_execute+0x150>
 80039de:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80039e2:	2bd0      	cmp	r3, #208	; 0xd0
 80039e4:	d10b      	bne.n	80039fe <__gnu_unwind_execute+0x5a>
 80039e6:	f000 0207 	and.w	r2, r0, #7
 80039ea:	3201      	adds	r2, #1
 80039ec:	2305      	movs	r3, #5
 80039ee:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80039f2:	2101      	movs	r1, #1
 80039f4:	4628      	mov	r0, r5
 80039f6:	f7ff fd91 	bl	800351c <_Unwind_VRS_Pop>
 80039fa:	2800      	cmp	r0, #0
 80039fc:	d0d9      	beq.n	80039b2 <__gnu_unwind_execute+0xe>
 80039fe:	2009      	movs	r0, #9
 8003a00:	b005      	add	sp, #20
 8003a02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a06:	0083      	lsls	r3, r0, #2
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	1d1f      	adds	r7, r3, #4
 8003a0c:	f10d 090c 	add.w	r9, sp, #12
 8003a10:	2300      	movs	r3, #0
 8003a12:	4619      	mov	r1, r3
 8003a14:	f8cd 9000 	str.w	r9, [sp]
 8003a18:	220d      	movs	r2, #13
 8003a1a:	4628      	mov	r0, r5
 8003a1c:	f7ff fb98 	bl	8003150 <_Unwind_VRS_Get>
 8003a20:	9b03      	ldr	r3, [sp, #12]
 8003a22:	f8cd 9000 	str.w	r9, [sp]
 8003a26:	0660      	lsls	r0, r4, #25
 8003a28:	bf4c      	ite	mi
 8003a2a:	1bdf      	submi	r7, r3, r7
 8003a2c:	18ff      	addpl	r7, r7, r3
 8003a2e:	2300      	movs	r3, #0
 8003a30:	220d      	movs	r2, #13
 8003a32:	4619      	mov	r1, r3
 8003a34:	4628      	mov	r0, r5
 8003a36:	9703      	str	r7, [sp, #12]
 8003a38:	f7ff fbb0 	bl	800319c <_Unwind_VRS_Set>
 8003a3c:	e7b9      	b.n	80039b2 <__gnu_unwind_execute+0xe>
 8003a3e:	f000 030d 	and.w	r3, r0, #13
 8003a42:	2b0d      	cmp	r3, #13
 8003a44:	d0db      	beq.n	80039fe <__gnu_unwind_execute+0x5a>
 8003a46:	af03      	add	r7, sp, #12
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f000 020f 	and.w	r2, r0, #15
 8003a4e:	4619      	mov	r1, r3
 8003a50:	9700      	str	r7, [sp, #0]
 8003a52:	4628      	mov	r0, r5
 8003a54:	f7ff fb7c 	bl	8003150 <_Unwind_VRS_Get>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	9700      	str	r7, [sp, #0]
 8003a5c:	220d      	movs	r2, #13
 8003a5e:	4619      	mov	r1, r3
 8003a60:	4628      	mov	r0, r5
 8003a62:	f7ff fb9b 	bl	800319c <_Unwind_VRS_Set>
 8003a66:	e7a4      	b.n	80039b2 <__gnu_unwind_execute+0xe>
 8003a68:	4630      	mov	r0, r6
 8003a6a:	f7ff ff6f 	bl	800394c <next_unwind_byte>
 8003a6e:	0224      	lsls	r4, r4, #8
 8003a70:	4320      	orrs	r0, r4
 8003a72:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003a76:	d0c2      	beq.n	80039fe <__gnu_unwind_execute+0x5a>
 8003a78:	0104      	lsls	r4, r0, #4
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	b2a2      	uxth	r2, r4
 8003a7e:	4619      	mov	r1, r3
 8003a80:	4628      	mov	r0, r5
 8003a82:	f7ff fd4b 	bl	800351c <_Unwind_VRS_Pop>
 8003a86:	2800      	cmp	r0, #0
 8003a88:	d1b9      	bne.n	80039fe <__gnu_unwind_execute+0x5a>
 8003a8a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8003a8e:	bf18      	it	ne
 8003a90:	f04f 0801 	movne.w	r8, #1
 8003a94:	e78d      	b.n	80039b2 <__gnu_unwind_execute+0xe>
 8003a96:	43c2      	mvns	r2, r0
 8003a98:	f002 0307 	and.w	r3, r2, #7
 8003a9c:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8003aa0:	411a      	asrs	r2, r3
 8003aa2:	0701      	lsls	r1, r0, #28
 8003aa4:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	bf48      	it	mi
 8003aae:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4628      	mov	r0, r5
 8003ab6:	f7ff fd31 	bl	800351c <_Unwind_VRS_Pop>
 8003aba:	2800      	cmp	r0, #0
 8003abc:	f43f af79 	beq.w	80039b2 <__gnu_unwind_execute+0xe>
 8003ac0:	e79d      	b.n	80039fe <__gnu_unwind_execute+0x5a>
 8003ac2:	28b1      	cmp	r0, #177	; 0xb1
 8003ac4:	d03b      	beq.n	8003b3e <__gnu_unwind_execute+0x19a>
 8003ac6:	28b2      	cmp	r0, #178	; 0xb2
 8003ac8:	f000 8093 	beq.w	8003bf2 <__gnu_unwind_execute+0x24e>
 8003acc:	28b3      	cmp	r0, #179	; 0xb3
 8003ace:	d041      	beq.n	8003b54 <__gnu_unwind_execute+0x1b0>
 8003ad0:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8003ad4:	2bb4      	cmp	r3, #180	; 0xb4
 8003ad6:	d092      	beq.n	80039fe <__gnu_unwind_execute+0x5a>
 8003ad8:	f000 0207 	and.w	r2, r0, #7
 8003adc:	3201      	adds	r2, #1
 8003ade:	2301      	movs	r3, #1
 8003ae0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4628      	mov	r0, r5
 8003ae8:	f7ff fd18 	bl	800351c <_Unwind_VRS_Pop>
 8003aec:	2800      	cmp	r0, #0
 8003aee:	f43f af60 	beq.w	80039b2 <__gnu_unwind_execute+0xe>
 8003af2:	e784      	b.n	80039fe <__gnu_unwind_execute+0x5a>
 8003af4:	28c6      	cmp	r0, #198	; 0xc6
 8003af6:	d04a      	beq.n	8003b8e <__gnu_unwind_execute+0x1ea>
 8003af8:	28c7      	cmp	r0, #199	; 0xc7
 8003afa:	d054      	beq.n	8003ba6 <__gnu_unwind_execute+0x202>
 8003afc:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8003b00:	2bc0      	cmp	r3, #192	; 0xc0
 8003b02:	d063      	beq.n	8003bcc <__gnu_unwind_execute+0x228>
 8003b04:	28c8      	cmp	r0, #200	; 0xc8
 8003b06:	d068      	beq.n	8003bda <__gnu_unwind_execute+0x236>
 8003b08:	28c9      	cmp	r0, #201	; 0xc9
 8003b0a:	f47f af78 	bne.w	80039fe <__gnu_unwind_execute+0x5a>
 8003b0e:	4630      	mov	r0, r6
 8003b10:	f7ff ff1c 	bl	800394c <next_unwind_byte>
 8003b14:	0302      	lsls	r2, r0, #12
 8003b16:	f000 000f 	and.w	r0, r0, #15
 8003b1a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8003b1e:	3001      	adds	r0, #1
 8003b20:	4302      	orrs	r2, r0
 8003b22:	2101      	movs	r1, #1
 8003b24:	2305      	movs	r3, #5
 8003b26:	4628      	mov	r0, r5
 8003b28:	f7ff fcf8 	bl	800351c <_Unwind_VRS_Pop>
 8003b2c:	2800      	cmp	r0, #0
 8003b2e:	f43f af40 	beq.w	80039b2 <__gnu_unwind_execute+0xe>
 8003b32:	e764      	b.n	80039fe <__gnu_unwind_execute+0x5a>
 8003b34:	f1b8 0f00 	cmp.w	r8, #0
 8003b38:	d018      	beq.n	8003b6c <__gnu_unwind_execute+0x1c8>
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	e760      	b.n	8003a00 <__gnu_unwind_execute+0x5c>
 8003b3e:	4630      	mov	r0, r6
 8003b40:	f7ff ff04 	bl	800394c <next_unwind_byte>
 8003b44:	4602      	mov	r2, r0
 8003b46:	2800      	cmp	r0, #0
 8003b48:	f43f af59 	beq.w	80039fe <__gnu_unwind_execute+0x5a>
 8003b4c:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8003b50:	d0c8      	beq.n	8003ae4 <__gnu_unwind_execute+0x140>
 8003b52:	e754      	b.n	80039fe <__gnu_unwind_execute+0x5a>
 8003b54:	4630      	mov	r0, r6
 8003b56:	f7ff fef9 	bl	800394c <next_unwind_byte>
 8003b5a:	0302      	lsls	r2, r0, #12
 8003b5c:	f000 030f 	and.w	r3, r0, #15
 8003b60:	3301      	adds	r3, #1
 8003b62:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8003b66:	431a      	orrs	r2, r3
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e7bb      	b.n	8003ae4 <__gnu_unwind_execute+0x140>
 8003b6c:	ac03      	add	r4, sp, #12
 8003b6e:	4643      	mov	r3, r8
 8003b70:	220e      	movs	r2, #14
 8003b72:	4641      	mov	r1, r8
 8003b74:	9400      	str	r4, [sp, #0]
 8003b76:	4628      	mov	r0, r5
 8003b78:	f7ff faea 	bl	8003150 <_Unwind_VRS_Get>
 8003b7c:	9400      	str	r4, [sp, #0]
 8003b7e:	4643      	mov	r3, r8
 8003b80:	220f      	movs	r2, #15
 8003b82:	4641      	mov	r1, r8
 8003b84:	4628      	mov	r0, r5
 8003b86:	f7ff fb09 	bl	800319c <_Unwind_VRS_Set>
 8003b8a:	4640      	mov	r0, r8
 8003b8c:	e738      	b.n	8003a00 <__gnu_unwind_execute+0x5c>
 8003b8e:	4630      	mov	r0, r6
 8003b90:	f7ff fedc 	bl	800394c <next_unwind_byte>
 8003b94:	0302      	lsls	r2, r0, #12
 8003b96:	f000 030f 	and.w	r3, r0, #15
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e79e      	b.n	8003ae4 <__gnu_unwind_execute+0x140>
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	f7ff fed0 	bl	800394c <next_unwind_byte>
 8003bac:	4602      	mov	r2, r0
 8003bae:	2800      	cmp	r0, #0
 8003bb0:	f43f af25 	beq.w	80039fe <__gnu_unwind_execute+0x5a>
 8003bb4:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8003bb8:	f47f af21 	bne.w	80039fe <__gnu_unwind_execute+0x5a>
 8003bbc:	2104      	movs	r1, #4
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	f7ff fcac 	bl	800351c <_Unwind_VRS_Pop>
 8003bc4:	2800      	cmp	r0, #0
 8003bc6:	f43f aef4 	beq.w	80039b2 <__gnu_unwind_execute+0xe>
 8003bca:	e718      	b.n	80039fe <__gnu_unwind_execute+0x5a>
 8003bcc:	f000 020f 	and.w	r2, r0, #15
 8003bd0:	3201      	adds	r2, #1
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8003bd8:	e784      	b.n	8003ae4 <__gnu_unwind_execute+0x140>
 8003bda:	4630      	mov	r0, r6
 8003bdc:	f7ff feb6 	bl	800394c <next_unwind_byte>
 8003be0:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8003be4:	f000 030f 	and.w	r3, r0, #15
 8003be8:	3210      	adds	r2, #16
 8003bea:	3301      	adds	r3, #1
 8003bec:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8003bf0:	e797      	b.n	8003b22 <__gnu_unwind_execute+0x17e>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f10d 090c 	add.w	r9, sp, #12
 8003bf8:	220d      	movs	r2, #13
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	f8cd 9000 	str.w	r9, [sp]
 8003c00:	4628      	mov	r0, r5
 8003c02:	f7ff faa5 	bl	8003150 <_Unwind_VRS_Get>
 8003c06:	4630      	mov	r0, r6
 8003c08:	f7ff fea0 	bl	800394c <next_unwind_byte>
 8003c0c:	0602      	lsls	r2, r0, #24
 8003c0e:	f04f 0402 	mov.w	r4, #2
 8003c12:	d50c      	bpl.n	8003c2e <__gnu_unwind_execute+0x28a>
 8003c14:	9b03      	ldr	r3, [sp, #12]
 8003c16:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8003c1a:	40a0      	lsls	r0, r4
 8003c1c:	4418      	add	r0, r3
 8003c1e:	9003      	str	r0, [sp, #12]
 8003c20:	4630      	mov	r0, r6
 8003c22:	f7ff fe93 	bl	800394c <next_unwind_byte>
 8003c26:	0603      	lsls	r3, r0, #24
 8003c28:	f104 0407 	add.w	r4, r4, #7
 8003c2c:	d4f2      	bmi.n	8003c14 <__gnu_unwind_execute+0x270>
 8003c2e:	9b03      	ldr	r3, [sp, #12]
 8003c30:	f8cd 9000 	str.w	r9, [sp]
 8003c34:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8003c38:	40a2      	lsls	r2, r4
 8003c3a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c3e:	441a      	add	r2, r3
 8003c40:	2300      	movs	r3, #0
 8003c42:	9203      	str	r2, [sp, #12]
 8003c44:	4619      	mov	r1, r3
 8003c46:	220d      	movs	r2, #13
 8003c48:	4628      	mov	r0, r5
 8003c4a:	f7ff faa7 	bl	800319c <_Unwind_VRS_Set>
 8003c4e:	e6b0      	b.n	80039b2 <__gnu_unwind_execute+0xe>

08003c50 <__gnu_unwind_frame>:
 8003c50:	b510      	push	{r4, lr}
 8003c52:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8003c54:	6853      	ldr	r3, [r2, #4]
 8003c56:	b084      	sub	sp, #16
 8003c58:	f04f 0c03 	mov.w	ip, #3
 8003c5c:	3208      	adds	r2, #8
 8003c5e:	021c      	lsls	r4, r3, #8
 8003c60:	4608      	mov	r0, r1
 8003c62:	0e1b      	lsrs	r3, r3, #24
 8003c64:	a901      	add	r1, sp, #4
 8003c66:	9401      	str	r4, [sp, #4]
 8003c68:	9202      	str	r2, [sp, #8]
 8003c6a:	f88d c00c 	strb.w	ip, [sp, #12]
 8003c6e:	f88d 300d 	strb.w	r3, [sp, #13]
 8003c72:	f7ff fe97 	bl	80039a4 <__gnu_unwind_execute>
 8003c76:	b004      	add	sp, #16
 8003c78:	bd10      	pop	{r4, pc}
 8003c7a:	bf00      	nop

08003c7c <_Unwind_GetRegionStart>:
 8003c7c:	b508      	push	{r3, lr}
 8003c7e:	f7ff fe8f 	bl	80039a0 <unwind_UCB_from_context>
 8003c82:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8003c84:	bd08      	pop	{r3, pc}
 8003c86:	bf00      	nop

08003c88 <_Unwind_GetLanguageSpecificData>:
 8003c88:	b508      	push	{r3, lr}
 8003c8a:	f7ff fe89 	bl	80039a0 <unwind_UCB_from_context>
 8003c8e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8003c90:	79c3      	ldrb	r3, [r0, #7]
 8003c92:	3302      	adds	r3, #2
 8003c94:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003c98:	bd08      	pop	{r3, pc}
 8003c9a:	bf00      	nop

08003c9c <__aeabi_idiv0>:
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop

08003ca0 <abort>:
 8003ca0:	b508      	push	{r3, lr}
 8003ca2:	2006      	movs	r0, #6
 8003ca4:	f000 f898 	bl	8003dd8 <raise>
 8003ca8:	2001      	movs	r0, #1
 8003caa:	f7fd f871 	bl	8000d90 <_exit>
 8003cae:	bf00      	nop

08003cb0 <_init_signal_r>:
 8003cb0:	b538      	push	{r3, r4, r5, lr}
 8003cb2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003cb4:	b10c      	cbz	r4, 8003cba <_init_signal_r+0xa>
 8003cb6:	2000      	movs	r0, #0
 8003cb8:	bd38      	pop	{r3, r4, r5, pc}
 8003cba:	2180      	movs	r1, #128	; 0x80
 8003cbc:	4605      	mov	r5, r0
 8003cbe:	f7fd fbdf 	bl	8001480 <_malloc_r>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	6468      	str	r0, [r5, #68]	; 0x44
 8003cc6:	b130      	cbz	r0, 8003cd6 <_init_signal_r+0x26>
 8003cc8:	1f03      	subs	r3, r0, #4
 8003cca:	327c      	adds	r2, #124	; 0x7c
 8003ccc:	f843 4f04 	str.w	r4, [r3, #4]!
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d1fb      	bne.n	8003ccc <_init_signal_r+0x1c>
 8003cd4:	e7ef      	b.n	8003cb6 <_init_signal_r+0x6>
 8003cd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cda:	bd38      	pop	{r3, r4, r5, pc}

08003cdc <_signal_r>:
 8003cdc:	291f      	cmp	r1, #31
 8003cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce0:	4605      	mov	r5, r0
 8003ce2:	d808      	bhi.n	8003cf6 <_signal_r+0x1a>
 8003ce4:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8003ce6:	460c      	mov	r4, r1
 8003ce8:	4617      	mov	r7, r2
 8003cea:	b14e      	cbz	r6, 8003d00 <_signal_r+0x24>
 8003cec:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003cf0:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 8003cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cf6:	2316      	movs	r3, #22
 8003cf8:	6003      	str	r3, [r0, #0]
 8003cfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d00:	2180      	movs	r1, #128	; 0x80
 8003d02:	f7fd fbbd 	bl	8001480 <_malloc_r>
 8003d06:	4606      	mov	r6, r0
 8003d08:	6468      	str	r0, [r5, #68]	; 0x44
 8003d0a:	b140      	cbz	r0, 8003d1e <_signal_r+0x42>
 8003d0c:	1f03      	subs	r3, r0, #4
 8003d0e:	f100 057c 	add.w	r5, r0, #124	; 0x7c
 8003d12:	2100      	movs	r1, #0
 8003d14:	f843 1f04 	str.w	r1, [r3, #4]!
 8003d18:	429d      	cmp	r5, r3
 8003d1a:	d1fb      	bne.n	8003d14 <_signal_r+0x38>
 8003d1c:	e7e6      	b.n	8003cec <_signal_r+0x10>
 8003d1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003d24 <_raise_r>:
 8003d24:	291f      	cmp	r1, #31
 8003d26:	b538      	push	{r3, r4, r5, lr}
 8003d28:	4605      	mov	r5, r0
 8003d2a:	d820      	bhi.n	8003d6e <_raise_r+0x4a>
 8003d2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003d2e:	460c      	mov	r4, r1
 8003d30:	b16a      	cbz	r2, 8003d4e <_raise_r+0x2a>
 8003d32:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003d36:	b153      	cbz	r3, 8003d4e <_raise_r+0x2a>
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d016      	beq.n	8003d6a <_raise_r+0x46>
 8003d3c:	1c59      	adds	r1, r3, #1
 8003d3e:	d010      	beq.n	8003d62 <_raise_r+0x3e>
 8003d40:	2500      	movs	r5, #0
 8003d42:	4620      	mov	r0, r4
 8003d44:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 8003d48:	4798      	blx	r3
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	bd38      	pop	{r3, r4, r5, pc}
 8003d4e:	4628      	mov	r0, r5
 8003d50:	f000 f8f8 	bl	8003f44 <_getpid_r>
 8003d54:	4622      	mov	r2, r4
 8003d56:	4601      	mov	r1, r0
 8003d58:	4628      	mov	r0, r5
 8003d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d5e:	f000 b8db 	b.w	8003f18 <_kill_r>
 8003d62:	2316      	movs	r3, #22
 8003d64:	6003      	str	r3, [r0, #0]
 8003d66:	2001      	movs	r0, #1
 8003d68:	bd38      	pop	{r3, r4, r5, pc}
 8003d6a:	2000      	movs	r0, #0
 8003d6c:	bd38      	pop	{r3, r4, r5, pc}
 8003d6e:	2316      	movs	r3, #22
 8003d70:	6003      	str	r3, [r0, #0]
 8003d72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d76:	bd38      	pop	{r3, r4, r5, pc}

08003d78 <__sigtramp_r>:
 8003d78:	291f      	cmp	r1, #31
 8003d7a:	d82a      	bhi.n	8003dd2 <__sigtramp_r+0x5a>
 8003d7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003d7e:	b538      	push	{r3, r4, r5, lr}
 8003d80:	460c      	mov	r4, r1
 8003d82:	4605      	mov	r5, r0
 8003d84:	b182      	cbz	r2, 8003da8 <__sigtramp_r+0x30>
 8003d86:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8003d8a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8003d8e:	b14b      	cbz	r3, 8003da4 <__sigtramp_r+0x2c>
 8003d90:	1c59      	adds	r1, r3, #1
 8003d92:	d019      	beq.n	8003dc8 <__sigtramp_r+0x50>
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d015      	beq.n	8003dc4 <__sigtramp_r+0x4c>
 8003d98:	2500      	movs	r5, #0
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	6015      	str	r5, [r2, #0]
 8003d9e:	4798      	blx	r3
 8003da0:	4628      	mov	r0, r5
 8003da2:	bd38      	pop	{r3, r4, r5, pc}
 8003da4:	2001      	movs	r0, #1
 8003da6:	bd38      	pop	{r3, r4, r5, pc}
 8003da8:	2180      	movs	r1, #128	; 0x80
 8003daa:	f7fd fb69 	bl	8001480 <_malloc_r>
 8003dae:	4602      	mov	r2, r0
 8003db0:	6468      	str	r0, [r5, #68]	; 0x44
 8003db2:	b158      	cbz	r0, 8003dcc <__sigtramp_r+0x54>
 8003db4:	1f03      	subs	r3, r0, #4
 8003db6:	2100      	movs	r1, #0
 8003db8:	307c      	adds	r0, #124	; 0x7c
 8003dba:	f843 1f04 	str.w	r1, [r3, #4]!
 8003dbe:	4298      	cmp	r0, r3
 8003dc0:	d1fb      	bne.n	8003dba <__sigtramp_r+0x42>
 8003dc2:	e7e0      	b.n	8003d86 <__sigtramp_r+0xe>
 8003dc4:	2003      	movs	r0, #3
 8003dc6:	bd38      	pop	{r3, r4, r5, pc}
 8003dc8:	2002      	movs	r0, #2
 8003dca:	bd38      	pop	{r3, r4, r5, pc}
 8003dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003dd0:	bd38      	pop	{r3, r4, r5, pc}
 8003dd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003dd6:	4770      	bx	lr

08003dd8 <raise>:
 8003dd8:	b538      	push	{r3, r4, r5, lr}
 8003dda:	4b14      	ldr	r3, [pc, #80]	; (8003e2c <raise+0x54>)
 8003ddc:	281f      	cmp	r0, #31
 8003dde:	681d      	ldr	r5, [r3, #0]
 8003de0:	d81f      	bhi.n	8003e22 <raise+0x4a>
 8003de2:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8003de4:	4604      	mov	r4, r0
 8003de6:	b162      	cbz	r2, 8003e02 <raise+0x2a>
 8003de8:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8003dec:	b14b      	cbz	r3, 8003e02 <raise+0x2a>
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d015      	beq.n	8003e1e <raise+0x46>
 8003df2:	1c59      	adds	r1, r3, #1
 8003df4:	d00f      	beq.n	8003e16 <raise+0x3e>
 8003df6:	2500      	movs	r5, #0
 8003df8:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8003dfc:	4798      	blx	r3
 8003dfe:	4628      	mov	r0, r5
 8003e00:	bd38      	pop	{r3, r4, r5, pc}
 8003e02:	4628      	mov	r0, r5
 8003e04:	f000 f89e 	bl	8003f44 <_getpid_r>
 8003e08:	4622      	mov	r2, r4
 8003e0a:	4601      	mov	r1, r0
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e12:	f000 b881 	b.w	8003f18 <_kill_r>
 8003e16:	2316      	movs	r3, #22
 8003e18:	602b      	str	r3, [r5, #0]
 8003e1a:	2001      	movs	r0, #1
 8003e1c:	bd38      	pop	{r3, r4, r5, pc}
 8003e1e:	2000      	movs	r0, #0
 8003e20:	bd38      	pop	{r3, r4, r5, pc}
 8003e22:	2316      	movs	r3, #22
 8003e24:	602b      	str	r3, [r5, #0]
 8003e26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e2a:	bd38      	pop	{r3, r4, r5, pc}
 8003e2c:	20000004 	.word	0x20000004

08003e30 <signal>:
 8003e30:	4b12      	ldr	r3, [pc, #72]	; (8003e7c <signal+0x4c>)
 8003e32:	281f      	cmp	r0, #31
 8003e34:	b570      	push	{r4, r5, r6, lr}
 8003e36:	681e      	ldr	r6, [r3, #0]
 8003e38:	d808      	bhi.n	8003e4c <signal+0x1c>
 8003e3a:	460d      	mov	r5, r1
 8003e3c:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8003e3e:	4604      	mov	r4, r0
 8003e40:	b149      	cbz	r1, 8003e56 <signal+0x26>
 8003e42:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8003e46:	f841 5024 	str.w	r5, [r1, r4, lsl #2]
 8003e4a:	bd70      	pop	{r4, r5, r6, pc}
 8003e4c:	2316      	movs	r3, #22
 8003e4e:	6033      	str	r3, [r6, #0]
 8003e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e54:	bd70      	pop	{r4, r5, r6, pc}
 8003e56:	2180      	movs	r1, #128	; 0x80
 8003e58:	4630      	mov	r0, r6
 8003e5a:	f7fd fb11 	bl	8001480 <_malloc_r>
 8003e5e:	4601      	mov	r1, r0
 8003e60:	6470      	str	r0, [r6, #68]	; 0x44
 8003e62:	b140      	cbz	r0, 8003e76 <signal+0x46>
 8003e64:	1f03      	subs	r3, r0, #4
 8003e66:	f100 0c7c 	add.w	ip, r0, #124	; 0x7c
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f843 2f04 	str.w	r2, [r3, #4]!
 8003e70:	4563      	cmp	r3, ip
 8003e72:	d1fb      	bne.n	8003e6c <signal+0x3c>
 8003e74:	e7e5      	b.n	8003e42 <signal+0x12>
 8003e76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e7a:	bd70      	pop	{r4, r5, r6, pc}
 8003e7c:	20000004 	.word	0x20000004

08003e80 <_init_signal>:
 8003e80:	b538      	push	{r3, r4, r5, lr}
 8003e82:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <_init_signal+0x30>)
 8003e84:	681d      	ldr	r5, [r3, #0]
 8003e86:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8003e88:	b10c      	cbz	r4, 8003e8e <_init_signal+0xe>
 8003e8a:	2000      	movs	r0, #0
 8003e8c:	bd38      	pop	{r3, r4, r5, pc}
 8003e8e:	2180      	movs	r1, #128	; 0x80
 8003e90:	4628      	mov	r0, r5
 8003e92:	f7fd faf5 	bl	8001480 <_malloc_r>
 8003e96:	6468      	str	r0, [r5, #68]	; 0x44
 8003e98:	b138      	cbz	r0, 8003eaa <_init_signal+0x2a>
 8003e9a:	1f03      	subs	r3, r0, #4
 8003e9c:	f100 027c 	add.w	r2, r0, #124	; 0x7c
 8003ea0:	f843 4f04 	str.w	r4, [r3, #4]!
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d1fb      	bne.n	8003ea0 <_init_signal+0x20>
 8003ea8:	e7ef      	b.n	8003e8a <_init_signal+0xa>
 8003eaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003eae:	bd38      	pop	{r3, r4, r5, pc}
 8003eb0:	20000004 	.word	0x20000004

08003eb4 <__sigtramp>:
 8003eb4:	b538      	push	{r3, r4, r5, lr}
 8003eb6:	4b17      	ldr	r3, [pc, #92]	; (8003f14 <__sigtramp+0x60>)
 8003eb8:	281f      	cmp	r0, #31
 8003eba:	681d      	ldr	r5, [r3, #0]
 8003ebc:	d826      	bhi.n	8003f0c <__sigtramp+0x58>
 8003ebe:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8003ec0:	4604      	mov	r4, r0
 8003ec2:	b182      	cbz	r2, 8003ee6 <__sigtramp+0x32>
 8003ec4:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8003ec8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8003ecc:	b14b      	cbz	r3, 8003ee2 <__sigtramp+0x2e>
 8003ece:	1c59      	adds	r1, r3, #1
 8003ed0:	d01a      	beq.n	8003f08 <__sigtramp+0x54>
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d016      	beq.n	8003f04 <__sigtramp+0x50>
 8003ed6:	2500      	movs	r5, #0
 8003ed8:	4620      	mov	r0, r4
 8003eda:	6015      	str	r5, [r2, #0]
 8003edc:	4798      	blx	r3
 8003ede:	4628      	mov	r0, r5
 8003ee0:	bd38      	pop	{r3, r4, r5, pc}
 8003ee2:	2001      	movs	r0, #1
 8003ee4:	bd38      	pop	{r3, r4, r5, pc}
 8003ee6:	2180      	movs	r1, #128	; 0x80
 8003ee8:	4628      	mov	r0, r5
 8003eea:	f7fd fac9 	bl	8001480 <_malloc_r>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	6468      	str	r0, [r5, #68]	; 0x44
 8003ef2:	b158      	cbz	r0, 8003f0c <__sigtramp+0x58>
 8003ef4:	1f03      	subs	r3, r0, #4
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	307c      	adds	r0, #124	; 0x7c
 8003efa:	f843 1f04 	str.w	r1, [r3, #4]!
 8003efe:	4283      	cmp	r3, r0
 8003f00:	d1fb      	bne.n	8003efa <__sigtramp+0x46>
 8003f02:	e7df      	b.n	8003ec4 <__sigtramp+0x10>
 8003f04:	2003      	movs	r0, #3
 8003f06:	bd38      	pop	{r3, r4, r5, pc}
 8003f08:	2002      	movs	r0, #2
 8003f0a:	bd38      	pop	{r3, r4, r5, pc}
 8003f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f10:	bd38      	pop	{r3, r4, r5, pc}
 8003f12:	bf00      	nop
 8003f14:	20000004 	.word	0x20000004

08003f18 <_kill_r>:
 8003f18:	b570      	push	{r4, r5, r6, lr}
 8003f1a:	460c      	mov	r4, r1
 8003f1c:	4d08      	ldr	r5, [pc, #32]	; (8003f40 <_kill_r+0x28>)
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2600      	movs	r6, #0
 8003f22:	4620      	mov	r0, r4
 8003f24:	4611      	mov	r1, r2
 8003f26:	461c      	mov	r4, r3
 8003f28:	602e      	str	r6, [r5, #0]
 8003f2a:	f7fc ff23 	bl	8000d74 <_kill>
 8003f2e:	1c43      	adds	r3, r0, #1
 8003f30:	d000      	beq.n	8003f34 <_kill_r+0x1c>
 8003f32:	bd70      	pop	{r4, r5, r6, pc}
 8003f34:	682b      	ldr	r3, [r5, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0fb      	beq.n	8003f32 <_kill_r+0x1a>
 8003f3a:	6023      	str	r3, [r4, #0]
 8003f3c:	bd70      	pop	{r4, r5, r6, pc}
 8003f3e:	bf00      	nop
 8003f40:	200003a4 	.word	0x200003a4

08003f44 <_getpid_r>:
 8003f44:	f7fc bf14 	b.w	8000d70 <_getpid>

08003f48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003f48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f4c:	480d      	ldr	r0, [pc, #52]	; (8003f84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003f4e:	490e      	ldr	r1, [pc, #56]	; (8003f88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003f50:	4a0e      	ldr	r2, [pc, #56]	; (8003f8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f54:	e002      	b.n	8003f5c <LoopCopyDataInit>

08003f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f5a:	3304      	adds	r3, #4

08003f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f60:	d3f9      	bcc.n	8003f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f62:	4a0b      	ldr	r2, [pc, #44]	; (8003f90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003f64:	4c0b      	ldr	r4, [pc, #44]	; (8003f94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f68:	e001      	b.n	8003f6e <LoopFillZerobss>

08003f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f6c:	3204      	adds	r2, #4

08003f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f70:	d3fb      	bcc.n	8003f6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003f72:	f7fd f809 	bl	8000f88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f76:	f7fd f901 	bl	800117c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f7a:	f7fc fa11 	bl	80003a0 <main>
  bx  lr    
 8003f7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003f80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f88:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8003f8c:	0800b97c 	.word	0x0800b97c
  ldr r2, =_sbss
 8003f90:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8003f94:	20000a8c 	.word	0x20000a8c

08003f98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f98:	e7fe      	b.n	8003f98 <ADC_IRQHandler>
	...

08003f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003fa0:	4b0e      	ldr	r3, [pc, #56]	; (8003fdc <HAL_Init+0x40>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a0d      	ldr	r2, [pc, #52]	; (8003fdc <HAL_Init+0x40>)
 8003fa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003faa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003fac:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <HAL_Init+0x40>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a0a      	ldr	r2, [pc, #40]	; (8003fdc <HAL_Init+0x40>)
 8003fb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fb8:	4b08      	ldr	r3, [pc, #32]	; (8003fdc <HAL_Init+0x40>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a07      	ldr	r2, [pc, #28]	; (8003fdc <HAL_Init+0x40>)
 8003fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fc4:	2003      	movs	r0, #3
 8003fc6:	f000 f94f 	bl	8004268 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fca:	2000      	movs	r0, #0
 8003fcc:	f000 f808 	bl	8003fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fd0:	f7fc fca0 	bl	8000914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	40023c00 	.word	0x40023c00

08003fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fe8:	4b12      	ldr	r3, [pc, #72]	; (8004034 <HAL_InitTick+0x54>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	4b12      	ldr	r3, [pc, #72]	; (8004038 <HAL_InitTick+0x58>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 f967 	bl	80042d2 <HAL_SYSTICK_Config>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e00e      	b.n	800402c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b0f      	cmp	r3, #15
 8004012:	d80a      	bhi.n	800402a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004014:	2200      	movs	r2, #0
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800401c:	f000 f92f 	bl	800427e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004020:	4a06      	ldr	r2, [pc, #24]	; (800403c <HAL_InitTick+0x5c>)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	e000      	b.n	800402c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
}
 800402c:	4618      	mov	r0, r3
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	20000000 	.word	0x20000000
 8004038:	2000006c 	.word	0x2000006c
 800403c:	20000068 	.word	0x20000068

08004040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004044:	4b06      	ldr	r3, [pc, #24]	; (8004060 <HAL_IncTick+0x20>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	461a      	mov	r2, r3
 800404a:	4b06      	ldr	r3, [pc, #24]	; (8004064 <HAL_IncTick+0x24>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4413      	add	r3, r2
 8004050:	4a04      	ldr	r2, [pc, #16]	; (8004064 <HAL_IncTick+0x24>)
 8004052:	6013      	str	r3, [r2, #0]
}
 8004054:	bf00      	nop
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	2000006c 	.word	0x2000006c
 8004064:	200003a8 	.word	0x200003a8

08004068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  return uwTick;
 800406c:	4b03      	ldr	r3, [pc, #12]	; (800407c <HAL_GetTick+0x14>)
 800406e:	681b      	ldr	r3, [r3, #0]
}
 8004070:	4618      	mov	r0, r3
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	200003a8 	.word	0x200003a8

08004080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004088:	f7ff ffee 	bl	8004068 <HAL_GetTick>
 800408c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004098:	d005      	beq.n	80040a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800409a:	4b0a      	ldr	r3, [pc, #40]	; (80040c4 <HAL_Delay+0x44>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4413      	add	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80040a6:	bf00      	nop
 80040a8:	f7ff ffde 	bl	8004068 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d8f7      	bhi.n	80040a8 <HAL_Delay+0x28>
  {
  }
}
 80040b8:	bf00      	nop
 80040ba:	bf00      	nop
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	2000006c 	.word	0x2000006c

080040c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040d8:	4b0c      	ldr	r3, [pc, #48]	; (800410c <__NVIC_SetPriorityGrouping+0x44>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040e4:	4013      	ands	r3, r2
 80040e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040fa:	4a04      	ldr	r2, [pc, #16]	; (800410c <__NVIC_SetPriorityGrouping+0x44>)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	60d3      	str	r3, [r2, #12]
}
 8004100:	bf00      	nop
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	e000ed00 	.word	0xe000ed00

08004110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004114:	4b04      	ldr	r3, [pc, #16]	; (8004128 <__NVIC_GetPriorityGrouping+0x18>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	0a1b      	lsrs	r3, r3, #8
 800411a:	f003 0307 	and.w	r3, r3, #7
}
 800411e:	4618      	mov	r0, r3
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	e000ed00 	.word	0xe000ed00

0800412c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800413a:	2b00      	cmp	r3, #0
 800413c:	db0b      	blt.n	8004156 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800413e:	79fb      	ldrb	r3, [r7, #7]
 8004140:	f003 021f 	and.w	r2, r3, #31
 8004144:	4907      	ldr	r1, [pc, #28]	; (8004164 <__NVIC_EnableIRQ+0x38>)
 8004146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	2001      	movs	r0, #1
 800414e:	fa00 f202 	lsl.w	r2, r0, r2
 8004152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	e000e100 	.word	0xe000e100

08004168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	6039      	str	r1, [r7, #0]
 8004172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004178:	2b00      	cmp	r3, #0
 800417a:	db0a      	blt.n	8004192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	b2da      	uxtb	r2, r3
 8004180:	490c      	ldr	r1, [pc, #48]	; (80041b4 <__NVIC_SetPriority+0x4c>)
 8004182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004186:	0112      	lsls	r2, r2, #4
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	440b      	add	r3, r1
 800418c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004190:	e00a      	b.n	80041a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	b2da      	uxtb	r2, r3
 8004196:	4908      	ldr	r1, [pc, #32]	; (80041b8 <__NVIC_SetPriority+0x50>)
 8004198:	79fb      	ldrb	r3, [r7, #7]
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	3b04      	subs	r3, #4
 80041a0:	0112      	lsls	r2, r2, #4
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	440b      	add	r3, r1
 80041a6:	761a      	strb	r2, [r3, #24]
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	e000e100 	.word	0xe000e100
 80041b8:	e000ed00 	.word	0xe000ed00

080041bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041bc:	b480      	push	{r7}
 80041be:	b089      	sub	sp, #36	; 0x24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f1c3 0307 	rsb	r3, r3, #7
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	bf28      	it	cs
 80041da:	2304      	movcs	r3, #4
 80041dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	3304      	adds	r3, #4
 80041e2:	2b06      	cmp	r3, #6
 80041e4:	d902      	bls.n	80041ec <NVIC_EncodePriority+0x30>
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	3b03      	subs	r3, #3
 80041ea:	e000      	b.n	80041ee <NVIC_EncodePriority+0x32>
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	43da      	mvns	r2, r3
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	401a      	ands	r2, r3
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004204:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	fa01 f303 	lsl.w	r3, r1, r3
 800420e:	43d9      	mvns	r1, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004214:	4313      	orrs	r3, r2
         );
}
 8004216:	4618      	mov	r0, r3
 8004218:	3724      	adds	r7, #36	; 0x24
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
	...

08004224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3b01      	subs	r3, #1
 8004230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004234:	d301      	bcc.n	800423a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004236:	2301      	movs	r3, #1
 8004238:	e00f      	b.n	800425a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800423a:	4a0a      	ldr	r2, [pc, #40]	; (8004264 <SysTick_Config+0x40>)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3b01      	subs	r3, #1
 8004240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004242:	210f      	movs	r1, #15
 8004244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004248:	f7ff ff8e 	bl	8004168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <SysTick_Config+0x40>)
 800424e:	2200      	movs	r2, #0
 8004250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004252:	4b04      	ldr	r3, [pc, #16]	; (8004264 <SysTick_Config+0x40>)
 8004254:	2207      	movs	r2, #7
 8004256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	e000e010 	.word	0xe000e010

08004268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff ff29 	bl	80040c8 <__NVIC_SetPriorityGrouping>
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800427e:	b580      	push	{r7, lr}
 8004280:	b086      	sub	sp, #24
 8004282:	af00      	add	r7, sp, #0
 8004284:	4603      	mov	r3, r0
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	607a      	str	r2, [r7, #4]
 800428a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800428c:	2300      	movs	r3, #0
 800428e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004290:	f7ff ff3e 	bl	8004110 <__NVIC_GetPriorityGrouping>
 8004294:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	68b9      	ldr	r1, [r7, #8]
 800429a:	6978      	ldr	r0, [r7, #20]
 800429c:	f7ff ff8e 	bl	80041bc <NVIC_EncodePriority>
 80042a0:	4602      	mov	r2, r0
 80042a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042a6:	4611      	mov	r1, r2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff ff5d 	bl	8004168 <__NVIC_SetPriority>
}
 80042ae:	bf00      	nop
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b082      	sub	sp, #8
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	4603      	mov	r3, r0
 80042be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff ff31 	bl	800412c <__NVIC_EnableIRQ>
}
 80042ca:	bf00      	nop
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b082      	sub	sp, #8
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7ff ffa2 	bl	8004224 <SysTick_Config>
 80042e0:	4603      	mov	r3, r0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b089      	sub	sp, #36	; 0x24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042fe:	2300      	movs	r3, #0
 8004300:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004302:	2300      	movs	r3, #0
 8004304:	61fb      	str	r3, [r7, #28]
 8004306:	e16b      	b.n	80045e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004308:	2201      	movs	r2, #1
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	4013      	ands	r3, r2
 800431a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	429a      	cmp	r2, r3
 8004322:	f040 815a 	bne.w	80045da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	2b01      	cmp	r3, #1
 8004330:	d005      	beq.n	800433e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800433a:	2b02      	cmp	r3, #2
 800433c:	d130      	bne.n	80043a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	2203      	movs	r2, #3
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	43db      	mvns	r3, r3
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	4013      	ands	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	4313      	orrs	r3, r2
 8004366:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004374:	2201      	movs	r2, #1
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	43db      	mvns	r3, r3
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	4013      	ands	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	091b      	lsrs	r3, r3, #4
 800438a:	f003 0201 	and.w	r2, r3, #1
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	4313      	orrs	r3, r2
 8004398:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f003 0303 	and.w	r3, r3, #3
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	d017      	beq.n	80043dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	2203      	movs	r2, #3
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	43db      	mvns	r3, r3
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4013      	ands	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	fa02 f303 	lsl.w	r3, r2, r3
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f003 0303 	and.w	r3, r3, #3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d123      	bne.n	8004430 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	08da      	lsrs	r2, r3, #3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3208      	adds	r2, #8
 80043f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	220f      	movs	r2, #15
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	43db      	mvns	r3, r3
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	4013      	ands	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	4313      	orrs	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	08da      	lsrs	r2, r3, #3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	3208      	adds	r2, #8
 800442a:	69b9      	ldr	r1, [r7, #24]
 800442c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	2203      	movs	r2, #3
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	43db      	mvns	r3, r3
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	4013      	ands	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f003 0203 	and.w	r2, r3, #3
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	4313      	orrs	r3, r2
 800445c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 80b4 	beq.w	80045da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	4b60      	ldr	r3, [pc, #384]	; (80045f8 <HAL_GPIO_Init+0x30c>)
 8004478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447a:	4a5f      	ldr	r2, [pc, #380]	; (80045f8 <HAL_GPIO_Init+0x30c>)
 800447c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004480:	6453      	str	r3, [r2, #68]	; 0x44
 8004482:	4b5d      	ldr	r3, [pc, #372]	; (80045f8 <HAL_GPIO_Init+0x30c>)
 8004484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800448e:	4a5b      	ldr	r2, [pc, #364]	; (80045fc <HAL_GPIO_Init+0x310>)
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	089b      	lsrs	r3, r3, #2
 8004494:	3302      	adds	r3, #2
 8004496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800449a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	220f      	movs	r2, #15
 80044a6:	fa02 f303 	lsl.w	r3, r2, r3
 80044aa:	43db      	mvns	r3, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4013      	ands	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a52      	ldr	r2, [pc, #328]	; (8004600 <HAL_GPIO_Init+0x314>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d02b      	beq.n	8004512 <HAL_GPIO_Init+0x226>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a51      	ldr	r2, [pc, #324]	; (8004604 <HAL_GPIO_Init+0x318>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d025      	beq.n	800450e <HAL_GPIO_Init+0x222>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a50      	ldr	r2, [pc, #320]	; (8004608 <HAL_GPIO_Init+0x31c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d01f      	beq.n	800450a <HAL_GPIO_Init+0x21e>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a4f      	ldr	r2, [pc, #316]	; (800460c <HAL_GPIO_Init+0x320>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d019      	beq.n	8004506 <HAL_GPIO_Init+0x21a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a4e      	ldr	r2, [pc, #312]	; (8004610 <HAL_GPIO_Init+0x324>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d013      	beq.n	8004502 <HAL_GPIO_Init+0x216>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a4d      	ldr	r2, [pc, #308]	; (8004614 <HAL_GPIO_Init+0x328>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d00d      	beq.n	80044fe <HAL_GPIO_Init+0x212>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a4c      	ldr	r2, [pc, #304]	; (8004618 <HAL_GPIO_Init+0x32c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d007      	beq.n	80044fa <HAL_GPIO_Init+0x20e>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a4b      	ldr	r2, [pc, #300]	; (800461c <HAL_GPIO_Init+0x330>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d101      	bne.n	80044f6 <HAL_GPIO_Init+0x20a>
 80044f2:	2307      	movs	r3, #7
 80044f4:	e00e      	b.n	8004514 <HAL_GPIO_Init+0x228>
 80044f6:	2308      	movs	r3, #8
 80044f8:	e00c      	b.n	8004514 <HAL_GPIO_Init+0x228>
 80044fa:	2306      	movs	r3, #6
 80044fc:	e00a      	b.n	8004514 <HAL_GPIO_Init+0x228>
 80044fe:	2305      	movs	r3, #5
 8004500:	e008      	b.n	8004514 <HAL_GPIO_Init+0x228>
 8004502:	2304      	movs	r3, #4
 8004504:	e006      	b.n	8004514 <HAL_GPIO_Init+0x228>
 8004506:	2303      	movs	r3, #3
 8004508:	e004      	b.n	8004514 <HAL_GPIO_Init+0x228>
 800450a:	2302      	movs	r3, #2
 800450c:	e002      	b.n	8004514 <HAL_GPIO_Init+0x228>
 800450e:	2301      	movs	r3, #1
 8004510:	e000      	b.n	8004514 <HAL_GPIO_Init+0x228>
 8004512:	2300      	movs	r3, #0
 8004514:	69fa      	ldr	r2, [r7, #28]
 8004516:	f002 0203 	and.w	r2, r2, #3
 800451a:	0092      	lsls	r2, r2, #2
 800451c:	4093      	lsls	r3, r2
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	4313      	orrs	r3, r2
 8004522:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004524:	4935      	ldr	r1, [pc, #212]	; (80045fc <HAL_GPIO_Init+0x310>)
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	089b      	lsrs	r3, r3, #2
 800452a:	3302      	adds	r3, #2
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004532:	4b3b      	ldr	r3, [pc, #236]	; (8004620 <HAL_GPIO_Init+0x334>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	43db      	mvns	r3, r3
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	4013      	ands	r3, r2
 8004540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	4313      	orrs	r3, r2
 8004554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004556:	4a32      	ldr	r2, [pc, #200]	; (8004620 <HAL_GPIO_Init+0x334>)
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800455c:	4b30      	ldr	r3, [pc, #192]	; (8004620 <HAL_GPIO_Init+0x334>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	43db      	mvns	r3, r3
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	4013      	ands	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	4313      	orrs	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004580:	4a27      	ldr	r2, [pc, #156]	; (8004620 <HAL_GPIO_Init+0x334>)
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004586:	4b26      	ldr	r3, [pc, #152]	; (8004620 <HAL_GPIO_Init+0x334>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	43db      	mvns	r3, r3
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	4013      	ands	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045aa:	4a1d      	ldr	r2, [pc, #116]	; (8004620 <HAL_GPIO_Init+0x334>)
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045b0:	4b1b      	ldr	r3, [pc, #108]	; (8004620 <HAL_GPIO_Init+0x334>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	43db      	mvns	r3, r3
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	4013      	ands	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045d4:	4a12      	ldr	r2, [pc, #72]	; (8004620 <HAL_GPIO_Init+0x334>)
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	3301      	adds	r3, #1
 80045de:	61fb      	str	r3, [r7, #28]
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	2b0f      	cmp	r3, #15
 80045e4:	f67f ae90 	bls.w	8004308 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045e8:	bf00      	nop
 80045ea:	bf00      	nop
 80045ec:	3724      	adds	r7, #36	; 0x24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	40023800 	.word	0x40023800
 80045fc:	40013800 	.word	0x40013800
 8004600:	40020000 	.word	0x40020000
 8004604:	40020400 	.word	0x40020400
 8004608:	40020800 	.word	0x40020800
 800460c:	40020c00 	.word	0x40020c00
 8004610:	40021000 	.word	0x40021000
 8004614:	40021400 	.word	0x40021400
 8004618:	40021800 	.word	0x40021800
 800461c:	40021c00 	.word	0x40021c00
 8004620:	40013c00 	.word	0x40013c00

08004624 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800462e:	2300      	movs	r3, #0
 8004630:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004636:	2300      	movs	r3, #0
 8004638:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800463a:	2300      	movs	r3, #0
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	e0cd      	b.n	80047dc <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004640:	2201      	movs	r2, #1
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	fa02 f303 	lsl.w	r3, r2, r3
 8004648:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	4013      	ands	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	429a      	cmp	r2, r3
 8004658:	f040 80bd 	bne.w	80047d6 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800465c:	4a65      	ldr	r2, [pc, #404]	; (80047f4 <HAL_GPIO_DeInit+0x1d0>)
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	089b      	lsrs	r3, r3, #2
 8004662:	3302      	adds	r3, #2
 8004664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004668:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f003 0303 	and.w	r3, r3, #3
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	220f      	movs	r2, #15
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	4013      	ands	r3, r2
 800467c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a5d      	ldr	r2, [pc, #372]	; (80047f8 <HAL_GPIO_DeInit+0x1d4>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d02b      	beq.n	80046de <HAL_GPIO_DeInit+0xba>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a5c      	ldr	r2, [pc, #368]	; (80047fc <HAL_GPIO_DeInit+0x1d8>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d025      	beq.n	80046da <HAL_GPIO_DeInit+0xb6>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a5b      	ldr	r2, [pc, #364]	; (8004800 <HAL_GPIO_DeInit+0x1dc>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d01f      	beq.n	80046d6 <HAL_GPIO_DeInit+0xb2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a5a      	ldr	r2, [pc, #360]	; (8004804 <HAL_GPIO_DeInit+0x1e0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d019      	beq.n	80046d2 <HAL_GPIO_DeInit+0xae>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a59      	ldr	r2, [pc, #356]	; (8004808 <HAL_GPIO_DeInit+0x1e4>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d013      	beq.n	80046ce <HAL_GPIO_DeInit+0xaa>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a58      	ldr	r2, [pc, #352]	; (800480c <HAL_GPIO_DeInit+0x1e8>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d00d      	beq.n	80046ca <HAL_GPIO_DeInit+0xa6>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a57      	ldr	r2, [pc, #348]	; (8004810 <HAL_GPIO_DeInit+0x1ec>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d007      	beq.n	80046c6 <HAL_GPIO_DeInit+0xa2>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a56      	ldr	r2, [pc, #344]	; (8004814 <HAL_GPIO_DeInit+0x1f0>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d101      	bne.n	80046c2 <HAL_GPIO_DeInit+0x9e>
 80046be:	2307      	movs	r3, #7
 80046c0:	e00e      	b.n	80046e0 <HAL_GPIO_DeInit+0xbc>
 80046c2:	2308      	movs	r3, #8
 80046c4:	e00c      	b.n	80046e0 <HAL_GPIO_DeInit+0xbc>
 80046c6:	2306      	movs	r3, #6
 80046c8:	e00a      	b.n	80046e0 <HAL_GPIO_DeInit+0xbc>
 80046ca:	2305      	movs	r3, #5
 80046cc:	e008      	b.n	80046e0 <HAL_GPIO_DeInit+0xbc>
 80046ce:	2304      	movs	r3, #4
 80046d0:	e006      	b.n	80046e0 <HAL_GPIO_DeInit+0xbc>
 80046d2:	2303      	movs	r3, #3
 80046d4:	e004      	b.n	80046e0 <HAL_GPIO_DeInit+0xbc>
 80046d6:	2302      	movs	r3, #2
 80046d8:	e002      	b.n	80046e0 <HAL_GPIO_DeInit+0xbc>
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <HAL_GPIO_DeInit+0xbc>
 80046de:	2300      	movs	r3, #0
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	f002 0203 	and.w	r2, r2, #3
 80046e6:	0092      	lsls	r2, r2, #2
 80046e8:	4093      	lsls	r3, r2
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d132      	bne.n	8004756 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80046f0:	4b49      	ldr	r3, [pc, #292]	; (8004818 <HAL_GPIO_DeInit+0x1f4>)
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	43db      	mvns	r3, r3
 80046f8:	4947      	ldr	r1, [pc, #284]	; (8004818 <HAL_GPIO_DeInit+0x1f4>)
 80046fa:	4013      	ands	r3, r2
 80046fc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80046fe:	4b46      	ldr	r3, [pc, #280]	; (8004818 <HAL_GPIO_DeInit+0x1f4>)
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	43db      	mvns	r3, r3
 8004706:	4944      	ldr	r1, [pc, #272]	; (8004818 <HAL_GPIO_DeInit+0x1f4>)
 8004708:	4013      	ands	r3, r2
 800470a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800470c:	4b42      	ldr	r3, [pc, #264]	; (8004818 <HAL_GPIO_DeInit+0x1f4>)
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	43db      	mvns	r3, r3
 8004714:	4940      	ldr	r1, [pc, #256]	; (8004818 <HAL_GPIO_DeInit+0x1f4>)
 8004716:	4013      	ands	r3, r2
 8004718:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800471a:	4b3f      	ldr	r3, [pc, #252]	; (8004818 <HAL_GPIO_DeInit+0x1f4>)
 800471c:	689a      	ldr	r2, [r3, #8]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	43db      	mvns	r3, r3
 8004722:	493d      	ldr	r1, [pc, #244]	; (8004818 <HAL_GPIO_DeInit+0x1f4>)
 8004724:	4013      	ands	r3, r2
 8004726:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	220f      	movs	r2, #15
 8004732:	fa02 f303 	lsl.w	r3, r2, r3
 8004736:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004738:	4a2e      	ldr	r2, [pc, #184]	; (80047f4 <HAL_GPIO_DeInit+0x1d0>)
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	089b      	lsrs	r3, r3, #2
 800473e:	3302      	adds	r3, #2
 8004740:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	43da      	mvns	r2, r3
 8004748:	482a      	ldr	r0, [pc, #168]	; (80047f4 <HAL_GPIO_DeInit+0x1d0>)
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	089b      	lsrs	r3, r3, #2
 800474e:	400a      	ands	r2, r1
 8004750:	3302      	adds	r3, #2
 8004752:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	2103      	movs	r1, #3
 8004760:	fa01 f303 	lsl.w	r3, r1, r3
 8004764:	43db      	mvns	r3, r3
 8004766:	401a      	ands	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	08da      	lsrs	r2, r3, #3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3208      	adds	r2, #8
 8004774:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	f003 0307 	and.w	r3, r3, #7
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	220f      	movs	r2, #15
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	43db      	mvns	r3, r3
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	08d2      	lsrs	r2, r2, #3
 800478c:	4019      	ands	r1, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3208      	adds	r2, #8
 8004792:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	2103      	movs	r1, #3
 80047a0:	fa01 f303 	lsl.w	r3, r1, r3
 80047a4:	43db      	mvns	r3, r3
 80047a6:	401a      	ands	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	2101      	movs	r1, #1
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	fa01 f303 	lsl.w	r3, r1, r3
 80047b8:	43db      	mvns	r3, r3
 80047ba:	401a      	ands	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689a      	ldr	r2, [r3, #8]
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	2103      	movs	r1, #3
 80047ca:	fa01 f303 	lsl.w	r3, r1, r3
 80047ce:	43db      	mvns	r3, r3
 80047d0:	401a      	ands	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	3301      	adds	r3, #1
 80047da:	617b      	str	r3, [r7, #20]
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	2b0f      	cmp	r3, #15
 80047e0:	f67f af2e 	bls.w	8004640 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80047e4:	bf00      	nop
 80047e6:	bf00      	nop
 80047e8:	371c      	adds	r7, #28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	40013800 	.word	0x40013800
 80047f8:	40020000 	.word	0x40020000
 80047fc:	40020400 	.word	0x40020400
 8004800:	40020800 	.word	0x40020800
 8004804:	40020c00 	.word	0x40020c00
 8004808:	40021000 	.word	0x40021000
 800480c:	40021400 	.word	0x40021400
 8004810:	40021800 	.word	0x40021800
 8004814:	40021c00 	.word	0x40021c00
 8004818:	40013c00 	.word	0x40013c00

0800481c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	460b      	mov	r3, r1
 8004826:	807b      	strh	r3, [r7, #2]
 8004828:	4613      	mov	r3, r2
 800482a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800482c:	787b      	ldrb	r3, [r7, #1]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004832:	887a      	ldrh	r2, [r7, #2]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004838:	e003      	b.n	8004842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800483a:	887b      	ldrh	r3, [r7, #2]
 800483c:	041a      	lsls	r2, r3, #16
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	619a      	str	r2, [r3, #24]
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800484e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004850:	b08f      	sub	sp, #60	; 0x3c
 8004852:	af0a      	add	r7, sp, #40	; 0x28
 8004854:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e054      	b.n	800490a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d106      	bne.n	8004880 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f006 fc2a 	bl	800b0d4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2203      	movs	r2, #3
 8004884:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004890:	2b00      	cmp	r3, #0
 8004892:	d102      	bne.n	800489a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4618      	mov	r0, r3
 80048a0:	f003 fc58 	bl	8008154 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	603b      	str	r3, [r7, #0]
 80048aa:	687e      	ldr	r6, [r7, #4]
 80048ac:	466d      	mov	r5, sp
 80048ae:	f106 0410 	add.w	r4, r6, #16
 80048b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80048be:	e885 0003 	stmia.w	r5, {r0, r1}
 80048c2:	1d33      	adds	r3, r6, #4
 80048c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048c6:	6838      	ldr	r0, [r7, #0]
 80048c8:	f003 fbd2 	bl	8008070 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2101      	movs	r1, #1
 80048d2:	4618      	mov	r0, r3
 80048d4:	f003 fc4f 	bl	8008176 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	603b      	str	r3, [r7, #0]
 80048de:	687e      	ldr	r6, [r7, #4]
 80048e0:	466d      	mov	r5, sp
 80048e2:	f106 0410 	add.w	r4, r6, #16
 80048e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80048f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80048f6:	1d33      	adds	r3, r6, #4
 80048f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048fa:	6838      	ldr	r0, [r7, #0]
 80048fc:	f003 fdd8 	bl	80084b0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004912 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004912:	b590      	push	{r4, r7, lr}
 8004914:	b089      	sub	sp, #36	; 0x24
 8004916:	af04      	add	r7, sp, #16
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	4608      	mov	r0, r1
 800491c:	4611      	mov	r1, r2
 800491e:	461a      	mov	r2, r3
 8004920:	4603      	mov	r3, r0
 8004922:	70fb      	strb	r3, [r7, #3]
 8004924:	460b      	mov	r3, r1
 8004926:	70bb      	strb	r3, [r7, #2]
 8004928:	4613      	mov	r3, r2
 800492a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004932:	2b01      	cmp	r3, #1
 8004934:	d101      	bne.n	800493a <HAL_HCD_HC_Init+0x28>
 8004936:	2302      	movs	r3, #2
 8004938:	e076      	b.n	8004a28 <HAL_HCD_HC_Init+0x116>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004942:	78fb      	ldrb	r3, [r7, #3]
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	212c      	movs	r1, #44	; 0x2c
 8004948:	fb01 f303 	mul.w	r3, r1, r3
 800494c:	4413      	add	r3, r2
 800494e:	333d      	adds	r3, #61	; 0x3d
 8004950:	2200      	movs	r2, #0
 8004952:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004954:	78fb      	ldrb	r3, [r7, #3]
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	212c      	movs	r1, #44	; 0x2c
 800495a:	fb01 f303 	mul.w	r3, r1, r3
 800495e:	4413      	add	r3, r2
 8004960:	3338      	adds	r3, #56	; 0x38
 8004962:	787a      	ldrb	r2, [r7, #1]
 8004964:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004966:	78fb      	ldrb	r3, [r7, #3]
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	212c      	movs	r1, #44	; 0x2c
 800496c:	fb01 f303 	mul.w	r3, r1, r3
 8004970:	4413      	add	r3, r2
 8004972:	3340      	adds	r3, #64	; 0x40
 8004974:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004976:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004978:	78fb      	ldrb	r3, [r7, #3]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	212c      	movs	r1, #44	; 0x2c
 800497e:	fb01 f303 	mul.w	r3, r1, r3
 8004982:	4413      	add	r3, r2
 8004984:	3339      	adds	r3, #57	; 0x39
 8004986:	78fa      	ldrb	r2, [r7, #3]
 8004988:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800498a:	78fb      	ldrb	r3, [r7, #3]
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	212c      	movs	r1, #44	; 0x2c
 8004990:	fb01 f303 	mul.w	r3, r1, r3
 8004994:	4413      	add	r3, r2
 8004996:	333f      	adds	r3, #63	; 0x3f
 8004998:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800499c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800499e:	78fb      	ldrb	r3, [r7, #3]
 80049a0:	78ba      	ldrb	r2, [r7, #2]
 80049a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049a6:	b2d0      	uxtb	r0, r2
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	212c      	movs	r1, #44	; 0x2c
 80049ac:	fb01 f303 	mul.w	r3, r1, r3
 80049b0:	4413      	add	r3, r2
 80049b2:	333a      	adds	r3, #58	; 0x3a
 80049b4:	4602      	mov	r2, r0
 80049b6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80049b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	da09      	bge.n	80049d4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80049c0:	78fb      	ldrb	r3, [r7, #3]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	212c      	movs	r1, #44	; 0x2c
 80049c6:	fb01 f303 	mul.w	r3, r1, r3
 80049ca:	4413      	add	r3, r2
 80049cc:	333b      	adds	r3, #59	; 0x3b
 80049ce:	2201      	movs	r2, #1
 80049d0:	701a      	strb	r2, [r3, #0]
 80049d2:	e008      	b.n	80049e6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80049d4:	78fb      	ldrb	r3, [r7, #3]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	212c      	movs	r1, #44	; 0x2c
 80049da:	fb01 f303 	mul.w	r3, r1, r3
 80049de:	4413      	add	r3, r2
 80049e0:	333b      	adds	r3, #59	; 0x3b
 80049e2:	2200      	movs	r2, #0
 80049e4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80049e6:	78fb      	ldrb	r3, [r7, #3]
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	212c      	movs	r1, #44	; 0x2c
 80049ec:	fb01 f303 	mul.w	r3, r1, r3
 80049f0:	4413      	add	r3, r2
 80049f2:	333c      	adds	r3, #60	; 0x3c
 80049f4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80049f8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6818      	ldr	r0, [r3, #0]
 80049fe:	787c      	ldrb	r4, [r7, #1]
 8004a00:	78ba      	ldrb	r2, [r7, #2]
 8004a02:	78f9      	ldrb	r1, [r7, #3]
 8004a04:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a06:	9302      	str	r3, [sp, #8]
 8004a08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a0c:	9301      	str	r3, [sp, #4]
 8004a0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	4623      	mov	r3, r4
 8004a16:	f003 fed1 	bl	80087bc <USB_HC_Init>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd90      	pop	{r4, r7, pc}

08004a30 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	460b      	mov	r3, r1
 8004a3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d101      	bne.n	8004a4e <HAL_HCD_HC_Halt+0x1e>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	e00f      	b.n	8004a6e <HAL_HCD_HC_Halt+0x3e>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	78fa      	ldrb	r2, [r7, #3]
 8004a5c:	4611      	mov	r1, r2
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f004 f921 	bl	8008ca6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	4608      	mov	r0, r1
 8004a82:	4611      	mov	r1, r2
 8004a84:	461a      	mov	r2, r3
 8004a86:	4603      	mov	r3, r0
 8004a88:	70fb      	strb	r3, [r7, #3]
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	70bb      	strb	r3, [r7, #2]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004a92:	78fb      	ldrb	r3, [r7, #3]
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	212c      	movs	r1, #44	; 0x2c
 8004a98:	fb01 f303 	mul.w	r3, r1, r3
 8004a9c:	4413      	add	r3, r2
 8004a9e:	333b      	adds	r3, #59	; 0x3b
 8004aa0:	78ba      	ldrb	r2, [r7, #2]
 8004aa2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004aa4:	78fb      	ldrb	r3, [r7, #3]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	212c      	movs	r1, #44	; 0x2c
 8004aaa:	fb01 f303 	mul.w	r3, r1, r3
 8004aae:	4413      	add	r3, r2
 8004ab0:	333f      	adds	r3, #63	; 0x3f
 8004ab2:	787a      	ldrb	r2, [r7, #1]
 8004ab4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004ab6:	7c3b      	ldrb	r3, [r7, #16]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d112      	bne.n	8004ae2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004abc:	78fb      	ldrb	r3, [r7, #3]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	212c      	movs	r1, #44	; 0x2c
 8004ac2:	fb01 f303 	mul.w	r3, r1, r3
 8004ac6:	4413      	add	r3, r2
 8004ac8:	3342      	adds	r3, #66	; 0x42
 8004aca:	2203      	movs	r2, #3
 8004acc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004ace:	78fb      	ldrb	r3, [r7, #3]
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	212c      	movs	r1, #44	; 0x2c
 8004ad4:	fb01 f303 	mul.w	r3, r1, r3
 8004ad8:	4413      	add	r3, r2
 8004ada:	333d      	adds	r3, #61	; 0x3d
 8004adc:	7f3a      	ldrb	r2, [r7, #28]
 8004ade:	701a      	strb	r2, [r3, #0]
 8004ae0:	e008      	b.n	8004af4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ae2:	78fb      	ldrb	r3, [r7, #3]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	212c      	movs	r1, #44	; 0x2c
 8004ae8:	fb01 f303 	mul.w	r3, r1, r3
 8004aec:	4413      	add	r3, r2
 8004aee:	3342      	adds	r3, #66	; 0x42
 8004af0:	2202      	movs	r2, #2
 8004af2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004af4:	787b      	ldrb	r3, [r7, #1]
 8004af6:	2b03      	cmp	r3, #3
 8004af8:	f200 80c6 	bhi.w	8004c88 <HAL_HCD_HC_SubmitRequest+0x210>
 8004afc:	a201      	add	r2, pc, #4	; (adr r2, 8004b04 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b02:	bf00      	nop
 8004b04:	08004b15 	.word	0x08004b15
 8004b08:	08004c75 	.word	0x08004c75
 8004b0c:	08004b79 	.word	0x08004b79
 8004b10:	08004bf7 	.word	0x08004bf7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004b14:	7c3b      	ldrb	r3, [r7, #16]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	f040 80b8 	bne.w	8004c8c <HAL_HCD_HC_SubmitRequest+0x214>
 8004b1c:	78bb      	ldrb	r3, [r7, #2]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f040 80b4 	bne.w	8004c8c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004b24:	8b3b      	ldrh	r3, [r7, #24]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d108      	bne.n	8004b3c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004b2a:	78fb      	ldrb	r3, [r7, #3]
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	212c      	movs	r1, #44	; 0x2c
 8004b30:	fb01 f303 	mul.w	r3, r1, r3
 8004b34:	4413      	add	r3, r2
 8004b36:	3355      	adds	r3, #85	; 0x55
 8004b38:	2201      	movs	r2, #1
 8004b3a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004b3c:	78fb      	ldrb	r3, [r7, #3]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	212c      	movs	r1, #44	; 0x2c
 8004b42:	fb01 f303 	mul.w	r3, r1, r3
 8004b46:	4413      	add	r3, r2
 8004b48:	3355      	adds	r3, #85	; 0x55
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d109      	bne.n	8004b64 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b50:	78fb      	ldrb	r3, [r7, #3]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	212c      	movs	r1, #44	; 0x2c
 8004b56:	fb01 f303 	mul.w	r3, r1, r3
 8004b5a:	4413      	add	r3, r2
 8004b5c:	3342      	adds	r3, #66	; 0x42
 8004b5e:	2200      	movs	r2, #0
 8004b60:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004b62:	e093      	b.n	8004c8c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b64:	78fb      	ldrb	r3, [r7, #3]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	212c      	movs	r1, #44	; 0x2c
 8004b6a:	fb01 f303 	mul.w	r3, r1, r3
 8004b6e:	4413      	add	r3, r2
 8004b70:	3342      	adds	r3, #66	; 0x42
 8004b72:	2202      	movs	r2, #2
 8004b74:	701a      	strb	r2, [r3, #0]
      break;
 8004b76:	e089      	b.n	8004c8c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004b78:	78bb      	ldrb	r3, [r7, #2]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d11d      	bne.n	8004bba <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004b7e:	78fb      	ldrb	r3, [r7, #3]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	212c      	movs	r1, #44	; 0x2c
 8004b84:	fb01 f303 	mul.w	r3, r1, r3
 8004b88:	4413      	add	r3, r2
 8004b8a:	3355      	adds	r3, #85	; 0x55
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d109      	bne.n	8004ba6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b92:	78fb      	ldrb	r3, [r7, #3]
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	212c      	movs	r1, #44	; 0x2c
 8004b98:	fb01 f303 	mul.w	r3, r1, r3
 8004b9c:	4413      	add	r3, r2
 8004b9e:	3342      	adds	r3, #66	; 0x42
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004ba4:	e073      	b.n	8004c8e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ba6:	78fb      	ldrb	r3, [r7, #3]
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	212c      	movs	r1, #44	; 0x2c
 8004bac:	fb01 f303 	mul.w	r3, r1, r3
 8004bb0:	4413      	add	r3, r2
 8004bb2:	3342      	adds	r3, #66	; 0x42
 8004bb4:	2202      	movs	r2, #2
 8004bb6:	701a      	strb	r2, [r3, #0]
      break;
 8004bb8:	e069      	b.n	8004c8e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004bba:	78fb      	ldrb	r3, [r7, #3]
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	212c      	movs	r1, #44	; 0x2c
 8004bc0:	fb01 f303 	mul.w	r3, r1, r3
 8004bc4:	4413      	add	r3, r2
 8004bc6:	3354      	adds	r3, #84	; 0x54
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d109      	bne.n	8004be2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004bce:	78fb      	ldrb	r3, [r7, #3]
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	212c      	movs	r1, #44	; 0x2c
 8004bd4:	fb01 f303 	mul.w	r3, r1, r3
 8004bd8:	4413      	add	r3, r2
 8004bda:	3342      	adds	r3, #66	; 0x42
 8004bdc:	2200      	movs	r2, #0
 8004bde:	701a      	strb	r2, [r3, #0]
      break;
 8004be0:	e055      	b.n	8004c8e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004be2:	78fb      	ldrb	r3, [r7, #3]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	212c      	movs	r1, #44	; 0x2c
 8004be8:	fb01 f303 	mul.w	r3, r1, r3
 8004bec:	4413      	add	r3, r2
 8004bee:	3342      	adds	r3, #66	; 0x42
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	701a      	strb	r2, [r3, #0]
      break;
 8004bf4:	e04b      	b.n	8004c8e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004bf6:	78bb      	ldrb	r3, [r7, #2]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d11d      	bne.n	8004c38 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004bfc:	78fb      	ldrb	r3, [r7, #3]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	212c      	movs	r1, #44	; 0x2c
 8004c02:	fb01 f303 	mul.w	r3, r1, r3
 8004c06:	4413      	add	r3, r2
 8004c08:	3355      	adds	r3, #85	; 0x55
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d109      	bne.n	8004c24 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c10:	78fb      	ldrb	r3, [r7, #3]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	212c      	movs	r1, #44	; 0x2c
 8004c16:	fb01 f303 	mul.w	r3, r1, r3
 8004c1a:	4413      	add	r3, r2
 8004c1c:	3342      	adds	r3, #66	; 0x42
 8004c1e:	2200      	movs	r2, #0
 8004c20:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004c22:	e034      	b.n	8004c8e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c24:	78fb      	ldrb	r3, [r7, #3]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	212c      	movs	r1, #44	; 0x2c
 8004c2a:	fb01 f303 	mul.w	r3, r1, r3
 8004c2e:	4413      	add	r3, r2
 8004c30:	3342      	adds	r3, #66	; 0x42
 8004c32:	2202      	movs	r2, #2
 8004c34:	701a      	strb	r2, [r3, #0]
      break;
 8004c36:	e02a      	b.n	8004c8e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004c38:	78fb      	ldrb	r3, [r7, #3]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	212c      	movs	r1, #44	; 0x2c
 8004c3e:	fb01 f303 	mul.w	r3, r1, r3
 8004c42:	4413      	add	r3, r2
 8004c44:	3354      	adds	r3, #84	; 0x54
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d109      	bne.n	8004c60 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c4c:	78fb      	ldrb	r3, [r7, #3]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	212c      	movs	r1, #44	; 0x2c
 8004c52:	fb01 f303 	mul.w	r3, r1, r3
 8004c56:	4413      	add	r3, r2
 8004c58:	3342      	adds	r3, #66	; 0x42
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	701a      	strb	r2, [r3, #0]
      break;
 8004c5e:	e016      	b.n	8004c8e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c60:	78fb      	ldrb	r3, [r7, #3]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	212c      	movs	r1, #44	; 0x2c
 8004c66:	fb01 f303 	mul.w	r3, r1, r3
 8004c6a:	4413      	add	r3, r2
 8004c6c:	3342      	adds	r3, #66	; 0x42
 8004c6e:	2202      	movs	r2, #2
 8004c70:	701a      	strb	r2, [r3, #0]
      break;
 8004c72:	e00c      	b.n	8004c8e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c74:	78fb      	ldrb	r3, [r7, #3]
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	212c      	movs	r1, #44	; 0x2c
 8004c7a:	fb01 f303 	mul.w	r3, r1, r3
 8004c7e:	4413      	add	r3, r2
 8004c80:	3342      	adds	r3, #66	; 0x42
 8004c82:	2200      	movs	r2, #0
 8004c84:	701a      	strb	r2, [r3, #0]
      break;
 8004c86:	e002      	b.n	8004c8e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004c88:	bf00      	nop
 8004c8a:	e000      	b.n	8004c8e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004c8c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004c8e:	78fb      	ldrb	r3, [r7, #3]
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	212c      	movs	r1, #44	; 0x2c
 8004c94:	fb01 f303 	mul.w	r3, r1, r3
 8004c98:	4413      	add	r3, r2
 8004c9a:	3344      	adds	r3, #68	; 0x44
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004ca0:	78fb      	ldrb	r3, [r7, #3]
 8004ca2:	8b3a      	ldrh	r2, [r7, #24]
 8004ca4:	6879      	ldr	r1, [r7, #4]
 8004ca6:	202c      	movs	r0, #44	; 0x2c
 8004ca8:	fb00 f303 	mul.w	r3, r0, r3
 8004cac:	440b      	add	r3, r1
 8004cae:	334c      	adds	r3, #76	; 0x4c
 8004cb0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004cb2:	78fb      	ldrb	r3, [r7, #3]
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	212c      	movs	r1, #44	; 0x2c
 8004cb8:	fb01 f303 	mul.w	r3, r1, r3
 8004cbc:	4413      	add	r3, r2
 8004cbe:	3360      	adds	r3, #96	; 0x60
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004cc4:	78fb      	ldrb	r3, [r7, #3]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	212c      	movs	r1, #44	; 0x2c
 8004cca:	fb01 f303 	mul.w	r3, r1, r3
 8004cce:	4413      	add	r3, r2
 8004cd0:	3350      	adds	r3, #80	; 0x50
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004cd6:	78fb      	ldrb	r3, [r7, #3]
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	212c      	movs	r1, #44	; 0x2c
 8004cdc:	fb01 f303 	mul.w	r3, r1, r3
 8004ce0:	4413      	add	r3, r2
 8004ce2:	3339      	adds	r3, #57	; 0x39
 8004ce4:	78fa      	ldrb	r2, [r7, #3]
 8004ce6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004ce8:	78fb      	ldrb	r3, [r7, #3]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	212c      	movs	r1, #44	; 0x2c
 8004cee:	fb01 f303 	mul.w	r3, r1, r3
 8004cf2:	4413      	add	r3, r2
 8004cf4:	3361      	adds	r3, #97	; 0x61
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6818      	ldr	r0, [r3, #0]
 8004cfe:	78fb      	ldrb	r3, [r7, #3]
 8004d00:	222c      	movs	r2, #44	; 0x2c
 8004d02:	fb02 f303 	mul.w	r3, r2, r3
 8004d06:	3338      	adds	r3, #56	; 0x38
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	18d1      	adds	r1, r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	461a      	mov	r2, r3
 8004d14:	f003 fe74 	bl	8008a00 <USB_HC_StartXfer>
 8004d18:	4603      	mov	r3, r0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop

08004d24 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f003 fb75 	bl	800842a <USB_GetMode>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	f040 80f6 	bne.w	8004f34 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f003 fb59 	bl	8008404 <USB_ReadInterrupts>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 80ec 	beq.w	8004f32 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f003 fb50 	bl	8008404 <USB_ReadInterrupts>
 8004d64:	4603      	mov	r3, r0
 8004d66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d6e:	d104      	bne.n	8004d7a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004d78:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f003 fb40 	bl	8008404 <USB_ReadInterrupts>
 8004d84:	4603      	mov	r3, r0
 8004d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d8e:	d104      	bne.n	8004d9a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d98:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f003 fb30 	bl	8008404 <USB_ReadInterrupts>
 8004da4:	4603      	mov	r3, r0
 8004da6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004daa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dae:	d104      	bne.n	8004dba <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004db8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f003 fb20 	bl	8008404 <USB_ReadInterrupts>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d103      	bne.n	8004dd6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f003 fb12 	bl	8008404 <USB_ReadInterrupts>
 8004de0:	4603      	mov	r3, r0
 8004de2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004de6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dea:	d11c      	bne.n	8004e26 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004df4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10f      	bne.n	8004e26 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004e06:	2110      	movs	r1, #16
 8004e08:	6938      	ldr	r0, [r7, #16]
 8004e0a:	f003 fa01 	bl	8008210 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004e0e:	6938      	ldr	r0, [r7, #16]
 8004e10:	f003 fa32 	bl	8008278 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2101      	movs	r1, #1
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f003 fc08 	bl	8008630 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f006 f9d5 	bl	800b1d0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f003 faea 	bl	8008404 <USB_ReadInterrupts>
 8004e30:	4603      	mov	r3, r0
 8004e32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e3a:	d102      	bne.n	8004e42 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f001 f89e 	bl	8005f7e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f003 fadc 	bl	8008404 <USB_ReadInterrupts>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	f003 0308 	and.w	r3, r3, #8
 8004e52:	2b08      	cmp	r3, #8
 8004e54:	d106      	bne.n	8004e64 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f006 f99e 	bl	800b198 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2208      	movs	r2, #8
 8004e62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f003 facb 	bl	8008404 <USB_ReadInterrupts>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	f003 0310 	and.w	r3, r3, #16
 8004e74:	2b10      	cmp	r3, #16
 8004e76:	d101      	bne.n	8004e7c <HAL_HCD_IRQHandler+0x158>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e000      	b.n	8004e7e <HAL_HCD_IRQHandler+0x15a>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d012      	beq.n	8004ea8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	699a      	ldr	r2, [r3, #24]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0210 	bic.w	r2, r2, #16
 8004e90:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 ffa1 	bl	8005dda <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	699a      	ldr	r2, [r3, #24]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0210 	orr.w	r2, r2, #16
 8004ea6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f003 faa9 	bl	8008404 <USB_ReadInterrupts>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ebc:	d13a      	bne.n	8004f34 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f003 fede 	bl	8008c84 <USB_HC_ReadInterrupt>
 8004ec8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004eca:	2300      	movs	r3, #0
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	e025      	b.n	8004f1c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d018      	beq.n	8004f16 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ef6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004efa:	d106      	bne.n	8004f0a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	4619      	mov	r1, r3
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f8ab 	bl	800505e <HCD_HC_IN_IRQHandler>
 8004f08:	e005      	b.n	8004f16 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	4619      	mov	r1, r3
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 fbf9 	bl	8005708 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d3d4      	bcc.n	8004ed0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f2e:	615a      	str	r2, [r3, #20]
 8004f30:	e000      	b.n	8004f34 <HAL_HCD_IRQHandler+0x210>
      return;
 8004f32:	bf00      	nop
    }
  }
}
 8004f34:	3718      	adds	r7, #24
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b082      	sub	sp, #8
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <HAL_HCD_Start+0x16>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e013      	b.n	8004f78 <HAL_HCD_Start+0x3e>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f003 fbca 	bl	80086f8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f003 f8e2 	bl	8008132 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d101      	bne.n	8004f96 <HAL_HCD_Stop+0x16>
 8004f92:	2302      	movs	r3, #2
 8004f94:	e00d      	b.n	8004fb2 <HAL_HCD_Stop+0x32>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f003 ffb8 	bl	8008f18 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b082      	sub	sp, #8
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f003 fb6c 	bl	80086a4 <USB_ResetPort>
 8004fcc:	4603      	mov	r3, r0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	460b      	mov	r3, r1
 8004fe0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004fe2:	78fb      	ldrb	r3, [r7, #3]
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	212c      	movs	r1, #44	; 0x2c
 8004fe8:	fb01 f303 	mul.w	r3, r1, r3
 8004fec:	4413      	add	r3, r2
 8004fee:	3360      	adds	r3, #96	; 0x60
 8004ff0:	781b      	ldrb	r3, [r3, #0]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b083      	sub	sp, #12
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	460b      	mov	r3, r1
 8005008:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800500a:	78fb      	ldrb	r3, [r7, #3]
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	212c      	movs	r1, #44	; 0x2c
 8005010:	fb01 f303 	mul.w	r3, r1, r3
 8005014:	4413      	add	r3, r2
 8005016:	3350      	adds	r3, #80	; 0x50
 8005018:	681b      	ldr	r3, [r3, #0]
}
 800501a:	4618      	mov	r0, r3
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b082      	sub	sp, #8
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4618      	mov	r0, r3
 8005034:	f003 fbb0 	bl	8008798 <USB_GetCurrentFrame>
 8005038:	4603      	mov	r3, r0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b082      	sub	sp, #8
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4618      	mov	r0, r3
 8005050:	f003 fb8b 	bl	800876a <USB_GetHostSpeed>
 8005054:	4603      	mov	r3, r0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b086      	sub	sp, #24
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	460b      	mov	r3, r1
 8005068:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005074:	78fb      	ldrb	r3, [r7, #3]
 8005076:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	4413      	add	r3, r2
 8005080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 0304 	and.w	r3, r3, #4
 800508a:	2b04      	cmp	r3, #4
 800508c:	d11a      	bne.n	80050c4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	4413      	add	r3, r2
 8005096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509a:	461a      	mov	r2, r3
 800509c:	2304      	movs	r3, #4
 800509e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	212c      	movs	r1, #44	; 0x2c
 80050a6:	fb01 f303 	mul.w	r3, r1, r3
 80050aa:	4413      	add	r3, r2
 80050ac:	3361      	adds	r3, #97	; 0x61
 80050ae:	2206      	movs	r2, #6
 80050b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	4611      	mov	r1, r2
 80050bc:	4618      	mov	r0, r3
 80050be:	f003 fdf2 	bl	8008ca6 <USB_HC_Halt>
 80050c2:	e0af      	b.n	8005224 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050da:	d11b      	bne.n	8005114 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e8:	461a      	mov	r2, r3
 80050ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	212c      	movs	r1, #44	; 0x2c
 80050f6:	fb01 f303 	mul.w	r3, r1, r3
 80050fa:	4413      	add	r3, r2
 80050fc:	3361      	adds	r3, #97	; 0x61
 80050fe:	2207      	movs	r2, #7
 8005100:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	b2d2      	uxtb	r2, r2
 800510a:	4611      	mov	r1, r2
 800510c:	4618      	mov	r0, r3
 800510e:	f003 fdca 	bl	8008ca6 <USB_HC_Halt>
 8005112:	e087      	b.n	8005224 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	4413      	add	r3, r2
 800511c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 0320 	and.w	r3, r3, #32
 8005126:	2b20      	cmp	r3, #32
 8005128:	d109      	bne.n	800513e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	4413      	add	r3, r2
 8005132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005136:	461a      	mov	r2, r3
 8005138:	2320      	movs	r3, #32
 800513a:	6093      	str	r3, [r2, #8]
 800513c:	e072      	b.n	8005224 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	4413      	add	r3, r2
 8005146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 0308 	and.w	r3, r3, #8
 8005150:	2b08      	cmp	r3, #8
 8005152:	d11a      	bne.n	800518a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	4413      	add	r3, r2
 800515c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005160:	461a      	mov	r2, r3
 8005162:	2308      	movs	r3, #8
 8005164:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	212c      	movs	r1, #44	; 0x2c
 800516c:	fb01 f303 	mul.w	r3, r1, r3
 8005170:	4413      	add	r3, r2
 8005172:	3361      	adds	r3, #97	; 0x61
 8005174:	2205      	movs	r2, #5
 8005176:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	4611      	mov	r1, r2
 8005182:	4618      	mov	r0, r3
 8005184:	f003 fd8f 	bl	8008ca6 <USB_HC_Halt>
 8005188:	e04c      	b.n	8005224 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	015a      	lsls	r2, r3, #5
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	4413      	add	r3, r2
 8005192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800519c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051a0:	d11b      	bne.n	80051da <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ae:	461a      	mov	r2, r3
 80051b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	212c      	movs	r1, #44	; 0x2c
 80051bc:	fb01 f303 	mul.w	r3, r1, r3
 80051c0:	4413      	add	r3, r2
 80051c2:	3361      	adds	r3, #97	; 0x61
 80051c4:	2208      	movs	r2, #8
 80051c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	4611      	mov	r1, r2
 80051d2:	4618      	mov	r0, r3
 80051d4:	f003 fd67 	bl	8008ca6 <USB_HC_Halt>
 80051d8:	e024      	b.n	8005224 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ec:	2b80      	cmp	r3, #128	; 0x80
 80051ee:	d119      	bne.n	8005224 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fc:	461a      	mov	r2, r3
 80051fe:	2380      	movs	r3, #128	; 0x80
 8005200:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	212c      	movs	r1, #44	; 0x2c
 8005208:	fb01 f303 	mul.w	r3, r1, r3
 800520c:	4413      	add	r3, r2
 800520e:	3361      	adds	r3, #97	; 0x61
 8005210:	2206      	movs	r2, #6
 8005212:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	4611      	mov	r1, r2
 800521e:	4618      	mov	r0, r3
 8005220:	f003 fd41 	bl	8008ca6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	4413      	add	r3, r2
 800522c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800523a:	d112      	bne.n	8005262 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	b2d2      	uxtb	r2, r2
 8005244:	4611      	mov	r1, r2
 8005246:	4618      	mov	r0, r3
 8005248:	f003 fd2d 	bl	8008ca6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	4413      	add	r3, r2
 8005254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005258:	461a      	mov	r2, r3
 800525a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800525e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005260:	e24e      	b.n	8005700 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	4413      	add	r3, r2
 800526a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b01      	cmp	r3, #1
 8005276:	f040 80df 	bne.w	8005438 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d019      	beq.n	80052b6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	212c      	movs	r1, #44	; 0x2c
 8005288:	fb01 f303 	mul.w	r3, r1, r3
 800528c:	4413      	add	r3, r2
 800528e:	3348      	adds	r3, #72	; 0x48
 8005290:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	0159      	lsls	r1, r3, #5
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	440b      	add	r3, r1
 800529a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80052a4:	1ad2      	subs	r2, r2, r3
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	202c      	movs	r0, #44	; 0x2c
 80052ac:	fb00 f303 	mul.w	r3, r0, r3
 80052b0:	440b      	add	r3, r1
 80052b2:	3350      	adds	r3, #80	; 0x50
 80052b4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	212c      	movs	r1, #44	; 0x2c
 80052bc:	fb01 f303 	mul.w	r3, r1, r3
 80052c0:	4413      	add	r3, r2
 80052c2:	3361      	adds	r3, #97	; 0x61
 80052c4:	2201      	movs	r2, #1
 80052c6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	212c      	movs	r1, #44	; 0x2c
 80052ce:	fb01 f303 	mul.w	r3, r1, r3
 80052d2:	4413      	add	r3, r2
 80052d4:	335c      	adds	r3, #92	; 0x5c
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e6:	461a      	mov	r2, r3
 80052e8:	2301      	movs	r3, #1
 80052ea:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	212c      	movs	r1, #44	; 0x2c
 80052f2:	fb01 f303 	mul.w	r3, r1, r3
 80052f6:	4413      	add	r3, r2
 80052f8:	333f      	adds	r3, #63	; 0x3f
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d009      	beq.n	8005314 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	212c      	movs	r1, #44	; 0x2c
 8005306:	fb01 f303 	mul.w	r3, r1, r3
 800530a:	4413      	add	r3, r2
 800530c:	333f      	adds	r3, #63	; 0x3f
 800530e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005310:	2b02      	cmp	r3, #2
 8005312:	d111      	bne.n	8005338 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	b2d2      	uxtb	r2, r2
 800531c:	4611      	mov	r1, r2
 800531e:	4618      	mov	r0, r3
 8005320:	f003 fcc1 	bl	8008ca6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	4413      	add	r3, r2
 800532c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005330:	461a      	mov	r2, r3
 8005332:	2310      	movs	r3, #16
 8005334:	6093      	str	r3, [r2, #8]
 8005336:	e03a      	b.n	80053ae <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	212c      	movs	r1, #44	; 0x2c
 800533e:	fb01 f303 	mul.w	r3, r1, r3
 8005342:	4413      	add	r3, r2
 8005344:	333f      	adds	r3, #63	; 0x3f
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	2b03      	cmp	r3, #3
 800534a:	d009      	beq.n	8005360 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	212c      	movs	r1, #44	; 0x2c
 8005352:	fb01 f303 	mul.w	r3, r1, r3
 8005356:	4413      	add	r3, r2
 8005358:	333f      	adds	r3, #63	; 0x3f
 800535a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800535c:	2b01      	cmp	r3, #1
 800535e:	d126      	bne.n	80053ae <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	4413      	add	r3, r2
 8005368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	0151      	lsls	r1, r2, #5
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	440a      	add	r2, r1
 8005376:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800537a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800537e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	212c      	movs	r1, #44	; 0x2c
 8005386:	fb01 f303 	mul.w	r3, r1, r3
 800538a:	4413      	add	r3, r2
 800538c:	3360      	adds	r3, #96	; 0x60
 800538e:	2201      	movs	r2, #1
 8005390:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	b2d9      	uxtb	r1, r3
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	202c      	movs	r0, #44	; 0x2c
 800539c:	fb00 f303 	mul.w	r3, r0, r3
 80053a0:	4413      	add	r3, r2
 80053a2:	3360      	adds	r3, #96	; 0x60
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	461a      	mov	r2, r3
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f005 ff1f 	bl	800b1ec <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d12b      	bne.n	800540e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	212c      	movs	r1, #44	; 0x2c
 80053bc:	fb01 f303 	mul.w	r3, r1, r3
 80053c0:	4413      	add	r3, r2
 80053c2:	3348      	adds	r3, #72	; 0x48
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6879      	ldr	r1, [r7, #4]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	202c      	movs	r0, #44	; 0x2c
 80053cc:	fb00 f202 	mul.w	r2, r0, r2
 80053d0:	440a      	add	r2, r1
 80053d2:	3240      	adds	r2, #64	; 0x40
 80053d4:	8812      	ldrh	r2, [r2, #0]
 80053d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 818e 	beq.w	8005700 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	212c      	movs	r1, #44	; 0x2c
 80053ea:	fb01 f303 	mul.w	r3, r1, r3
 80053ee:	4413      	add	r3, r2
 80053f0:	3354      	adds	r3, #84	; 0x54
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	f083 0301 	eor.w	r3, r3, #1
 80053f8:	b2d8      	uxtb	r0, r3
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	212c      	movs	r1, #44	; 0x2c
 8005400:	fb01 f303 	mul.w	r3, r1, r3
 8005404:	4413      	add	r3, r2
 8005406:	3354      	adds	r3, #84	; 0x54
 8005408:	4602      	mov	r2, r0
 800540a:	701a      	strb	r2, [r3, #0]
}
 800540c:	e178      	b.n	8005700 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	212c      	movs	r1, #44	; 0x2c
 8005414:	fb01 f303 	mul.w	r3, r1, r3
 8005418:	4413      	add	r3, r2
 800541a:	3354      	adds	r3, #84	; 0x54
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	f083 0301 	eor.w	r3, r3, #1
 8005422:	b2d8      	uxtb	r0, r3
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	212c      	movs	r1, #44	; 0x2c
 800542a:	fb01 f303 	mul.w	r3, r1, r3
 800542e:	4413      	add	r3, r2
 8005430:	3354      	adds	r3, #84	; 0x54
 8005432:	4602      	mov	r2, r0
 8005434:	701a      	strb	r2, [r3, #0]
}
 8005436:	e163      	b.n	8005700 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	4413      	add	r3, r2
 8005440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b02      	cmp	r3, #2
 800544c:	f040 80f6 	bne.w	800563c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	212c      	movs	r1, #44	; 0x2c
 8005456:	fb01 f303 	mul.w	r3, r1, r3
 800545a:	4413      	add	r3, r2
 800545c:	3361      	adds	r3, #97	; 0x61
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d109      	bne.n	8005478 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	212c      	movs	r1, #44	; 0x2c
 800546a:	fb01 f303 	mul.w	r3, r1, r3
 800546e:	4413      	add	r3, r2
 8005470:	3360      	adds	r3, #96	; 0x60
 8005472:	2201      	movs	r2, #1
 8005474:	701a      	strb	r2, [r3, #0]
 8005476:	e0c9      	b.n	800560c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	212c      	movs	r1, #44	; 0x2c
 800547e:	fb01 f303 	mul.w	r3, r1, r3
 8005482:	4413      	add	r3, r2
 8005484:	3361      	adds	r3, #97	; 0x61
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	2b05      	cmp	r3, #5
 800548a:	d109      	bne.n	80054a0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	212c      	movs	r1, #44	; 0x2c
 8005492:	fb01 f303 	mul.w	r3, r1, r3
 8005496:	4413      	add	r3, r2
 8005498:	3360      	adds	r3, #96	; 0x60
 800549a:	2205      	movs	r2, #5
 800549c:	701a      	strb	r2, [r3, #0]
 800549e:	e0b5      	b.n	800560c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	212c      	movs	r1, #44	; 0x2c
 80054a6:	fb01 f303 	mul.w	r3, r1, r3
 80054aa:	4413      	add	r3, r2
 80054ac:	3361      	adds	r3, #97	; 0x61
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	2b06      	cmp	r3, #6
 80054b2:	d009      	beq.n	80054c8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	212c      	movs	r1, #44	; 0x2c
 80054ba:	fb01 f303 	mul.w	r3, r1, r3
 80054be:	4413      	add	r3, r2
 80054c0:	3361      	adds	r3, #97	; 0x61
 80054c2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d150      	bne.n	800556a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	212c      	movs	r1, #44	; 0x2c
 80054ce:	fb01 f303 	mul.w	r3, r1, r3
 80054d2:	4413      	add	r3, r2
 80054d4:	335c      	adds	r3, #92	; 0x5c
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	1c5a      	adds	r2, r3, #1
 80054da:	6879      	ldr	r1, [r7, #4]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	202c      	movs	r0, #44	; 0x2c
 80054e0:	fb00 f303 	mul.w	r3, r0, r3
 80054e4:	440b      	add	r3, r1
 80054e6:	335c      	adds	r3, #92	; 0x5c
 80054e8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	212c      	movs	r1, #44	; 0x2c
 80054f0:	fb01 f303 	mul.w	r3, r1, r3
 80054f4:	4413      	add	r3, r2
 80054f6:	335c      	adds	r3, #92	; 0x5c
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d912      	bls.n	8005524 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	212c      	movs	r1, #44	; 0x2c
 8005504:	fb01 f303 	mul.w	r3, r1, r3
 8005508:	4413      	add	r3, r2
 800550a:	335c      	adds	r3, #92	; 0x5c
 800550c:	2200      	movs	r2, #0
 800550e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	212c      	movs	r1, #44	; 0x2c
 8005516:	fb01 f303 	mul.w	r3, r1, r3
 800551a:	4413      	add	r3, r2
 800551c:	3360      	adds	r3, #96	; 0x60
 800551e:	2204      	movs	r2, #4
 8005520:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005522:	e073      	b.n	800560c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	212c      	movs	r1, #44	; 0x2c
 800552a:	fb01 f303 	mul.w	r3, r1, r3
 800552e:	4413      	add	r3, r2
 8005530:	3360      	adds	r3, #96	; 0x60
 8005532:	2202      	movs	r2, #2
 8005534:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	4413      	add	r3, r2
 800553e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800554c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005554:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	4413      	add	r3, r2
 800555e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005562:	461a      	mov	r2, r3
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005568:	e050      	b.n	800560c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	212c      	movs	r1, #44	; 0x2c
 8005570:	fb01 f303 	mul.w	r3, r1, r3
 8005574:	4413      	add	r3, r2
 8005576:	3361      	adds	r3, #97	; 0x61
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b03      	cmp	r3, #3
 800557c:	d122      	bne.n	80055c4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	212c      	movs	r1, #44	; 0x2c
 8005584:	fb01 f303 	mul.w	r3, r1, r3
 8005588:	4413      	add	r3, r2
 800558a:	3360      	adds	r3, #96	; 0x60
 800558c:	2202      	movs	r2, #2
 800558e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	4413      	add	r3, r2
 8005598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055a6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055ae:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055bc:	461a      	mov	r2, r3
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	6013      	str	r3, [r2, #0]
 80055c2:	e023      	b.n	800560c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	212c      	movs	r1, #44	; 0x2c
 80055ca:	fb01 f303 	mul.w	r3, r1, r3
 80055ce:	4413      	add	r3, r2
 80055d0:	3361      	adds	r3, #97	; 0x61
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	2b07      	cmp	r3, #7
 80055d6:	d119      	bne.n	800560c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	212c      	movs	r1, #44	; 0x2c
 80055de:	fb01 f303 	mul.w	r3, r1, r3
 80055e2:	4413      	add	r3, r2
 80055e4:	335c      	adds	r3, #92	; 0x5c
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	1c5a      	adds	r2, r3, #1
 80055ea:	6879      	ldr	r1, [r7, #4]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	202c      	movs	r0, #44	; 0x2c
 80055f0:	fb00 f303 	mul.w	r3, r0, r3
 80055f4:	440b      	add	r3, r1
 80055f6:	335c      	adds	r3, #92	; 0x5c
 80055f8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	212c      	movs	r1, #44	; 0x2c
 8005600:	fb01 f303 	mul.w	r3, r1, r3
 8005604:	4413      	add	r3, r2
 8005606:	3360      	adds	r3, #96	; 0x60
 8005608:	2204      	movs	r2, #4
 800560a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	4413      	add	r3, r2
 8005614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005618:	461a      	mov	r2, r3
 800561a:	2302      	movs	r3, #2
 800561c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	b2d9      	uxtb	r1, r3
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	202c      	movs	r0, #44	; 0x2c
 8005628:	fb00 f303 	mul.w	r3, r0, r3
 800562c:	4413      	add	r3, r2
 800562e:	3360      	adds	r3, #96	; 0x60
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	461a      	mov	r2, r3
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f005 fdd9 	bl	800b1ec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800563a:	e061      	b.n	8005700 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	4413      	add	r3, r2
 8005644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 0310 	and.w	r3, r3, #16
 800564e:	2b10      	cmp	r3, #16
 8005650:	d156      	bne.n	8005700 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	212c      	movs	r1, #44	; 0x2c
 8005658:	fb01 f303 	mul.w	r3, r1, r3
 800565c:	4413      	add	r3, r2
 800565e:	333f      	adds	r3, #63	; 0x3f
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	2b03      	cmp	r3, #3
 8005664:	d111      	bne.n	800568a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	212c      	movs	r1, #44	; 0x2c
 800566c:	fb01 f303 	mul.w	r3, r1, r3
 8005670:	4413      	add	r3, r2
 8005672:	335c      	adds	r3, #92	; 0x5c
 8005674:	2200      	movs	r2, #0
 8005676:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	b2d2      	uxtb	r2, r2
 8005680:	4611      	mov	r1, r2
 8005682:	4618      	mov	r0, r3
 8005684:	f003 fb0f 	bl	8008ca6 <USB_HC_Halt>
 8005688:	e031      	b.n	80056ee <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	212c      	movs	r1, #44	; 0x2c
 8005690:	fb01 f303 	mul.w	r3, r1, r3
 8005694:	4413      	add	r3, r2
 8005696:	333f      	adds	r3, #63	; 0x3f
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d009      	beq.n	80056b2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	212c      	movs	r1, #44	; 0x2c
 80056a4:	fb01 f303 	mul.w	r3, r1, r3
 80056a8:	4413      	add	r3, r2
 80056aa:	333f      	adds	r3, #63	; 0x3f
 80056ac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d11d      	bne.n	80056ee <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	212c      	movs	r1, #44	; 0x2c
 80056b8:	fb01 f303 	mul.w	r3, r1, r3
 80056bc:	4413      	add	r3, r2
 80056be:	335c      	adds	r3, #92	; 0x5c
 80056c0:	2200      	movs	r2, #0
 80056c2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d110      	bne.n	80056ee <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	212c      	movs	r1, #44	; 0x2c
 80056d2:	fb01 f303 	mul.w	r3, r1, r3
 80056d6:	4413      	add	r3, r2
 80056d8:	3361      	adds	r3, #97	; 0x61
 80056da:	2203      	movs	r2, #3
 80056dc:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	b2d2      	uxtb	r2, r2
 80056e6:	4611      	mov	r1, r2
 80056e8:	4618      	mov	r0, r3
 80056ea:	f003 fadc 	bl	8008ca6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056fa:	461a      	mov	r2, r3
 80056fc:	2310      	movs	r3, #16
 80056fe:	6093      	str	r3, [r2, #8]
}
 8005700:	bf00      	nop
 8005702:	3718      	adds	r7, #24
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b088      	sub	sp, #32
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	460b      	mov	r3, r1
 8005712:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800571e:	78fb      	ldrb	r3, [r7, #3]
 8005720:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	4413      	add	r3, r2
 800572a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f003 0304 	and.w	r3, r3, #4
 8005734:	2b04      	cmp	r3, #4
 8005736:	d11a      	bne.n	800576e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	4413      	add	r3, r2
 8005740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005744:	461a      	mov	r2, r3
 8005746:	2304      	movs	r3, #4
 8005748:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	212c      	movs	r1, #44	; 0x2c
 8005750:	fb01 f303 	mul.w	r3, r1, r3
 8005754:	4413      	add	r3, r2
 8005756:	3361      	adds	r3, #97	; 0x61
 8005758:	2206      	movs	r2, #6
 800575a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	4611      	mov	r1, r2
 8005766:	4618      	mov	r0, r3
 8005768:	f003 fa9d 	bl	8008ca6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800576c:	e331      	b.n	8005dd2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	015a      	lsls	r2, r3, #5
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	4413      	add	r3, r2
 8005776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f003 0320 	and.w	r3, r3, #32
 8005780:	2b20      	cmp	r3, #32
 8005782:	d12e      	bne.n	80057e2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	4413      	add	r3, r2
 800578c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005790:	461a      	mov	r2, r3
 8005792:	2320      	movs	r3, #32
 8005794:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	212c      	movs	r1, #44	; 0x2c
 800579c:	fb01 f303 	mul.w	r3, r1, r3
 80057a0:	4413      	add	r3, r2
 80057a2:	333d      	adds	r3, #61	; 0x3d
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	f040 8313 	bne.w	8005dd2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	212c      	movs	r1, #44	; 0x2c
 80057b2:	fb01 f303 	mul.w	r3, r1, r3
 80057b6:	4413      	add	r3, r2
 80057b8:	333d      	adds	r3, #61	; 0x3d
 80057ba:	2200      	movs	r2, #0
 80057bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	212c      	movs	r1, #44	; 0x2c
 80057c4:	fb01 f303 	mul.w	r3, r1, r3
 80057c8:	4413      	add	r3, r2
 80057ca:	3360      	adds	r3, #96	; 0x60
 80057cc:	2202      	movs	r2, #2
 80057ce:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	b2d2      	uxtb	r2, r2
 80057d8:	4611      	mov	r1, r2
 80057da:	4618      	mov	r0, r3
 80057dc:	f003 fa63 	bl	8008ca6 <USB_HC_Halt>
}
 80057e0:	e2f7      	b.n	8005dd2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057f8:	d112      	bne.n	8005820 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	4413      	add	r3, r2
 8005802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005806:	461a      	mov	r2, r3
 8005808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800580c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	4611      	mov	r1, r2
 8005818:	4618      	mov	r0, r3
 800581a:	f003 fa44 	bl	8008ca6 <USB_HC_Halt>
}
 800581e:	e2d8      	b.n	8005dd2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	4413      	add	r3, r2
 8005828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b01      	cmp	r3, #1
 8005834:	d140      	bne.n	80058b8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	212c      	movs	r1, #44	; 0x2c
 800583c:	fb01 f303 	mul.w	r3, r1, r3
 8005840:	4413      	add	r3, r2
 8005842:	335c      	adds	r3, #92	; 0x5c
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	4413      	add	r3, r2
 8005850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800585a:	2b40      	cmp	r3, #64	; 0x40
 800585c:	d111      	bne.n	8005882 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	212c      	movs	r1, #44	; 0x2c
 8005864:	fb01 f303 	mul.w	r3, r1, r3
 8005868:	4413      	add	r3, r2
 800586a:	333d      	adds	r3, #61	; 0x3d
 800586c:	2201      	movs	r2, #1
 800586e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	4413      	add	r3, r2
 8005878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800587c:	461a      	mov	r2, r3
 800587e:	2340      	movs	r3, #64	; 0x40
 8005880:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	015a      	lsls	r2, r3, #5
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	4413      	add	r3, r2
 800588a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800588e:	461a      	mov	r2, r3
 8005890:	2301      	movs	r3, #1
 8005892:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	212c      	movs	r1, #44	; 0x2c
 800589a:	fb01 f303 	mul.w	r3, r1, r3
 800589e:	4413      	add	r3, r2
 80058a0:	3361      	adds	r3, #97	; 0x61
 80058a2:	2201      	movs	r2, #1
 80058a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	b2d2      	uxtb	r2, r2
 80058ae:	4611      	mov	r1, r2
 80058b0:	4618      	mov	r0, r3
 80058b2:	f003 f9f8 	bl	8008ca6 <USB_HC_Halt>
}
 80058b6:	e28c      	b.n	8005dd2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ca:	2b40      	cmp	r3, #64	; 0x40
 80058cc:	d12c      	bne.n	8005928 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	212c      	movs	r1, #44	; 0x2c
 80058d4:	fb01 f303 	mul.w	r3, r1, r3
 80058d8:	4413      	add	r3, r2
 80058da:	3361      	adds	r3, #97	; 0x61
 80058dc:	2204      	movs	r2, #4
 80058de:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	212c      	movs	r1, #44	; 0x2c
 80058e6:	fb01 f303 	mul.w	r3, r1, r3
 80058ea:	4413      	add	r3, r2
 80058ec:	333d      	adds	r3, #61	; 0x3d
 80058ee:	2201      	movs	r2, #1
 80058f0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	212c      	movs	r1, #44	; 0x2c
 80058f8:	fb01 f303 	mul.w	r3, r1, r3
 80058fc:	4413      	add	r3, r2
 80058fe:	335c      	adds	r3, #92	; 0x5c
 8005900:	2200      	movs	r2, #0
 8005902:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	b2d2      	uxtb	r2, r2
 800590c:	4611      	mov	r1, r2
 800590e:	4618      	mov	r0, r3
 8005910:	f003 f9c9 	bl	8008ca6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	4413      	add	r3, r2
 800591c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005920:	461a      	mov	r2, r3
 8005922:	2340      	movs	r3, #64	; 0x40
 8005924:	6093      	str	r3, [r2, #8]
}
 8005926:	e254      	b.n	8005dd2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	4413      	add	r3, r2
 8005930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 0308 	and.w	r3, r3, #8
 800593a:	2b08      	cmp	r3, #8
 800593c:	d11a      	bne.n	8005974 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	015a      	lsls	r2, r3, #5
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	4413      	add	r3, r2
 8005946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800594a:	461a      	mov	r2, r3
 800594c:	2308      	movs	r3, #8
 800594e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	212c      	movs	r1, #44	; 0x2c
 8005956:	fb01 f303 	mul.w	r3, r1, r3
 800595a:	4413      	add	r3, r2
 800595c:	3361      	adds	r3, #97	; 0x61
 800595e:	2205      	movs	r2, #5
 8005960:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	4611      	mov	r1, r2
 800596c:	4618      	mov	r0, r3
 800596e:	f003 f99a 	bl	8008ca6 <USB_HC_Halt>
}
 8005972:	e22e      	b.n	8005dd2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	4413      	add	r3, r2
 800597c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 0310 	and.w	r3, r3, #16
 8005986:	2b10      	cmp	r3, #16
 8005988:	d140      	bne.n	8005a0c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	212c      	movs	r1, #44	; 0x2c
 8005990:	fb01 f303 	mul.w	r3, r1, r3
 8005994:	4413      	add	r3, r2
 8005996:	335c      	adds	r3, #92	; 0x5c
 8005998:	2200      	movs	r2, #0
 800599a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	212c      	movs	r1, #44	; 0x2c
 80059a2:	fb01 f303 	mul.w	r3, r1, r3
 80059a6:	4413      	add	r3, r2
 80059a8:	3361      	adds	r3, #97	; 0x61
 80059aa:	2203      	movs	r2, #3
 80059ac:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	212c      	movs	r1, #44	; 0x2c
 80059b4:	fb01 f303 	mul.w	r3, r1, r3
 80059b8:	4413      	add	r3, r2
 80059ba:	333d      	adds	r3, #61	; 0x3d
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d112      	bne.n	80059e8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	212c      	movs	r1, #44	; 0x2c
 80059c8:	fb01 f303 	mul.w	r3, r1, r3
 80059cc:	4413      	add	r3, r2
 80059ce:	333c      	adds	r3, #60	; 0x3c
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d108      	bne.n	80059e8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	212c      	movs	r1, #44	; 0x2c
 80059dc:	fb01 f303 	mul.w	r3, r1, r3
 80059e0:	4413      	add	r3, r2
 80059e2:	333d      	adds	r3, #61	; 0x3d
 80059e4:	2201      	movs	r2, #1
 80059e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	4611      	mov	r1, r2
 80059f2:	4618      	mov	r0, r3
 80059f4:	f003 f957 	bl	8008ca6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a04:	461a      	mov	r2, r3
 8005a06:	2310      	movs	r3, #16
 8005a08:	6093      	str	r3, [r2, #8]
}
 8005a0a:	e1e2      	b.n	8005dd2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1e:	2b80      	cmp	r3, #128	; 0x80
 8005a20:	d164      	bne.n	8005aec <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d111      	bne.n	8005a4e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	212c      	movs	r1, #44	; 0x2c
 8005a30:	fb01 f303 	mul.w	r3, r1, r3
 8005a34:	4413      	add	r3, r2
 8005a36:	3361      	adds	r3, #97	; 0x61
 8005a38:	2206      	movs	r2, #6
 8005a3a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	4611      	mov	r1, r2
 8005a46:	4618      	mov	r0, r3
 8005a48:	f003 f92d 	bl	8008ca6 <USB_HC_Halt>
 8005a4c:	e044      	b.n	8005ad8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	212c      	movs	r1, #44	; 0x2c
 8005a54:	fb01 f303 	mul.w	r3, r1, r3
 8005a58:	4413      	add	r3, r2
 8005a5a:	335c      	adds	r3, #92	; 0x5c
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	6879      	ldr	r1, [r7, #4]
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	202c      	movs	r0, #44	; 0x2c
 8005a66:	fb00 f303 	mul.w	r3, r0, r3
 8005a6a:	440b      	add	r3, r1
 8005a6c:	335c      	adds	r3, #92	; 0x5c
 8005a6e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	212c      	movs	r1, #44	; 0x2c
 8005a76:	fb01 f303 	mul.w	r3, r1, r3
 8005a7a:	4413      	add	r3, r2
 8005a7c:	335c      	adds	r3, #92	; 0x5c
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d920      	bls.n	8005ac6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	212c      	movs	r1, #44	; 0x2c
 8005a8a:	fb01 f303 	mul.w	r3, r1, r3
 8005a8e:	4413      	add	r3, r2
 8005a90:	335c      	adds	r3, #92	; 0x5c
 8005a92:	2200      	movs	r2, #0
 8005a94:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	212c      	movs	r1, #44	; 0x2c
 8005a9c:	fb01 f303 	mul.w	r3, r1, r3
 8005aa0:	4413      	add	r3, r2
 8005aa2:	3360      	adds	r3, #96	; 0x60
 8005aa4:	2204      	movs	r2, #4
 8005aa6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	b2d9      	uxtb	r1, r3
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	202c      	movs	r0, #44	; 0x2c
 8005ab2:	fb00 f303 	mul.w	r3, r0, r3
 8005ab6:	4413      	add	r3, r2
 8005ab8:	3360      	adds	r3, #96	; 0x60
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	461a      	mov	r2, r3
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f005 fb94 	bl	800b1ec <HAL_HCD_HC_NotifyURBChange_Callback>
 8005ac4:	e008      	b.n	8005ad8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	212c      	movs	r1, #44	; 0x2c
 8005acc:	fb01 f303 	mul.w	r3, r1, r3
 8005ad0:	4413      	add	r3, r2
 8005ad2:	3360      	adds	r3, #96	; 0x60
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	2380      	movs	r3, #128	; 0x80
 8005ae8:	6093      	str	r3, [r2, #8]
}
 8005aea:	e172      	b.n	8005dd2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b02:	d11b      	bne.n	8005b3c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	212c      	movs	r1, #44	; 0x2c
 8005b0a:	fb01 f303 	mul.w	r3, r1, r3
 8005b0e:	4413      	add	r3, r2
 8005b10:	3361      	adds	r3, #97	; 0x61
 8005b12:	2208      	movs	r2, #8
 8005b14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	b2d2      	uxtb	r2, r2
 8005b1e:	4611      	mov	r1, r2
 8005b20:	4618      	mov	r0, r3
 8005b22:	f003 f8c0 	bl	8008ca6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b32:	461a      	mov	r2, r3
 8005b34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b38:	6093      	str	r3, [r2, #8]
}
 8005b3a:	e14a      	b.n	8005dd2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	f040 813f 	bne.w	8005dd2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	212c      	movs	r1, #44	; 0x2c
 8005b5a:	fb01 f303 	mul.w	r3, r1, r3
 8005b5e:	4413      	add	r3, r2
 8005b60:	3361      	adds	r3, #97	; 0x61
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d17d      	bne.n	8005c64 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	212c      	movs	r1, #44	; 0x2c
 8005b6e:	fb01 f303 	mul.w	r3, r1, r3
 8005b72:	4413      	add	r3, r2
 8005b74:	3360      	adds	r3, #96	; 0x60
 8005b76:	2201      	movs	r2, #1
 8005b78:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	212c      	movs	r1, #44	; 0x2c
 8005b80:	fb01 f303 	mul.w	r3, r1, r3
 8005b84:	4413      	add	r3, r2
 8005b86:	333f      	adds	r3, #63	; 0x3f
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d00a      	beq.n	8005ba4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	212c      	movs	r1, #44	; 0x2c
 8005b94:	fb01 f303 	mul.w	r3, r1, r3
 8005b98:	4413      	add	r3, r2
 8005b9a:	333f      	adds	r3, #63	; 0x3f
 8005b9c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005b9e:	2b03      	cmp	r3, #3
 8005ba0:	f040 8100 	bne.w	8005da4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d113      	bne.n	8005bd4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	212c      	movs	r1, #44	; 0x2c
 8005bb2:	fb01 f303 	mul.w	r3, r1, r3
 8005bb6:	4413      	add	r3, r2
 8005bb8:	3355      	adds	r3, #85	; 0x55
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	f083 0301 	eor.w	r3, r3, #1
 8005bc0:	b2d8      	uxtb	r0, r3
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	212c      	movs	r1, #44	; 0x2c
 8005bc8:	fb01 f303 	mul.w	r3, r1, r3
 8005bcc:	4413      	add	r3, r2
 8005bce:	3355      	adds	r3, #85	; 0x55
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	f040 80e3 	bne.w	8005da4 <HCD_HC_OUT_IRQHandler+0x69c>
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	212c      	movs	r1, #44	; 0x2c
 8005be4:	fb01 f303 	mul.w	r3, r1, r3
 8005be8:	4413      	add	r3, r2
 8005bea:	334c      	adds	r3, #76	; 0x4c
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f000 80d8 	beq.w	8005da4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	212c      	movs	r1, #44	; 0x2c
 8005bfa:	fb01 f303 	mul.w	r3, r1, r3
 8005bfe:	4413      	add	r3, r2
 8005c00:	334c      	adds	r3, #76	; 0x4c
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6879      	ldr	r1, [r7, #4]
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	202c      	movs	r0, #44	; 0x2c
 8005c0a:	fb00 f202 	mul.w	r2, r0, r2
 8005c0e:	440a      	add	r2, r1
 8005c10:	3240      	adds	r2, #64	; 0x40
 8005c12:	8812      	ldrh	r2, [r2, #0]
 8005c14:	4413      	add	r3, r2
 8005c16:	3b01      	subs	r3, #1
 8005c18:	6879      	ldr	r1, [r7, #4]
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	202c      	movs	r0, #44	; 0x2c
 8005c1e:	fb00 f202 	mul.w	r2, r0, r2
 8005c22:	440a      	add	r2, r1
 8005c24:	3240      	adds	r2, #64	; 0x40
 8005c26:	8812      	ldrh	r2, [r2, #0]
 8005c28:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 80b5 	beq.w	8005da4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	212c      	movs	r1, #44	; 0x2c
 8005c40:	fb01 f303 	mul.w	r3, r1, r3
 8005c44:	4413      	add	r3, r2
 8005c46:	3355      	adds	r3, #85	; 0x55
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	f083 0301 	eor.w	r3, r3, #1
 8005c4e:	b2d8      	uxtb	r0, r3
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	212c      	movs	r1, #44	; 0x2c
 8005c56:	fb01 f303 	mul.w	r3, r1, r3
 8005c5a:	4413      	add	r3, r2
 8005c5c:	3355      	adds	r3, #85	; 0x55
 8005c5e:	4602      	mov	r2, r0
 8005c60:	701a      	strb	r2, [r3, #0]
 8005c62:	e09f      	b.n	8005da4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	212c      	movs	r1, #44	; 0x2c
 8005c6a:	fb01 f303 	mul.w	r3, r1, r3
 8005c6e:	4413      	add	r3, r2
 8005c70:	3361      	adds	r3, #97	; 0x61
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d109      	bne.n	8005c8c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	212c      	movs	r1, #44	; 0x2c
 8005c7e:	fb01 f303 	mul.w	r3, r1, r3
 8005c82:	4413      	add	r3, r2
 8005c84:	3360      	adds	r3, #96	; 0x60
 8005c86:	2202      	movs	r2, #2
 8005c88:	701a      	strb	r2, [r3, #0]
 8005c8a:	e08b      	b.n	8005da4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	212c      	movs	r1, #44	; 0x2c
 8005c92:	fb01 f303 	mul.w	r3, r1, r3
 8005c96:	4413      	add	r3, r2
 8005c98:	3361      	adds	r3, #97	; 0x61
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	2b04      	cmp	r3, #4
 8005c9e:	d109      	bne.n	8005cb4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	212c      	movs	r1, #44	; 0x2c
 8005ca6:	fb01 f303 	mul.w	r3, r1, r3
 8005caa:	4413      	add	r3, r2
 8005cac:	3360      	adds	r3, #96	; 0x60
 8005cae:	2202      	movs	r2, #2
 8005cb0:	701a      	strb	r2, [r3, #0]
 8005cb2:	e077      	b.n	8005da4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	212c      	movs	r1, #44	; 0x2c
 8005cba:	fb01 f303 	mul.w	r3, r1, r3
 8005cbe:	4413      	add	r3, r2
 8005cc0:	3361      	adds	r3, #97	; 0x61
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	2b05      	cmp	r3, #5
 8005cc6:	d109      	bne.n	8005cdc <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	212c      	movs	r1, #44	; 0x2c
 8005cce:	fb01 f303 	mul.w	r3, r1, r3
 8005cd2:	4413      	add	r3, r2
 8005cd4:	3360      	adds	r3, #96	; 0x60
 8005cd6:	2205      	movs	r2, #5
 8005cd8:	701a      	strb	r2, [r3, #0]
 8005cda:	e063      	b.n	8005da4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	212c      	movs	r1, #44	; 0x2c
 8005ce2:	fb01 f303 	mul.w	r3, r1, r3
 8005ce6:	4413      	add	r3, r2
 8005ce8:	3361      	adds	r3, #97	; 0x61
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	2b06      	cmp	r3, #6
 8005cee:	d009      	beq.n	8005d04 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	212c      	movs	r1, #44	; 0x2c
 8005cf6:	fb01 f303 	mul.w	r3, r1, r3
 8005cfa:	4413      	add	r3, r2
 8005cfc:	3361      	adds	r3, #97	; 0x61
 8005cfe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d14f      	bne.n	8005da4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	212c      	movs	r1, #44	; 0x2c
 8005d0a:	fb01 f303 	mul.w	r3, r1, r3
 8005d0e:	4413      	add	r3, r2
 8005d10:	335c      	adds	r3, #92	; 0x5c
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	1c5a      	adds	r2, r3, #1
 8005d16:	6879      	ldr	r1, [r7, #4]
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	202c      	movs	r0, #44	; 0x2c
 8005d1c:	fb00 f303 	mul.w	r3, r0, r3
 8005d20:	440b      	add	r3, r1
 8005d22:	335c      	adds	r3, #92	; 0x5c
 8005d24:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	212c      	movs	r1, #44	; 0x2c
 8005d2c:	fb01 f303 	mul.w	r3, r1, r3
 8005d30:	4413      	add	r3, r2
 8005d32:	335c      	adds	r3, #92	; 0x5c
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d912      	bls.n	8005d60 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	212c      	movs	r1, #44	; 0x2c
 8005d40:	fb01 f303 	mul.w	r3, r1, r3
 8005d44:	4413      	add	r3, r2
 8005d46:	335c      	adds	r3, #92	; 0x5c
 8005d48:	2200      	movs	r2, #0
 8005d4a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	212c      	movs	r1, #44	; 0x2c
 8005d52:	fb01 f303 	mul.w	r3, r1, r3
 8005d56:	4413      	add	r3, r2
 8005d58:	3360      	adds	r3, #96	; 0x60
 8005d5a:	2204      	movs	r2, #4
 8005d5c:	701a      	strb	r2, [r3, #0]
 8005d5e:	e021      	b.n	8005da4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	212c      	movs	r1, #44	; 0x2c
 8005d66:	fb01 f303 	mul.w	r3, r1, r3
 8005d6a:	4413      	add	r3, r2
 8005d6c:	3360      	adds	r3, #96	; 0x60
 8005d6e:	2202      	movs	r2, #2
 8005d70:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d88:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d90:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9e:	461a      	mov	r2, r3
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db0:	461a      	mov	r2, r3
 8005db2:	2302      	movs	r3, #2
 8005db4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	b2d9      	uxtb	r1, r3
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	202c      	movs	r0, #44	; 0x2c
 8005dc0:	fb00 f303 	mul.w	r3, r0, r3
 8005dc4:	4413      	add	r3, r2
 8005dc6:	3360      	adds	r3, #96	; 0x60
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f005 fa0d 	bl	800b1ec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005dd2:	bf00      	nop
 8005dd4:	3720      	adds	r7, #32
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b08a      	sub	sp, #40	; 0x28
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	f003 030f 	and.w	r3, r3, #15
 8005dfa:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	0c5b      	lsrs	r3, r3, #17
 8005e00:	f003 030f 	and.w	r3, r3, #15
 8005e04:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	091b      	lsrs	r3, r3, #4
 8005e0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e0e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d004      	beq.n	8005e20 <HCD_RXQLVL_IRQHandler+0x46>
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	2b05      	cmp	r3, #5
 8005e1a:	f000 80a9 	beq.w	8005f70 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005e1e:	e0aa      	b.n	8005f76 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f000 80a6 	beq.w	8005f74 <HCD_RXQLVL_IRQHandler+0x19a>
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	212c      	movs	r1, #44	; 0x2c
 8005e2e:	fb01 f303 	mul.w	r3, r1, r3
 8005e32:	4413      	add	r3, r2
 8005e34:	3344      	adds	r3, #68	; 0x44
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 809b 	beq.w	8005f74 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	212c      	movs	r1, #44	; 0x2c
 8005e44:	fb01 f303 	mul.w	r3, r1, r3
 8005e48:	4413      	add	r3, r2
 8005e4a:	3350      	adds	r3, #80	; 0x50
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	441a      	add	r2, r3
 8005e52:	6879      	ldr	r1, [r7, #4]
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	202c      	movs	r0, #44	; 0x2c
 8005e58:	fb00 f303 	mul.w	r3, r0, r3
 8005e5c:	440b      	add	r3, r1
 8005e5e:	334c      	adds	r3, #76	; 0x4c
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d87a      	bhi.n	8005f5c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6818      	ldr	r0, [r3, #0]
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	212c      	movs	r1, #44	; 0x2c
 8005e70:	fb01 f303 	mul.w	r3, r1, r3
 8005e74:	4413      	add	r3, r2
 8005e76:	3344      	adds	r3, #68	; 0x44
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	b292      	uxth	r2, r2
 8005e7e:	4619      	mov	r1, r3
 8005e80:	f002 fa68 	bl	8008354 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	212c      	movs	r1, #44	; 0x2c
 8005e8a:	fb01 f303 	mul.w	r3, r1, r3
 8005e8e:	4413      	add	r3, r2
 8005e90:	3344      	adds	r3, #68	; 0x44
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	441a      	add	r2, r3
 8005e98:	6879      	ldr	r1, [r7, #4]
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	202c      	movs	r0, #44	; 0x2c
 8005e9e:	fb00 f303 	mul.w	r3, r0, r3
 8005ea2:	440b      	add	r3, r1
 8005ea4:	3344      	adds	r3, #68	; 0x44
 8005ea6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	212c      	movs	r1, #44	; 0x2c
 8005eae:	fb01 f303 	mul.w	r3, r1, r3
 8005eb2:	4413      	add	r3, r2
 8005eb4:	3350      	adds	r3, #80	; 0x50
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	441a      	add	r2, r3
 8005ebc:	6879      	ldr	r1, [r7, #4]
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	202c      	movs	r0, #44	; 0x2c
 8005ec2:	fb00 f303 	mul.w	r3, r0, r3
 8005ec6:	440b      	add	r3, r1
 8005ec8:	3350      	adds	r3, #80	; 0x50
 8005eca:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	0cdb      	lsrs	r3, r3, #19
 8005edc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ee0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	212c      	movs	r1, #44	; 0x2c
 8005ee8:	fb01 f303 	mul.w	r3, r1, r3
 8005eec:	4413      	add	r3, r2
 8005eee:	3340      	adds	r3, #64	; 0x40
 8005ef0:	881b      	ldrh	r3, [r3, #0]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d13c      	bne.n	8005f74 <HCD_RXQLVL_IRQHandler+0x19a>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d039      	beq.n	8005f74 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f16:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f1e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	212c      	movs	r1, #44	; 0x2c
 8005f38:	fb01 f303 	mul.w	r3, r1, r3
 8005f3c:	4413      	add	r3, r2
 8005f3e:	3354      	adds	r3, #84	; 0x54
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	f083 0301 	eor.w	r3, r3, #1
 8005f46:	b2d8      	uxtb	r0, r3
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	212c      	movs	r1, #44	; 0x2c
 8005f4e:	fb01 f303 	mul.w	r3, r1, r3
 8005f52:	4413      	add	r3, r2
 8005f54:	3354      	adds	r3, #84	; 0x54
 8005f56:	4602      	mov	r2, r0
 8005f58:	701a      	strb	r2, [r3, #0]
      break;
 8005f5a:	e00b      	b.n	8005f74 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	212c      	movs	r1, #44	; 0x2c
 8005f62:	fb01 f303 	mul.w	r3, r1, r3
 8005f66:	4413      	add	r3, r2
 8005f68:	3360      	adds	r3, #96	; 0x60
 8005f6a:	2204      	movs	r2, #4
 8005f6c:	701a      	strb	r2, [r3, #0]
      break;
 8005f6e:	e001      	b.n	8005f74 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005f70:	bf00      	nop
 8005f72:	e000      	b.n	8005f76 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005f74:	bf00      	nop
  }
}
 8005f76:	bf00      	nop
 8005f78:	3728      	adds	r7, #40	; 0x28
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b086      	sub	sp, #24
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005faa:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d10b      	bne.n	8005fce <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d102      	bne.n	8005fc6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f005 f8f7 	bl	800b1b4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	f043 0302 	orr.w	r3, r3, #2
 8005fcc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f003 0308 	and.w	r3, r3, #8
 8005fd4:	2b08      	cmp	r3, #8
 8005fd6:	d132      	bne.n	800603e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f043 0308 	orr.w	r3, r3, #8
 8005fde:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f003 0304 	and.w	r3, r3, #4
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	d126      	bne.n	8006038 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d113      	bne.n	800601a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005ff8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ffc:	d106      	bne.n	800600c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2102      	movs	r1, #2
 8006004:	4618      	mov	r0, r3
 8006006:	f002 fb13 	bl	8008630 <USB_InitFSLSPClkSel>
 800600a:	e011      	b.n	8006030 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2101      	movs	r1, #1
 8006012:	4618      	mov	r0, r3
 8006014:	f002 fb0c 	bl	8008630 <USB_InitFSLSPClkSel>
 8006018:	e00a      	b.n	8006030 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d106      	bne.n	8006030 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006028:	461a      	mov	r2, r3
 800602a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800602e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f005 f8e9 	bl	800b208 <HAL_HCD_PortEnabled_Callback>
 8006036:	e002      	b.n	800603e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f005 f8f3 	bl	800b224 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f003 0320 	and.w	r3, r3, #32
 8006044:	2b20      	cmp	r3, #32
 8006046:	d103      	bne.n	8006050 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	f043 0320 	orr.w	r3, r3, #32
 800604e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006056:	461a      	mov	r2, r3
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	6013      	str	r3, [r2, #0]
}
 800605c:	bf00      	nop
 800605e:	3718      	adds	r7, #24
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e12b      	b.n	80062ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d106      	bne.n	8006090 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7fa fc6c 	bl	8000968 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2224      	movs	r2, #36	; 0x24
 8006094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f022 0201 	bic.w	r2, r2, #1
 80060a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80060c8:	f001 fa20 	bl	800750c <HAL_RCC_GetPCLK1Freq>
 80060cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	4a81      	ldr	r2, [pc, #516]	; (80062d8 <HAL_I2C_Init+0x274>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d807      	bhi.n	80060e8 <HAL_I2C_Init+0x84>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	4a80      	ldr	r2, [pc, #512]	; (80062dc <HAL_I2C_Init+0x278>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	bf94      	ite	ls
 80060e0:	2301      	movls	r3, #1
 80060e2:	2300      	movhi	r3, #0
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	e006      	b.n	80060f6 <HAL_I2C_Init+0x92>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4a7d      	ldr	r2, [pc, #500]	; (80062e0 <HAL_I2C_Init+0x27c>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	bf94      	ite	ls
 80060f0:	2301      	movls	r3, #1
 80060f2:	2300      	movhi	r3, #0
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e0e7      	b.n	80062ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	4a78      	ldr	r2, [pc, #480]	; (80062e4 <HAL_I2C_Init+0x280>)
 8006102:	fba2 2303 	umull	r2, r3, r2, r3
 8006106:	0c9b      	lsrs	r3, r3, #18
 8006108:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	430a      	orrs	r2, r1
 800611c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	4a6a      	ldr	r2, [pc, #424]	; (80062d8 <HAL_I2C_Init+0x274>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d802      	bhi.n	8006138 <HAL_I2C_Init+0xd4>
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	3301      	adds	r3, #1
 8006136:	e009      	b.n	800614c <HAL_I2C_Init+0xe8>
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800613e:	fb02 f303 	mul.w	r3, r2, r3
 8006142:	4a69      	ldr	r2, [pc, #420]	; (80062e8 <HAL_I2C_Init+0x284>)
 8006144:	fba2 2303 	umull	r2, r3, r2, r3
 8006148:	099b      	lsrs	r3, r3, #6
 800614a:	3301      	adds	r3, #1
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	6812      	ldr	r2, [r2, #0]
 8006150:	430b      	orrs	r3, r1
 8006152:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800615e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	495c      	ldr	r1, [pc, #368]	; (80062d8 <HAL_I2C_Init+0x274>)
 8006168:	428b      	cmp	r3, r1
 800616a:	d819      	bhi.n	80061a0 <HAL_I2C_Init+0x13c>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	1e59      	subs	r1, r3, #1
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	fbb1 f3f3 	udiv	r3, r1, r3
 800617a:	1c59      	adds	r1, r3, #1
 800617c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006180:	400b      	ands	r3, r1
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00a      	beq.n	800619c <HAL_I2C_Init+0x138>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	1e59      	subs	r1, r3, #1
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	005b      	lsls	r3, r3, #1
 8006190:	fbb1 f3f3 	udiv	r3, r1, r3
 8006194:	3301      	adds	r3, #1
 8006196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800619a:	e051      	b.n	8006240 <HAL_I2C_Init+0x1dc>
 800619c:	2304      	movs	r3, #4
 800619e:	e04f      	b.n	8006240 <HAL_I2C_Init+0x1dc>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d111      	bne.n	80061cc <HAL_I2C_Init+0x168>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	1e58      	subs	r0, r3, #1
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6859      	ldr	r1, [r3, #4]
 80061b0:	460b      	mov	r3, r1
 80061b2:	005b      	lsls	r3, r3, #1
 80061b4:	440b      	add	r3, r1
 80061b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80061ba:	3301      	adds	r3, #1
 80061bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	bf0c      	ite	eq
 80061c4:	2301      	moveq	r3, #1
 80061c6:	2300      	movne	r3, #0
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	e012      	b.n	80061f2 <HAL_I2C_Init+0x18e>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	1e58      	subs	r0, r3, #1
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6859      	ldr	r1, [r3, #4]
 80061d4:	460b      	mov	r3, r1
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	440b      	add	r3, r1
 80061da:	0099      	lsls	r1, r3, #2
 80061dc:	440b      	add	r3, r1
 80061de:	fbb0 f3f3 	udiv	r3, r0, r3
 80061e2:	3301      	adds	r3, #1
 80061e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	bf0c      	ite	eq
 80061ec:	2301      	moveq	r3, #1
 80061ee:	2300      	movne	r3, #0
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <HAL_I2C_Init+0x196>
 80061f6:	2301      	movs	r3, #1
 80061f8:	e022      	b.n	8006240 <HAL_I2C_Init+0x1dc>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10e      	bne.n	8006220 <HAL_I2C_Init+0x1bc>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	1e58      	subs	r0, r3, #1
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6859      	ldr	r1, [r3, #4]
 800620a:	460b      	mov	r3, r1
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	440b      	add	r3, r1
 8006210:	fbb0 f3f3 	udiv	r3, r0, r3
 8006214:	3301      	adds	r3, #1
 8006216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800621a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800621e:	e00f      	b.n	8006240 <HAL_I2C_Init+0x1dc>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	1e58      	subs	r0, r3, #1
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6859      	ldr	r1, [r3, #4]
 8006228:	460b      	mov	r3, r1
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	440b      	add	r3, r1
 800622e:	0099      	lsls	r1, r3, #2
 8006230:	440b      	add	r3, r1
 8006232:	fbb0 f3f3 	udiv	r3, r0, r3
 8006236:	3301      	adds	r3, #1
 8006238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800623c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006240:	6879      	ldr	r1, [r7, #4]
 8006242:	6809      	ldr	r1, [r1, #0]
 8006244:	4313      	orrs	r3, r2
 8006246:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	69da      	ldr	r2, [r3, #28]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	431a      	orrs	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	430a      	orrs	r2, r1
 8006262:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800626e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	6911      	ldr	r1, [r2, #16]
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	68d2      	ldr	r2, [r2, #12]
 800627a:	4311      	orrs	r1, r2
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	6812      	ldr	r2, [r2, #0]
 8006280:	430b      	orrs	r3, r1
 8006282:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	695a      	ldr	r2, [r3, #20]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	431a      	orrs	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	430a      	orrs	r2, r1
 800629e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f042 0201 	orr.w	r2, r2, #1
 80062ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2220      	movs	r2, #32
 80062ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	000186a0 	.word	0x000186a0
 80062dc:	001e847f 	.word	0x001e847f
 80062e0:	003d08ff 	.word	0x003d08ff
 80062e4:	431bde83 	.word	0x431bde83
 80062e8:	10624dd3 	.word	0x10624dd3

080062ec <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b088      	sub	sp, #32
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e128      	b.n	8006550 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d109      	bne.n	800631e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a90      	ldr	r2, [pc, #576]	; (8006558 <HAL_I2S_Init+0x26c>)
 8006316:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f7fa fb95 	bl	8000a48 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2202      	movs	r2, #2
 8006322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	6812      	ldr	r2, [r2, #0]
 8006330:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006334:	f023 030f 	bic.w	r3, r3, #15
 8006338:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2202      	movs	r2, #2
 8006340:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	2b02      	cmp	r3, #2
 8006348:	d060      	beq.n	800640c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d102      	bne.n	8006358 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006352:	2310      	movs	r3, #16
 8006354:	617b      	str	r3, [r7, #20]
 8006356:	e001      	b.n	800635c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006358:	2320      	movs	r3, #32
 800635a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	2b20      	cmp	r3, #32
 8006362:	d802      	bhi.n	800636a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	005b      	lsls	r3, r3, #1
 8006368:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800636a:	2001      	movs	r0, #1
 800636c:	f001 f9d8 	bl	8007720 <HAL_RCCEx_GetPeriphCLKFreq>
 8006370:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800637a:	d125      	bne.n	80063c8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d010      	beq.n	80063a6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	fbb2 f2f3 	udiv	r2, r2, r3
 800638e:	4613      	mov	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	005b      	lsls	r3, r3, #1
 8006396:	461a      	mov	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a0:	3305      	adds	r3, #5
 80063a2:	613b      	str	r3, [r7, #16]
 80063a4:	e01f      	b.n	80063e6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	00db      	lsls	r3, r3, #3
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80063b0:	4613      	mov	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	005b      	lsls	r3, r3, #1
 80063b8:	461a      	mov	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c2:	3305      	adds	r3, #5
 80063c4:	613b      	str	r3, [r7, #16]
 80063c6:	e00e      	b.n	80063e6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80063d0:	4613      	mov	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	005b      	lsls	r3, r3, #1
 80063d8:	461a      	mov	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e2:	3305      	adds	r3, #5
 80063e4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	4a5c      	ldr	r2, [pc, #368]	; (800655c <HAL_I2S_Init+0x270>)
 80063ea:	fba2 2303 	umull	r2, r3, r2, r3
 80063ee:	08db      	lsrs	r3, r3, #3
 80063f0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	085b      	lsrs	r3, r3, #1
 8006402:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	021b      	lsls	r3, r3, #8
 8006408:	61bb      	str	r3, [r7, #24]
 800640a:	e003      	b.n	8006414 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800640c:	2302      	movs	r3, #2
 800640e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006410:	2300      	movs	r3, #0
 8006412:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d902      	bls.n	8006420 <HAL_I2S_Init+0x134>
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	2bff      	cmp	r3, #255	; 0xff
 800641e:	d907      	bls.n	8006430 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006424:	f043 0210 	orr.w	r2, r3, #16
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e08f      	b.n	8006550 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	691a      	ldr	r2, [r3, #16]
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	ea42 0103 	orr.w	r1, r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	69fa      	ldr	r2, [r7, #28]
 8006440:	430a      	orrs	r2, r1
 8006442:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800644e:	f023 030f 	bic.w	r3, r3, #15
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	6851      	ldr	r1, [r2, #4]
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	6892      	ldr	r2, [r2, #8]
 800645a:	4311      	orrs	r1, r2
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	68d2      	ldr	r2, [r2, #12]
 8006460:	4311      	orrs	r1, r2
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	6992      	ldr	r2, [r2, #24]
 8006466:	430a      	orrs	r2, r1
 8006468:	431a      	orrs	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006472:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d161      	bne.n	8006540 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a38      	ldr	r2, [pc, #224]	; (8006560 <HAL_I2S_Init+0x274>)
 8006480:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a37      	ldr	r2, [pc, #220]	; (8006564 <HAL_I2S_Init+0x278>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d101      	bne.n	8006490 <HAL_I2S_Init+0x1a4>
 800648c:	4b36      	ldr	r3, [pc, #216]	; (8006568 <HAL_I2S_Init+0x27c>)
 800648e:	e001      	b.n	8006494 <HAL_I2S_Init+0x1a8>
 8006490:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	6812      	ldr	r2, [r2, #0]
 800649a:	4932      	ldr	r1, [pc, #200]	; (8006564 <HAL_I2S_Init+0x278>)
 800649c:	428a      	cmp	r2, r1
 800649e:	d101      	bne.n	80064a4 <HAL_I2S_Init+0x1b8>
 80064a0:	4a31      	ldr	r2, [pc, #196]	; (8006568 <HAL_I2S_Init+0x27c>)
 80064a2:	e001      	b.n	80064a8 <HAL_I2S_Init+0x1bc>
 80064a4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80064a8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80064ac:	f023 030f 	bic.w	r3, r3, #15
 80064b0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a2b      	ldr	r2, [pc, #172]	; (8006564 <HAL_I2S_Init+0x278>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d101      	bne.n	80064c0 <HAL_I2S_Init+0x1d4>
 80064bc:	4b2a      	ldr	r3, [pc, #168]	; (8006568 <HAL_I2S_Init+0x27c>)
 80064be:	e001      	b.n	80064c4 <HAL_I2S_Init+0x1d8>
 80064c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064c4:	2202      	movs	r2, #2
 80064c6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a25      	ldr	r2, [pc, #148]	; (8006564 <HAL_I2S_Init+0x278>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d101      	bne.n	80064d6 <HAL_I2S_Init+0x1ea>
 80064d2:	4b25      	ldr	r3, [pc, #148]	; (8006568 <HAL_I2S_Init+0x27c>)
 80064d4:	e001      	b.n	80064da <HAL_I2S_Init+0x1ee>
 80064d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064da:	69db      	ldr	r3, [r3, #28]
 80064dc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064e6:	d003      	beq.n	80064f0 <HAL_I2S_Init+0x204>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d103      	bne.n	80064f8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80064f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064f4:	613b      	str	r3, [r7, #16]
 80064f6:	e001      	b.n	80064fc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80064f8:	2300      	movs	r3, #0
 80064fa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006506:	4313      	orrs	r3, r2
 8006508:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006510:	4313      	orrs	r3, r2
 8006512:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800651a:	4313      	orrs	r3, r2
 800651c:	b29a      	uxth	r2, r3
 800651e:	897b      	ldrh	r3, [r7, #10]
 8006520:	4313      	orrs	r3, r2
 8006522:	b29b      	uxth	r3, r3
 8006524:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006528:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a0d      	ldr	r2, [pc, #52]	; (8006564 <HAL_I2S_Init+0x278>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d101      	bne.n	8006538 <HAL_I2S_Init+0x24c>
 8006534:	4b0c      	ldr	r3, [pc, #48]	; (8006568 <HAL_I2S_Init+0x27c>)
 8006536:	e001      	b.n	800653c <HAL_I2S_Init+0x250>
 8006538:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800653c:	897a      	ldrh	r2, [r7, #10]
 800653e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3720      	adds	r7, #32
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	08006663 	.word	0x08006663
 800655c:	cccccccd 	.word	0xcccccccd
 8006560:	08006779 	.word	0x08006779
 8006564:	40003800 	.word	0x40003800
 8006568:	40003400 	.word	0x40003400

0800656c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b4:	881a      	ldrh	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c0:	1c9a      	adds	r2, r3, #2
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	3b01      	subs	r3, #1
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d8:	b29b      	uxth	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10e      	bne.n	80065fc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065ec:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7ff ffb8 	bl	800656c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80065fc:	bf00      	nop
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68da      	ldr	r2, [r3, #12]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006616:	b292      	uxth	r2, r2
 8006618:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661e:	1c9a      	adds	r2, r3, #2
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006628:	b29b      	uxth	r3, r3
 800662a:	3b01      	subs	r3, #1
 800662c:	b29a      	uxth	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006636:	b29b      	uxth	r3, r3
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10e      	bne.n	800665a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685a      	ldr	r2, [r3, #4]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800664a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f7ff ff93 	bl	8006580 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800665a:	bf00      	nop
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b086      	sub	sp, #24
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b04      	cmp	r3, #4
 800667c:	d13a      	bne.n	80066f4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b01      	cmp	r3, #1
 8006686:	d109      	bne.n	800669c <I2S_IRQHandler+0x3a>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006692:	2b40      	cmp	r3, #64	; 0x40
 8006694:	d102      	bne.n	800669c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7ff ffb4 	bl	8006604 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a2:	2b40      	cmp	r3, #64	; 0x40
 80066a4:	d126      	bne.n	80066f4 <I2S_IRQHandler+0x92>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f003 0320 	and.w	r3, r3, #32
 80066b0:	2b20      	cmp	r3, #32
 80066b2:	d11f      	bne.n	80066f4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80066c2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80066c4:	2300      	movs	r3, #0
 80066c6:	613b      	str	r3, [r7, #16]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	613b      	str	r3, [r7, #16]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	613b      	str	r3, [r7, #16]
 80066d8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e6:	f043 0202 	orr.w	r2, r3, #2
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7ff ff50 	bl	8006594 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b03      	cmp	r3, #3
 80066fe:	d136      	bne.n	800676e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b02      	cmp	r3, #2
 8006708:	d109      	bne.n	800671e <I2S_IRQHandler+0xbc>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006714:	2b80      	cmp	r3, #128	; 0x80
 8006716:	d102      	bne.n	800671e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7ff ff45 	bl	80065a8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f003 0308 	and.w	r3, r3, #8
 8006724:	2b08      	cmp	r3, #8
 8006726:	d122      	bne.n	800676e <I2S_IRQHandler+0x10c>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f003 0320 	and.w	r3, r3, #32
 8006732:	2b20      	cmp	r3, #32
 8006734:	d11b      	bne.n	800676e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006744:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006746:	2300      	movs	r3, #0
 8006748:	60fb      	str	r3, [r7, #12]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	60fb      	str	r3, [r7, #12]
 8006752:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006760:	f043 0204 	orr.w	r2, r3, #4
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f7ff ff13 	bl	8006594 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800676e:	bf00      	nop
 8006770:	3718      	adds	r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
	...

08006778 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b088      	sub	sp, #32
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a92      	ldr	r2, [pc, #584]	; (80069d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d101      	bne.n	8006796 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006792:	4b92      	ldr	r3, [pc, #584]	; (80069dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006794:	e001      	b.n	800679a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006796:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a8b      	ldr	r2, [pc, #556]	; (80069d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d101      	bne.n	80067b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80067b0:	4b8a      	ldr	r3, [pc, #552]	; (80069dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80067b2:	e001      	b.n	80067b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80067b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067c4:	d004      	beq.n	80067d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f040 8099 	bne.w	8006902 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d107      	bne.n	80067ea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d002      	beq.n	80067ea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f925 	bl	8006a34 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d107      	bne.n	8006804 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d002      	beq.n	8006804 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f9c8 	bl	8006b94 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680a:	2b40      	cmp	r3, #64	; 0x40
 800680c:	d13a      	bne.n	8006884 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f003 0320 	and.w	r3, r3, #32
 8006814:	2b00      	cmp	r3, #0
 8006816:	d035      	beq.n	8006884 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a6e      	ldr	r2, [pc, #440]	; (80069d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d101      	bne.n	8006826 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006822:	4b6e      	ldr	r3, [pc, #440]	; (80069dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006824:	e001      	b.n	800682a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006826:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4969      	ldr	r1, [pc, #420]	; (80069d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006832:	428b      	cmp	r3, r1
 8006834:	d101      	bne.n	800683a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006836:	4b69      	ldr	r3, [pc, #420]	; (80069dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006838:	e001      	b.n	800683e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800683a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800683e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006842:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685a      	ldr	r2, [r3, #4]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006852:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006854:	2300      	movs	r3, #0
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	60fb      	str	r3, [r7, #12]
 8006868:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006876:	f043 0202 	orr.w	r2, r3, #2
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7ff fe88 	bl	8006594 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	f003 0308 	and.w	r3, r3, #8
 800688a:	2b08      	cmp	r3, #8
 800688c:	f040 80c3 	bne.w	8006a16 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f003 0320 	and.w	r3, r3, #32
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 80bd 	beq.w	8006a16 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80068aa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a49      	ldr	r2, [pc, #292]	; (80069d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d101      	bne.n	80068ba <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80068b6:	4b49      	ldr	r3, [pc, #292]	; (80069dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80068b8:	e001      	b.n	80068be <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80068ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4944      	ldr	r1, [pc, #272]	; (80069d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80068c6:	428b      	cmp	r3, r1
 80068c8:	d101      	bne.n	80068ce <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80068ca:	4b44      	ldr	r3, [pc, #272]	; (80069dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80068cc:	e001      	b.n	80068d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80068ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80068d6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80068d8:	2300      	movs	r3, #0
 80068da:	60bb      	str	r3, [r7, #8]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	60bb      	str	r3, [r7, #8]
 80068e4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f2:	f043 0204 	orr.w	r2, r3, #4
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7ff fe4a 	bl	8006594 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006900:	e089      	b.n	8006a16 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	f003 0302 	and.w	r3, r3, #2
 8006908:	2b02      	cmp	r3, #2
 800690a:	d107      	bne.n	800691c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006912:	2b00      	cmp	r3, #0
 8006914:	d002      	beq.n	800691c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f8be 	bl	8006a98 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b01      	cmp	r3, #1
 8006924:	d107      	bne.n	8006936 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f8fd 	bl	8006b30 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693c:	2b40      	cmp	r3, #64	; 0x40
 800693e:	d12f      	bne.n	80069a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f003 0320 	and.w	r3, r3, #32
 8006946:	2b00      	cmp	r3, #0
 8006948:	d02a      	beq.n	80069a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006958:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a1e      	ldr	r2, [pc, #120]	; (80069d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d101      	bne.n	8006968 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006964:	4b1d      	ldr	r3, [pc, #116]	; (80069dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006966:	e001      	b.n	800696c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006968:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4919      	ldr	r1, [pc, #100]	; (80069d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006974:	428b      	cmp	r3, r1
 8006976:	d101      	bne.n	800697c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006978:	4b18      	ldr	r3, [pc, #96]	; (80069dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800697a:	e001      	b.n	8006980 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800697c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006980:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006984:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006992:	f043 0202 	orr.w	r2, r3, #2
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7ff fdfa 	bl	8006594 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	f003 0308 	and.w	r3, r3, #8
 80069a6:	2b08      	cmp	r3, #8
 80069a8:	d136      	bne.n	8006a18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	f003 0320 	and.w	r3, r3, #32
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d031      	beq.n	8006a18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a07      	ldr	r2, [pc, #28]	; (80069d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d101      	bne.n	80069c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80069be:	4b07      	ldr	r3, [pc, #28]	; (80069dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80069c0:	e001      	b.n	80069c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80069c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069c6:	685a      	ldr	r2, [r3, #4]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4902      	ldr	r1, [pc, #8]	; (80069d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80069ce:	428b      	cmp	r3, r1
 80069d0:	d106      	bne.n	80069e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80069d2:	4b02      	ldr	r3, [pc, #8]	; (80069dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80069d4:	e006      	b.n	80069e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80069d6:	bf00      	nop
 80069d8:	40003800 	.word	0x40003800
 80069dc:	40003400 	.word	0x40003400
 80069e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80069e8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80069f8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a06:	f043 0204 	orr.w	r2, r3, #4
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f7ff fdc0 	bl	8006594 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a14:	e000      	b.n	8006a18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006a16:	bf00      	nop
}
 8006a18:	bf00      	nop
 8006a1a:	3720      	adds	r7, #32
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a40:	1c99      	adds	r1, r3, #2
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	6251      	str	r1, [r2, #36]	; 0x24
 8006a46:	881a      	ldrh	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	3b01      	subs	r3, #1
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d113      	bne.n	8006a8e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a74:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d106      	bne.n	8006a8e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f7ff ffc9 	bl	8006a20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a8e:	bf00      	nop
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
	...

08006a98 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa4:	1c99      	adds	r1, r3, #2
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	6251      	str	r1, [r2, #36]	; 0x24
 8006aaa:	8819      	ldrh	r1, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a1d      	ldr	r2, [pc, #116]	; (8006b28 <I2SEx_TxISR_I2SExt+0x90>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d101      	bne.n	8006aba <I2SEx_TxISR_I2SExt+0x22>
 8006ab6:	4b1d      	ldr	r3, [pc, #116]	; (8006b2c <I2SEx_TxISR_I2SExt+0x94>)
 8006ab8:	e001      	b.n	8006abe <I2SEx_TxISR_I2SExt+0x26>
 8006aba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006abe:	460a      	mov	r2, r1
 8006ac0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d121      	bne.n	8006b1e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a12      	ldr	r2, [pc, #72]	; (8006b28 <I2SEx_TxISR_I2SExt+0x90>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d101      	bne.n	8006ae8 <I2SEx_TxISR_I2SExt+0x50>
 8006ae4:	4b11      	ldr	r3, [pc, #68]	; (8006b2c <I2SEx_TxISR_I2SExt+0x94>)
 8006ae6:	e001      	b.n	8006aec <I2SEx_TxISR_I2SExt+0x54>
 8006ae8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006aec:	685a      	ldr	r2, [r3, #4]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	490d      	ldr	r1, [pc, #52]	; (8006b28 <I2SEx_TxISR_I2SExt+0x90>)
 8006af4:	428b      	cmp	r3, r1
 8006af6:	d101      	bne.n	8006afc <I2SEx_TxISR_I2SExt+0x64>
 8006af8:	4b0c      	ldr	r3, [pc, #48]	; (8006b2c <I2SEx_TxISR_I2SExt+0x94>)
 8006afa:	e001      	b.n	8006b00 <I2SEx_TxISR_I2SExt+0x68>
 8006afc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b04:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d106      	bne.n	8006b1e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f7ff ff81 	bl	8006a20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b1e:	bf00      	nop
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	40003800 	.word	0x40003800
 8006b2c:	40003400 	.word	0x40003400

08006b30 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68d8      	ldr	r0, [r3, #12]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b42:	1c99      	adds	r1, r3, #2
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006b48:	b282      	uxth	r2, r0
 8006b4a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	3b01      	subs	r3, #1
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d113      	bne.n	8006b8c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685a      	ldr	r2, [r3, #4]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006b72:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d106      	bne.n	8006b8c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7ff ff4a 	bl	8006a20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b8c:	bf00      	nop
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a20      	ldr	r2, [pc, #128]	; (8006c24 <I2SEx_RxISR_I2SExt+0x90>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d101      	bne.n	8006baa <I2SEx_RxISR_I2SExt+0x16>
 8006ba6:	4b20      	ldr	r3, [pc, #128]	; (8006c28 <I2SEx_RxISR_I2SExt+0x94>)
 8006ba8:	e001      	b.n	8006bae <I2SEx_RxISR_I2SExt+0x1a>
 8006baa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bae:	68d8      	ldr	r0, [r3, #12]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb4:	1c99      	adds	r1, r3, #2
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006bba:	b282      	uxth	r2, r0
 8006bbc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d121      	bne.n	8006c1a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a12      	ldr	r2, [pc, #72]	; (8006c24 <I2SEx_RxISR_I2SExt+0x90>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d101      	bne.n	8006be4 <I2SEx_RxISR_I2SExt+0x50>
 8006be0:	4b11      	ldr	r3, [pc, #68]	; (8006c28 <I2SEx_RxISR_I2SExt+0x94>)
 8006be2:	e001      	b.n	8006be8 <I2SEx_RxISR_I2SExt+0x54>
 8006be4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006be8:	685a      	ldr	r2, [r3, #4]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	490d      	ldr	r1, [pc, #52]	; (8006c24 <I2SEx_RxISR_I2SExt+0x90>)
 8006bf0:	428b      	cmp	r3, r1
 8006bf2:	d101      	bne.n	8006bf8 <I2SEx_RxISR_I2SExt+0x64>
 8006bf4:	4b0c      	ldr	r3, [pc, #48]	; (8006c28 <I2SEx_RxISR_I2SExt+0x94>)
 8006bf6:	e001      	b.n	8006bfc <I2SEx_RxISR_I2SExt+0x68>
 8006bf8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bfc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006c00:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d106      	bne.n	8006c1a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7ff ff03 	bl	8006a20 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c1a:	bf00      	nop
 8006c1c:	3708      	adds	r7, #8
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	40003800 	.word	0x40003800
 8006c28:	40003400 	.word	0x40003400

08006c2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d101      	bne.n	8006c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e267      	b.n	800710e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d075      	beq.n	8006d36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c4a:	4b88      	ldr	r3, [pc, #544]	; (8006e6c <HAL_RCC_OscConfig+0x240>)
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f003 030c 	and.w	r3, r3, #12
 8006c52:	2b04      	cmp	r3, #4
 8006c54:	d00c      	beq.n	8006c70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c56:	4b85      	ldr	r3, [pc, #532]	; (8006e6c <HAL_RCC_OscConfig+0x240>)
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c5e:	2b08      	cmp	r3, #8
 8006c60:	d112      	bne.n	8006c88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c62:	4b82      	ldr	r3, [pc, #520]	; (8006e6c <HAL_RCC_OscConfig+0x240>)
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c6e:	d10b      	bne.n	8006c88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c70:	4b7e      	ldr	r3, [pc, #504]	; (8006e6c <HAL_RCC_OscConfig+0x240>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d05b      	beq.n	8006d34 <HAL_RCC_OscConfig+0x108>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d157      	bne.n	8006d34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e242      	b.n	800710e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c90:	d106      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x74>
 8006c92:	4b76      	ldr	r3, [pc, #472]	; (8006e6c <HAL_RCC_OscConfig+0x240>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a75      	ldr	r2, [pc, #468]	; (8006e6c <HAL_RCC_OscConfig+0x240>)
 8006c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c9c:	6013      	str	r3, [r2, #0]
 8006c9e:	e01d      	b.n	8006cdc <HAL_RCC_OscConfig+0xb0>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ca8:	d10c      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x98>
 8006caa:	4b70      	ldr	r3, [pc, #448]	; (8006e6c <HAL_RCC_OscConfig+0x240>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a6f      	ldr	r2, [pc, #444]	; (8006e6c <HAL_RCC_OscConfig+0x240>)
 8006cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cb4:	6013      	str	r3, [r2, #0]
 8006cb6:	4b6d      	ldr	r3, [pc, #436]	; (8006e6c <HAL_RCC_OscConfig+0x240>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a6c      	ldr	r2, [pc, #432]	; (8006e6c <HAL_RCC_OscConfig+0x240>)
 8006cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cc0:	6013      	str	r3, [r2, #0]
 8006cc2:	e00b      	b.n	8006cdc <HAL_RCC_OscConfig+0xb0>
 8006cc4:	4b69      	ldr	r3, [pc, #420]	; (8006e6c <HAL_RCC_OscConfig+0x240>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a68      	ldr	r2, [pc, #416]	; (8006e6c <HAL_RCC_OscConfig+0x240>)
 8006cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cce:	6013      	str	r3, [r2, #0]
 8006cd0:	4b66      	ldr	r3, [pc, #408]	; (8006e6c <HAL_RCC_OscConfig+0x240>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a65      	ldr	r2, [pc, #404]	; (8006e6c <HAL_RCC_OscConfig+0x240>)
 8006cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d013      	beq.n	8006d0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ce4:	f7fd f9c0 	bl	8004068 <HAL_GetTick>
 8006ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cea:	e008      	b.n	8006cfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006cec:	f7fd f9bc 	bl	8004068 <HAL_GetTick>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	2b64      	cmp	r3, #100	; 0x64
 8006cf8:	d901      	bls.n	8006cfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e207      	b.n	800710e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cfe:	4b5b      	ldr	r3, [pc, #364]	; (8006e6c <HAL_RCC_OscConfig+0x240>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d0f0      	beq.n	8006cec <HAL_RCC_OscConfig+0xc0>
 8006d0a:	e014      	b.n	8006d36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d0c:	f7fd f9ac 	bl	8004068 <HAL_GetTick>
 8006d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d12:	e008      	b.n	8006d26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d14:	f7fd f9a8 	bl	8004068 <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	2b64      	cmp	r3, #100	; 0x64
 8006d20:	d901      	bls.n	8006d26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e1f3      	b.n	800710e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d26:	4b51      	ldr	r3, [pc, #324]	; (8006e6c <HAL_RCC_OscConfig+0x240>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1f0      	bne.n	8006d14 <HAL_RCC_OscConfig+0xe8>
 8006d32:	e000      	b.n	8006d36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0302 	and.w	r3, r3, #2
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d063      	beq.n	8006e0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d42:	4b4a      	ldr	r3, [pc, #296]	; (8006e6c <HAL_RCC_OscConfig+0x240>)
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f003 030c 	and.w	r3, r3, #12
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00b      	beq.n	8006d66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d4e:	4b47      	ldr	r3, [pc, #284]	; (8006e6c <HAL_RCC_OscConfig+0x240>)
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d56:	2b08      	cmp	r3, #8
 8006d58:	d11c      	bne.n	8006d94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d5a:	4b44      	ldr	r3, [pc, #272]	; (8006e6c <HAL_RCC_OscConfig+0x240>)
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d116      	bne.n	8006d94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d66:	4b41      	ldr	r3, [pc, #260]	; (8006e6c <HAL_RCC_OscConfig+0x240>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d005      	beq.n	8006d7e <HAL_RCC_OscConfig+0x152>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d001      	beq.n	8006d7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e1c7      	b.n	800710e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d7e:	4b3b      	ldr	r3, [pc, #236]	; (8006e6c <HAL_RCC_OscConfig+0x240>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	00db      	lsls	r3, r3, #3
 8006d8c:	4937      	ldr	r1, [pc, #220]	; (8006e6c <HAL_RCC_OscConfig+0x240>)
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d92:	e03a      	b.n	8006e0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d020      	beq.n	8006dde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d9c:	4b34      	ldr	r3, [pc, #208]	; (8006e70 <HAL_RCC_OscConfig+0x244>)
 8006d9e:	2201      	movs	r2, #1
 8006da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da2:	f7fd f961 	bl	8004068 <HAL_GetTick>
 8006da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006da8:	e008      	b.n	8006dbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006daa:	f7fd f95d 	bl	8004068 <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d901      	bls.n	8006dbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e1a8      	b.n	800710e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dbc:	4b2b      	ldr	r3, [pc, #172]	; (8006e6c <HAL_RCC_OscConfig+0x240>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0302 	and.w	r3, r3, #2
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d0f0      	beq.n	8006daa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dc8:	4b28      	ldr	r3, [pc, #160]	; (8006e6c <HAL_RCC_OscConfig+0x240>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	00db      	lsls	r3, r3, #3
 8006dd6:	4925      	ldr	r1, [pc, #148]	; (8006e6c <HAL_RCC_OscConfig+0x240>)
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	600b      	str	r3, [r1, #0]
 8006ddc:	e015      	b.n	8006e0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006dde:	4b24      	ldr	r3, [pc, #144]	; (8006e70 <HAL_RCC_OscConfig+0x244>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006de4:	f7fd f940 	bl	8004068 <HAL_GetTick>
 8006de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dea:	e008      	b.n	8006dfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006dec:	f7fd f93c 	bl	8004068 <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d901      	bls.n	8006dfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e187      	b.n	800710e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dfe:	4b1b      	ldr	r3, [pc, #108]	; (8006e6c <HAL_RCC_OscConfig+0x240>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0302 	and.w	r3, r3, #2
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1f0      	bne.n	8006dec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0308 	and.w	r3, r3, #8
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d036      	beq.n	8006e84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d016      	beq.n	8006e4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e1e:	4b15      	ldr	r3, [pc, #84]	; (8006e74 <HAL_RCC_OscConfig+0x248>)
 8006e20:	2201      	movs	r2, #1
 8006e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e24:	f7fd f920 	bl	8004068 <HAL_GetTick>
 8006e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e2a:	e008      	b.n	8006e3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e2c:	f7fd f91c 	bl	8004068 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d901      	bls.n	8006e3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e167      	b.n	800710e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e3e:	4b0b      	ldr	r3, [pc, #44]	; (8006e6c <HAL_RCC_OscConfig+0x240>)
 8006e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e42:	f003 0302 	and.w	r3, r3, #2
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d0f0      	beq.n	8006e2c <HAL_RCC_OscConfig+0x200>
 8006e4a:	e01b      	b.n	8006e84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e4c:	4b09      	ldr	r3, [pc, #36]	; (8006e74 <HAL_RCC_OscConfig+0x248>)
 8006e4e:	2200      	movs	r2, #0
 8006e50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e52:	f7fd f909 	bl	8004068 <HAL_GetTick>
 8006e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e58:	e00e      	b.n	8006e78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e5a:	f7fd f905 	bl	8004068 <HAL_GetTick>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d907      	bls.n	8006e78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e150      	b.n	800710e <HAL_RCC_OscConfig+0x4e2>
 8006e6c:	40023800 	.word	0x40023800
 8006e70:	42470000 	.word	0x42470000
 8006e74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e78:	4b88      	ldr	r3, [pc, #544]	; (800709c <HAL_RCC_OscConfig+0x470>)
 8006e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e7c:	f003 0302 	and.w	r3, r3, #2
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1ea      	bne.n	8006e5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0304 	and.w	r3, r3, #4
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f000 8097 	beq.w	8006fc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e92:	2300      	movs	r3, #0
 8006e94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e96:	4b81      	ldr	r3, [pc, #516]	; (800709c <HAL_RCC_OscConfig+0x470>)
 8006e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d10f      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	60bb      	str	r3, [r7, #8]
 8006ea6:	4b7d      	ldr	r3, [pc, #500]	; (800709c <HAL_RCC_OscConfig+0x470>)
 8006ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eaa:	4a7c      	ldr	r2, [pc, #496]	; (800709c <HAL_RCC_OscConfig+0x470>)
 8006eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8006eb2:	4b7a      	ldr	r3, [pc, #488]	; (800709c <HAL_RCC_OscConfig+0x470>)
 8006eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eba:	60bb      	str	r3, [r7, #8]
 8006ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ec2:	4b77      	ldr	r3, [pc, #476]	; (80070a0 <HAL_RCC_OscConfig+0x474>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d118      	bne.n	8006f00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ece:	4b74      	ldr	r3, [pc, #464]	; (80070a0 <HAL_RCC_OscConfig+0x474>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a73      	ldr	r2, [pc, #460]	; (80070a0 <HAL_RCC_OscConfig+0x474>)
 8006ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006eda:	f7fd f8c5 	bl	8004068 <HAL_GetTick>
 8006ede:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ee0:	e008      	b.n	8006ef4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ee2:	f7fd f8c1 	bl	8004068 <HAL_GetTick>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d901      	bls.n	8006ef4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	e10c      	b.n	800710e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ef4:	4b6a      	ldr	r3, [pc, #424]	; (80070a0 <HAL_RCC_OscConfig+0x474>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d0f0      	beq.n	8006ee2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d106      	bne.n	8006f16 <HAL_RCC_OscConfig+0x2ea>
 8006f08:	4b64      	ldr	r3, [pc, #400]	; (800709c <HAL_RCC_OscConfig+0x470>)
 8006f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f0c:	4a63      	ldr	r2, [pc, #396]	; (800709c <HAL_RCC_OscConfig+0x470>)
 8006f0e:	f043 0301 	orr.w	r3, r3, #1
 8006f12:	6713      	str	r3, [r2, #112]	; 0x70
 8006f14:	e01c      	b.n	8006f50 <HAL_RCC_OscConfig+0x324>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	2b05      	cmp	r3, #5
 8006f1c:	d10c      	bne.n	8006f38 <HAL_RCC_OscConfig+0x30c>
 8006f1e:	4b5f      	ldr	r3, [pc, #380]	; (800709c <HAL_RCC_OscConfig+0x470>)
 8006f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f22:	4a5e      	ldr	r2, [pc, #376]	; (800709c <HAL_RCC_OscConfig+0x470>)
 8006f24:	f043 0304 	orr.w	r3, r3, #4
 8006f28:	6713      	str	r3, [r2, #112]	; 0x70
 8006f2a:	4b5c      	ldr	r3, [pc, #368]	; (800709c <HAL_RCC_OscConfig+0x470>)
 8006f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f2e:	4a5b      	ldr	r2, [pc, #364]	; (800709c <HAL_RCC_OscConfig+0x470>)
 8006f30:	f043 0301 	orr.w	r3, r3, #1
 8006f34:	6713      	str	r3, [r2, #112]	; 0x70
 8006f36:	e00b      	b.n	8006f50 <HAL_RCC_OscConfig+0x324>
 8006f38:	4b58      	ldr	r3, [pc, #352]	; (800709c <HAL_RCC_OscConfig+0x470>)
 8006f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f3c:	4a57      	ldr	r2, [pc, #348]	; (800709c <HAL_RCC_OscConfig+0x470>)
 8006f3e:	f023 0301 	bic.w	r3, r3, #1
 8006f42:	6713      	str	r3, [r2, #112]	; 0x70
 8006f44:	4b55      	ldr	r3, [pc, #340]	; (800709c <HAL_RCC_OscConfig+0x470>)
 8006f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f48:	4a54      	ldr	r2, [pc, #336]	; (800709c <HAL_RCC_OscConfig+0x470>)
 8006f4a:	f023 0304 	bic.w	r3, r3, #4
 8006f4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d015      	beq.n	8006f84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f58:	f7fd f886 	bl	8004068 <HAL_GetTick>
 8006f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f5e:	e00a      	b.n	8006f76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f60:	f7fd f882 	bl	8004068 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d901      	bls.n	8006f76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e0cb      	b.n	800710e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f76:	4b49      	ldr	r3, [pc, #292]	; (800709c <HAL_RCC_OscConfig+0x470>)
 8006f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f7a:	f003 0302 	and.w	r3, r3, #2
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d0ee      	beq.n	8006f60 <HAL_RCC_OscConfig+0x334>
 8006f82:	e014      	b.n	8006fae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f84:	f7fd f870 	bl	8004068 <HAL_GetTick>
 8006f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f8a:	e00a      	b.n	8006fa2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f8c:	f7fd f86c 	bl	8004068 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d901      	bls.n	8006fa2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e0b5      	b.n	800710e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fa2:	4b3e      	ldr	r3, [pc, #248]	; (800709c <HAL_RCC_OscConfig+0x470>)
 8006fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa6:	f003 0302 	and.w	r3, r3, #2
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1ee      	bne.n	8006f8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006fae:	7dfb      	ldrb	r3, [r7, #23]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d105      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fb4:	4b39      	ldr	r3, [pc, #228]	; (800709c <HAL_RCC_OscConfig+0x470>)
 8006fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb8:	4a38      	ldr	r2, [pc, #224]	; (800709c <HAL_RCC_OscConfig+0x470>)
 8006fba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 80a1 	beq.w	800710c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006fca:	4b34      	ldr	r3, [pc, #208]	; (800709c <HAL_RCC_OscConfig+0x470>)
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f003 030c 	and.w	r3, r3, #12
 8006fd2:	2b08      	cmp	r3, #8
 8006fd4:	d05c      	beq.n	8007090 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d141      	bne.n	8007062 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fde:	4b31      	ldr	r3, [pc, #196]	; (80070a4 <HAL_RCC_OscConfig+0x478>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fe4:	f7fd f840 	bl	8004068 <HAL_GetTick>
 8006fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fea:	e008      	b.n	8006ffe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fec:	f7fd f83c 	bl	8004068 <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e087      	b.n	800710e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ffe:	4b27      	ldr	r3, [pc, #156]	; (800709c <HAL_RCC_OscConfig+0x470>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1f0      	bne.n	8006fec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	69da      	ldr	r2, [r3, #28]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	431a      	orrs	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007018:	019b      	lsls	r3, r3, #6
 800701a:	431a      	orrs	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007020:	085b      	lsrs	r3, r3, #1
 8007022:	3b01      	subs	r3, #1
 8007024:	041b      	lsls	r3, r3, #16
 8007026:	431a      	orrs	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702c:	061b      	lsls	r3, r3, #24
 800702e:	491b      	ldr	r1, [pc, #108]	; (800709c <HAL_RCC_OscConfig+0x470>)
 8007030:	4313      	orrs	r3, r2
 8007032:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007034:	4b1b      	ldr	r3, [pc, #108]	; (80070a4 <HAL_RCC_OscConfig+0x478>)
 8007036:	2201      	movs	r2, #1
 8007038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800703a:	f7fd f815 	bl	8004068 <HAL_GetTick>
 800703e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007040:	e008      	b.n	8007054 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007042:	f7fd f811 	bl	8004068 <HAL_GetTick>
 8007046:	4602      	mov	r2, r0
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	2b02      	cmp	r3, #2
 800704e:	d901      	bls.n	8007054 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e05c      	b.n	800710e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007054:	4b11      	ldr	r3, [pc, #68]	; (800709c <HAL_RCC_OscConfig+0x470>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d0f0      	beq.n	8007042 <HAL_RCC_OscConfig+0x416>
 8007060:	e054      	b.n	800710c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007062:	4b10      	ldr	r3, [pc, #64]	; (80070a4 <HAL_RCC_OscConfig+0x478>)
 8007064:	2200      	movs	r2, #0
 8007066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007068:	f7fc fffe 	bl	8004068 <HAL_GetTick>
 800706c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800706e:	e008      	b.n	8007082 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007070:	f7fc fffa 	bl	8004068 <HAL_GetTick>
 8007074:	4602      	mov	r2, r0
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	2b02      	cmp	r3, #2
 800707c:	d901      	bls.n	8007082 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e045      	b.n	800710e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007082:	4b06      	ldr	r3, [pc, #24]	; (800709c <HAL_RCC_OscConfig+0x470>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1f0      	bne.n	8007070 <HAL_RCC_OscConfig+0x444>
 800708e:	e03d      	b.n	800710c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d107      	bne.n	80070a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e038      	b.n	800710e <HAL_RCC_OscConfig+0x4e2>
 800709c:	40023800 	.word	0x40023800
 80070a0:	40007000 	.word	0x40007000
 80070a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80070a8:	4b1b      	ldr	r3, [pc, #108]	; (8007118 <HAL_RCC_OscConfig+0x4ec>)
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d028      	beq.n	8007108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d121      	bne.n	8007108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d11a      	bne.n	8007108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80070d8:	4013      	ands	r3, r2
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80070de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d111      	bne.n	8007108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ee:	085b      	lsrs	r3, r3, #1
 80070f0:	3b01      	subs	r3, #1
 80070f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d107      	bne.n	8007108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007102:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007104:	429a      	cmp	r2, r3
 8007106:	d001      	beq.n	800710c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e000      	b.n	800710e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3718      	adds	r7, #24
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	40023800 	.word	0x40023800

0800711c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d101      	bne.n	8007130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e0cc      	b.n	80072ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007130:	4b68      	ldr	r3, [pc, #416]	; (80072d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0307 	and.w	r3, r3, #7
 8007138:	683a      	ldr	r2, [r7, #0]
 800713a:	429a      	cmp	r2, r3
 800713c:	d90c      	bls.n	8007158 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800713e:	4b65      	ldr	r3, [pc, #404]	; (80072d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007140:	683a      	ldr	r2, [r7, #0]
 8007142:	b2d2      	uxtb	r2, r2
 8007144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007146:	4b63      	ldr	r3, [pc, #396]	; (80072d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0307 	and.w	r3, r3, #7
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	429a      	cmp	r2, r3
 8007152:	d001      	beq.n	8007158 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	e0b8      	b.n	80072ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0302 	and.w	r3, r3, #2
 8007160:	2b00      	cmp	r3, #0
 8007162:	d020      	beq.n	80071a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0304 	and.w	r3, r3, #4
 800716c:	2b00      	cmp	r3, #0
 800716e:	d005      	beq.n	800717c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007170:	4b59      	ldr	r3, [pc, #356]	; (80072d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	4a58      	ldr	r2, [pc, #352]	; (80072d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007176:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800717a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0308 	and.w	r3, r3, #8
 8007184:	2b00      	cmp	r3, #0
 8007186:	d005      	beq.n	8007194 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007188:	4b53      	ldr	r3, [pc, #332]	; (80072d8 <HAL_RCC_ClockConfig+0x1bc>)
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	4a52      	ldr	r2, [pc, #328]	; (80072d8 <HAL_RCC_ClockConfig+0x1bc>)
 800718e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007192:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007194:	4b50      	ldr	r3, [pc, #320]	; (80072d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	494d      	ldr	r1, [pc, #308]	; (80072d8 <HAL_RCC_ClockConfig+0x1bc>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d044      	beq.n	800723c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d107      	bne.n	80071ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071ba:	4b47      	ldr	r3, [pc, #284]	; (80072d8 <HAL_RCC_ClockConfig+0x1bc>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d119      	bne.n	80071fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e07f      	b.n	80072ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	d003      	beq.n	80071da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071d6:	2b03      	cmp	r3, #3
 80071d8:	d107      	bne.n	80071ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071da:	4b3f      	ldr	r3, [pc, #252]	; (80072d8 <HAL_RCC_ClockConfig+0x1bc>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d109      	bne.n	80071fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e06f      	b.n	80072ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071ea:	4b3b      	ldr	r3, [pc, #236]	; (80072d8 <HAL_RCC_ClockConfig+0x1bc>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0302 	and.w	r3, r3, #2
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d101      	bne.n	80071fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e067      	b.n	80072ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80071fa:	4b37      	ldr	r3, [pc, #220]	; (80072d8 <HAL_RCC_ClockConfig+0x1bc>)
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f023 0203 	bic.w	r2, r3, #3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	4934      	ldr	r1, [pc, #208]	; (80072d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007208:	4313      	orrs	r3, r2
 800720a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800720c:	f7fc ff2c 	bl	8004068 <HAL_GetTick>
 8007210:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007212:	e00a      	b.n	800722a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007214:	f7fc ff28 	bl	8004068 <HAL_GetTick>
 8007218:	4602      	mov	r2, r0
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007222:	4293      	cmp	r3, r2
 8007224:	d901      	bls.n	800722a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e04f      	b.n	80072ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800722a:	4b2b      	ldr	r3, [pc, #172]	; (80072d8 <HAL_RCC_ClockConfig+0x1bc>)
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f003 020c 	and.w	r2, r3, #12
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	429a      	cmp	r2, r3
 800723a:	d1eb      	bne.n	8007214 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800723c:	4b25      	ldr	r3, [pc, #148]	; (80072d4 <HAL_RCC_ClockConfig+0x1b8>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0307 	and.w	r3, r3, #7
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	429a      	cmp	r2, r3
 8007248:	d20c      	bcs.n	8007264 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800724a:	4b22      	ldr	r3, [pc, #136]	; (80072d4 <HAL_RCC_ClockConfig+0x1b8>)
 800724c:	683a      	ldr	r2, [r7, #0]
 800724e:	b2d2      	uxtb	r2, r2
 8007250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007252:	4b20      	ldr	r3, [pc, #128]	; (80072d4 <HAL_RCC_ClockConfig+0x1b8>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0307 	and.w	r3, r3, #7
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	429a      	cmp	r2, r3
 800725e:	d001      	beq.n	8007264 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e032      	b.n	80072ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0304 	and.w	r3, r3, #4
 800726c:	2b00      	cmp	r3, #0
 800726e:	d008      	beq.n	8007282 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007270:	4b19      	ldr	r3, [pc, #100]	; (80072d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	4916      	ldr	r1, [pc, #88]	; (80072d8 <HAL_RCC_ClockConfig+0x1bc>)
 800727e:	4313      	orrs	r3, r2
 8007280:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0308 	and.w	r3, r3, #8
 800728a:	2b00      	cmp	r3, #0
 800728c:	d009      	beq.n	80072a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800728e:	4b12      	ldr	r3, [pc, #72]	; (80072d8 <HAL_RCC_ClockConfig+0x1bc>)
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	00db      	lsls	r3, r3, #3
 800729c:	490e      	ldr	r1, [pc, #56]	; (80072d8 <HAL_RCC_ClockConfig+0x1bc>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80072a2:	f000 f821 	bl	80072e8 <HAL_RCC_GetSysClockFreq>
 80072a6:	4602      	mov	r2, r0
 80072a8:	4b0b      	ldr	r3, [pc, #44]	; (80072d8 <HAL_RCC_ClockConfig+0x1bc>)
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	091b      	lsrs	r3, r3, #4
 80072ae:	f003 030f 	and.w	r3, r3, #15
 80072b2:	490a      	ldr	r1, [pc, #40]	; (80072dc <HAL_RCC_ClockConfig+0x1c0>)
 80072b4:	5ccb      	ldrb	r3, [r1, r3]
 80072b6:	fa22 f303 	lsr.w	r3, r2, r3
 80072ba:	4a09      	ldr	r2, [pc, #36]	; (80072e0 <HAL_RCC_ClockConfig+0x1c4>)
 80072bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80072be:	4b09      	ldr	r3, [pc, #36]	; (80072e4 <HAL_RCC_ClockConfig+0x1c8>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fc fe8c 	bl	8003fe0 <HAL_InitTick>

  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	40023c00 	.word	0x40023c00
 80072d8:	40023800 	.word	0x40023800
 80072dc:	0800b640 	.word	0x0800b640
 80072e0:	20000000 	.word	0x20000000
 80072e4:	20000068 	.word	0x20000068

080072e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072ec:	b094      	sub	sp, #80	; 0x50
 80072ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	647b      	str	r3, [r7, #68]	; 0x44
 80072f4:	2300      	movs	r3, #0
 80072f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072f8:	2300      	movs	r3, #0
 80072fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80072fc:	2300      	movs	r3, #0
 80072fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007300:	4b79      	ldr	r3, [pc, #484]	; (80074e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f003 030c 	and.w	r3, r3, #12
 8007308:	2b08      	cmp	r3, #8
 800730a:	d00d      	beq.n	8007328 <HAL_RCC_GetSysClockFreq+0x40>
 800730c:	2b08      	cmp	r3, #8
 800730e:	f200 80e1 	bhi.w	80074d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007312:	2b00      	cmp	r3, #0
 8007314:	d002      	beq.n	800731c <HAL_RCC_GetSysClockFreq+0x34>
 8007316:	2b04      	cmp	r3, #4
 8007318:	d003      	beq.n	8007322 <HAL_RCC_GetSysClockFreq+0x3a>
 800731a:	e0db      	b.n	80074d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800731c:	4b73      	ldr	r3, [pc, #460]	; (80074ec <HAL_RCC_GetSysClockFreq+0x204>)
 800731e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007320:	e0db      	b.n	80074da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007322:	4b73      	ldr	r3, [pc, #460]	; (80074f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8007324:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007326:	e0d8      	b.n	80074da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007328:	4b6f      	ldr	r3, [pc, #444]	; (80074e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007330:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007332:	4b6d      	ldr	r3, [pc, #436]	; (80074e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d063      	beq.n	8007406 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800733e:	4b6a      	ldr	r3, [pc, #424]	; (80074e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	099b      	lsrs	r3, r3, #6
 8007344:	2200      	movs	r2, #0
 8007346:	63bb      	str	r3, [r7, #56]	; 0x38
 8007348:	63fa      	str	r2, [r7, #60]	; 0x3c
 800734a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007350:	633b      	str	r3, [r7, #48]	; 0x30
 8007352:	2300      	movs	r3, #0
 8007354:	637b      	str	r3, [r7, #52]	; 0x34
 8007356:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800735a:	4622      	mov	r2, r4
 800735c:	462b      	mov	r3, r5
 800735e:	f04f 0000 	mov.w	r0, #0
 8007362:	f04f 0100 	mov.w	r1, #0
 8007366:	0159      	lsls	r1, r3, #5
 8007368:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800736c:	0150      	lsls	r0, r2, #5
 800736e:	4602      	mov	r2, r0
 8007370:	460b      	mov	r3, r1
 8007372:	4621      	mov	r1, r4
 8007374:	1a51      	subs	r1, r2, r1
 8007376:	6139      	str	r1, [r7, #16]
 8007378:	4629      	mov	r1, r5
 800737a:	eb63 0301 	sbc.w	r3, r3, r1
 800737e:	617b      	str	r3, [r7, #20]
 8007380:	f04f 0200 	mov.w	r2, #0
 8007384:	f04f 0300 	mov.w	r3, #0
 8007388:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800738c:	4659      	mov	r1, fp
 800738e:	018b      	lsls	r3, r1, #6
 8007390:	4651      	mov	r1, sl
 8007392:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007396:	4651      	mov	r1, sl
 8007398:	018a      	lsls	r2, r1, #6
 800739a:	4651      	mov	r1, sl
 800739c:	ebb2 0801 	subs.w	r8, r2, r1
 80073a0:	4659      	mov	r1, fp
 80073a2:	eb63 0901 	sbc.w	r9, r3, r1
 80073a6:	f04f 0200 	mov.w	r2, #0
 80073aa:	f04f 0300 	mov.w	r3, #0
 80073ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073ba:	4690      	mov	r8, r2
 80073bc:	4699      	mov	r9, r3
 80073be:	4623      	mov	r3, r4
 80073c0:	eb18 0303 	adds.w	r3, r8, r3
 80073c4:	60bb      	str	r3, [r7, #8]
 80073c6:	462b      	mov	r3, r5
 80073c8:	eb49 0303 	adc.w	r3, r9, r3
 80073cc:	60fb      	str	r3, [r7, #12]
 80073ce:	f04f 0200 	mov.w	r2, #0
 80073d2:	f04f 0300 	mov.w	r3, #0
 80073d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80073da:	4629      	mov	r1, r5
 80073dc:	024b      	lsls	r3, r1, #9
 80073de:	4621      	mov	r1, r4
 80073e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80073e4:	4621      	mov	r1, r4
 80073e6:	024a      	lsls	r2, r1, #9
 80073e8:	4610      	mov	r0, r2
 80073ea:	4619      	mov	r1, r3
 80073ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073ee:	2200      	movs	r2, #0
 80073f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80073f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80073f8:	f7fb fb66 	bl	8002ac8 <__aeabi_uldivmod>
 80073fc:	4602      	mov	r2, r0
 80073fe:	460b      	mov	r3, r1
 8007400:	4613      	mov	r3, r2
 8007402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007404:	e058      	b.n	80074b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007406:	4b38      	ldr	r3, [pc, #224]	; (80074e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	099b      	lsrs	r3, r3, #6
 800740c:	2200      	movs	r2, #0
 800740e:	4618      	mov	r0, r3
 8007410:	4611      	mov	r1, r2
 8007412:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007416:	623b      	str	r3, [r7, #32]
 8007418:	2300      	movs	r3, #0
 800741a:	627b      	str	r3, [r7, #36]	; 0x24
 800741c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007420:	4642      	mov	r2, r8
 8007422:	464b      	mov	r3, r9
 8007424:	f04f 0000 	mov.w	r0, #0
 8007428:	f04f 0100 	mov.w	r1, #0
 800742c:	0159      	lsls	r1, r3, #5
 800742e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007432:	0150      	lsls	r0, r2, #5
 8007434:	4602      	mov	r2, r0
 8007436:	460b      	mov	r3, r1
 8007438:	4641      	mov	r1, r8
 800743a:	ebb2 0a01 	subs.w	sl, r2, r1
 800743e:	4649      	mov	r1, r9
 8007440:	eb63 0b01 	sbc.w	fp, r3, r1
 8007444:	f04f 0200 	mov.w	r2, #0
 8007448:	f04f 0300 	mov.w	r3, #0
 800744c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007450:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007454:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007458:	ebb2 040a 	subs.w	r4, r2, sl
 800745c:	eb63 050b 	sbc.w	r5, r3, fp
 8007460:	f04f 0200 	mov.w	r2, #0
 8007464:	f04f 0300 	mov.w	r3, #0
 8007468:	00eb      	lsls	r3, r5, #3
 800746a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800746e:	00e2      	lsls	r2, r4, #3
 8007470:	4614      	mov	r4, r2
 8007472:	461d      	mov	r5, r3
 8007474:	4643      	mov	r3, r8
 8007476:	18e3      	adds	r3, r4, r3
 8007478:	603b      	str	r3, [r7, #0]
 800747a:	464b      	mov	r3, r9
 800747c:	eb45 0303 	adc.w	r3, r5, r3
 8007480:	607b      	str	r3, [r7, #4]
 8007482:	f04f 0200 	mov.w	r2, #0
 8007486:	f04f 0300 	mov.w	r3, #0
 800748a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800748e:	4629      	mov	r1, r5
 8007490:	028b      	lsls	r3, r1, #10
 8007492:	4621      	mov	r1, r4
 8007494:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007498:	4621      	mov	r1, r4
 800749a:	028a      	lsls	r2, r1, #10
 800749c:	4610      	mov	r0, r2
 800749e:	4619      	mov	r1, r3
 80074a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074a2:	2200      	movs	r2, #0
 80074a4:	61bb      	str	r3, [r7, #24]
 80074a6:	61fa      	str	r2, [r7, #28]
 80074a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074ac:	f7fb fb0c 	bl	8002ac8 <__aeabi_uldivmod>
 80074b0:	4602      	mov	r2, r0
 80074b2:	460b      	mov	r3, r1
 80074b4:	4613      	mov	r3, r2
 80074b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80074b8:	4b0b      	ldr	r3, [pc, #44]	; (80074e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	0c1b      	lsrs	r3, r3, #16
 80074be:	f003 0303 	and.w	r3, r3, #3
 80074c2:	3301      	adds	r3, #1
 80074c4:	005b      	lsls	r3, r3, #1
 80074c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80074c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80074ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80074d2:	e002      	b.n	80074da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80074d4:	4b05      	ldr	r3, [pc, #20]	; (80074ec <HAL_RCC_GetSysClockFreq+0x204>)
 80074d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80074d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3750      	adds	r7, #80	; 0x50
 80074e0:	46bd      	mov	sp, r7
 80074e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074e6:	bf00      	nop
 80074e8:	40023800 	.word	0x40023800
 80074ec:	00f42400 	.word	0x00f42400
 80074f0:	007a1200 	.word	0x007a1200

080074f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074f4:	b480      	push	{r7}
 80074f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80074f8:	4b03      	ldr	r3, [pc, #12]	; (8007508 <HAL_RCC_GetHCLKFreq+0x14>)
 80074fa:	681b      	ldr	r3, [r3, #0]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	20000000 	.word	0x20000000

0800750c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007510:	f7ff fff0 	bl	80074f4 <HAL_RCC_GetHCLKFreq>
 8007514:	4602      	mov	r2, r0
 8007516:	4b05      	ldr	r3, [pc, #20]	; (800752c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	0a9b      	lsrs	r3, r3, #10
 800751c:	f003 0307 	and.w	r3, r3, #7
 8007520:	4903      	ldr	r1, [pc, #12]	; (8007530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007522:	5ccb      	ldrb	r3, [r1, r3]
 8007524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007528:	4618      	mov	r0, r3
 800752a:	bd80      	pop	{r7, pc}
 800752c:	40023800 	.word	0x40023800
 8007530:	0800b650 	.word	0x0800b650

08007534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007538:	f7ff ffdc 	bl	80074f4 <HAL_RCC_GetHCLKFreq>
 800753c:	4602      	mov	r2, r0
 800753e:	4b05      	ldr	r3, [pc, #20]	; (8007554 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	0b5b      	lsrs	r3, r3, #13
 8007544:	f003 0307 	and.w	r3, r3, #7
 8007548:	4903      	ldr	r1, [pc, #12]	; (8007558 <HAL_RCC_GetPCLK2Freq+0x24>)
 800754a:	5ccb      	ldrb	r3, [r1, r3]
 800754c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007550:	4618      	mov	r0, r3
 8007552:	bd80      	pop	{r7, pc}
 8007554:	40023800 	.word	0x40023800
 8007558:	0800b650 	.word	0x0800b650

0800755c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007564:	2300      	movs	r3, #0
 8007566:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007568:	2300      	movs	r3, #0
 800756a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0301 	and.w	r3, r3, #1
 8007574:	2b00      	cmp	r3, #0
 8007576:	d105      	bne.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007580:	2b00      	cmp	r3, #0
 8007582:	d035      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007584:	4b62      	ldr	r3, [pc, #392]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007586:	2200      	movs	r2, #0
 8007588:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800758a:	f7fc fd6d 	bl	8004068 <HAL_GetTick>
 800758e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007590:	e008      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007592:	f7fc fd69 	bl	8004068 <HAL_GetTick>
 8007596:	4602      	mov	r2, r0
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	2b02      	cmp	r3, #2
 800759e:	d901      	bls.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e0b0      	b.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80075a4:	4b5b      	ldr	r3, [pc, #364]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1f0      	bne.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	019a      	lsls	r2, r3, #6
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	071b      	lsls	r3, r3, #28
 80075bc:	4955      	ldr	r1, [pc, #340]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80075c4:	4b52      	ldr	r3, [pc, #328]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80075c6:	2201      	movs	r2, #1
 80075c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80075ca:	f7fc fd4d 	bl	8004068 <HAL_GetTick>
 80075ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075d0:	e008      	b.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80075d2:	f7fc fd49 	bl	8004068 <HAL_GetTick>
 80075d6:	4602      	mov	r2, r0
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d901      	bls.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075e0:	2303      	movs	r3, #3
 80075e2:	e090      	b.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075e4:	4b4b      	ldr	r3, [pc, #300]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d0f0      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0302 	and.w	r3, r3, #2
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f000 8083 	beq.w	8007704 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80075fe:	2300      	movs	r3, #0
 8007600:	60fb      	str	r3, [r7, #12]
 8007602:	4b44      	ldr	r3, [pc, #272]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007606:	4a43      	ldr	r2, [pc, #268]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800760c:	6413      	str	r3, [r2, #64]	; 0x40
 800760e:	4b41      	ldr	r3, [pc, #260]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007616:	60fb      	str	r3, [r7, #12]
 8007618:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800761a:	4b3f      	ldr	r3, [pc, #252]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a3e      	ldr	r2, [pc, #248]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007624:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007626:	f7fc fd1f 	bl	8004068 <HAL_GetTick>
 800762a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800762c:	e008      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800762e:	f7fc fd1b 	bl	8004068 <HAL_GetTick>
 8007632:	4602      	mov	r2, r0
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	2b02      	cmp	r3, #2
 800763a:	d901      	bls.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800763c:	2303      	movs	r3, #3
 800763e:	e062      	b.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007640:	4b35      	ldr	r3, [pc, #212]	; (8007718 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007648:	2b00      	cmp	r3, #0
 800764a:	d0f0      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800764c:	4b31      	ldr	r3, [pc, #196]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800764e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007650:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007654:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d02f      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	429a      	cmp	r2, r3
 8007668:	d028      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800766a:	4b2a      	ldr	r3, [pc, #168]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800766c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800766e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007672:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007674:	4b29      	ldr	r3, [pc, #164]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007676:	2201      	movs	r2, #1
 8007678:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800767a:	4b28      	ldr	r3, [pc, #160]	; (800771c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800767c:	2200      	movs	r2, #0
 800767e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007680:	4a24      	ldr	r2, [pc, #144]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007686:	4b23      	ldr	r3, [pc, #140]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	2b01      	cmp	r3, #1
 8007690:	d114      	bne.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007692:	f7fc fce9 	bl	8004068 <HAL_GetTick>
 8007696:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007698:	e00a      	b.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800769a:	f7fc fce5 	bl	8004068 <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d901      	bls.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80076ac:	2303      	movs	r3, #3
 80076ae:	e02a      	b.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076b0:	4b18      	ldr	r3, [pc, #96]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076b4:	f003 0302 	and.w	r3, r3, #2
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d0ee      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076c8:	d10d      	bne.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80076ca:	4b12      	ldr	r3, [pc, #72]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80076da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076de:	490d      	ldr	r1, [pc, #52]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	608b      	str	r3, [r1, #8]
 80076e4:	e005      	b.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80076e6:	4b0b      	ldr	r3, [pc, #44]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	4a0a      	ldr	r2, [pc, #40]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076ec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80076f0:	6093      	str	r3, [r2, #8]
 80076f2:	4b08      	ldr	r3, [pc, #32]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80076f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076fe:	4905      	ldr	r1, [pc, #20]	; (8007714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007700:	4313      	orrs	r3, r2
 8007702:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3718      	adds	r7, #24
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	42470068 	.word	0x42470068
 8007714:	40023800 	.word	0x40023800
 8007718:	40007000 	.word	0x40007000
 800771c:	42470e40 	.word	0x42470e40

08007720 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007720:	b480      	push	{r7}
 8007722:	b087      	sub	sp, #28
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007728:	2300      	movs	r3, #0
 800772a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800772c:	2300      	movs	r3, #0
 800772e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007730:	2300      	movs	r3, #0
 8007732:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007734:	2300      	movs	r3, #0
 8007736:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d13e      	bne.n	80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800773e:	4b23      	ldr	r3, [pc, #140]	; (80077cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007746:	60fb      	str	r3, [r7, #12]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d005      	beq.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d12f      	bne.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007754:	4b1e      	ldr	r3, [pc, #120]	; (80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007756:	617b      	str	r3, [r7, #20]
          break;
 8007758:	e02f      	b.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800775a:	4b1c      	ldr	r3, [pc, #112]	; (80077cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007762:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007766:	d108      	bne.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007768:	4b18      	ldr	r3, [pc, #96]	; (80077cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007770:	4a18      	ldr	r2, [pc, #96]	; (80077d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007772:	fbb2 f3f3 	udiv	r3, r2, r3
 8007776:	613b      	str	r3, [r7, #16]
 8007778:	e007      	b.n	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800777a:	4b14      	ldr	r3, [pc, #80]	; (80077cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007782:	4a15      	ldr	r2, [pc, #84]	; (80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007784:	fbb2 f3f3 	udiv	r3, r2, r3
 8007788:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800778a:	4b10      	ldr	r3, [pc, #64]	; (80077cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800778c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007790:	099b      	lsrs	r3, r3, #6
 8007792:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	fb02 f303 	mul.w	r3, r2, r3
 800779c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800779e:	4b0b      	ldr	r3, [pc, #44]	; (80077cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80077a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077a4:	0f1b      	lsrs	r3, r3, #28
 80077a6:	f003 0307 	and.w	r3, r3, #7
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80077b0:	617b      	str	r3, [r7, #20]
          break;
 80077b2:	e002      	b.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80077b4:	2300      	movs	r3, #0
 80077b6:	617b      	str	r3, [r7, #20]
          break;
 80077b8:	bf00      	nop
        }
      }
      break;
 80077ba:	bf00      	nop
    }
  }
  return frequency;
 80077bc:	697b      	ldr	r3, [r7, #20]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	371c      	adds	r7, #28
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	40023800 	.word	0x40023800
 80077d0:	00bb8000 	.word	0x00bb8000
 80077d4:	007a1200 	.word	0x007a1200
 80077d8:	00f42400 	.word	0x00f42400

080077dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d101      	bne.n	80077ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e07b      	b.n	80078e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d108      	bne.n	8007808 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077fe:	d009      	beq.n	8007814 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	61da      	str	r2, [r3, #28]
 8007806:	e005      	b.n	8007814 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d106      	bne.n	8007834 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7f9 f9b0 	bl	8000b94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2202      	movs	r2, #2
 8007838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800784a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800785c:	431a      	orrs	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007866:	431a      	orrs	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	f003 0302 	and.w	r3, r3, #2
 8007870:	431a      	orrs	r2, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	f003 0301 	and.w	r3, r3, #1
 800787a:	431a      	orrs	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	699b      	ldr	r3, [r3, #24]
 8007880:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007884:	431a      	orrs	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800788e:	431a      	orrs	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a1b      	ldr	r3, [r3, #32]
 8007894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007898:	ea42 0103 	orr.w	r1, r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	430a      	orrs	r2, r1
 80078aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	0c1b      	lsrs	r3, r3, #16
 80078b2:	f003 0104 	and.w	r1, r3, #4
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ba:	f003 0210 	and.w	r2, r3, #16
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	430a      	orrs	r2, r1
 80078c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	69da      	ldr	r2, [r3, #28]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b082      	sub	sp, #8
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d101      	bne.n	8007900 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e03f      	b.n	8007980 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2b00      	cmp	r3, #0
 800790a:	d106      	bne.n	800791a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7f9 f9a3 	bl	8000c60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2224      	movs	r2, #36	; 0x24
 800791e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68da      	ldr	r2, [r3, #12]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007930:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f928 	bl	8007b88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	691a      	ldr	r2, [r3, #16]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007946:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	695a      	ldr	r2, [r3, #20]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007956:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68da      	ldr	r2, [r3, #12]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007966:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2220      	movs	r2, #32
 8007972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2220      	movs	r2, #32
 800797a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b08a      	sub	sp, #40	; 0x28
 800798c:	af02      	add	r7, sp, #8
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	603b      	str	r3, [r7, #0]
 8007994:	4613      	mov	r3, r2
 8007996:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007998:	2300      	movs	r3, #0
 800799a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b20      	cmp	r3, #32
 80079a6:	d17c      	bne.n	8007aa2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d002      	beq.n	80079b4 <HAL_UART_Transmit+0x2c>
 80079ae:	88fb      	ldrh	r3, [r7, #6]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d101      	bne.n	80079b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e075      	b.n	8007aa4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d101      	bne.n	80079c6 <HAL_UART_Transmit+0x3e>
 80079c2:	2302      	movs	r3, #2
 80079c4:	e06e      	b.n	8007aa4 <HAL_UART_Transmit+0x11c>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2221      	movs	r2, #33	; 0x21
 80079d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079dc:	f7fc fb44 	bl	8004068 <HAL_GetTick>
 80079e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	88fa      	ldrh	r2, [r7, #6]
 80079e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	88fa      	ldrh	r2, [r7, #6]
 80079ec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079f6:	d108      	bne.n	8007a0a <HAL_UART_Transmit+0x82>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d104      	bne.n	8007a0a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007a00:	2300      	movs	r3, #0
 8007a02:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	61bb      	str	r3, [r7, #24]
 8007a08:	e003      	b.n	8007a12 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007a1a:	e02a      	b.n	8007a72 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	2200      	movs	r2, #0
 8007a24:	2180      	movs	r1, #128	; 0x80
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f000 f840 	bl	8007aac <UART_WaitOnFlagUntilTimeout>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d001      	beq.n	8007a36 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e036      	b.n	8007aa4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d10b      	bne.n	8007a54 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	881b      	ldrh	r3, [r3, #0]
 8007a40:	461a      	mov	r2, r3
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a4a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	3302      	adds	r3, #2
 8007a50:	61bb      	str	r3, [r7, #24]
 8007a52:	e007      	b.n	8007a64 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	781a      	ldrb	r2, [r3, #0]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	3301      	adds	r3, #1
 8007a62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1cf      	bne.n	8007a1c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	2200      	movs	r2, #0
 8007a84:	2140      	movs	r1, #64	; 0x40
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f000 f810 	bl	8007aac <UART_WaitOnFlagUntilTimeout>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e006      	b.n	8007aa4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2220      	movs	r2, #32
 8007a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	e000      	b.n	8007aa4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007aa2:	2302      	movs	r3, #2
  }
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3720      	adds	r7, #32
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b090      	sub	sp, #64	; 0x40
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	603b      	str	r3, [r7, #0]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007abc:	e050      	b.n	8007b60 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ac4:	d04c      	beq.n	8007b60 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d007      	beq.n	8007adc <UART_WaitOnFlagUntilTimeout+0x30>
 8007acc:	f7fc facc 	bl	8004068 <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d241      	bcs.n	8007b60 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	330c      	adds	r3, #12
 8007ae2:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae6:	e853 3f00 	ldrex	r3, [r3]
 8007aea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	330c      	adds	r3, #12
 8007afa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007afc:	637a      	str	r2, [r7, #52]	; 0x34
 8007afe:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b04:	e841 2300 	strex	r3, r2, [r1]
 8007b08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d1e5      	bne.n	8007adc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	3314      	adds	r3, #20
 8007b16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	e853 3f00 	ldrex	r3, [r3]
 8007b1e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	f023 0301 	bic.w	r3, r3, #1
 8007b26:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	3314      	adds	r3, #20
 8007b2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b30:	623a      	str	r2, [r7, #32]
 8007b32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b34:	69f9      	ldr	r1, [r7, #28]
 8007b36:	6a3a      	ldr	r2, [r7, #32]
 8007b38:	e841 2300 	strex	r3, r2, [r1]
 8007b3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1e5      	bne.n	8007b10 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2220      	movs	r2, #32
 8007b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e00f      	b.n	8007b80 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	4013      	ands	r3, r2
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	bf0c      	ite	eq
 8007b70:	2301      	moveq	r3, #1
 8007b72:	2300      	movne	r3, #0
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	461a      	mov	r2, r3
 8007b78:	79fb      	ldrb	r3, [r7, #7]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d09f      	beq.n	8007abe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3740      	adds	r7, #64	; 0x40
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b8c:	b0c0      	sub	sp, #256	; 0x100
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ba4:	68d9      	ldr	r1, [r3, #12]
 8007ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	ea40 0301 	orr.w	r3, r0, r1
 8007bb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb6:	689a      	ldr	r2, [r3, #8]
 8007bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	431a      	orrs	r2, r3
 8007bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bc4:	695b      	ldr	r3, [r3, #20]
 8007bc6:	431a      	orrs	r2, r3
 8007bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bcc:	69db      	ldr	r3, [r3, #28]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007be0:	f021 010c 	bic.w	r1, r1, #12
 8007be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007bee:	430b      	orrs	r3, r1
 8007bf0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	695b      	ldr	r3, [r3, #20]
 8007bfa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c02:	6999      	ldr	r1, [r3, #24]
 8007c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	ea40 0301 	orr.w	r3, r0, r1
 8007c0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	4b8f      	ldr	r3, [pc, #572]	; (8007e54 <UART_SetConfig+0x2cc>)
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d005      	beq.n	8007c28 <UART_SetConfig+0xa0>
 8007c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	4b8d      	ldr	r3, [pc, #564]	; (8007e58 <UART_SetConfig+0x2d0>)
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d104      	bne.n	8007c32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c28:	f7ff fc84 	bl	8007534 <HAL_RCC_GetPCLK2Freq>
 8007c2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007c30:	e003      	b.n	8007c3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c32:	f7ff fc6b 	bl	800750c <HAL_RCC_GetPCLK1Freq>
 8007c36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c3e:	69db      	ldr	r3, [r3, #28]
 8007c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c44:	f040 810c 	bne.w	8007e60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007c56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007c5a:	4622      	mov	r2, r4
 8007c5c:	462b      	mov	r3, r5
 8007c5e:	1891      	adds	r1, r2, r2
 8007c60:	65b9      	str	r1, [r7, #88]	; 0x58
 8007c62:	415b      	adcs	r3, r3
 8007c64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007c6a:	4621      	mov	r1, r4
 8007c6c:	eb12 0801 	adds.w	r8, r2, r1
 8007c70:	4629      	mov	r1, r5
 8007c72:	eb43 0901 	adc.w	r9, r3, r1
 8007c76:	f04f 0200 	mov.w	r2, #0
 8007c7a:	f04f 0300 	mov.w	r3, #0
 8007c7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c8a:	4690      	mov	r8, r2
 8007c8c:	4699      	mov	r9, r3
 8007c8e:	4623      	mov	r3, r4
 8007c90:	eb18 0303 	adds.w	r3, r8, r3
 8007c94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c98:	462b      	mov	r3, r5
 8007c9a:	eb49 0303 	adc.w	r3, r9, r3
 8007c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007cae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007cb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	18db      	adds	r3, r3, r3
 8007cba:	653b      	str	r3, [r7, #80]	; 0x50
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	eb42 0303 	adc.w	r3, r2, r3
 8007cc2:	657b      	str	r3, [r7, #84]	; 0x54
 8007cc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007cc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007ccc:	f7fa fefc 	bl	8002ac8 <__aeabi_uldivmod>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	4b61      	ldr	r3, [pc, #388]	; (8007e5c <UART_SetConfig+0x2d4>)
 8007cd6:	fba3 2302 	umull	r2, r3, r3, r2
 8007cda:	095b      	lsrs	r3, r3, #5
 8007cdc:	011c      	lsls	r4, r3, #4
 8007cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ce8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007cec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007cf0:	4642      	mov	r2, r8
 8007cf2:	464b      	mov	r3, r9
 8007cf4:	1891      	adds	r1, r2, r2
 8007cf6:	64b9      	str	r1, [r7, #72]	; 0x48
 8007cf8:	415b      	adcs	r3, r3
 8007cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007d00:	4641      	mov	r1, r8
 8007d02:	eb12 0a01 	adds.w	sl, r2, r1
 8007d06:	4649      	mov	r1, r9
 8007d08:	eb43 0b01 	adc.w	fp, r3, r1
 8007d0c:	f04f 0200 	mov.w	r2, #0
 8007d10:	f04f 0300 	mov.w	r3, #0
 8007d14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d20:	4692      	mov	sl, r2
 8007d22:	469b      	mov	fp, r3
 8007d24:	4643      	mov	r3, r8
 8007d26:	eb1a 0303 	adds.w	r3, sl, r3
 8007d2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d2e:	464b      	mov	r3, r9
 8007d30:	eb4b 0303 	adc.w	r3, fp, r3
 8007d34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007d48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	18db      	adds	r3, r3, r3
 8007d50:	643b      	str	r3, [r7, #64]	; 0x40
 8007d52:	4613      	mov	r3, r2
 8007d54:	eb42 0303 	adc.w	r3, r2, r3
 8007d58:	647b      	str	r3, [r7, #68]	; 0x44
 8007d5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007d5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007d62:	f7fa feb1 	bl	8002ac8 <__aeabi_uldivmod>
 8007d66:	4602      	mov	r2, r0
 8007d68:	460b      	mov	r3, r1
 8007d6a:	4611      	mov	r1, r2
 8007d6c:	4b3b      	ldr	r3, [pc, #236]	; (8007e5c <UART_SetConfig+0x2d4>)
 8007d6e:	fba3 2301 	umull	r2, r3, r3, r1
 8007d72:	095b      	lsrs	r3, r3, #5
 8007d74:	2264      	movs	r2, #100	; 0x64
 8007d76:	fb02 f303 	mul.w	r3, r2, r3
 8007d7a:	1acb      	subs	r3, r1, r3
 8007d7c:	00db      	lsls	r3, r3, #3
 8007d7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007d82:	4b36      	ldr	r3, [pc, #216]	; (8007e5c <UART_SetConfig+0x2d4>)
 8007d84:	fba3 2302 	umull	r2, r3, r3, r2
 8007d88:	095b      	lsrs	r3, r3, #5
 8007d8a:	005b      	lsls	r3, r3, #1
 8007d8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d90:	441c      	add	r4, r3
 8007d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d96:	2200      	movs	r2, #0
 8007d98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007da0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007da4:	4642      	mov	r2, r8
 8007da6:	464b      	mov	r3, r9
 8007da8:	1891      	adds	r1, r2, r2
 8007daa:	63b9      	str	r1, [r7, #56]	; 0x38
 8007dac:	415b      	adcs	r3, r3
 8007dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007db0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007db4:	4641      	mov	r1, r8
 8007db6:	1851      	adds	r1, r2, r1
 8007db8:	6339      	str	r1, [r7, #48]	; 0x30
 8007dba:	4649      	mov	r1, r9
 8007dbc:	414b      	adcs	r3, r1
 8007dbe:	637b      	str	r3, [r7, #52]	; 0x34
 8007dc0:	f04f 0200 	mov.w	r2, #0
 8007dc4:	f04f 0300 	mov.w	r3, #0
 8007dc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007dcc:	4659      	mov	r1, fp
 8007dce:	00cb      	lsls	r3, r1, #3
 8007dd0:	4651      	mov	r1, sl
 8007dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dd6:	4651      	mov	r1, sl
 8007dd8:	00ca      	lsls	r2, r1, #3
 8007dda:	4610      	mov	r0, r2
 8007ddc:	4619      	mov	r1, r3
 8007dde:	4603      	mov	r3, r0
 8007de0:	4642      	mov	r2, r8
 8007de2:	189b      	adds	r3, r3, r2
 8007de4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007de8:	464b      	mov	r3, r9
 8007dea:	460a      	mov	r2, r1
 8007dec:	eb42 0303 	adc.w	r3, r2, r3
 8007df0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007e00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007e04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007e08:	460b      	mov	r3, r1
 8007e0a:	18db      	adds	r3, r3, r3
 8007e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e0e:	4613      	mov	r3, r2
 8007e10:	eb42 0303 	adc.w	r3, r2, r3
 8007e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007e1e:	f7fa fe53 	bl	8002ac8 <__aeabi_uldivmod>
 8007e22:	4602      	mov	r2, r0
 8007e24:	460b      	mov	r3, r1
 8007e26:	4b0d      	ldr	r3, [pc, #52]	; (8007e5c <UART_SetConfig+0x2d4>)
 8007e28:	fba3 1302 	umull	r1, r3, r3, r2
 8007e2c:	095b      	lsrs	r3, r3, #5
 8007e2e:	2164      	movs	r1, #100	; 0x64
 8007e30:	fb01 f303 	mul.w	r3, r1, r3
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	00db      	lsls	r3, r3, #3
 8007e38:	3332      	adds	r3, #50	; 0x32
 8007e3a:	4a08      	ldr	r2, [pc, #32]	; (8007e5c <UART_SetConfig+0x2d4>)
 8007e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e40:	095b      	lsrs	r3, r3, #5
 8007e42:	f003 0207 	and.w	r2, r3, #7
 8007e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4422      	add	r2, r4
 8007e4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e50:	e105      	b.n	800805e <UART_SetConfig+0x4d6>
 8007e52:	bf00      	nop
 8007e54:	40011000 	.word	0x40011000
 8007e58:	40011400 	.word	0x40011400
 8007e5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e64:	2200      	movs	r2, #0
 8007e66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007e6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007e72:	4642      	mov	r2, r8
 8007e74:	464b      	mov	r3, r9
 8007e76:	1891      	adds	r1, r2, r2
 8007e78:	6239      	str	r1, [r7, #32]
 8007e7a:	415b      	adcs	r3, r3
 8007e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e82:	4641      	mov	r1, r8
 8007e84:	1854      	adds	r4, r2, r1
 8007e86:	4649      	mov	r1, r9
 8007e88:	eb43 0501 	adc.w	r5, r3, r1
 8007e8c:	f04f 0200 	mov.w	r2, #0
 8007e90:	f04f 0300 	mov.w	r3, #0
 8007e94:	00eb      	lsls	r3, r5, #3
 8007e96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e9a:	00e2      	lsls	r2, r4, #3
 8007e9c:	4614      	mov	r4, r2
 8007e9e:	461d      	mov	r5, r3
 8007ea0:	4643      	mov	r3, r8
 8007ea2:	18e3      	adds	r3, r4, r3
 8007ea4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007ea8:	464b      	mov	r3, r9
 8007eaa:	eb45 0303 	adc.w	r3, r5, r3
 8007eae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ebe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007ec2:	f04f 0200 	mov.w	r2, #0
 8007ec6:	f04f 0300 	mov.w	r3, #0
 8007eca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007ece:	4629      	mov	r1, r5
 8007ed0:	008b      	lsls	r3, r1, #2
 8007ed2:	4621      	mov	r1, r4
 8007ed4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ed8:	4621      	mov	r1, r4
 8007eda:	008a      	lsls	r2, r1, #2
 8007edc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007ee0:	f7fa fdf2 	bl	8002ac8 <__aeabi_uldivmod>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	4b60      	ldr	r3, [pc, #384]	; (800806c <UART_SetConfig+0x4e4>)
 8007eea:	fba3 2302 	umull	r2, r3, r3, r2
 8007eee:	095b      	lsrs	r3, r3, #5
 8007ef0:	011c      	lsls	r4, r3, #4
 8007ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007efc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007f00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007f04:	4642      	mov	r2, r8
 8007f06:	464b      	mov	r3, r9
 8007f08:	1891      	adds	r1, r2, r2
 8007f0a:	61b9      	str	r1, [r7, #24]
 8007f0c:	415b      	adcs	r3, r3
 8007f0e:	61fb      	str	r3, [r7, #28]
 8007f10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f14:	4641      	mov	r1, r8
 8007f16:	1851      	adds	r1, r2, r1
 8007f18:	6139      	str	r1, [r7, #16]
 8007f1a:	4649      	mov	r1, r9
 8007f1c:	414b      	adcs	r3, r1
 8007f1e:	617b      	str	r3, [r7, #20]
 8007f20:	f04f 0200 	mov.w	r2, #0
 8007f24:	f04f 0300 	mov.w	r3, #0
 8007f28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f2c:	4659      	mov	r1, fp
 8007f2e:	00cb      	lsls	r3, r1, #3
 8007f30:	4651      	mov	r1, sl
 8007f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f36:	4651      	mov	r1, sl
 8007f38:	00ca      	lsls	r2, r1, #3
 8007f3a:	4610      	mov	r0, r2
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	4603      	mov	r3, r0
 8007f40:	4642      	mov	r2, r8
 8007f42:	189b      	adds	r3, r3, r2
 8007f44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f48:	464b      	mov	r3, r9
 8007f4a:	460a      	mov	r2, r1
 8007f4c:	eb42 0303 	adc.w	r3, r2, r3
 8007f50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007f60:	f04f 0200 	mov.w	r2, #0
 8007f64:	f04f 0300 	mov.w	r3, #0
 8007f68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007f6c:	4649      	mov	r1, r9
 8007f6e:	008b      	lsls	r3, r1, #2
 8007f70:	4641      	mov	r1, r8
 8007f72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f76:	4641      	mov	r1, r8
 8007f78:	008a      	lsls	r2, r1, #2
 8007f7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007f7e:	f7fa fda3 	bl	8002ac8 <__aeabi_uldivmod>
 8007f82:	4602      	mov	r2, r0
 8007f84:	460b      	mov	r3, r1
 8007f86:	4b39      	ldr	r3, [pc, #228]	; (800806c <UART_SetConfig+0x4e4>)
 8007f88:	fba3 1302 	umull	r1, r3, r3, r2
 8007f8c:	095b      	lsrs	r3, r3, #5
 8007f8e:	2164      	movs	r1, #100	; 0x64
 8007f90:	fb01 f303 	mul.w	r3, r1, r3
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	011b      	lsls	r3, r3, #4
 8007f98:	3332      	adds	r3, #50	; 0x32
 8007f9a:	4a34      	ldr	r2, [pc, #208]	; (800806c <UART_SetConfig+0x4e4>)
 8007f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007fa0:	095b      	lsrs	r3, r3, #5
 8007fa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fa6:	441c      	add	r4, r3
 8007fa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fac:	2200      	movs	r2, #0
 8007fae:	673b      	str	r3, [r7, #112]	; 0x70
 8007fb0:	677a      	str	r2, [r7, #116]	; 0x74
 8007fb2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007fb6:	4642      	mov	r2, r8
 8007fb8:	464b      	mov	r3, r9
 8007fba:	1891      	adds	r1, r2, r2
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	415b      	adcs	r3, r3
 8007fc0:	60fb      	str	r3, [r7, #12]
 8007fc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fc6:	4641      	mov	r1, r8
 8007fc8:	1851      	adds	r1, r2, r1
 8007fca:	6039      	str	r1, [r7, #0]
 8007fcc:	4649      	mov	r1, r9
 8007fce:	414b      	adcs	r3, r1
 8007fd0:	607b      	str	r3, [r7, #4]
 8007fd2:	f04f 0200 	mov.w	r2, #0
 8007fd6:	f04f 0300 	mov.w	r3, #0
 8007fda:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007fde:	4659      	mov	r1, fp
 8007fe0:	00cb      	lsls	r3, r1, #3
 8007fe2:	4651      	mov	r1, sl
 8007fe4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fe8:	4651      	mov	r1, sl
 8007fea:	00ca      	lsls	r2, r1, #3
 8007fec:	4610      	mov	r0, r2
 8007fee:	4619      	mov	r1, r3
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	4642      	mov	r2, r8
 8007ff4:	189b      	adds	r3, r3, r2
 8007ff6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ff8:	464b      	mov	r3, r9
 8007ffa:	460a      	mov	r2, r1
 8007ffc:	eb42 0303 	adc.w	r3, r2, r3
 8008000:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	663b      	str	r3, [r7, #96]	; 0x60
 800800c:	667a      	str	r2, [r7, #100]	; 0x64
 800800e:	f04f 0200 	mov.w	r2, #0
 8008012:	f04f 0300 	mov.w	r3, #0
 8008016:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800801a:	4649      	mov	r1, r9
 800801c:	008b      	lsls	r3, r1, #2
 800801e:	4641      	mov	r1, r8
 8008020:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008024:	4641      	mov	r1, r8
 8008026:	008a      	lsls	r2, r1, #2
 8008028:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800802c:	f7fa fd4c 	bl	8002ac8 <__aeabi_uldivmod>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	4b0d      	ldr	r3, [pc, #52]	; (800806c <UART_SetConfig+0x4e4>)
 8008036:	fba3 1302 	umull	r1, r3, r3, r2
 800803a:	095b      	lsrs	r3, r3, #5
 800803c:	2164      	movs	r1, #100	; 0x64
 800803e:	fb01 f303 	mul.w	r3, r1, r3
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	011b      	lsls	r3, r3, #4
 8008046:	3332      	adds	r3, #50	; 0x32
 8008048:	4a08      	ldr	r2, [pc, #32]	; (800806c <UART_SetConfig+0x4e4>)
 800804a:	fba2 2303 	umull	r2, r3, r2, r3
 800804e:	095b      	lsrs	r3, r3, #5
 8008050:	f003 020f 	and.w	r2, r3, #15
 8008054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4422      	add	r2, r4
 800805c:	609a      	str	r2, [r3, #8]
}
 800805e:	bf00      	nop
 8008060:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008064:	46bd      	mov	sp, r7
 8008066:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800806a:	bf00      	nop
 800806c:	51eb851f 	.word	0x51eb851f

08008070 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008070:	b084      	sub	sp, #16
 8008072:	b580      	push	{r7, lr}
 8008074:	b084      	sub	sp, #16
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	f107 001c 	add.w	r0, r7, #28
 800807e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008084:	2b01      	cmp	r3, #1
 8008086:	d122      	bne.n	80080ce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800809c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80080b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d105      	bne.n	80080c2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f9c0 	bl	8008448 <USB_CoreReset>
 80080c8:	4603      	mov	r3, r0
 80080ca:	73fb      	strb	r3, [r7, #15]
 80080cc:	e01a      	b.n	8008104 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 f9b4 	bl	8008448 <USB_CoreReset>
 80080e0:	4603      	mov	r3, r0
 80080e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80080e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d106      	bne.n	80080f8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	639a      	str	r2, [r3, #56]	; 0x38
 80080f6:	e005      	b.n	8008104 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008106:	2b01      	cmp	r3, #1
 8008108:	d10b      	bne.n	8008122 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	f043 0206 	orr.w	r2, r3, #6
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	f043 0220 	orr.w	r2, r3, #32
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008122:	7bfb      	ldrb	r3, [r7, #15]
}
 8008124:	4618      	mov	r0, r3
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800812e:	b004      	add	sp, #16
 8008130:	4770      	bx	lr

08008132 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008132:	b480      	push	{r7}
 8008134:	b083      	sub	sp, #12
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f043 0201 	orr.w	r2, r3, #1
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	f023 0201 	bic.w	r2, r3, #1
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b084      	sub	sp, #16
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	460b      	mov	r3, r1
 8008180:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008182:	2300      	movs	r3, #0
 8008184:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008192:	78fb      	ldrb	r3, [r7, #3]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d115      	bne.n	80081c4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80081a4:	2001      	movs	r0, #1
 80081a6:	f7fb ff6b 	bl	8004080 <HAL_Delay>
      ms++;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	3301      	adds	r3, #1
 80081ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 f93a 	bl	800842a <USB_GetMode>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d01e      	beq.n	80081fa <USB_SetCurrentMode+0x84>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2b31      	cmp	r3, #49	; 0x31
 80081c0:	d9f0      	bls.n	80081a4 <USB_SetCurrentMode+0x2e>
 80081c2:	e01a      	b.n	80081fa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80081c4:	78fb      	ldrb	r3, [r7, #3]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d115      	bne.n	80081f6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80081d6:	2001      	movs	r0, #1
 80081d8:	f7fb ff52 	bl	8004080 <HAL_Delay>
      ms++;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	3301      	adds	r3, #1
 80081e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f921 	bl	800842a <USB_GetMode>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d005      	beq.n	80081fa <USB_SetCurrentMode+0x84>
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2b31      	cmp	r3, #49	; 0x31
 80081f2:	d9f0      	bls.n	80081d6 <USB_SetCurrentMode+0x60>
 80081f4:	e001      	b.n	80081fa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e005      	b.n	8008206 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2b32      	cmp	r3, #50	; 0x32
 80081fe:	d101      	bne.n	8008204 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e000      	b.n	8008206 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
	...

08008210 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800821a:	2300      	movs	r3, #0
 800821c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	3301      	adds	r3, #1
 8008222:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	4a13      	ldr	r2, [pc, #76]	; (8008274 <USB_FlushTxFifo+0x64>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d901      	bls.n	8008230 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	e01b      	b.n	8008268 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	2b00      	cmp	r3, #0
 8008236:	daf2      	bge.n	800821e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008238:	2300      	movs	r3, #0
 800823a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	019b      	lsls	r3, r3, #6
 8008240:	f043 0220 	orr.w	r2, r3, #32
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	3301      	adds	r3, #1
 800824c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	4a08      	ldr	r2, [pc, #32]	; (8008274 <USB_FlushTxFifo+0x64>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d901      	bls.n	800825a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	e006      	b.n	8008268 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	f003 0320 	and.w	r3, r3, #32
 8008262:	2b20      	cmp	r3, #32
 8008264:	d0f0      	beq.n	8008248 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3714      	adds	r7, #20
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr
 8008274:	00030d40 	.word	0x00030d40

08008278 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008278:	b480      	push	{r7}
 800827a:	b085      	sub	sp, #20
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008280:	2300      	movs	r3, #0
 8008282:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	3301      	adds	r3, #1
 8008288:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	4a11      	ldr	r2, [pc, #68]	; (80082d4 <USB_FlushRxFifo+0x5c>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d901      	bls.n	8008296 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e018      	b.n	80082c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	2b00      	cmp	r3, #0
 800829c:	daf2      	bge.n	8008284 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800829e:	2300      	movs	r3, #0
 80082a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2210      	movs	r2, #16
 80082a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	3301      	adds	r3, #1
 80082ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	4a08      	ldr	r2, [pc, #32]	; (80082d4 <USB_FlushRxFifo+0x5c>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d901      	bls.n	80082ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80082b6:	2303      	movs	r3, #3
 80082b8:	e006      	b.n	80082c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	f003 0310 	and.w	r3, r3, #16
 80082c2:	2b10      	cmp	r3, #16
 80082c4:	d0f0      	beq.n	80082a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3714      	adds	r7, #20
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr
 80082d4:	00030d40 	.word	0x00030d40

080082d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80082d8:	b480      	push	{r7}
 80082da:	b089      	sub	sp, #36	; 0x24
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	4611      	mov	r1, r2
 80082e4:	461a      	mov	r2, r3
 80082e6:	460b      	mov	r3, r1
 80082e8:	71fb      	strb	r3, [r7, #7]
 80082ea:	4613      	mov	r3, r2
 80082ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80082f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d123      	bne.n	8008346 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80082fe:	88bb      	ldrh	r3, [r7, #4]
 8008300:	3303      	adds	r3, #3
 8008302:	089b      	lsrs	r3, r3, #2
 8008304:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008306:	2300      	movs	r3, #0
 8008308:	61bb      	str	r3, [r7, #24]
 800830a:	e018      	b.n	800833e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800830c:	79fb      	ldrb	r3, [r7, #7]
 800830e:	031a      	lsls	r2, r3, #12
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	4413      	add	r3, r2
 8008314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008318:	461a      	mov	r2, r3
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	3301      	adds	r3, #1
 8008324:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	3301      	adds	r3, #1
 800832a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	3301      	adds	r3, #1
 8008330:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	3301      	adds	r3, #1
 8008336:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	3301      	adds	r3, #1
 800833c:	61bb      	str	r3, [r7, #24]
 800833e:	69ba      	ldr	r2, [r7, #24]
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	429a      	cmp	r2, r3
 8008344:	d3e2      	bcc.n	800830c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3724      	adds	r7, #36	; 0x24
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008354:	b480      	push	{r7}
 8008356:	b08b      	sub	sp, #44	; 0x2c
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	4613      	mov	r3, r2
 8008360:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800836a:	88fb      	ldrh	r3, [r7, #6]
 800836c:	089b      	lsrs	r3, r3, #2
 800836e:	b29b      	uxth	r3, r3
 8008370:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008372:	88fb      	ldrh	r3, [r7, #6]
 8008374:	f003 0303 	and.w	r3, r3, #3
 8008378:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800837a:	2300      	movs	r3, #0
 800837c:	623b      	str	r3, [r7, #32]
 800837e:	e014      	b.n	80083aa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838a:	601a      	str	r2, [r3, #0]
    pDest++;
 800838c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838e:	3301      	adds	r3, #1
 8008390:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008394:	3301      	adds	r3, #1
 8008396:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839a:	3301      	adds	r3, #1
 800839c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800839e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a0:	3301      	adds	r3, #1
 80083a2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80083a4:	6a3b      	ldr	r3, [r7, #32]
 80083a6:	3301      	adds	r3, #1
 80083a8:	623b      	str	r3, [r7, #32]
 80083aa:	6a3a      	ldr	r2, [r7, #32]
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d3e6      	bcc.n	8008380 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80083b2:	8bfb      	ldrh	r3, [r7, #30]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d01e      	beq.n	80083f6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80083b8:	2300      	movs	r3, #0
 80083ba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083c2:	461a      	mov	r2, r3
 80083c4:	f107 0310 	add.w	r3, r7, #16
 80083c8:	6812      	ldr	r2, [r2, #0]
 80083ca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80083cc:	693a      	ldr	r2, [r7, #16]
 80083ce:	6a3b      	ldr	r3, [r7, #32]
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	00db      	lsls	r3, r3, #3
 80083d4:	fa22 f303 	lsr.w	r3, r2, r3
 80083d8:	b2da      	uxtb	r2, r3
 80083da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083dc:	701a      	strb	r2, [r3, #0]
      i++;
 80083de:	6a3b      	ldr	r3, [r7, #32]
 80083e0:	3301      	adds	r3, #1
 80083e2:	623b      	str	r3, [r7, #32]
      pDest++;
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	3301      	adds	r3, #1
 80083e8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80083ea:	8bfb      	ldrh	r3, [r7, #30]
 80083ec:	3b01      	subs	r3, #1
 80083ee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80083f0:	8bfb      	ldrh	r3, [r7, #30]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1ea      	bne.n	80083cc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80083f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	372c      	adds	r7, #44	; 0x2c
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008404:	b480      	push	{r7}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	695b      	ldr	r3, [r3, #20]
 8008410:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	4013      	ands	r3, r2
 800841a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800841c:	68fb      	ldr	r3, [r7, #12]
}
 800841e:	4618      	mov	r0, r3
 8008420:	3714      	adds	r7, #20
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800842a:	b480      	push	{r7}
 800842c:	b083      	sub	sp, #12
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	f003 0301 	and.w	r3, r3, #1
}
 800843a:	4618      	mov	r0, r3
 800843c:	370c      	adds	r7, #12
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr
	...

08008448 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008450:	2300      	movs	r3, #0
 8008452:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	3301      	adds	r3, #1
 8008458:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	4a13      	ldr	r2, [pc, #76]	; (80084ac <USB_CoreReset+0x64>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d901      	bls.n	8008466 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008462:	2303      	movs	r3, #3
 8008464:	e01b      	b.n	800849e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	2b00      	cmp	r3, #0
 800846c:	daf2      	bge.n	8008454 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800846e:	2300      	movs	r3, #0
 8008470:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	f043 0201 	orr.w	r2, r3, #1
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	3301      	adds	r3, #1
 8008482:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	4a09      	ldr	r2, [pc, #36]	; (80084ac <USB_CoreReset+0x64>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d901      	bls.n	8008490 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800848c:	2303      	movs	r3, #3
 800848e:	e006      	b.n	800849e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	f003 0301 	and.w	r3, r3, #1
 8008498:	2b01      	cmp	r3, #1
 800849a:	d0f0      	beq.n	800847e <USB_CoreReset+0x36>

  return HAL_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3714      	adds	r7, #20
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	00030d40 	.word	0x00030d40

080084b0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80084b0:	b084      	sub	sp, #16
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b086      	sub	sp, #24
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
 80084ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80084be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80084c2:	2300      	movs	r3, #0
 80084c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80084d0:	461a      	mov	r2, r3
 80084d2:	2300      	movs	r3, #0
 80084d4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008502:	2b00      	cmp	r3, #0
 8008504:	d018      	beq.n	8008538 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008508:	2b01      	cmp	r3, #1
 800850a:	d10a      	bne.n	8008522 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800851a:	f043 0304 	orr.w	r3, r3, #4
 800851e:	6013      	str	r3, [r2, #0]
 8008520:	e014      	b.n	800854c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008530:	f023 0304 	bic.w	r3, r3, #4
 8008534:	6013      	str	r3, [r2, #0]
 8008536:	e009      	b.n	800854c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008546:	f023 0304 	bic.w	r3, r3, #4
 800854a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800854c:	2110      	movs	r1, #16
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7ff fe5e 	bl	8008210 <USB_FlushTxFifo>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d001      	beq.n	800855e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f7ff fe8a 	bl	8008278 <USB_FlushRxFifo>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d001      	beq.n	800856e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800856e:	2300      	movs	r3, #0
 8008570:	613b      	str	r3, [r7, #16]
 8008572:	e015      	b.n	80085a0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	015a      	lsls	r2, r3, #5
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	4413      	add	r3, r2
 800857c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008580:	461a      	mov	r2, r3
 8008582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008586:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	015a      	lsls	r2, r3, #5
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	4413      	add	r3, r2
 8008590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008594:	461a      	mov	r2, r3
 8008596:	2300      	movs	r3, #0
 8008598:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	3301      	adds	r3, #1
 800859e:	613b      	str	r3, [r7, #16]
 80085a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d3e5      	bcc.n	8008574 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085b4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00b      	beq.n	80085da <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085c8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a13      	ldr	r2, [pc, #76]	; (800861c <USB_HostInit+0x16c>)
 80085ce:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a13      	ldr	r2, [pc, #76]	; (8008620 <USB_HostInit+0x170>)
 80085d4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80085d8:	e009      	b.n	80085ee <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2280      	movs	r2, #128	; 0x80
 80085de:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a10      	ldr	r2, [pc, #64]	; (8008624 <USB_HostInit+0x174>)
 80085e4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4a0f      	ldr	r2, [pc, #60]	; (8008628 <USB_HostInit+0x178>)
 80085ea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80085ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d105      	bne.n	8008600 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	f043 0210 	orr.w	r2, r3, #16
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	699a      	ldr	r2, [r3, #24]
 8008604:	4b09      	ldr	r3, [pc, #36]	; (800862c <USB_HostInit+0x17c>)
 8008606:	4313      	orrs	r3, r2
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800860c:	7dfb      	ldrb	r3, [r7, #23]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3718      	adds	r7, #24
 8008612:	46bd      	mov	sp, r7
 8008614:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008618:	b004      	add	sp, #16
 800861a:	4770      	bx	lr
 800861c:	01000200 	.word	0x01000200
 8008620:	00e00300 	.word	0x00e00300
 8008624:	00600080 	.word	0x00600080
 8008628:	004000e0 	.word	0x004000e0
 800862c:	a3200008 	.word	0xa3200008

08008630 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	460b      	mov	r3, r1
 800863a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800864e:	f023 0303 	bic.w	r3, r3, #3
 8008652:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	78fb      	ldrb	r3, [r7, #3]
 800865e:	f003 0303 	and.w	r3, r3, #3
 8008662:	68f9      	ldr	r1, [r7, #12]
 8008664:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008668:	4313      	orrs	r3, r2
 800866a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800866c:	78fb      	ldrb	r3, [r7, #3]
 800866e:	2b01      	cmp	r3, #1
 8008670:	d107      	bne.n	8008682 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008678:	461a      	mov	r2, r3
 800867a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800867e:	6053      	str	r3, [r2, #4]
 8008680:	e009      	b.n	8008696 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008682:	78fb      	ldrb	r3, [r7, #3]
 8008684:	2b02      	cmp	r3, #2
 8008686:	d106      	bne.n	8008696 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800868e:	461a      	mov	r2, r3
 8008690:	f241 7370 	movw	r3, #6000	; 0x1770
 8008694:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3714      	adds	r7, #20
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80086b0:	2300      	movs	r3, #0
 80086b2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80086c4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80086ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086d2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80086d4:	2064      	movs	r0, #100	; 0x64
 80086d6:	f7fb fcd3 	bl	8004080 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80086e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086e6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80086e8:	200a      	movs	r0, #10
 80086ea:	f7fb fcc9 	bl	8004080 <HAL_Delay>

  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3710      	adds	r7, #16
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	460b      	mov	r3, r1
 8008702:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008708:	2300      	movs	r3, #0
 800870a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800871c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d109      	bne.n	800873c <USB_DriveVbus+0x44>
 8008728:	78fb      	ldrb	r3, [r7, #3]
 800872a:	2b01      	cmp	r3, #1
 800872c:	d106      	bne.n	800873c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008736:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800873a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008746:	d109      	bne.n	800875c <USB_DriveVbus+0x64>
 8008748:	78fb      	ldrb	r3, [r7, #3]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d106      	bne.n	800875c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008756:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800875a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr

0800876a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800876a:	b480      	push	{r7}
 800876c:	b085      	sub	sp, #20
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008776:	2300      	movs	r3, #0
 8008778:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	0c5b      	lsrs	r3, r3, #17
 8008788:	f003 0303 	and.w	r3, r3, #3
}
 800878c:	4618      	mov	r0, r3
 800878e:	3714      	adds	r7, #20
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	b29b      	uxth	r3, r3
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3714      	adds	r7, #20
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr
	...

080087bc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b088      	sub	sp, #32
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	4608      	mov	r0, r1
 80087c6:	4611      	mov	r1, r2
 80087c8:	461a      	mov	r2, r3
 80087ca:	4603      	mov	r3, r0
 80087cc:	70fb      	strb	r3, [r7, #3]
 80087ce:	460b      	mov	r3, r1
 80087d0:	70bb      	strb	r3, [r7, #2]
 80087d2:	4613      	mov	r3, r2
 80087d4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80087d6:	2300      	movs	r3, #0
 80087d8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80087de:	78fb      	ldrb	r3, [r7, #3]
 80087e0:	015a      	lsls	r2, r3, #5
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	4413      	add	r3, r2
 80087e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ea:	461a      	mov	r2, r3
 80087ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087f0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80087f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80087f6:	2b03      	cmp	r3, #3
 80087f8:	d87e      	bhi.n	80088f8 <USB_HC_Init+0x13c>
 80087fa:	a201      	add	r2, pc, #4	; (adr r2, 8008800 <USB_HC_Init+0x44>)
 80087fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008800:	08008811 	.word	0x08008811
 8008804:	080088bb 	.word	0x080088bb
 8008808:	08008811 	.word	0x08008811
 800880c:	0800887d 	.word	0x0800887d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008810:	78fb      	ldrb	r3, [r7, #3]
 8008812:	015a      	lsls	r2, r3, #5
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	4413      	add	r3, r2
 8008818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800881c:	461a      	mov	r2, r3
 800881e:	f240 439d 	movw	r3, #1181	; 0x49d
 8008822:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008824:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008828:	2b00      	cmp	r3, #0
 800882a:	da10      	bge.n	800884e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800882c:	78fb      	ldrb	r3, [r7, #3]
 800882e:	015a      	lsls	r2, r3, #5
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	4413      	add	r3, r2
 8008834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	78fa      	ldrb	r2, [r7, #3]
 800883c:	0151      	lsls	r1, r2, #5
 800883e:	693a      	ldr	r2, [r7, #16]
 8008840:	440a      	add	r2, r1
 8008842:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800884a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800884c:	e057      	b.n	80088fe <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008856:	2b00      	cmp	r3, #0
 8008858:	d051      	beq.n	80088fe <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800885a:	78fb      	ldrb	r3, [r7, #3]
 800885c:	015a      	lsls	r2, r3, #5
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	4413      	add	r3, r2
 8008862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	78fa      	ldrb	r2, [r7, #3]
 800886a:	0151      	lsls	r1, r2, #5
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	440a      	add	r2, r1
 8008870:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008874:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008878:	60d3      	str	r3, [r2, #12]
      break;
 800887a:	e040      	b.n	80088fe <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800887c:	78fb      	ldrb	r3, [r7, #3]
 800887e:	015a      	lsls	r2, r3, #5
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	4413      	add	r3, r2
 8008884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008888:	461a      	mov	r2, r3
 800888a:	f240 639d 	movw	r3, #1693	; 0x69d
 800888e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008890:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008894:	2b00      	cmp	r3, #0
 8008896:	da34      	bge.n	8008902 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008898:	78fb      	ldrb	r3, [r7, #3]
 800889a:	015a      	lsls	r2, r3, #5
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	4413      	add	r3, r2
 80088a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	78fa      	ldrb	r2, [r7, #3]
 80088a8:	0151      	lsls	r1, r2, #5
 80088aa:	693a      	ldr	r2, [r7, #16]
 80088ac:	440a      	add	r2, r1
 80088ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088b6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80088b8:	e023      	b.n	8008902 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80088ba:	78fb      	ldrb	r3, [r7, #3]
 80088bc:	015a      	lsls	r2, r3, #5
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	4413      	add	r3, r2
 80088c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088c6:	461a      	mov	r2, r3
 80088c8:	f240 2325 	movw	r3, #549	; 0x225
 80088cc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80088ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	da17      	bge.n	8008906 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80088d6:	78fb      	ldrb	r3, [r7, #3]
 80088d8:	015a      	lsls	r2, r3, #5
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	4413      	add	r3, r2
 80088de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	78fa      	ldrb	r2, [r7, #3]
 80088e6:	0151      	lsls	r1, r2, #5
 80088e8:	693a      	ldr	r2, [r7, #16]
 80088ea:	440a      	add	r2, r1
 80088ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088f0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80088f4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80088f6:	e006      	b.n	8008906 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	77fb      	strb	r3, [r7, #31]
      break;
 80088fc:	e004      	b.n	8008908 <USB_HC_Init+0x14c>
      break;
 80088fe:	bf00      	nop
 8008900:	e002      	b.n	8008908 <USB_HC_Init+0x14c>
      break;
 8008902:	bf00      	nop
 8008904:	e000      	b.n	8008908 <USB_HC_Init+0x14c>
      break;
 8008906:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008908:	78fb      	ldrb	r3, [r7, #3]
 800890a:	015a      	lsls	r2, r3, #5
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	4413      	add	r3, r2
 8008910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	78fa      	ldrb	r2, [r7, #3]
 8008918:	0151      	lsls	r1, r2, #5
 800891a:	693a      	ldr	r2, [r7, #16]
 800891c:	440a      	add	r2, r1
 800891e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008922:	f043 0302 	orr.w	r3, r3, #2
 8008926:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800892e:	699a      	ldr	r2, [r3, #24]
 8008930:	78fb      	ldrb	r3, [r7, #3]
 8008932:	f003 030f 	and.w	r3, r3, #15
 8008936:	2101      	movs	r1, #1
 8008938:	fa01 f303 	lsl.w	r3, r1, r3
 800893c:	6939      	ldr	r1, [r7, #16]
 800893e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008942:	4313      	orrs	r3, r2
 8008944:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	699b      	ldr	r3, [r3, #24]
 800894a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008952:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008956:	2b00      	cmp	r3, #0
 8008958:	da03      	bge.n	8008962 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800895a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800895e:	61bb      	str	r3, [r7, #24]
 8008960:	e001      	b.n	8008966 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8008962:	2300      	movs	r3, #0
 8008964:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f7ff feff 	bl	800876a <USB_GetHostSpeed>
 800896c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800896e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008972:	2b02      	cmp	r3, #2
 8008974:	d106      	bne.n	8008984 <USB_HC_Init+0x1c8>
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2b02      	cmp	r3, #2
 800897a:	d003      	beq.n	8008984 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800897c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008980:	617b      	str	r3, [r7, #20]
 8008982:	e001      	b.n	8008988 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008984:	2300      	movs	r3, #0
 8008986:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008988:	787b      	ldrb	r3, [r7, #1]
 800898a:	059b      	lsls	r3, r3, #22
 800898c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008990:	78bb      	ldrb	r3, [r7, #2]
 8008992:	02db      	lsls	r3, r3, #11
 8008994:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008998:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800899a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800899e:	049b      	lsls	r3, r3, #18
 80089a0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80089a4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80089a6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80089a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80089ac:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80089b2:	78fb      	ldrb	r3, [r7, #3]
 80089b4:	0159      	lsls	r1, r3, #5
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	440b      	add	r3, r1
 80089ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089be:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80089c4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80089c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80089ca:	2b03      	cmp	r3, #3
 80089cc:	d003      	beq.n	80089d6 <USB_HC_Init+0x21a>
 80089ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d10f      	bne.n	80089f6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80089d6:	78fb      	ldrb	r3, [r7, #3]
 80089d8:	015a      	lsls	r2, r3, #5
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	4413      	add	r3, r2
 80089de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	78fa      	ldrb	r2, [r7, #3]
 80089e6:	0151      	lsls	r1, r2, #5
 80089e8:	693a      	ldr	r2, [r7, #16]
 80089ea:	440a      	add	r2, r1
 80089ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80089f4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80089f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3720      	adds	r7, #32
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b08c      	sub	sp, #48	; 0x30
 8008a04:	af02      	add	r7, sp, #8
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	785b      	ldrb	r3, [r3, #1]
 8008a16:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008a18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a1c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d02d      	beq.n	8008a86 <USB_HC_StartXfer+0x86>
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	791b      	ldrb	r3, [r3, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d129      	bne.n	8008a86 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008a32:	79fb      	ldrb	r3, [r7, #7]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d117      	bne.n	8008a68 <USB_HC_StartXfer+0x68>
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	79db      	ldrb	r3, [r3, #7]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d003      	beq.n	8008a48 <USB_HC_StartXfer+0x48>
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	79db      	ldrb	r3, [r3, #7]
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	d10f      	bne.n	8008a68 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	015a      	lsls	r2, r3, #5
 8008a4c:	6a3b      	ldr	r3, [r7, #32]
 8008a4e:	4413      	add	r3, r2
 8008a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	69fa      	ldr	r2, [r7, #28]
 8008a58:	0151      	lsls	r1, r2, #5
 8008a5a:	6a3a      	ldr	r2, [r7, #32]
 8008a5c:	440a      	add	r2, r1
 8008a5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a66:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008a68:	79fb      	ldrb	r3, [r7, #7]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10b      	bne.n	8008a86 <USB_HC_StartXfer+0x86>
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	795b      	ldrb	r3, [r3, #5]
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d107      	bne.n	8008a86 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	785b      	ldrb	r3, [r3, #1]
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	f000 fa0f 	bl	8008ea0 <USB_DoPing>
      return HAL_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	e0f8      	b.n	8008c78 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	695b      	ldr	r3, [r3, #20]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d018      	beq.n	8008ac0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	695b      	ldr	r3, [r3, #20]
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	8912      	ldrh	r2, [r2, #8]
 8008a96:	4413      	add	r3, r2
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	68ba      	ldr	r2, [r7, #8]
 8008a9c:	8912      	ldrh	r2, [r2, #8]
 8008a9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008aa2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008aa4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008aa6:	8b7b      	ldrh	r3, [r7, #26]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d90b      	bls.n	8008ac4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008aac:	8b7b      	ldrh	r3, [r7, #26]
 8008aae:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008ab0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	8912      	ldrh	r2, [r2, #8]
 8008ab6:	fb03 f202 	mul.w	r2, r3, r2
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	611a      	str	r2, [r3, #16]
 8008abe:	e001      	b.n	8008ac4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	78db      	ldrb	r3, [r3, #3]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d007      	beq.n	8008adc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008acc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008ace:	68ba      	ldr	r2, [r7, #8]
 8008ad0:	8912      	ldrh	r2, [r2, #8]
 8008ad2:	fb03 f202 	mul.w	r2, r3, r2
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	611a      	str	r2, [r3, #16]
 8008ada:	e003      	b.n	8008ae4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	695a      	ldr	r2, [r3, #20]
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008aec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008aee:	04d9      	lsls	r1, r3, #19
 8008af0:	4b63      	ldr	r3, [pc, #396]	; (8008c80 <USB_HC_StartXfer+0x280>)
 8008af2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008af4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	7a9b      	ldrb	r3, [r3, #10]
 8008afa:	075b      	lsls	r3, r3, #29
 8008afc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008b00:	69f9      	ldr	r1, [r7, #28]
 8008b02:	0148      	lsls	r0, r1, #5
 8008b04:	6a39      	ldr	r1, [r7, #32]
 8008b06:	4401      	add	r1, r0
 8008b08:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008b0c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008b0e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008b10:	79fb      	ldrb	r3, [r7, #7]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d009      	beq.n	8008b2a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	68d9      	ldr	r1, [r3, #12]
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	015a      	lsls	r2, r3, #5
 8008b1e:	6a3b      	ldr	r3, [r7, #32]
 8008b20:	4413      	add	r3, r2
 8008b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b26:	460a      	mov	r2, r1
 8008b28:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008b2a:	6a3b      	ldr	r3, [r7, #32]
 8008b2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	f003 0301 	and.w	r3, r3, #1
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	bf0c      	ite	eq
 8008b3a:	2301      	moveq	r3, #1
 8008b3c:	2300      	movne	r3, #0
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	015a      	lsls	r2, r3, #5
 8008b46:	6a3b      	ldr	r3, [r7, #32]
 8008b48:	4413      	add	r3, r2
 8008b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	69fa      	ldr	r2, [r7, #28]
 8008b52:	0151      	lsls	r1, r2, #5
 8008b54:	6a3a      	ldr	r2, [r7, #32]
 8008b56:	440a      	add	r2, r1
 8008b58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b5c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008b60:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	015a      	lsls	r2, r3, #5
 8008b66:	6a3b      	ldr	r3, [r7, #32]
 8008b68:	4413      	add	r3, r2
 8008b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	7e7b      	ldrb	r3, [r7, #25]
 8008b72:	075b      	lsls	r3, r3, #29
 8008b74:	69f9      	ldr	r1, [r7, #28]
 8008b76:	0148      	lsls	r0, r1, #5
 8008b78:	6a39      	ldr	r1, [r7, #32]
 8008b7a:	4401      	add	r1, r0
 8008b7c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008b80:	4313      	orrs	r3, r2
 8008b82:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	015a      	lsls	r2, r3, #5
 8008b88:	6a3b      	ldr	r3, [r7, #32]
 8008b8a:	4413      	add	r3, r2
 8008b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008b9a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	78db      	ldrb	r3, [r3, #3]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d004      	beq.n	8008bae <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008baa:	613b      	str	r3, [r7, #16]
 8008bac:	e003      	b.n	8008bb6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008bb4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008bbc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	015a      	lsls	r2, r3, #5
 8008bc2:	6a3b      	ldr	r3, [r7, #32]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bca:	461a      	mov	r2, r3
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008bd0:	79fb      	ldrb	r3, [r7, #7]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d001      	beq.n	8008bda <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	e04e      	b.n	8008c78 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	78db      	ldrb	r3, [r3, #3]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d149      	bne.n	8008c76 <USB_HC_StartXfer+0x276>
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	695b      	ldr	r3, [r3, #20]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d045      	beq.n	8008c76 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	79db      	ldrb	r3, [r3, #7]
 8008bee:	2b03      	cmp	r3, #3
 8008bf0:	d830      	bhi.n	8008c54 <USB_HC_StartXfer+0x254>
 8008bf2:	a201      	add	r2, pc, #4	; (adr r2, 8008bf8 <USB_HC_StartXfer+0x1f8>)
 8008bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf8:	08008c09 	.word	0x08008c09
 8008bfc:	08008c2d 	.word	0x08008c2d
 8008c00:	08008c09 	.word	0x08008c09
 8008c04:	08008c2d 	.word	0x08008c2d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	695b      	ldr	r3, [r3, #20]
 8008c0c:	3303      	adds	r3, #3
 8008c0e:	089b      	lsrs	r3, r3, #2
 8008c10:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008c12:	8afa      	ldrh	r2, [r7, #22]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d91c      	bls.n	8008c58 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	f043 0220 	orr.w	r2, r3, #32
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	619a      	str	r2, [r3, #24]
        }
        break;
 8008c2a:	e015      	b.n	8008c58 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	695b      	ldr	r3, [r3, #20]
 8008c30:	3303      	adds	r3, #3
 8008c32:	089b      	lsrs	r3, r3, #2
 8008c34:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008c36:	8afa      	ldrh	r2, [r7, #22]
 8008c38:	6a3b      	ldr	r3, [r7, #32]
 8008c3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d90a      	bls.n	8008c5c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	619a      	str	r2, [r3, #24]
        }
        break;
 8008c52:	e003      	b.n	8008c5c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008c54:	bf00      	nop
 8008c56:	e002      	b.n	8008c5e <USB_HC_StartXfer+0x25e>
        break;
 8008c58:	bf00      	nop
 8008c5a:	e000      	b.n	8008c5e <USB_HC_StartXfer+0x25e>
        break;
 8008c5c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	68d9      	ldr	r1, [r3, #12]
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	785a      	ldrb	r2, [r3, #1]
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	695b      	ldr	r3, [r3, #20]
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	2000      	movs	r0, #0
 8008c6e:	9000      	str	r0, [sp, #0]
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f7ff fb31 	bl	80082d8 <USB_WritePacket>
  }

  return HAL_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3728      	adds	r7, #40	; 0x28
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	1ff80000 	.word	0x1ff80000

08008c84 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b085      	sub	sp, #20
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c96:	695b      	ldr	r3, [r3, #20]
 8008c98:	b29b      	uxth	r3, r3
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3714      	adds	r7, #20
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr

08008ca6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008ca6:	b480      	push	{r7}
 8008ca8:	b089      	sub	sp, #36	; 0x24
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	460b      	mov	r3, r1
 8008cb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008cb6:	78fb      	ldrb	r3, [r7, #3]
 8008cb8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	015a      	lsls	r2, r3, #5
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	0c9b      	lsrs	r3, r3, #18
 8008cce:	f003 0303 	and.w	r3, r3, #3
 8008cd2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	015a      	lsls	r2, r3, #5
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	4413      	add	r3, r2
 8008cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	0fdb      	lsrs	r3, r3, #31
 8008ce4:	f003 0301 	and.w	r3, r3, #1
 8008ce8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	f003 0320 	and.w	r3, r3, #32
 8008cf2:	2b20      	cmp	r3, #32
 8008cf4:	d104      	bne.n	8008d00 <USB_HC_Halt+0x5a>
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d101      	bne.n	8008d00 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	e0c8      	b.n	8008e92 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d002      	beq.n	8008d0c <USB_HC_Halt+0x66>
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d163      	bne.n	8008dd4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	015a      	lsls	r2, r3, #5
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	4413      	add	r3, r2
 8008d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	69ba      	ldr	r2, [r7, #24]
 8008d1c:	0151      	lsls	r1, r2, #5
 8008d1e:	69fa      	ldr	r2, [r7, #28]
 8008d20:	440a      	add	r2, r1
 8008d22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d2a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	f003 0320 	and.w	r3, r3, #32
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f040 80ab 	bne.w	8008e90 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d133      	bne.n	8008dae <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	015a      	lsls	r2, r3, #5
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	69ba      	ldr	r2, [r7, #24]
 8008d56:	0151      	lsls	r1, r2, #5
 8008d58:	69fa      	ldr	r2, [r7, #28]
 8008d5a:	440a      	add	r2, r1
 8008d5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d64:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	015a      	lsls	r2, r3, #5
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	69ba      	ldr	r2, [r7, #24]
 8008d76:	0151      	lsls	r1, r2, #5
 8008d78:	69fa      	ldr	r2, [r7, #28]
 8008d7a:	440a      	add	r2, r1
 8008d7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d84:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d92:	d81d      	bhi.n	8008dd0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	015a      	lsls	r2, r3, #5
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008da6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008daa:	d0ec      	beq.n	8008d86 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008dac:	e070      	b.n	8008e90 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	015a      	lsls	r2, r3, #5
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	4413      	add	r3, r2
 8008db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	69ba      	ldr	r2, [r7, #24]
 8008dbe:	0151      	lsls	r1, r2, #5
 8008dc0:	69fa      	ldr	r2, [r7, #28]
 8008dc2:	440a      	add	r2, r1
 8008dc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008dc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008dcc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008dce:	e05f      	b.n	8008e90 <USB_HC_Halt+0x1ea>
            break;
 8008dd0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008dd2:	e05d      	b.n	8008e90 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008dd4:	69bb      	ldr	r3, [r7, #24]
 8008dd6:	015a      	lsls	r2, r3, #5
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	4413      	add	r3, r2
 8008ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	69ba      	ldr	r2, [r7, #24]
 8008de4:	0151      	lsls	r1, r2, #5
 8008de6:	69fa      	ldr	r2, [r7, #28]
 8008de8:	440a      	add	r2, r1
 8008dea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008dee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008df2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dfa:	691b      	ldr	r3, [r3, #16]
 8008dfc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d133      	bne.n	8008e6c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	015a      	lsls	r2, r3, #5
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	69ba      	ldr	r2, [r7, #24]
 8008e14:	0151      	lsls	r1, r2, #5
 8008e16:	69fa      	ldr	r2, [r7, #28]
 8008e18:	440a      	add	r2, r1
 8008e1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e22:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	015a      	lsls	r2, r3, #5
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	69ba      	ldr	r2, [r7, #24]
 8008e34:	0151      	lsls	r1, r2, #5
 8008e36:	69fa      	ldr	r2, [r7, #28]
 8008e38:	440a      	add	r2, r1
 8008e3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e42:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	3301      	adds	r3, #1
 8008e48:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e50:	d81d      	bhi.n	8008e8e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	015a      	lsls	r2, r3, #5
 8008e56:	69fb      	ldr	r3, [r7, #28]
 8008e58:	4413      	add	r3, r2
 8008e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e68:	d0ec      	beq.n	8008e44 <USB_HC_Halt+0x19e>
 8008e6a:	e011      	b.n	8008e90 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	015a      	lsls	r2, r3, #5
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	4413      	add	r3, r2
 8008e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	69ba      	ldr	r2, [r7, #24]
 8008e7c:	0151      	lsls	r1, r2, #5
 8008e7e:	69fa      	ldr	r2, [r7, #28]
 8008e80:	440a      	add	r2, r1
 8008e82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e8a:	6013      	str	r3, [r2, #0]
 8008e8c:	e000      	b.n	8008e90 <USB_HC_Halt+0x1ea>
          break;
 8008e8e:	bf00      	nop
    }
  }

  return HAL_OK;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3724      	adds	r7, #36	; 0x24
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
	...

08008ea0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b087      	sub	sp, #28
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008eb0:	78fb      	ldrb	r3, [r7, #3]
 8008eb2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	04da      	lsls	r2, r3, #19
 8008ebc:	4b15      	ldr	r3, [pc, #84]	; (8008f14 <USB_DoPing+0x74>)
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	693a      	ldr	r2, [r7, #16]
 8008ec2:	0151      	lsls	r1, r2, #5
 8008ec4:	697a      	ldr	r2, [r7, #20]
 8008ec6:	440a      	add	r2, r1
 8008ec8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ecc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ed0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	015a      	lsls	r2, r3, #5
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	4413      	add	r3, r2
 8008eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ee8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ef0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	015a      	lsls	r2, r3, #5
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	4413      	add	r3, r2
 8008efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008efe:	461a      	mov	r2, r3
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	371c      	adds	r7, #28
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	1ff80000 	.word	0x1ff80000

08008f18 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b088      	sub	sp, #32
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008f20:	2300      	movs	r3, #0
 8008f22:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f7ff f911 	bl	8008154 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008f32:	2110      	movs	r1, #16
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f7ff f96b 	bl	8008210 <USB_FlushTxFifo>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d001      	beq.n	8008f44 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f7ff f997 	bl	8008278 <USB_FlushRxFifo>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d001      	beq.n	8008f54 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008f54:	2300      	movs	r3, #0
 8008f56:	61bb      	str	r3, [r7, #24]
 8008f58:	e01f      	b.n	8008f9a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	015a      	lsls	r2, r3, #5
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	4413      	add	r3, r2
 8008f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f70:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f78:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f80:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	015a      	lsls	r2, r3, #5
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	4413      	add	r3, r2
 8008f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f8e:	461a      	mov	r2, r3
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	3301      	adds	r3, #1
 8008f98:	61bb      	str	r3, [r7, #24]
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	2b0f      	cmp	r3, #15
 8008f9e:	d9dc      	bls.n	8008f5a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	61bb      	str	r3, [r7, #24]
 8008fa4:	e034      	b.n	8009010 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	015a      	lsls	r2, r3, #5
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	4413      	add	r3, r2
 8008fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fbc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008fc4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008fcc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	015a      	lsls	r2, r3, #5
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fda:	461a      	mov	r2, r3
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008fec:	d80c      	bhi.n	8009008 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	015a      	lsls	r2, r3, #5
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009000:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009004:	d0ec      	beq.n	8008fe0 <USB_StopHost+0xc8>
 8009006:	e000      	b.n	800900a <USB_StopHost+0xf2>
        break;
 8009008:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	3301      	adds	r3, #1
 800900e:	61bb      	str	r3, [r7, #24]
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	2b0f      	cmp	r3, #15
 8009014:	d9c7      	bls.n	8008fa6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800901c:	461a      	mov	r2, r3
 800901e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009022:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800902a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f7ff f880 	bl	8008132 <USB_EnableGlobalInt>

  return ret;
 8009032:	7ffb      	ldrb	r3, [r7, #31]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3720      	adds	r7, #32
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800903c:	b590      	push	{r4, r7, lr}
 800903e:	b089      	sub	sp, #36	; 0x24
 8009040:	af04      	add	r7, sp, #16
 8009042:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009044:	2301      	movs	r3, #1
 8009046:	2202      	movs	r2, #2
 8009048:	2102      	movs	r1, #2
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fc66 	bl	800991c <USBH_FindInterface>
 8009050:	4603      	mov	r3, r0
 8009052:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009054:	7bfb      	ldrb	r3, [r7, #15]
 8009056:	2bff      	cmp	r3, #255	; 0xff
 8009058:	d002      	beq.n	8009060 <USBH_CDC_InterfaceInit+0x24>
 800905a:	7bfb      	ldrb	r3, [r7, #15]
 800905c:	2b01      	cmp	r3, #1
 800905e:	d901      	bls.n	8009064 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009060:	2302      	movs	r3, #2
 8009062:	e13d      	b.n	80092e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009064:	7bfb      	ldrb	r3, [r7, #15]
 8009066:	4619      	mov	r1, r3
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fc3b 	bl	80098e4 <USBH_SelectInterface>
 800906e:	4603      	mov	r3, r0
 8009070:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009072:	7bbb      	ldrb	r3, [r7, #14]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d001      	beq.n	800907c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009078:	2302      	movs	r3, #2
 800907a:	e131      	b.n	80092e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009082:	2050      	movs	r0, #80	; 0x50
 8009084:	f7f8 f89e 	bl	80011c4 <malloc>
 8009088:	4603      	mov	r3, r0
 800908a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009092:	69db      	ldr	r3, [r3, #28]
 8009094:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d101      	bne.n	80090a0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800909c:	2302      	movs	r3, #2
 800909e:	e11f      	b.n	80092e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80090a0:	2250      	movs	r2, #80	; 0x50
 80090a2:	2100      	movs	r1, #0
 80090a4:	68b8      	ldr	r0, [r7, #8]
 80090a6:	f7f8 f937 	bl	8001318 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80090aa:	7bfb      	ldrb	r3, [r7, #15]
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	211a      	movs	r1, #26
 80090b0:	fb01 f303 	mul.w	r3, r1, r3
 80090b4:	4413      	add	r3, r2
 80090b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	b25b      	sxtb	r3, r3
 80090be:	2b00      	cmp	r3, #0
 80090c0:	da15      	bge.n	80090ee <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80090c2:	7bfb      	ldrb	r3, [r7, #15]
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	211a      	movs	r1, #26
 80090c8:	fb01 f303 	mul.w	r3, r1, r3
 80090cc:	4413      	add	r3, r2
 80090ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80090d2:	781a      	ldrb	r2, [r3, #0]
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80090d8:	7bfb      	ldrb	r3, [r7, #15]
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	211a      	movs	r1, #26
 80090de:	fb01 f303 	mul.w	r3, r1, r3
 80090e2:	4413      	add	r3, r2
 80090e4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80090e8:	881a      	ldrh	r2, [r3, #0]
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	785b      	ldrb	r3, [r3, #1]
 80090f2:	4619      	mov	r1, r3
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f001 ff2c 	bl	800af52 <USBH_AllocPipe>
 80090fa:	4603      	mov	r3, r0
 80090fc:	461a      	mov	r2, r3
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	7819      	ldrb	r1, [r3, #0]
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	7858      	ldrb	r0, [r3, #1]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009116:	68ba      	ldr	r2, [r7, #8]
 8009118:	8952      	ldrh	r2, [r2, #10]
 800911a:	9202      	str	r2, [sp, #8]
 800911c:	2203      	movs	r2, #3
 800911e:	9201      	str	r2, [sp, #4]
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	4623      	mov	r3, r4
 8009124:	4602      	mov	r2, r0
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f001 fee4 	bl	800aef4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	2200      	movs	r2, #0
 8009132:	4619      	mov	r1, r3
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f002 f9f3 	bl	800b520 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800913a:	2300      	movs	r3, #0
 800913c:	2200      	movs	r2, #0
 800913e:	210a      	movs	r1, #10
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 fbeb 	bl	800991c <USBH_FindInterface>
 8009146:	4603      	mov	r3, r0
 8009148:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800914a:	7bfb      	ldrb	r3, [r7, #15]
 800914c:	2bff      	cmp	r3, #255	; 0xff
 800914e:	d002      	beq.n	8009156 <USBH_CDC_InterfaceInit+0x11a>
 8009150:	7bfb      	ldrb	r3, [r7, #15]
 8009152:	2b01      	cmp	r3, #1
 8009154:	d901      	bls.n	800915a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009156:	2302      	movs	r3, #2
 8009158:	e0c2      	b.n	80092e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800915a:	7bfb      	ldrb	r3, [r7, #15]
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	211a      	movs	r1, #26
 8009160:	fb01 f303 	mul.w	r3, r1, r3
 8009164:	4413      	add	r3, r2
 8009166:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	b25b      	sxtb	r3, r3
 800916e:	2b00      	cmp	r3, #0
 8009170:	da16      	bge.n	80091a0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009172:	7bfb      	ldrb	r3, [r7, #15]
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	211a      	movs	r1, #26
 8009178:	fb01 f303 	mul.w	r3, r1, r3
 800917c:	4413      	add	r3, r2
 800917e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009182:	781a      	ldrb	r2, [r3, #0]
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009188:	7bfb      	ldrb	r3, [r7, #15]
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	211a      	movs	r1, #26
 800918e:	fb01 f303 	mul.w	r3, r1, r3
 8009192:	4413      	add	r3, r2
 8009194:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009198:	881a      	ldrh	r2, [r3, #0]
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	835a      	strh	r2, [r3, #26]
 800919e:	e015      	b.n	80091cc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	211a      	movs	r1, #26
 80091a6:	fb01 f303 	mul.w	r3, r1, r3
 80091aa:	4413      	add	r3, r2
 80091ac:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80091b0:	781a      	ldrb	r2, [r3, #0]
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80091b6:	7bfb      	ldrb	r3, [r7, #15]
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	211a      	movs	r1, #26
 80091bc:	fb01 f303 	mul.w	r3, r1, r3
 80091c0:	4413      	add	r3, r2
 80091c2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80091c6:	881a      	ldrh	r2, [r3, #0]
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	211a      	movs	r1, #26
 80091d2:	fb01 f303 	mul.w	r3, r1, r3
 80091d6:	4413      	add	r3, r2
 80091d8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	b25b      	sxtb	r3, r3
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	da16      	bge.n	8009212 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80091e4:	7bfb      	ldrb	r3, [r7, #15]
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	211a      	movs	r1, #26
 80091ea:	fb01 f303 	mul.w	r3, r1, r3
 80091ee:	4413      	add	r3, r2
 80091f0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80091f4:	781a      	ldrb	r2, [r3, #0]
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80091fa:	7bfb      	ldrb	r3, [r7, #15]
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	211a      	movs	r1, #26
 8009200:	fb01 f303 	mul.w	r3, r1, r3
 8009204:	4413      	add	r3, r2
 8009206:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800920a:	881a      	ldrh	r2, [r3, #0]
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	835a      	strh	r2, [r3, #26]
 8009210:	e015      	b.n	800923e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009212:	7bfb      	ldrb	r3, [r7, #15]
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	211a      	movs	r1, #26
 8009218:	fb01 f303 	mul.w	r3, r1, r3
 800921c:	4413      	add	r3, r2
 800921e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009222:	781a      	ldrb	r2, [r3, #0]
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009228:	7bfb      	ldrb	r3, [r7, #15]
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	211a      	movs	r1, #26
 800922e:	fb01 f303 	mul.w	r3, r1, r3
 8009232:	4413      	add	r3, r2
 8009234:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009238:	881a      	ldrh	r2, [r3, #0]
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	7b9b      	ldrb	r3, [r3, #14]
 8009242:	4619      	mov	r1, r3
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f001 fe84 	bl	800af52 <USBH_AllocPipe>
 800924a:	4603      	mov	r3, r0
 800924c:	461a      	mov	r2, r3
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	7bdb      	ldrb	r3, [r3, #15]
 8009256:	4619      	mov	r1, r3
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f001 fe7a 	bl	800af52 <USBH_AllocPipe>
 800925e:	4603      	mov	r3, r0
 8009260:	461a      	mov	r2, r3
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	7b59      	ldrb	r1, [r3, #13]
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	7b98      	ldrb	r0, [r3, #14]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800927a:	68ba      	ldr	r2, [r7, #8]
 800927c:	8b12      	ldrh	r2, [r2, #24]
 800927e:	9202      	str	r2, [sp, #8]
 8009280:	2202      	movs	r2, #2
 8009282:	9201      	str	r2, [sp, #4]
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	4623      	mov	r3, r4
 8009288:	4602      	mov	r2, r0
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f001 fe32 	bl	800aef4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	7b19      	ldrb	r1, [r3, #12]
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	7bd8      	ldrb	r0, [r3, #15]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80092a4:	68ba      	ldr	r2, [r7, #8]
 80092a6:	8b52      	ldrh	r2, [r2, #26]
 80092a8:	9202      	str	r2, [sp, #8]
 80092aa:	2202      	movs	r2, #2
 80092ac:	9201      	str	r2, [sp, #4]
 80092ae:	9300      	str	r3, [sp, #0]
 80092b0:	4623      	mov	r3, r4
 80092b2:	4602      	mov	r2, r0
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f001 fe1d 	bl	800aef4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	7b5b      	ldrb	r3, [r3, #13]
 80092c6:	2200      	movs	r2, #0
 80092c8:	4619      	mov	r1, r3
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f002 f928 	bl	800b520 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	7b1b      	ldrb	r3, [r3, #12]
 80092d4:	2200      	movs	r2, #0
 80092d6:	4619      	mov	r1, r3
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f002 f921 	bl	800b520 <USBH_LL_SetToggle>

  return USBH_OK;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3714      	adds	r7, #20
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd90      	pop	{r4, r7, pc}

080092e8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092f6:	69db      	ldr	r3, [r3, #28]
 80092f8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00e      	beq.n	8009320 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	4619      	mov	r1, r3
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f001 fe12 	bl	800af32 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	4619      	mov	r1, r3
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f001 fe3d 	bl	800af94 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2200      	movs	r2, #0
 800931e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	7b1b      	ldrb	r3, [r3, #12]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00e      	beq.n	8009346 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	7b1b      	ldrb	r3, [r3, #12]
 800932c:	4619      	mov	r1, r3
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f001 fdff 	bl	800af32 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	7b1b      	ldrb	r3, [r3, #12]
 8009338:	4619      	mov	r1, r3
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f001 fe2a 	bl	800af94 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2200      	movs	r2, #0
 8009344:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	7b5b      	ldrb	r3, [r3, #13]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00e      	beq.n	800936c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	7b5b      	ldrb	r3, [r3, #13]
 8009352:	4619      	mov	r1, r3
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f001 fdec 	bl	800af32 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	7b5b      	ldrb	r3, [r3, #13]
 800935e:	4619      	mov	r1, r3
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f001 fe17 	bl	800af94 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2200      	movs	r2, #0
 800936a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009372:	69db      	ldr	r3, [r3, #28]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00b      	beq.n	8009390 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800937e:	69db      	ldr	r3, [r3, #28]
 8009380:	4618      	mov	r0, r3
 8009382:	f7f7 ff27 	bl	80011d4 <free>
    phost->pActiveClass->pData = 0U;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800938c:	2200      	movs	r2, #0
 800938e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b084      	sub	sp, #16
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093a8:	69db      	ldr	r3, [r3, #28]
 80093aa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	3340      	adds	r3, #64	; 0x40
 80093b0:	4619      	mov	r1, r3
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 f8b1 	bl	800951a <GetLineCoding>
 80093b8:	4603      	mov	r3, r0
 80093ba:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80093bc:	7afb      	ldrb	r3, [r7, #11]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d105      	bne.n	80093ce <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80093c8:	2102      	movs	r1, #2
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80093ce:	7afb      	ldrb	r3, [r7, #11]
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3710      	adds	r7, #16
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80093e0:	2301      	movs	r3, #1
 80093e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80093e4:	2300      	movs	r3, #0
 80093e6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093ee:	69db      	ldr	r3, [r3, #28]
 80093f0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80093f8:	2b04      	cmp	r3, #4
 80093fa:	d877      	bhi.n	80094ec <USBH_CDC_Process+0x114>
 80093fc:	a201      	add	r2, pc, #4	; (adr r2, 8009404 <USBH_CDC_Process+0x2c>)
 80093fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009402:	bf00      	nop
 8009404:	08009419 	.word	0x08009419
 8009408:	0800941f 	.word	0x0800941f
 800940c:	0800944f 	.word	0x0800944f
 8009410:	080094c3 	.word	0x080094c3
 8009414:	080094d1 	.word	0x080094d1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	73fb      	strb	r3, [r7, #15]
      break;
 800941c:	e06d      	b.n	80094fa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009422:	4619      	mov	r1, r3
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 f897 	bl	8009558 <SetLineCoding>
 800942a:	4603      	mov	r3, r0
 800942c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800942e:	7bbb      	ldrb	r3, [r7, #14]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d104      	bne.n	800943e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	2202      	movs	r2, #2
 8009438:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800943c:	e058      	b.n	80094f0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800943e:	7bbb      	ldrb	r3, [r7, #14]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d055      	beq.n	80094f0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	2204      	movs	r2, #4
 8009448:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800944c:	e050      	b.n	80094f0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	3340      	adds	r3, #64	; 0x40
 8009452:	4619      	mov	r1, r3
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 f860 	bl	800951a <GetLineCoding>
 800945a:	4603      	mov	r3, r0
 800945c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800945e:	7bbb      	ldrb	r3, [r7, #14]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d126      	bne.n	80094b2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	2200      	movs	r2, #0
 8009468:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009476:	791b      	ldrb	r3, [r3, #4]
 8009478:	429a      	cmp	r2, r3
 800947a:	d13b      	bne.n	80094f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009486:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009488:	429a      	cmp	r2, r3
 800948a:	d133      	bne.n	80094f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009496:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009498:	429a      	cmp	r2, r3
 800949a:	d12b      	bne.n	80094f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094a4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d124      	bne.n	80094f4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 f958 	bl	8009760 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80094b0:	e020      	b.n	80094f4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80094b2:	7bbb      	ldrb	r3, [r7, #14]
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d01d      	beq.n	80094f4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	2204      	movs	r2, #4
 80094bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80094c0:	e018      	b.n	80094f4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f867 	bl	8009596 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 f8da 	bl	8009682 <CDC_ProcessReception>
      break;
 80094ce:	e014      	b.n	80094fa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80094d0:	2100      	movs	r1, #0
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 ffef 	bl	800a4b6 <USBH_ClrFeature>
 80094d8:	4603      	mov	r3, r0
 80094da:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80094dc:	7bbb      	ldrb	r3, [r7, #14]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d10a      	bne.n	80094f8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	2200      	movs	r2, #0
 80094e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80094ea:	e005      	b.n	80094f8 <USBH_CDC_Process+0x120>

    default:
      break;
 80094ec:	bf00      	nop
 80094ee:	e004      	b.n	80094fa <USBH_CDC_Process+0x122>
      break;
 80094f0:	bf00      	nop
 80094f2:	e002      	b.n	80094fa <USBH_CDC_Process+0x122>
      break;
 80094f4:	bf00      	nop
 80094f6:	e000      	b.n	80094fa <USBH_CDC_Process+0x122>
      break;
 80094f8:	bf00      	nop

  }

  return status;
 80094fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3710      	adds	r7, #16
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	370c      	adds	r7, #12
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr

0800951a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b082      	sub	sp, #8
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
 8009522:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	22a1      	movs	r2, #161	; 0xa1
 8009528:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2221      	movs	r2, #33	; 0x21
 800952e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2207      	movs	r2, #7
 8009540:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	2207      	movs	r2, #7
 8009546:	4619      	mov	r1, r3
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f001 fa81 	bl	800aa50 <USBH_CtlReq>
 800954e:	4603      	mov	r3, r0
}
 8009550:	4618      	mov	r0, r3
 8009552:	3708      	adds	r7, #8
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2221      	movs	r2, #33	; 0x21
 8009566:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2220      	movs	r2, #32
 800956c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2207      	movs	r2, #7
 800957e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	2207      	movs	r2, #7
 8009584:	4619      	mov	r1, r3
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f001 fa62 	bl	800aa50 <USBH_CtlReq>
 800958c:	4603      	mov	r3, r0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3708      	adds	r7, #8
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b086      	sub	sp, #24
 800959a:	af02      	add	r7, sp, #8
 800959c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095a4:	69db      	ldr	r3, [r3, #28]
 80095a6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80095a8:	2300      	movs	r3, #0
 80095aa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d002      	beq.n	80095bc <CDC_ProcessTransmission+0x26>
 80095b6:	2b02      	cmp	r3, #2
 80095b8:	d023      	beq.n	8009602 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80095ba:	e05e      	b.n	800967a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c0:	68fa      	ldr	r2, [r7, #12]
 80095c2:	8b12      	ldrh	r2, [r2, #24]
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d90b      	bls.n	80095e0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	69d9      	ldr	r1, [r3, #28]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	8b1a      	ldrh	r2, [r3, #24]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	7b5b      	ldrb	r3, [r3, #13]
 80095d4:	2001      	movs	r0, #1
 80095d6:	9000      	str	r0, [sp, #0]
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f001 fc48 	bl	800ae6e <USBH_BulkSendData>
 80095de:	e00b      	b.n	80095f8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	7b5b      	ldrb	r3, [r3, #13]
 80095ee:	2001      	movs	r0, #1
 80095f0:	9000      	str	r0, [sp, #0]
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f001 fc3b 	bl	800ae6e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2202      	movs	r2, #2
 80095fc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009600:	e03b      	b.n	800967a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	7b5b      	ldrb	r3, [r3, #13]
 8009606:	4619      	mov	r1, r3
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f001 ff5f 	bl	800b4cc <USBH_LL_GetURBState>
 800960e:	4603      	mov	r3, r0
 8009610:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009612:	7afb      	ldrb	r3, [r7, #11]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d128      	bne.n	800966a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	8b12      	ldrh	r2, [r2, #24]
 8009620:	4293      	cmp	r3, r2
 8009622:	d90e      	bls.n	8009642 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	8b12      	ldrh	r2, [r2, #24]
 800962c:	1a9a      	subs	r2, r3, r2
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	69db      	ldr	r3, [r3, #28]
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	8b12      	ldrh	r2, [r2, #24]
 800963a:	441a      	add	r2, r3
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	61da      	str	r2, [r3, #28]
 8009640:	e002      	b.n	8009648 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2200      	movs	r2, #0
 8009646:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964c:	2b00      	cmp	r3, #0
 800964e:	d004      	beq.n	800965a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2201      	movs	r2, #1
 8009654:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009658:	e00e      	b.n	8009678 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2200      	movs	r2, #0
 800965e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 f868 	bl	8009738 <USBH_CDC_TransmitCallback>
      break;
 8009668:	e006      	b.n	8009678 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800966a:	7afb      	ldrb	r3, [r7, #11]
 800966c:	2b02      	cmp	r3, #2
 800966e:	d103      	bne.n	8009678 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009678:	bf00      	nop
  }
}
 800967a:	bf00      	nop
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b086      	sub	sp, #24
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009690:	69db      	ldr	r3, [r3, #28]
 8009692:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009694:	2300      	movs	r3, #0
 8009696:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800969e:	2b03      	cmp	r3, #3
 80096a0:	d002      	beq.n	80096a8 <CDC_ProcessReception+0x26>
 80096a2:	2b04      	cmp	r3, #4
 80096a4:	d00e      	beq.n	80096c4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80096a6:	e043      	b.n	8009730 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	6a19      	ldr	r1, [r3, #32]
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	8b5a      	ldrh	r2, [r3, #26]
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	7b1b      	ldrb	r3, [r3, #12]
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f001 fbff 	bl	800aeb8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	2204      	movs	r2, #4
 80096be:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80096c2:	e035      	b.n	8009730 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	7b1b      	ldrb	r3, [r3, #12]
 80096c8:	4619      	mov	r1, r3
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f001 fefe 	bl	800b4cc <USBH_LL_GetURBState>
 80096d0:	4603      	mov	r3, r0
 80096d2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80096d4:	7cfb      	ldrb	r3, [r7, #19]
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d129      	bne.n	800972e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	7b1b      	ldrb	r3, [r3, #12]
 80096de:	4619      	mov	r1, r3
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f001 fe61 	bl	800b3a8 <USBH_LL_GetLastXferSize>
 80096e6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ec:	68fa      	ldr	r2, [r7, #12]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d016      	beq.n	8009720 <CDC_ProcessReception+0x9e>
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	8b5b      	ldrh	r3, [r3, #26]
 80096f6:	461a      	mov	r2, r3
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d910      	bls.n	8009720 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	1ad2      	subs	r2, r2, r3
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	6a1a      	ldr	r2, [r3, #32]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	441a      	add	r2, r3
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	2203      	movs	r2, #3
 800971a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800971e:	e006      	b.n	800972e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	2200      	movs	r2, #0
 8009724:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 f80f 	bl	800974c <USBH_CDC_ReceiveCallback>
      break;
 800972e:	bf00      	nop
  }
}
 8009730:	bf00      	nop
 8009732:	3718      	adds	r7, #24
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009740:	bf00      	nop
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009754:	bf00      	nop
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009768:	bf00      	nop
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	4613      	mov	r3, r2
 8009780:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d101      	bne.n	800978c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009788:	2302      	movs	r3, #2
 800978a:	e029      	b.n	80097e0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	79fa      	ldrb	r2, [r7, #7]
 8009790:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2200      	movs	r2, #0
 8009798:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2200      	movs	r2, #0
 80097a0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80097a4:	68f8      	ldr	r0, [r7, #12]
 80097a6:	f000 f81f 	bl	80097e8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2200      	movs	r2, #0
 80097ae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2200      	movs	r2, #0
 80097be:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2200      	movs	r2, #0
 80097c6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d003      	beq.n	80097d8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	68ba      	ldr	r2, [r7, #8]
 80097d4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80097d8:	68f8      	ldr	r0, [r7, #12]
 80097da:	f001 fd31 	bl	800b240 <USBH_LL_Init>

  return USBH_OK;
 80097de:	2300      	movs	r3, #0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3710      	adds	r7, #16
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b085      	sub	sp, #20
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80097f0:	2300      	movs	r3, #0
 80097f2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80097f4:	2300      	movs	r3, #0
 80097f6:	60fb      	str	r3, [r7, #12]
 80097f8:	e009      	b.n	800980e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	33e0      	adds	r3, #224	; 0xe0
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	4413      	add	r3, r2
 8009804:	2200      	movs	r2, #0
 8009806:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	3301      	adds	r3, #1
 800980c:	60fb      	str	r3, [r7, #12]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2b0f      	cmp	r3, #15
 8009812:	d9f2      	bls.n	80097fa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009814:	2300      	movs	r3, #0
 8009816:	60fb      	str	r3, [r7, #12]
 8009818:	e009      	b.n	800982e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	4413      	add	r3, r2
 8009820:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009824:	2200      	movs	r2, #0
 8009826:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	3301      	adds	r3, #1
 800982c:	60fb      	str	r3, [r7, #12]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009834:	d3f1      	bcc.n	800981a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2201      	movs	r2, #1
 8009846:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2201      	movs	r2, #1
 8009854:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2240      	movs	r2, #64	; 0x40
 800985a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2201      	movs	r2, #1
 800986e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009882:	2300      	movs	r3, #0
}
 8009884:	4618      	mov	r0, r3
 8009886:	3714      	adds	r7, #20
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009890:	b480      	push	{r7}
 8009892:	b085      	sub	sp, #20
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800989a:	2300      	movs	r3, #0
 800989c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d016      	beq.n	80098d2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d10e      	bne.n	80098cc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80098b4:	1c59      	adds	r1, r3, #1
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	33de      	adds	r3, #222	; 0xde
 80098c0:	6839      	ldr	r1, [r7, #0]
 80098c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80098c6:	2300      	movs	r3, #0
 80098c8:	73fb      	strb	r3, [r7, #15]
 80098ca:	e004      	b.n	80098d6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80098cc:	2302      	movs	r3, #2
 80098ce:	73fb      	strb	r3, [r7, #15]
 80098d0:	e001      	b.n	80098d6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80098d2:	2302      	movs	r3, #2
 80098d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80098d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3714      	adds	r7, #20
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr

080098e4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b085      	sub	sp, #20
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	460b      	mov	r3, r1
 80098ee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80098f0:	2300      	movs	r3, #0
 80098f2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80098fa:	78fa      	ldrb	r2, [r7, #3]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d204      	bcs.n	800990a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	78fa      	ldrb	r2, [r7, #3]
 8009904:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009908:	e001      	b.n	800990e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800990a:	2302      	movs	r3, #2
 800990c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800990e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009910:	4618      	mov	r0, r3
 8009912:	3714      	adds	r7, #20
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800991c:	b480      	push	{r7}
 800991e:	b087      	sub	sp, #28
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	4608      	mov	r0, r1
 8009926:	4611      	mov	r1, r2
 8009928:	461a      	mov	r2, r3
 800992a:	4603      	mov	r3, r0
 800992c:	70fb      	strb	r3, [r7, #3]
 800992e:	460b      	mov	r3, r1
 8009930:	70bb      	strb	r3, [r7, #2]
 8009932:	4613      	mov	r3, r2
 8009934:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009936:	2300      	movs	r3, #0
 8009938:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800993a:	2300      	movs	r3, #0
 800993c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009944:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009946:	e025      	b.n	8009994 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009948:	7dfb      	ldrb	r3, [r7, #23]
 800994a:	221a      	movs	r2, #26
 800994c:	fb02 f303 	mul.w	r3, r2, r3
 8009950:	3308      	adds	r3, #8
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	4413      	add	r3, r2
 8009956:	3302      	adds	r3, #2
 8009958:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	795b      	ldrb	r3, [r3, #5]
 800995e:	78fa      	ldrb	r2, [r7, #3]
 8009960:	429a      	cmp	r2, r3
 8009962:	d002      	beq.n	800996a <USBH_FindInterface+0x4e>
 8009964:	78fb      	ldrb	r3, [r7, #3]
 8009966:	2bff      	cmp	r3, #255	; 0xff
 8009968:	d111      	bne.n	800998e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800996e:	78ba      	ldrb	r2, [r7, #2]
 8009970:	429a      	cmp	r2, r3
 8009972:	d002      	beq.n	800997a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009974:	78bb      	ldrb	r3, [r7, #2]
 8009976:	2bff      	cmp	r3, #255	; 0xff
 8009978:	d109      	bne.n	800998e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800997e:	787a      	ldrb	r2, [r7, #1]
 8009980:	429a      	cmp	r2, r3
 8009982:	d002      	beq.n	800998a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009984:	787b      	ldrb	r3, [r7, #1]
 8009986:	2bff      	cmp	r3, #255	; 0xff
 8009988:	d101      	bne.n	800998e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800998a:	7dfb      	ldrb	r3, [r7, #23]
 800998c:	e006      	b.n	800999c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800998e:	7dfb      	ldrb	r3, [r7, #23]
 8009990:	3301      	adds	r3, #1
 8009992:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009994:	7dfb      	ldrb	r3, [r7, #23]
 8009996:	2b01      	cmp	r3, #1
 8009998:	d9d6      	bls.n	8009948 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800999a:	23ff      	movs	r3, #255	; 0xff
}
 800999c:	4618      	mov	r0, r3
 800999e:	371c      	adds	r7, #28
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f001 fc81 	bl	800b2b8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80099b6:	2101      	movs	r1, #1
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f001 fd9a 	bl	800b4f2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b088      	sub	sp, #32
 80099cc:	af04      	add	r7, sp, #16
 80099ce:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80099d0:	2302      	movs	r3, #2
 80099d2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80099d4:	2300      	movs	r3, #0
 80099d6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d102      	bne.n	80099ea <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2203      	movs	r2, #3
 80099e8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	2b0b      	cmp	r3, #11
 80099f2:	f200 81be 	bhi.w	8009d72 <USBH_Process+0x3aa>
 80099f6:	a201      	add	r2, pc, #4	; (adr r2, 80099fc <USBH_Process+0x34>)
 80099f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fc:	08009a2d 	.word	0x08009a2d
 8009a00:	08009a5f 	.word	0x08009a5f
 8009a04:	08009ac7 	.word	0x08009ac7
 8009a08:	08009d0d 	.word	0x08009d0d
 8009a0c:	08009d73 	.word	0x08009d73
 8009a10:	08009b6b 	.word	0x08009b6b
 8009a14:	08009cb3 	.word	0x08009cb3
 8009a18:	08009ba1 	.word	0x08009ba1
 8009a1c:	08009bc1 	.word	0x08009bc1
 8009a20:	08009be1 	.word	0x08009be1
 8009a24:	08009c25 	.word	0x08009c25
 8009a28:	08009cf5 	.word	0x08009cf5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f000 819e 	beq.w	8009d76 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009a40:	20c8      	movs	r0, #200	; 0xc8
 8009a42:	f001 fd9d 	bl	800b580 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f001 fc93 	bl	800b372 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009a5c:	e18b      	b.n	8009d76 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d107      	bne.n	8009a78 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2202      	movs	r2, #2
 8009a74:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009a76:	e18d      	b.n	8009d94 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009a7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a82:	d914      	bls.n	8009aae <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	b2da      	uxtb	r2, r3
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009a9a:	2b03      	cmp	r3, #3
 8009a9c:	d903      	bls.n	8009aa6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	220d      	movs	r2, #13
 8009aa2:	701a      	strb	r2, [r3, #0]
      break;
 8009aa4:	e176      	b.n	8009d94 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	701a      	strb	r2, [r3, #0]
      break;
 8009aac:	e172      	b.n	8009d94 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009ab4:	f103 020a 	add.w	r2, r3, #10
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009abe:	200a      	movs	r0, #10
 8009ac0:	f001 fd5e 	bl	800b580 <USBH_Delay>
      break;
 8009ac4:	e166      	b.n	8009d94 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d005      	beq.n	8009adc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009ad6:	2104      	movs	r1, #4
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009adc:	2064      	movs	r0, #100	; 0x64
 8009ade:	f001 fd4f 	bl	800b580 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f001 fc1e 	bl	800b324 <USBH_LL_GetSpeed>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	461a      	mov	r2, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2205      	movs	r2, #5
 8009af6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009af8:	2100      	movs	r1, #0
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f001 fa29 	bl	800af52 <USBH_AllocPipe>
 8009b00:	4603      	mov	r3, r0
 8009b02:	461a      	mov	r2, r3
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009b08:	2180      	movs	r1, #128	; 0x80
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f001 fa21 	bl	800af52 <USBH_AllocPipe>
 8009b10:	4603      	mov	r3, r0
 8009b12:	461a      	mov	r2, r3
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	7919      	ldrb	r1, [r3, #4]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009b2c:	b292      	uxth	r2, r2
 8009b2e:	9202      	str	r2, [sp, #8]
 8009b30:	2200      	movs	r2, #0
 8009b32:	9201      	str	r2, [sp, #4]
 8009b34:	9300      	str	r3, [sp, #0]
 8009b36:	4603      	mov	r3, r0
 8009b38:	2280      	movs	r2, #128	; 0x80
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f001 f9da 	bl	800aef4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	7959      	ldrb	r1, [r3, #5]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009b54:	b292      	uxth	r2, r2
 8009b56:	9202      	str	r2, [sp, #8]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	9201      	str	r2, [sp, #4]
 8009b5c:	9300      	str	r3, [sp, #0]
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2200      	movs	r2, #0
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f001 f9c6 	bl	800aef4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009b68:	e114      	b.n	8009d94 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 f918 	bl	8009da0 <USBH_HandleEnum>
 8009b70:	4603      	mov	r3, r0
 8009b72:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009b74:	7bbb      	ldrb	r3, [r7, #14]
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f040 80fe 	bne.w	8009d7a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2200      	movs	r2, #0
 8009b82:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d103      	bne.n	8009b98 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2208      	movs	r2, #8
 8009b94:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009b96:	e0f0      	b.n	8009d7a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2207      	movs	r2, #7
 8009b9c:	701a      	strb	r2, [r3, #0]
      break;
 8009b9e:	e0ec      	b.n	8009d7a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	f000 80e9 	beq.w	8009d7e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009bb2:	2101      	movs	r1, #1
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2208      	movs	r2, #8
 8009bbc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009bbe:	e0de      	b.n	8009d7e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	4619      	mov	r1, r3
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 fc2c 	bl	800a428 <USBH_SetCfg>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	f040 80d5 	bne.w	8009d82 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2209      	movs	r2, #9
 8009bdc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009bde:	e0d0      	b.n	8009d82 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009be6:	f003 0320 	and.w	r3, r3, #32
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d016      	beq.n	8009c1c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009bee:	2101      	movs	r1, #1
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 fc3c 	bl	800a46e <USBH_SetFeature>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009bfa:	7bbb      	ldrb	r3, [r7, #14]
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d103      	bne.n	8009c0a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	220a      	movs	r2, #10
 8009c06:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009c08:	e0bd      	b.n	8009d86 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8009c0a:	7bbb      	ldrb	r3, [r7, #14]
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	2b03      	cmp	r3, #3
 8009c10:	f040 80b9 	bne.w	8009d86 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	220a      	movs	r2, #10
 8009c18:	701a      	strb	r2, [r3, #0]
      break;
 8009c1a:	e0b4      	b.n	8009d86 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	220a      	movs	r2, #10
 8009c20:	701a      	strb	r2, [r3, #0]
      break;
 8009c22:	e0b0      	b.n	8009d86 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	f000 80ad 	beq.w	8009d8a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009c38:	2300      	movs	r3, #0
 8009c3a:	73fb      	strb	r3, [r7, #15]
 8009c3c:	e016      	b.n	8009c6c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009c3e:	7bfa      	ldrb	r2, [r7, #15]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	32de      	adds	r2, #222	; 0xde
 8009c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c48:	791a      	ldrb	r2, [r3, #4]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d108      	bne.n	8009c66 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009c54:	7bfa      	ldrb	r2, [r7, #15]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	32de      	adds	r2, #222	; 0xde
 8009c5a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009c64:	e005      	b.n	8009c72 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009c66:	7bfb      	ldrb	r3, [r7, #15]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	73fb      	strb	r3, [r7, #15]
 8009c6c:	7bfb      	ldrb	r3, [r7, #15]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d0e5      	beq.n	8009c3e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d016      	beq.n	8009caa <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	4798      	blx	r3
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d109      	bne.n	8009ca2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2206      	movs	r2, #6
 8009c92:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009c9a:	2103      	movs	r1, #3
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009ca0:	e073      	b.n	8009d8a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	220d      	movs	r2, #13
 8009ca6:	701a      	strb	r2, [r3, #0]
      break;
 8009ca8:	e06f      	b.n	8009d8a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	220d      	movs	r2, #13
 8009cae:	701a      	strb	r2, [r3, #0]
      break;
 8009cb0:	e06b      	b.n	8009d8a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d017      	beq.n	8009cec <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cc2:	691b      	ldr	r3, [r3, #16]
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	4798      	blx	r3
 8009cc8:	4603      	mov	r3, r0
 8009cca:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009ccc:	7bbb      	ldrb	r3, [r7, #14]
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d103      	bne.n	8009cdc <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	220b      	movs	r2, #11
 8009cd8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009cda:	e058      	b.n	8009d8e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8009cdc:	7bbb      	ldrb	r3, [r7, #14]
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	2b02      	cmp	r3, #2
 8009ce2:	d154      	bne.n	8009d8e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	220d      	movs	r2, #13
 8009ce8:	701a      	strb	r2, [r3, #0]
      break;
 8009cea:	e050      	b.n	8009d8e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	220d      	movs	r2, #13
 8009cf0:	701a      	strb	r2, [r3, #0]
      break;
 8009cf2:	e04c      	b.n	8009d8e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d049      	beq.n	8009d92 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d04:	695b      	ldr	r3, [r3, #20]
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	4798      	blx	r3
      }
      break;
 8009d0a:	e042      	b.n	8009d92 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f7ff fd67 	bl	80097e8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d009      	beq.n	8009d38 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d005      	beq.n	8009d4e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009d48:	2105      	movs	r1, #5
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d107      	bne.n	8009d6a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f7ff fe20 	bl	80099a8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009d68:	e014      	b.n	8009d94 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f001 faa4 	bl	800b2b8 <USBH_LL_Start>
      break;
 8009d70:	e010      	b.n	8009d94 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8009d72:	bf00      	nop
 8009d74:	e00e      	b.n	8009d94 <USBH_Process+0x3cc>
      break;
 8009d76:	bf00      	nop
 8009d78:	e00c      	b.n	8009d94 <USBH_Process+0x3cc>
      break;
 8009d7a:	bf00      	nop
 8009d7c:	e00a      	b.n	8009d94 <USBH_Process+0x3cc>
    break;
 8009d7e:	bf00      	nop
 8009d80:	e008      	b.n	8009d94 <USBH_Process+0x3cc>
      break;
 8009d82:	bf00      	nop
 8009d84:	e006      	b.n	8009d94 <USBH_Process+0x3cc>
      break;
 8009d86:	bf00      	nop
 8009d88:	e004      	b.n	8009d94 <USBH_Process+0x3cc>
      break;
 8009d8a:	bf00      	nop
 8009d8c:	e002      	b.n	8009d94 <USBH_Process+0x3cc>
      break;
 8009d8e:	bf00      	nop
 8009d90:	e000      	b.n	8009d94 <USBH_Process+0x3cc>
      break;
 8009d92:	bf00      	nop
  }
  return USBH_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop

08009da0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b088      	sub	sp, #32
 8009da4:	af04      	add	r7, sp, #16
 8009da6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009da8:	2301      	movs	r3, #1
 8009daa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009dac:	2301      	movs	r3, #1
 8009dae:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	785b      	ldrb	r3, [r3, #1]
 8009db4:	2b07      	cmp	r3, #7
 8009db6:	f200 81c1 	bhi.w	800a13c <USBH_HandleEnum+0x39c>
 8009dba:	a201      	add	r2, pc, #4	; (adr r2, 8009dc0 <USBH_HandleEnum+0x20>)
 8009dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc0:	08009de1 	.word	0x08009de1
 8009dc4:	08009e9f 	.word	0x08009e9f
 8009dc8:	08009f09 	.word	0x08009f09
 8009dcc:	08009f97 	.word	0x08009f97
 8009dd0:	0800a001 	.word	0x0800a001
 8009dd4:	0800a071 	.word	0x0800a071
 8009dd8:	0800a0b7 	.word	0x0800a0b7
 8009ddc:	0800a0fd 	.word	0x0800a0fd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009de0:	2108      	movs	r1, #8
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 fa50 	bl	800a288 <USBH_Get_DevDesc>
 8009de8:	4603      	mov	r3, r0
 8009dea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009dec:	7bbb      	ldrb	r3, [r7, #14]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d130      	bne.n	8009e54 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	7919      	ldrb	r1, [r3, #4]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009e16:	b292      	uxth	r2, r2
 8009e18:	9202      	str	r2, [sp, #8]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	9201      	str	r2, [sp, #4]
 8009e1e:	9300      	str	r3, [sp, #0]
 8009e20:	4603      	mov	r3, r0
 8009e22:	2280      	movs	r2, #128	; 0x80
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f001 f865 	bl	800aef4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	7959      	ldrb	r1, [r3, #5]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009e3e:	b292      	uxth	r2, r2
 8009e40:	9202      	str	r2, [sp, #8]
 8009e42:	2200      	movs	r2, #0
 8009e44:	9201      	str	r2, [sp, #4]
 8009e46:	9300      	str	r3, [sp, #0]
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f001 f851 	bl	800aef4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009e52:	e175      	b.n	800a140 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e54:	7bbb      	ldrb	r3, [r7, #14]
 8009e56:	2b03      	cmp	r3, #3
 8009e58:	f040 8172 	bne.w	800a140 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009e62:	3301      	adds	r3, #1
 8009e64:	b2da      	uxtb	r2, r3
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009e72:	2b03      	cmp	r3, #3
 8009e74:	d903      	bls.n	8009e7e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	220d      	movs	r2, #13
 8009e7a:	701a      	strb	r2, [r3, #0]
      break;
 8009e7c:	e160      	b.n	800a140 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	795b      	ldrb	r3, [r3, #5]
 8009e82:	4619      	mov	r1, r3
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f001 f885 	bl	800af94 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	791b      	ldrb	r3, [r3, #4]
 8009e8e:	4619      	mov	r1, r3
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f001 f87f 	bl	800af94 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	701a      	strb	r2, [r3, #0]
      break;
 8009e9c:	e150      	b.n	800a140 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009e9e:	2112      	movs	r1, #18
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 f9f1 	bl	800a288 <USBH_Get_DevDesc>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009eaa:	7bbb      	ldrb	r3, [r7, #14]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d103      	bne.n	8009eb8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2202      	movs	r2, #2
 8009eb4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009eb6:	e145      	b.n	800a144 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009eb8:	7bbb      	ldrb	r3, [r7, #14]
 8009eba:	2b03      	cmp	r3, #3
 8009ebc:	f040 8142 	bne.w	800a144 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	b2da      	uxtb	r2, r3
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009ed6:	2b03      	cmp	r3, #3
 8009ed8:	d903      	bls.n	8009ee2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	220d      	movs	r2, #13
 8009ede:	701a      	strb	r2, [r3, #0]
      break;
 8009ee0:	e130      	b.n	800a144 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	795b      	ldrb	r3, [r3, #5]
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f001 f853 	bl	800af94 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	791b      	ldrb	r3, [r3, #4]
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f001 f84d 	bl	800af94 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2200      	movs	r2, #0
 8009efe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	701a      	strb	r2, [r3, #0]
      break;
 8009f06:	e11d      	b.n	800a144 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009f08:	2101      	movs	r1, #1
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 fa68 	bl	800a3e0 <USBH_SetAddress>
 8009f10:	4603      	mov	r3, r0
 8009f12:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009f14:	7bbb      	ldrb	r3, [r7, #14]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d132      	bne.n	8009f80 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009f1a:	2002      	movs	r0, #2
 8009f1c:	f001 fb30 	bl	800b580 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2203      	movs	r2, #3
 8009f2c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	7919      	ldrb	r1, [r3, #4]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009f42:	b292      	uxth	r2, r2
 8009f44:	9202      	str	r2, [sp, #8]
 8009f46:	2200      	movs	r2, #0
 8009f48:	9201      	str	r2, [sp, #4]
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2280      	movs	r2, #128	; 0x80
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 ffcf 	bl	800aef4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	7959      	ldrb	r1, [r3, #5]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009f6a:	b292      	uxth	r2, r2
 8009f6c:	9202      	str	r2, [sp, #8]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	9201      	str	r2, [sp, #4]
 8009f72:	9300      	str	r3, [sp, #0]
 8009f74:	4603      	mov	r3, r0
 8009f76:	2200      	movs	r2, #0
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 ffbb 	bl	800aef4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009f7e:	e0e3      	b.n	800a148 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f80:	7bbb      	ldrb	r3, [r7, #14]
 8009f82:	2b03      	cmp	r3, #3
 8009f84:	f040 80e0 	bne.w	800a148 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	220d      	movs	r2, #13
 8009f8c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	705a      	strb	r2, [r3, #1]
      break;
 8009f94:	e0d8      	b.n	800a148 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009f96:	2109      	movs	r1, #9
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 f99d 	bl	800a2d8 <USBH_Get_CfgDesc>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009fa2:	7bbb      	ldrb	r3, [r7, #14]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d103      	bne.n	8009fb0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2204      	movs	r2, #4
 8009fac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009fae:	e0cd      	b.n	800a14c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009fb0:	7bbb      	ldrb	r3, [r7, #14]
 8009fb2:	2b03      	cmp	r3, #3
 8009fb4:	f040 80ca 	bne.w	800a14c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	b2da      	uxtb	r2, r3
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009fce:	2b03      	cmp	r3, #3
 8009fd0:	d903      	bls.n	8009fda <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	220d      	movs	r2, #13
 8009fd6:	701a      	strb	r2, [r3, #0]
      break;
 8009fd8:	e0b8      	b.n	800a14c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	795b      	ldrb	r3, [r3, #5]
 8009fde:	4619      	mov	r1, r3
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 ffd7 	bl	800af94 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	791b      	ldrb	r3, [r3, #4]
 8009fea:	4619      	mov	r1, r3
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 ffd1 	bl	800af94 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	701a      	strb	r2, [r3, #0]
      break;
 8009ffe:	e0a5      	b.n	800a14c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a006:	4619      	mov	r1, r3
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 f965 	bl	800a2d8 <USBH_Get_CfgDesc>
 800a00e:	4603      	mov	r3, r0
 800a010:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a012:	7bbb      	ldrb	r3, [r7, #14]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d103      	bne.n	800a020 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2205      	movs	r2, #5
 800a01c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a01e:	e097      	b.n	800a150 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a020:	7bbb      	ldrb	r3, [r7, #14]
 800a022:	2b03      	cmp	r3, #3
 800a024:	f040 8094 	bne.w	800a150 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a02e:	3301      	adds	r3, #1
 800a030:	b2da      	uxtb	r2, r3
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a03e:	2b03      	cmp	r3, #3
 800a040:	d903      	bls.n	800a04a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	220d      	movs	r2, #13
 800a046:	701a      	strb	r2, [r3, #0]
      break;
 800a048:	e082      	b.n	800a150 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	795b      	ldrb	r3, [r3, #5]
 800a04e:	4619      	mov	r1, r3
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 ff9f 	bl	800af94 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	791b      	ldrb	r3, [r3, #4]
 800a05a:	4619      	mov	r1, r3
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 ff99 	bl	800af94 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	701a      	strb	r2, [r3, #0]
      break;
 800a06e:	e06f      	b.n	800a150 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a076:	2b00      	cmp	r3, #0
 800a078:	d019      	beq.n	800a0ae <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a086:	23ff      	movs	r3, #255	; 0xff
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 f949 	bl	800a320 <USBH_Get_StringDesc>
 800a08e:	4603      	mov	r3, r0
 800a090:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a092:	7bbb      	ldrb	r3, [r7, #14]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d103      	bne.n	800a0a0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2206      	movs	r2, #6
 800a09c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a09e:	e059      	b.n	800a154 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a0a0:	7bbb      	ldrb	r3, [r7, #14]
 800a0a2:	2b03      	cmp	r3, #3
 800a0a4:	d156      	bne.n	800a154 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2206      	movs	r2, #6
 800a0aa:	705a      	strb	r2, [r3, #1]
      break;
 800a0ac:	e052      	b.n	800a154 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2206      	movs	r2, #6
 800a0b2:	705a      	strb	r2, [r3, #1]
      break;
 800a0b4:	e04e      	b.n	800a154 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d019      	beq.n	800a0f4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a0cc:	23ff      	movs	r3, #255	; 0xff
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 f926 	bl	800a320 <USBH_Get_StringDesc>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a0d8:	7bbb      	ldrb	r3, [r7, #14]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d103      	bne.n	800a0e6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2207      	movs	r2, #7
 800a0e2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a0e4:	e038      	b.n	800a158 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a0e6:	7bbb      	ldrb	r3, [r7, #14]
 800a0e8:	2b03      	cmp	r3, #3
 800a0ea:	d135      	bne.n	800a158 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2207      	movs	r2, #7
 800a0f0:	705a      	strb	r2, [r3, #1]
      break;
 800a0f2:	e031      	b.n	800a158 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2207      	movs	r2, #7
 800a0f8:	705a      	strb	r2, [r3, #1]
      break;
 800a0fa:	e02d      	b.n	800a158 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a102:	2b00      	cmp	r3, #0
 800a104:	d017      	beq.n	800a136 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a112:	23ff      	movs	r3, #255	; 0xff
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 f903 	bl	800a320 <USBH_Get_StringDesc>
 800a11a:	4603      	mov	r3, r0
 800a11c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a11e:	7bbb      	ldrb	r3, [r7, #14]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d102      	bne.n	800a12a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a124:	2300      	movs	r3, #0
 800a126:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a128:	e018      	b.n	800a15c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a12a:	7bbb      	ldrb	r3, [r7, #14]
 800a12c:	2b03      	cmp	r3, #3
 800a12e:	d115      	bne.n	800a15c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a130:	2300      	movs	r3, #0
 800a132:	73fb      	strb	r3, [r7, #15]
      break;
 800a134:	e012      	b.n	800a15c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a136:	2300      	movs	r3, #0
 800a138:	73fb      	strb	r3, [r7, #15]
      break;
 800a13a:	e00f      	b.n	800a15c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a13c:	bf00      	nop
 800a13e:	e00e      	b.n	800a15e <USBH_HandleEnum+0x3be>
      break;
 800a140:	bf00      	nop
 800a142:	e00c      	b.n	800a15e <USBH_HandleEnum+0x3be>
      break;
 800a144:	bf00      	nop
 800a146:	e00a      	b.n	800a15e <USBH_HandleEnum+0x3be>
      break;
 800a148:	bf00      	nop
 800a14a:	e008      	b.n	800a15e <USBH_HandleEnum+0x3be>
      break;
 800a14c:	bf00      	nop
 800a14e:	e006      	b.n	800a15e <USBH_HandleEnum+0x3be>
      break;
 800a150:	bf00      	nop
 800a152:	e004      	b.n	800a15e <USBH_HandleEnum+0x3be>
      break;
 800a154:	bf00      	nop
 800a156:	e002      	b.n	800a15e <USBH_HandleEnum+0x3be>
      break;
 800a158:	bf00      	nop
 800a15a:	e000      	b.n	800a15e <USBH_HandleEnum+0x3be>
      break;
 800a15c:	bf00      	nop
  }
  return Status;
 800a15e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a160:	4618      	mov	r0, r3
 800a162:	3710      	adds	r7, #16
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	683a      	ldr	r2, [r7, #0]
 800a176:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a17a:	bf00      	nop
 800a17c:	370c      	adds	r7, #12
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr

0800a186 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a186:	b580      	push	{r7, lr}
 800a188:	b082      	sub	sp, #8
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a194:	1c5a      	adds	r2, r3, #1
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 f804 	bl	800a1aa <USBH_HandleSof>
}
 800a1a2:	bf00      	nop
 800a1a4:	3708      	adds	r7, #8
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b082      	sub	sp, #8
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	2b0b      	cmp	r3, #11
 800a1ba:	d10a      	bne.n	800a1d2 <USBH_HandleSof+0x28>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d005      	beq.n	800a1d2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1cc:	699b      	ldr	r3, [r3, #24]
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	4798      	blx	r3
  }
}
 800a1d2:	bf00      	nop
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a1da:	b480      	push	{r7}
 800a1dc:	b083      	sub	sp, #12
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a1ea:	bf00      	nop
}
 800a1ec:	370c      	adds	r7, #12
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr

0800a1f6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a1f6:	b480      	push	{r7}
 800a1f8:	b083      	sub	sp, #12
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a206:	bf00      	nop
}
 800a208:	370c      	adds	r7, #12
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr

0800a212 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a212:	b480      	push	{r7}
 800a214:	b083      	sub	sp, #12
 800a216:	af00      	add	r7, sp, #0
 800a218:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2201      	movs	r2, #1
 800a21e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2200      	movs	r2, #0
 800a226:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a232:	2300      	movs	r3, #0
}
 800a234:	4618      	mov	r0, r3
 800a236:	370c      	adds	r7, #12
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2201      	movs	r2, #1
 800a24c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2200      	movs	r2, #0
 800a254:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f001 f844 	bl	800b2ee <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	791b      	ldrb	r3, [r3, #4]
 800a26a:	4619      	mov	r1, r3
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 fe91 	bl	800af94 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	795b      	ldrb	r3, [r3, #5]
 800a276:	4619      	mov	r1, r3
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 fe8b 	bl	800af94 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	3708      	adds	r7, #8
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b086      	sub	sp, #24
 800a28c:	af02      	add	r7, sp, #8
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	460b      	mov	r3, r1
 800a292:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a29a:	78fb      	ldrb	r3, [r7, #3]
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	9300      	str	r3, [sp, #0]
 800a2a0:	4613      	mov	r3, r2
 800a2a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a2a6:	2100      	movs	r1, #0
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 f864 	bl	800a376 <USBH_GetDescriptor>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800a2b2:	7bfb      	ldrb	r3, [r7, #15]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d10a      	bne.n	800a2ce <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a2c4:	78fa      	ldrb	r2, [r7, #3]
 800a2c6:	b292      	uxth	r2, r2
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	f000 f918 	bl	800a4fe <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a2ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3710      	adds	r7, #16
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af02      	add	r7, sp, #8
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	331c      	adds	r3, #28
 800a2e8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a2ea:	887b      	ldrh	r3, [r7, #2]
 800a2ec:	9300      	str	r3, [sp, #0]
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 f83d 	bl	800a376 <USBH_GetDescriptor>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a300:	7bfb      	ldrb	r3, [r7, #15]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d107      	bne.n	800a316 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a306:	887b      	ldrh	r3, [r7, #2]
 800a308:	461a      	mov	r2, r3
 800a30a:	68b9      	ldr	r1, [r7, #8]
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 f987 	bl	800a620 <USBH_ParseCfgDesc>
 800a312:	4603      	mov	r3, r0
 800a314:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a316:	7bfb      	ldrb	r3, [r7, #15]
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3710      	adds	r7, #16
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b088      	sub	sp, #32
 800a324:	af02      	add	r7, sp, #8
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	607a      	str	r2, [r7, #4]
 800a32a:	461a      	mov	r2, r3
 800a32c:	460b      	mov	r3, r1
 800a32e:	72fb      	strb	r3, [r7, #11]
 800a330:	4613      	mov	r3, r2
 800a332:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800a334:	7afb      	ldrb	r3, [r7, #11]
 800a336:	b29b      	uxth	r3, r3
 800a338:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a33c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a344:	893b      	ldrh	r3, [r7, #8]
 800a346:	9300      	str	r3, [sp, #0]
 800a348:	460b      	mov	r3, r1
 800a34a:	2100      	movs	r1, #0
 800a34c:	68f8      	ldr	r0, [r7, #12]
 800a34e:	f000 f812 	bl	800a376 <USBH_GetDescriptor>
 800a352:	4603      	mov	r3, r0
 800a354:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a356:	7dfb      	ldrb	r3, [r7, #23]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d107      	bne.n	800a36c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a362:	893a      	ldrh	r2, [r7, #8]
 800a364:	6879      	ldr	r1, [r7, #4]
 800a366:	4618      	mov	r0, r3
 800a368:	f000 fb24 	bl	800a9b4 <USBH_ParseStringDesc>
  }

  return status;
 800a36c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3718      	adds	r7, #24
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b084      	sub	sp, #16
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	60f8      	str	r0, [r7, #12]
 800a37e:	607b      	str	r3, [r7, #4]
 800a380:	460b      	mov	r3, r1
 800a382:	72fb      	strb	r3, [r7, #11]
 800a384:	4613      	mov	r3, r2
 800a386:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	789b      	ldrb	r3, [r3, #2]
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d11c      	bne.n	800a3ca <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a390:	7afb      	ldrb	r3, [r7, #11]
 800a392:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a396:	b2da      	uxtb	r2, r3
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2206      	movs	r2, #6
 800a3a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	893a      	ldrh	r2, [r7, #8]
 800a3a6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a3a8:	893b      	ldrh	r3, [r7, #8]
 800a3aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a3ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a3b2:	d104      	bne.n	800a3be <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f240 4209 	movw	r2, #1033	; 0x409
 800a3ba:	829a      	strh	r2, [r3, #20]
 800a3bc:	e002      	b.n	800a3c4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	8b3a      	ldrh	r2, [r7, #24]
 800a3c8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a3ca:	8b3b      	ldrh	r3, [r7, #24]
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	6879      	ldr	r1, [r7, #4]
 800a3d0:	68f8      	ldr	r0, [r7, #12]
 800a3d2:	f000 fb3d 	bl	800aa50 <USBH_CtlReq>
 800a3d6:	4603      	mov	r3, r0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3710      	adds	r7, #16
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	789b      	ldrb	r3, [r3, #2]
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d10f      	bne.n	800a414 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2205      	movs	r2, #5
 800a3fe:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a400:	78fb      	ldrb	r3, [r7, #3]
 800a402:	b29a      	uxth	r2, r3
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2200      	movs	r2, #0
 800a412:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a414:	2200      	movs	r2, #0
 800a416:	2100      	movs	r1, #0
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 fb19 	bl	800aa50 <USBH_CtlReq>
 800a41e:	4603      	mov	r3, r0
}
 800a420:	4618      	mov	r0, r3
 800a422:	3708      	adds	r7, #8
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	460b      	mov	r3, r1
 800a432:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	789b      	ldrb	r3, [r3, #2]
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d10e      	bne.n	800a45a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2209      	movs	r2, #9
 800a446:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	887a      	ldrh	r2, [r7, #2]
 800a44c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2200      	movs	r2, #0
 800a458:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a45a:	2200      	movs	r2, #0
 800a45c:	2100      	movs	r1, #0
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 faf6 	bl	800aa50 <USBH_CtlReq>
 800a464:	4603      	mov	r3, r0
}
 800a466:	4618      	mov	r0, r3
 800a468:	3708      	adds	r7, #8
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a46e:	b580      	push	{r7, lr}
 800a470:	b082      	sub	sp, #8
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
 800a476:	460b      	mov	r3, r1
 800a478:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	789b      	ldrb	r3, [r3, #2]
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d10f      	bne.n	800a4a2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2200      	movs	r2, #0
 800a486:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2203      	movs	r2, #3
 800a48c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a48e:	78fb      	ldrb	r3, [r7, #3]
 800a490:	b29a      	uxth	r2, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	2100      	movs	r1, #0
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 fad2 	bl	800aa50 <USBH_CtlReq>
 800a4ac:	4603      	mov	r3, r0
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3708      	adds	r7, #8
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b082      	sub	sp, #8
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
 800a4be:	460b      	mov	r3, r1
 800a4c0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	789b      	ldrb	r3, [r3, #2]
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d10f      	bne.n	800a4ea <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2202      	movs	r2, #2
 800a4ce:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a4dc:	78fb      	ldrb	r3, [r7, #3]
 800a4de:	b29a      	uxth	r2, r3
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 faae 	bl	800aa50 <USBH_CtlReq>
 800a4f4:	4603      	mov	r3, r0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a4fe:	b480      	push	{r7}
 800a500:	b085      	sub	sp, #20
 800a502:	af00      	add	r7, sp, #0
 800a504:	60f8      	str	r0, [r7, #12]
 800a506:	60b9      	str	r1, [r7, #8]
 800a508:	4613      	mov	r3, r2
 800a50a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	781a      	ldrb	r2, [r3, #0]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	785a      	ldrb	r2, [r3, #1]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	3302      	adds	r3, #2
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	b29a      	uxth	r2, r3
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	3303      	adds	r3, #3
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	021b      	lsls	r3, r3, #8
 800a52e:	b29b      	uxth	r3, r3
 800a530:	4313      	orrs	r3, r2
 800a532:	b29a      	uxth	r2, r3
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	791a      	ldrb	r2, [r3, #4]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	795a      	ldrb	r2, [r3, #5]
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	799a      	ldrb	r2, [r3, #6]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	79da      	ldrb	r2, [r3, #7]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	79db      	ldrb	r3, [r3, #7]
 800a55c:	2b20      	cmp	r3, #32
 800a55e:	dc11      	bgt.n	800a584 <USBH_ParseDevDesc+0x86>
 800a560:	2b08      	cmp	r3, #8
 800a562:	db16      	blt.n	800a592 <USBH_ParseDevDesc+0x94>
 800a564:	3b08      	subs	r3, #8
 800a566:	2201      	movs	r2, #1
 800a568:	fa02 f303 	lsl.w	r3, r2, r3
 800a56c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800a570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a574:	2b00      	cmp	r3, #0
 800a576:	bf14      	ite	ne
 800a578:	2301      	movne	r3, #1
 800a57a:	2300      	moveq	r3, #0
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d102      	bne.n	800a588 <USBH_ParseDevDesc+0x8a>
 800a582:	e006      	b.n	800a592 <USBH_ParseDevDesc+0x94>
 800a584:	2b40      	cmp	r3, #64	; 0x40
 800a586:	d104      	bne.n	800a592 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	79da      	ldrb	r2, [r3, #7]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	71da      	strb	r2, [r3, #7]
      break;
 800a590:	e003      	b.n	800a59a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2240      	movs	r2, #64	; 0x40
 800a596:	71da      	strb	r2, [r3, #7]
      break;
 800a598:	bf00      	nop
  }

  if (length > 8U)
 800a59a:	88fb      	ldrh	r3, [r7, #6]
 800a59c:	2b08      	cmp	r3, #8
 800a59e:	d939      	bls.n	800a614 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	3308      	adds	r3, #8
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	b29a      	uxth	r2, r3
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	3309      	adds	r3, #9
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	021b      	lsls	r3, r3, #8
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	b29a      	uxth	r2, r3
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	330a      	adds	r3, #10
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	330b      	adds	r3, #11
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	021b      	lsls	r3, r3, #8
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	b29a      	uxth	r2, r3
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	330c      	adds	r3, #12
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	b29a      	uxth	r2, r3
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	330d      	adds	r3, #13
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	b29b      	uxth	r3, r3
 800a5e8:	021b      	lsls	r3, r3, #8
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	b29a      	uxth	r2, r3
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	7b9a      	ldrb	r2, [r3, #14]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	7bda      	ldrb	r2, [r3, #15]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	7c1a      	ldrb	r2, [r3, #16]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	7c5a      	ldrb	r2, [r3, #17]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	745a      	strb	r2, [r3, #17]
  }
}
 800a614:	bf00      	nop
 800a616:	3714      	adds	r7, #20
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b08c      	sub	sp, #48	; 0x30
 800a624:	af00      	add	r7, sp, #0
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	60b9      	str	r1, [r7, #8]
 800a62a:	4613      	mov	r3, r2
 800a62c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a634:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a636:	2300      	movs	r3, #0
 800a638:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a640:	2300      	movs	r3, #0
 800a642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800a646:	2300      	movs	r3, #0
 800a648:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	781a      	ldrb	r2, [r3, #0]
 800a654:	6a3b      	ldr	r3, [r7, #32]
 800a656:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	785a      	ldrb	r2, [r3, #1]
 800a65c:	6a3b      	ldr	r3, [r7, #32]
 800a65e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	3302      	adds	r3, #2
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	b29a      	uxth	r2, r3
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	3303      	adds	r3, #3
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	b29b      	uxth	r3, r3
 800a670:	021b      	lsls	r3, r3, #8
 800a672:	b29b      	uxth	r3, r3
 800a674:	4313      	orrs	r3, r2
 800a676:	b29b      	uxth	r3, r3
 800a678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a67c:	bf28      	it	cs
 800a67e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800a682:	b29a      	uxth	r2, r3
 800a684:	6a3b      	ldr	r3, [r7, #32]
 800a686:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	791a      	ldrb	r2, [r3, #4]
 800a68c:	6a3b      	ldr	r3, [r7, #32]
 800a68e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	795a      	ldrb	r2, [r3, #5]
 800a694:	6a3b      	ldr	r3, [r7, #32]
 800a696:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	799a      	ldrb	r2, [r3, #6]
 800a69c:	6a3b      	ldr	r3, [r7, #32]
 800a69e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	79da      	ldrb	r2, [r3, #7]
 800a6a4:	6a3b      	ldr	r3, [r7, #32]
 800a6a6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	7a1a      	ldrb	r2, [r3, #8]
 800a6ac:	6a3b      	ldr	r3, [r7, #32]
 800a6ae:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800a6b0:	6a3b      	ldr	r3, [r7, #32]
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	2b09      	cmp	r3, #9
 800a6b6:	d002      	beq.n	800a6be <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a6b8:	6a3b      	ldr	r3, [r7, #32]
 800a6ba:	2209      	movs	r2, #9
 800a6bc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a6be:	88fb      	ldrh	r3, [r7, #6]
 800a6c0:	2b09      	cmp	r3, #9
 800a6c2:	f240 809d 	bls.w	800a800 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800a6c6:	2309      	movs	r3, #9
 800a6c8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a6ce:	e081      	b.n	800a7d4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a6d0:	f107 0316 	add.w	r3, r7, #22
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6d8:	f000 f99f 	bl	800aa1a <USBH_GetNextDesc>
 800a6dc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e0:	785b      	ldrb	r3, [r3, #1]
 800a6e2:	2b04      	cmp	r3, #4
 800a6e4:	d176      	bne.n	800a7d4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	2b09      	cmp	r3, #9
 800a6ec:	d002      	beq.n	800a6f4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f0:	2209      	movs	r2, #9
 800a6f2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a6f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6f8:	221a      	movs	r2, #26
 800a6fa:	fb02 f303 	mul.w	r3, r2, r3
 800a6fe:	3308      	adds	r3, #8
 800a700:	6a3a      	ldr	r2, [r7, #32]
 800a702:	4413      	add	r3, r2
 800a704:	3302      	adds	r3, #2
 800a706:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a708:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a70a:	69f8      	ldr	r0, [r7, #28]
 800a70c:	f000 f87e 	bl	800a80c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a710:	2300      	movs	r3, #0
 800a712:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a716:	2300      	movs	r3, #0
 800a718:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a71a:	e043      	b.n	800a7a4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a71c:	f107 0316 	add.w	r3, r7, #22
 800a720:	4619      	mov	r1, r3
 800a722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a724:	f000 f979 	bl	800aa1a <USBH_GetNextDesc>
 800a728:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a72c:	785b      	ldrb	r3, [r3, #1]
 800a72e:	2b05      	cmp	r3, #5
 800a730:	d138      	bne.n	800a7a4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	795b      	ldrb	r3, [r3, #5]
 800a736:	2b01      	cmp	r3, #1
 800a738:	d10f      	bne.n	800a75a <USBH_ParseCfgDesc+0x13a>
 800a73a:	69fb      	ldr	r3, [r7, #28]
 800a73c:	799b      	ldrb	r3, [r3, #6]
 800a73e:	2b02      	cmp	r3, #2
 800a740:	d10b      	bne.n	800a75a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	79db      	ldrb	r3, [r3, #7]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d10f      	bne.n	800a76a <USBH_ParseCfgDesc+0x14a>
 800a74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	2b09      	cmp	r3, #9
 800a750:	d00b      	beq.n	800a76a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800a752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a754:	2209      	movs	r2, #9
 800a756:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a758:	e007      	b.n	800a76a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800a75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	2b07      	cmp	r3, #7
 800a760:	d004      	beq.n	800a76c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a764:	2207      	movs	r2, #7
 800a766:	701a      	strb	r2, [r3, #0]
 800a768:	e000      	b.n	800a76c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a76a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a76c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a770:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a774:	3201      	adds	r2, #1
 800a776:	00d2      	lsls	r2, r2, #3
 800a778:	211a      	movs	r1, #26
 800a77a:	fb01 f303 	mul.w	r3, r1, r3
 800a77e:	4413      	add	r3, r2
 800a780:	3308      	adds	r3, #8
 800a782:	6a3a      	ldr	r2, [r7, #32]
 800a784:	4413      	add	r3, r2
 800a786:	3304      	adds	r3, #4
 800a788:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a78a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a78c:	69b9      	ldr	r1, [r7, #24]
 800a78e:	68f8      	ldr	r0, [r7, #12]
 800a790:	f000 f86b 	bl	800a86a <USBH_ParseEPDesc>
 800a794:	4603      	mov	r3, r0
 800a796:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800a79a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a79e:	3301      	adds	r3, #1
 800a7a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a7a4:	69fb      	ldr	r3, [r7, #28]
 800a7a6:	791b      	ldrb	r3, [r3, #4]
 800a7a8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d204      	bcs.n	800a7ba <USBH_ParseCfgDesc+0x19a>
 800a7b0:	6a3b      	ldr	r3, [r7, #32]
 800a7b2:	885a      	ldrh	r2, [r3, #2]
 800a7b4:	8afb      	ldrh	r3, [r7, #22]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d8b0      	bhi.n	800a71c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a7ba:	69fb      	ldr	r3, [r7, #28]
 800a7bc:	791b      	ldrb	r3, [r3, #4]
 800a7be:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d201      	bcs.n	800a7ca <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800a7c6:	2303      	movs	r3, #3
 800a7c8:	e01c      	b.n	800a804 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800a7ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a7d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d805      	bhi.n	800a7e8 <USBH_ParseCfgDesc+0x1c8>
 800a7dc:	6a3b      	ldr	r3, [r7, #32]
 800a7de:	885a      	ldrh	r2, [r3, #2]
 800a7e0:	8afb      	ldrh	r3, [r7, #22]
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	f63f af74 	bhi.w	800a6d0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a7e8:	6a3b      	ldr	r3, [r7, #32]
 800a7ea:	791b      	ldrb	r3, [r3, #4]
 800a7ec:	2b02      	cmp	r3, #2
 800a7ee:	bf28      	it	cs
 800a7f0:	2302      	movcs	r3, #2
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d201      	bcs.n	800a800 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800a7fc:	2303      	movs	r3, #3
 800a7fe:	e001      	b.n	800a804 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800a800:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a804:	4618      	mov	r0, r3
 800a806:	3730      	adds	r7, #48	; 0x30
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	781a      	ldrb	r2, [r3, #0]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	785a      	ldrb	r2, [r3, #1]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	789a      	ldrb	r2, [r3, #2]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	78da      	ldrb	r2, [r3, #3]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	791a      	ldrb	r2, [r3, #4]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	795a      	ldrb	r2, [r3, #5]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	799a      	ldrb	r2, [r3, #6]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	79da      	ldrb	r2, [r3, #7]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	7a1a      	ldrb	r2, [r3, #8]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	721a      	strb	r2, [r3, #8]
}
 800a85e:	bf00      	nop
 800a860:	370c      	adds	r7, #12
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr

0800a86a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800a86a:	b480      	push	{r7}
 800a86c:	b087      	sub	sp, #28
 800a86e:	af00      	add	r7, sp, #0
 800a870:	60f8      	str	r0, [r7, #12]
 800a872:	60b9      	str	r1, [r7, #8]
 800a874:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a876:	2300      	movs	r3, #0
 800a878:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	781a      	ldrb	r2, [r3, #0]
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	785a      	ldrb	r2, [r3, #1]
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	789a      	ldrb	r2, [r3, #2]
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	78da      	ldrb	r2, [r3, #3]
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	3304      	adds	r3, #4
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	b29a      	uxth	r2, r3
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	3305      	adds	r3, #5
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	021b      	lsls	r3, r3, #8
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	b29a      	uxth	r2, r3
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	799a      	ldrb	r2, [r3, #6]
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	889b      	ldrh	r3, [r3, #4]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d102      	bne.n	800a8cc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800a8c6:	2303      	movs	r3, #3
 800a8c8:	75fb      	strb	r3, [r7, #23]
 800a8ca:	e033      	b.n	800a934 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	889b      	ldrh	r3, [r3, #4]
 800a8d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a8d4:	f023 0307 	bic.w	r3, r3, #7
 800a8d8:	b29a      	uxth	r2, r3
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	889b      	ldrh	r3, [r3, #4]
 800a8e2:	b21a      	sxth	r2, r3
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	3304      	adds	r3, #4
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	b299      	uxth	r1, r3
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	3305      	adds	r3, #5
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	021b      	lsls	r3, r3, #8
 800a8f6:	b29b      	uxth	r3, r3
 800a8f8:	430b      	orrs	r3, r1
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a900:	2b00      	cmp	r3, #0
 800a902:	d110      	bne.n	800a926 <USBH_ParseEPDesc+0xbc>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	3304      	adds	r3, #4
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	b299      	uxth	r1, r3
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	3305      	adds	r3, #5
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	b29b      	uxth	r3, r3
 800a914:	021b      	lsls	r3, r3, #8
 800a916:	b29b      	uxth	r3, r3
 800a918:	430b      	orrs	r3, r1
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	b21b      	sxth	r3, r3
 800a91e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a922:	b21b      	sxth	r3, r3
 800a924:	e001      	b.n	800a92a <USBH_ParseEPDesc+0xc0>
 800a926:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a92a:	4313      	orrs	r3, r2
 800a92c:	b21b      	sxth	r3, r3
 800a92e:	b29a      	uxth	r2, r3
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d116      	bne.n	800a96c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	78db      	ldrb	r3, [r3, #3]
 800a942:	f003 0303 	and.w	r3, r3, #3
 800a946:	2b01      	cmp	r3, #1
 800a948:	d005      	beq.n	800a956 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	78db      	ldrb	r3, [r3, #3]
 800a94e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a952:	2b03      	cmp	r3, #3
 800a954:	d127      	bne.n	800a9a6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	799b      	ldrb	r3, [r3, #6]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d003      	beq.n	800a966 <USBH_ParseEPDesc+0xfc>
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	799b      	ldrb	r3, [r3, #6]
 800a962:	2b10      	cmp	r3, #16
 800a964:	d91f      	bls.n	800a9a6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a966:	2303      	movs	r3, #3
 800a968:	75fb      	strb	r3, [r7, #23]
 800a96a:	e01c      	b.n	800a9a6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	78db      	ldrb	r3, [r3, #3]
 800a970:	f003 0303 	and.w	r3, r3, #3
 800a974:	2b01      	cmp	r3, #1
 800a976:	d10a      	bne.n	800a98e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	799b      	ldrb	r3, [r3, #6]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d003      	beq.n	800a988 <USBH_ParseEPDesc+0x11e>
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	799b      	ldrb	r3, [r3, #6]
 800a984:	2b10      	cmp	r3, #16
 800a986:	d90e      	bls.n	800a9a6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a988:	2303      	movs	r3, #3
 800a98a:	75fb      	strb	r3, [r7, #23]
 800a98c:	e00b      	b.n	800a9a6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	78db      	ldrb	r3, [r3, #3]
 800a992:	f003 0303 	and.w	r3, r3, #3
 800a996:	2b03      	cmp	r3, #3
 800a998:	d105      	bne.n	800a9a6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	799b      	ldrb	r3, [r3, #6]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d101      	bne.n	800a9a6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a9a2:	2303      	movs	r3, #3
 800a9a4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800a9a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	371c      	adds	r7, #28
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b087      	sub	sp, #28
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	60f8      	str	r0, [r7, #12]
 800a9bc:	60b9      	str	r1, [r7, #8]
 800a9be:	4613      	mov	r3, r2
 800a9c0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	2b03      	cmp	r3, #3
 800a9ca:	d120      	bne.n	800aa0e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	1e9a      	subs	r2, r3, #2
 800a9d2:	88fb      	ldrh	r3, [r7, #6]
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	bf28      	it	cs
 800a9d8:	4613      	movcs	r3, r2
 800a9da:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	3302      	adds	r3, #2
 800a9e0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	82fb      	strh	r3, [r7, #22]
 800a9e6:	e00b      	b.n	800aa00 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a9e8:	8afb      	ldrh	r3, [r7, #22]
 800a9ea:	68fa      	ldr	r2, [r7, #12]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	781a      	ldrb	r2, [r3, #0]
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a9fa:	8afb      	ldrh	r3, [r7, #22]
 800a9fc:	3302      	adds	r3, #2
 800a9fe:	82fb      	strh	r3, [r7, #22]
 800aa00:	8afa      	ldrh	r2, [r7, #22]
 800aa02:	8abb      	ldrh	r3, [r7, #20]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d3ef      	bcc.n	800a9e8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	701a      	strb	r2, [r3, #0]
  }
}
 800aa0e:	bf00      	nop
 800aa10:	371c      	adds	r7, #28
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr

0800aa1a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800aa1a:	b480      	push	{r7}
 800aa1c:	b085      	sub	sp, #20
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
 800aa22:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	881a      	ldrh	r2, [r3, #0]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	b29b      	uxth	r3, r3
 800aa2e:	4413      	add	r3, r2
 800aa30:	b29a      	uxth	r2, r3
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	4413      	add	r3, r2
 800aa40:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aa42:	68fb      	ldr	r3, [r7, #12]
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3714      	adds	r7, #20
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b086      	sub	sp, #24
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	4613      	mov	r3, r2
 800aa5c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	789b      	ldrb	r3, [r3, #2]
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d002      	beq.n	800aa70 <USBH_CtlReq+0x20>
 800aa6a:	2b02      	cmp	r3, #2
 800aa6c:	d00f      	beq.n	800aa8e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800aa6e:	e027      	b.n	800aac0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	68ba      	ldr	r2, [r7, #8]
 800aa74:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	88fa      	ldrh	r2, [r7, #6]
 800aa7a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2202      	movs	r2, #2
 800aa86:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	75fb      	strb	r3, [r7, #23]
      break;
 800aa8c:	e018      	b.n	800aac0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800aa8e:	68f8      	ldr	r0, [r7, #12]
 800aa90:	f000 f81c 	bl	800aacc <USBH_HandleControl>
 800aa94:	4603      	mov	r3, r0
 800aa96:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800aa98:	7dfb      	ldrb	r3, [r7, #23]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d002      	beq.n	800aaa4 <USBH_CtlReq+0x54>
 800aa9e:	7dfb      	ldrb	r3, [r7, #23]
 800aaa0:	2b03      	cmp	r3, #3
 800aaa2:	d106      	bne.n	800aab2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2200      	movs	r2, #0
 800aaae:	761a      	strb	r2, [r3, #24]
      break;
 800aab0:	e005      	b.n	800aabe <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800aab2:	7dfb      	ldrb	r3, [r7, #23]
 800aab4:	2b02      	cmp	r3, #2
 800aab6:	d102      	bne.n	800aabe <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2201      	movs	r2, #1
 800aabc:	709a      	strb	r2, [r3, #2]
      break;
 800aabe:	bf00      	nop
  }
  return status;
 800aac0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3718      	adds	r7, #24
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
	...

0800aacc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b086      	sub	sp, #24
 800aad0:	af02      	add	r7, sp, #8
 800aad2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800aad4:	2301      	movs	r3, #1
 800aad6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800aad8:	2300      	movs	r3, #0
 800aada:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	7e1b      	ldrb	r3, [r3, #24]
 800aae0:	3b01      	subs	r3, #1
 800aae2:	2b0a      	cmp	r3, #10
 800aae4:	f200 8156 	bhi.w	800ad94 <USBH_HandleControl+0x2c8>
 800aae8:	a201      	add	r2, pc, #4	; (adr r2, 800aaf0 <USBH_HandleControl+0x24>)
 800aaea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaee:	bf00      	nop
 800aaf0:	0800ab1d 	.word	0x0800ab1d
 800aaf4:	0800ab37 	.word	0x0800ab37
 800aaf8:	0800aba1 	.word	0x0800aba1
 800aafc:	0800abc7 	.word	0x0800abc7
 800ab00:	0800abff 	.word	0x0800abff
 800ab04:	0800ac29 	.word	0x0800ac29
 800ab08:	0800ac7b 	.word	0x0800ac7b
 800ab0c:	0800ac9d 	.word	0x0800ac9d
 800ab10:	0800acd9 	.word	0x0800acd9
 800ab14:	0800acff 	.word	0x0800acff
 800ab18:	0800ad3d 	.word	0x0800ad3d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f103 0110 	add.w	r1, r3, #16
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	795b      	ldrb	r3, [r3, #5]
 800ab26:	461a      	mov	r2, r3
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 f943 	bl	800adb4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2202      	movs	r2, #2
 800ab32:	761a      	strb	r2, [r3, #24]
      break;
 800ab34:	e139      	b.n	800adaa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	795b      	ldrb	r3, [r3, #5]
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 fcc5 	bl	800b4cc <USBH_LL_GetURBState>
 800ab42:	4603      	mov	r3, r0
 800ab44:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ab46:	7bbb      	ldrb	r3, [r7, #14]
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	d11e      	bne.n	800ab8a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	7c1b      	ldrb	r3, [r3, #16]
 800ab50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ab54:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	8adb      	ldrh	r3, [r3, #22]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d00a      	beq.n	800ab74 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ab5e:	7b7b      	ldrb	r3, [r7, #13]
 800ab60:	2b80      	cmp	r3, #128	; 0x80
 800ab62:	d103      	bne.n	800ab6c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2203      	movs	r2, #3
 800ab68:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ab6a:	e115      	b.n	800ad98 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2205      	movs	r2, #5
 800ab70:	761a      	strb	r2, [r3, #24]
      break;
 800ab72:	e111      	b.n	800ad98 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ab74:	7b7b      	ldrb	r3, [r7, #13]
 800ab76:	2b80      	cmp	r3, #128	; 0x80
 800ab78:	d103      	bne.n	800ab82 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2209      	movs	r2, #9
 800ab7e:	761a      	strb	r2, [r3, #24]
      break;
 800ab80:	e10a      	b.n	800ad98 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2207      	movs	r2, #7
 800ab86:	761a      	strb	r2, [r3, #24]
      break;
 800ab88:	e106      	b.n	800ad98 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ab8a:	7bbb      	ldrb	r3, [r7, #14]
 800ab8c:	2b04      	cmp	r3, #4
 800ab8e:	d003      	beq.n	800ab98 <USBH_HandleControl+0xcc>
 800ab90:	7bbb      	ldrb	r3, [r7, #14]
 800ab92:	2b02      	cmp	r3, #2
 800ab94:	f040 8100 	bne.w	800ad98 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	220b      	movs	r2, #11
 800ab9c:	761a      	strb	r2, [r3, #24]
      break;
 800ab9e:	e0fb      	b.n	800ad98 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aba6:	b29a      	uxth	r2, r3
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6899      	ldr	r1, [r3, #8]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	899a      	ldrh	r2, [r3, #12]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	791b      	ldrb	r3, [r3, #4]
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 f93a 	bl	800ae32 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2204      	movs	r2, #4
 800abc2:	761a      	strb	r2, [r3, #24]
      break;
 800abc4:	e0f1      	b.n	800adaa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	791b      	ldrb	r3, [r3, #4]
 800abca:	4619      	mov	r1, r3
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 fc7d 	bl	800b4cc <USBH_LL_GetURBState>
 800abd2:	4603      	mov	r3, r0
 800abd4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800abd6:	7bbb      	ldrb	r3, [r7, #14]
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d102      	bne.n	800abe2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2209      	movs	r2, #9
 800abe0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800abe2:	7bbb      	ldrb	r3, [r7, #14]
 800abe4:	2b05      	cmp	r3, #5
 800abe6:	d102      	bne.n	800abee <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800abe8:	2303      	movs	r3, #3
 800abea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800abec:	e0d6      	b.n	800ad9c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800abee:	7bbb      	ldrb	r3, [r7, #14]
 800abf0:	2b04      	cmp	r3, #4
 800abf2:	f040 80d3 	bne.w	800ad9c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	220b      	movs	r2, #11
 800abfa:	761a      	strb	r2, [r3, #24]
      break;
 800abfc:	e0ce      	b.n	800ad9c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6899      	ldr	r1, [r3, #8]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	899a      	ldrh	r2, [r3, #12]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	795b      	ldrb	r3, [r3, #5]
 800ac0a:	2001      	movs	r0, #1
 800ac0c:	9000      	str	r0, [sp, #0]
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 f8ea 	bl	800ade8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ac1a:	b29a      	uxth	r2, r3
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2206      	movs	r2, #6
 800ac24:	761a      	strb	r2, [r3, #24]
      break;
 800ac26:	e0c0      	b.n	800adaa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	795b      	ldrb	r3, [r3, #5]
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 fc4c 	bl	800b4cc <USBH_LL_GetURBState>
 800ac34:	4603      	mov	r3, r0
 800ac36:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ac38:	7bbb      	ldrb	r3, [r7, #14]
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d103      	bne.n	800ac46 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2207      	movs	r2, #7
 800ac42:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ac44:	e0ac      	b.n	800ada0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ac46:	7bbb      	ldrb	r3, [r7, #14]
 800ac48:	2b05      	cmp	r3, #5
 800ac4a:	d105      	bne.n	800ac58 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	220c      	movs	r2, #12
 800ac50:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ac52:	2303      	movs	r3, #3
 800ac54:	73fb      	strb	r3, [r7, #15]
      break;
 800ac56:	e0a3      	b.n	800ada0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ac58:	7bbb      	ldrb	r3, [r7, #14]
 800ac5a:	2b02      	cmp	r3, #2
 800ac5c:	d103      	bne.n	800ac66 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2205      	movs	r2, #5
 800ac62:	761a      	strb	r2, [r3, #24]
      break;
 800ac64:	e09c      	b.n	800ada0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ac66:	7bbb      	ldrb	r3, [r7, #14]
 800ac68:	2b04      	cmp	r3, #4
 800ac6a:	f040 8099 	bne.w	800ada0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	220b      	movs	r2, #11
 800ac72:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ac74:	2302      	movs	r3, #2
 800ac76:	73fb      	strb	r3, [r7, #15]
      break;
 800ac78:	e092      	b.n	800ada0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	791b      	ldrb	r3, [r3, #4]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	2100      	movs	r1, #0
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 f8d5 	bl	800ae32 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ac8e:	b29a      	uxth	r2, r3
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2208      	movs	r2, #8
 800ac98:	761a      	strb	r2, [r3, #24]

      break;
 800ac9a:	e086      	b.n	800adaa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	791b      	ldrb	r3, [r3, #4]
 800aca0:	4619      	mov	r1, r3
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 fc12 	bl	800b4cc <USBH_LL_GetURBState>
 800aca8:	4603      	mov	r3, r0
 800acaa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800acac:	7bbb      	ldrb	r3, [r7, #14]
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d105      	bne.n	800acbe <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	220d      	movs	r2, #13
 800acb6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800acb8:	2300      	movs	r3, #0
 800acba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800acbc:	e072      	b.n	800ada4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800acbe:	7bbb      	ldrb	r3, [r7, #14]
 800acc0:	2b04      	cmp	r3, #4
 800acc2:	d103      	bne.n	800accc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	220b      	movs	r2, #11
 800acc8:	761a      	strb	r2, [r3, #24]
      break;
 800acca:	e06b      	b.n	800ada4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800accc:	7bbb      	ldrb	r3, [r7, #14]
 800acce:	2b05      	cmp	r3, #5
 800acd0:	d168      	bne.n	800ada4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800acd2:	2303      	movs	r3, #3
 800acd4:	73fb      	strb	r3, [r7, #15]
      break;
 800acd6:	e065      	b.n	800ada4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	795b      	ldrb	r3, [r3, #5]
 800acdc:	2201      	movs	r2, #1
 800acde:	9200      	str	r2, [sp, #0]
 800ace0:	2200      	movs	r2, #0
 800ace2:	2100      	movs	r1, #0
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f000 f87f 	bl	800ade8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800acf0:	b29a      	uxth	r2, r3
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	220a      	movs	r2, #10
 800acfa:	761a      	strb	r2, [r3, #24]
      break;
 800acfc:	e055      	b.n	800adaa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	795b      	ldrb	r3, [r3, #5]
 800ad02:	4619      	mov	r1, r3
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 fbe1 	bl	800b4cc <USBH_LL_GetURBState>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ad0e:	7bbb      	ldrb	r3, [r7, #14]
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d105      	bne.n	800ad20 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800ad14:	2300      	movs	r3, #0
 800ad16:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	220d      	movs	r2, #13
 800ad1c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ad1e:	e043      	b.n	800ada8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ad20:	7bbb      	ldrb	r3, [r7, #14]
 800ad22:	2b02      	cmp	r3, #2
 800ad24:	d103      	bne.n	800ad2e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2209      	movs	r2, #9
 800ad2a:	761a      	strb	r2, [r3, #24]
      break;
 800ad2c:	e03c      	b.n	800ada8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800ad2e:	7bbb      	ldrb	r3, [r7, #14]
 800ad30:	2b04      	cmp	r3, #4
 800ad32:	d139      	bne.n	800ada8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	220b      	movs	r2, #11
 800ad38:	761a      	strb	r2, [r3, #24]
      break;
 800ad3a:	e035      	b.n	800ada8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	7e5b      	ldrb	r3, [r3, #25]
 800ad40:	3301      	adds	r3, #1
 800ad42:	b2da      	uxtb	r2, r3
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	765a      	strb	r2, [r3, #25]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	7e5b      	ldrb	r3, [r3, #25]
 800ad4c:	2b02      	cmp	r3, #2
 800ad4e:	d806      	bhi.n	800ad5e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2201      	movs	r2, #1
 800ad5a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ad5c:	e025      	b.n	800adaa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad64:	2106      	movs	r1, #6
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	795b      	ldrb	r3, [r3, #5]
 800ad74:	4619      	mov	r1, r3
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 f90c 	bl	800af94 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	791b      	ldrb	r3, [r3, #4]
 800ad80:	4619      	mov	r1, r3
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 f906 	bl	800af94 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ad8e:	2302      	movs	r3, #2
 800ad90:	73fb      	strb	r3, [r7, #15]
      break;
 800ad92:	e00a      	b.n	800adaa <USBH_HandleControl+0x2de>

    default:
      break;
 800ad94:	bf00      	nop
 800ad96:	e008      	b.n	800adaa <USBH_HandleControl+0x2de>
      break;
 800ad98:	bf00      	nop
 800ad9a:	e006      	b.n	800adaa <USBH_HandleControl+0x2de>
      break;
 800ad9c:	bf00      	nop
 800ad9e:	e004      	b.n	800adaa <USBH_HandleControl+0x2de>
      break;
 800ada0:	bf00      	nop
 800ada2:	e002      	b.n	800adaa <USBH_HandleControl+0x2de>
      break;
 800ada4:	bf00      	nop
 800ada6:	e000      	b.n	800adaa <USBH_HandleControl+0x2de>
      break;
 800ada8:	bf00      	nop
  }

  return status;
 800adaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800adac:	4618      	mov	r0, r3
 800adae:	3710      	adds	r7, #16
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b088      	sub	sp, #32
 800adb8:	af04      	add	r7, sp, #16
 800adba:	60f8      	str	r0, [r7, #12]
 800adbc:	60b9      	str	r1, [r7, #8]
 800adbe:	4613      	mov	r3, r2
 800adc0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800adc2:	79f9      	ldrb	r1, [r7, #7]
 800adc4:	2300      	movs	r3, #0
 800adc6:	9303      	str	r3, [sp, #12]
 800adc8:	2308      	movs	r3, #8
 800adca:	9302      	str	r3, [sp, #8]
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	9301      	str	r3, [sp, #4]
 800add0:	2300      	movs	r3, #0
 800add2:	9300      	str	r3, [sp, #0]
 800add4:	2300      	movs	r3, #0
 800add6:	2200      	movs	r2, #0
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f000 fb46 	bl	800b46a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800adde:	2300      	movs	r3, #0
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3710      	adds	r7, #16
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b088      	sub	sp, #32
 800adec:	af04      	add	r7, sp, #16
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	4611      	mov	r1, r2
 800adf4:	461a      	mov	r2, r3
 800adf6:	460b      	mov	r3, r1
 800adf8:	80fb      	strh	r3, [r7, #6]
 800adfa:	4613      	mov	r3, r2
 800adfc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d001      	beq.n	800ae0c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae0c:	7979      	ldrb	r1, [r7, #5]
 800ae0e:	7e3b      	ldrb	r3, [r7, #24]
 800ae10:	9303      	str	r3, [sp, #12]
 800ae12:	88fb      	ldrh	r3, [r7, #6]
 800ae14:	9302      	str	r3, [sp, #8]
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	9301      	str	r3, [sp, #4]
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	9300      	str	r3, [sp, #0]
 800ae1e:	2300      	movs	r3, #0
 800ae20:	2200      	movs	r2, #0
 800ae22:	68f8      	ldr	r0, [r7, #12]
 800ae24:	f000 fb21 	bl	800b46a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ae28:	2300      	movs	r3, #0
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3710      	adds	r7, #16
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}

0800ae32 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ae32:	b580      	push	{r7, lr}
 800ae34:	b088      	sub	sp, #32
 800ae36:	af04      	add	r7, sp, #16
 800ae38:	60f8      	str	r0, [r7, #12]
 800ae3a:	60b9      	str	r1, [r7, #8]
 800ae3c:	4611      	mov	r1, r2
 800ae3e:	461a      	mov	r2, r3
 800ae40:	460b      	mov	r3, r1
 800ae42:	80fb      	strh	r3, [r7, #6]
 800ae44:	4613      	mov	r3, r2
 800ae46:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae48:	7979      	ldrb	r1, [r7, #5]
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	9303      	str	r3, [sp, #12]
 800ae4e:	88fb      	ldrh	r3, [r7, #6]
 800ae50:	9302      	str	r3, [sp, #8]
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	9301      	str	r3, [sp, #4]
 800ae56:	2301      	movs	r3, #1
 800ae58:	9300      	str	r3, [sp, #0]
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	68f8      	ldr	r0, [r7, #12]
 800ae60:	f000 fb03 	bl	800b46a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ae64:	2300      	movs	r3, #0

}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3710      	adds	r7, #16
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ae6e:	b580      	push	{r7, lr}
 800ae70:	b088      	sub	sp, #32
 800ae72:	af04      	add	r7, sp, #16
 800ae74:	60f8      	str	r0, [r7, #12]
 800ae76:	60b9      	str	r1, [r7, #8]
 800ae78:	4611      	mov	r1, r2
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	80fb      	strh	r3, [r7, #6]
 800ae80:	4613      	mov	r3, r2
 800ae82:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d001      	beq.n	800ae92 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae92:	7979      	ldrb	r1, [r7, #5]
 800ae94:	7e3b      	ldrb	r3, [r7, #24]
 800ae96:	9303      	str	r3, [sp, #12]
 800ae98:	88fb      	ldrh	r3, [r7, #6]
 800ae9a:	9302      	str	r3, [sp, #8]
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	9301      	str	r3, [sp, #4]
 800aea0:	2301      	movs	r3, #1
 800aea2:	9300      	str	r3, [sp, #0]
 800aea4:	2302      	movs	r3, #2
 800aea6:	2200      	movs	r2, #0
 800aea8:	68f8      	ldr	r0, [r7, #12]
 800aeaa:	f000 fade 	bl	800b46a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800aeae:	2300      	movs	r3, #0
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3710      	adds	r7, #16
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b088      	sub	sp, #32
 800aebc:	af04      	add	r7, sp, #16
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	4611      	mov	r1, r2
 800aec4:	461a      	mov	r2, r3
 800aec6:	460b      	mov	r3, r1
 800aec8:	80fb      	strh	r3, [r7, #6]
 800aeca:	4613      	mov	r3, r2
 800aecc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aece:	7979      	ldrb	r1, [r7, #5]
 800aed0:	2300      	movs	r3, #0
 800aed2:	9303      	str	r3, [sp, #12]
 800aed4:	88fb      	ldrh	r3, [r7, #6]
 800aed6:	9302      	str	r3, [sp, #8]
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	9301      	str	r3, [sp, #4]
 800aedc:	2301      	movs	r3, #1
 800aede:	9300      	str	r3, [sp, #0]
 800aee0:	2302      	movs	r3, #2
 800aee2:	2201      	movs	r2, #1
 800aee4:	68f8      	ldr	r0, [r7, #12]
 800aee6:	f000 fac0 	bl	800b46a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aeea:	2300      	movs	r3, #0
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3710      	adds	r7, #16
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b086      	sub	sp, #24
 800aef8:	af04      	add	r7, sp, #16
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	4608      	mov	r0, r1
 800aefe:	4611      	mov	r1, r2
 800af00:	461a      	mov	r2, r3
 800af02:	4603      	mov	r3, r0
 800af04:	70fb      	strb	r3, [r7, #3]
 800af06:	460b      	mov	r3, r1
 800af08:	70bb      	strb	r3, [r7, #2]
 800af0a:	4613      	mov	r3, r2
 800af0c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800af0e:	7878      	ldrb	r0, [r7, #1]
 800af10:	78ba      	ldrb	r2, [r7, #2]
 800af12:	78f9      	ldrb	r1, [r7, #3]
 800af14:	8b3b      	ldrh	r3, [r7, #24]
 800af16:	9302      	str	r3, [sp, #8]
 800af18:	7d3b      	ldrb	r3, [r7, #20]
 800af1a:	9301      	str	r3, [sp, #4]
 800af1c:	7c3b      	ldrb	r3, [r7, #16]
 800af1e:	9300      	str	r3, [sp, #0]
 800af20:	4603      	mov	r3, r0
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 fa53 	bl	800b3ce <USBH_LL_OpenPipe>

  return USBH_OK;
 800af28:	2300      	movs	r3, #0
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3708      	adds	r7, #8
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}

0800af32 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800af32:	b580      	push	{r7, lr}
 800af34:	b082      	sub	sp, #8
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
 800af3a:	460b      	mov	r3, r1
 800af3c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800af3e:	78fb      	ldrb	r3, [r7, #3]
 800af40:	4619      	mov	r1, r3
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 fa72 	bl	800b42c <USBH_LL_ClosePipe>

  return USBH_OK;
 800af48:	2300      	movs	r3, #0
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3708      	adds	r7, #8
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800af52:	b580      	push	{r7, lr}
 800af54:	b084      	sub	sp, #16
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
 800af5a:	460b      	mov	r3, r1
 800af5c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 f836 	bl	800afd0 <USBH_GetFreePipe>
 800af64:	4603      	mov	r3, r0
 800af66:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800af68:	89fb      	ldrh	r3, [r7, #14]
 800af6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af6e:	4293      	cmp	r3, r2
 800af70:	d00a      	beq.n	800af88 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800af72:	78fa      	ldrb	r2, [r7, #3]
 800af74:	89fb      	ldrh	r3, [r7, #14]
 800af76:	f003 030f 	and.w	r3, r3, #15
 800af7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af7e:	6879      	ldr	r1, [r7, #4]
 800af80:	33e0      	adds	r3, #224	; 0xe0
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	440b      	add	r3, r1
 800af86:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800af88:	89fb      	ldrh	r3, [r7, #14]
 800af8a:	b2db      	uxtb	r3, r3
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3710      	adds	r7, #16
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	460b      	mov	r3, r1
 800af9e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800afa0:	78fb      	ldrb	r3, [r7, #3]
 800afa2:	2b0f      	cmp	r3, #15
 800afa4:	d80d      	bhi.n	800afc2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800afa6:	78fb      	ldrb	r3, [r7, #3]
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	33e0      	adds	r3, #224	; 0xe0
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	4413      	add	r3, r2
 800afb0:	685a      	ldr	r2, [r3, #4]
 800afb2:	78fb      	ldrb	r3, [r7, #3]
 800afb4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800afb8:	6879      	ldr	r1, [r7, #4]
 800afba:	33e0      	adds	r3, #224	; 0xe0
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	440b      	add	r3, r1
 800afc0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800afc2:	2300      	movs	r3, #0
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	370c      	adds	r7, #12
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr

0800afd0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b085      	sub	sp, #20
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800afd8:	2300      	movs	r3, #0
 800afda:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800afdc:	2300      	movs	r3, #0
 800afde:	73fb      	strb	r3, [r7, #15]
 800afe0:	e00f      	b.n	800b002 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800afe2:	7bfb      	ldrb	r3, [r7, #15]
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	33e0      	adds	r3, #224	; 0xe0
 800afe8:	009b      	lsls	r3, r3, #2
 800afea:	4413      	add	r3, r2
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d102      	bne.n	800affc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800aff6:	7bfb      	ldrb	r3, [r7, #15]
 800aff8:	b29b      	uxth	r3, r3
 800affa:	e007      	b.n	800b00c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800affc:	7bfb      	ldrb	r3, [r7, #15]
 800affe:	3301      	adds	r3, #1
 800b000:	73fb      	strb	r3, [r7, #15]
 800b002:	7bfb      	ldrb	r3, [r7, #15]
 800b004:	2b0f      	cmp	r3, #15
 800b006:	d9ec      	bls.n	800afe2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b008:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3714      	adds	r7, #20
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b01c:	2201      	movs	r2, #1
 800b01e:	490e      	ldr	r1, [pc, #56]	; (800b058 <MX_USB_HOST_Init+0x40>)
 800b020:	480e      	ldr	r0, [pc, #56]	; (800b05c <MX_USB_HOST_Init+0x44>)
 800b022:	f7fe fba7 	bl	8009774 <USBH_Init>
 800b026:	4603      	mov	r3, r0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d001      	beq.n	800b030 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b02c:	f7f5 fc48 	bl	80008c0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b030:	490b      	ldr	r1, [pc, #44]	; (800b060 <MX_USB_HOST_Init+0x48>)
 800b032:	480a      	ldr	r0, [pc, #40]	; (800b05c <MX_USB_HOST_Init+0x44>)
 800b034:	f7fe fc2c 	bl	8009890 <USBH_RegisterClass>
 800b038:	4603      	mov	r3, r0
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d001      	beq.n	800b042 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b03e:	f7f5 fc3f 	bl	80008c0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b042:	4806      	ldr	r0, [pc, #24]	; (800b05c <MX_USB_HOST_Init+0x44>)
 800b044:	f7fe fcb0 	bl	80099a8 <USBH_Start>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d001      	beq.n	800b052 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b04e:	f7f5 fc37 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b052:	bf00      	nop
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	0800b079 	.word	0x0800b079
 800b05c:	200003ac 	.word	0x200003ac
 800b060:	20000070 	.word	0x20000070

0800b064 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b068:	4802      	ldr	r0, [pc, #8]	; (800b074 <MX_USB_HOST_Process+0x10>)
 800b06a:	f7fe fcad 	bl	80099c8 <USBH_Process>
}
 800b06e:	bf00      	nop
 800b070:	bd80      	pop	{r7, pc}
 800b072:	bf00      	nop
 800b074:	200003ac 	.word	0x200003ac

0800b078 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	460b      	mov	r3, r1
 800b082:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b084:	78fb      	ldrb	r3, [r7, #3]
 800b086:	3b01      	subs	r3, #1
 800b088:	2b04      	cmp	r3, #4
 800b08a:	d819      	bhi.n	800b0c0 <USBH_UserProcess+0x48>
 800b08c:	a201      	add	r2, pc, #4	; (adr r2, 800b094 <USBH_UserProcess+0x1c>)
 800b08e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b092:	bf00      	nop
 800b094:	0800b0c1 	.word	0x0800b0c1
 800b098:	0800b0b1 	.word	0x0800b0b1
 800b09c:	0800b0c1 	.word	0x0800b0c1
 800b0a0:	0800b0b9 	.word	0x0800b0b9
 800b0a4:	0800b0a9 	.word	0x0800b0a9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b0a8:	4b09      	ldr	r3, [pc, #36]	; (800b0d0 <USBH_UserProcess+0x58>)
 800b0aa:	2203      	movs	r2, #3
 800b0ac:	701a      	strb	r2, [r3, #0]
  break;
 800b0ae:	e008      	b.n	800b0c2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b0b0:	4b07      	ldr	r3, [pc, #28]	; (800b0d0 <USBH_UserProcess+0x58>)
 800b0b2:	2202      	movs	r2, #2
 800b0b4:	701a      	strb	r2, [r3, #0]
  break;
 800b0b6:	e004      	b.n	800b0c2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b0b8:	4b05      	ldr	r3, [pc, #20]	; (800b0d0 <USBH_UserProcess+0x58>)
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	701a      	strb	r2, [r3, #0]
  break;
 800b0be:	e000      	b.n	800b0c2 <USBH_UserProcess+0x4a>

  default:
  break;
 800b0c0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b0c2:	bf00      	nop
 800b0c4:	370c      	adds	r7, #12
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr
 800b0ce:	bf00      	nop
 800b0d0:	20000784 	.word	0x20000784

0800b0d4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b08a      	sub	sp, #40	; 0x28
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0dc:	f107 0314 	add.w	r3, r7, #20
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	601a      	str	r2, [r3, #0]
 800b0e4:	605a      	str	r2, [r3, #4]
 800b0e6:	609a      	str	r2, [r3, #8]
 800b0e8:	60da      	str	r2, [r3, #12]
 800b0ea:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b0f4:	d147      	bne.n	800b186 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	613b      	str	r3, [r7, #16]
 800b0fa:	4b25      	ldr	r3, [pc, #148]	; (800b190 <HAL_HCD_MspInit+0xbc>)
 800b0fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0fe:	4a24      	ldr	r2, [pc, #144]	; (800b190 <HAL_HCD_MspInit+0xbc>)
 800b100:	f043 0301 	orr.w	r3, r3, #1
 800b104:	6313      	str	r3, [r2, #48]	; 0x30
 800b106:	4b22      	ldr	r3, [pc, #136]	; (800b190 <HAL_HCD_MspInit+0xbc>)
 800b108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b10a:	f003 0301 	and.w	r3, r3, #1
 800b10e:	613b      	str	r3, [r7, #16]
 800b110:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b112:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b118:	2300      	movs	r3, #0
 800b11a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b11c:	2300      	movs	r3, #0
 800b11e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b120:	f107 0314 	add.w	r3, r7, #20
 800b124:	4619      	mov	r1, r3
 800b126:	481b      	ldr	r0, [pc, #108]	; (800b194 <HAL_HCD_MspInit+0xc0>)
 800b128:	f7f9 f8e0 	bl	80042ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b12c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b132:	2302      	movs	r3, #2
 800b134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b136:	2300      	movs	r3, #0
 800b138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b13a:	2300      	movs	r3, #0
 800b13c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b13e:	230a      	movs	r3, #10
 800b140:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b142:	f107 0314 	add.w	r3, r7, #20
 800b146:	4619      	mov	r1, r3
 800b148:	4812      	ldr	r0, [pc, #72]	; (800b194 <HAL_HCD_MspInit+0xc0>)
 800b14a:	f7f9 f8cf 	bl	80042ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b14e:	4b10      	ldr	r3, [pc, #64]	; (800b190 <HAL_HCD_MspInit+0xbc>)
 800b150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b152:	4a0f      	ldr	r2, [pc, #60]	; (800b190 <HAL_HCD_MspInit+0xbc>)
 800b154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b158:	6353      	str	r3, [r2, #52]	; 0x34
 800b15a:	2300      	movs	r3, #0
 800b15c:	60fb      	str	r3, [r7, #12]
 800b15e:	4b0c      	ldr	r3, [pc, #48]	; (800b190 <HAL_HCD_MspInit+0xbc>)
 800b160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b162:	4a0b      	ldr	r2, [pc, #44]	; (800b190 <HAL_HCD_MspInit+0xbc>)
 800b164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b168:	6453      	str	r3, [r2, #68]	; 0x44
 800b16a:	4b09      	ldr	r3, [pc, #36]	; (800b190 <HAL_HCD_MspInit+0xbc>)
 800b16c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b16e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b172:	60fb      	str	r3, [r7, #12]
 800b174:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b176:	2200      	movs	r2, #0
 800b178:	2100      	movs	r1, #0
 800b17a:	2043      	movs	r0, #67	; 0x43
 800b17c:	f7f9 f87f 	bl	800427e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b180:	2043      	movs	r0, #67	; 0x43
 800b182:	f7f9 f898 	bl	80042b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b186:	bf00      	nop
 800b188:	3728      	adds	r7, #40	; 0x28
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
 800b18e:	bf00      	nop
 800b190:	40023800 	.word	0x40023800
 800b194:	40020000 	.word	0x40020000

0800b198 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7fe ffed 	bl	800a186 <USBH_LL_IncTimer>
}
 800b1ac:	bf00      	nop
 800b1ae:	3708      	adds	r7, #8
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f7ff f825 	bl	800a212 <USBH_LL_Connect>
}
 800b1c8:	bf00      	nop
 800b1ca:	3708      	adds	r7, #8
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f7ff f82e 	bl	800a240 <USBH_LL_Disconnect>
}
 800b1e4:	bf00      	nop
 800b1e6:	3708      	adds	r7, #8
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	70fb      	strb	r3, [r7, #3]
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b1fc:	bf00      	nop
 800b1fe:	370c      	adds	r7, #12
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b216:	4618      	mov	r0, r3
 800b218:	f7fe ffdf 	bl	800a1da <USBH_LL_PortEnabled>
}
 800b21c:	bf00      	nop
 800b21e:	3708      	adds	r7, #8
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b232:	4618      	mov	r0, r3
 800b234:	f7fe ffdf 	bl	800a1f6 <USBH_LL_PortDisabled>
}
 800b238:	bf00      	nop
 800b23a:	3708      	adds	r7, #8
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b24e:	2b01      	cmp	r3, #1
 800b250:	d12a      	bne.n	800b2a8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b252:	4a18      	ldr	r2, [pc, #96]	; (800b2b4 <USBH_LL_Init+0x74>)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	4a15      	ldr	r2, [pc, #84]	; (800b2b4 <USBH_LL_Init+0x74>)
 800b25e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b262:	4b14      	ldr	r3, [pc, #80]	; (800b2b4 <USBH_LL_Init+0x74>)
 800b264:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b268:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b26a:	4b12      	ldr	r3, [pc, #72]	; (800b2b4 <USBH_LL_Init+0x74>)
 800b26c:	2208      	movs	r2, #8
 800b26e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b270:	4b10      	ldr	r3, [pc, #64]	; (800b2b4 <USBH_LL_Init+0x74>)
 800b272:	2201      	movs	r2, #1
 800b274:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b276:	4b0f      	ldr	r3, [pc, #60]	; (800b2b4 <USBH_LL_Init+0x74>)
 800b278:	2200      	movs	r2, #0
 800b27a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b27c:	4b0d      	ldr	r3, [pc, #52]	; (800b2b4 <USBH_LL_Init+0x74>)
 800b27e:	2202      	movs	r2, #2
 800b280:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b282:	4b0c      	ldr	r3, [pc, #48]	; (800b2b4 <USBH_LL_Init+0x74>)
 800b284:	2200      	movs	r2, #0
 800b286:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b288:	480a      	ldr	r0, [pc, #40]	; (800b2b4 <USBH_LL_Init+0x74>)
 800b28a:	f7f9 fae0 	bl	800484e <HAL_HCD_Init>
 800b28e:	4603      	mov	r3, r0
 800b290:	2b00      	cmp	r3, #0
 800b292:	d001      	beq.n	800b298 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b294:	f7f5 fb14 	bl	80008c0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b298:	4806      	ldr	r0, [pc, #24]	; (800b2b4 <USBH_LL_Init+0x74>)
 800b29a:	f7f9 fec4 	bl	8005026 <HAL_HCD_GetCurrentFrame>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f7fe ff60 	bl	800a168 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b2a8:	2300      	movs	r3, #0
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3708      	adds	r7, #8
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	20000788 	.word	0x20000788

0800b2b8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b084      	sub	sp, #16
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f7f9 fe33 	bl	8004f3a <HAL_HCD_Start>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b2d8:	7bfb      	ldrb	r3, [r7, #15]
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f000 f95c 	bl	800b598 <USBH_Get_USB_Status>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}

0800b2ee <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b2ee:	b580      	push	{r7, lr}
 800b2f0:	b084      	sub	sp, #16
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b304:	4618      	mov	r0, r3
 800b306:	f7f9 fe3b 	bl	8004f80 <HAL_HCD_Stop>
 800b30a:	4603      	mov	r3, r0
 800b30c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b30e:	7bfb      	ldrb	r3, [r7, #15]
 800b310:	4618      	mov	r0, r3
 800b312:	f000 f941 	bl	800b598 <USBH_Get_USB_Status>
 800b316:	4603      	mov	r3, r0
 800b318:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b31a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3710      	adds	r7, #16
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b084      	sub	sp, #16
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b32c:	2301      	movs	r3, #1
 800b32e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b336:	4618      	mov	r0, r3
 800b338:	f7f9 fe83 	bl	8005042 <HAL_HCD_GetCurrentSpeed>
 800b33c:	4603      	mov	r3, r0
 800b33e:	2b02      	cmp	r3, #2
 800b340:	d00c      	beq.n	800b35c <USBH_LL_GetSpeed+0x38>
 800b342:	2b02      	cmp	r3, #2
 800b344:	d80d      	bhi.n	800b362 <USBH_LL_GetSpeed+0x3e>
 800b346:	2b00      	cmp	r3, #0
 800b348:	d002      	beq.n	800b350 <USBH_LL_GetSpeed+0x2c>
 800b34a:	2b01      	cmp	r3, #1
 800b34c:	d003      	beq.n	800b356 <USBH_LL_GetSpeed+0x32>
 800b34e:	e008      	b.n	800b362 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b350:	2300      	movs	r3, #0
 800b352:	73fb      	strb	r3, [r7, #15]
    break;
 800b354:	e008      	b.n	800b368 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b356:	2301      	movs	r3, #1
 800b358:	73fb      	strb	r3, [r7, #15]
    break;
 800b35a:	e005      	b.n	800b368 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b35c:	2302      	movs	r3, #2
 800b35e:	73fb      	strb	r3, [r7, #15]
    break;
 800b360:	e002      	b.n	800b368 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b362:	2301      	movs	r3, #1
 800b364:	73fb      	strb	r3, [r7, #15]
    break;
 800b366:	bf00      	nop
  }
  return  speed;
 800b368:	7bfb      	ldrb	r3, [r7, #15]
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b372:	b580      	push	{r7, lr}
 800b374:	b084      	sub	sp, #16
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b37a:	2300      	movs	r3, #0
 800b37c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b37e:	2300      	movs	r3, #0
 800b380:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b388:	4618      	mov	r0, r3
 800b38a:	f7f9 fe16 	bl	8004fba <HAL_HCD_ResetPort>
 800b38e:	4603      	mov	r3, r0
 800b390:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b392:	7bfb      	ldrb	r3, [r7, #15]
 800b394:	4618      	mov	r0, r3
 800b396:	f000 f8ff 	bl	800b598 <USBH_Get_USB_Status>
 800b39a:	4603      	mov	r3, r0
 800b39c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b39e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b3ba:	78fa      	ldrb	r2, [r7, #3]
 800b3bc:	4611      	mov	r1, r2
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7f9 fe1d 	bl	8004ffe <HAL_HCD_HC_GetXferCount>
 800b3c4:	4603      	mov	r3, r0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3708      	adds	r7, #8
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b3ce:	b590      	push	{r4, r7, lr}
 800b3d0:	b089      	sub	sp, #36	; 0x24
 800b3d2:	af04      	add	r7, sp, #16
 800b3d4:	6078      	str	r0, [r7, #4]
 800b3d6:	4608      	mov	r0, r1
 800b3d8:	4611      	mov	r1, r2
 800b3da:	461a      	mov	r2, r3
 800b3dc:	4603      	mov	r3, r0
 800b3de:	70fb      	strb	r3, [r7, #3]
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	70bb      	strb	r3, [r7, #2]
 800b3e4:	4613      	mov	r3, r2
 800b3e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b3f6:	787c      	ldrb	r4, [r7, #1]
 800b3f8:	78ba      	ldrb	r2, [r7, #2]
 800b3fa:	78f9      	ldrb	r1, [r7, #3]
 800b3fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b3fe:	9302      	str	r3, [sp, #8]
 800b400:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b404:	9301      	str	r3, [sp, #4]
 800b406:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b40a:	9300      	str	r3, [sp, #0]
 800b40c:	4623      	mov	r3, r4
 800b40e:	f7f9 fa80 	bl	8004912 <HAL_HCD_HC_Init>
 800b412:	4603      	mov	r3, r0
 800b414:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b416:	7bfb      	ldrb	r3, [r7, #15]
 800b418:	4618      	mov	r0, r3
 800b41a:	f000 f8bd 	bl	800b598 <USBH_Get_USB_Status>
 800b41e:	4603      	mov	r3, r0
 800b420:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b422:	7bbb      	ldrb	r3, [r7, #14]
}
 800b424:	4618      	mov	r0, r3
 800b426:	3714      	adds	r7, #20
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd90      	pop	{r4, r7, pc}

0800b42c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	460b      	mov	r3, r1
 800b436:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b438:	2300      	movs	r3, #0
 800b43a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b43c:	2300      	movs	r3, #0
 800b43e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b446:	78fa      	ldrb	r2, [r7, #3]
 800b448:	4611      	mov	r1, r2
 800b44a:	4618      	mov	r0, r3
 800b44c:	f7f9 faf0 	bl	8004a30 <HAL_HCD_HC_Halt>
 800b450:	4603      	mov	r3, r0
 800b452:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b454:	7bfb      	ldrb	r3, [r7, #15]
 800b456:	4618      	mov	r0, r3
 800b458:	f000 f89e 	bl	800b598 <USBH_Get_USB_Status>
 800b45c:	4603      	mov	r3, r0
 800b45e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b460:	7bbb      	ldrb	r3, [r7, #14]
}
 800b462:	4618      	mov	r0, r3
 800b464:	3710      	adds	r7, #16
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}

0800b46a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b46a:	b590      	push	{r4, r7, lr}
 800b46c:	b089      	sub	sp, #36	; 0x24
 800b46e:	af04      	add	r7, sp, #16
 800b470:	6078      	str	r0, [r7, #4]
 800b472:	4608      	mov	r0, r1
 800b474:	4611      	mov	r1, r2
 800b476:	461a      	mov	r2, r3
 800b478:	4603      	mov	r3, r0
 800b47a:	70fb      	strb	r3, [r7, #3]
 800b47c:	460b      	mov	r3, r1
 800b47e:	70bb      	strb	r3, [r7, #2]
 800b480:	4613      	mov	r3, r2
 800b482:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b484:	2300      	movs	r3, #0
 800b486:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b488:	2300      	movs	r3, #0
 800b48a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b492:	787c      	ldrb	r4, [r7, #1]
 800b494:	78ba      	ldrb	r2, [r7, #2]
 800b496:	78f9      	ldrb	r1, [r7, #3]
 800b498:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b49c:	9303      	str	r3, [sp, #12]
 800b49e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b4a0:	9302      	str	r3, [sp, #8]
 800b4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a4:	9301      	str	r3, [sp, #4]
 800b4a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b4aa:	9300      	str	r3, [sp, #0]
 800b4ac:	4623      	mov	r3, r4
 800b4ae:	f7f9 fae3 	bl	8004a78 <HAL_HCD_HC_SubmitRequest>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b4b6:	7bfb      	ldrb	r3, [r7, #15]
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f000 f86d 	bl	800b598 <USBH_Get_USB_Status>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3714      	adds	r7, #20
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd90      	pop	{r4, r7, pc}

0800b4cc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b082      	sub	sp, #8
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	460b      	mov	r3, r1
 800b4d6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b4de:	78fa      	ldrb	r2, [r7, #3]
 800b4e0:	4611      	mov	r1, r2
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7f9 fd77 	bl	8004fd6 <HAL_HCD_HC_GetURBState>
 800b4e8:	4603      	mov	r3, r0
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3708      	adds	r7, #8
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}

0800b4f2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b4f2:	b580      	push	{r7, lr}
 800b4f4:	b082      	sub	sp, #8
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b504:	2b01      	cmp	r3, #1
 800b506:	d103      	bne.n	800b510 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b508:	78fb      	ldrb	r3, [r7, #3]
 800b50a:	4618      	mov	r0, r3
 800b50c:	f000 f870 	bl	800b5f0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b510:	20c8      	movs	r0, #200	; 0xc8
 800b512:	f7f8 fdb5 	bl	8004080 <HAL_Delay>
  return USBH_OK;
 800b516:	2300      	movs	r3, #0
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3708      	adds	r7, #8
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b520:	b480      	push	{r7}
 800b522:	b085      	sub	sp, #20
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	460b      	mov	r3, r1
 800b52a:	70fb      	strb	r3, [r7, #3]
 800b52c:	4613      	mov	r3, r2
 800b52e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b536:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b538:	78fb      	ldrb	r3, [r7, #3]
 800b53a:	68fa      	ldr	r2, [r7, #12]
 800b53c:	212c      	movs	r1, #44	; 0x2c
 800b53e:	fb01 f303 	mul.w	r3, r1, r3
 800b542:	4413      	add	r3, r2
 800b544:	333b      	adds	r3, #59	; 0x3b
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d009      	beq.n	800b560 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b54c:	78fb      	ldrb	r3, [r7, #3]
 800b54e:	68fa      	ldr	r2, [r7, #12]
 800b550:	212c      	movs	r1, #44	; 0x2c
 800b552:	fb01 f303 	mul.w	r3, r1, r3
 800b556:	4413      	add	r3, r2
 800b558:	3354      	adds	r3, #84	; 0x54
 800b55a:	78ba      	ldrb	r2, [r7, #2]
 800b55c:	701a      	strb	r2, [r3, #0]
 800b55e:	e008      	b.n	800b572 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b560:	78fb      	ldrb	r3, [r7, #3]
 800b562:	68fa      	ldr	r2, [r7, #12]
 800b564:	212c      	movs	r1, #44	; 0x2c
 800b566:	fb01 f303 	mul.w	r3, r1, r3
 800b56a:	4413      	add	r3, r2
 800b56c:	3355      	adds	r3, #85	; 0x55
 800b56e:	78ba      	ldrb	r2, [r7, #2]
 800b570:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b572:	2300      	movs	r3, #0
}
 800b574:	4618      	mov	r0, r3
 800b576:	3714      	adds	r7, #20
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr

0800b580 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b082      	sub	sp, #8
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f7f8 fd79 	bl	8004080 <HAL_Delay>
}
 800b58e:	bf00      	nop
 800b590:	3708      	adds	r7, #8
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
	...

0800b598 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b598:	b480      	push	{r7}
 800b59a:	b085      	sub	sp, #20
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	4603      	mov	r3, r0
 800b5a0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b5a6:	79fb      	ldrb	r3, [r7, #7]
 800b5a8:	2b03      	cmp	r3, #3
 800b5aa:	d817      	bhi.n	800b5dc <USBH_Get_USB_Status+0x44>
 800b5ac:	a201      	add	r2, pc, #4	; (adr r2, 800b5b4 <USBH_Get_USB_Status+0x1c>)
 800b5ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5b2:	bf00      	nop
 800b5b4:	0800b5c5 	.word	0x0800b5c5
 800b5b8:	0800b5cb 	.word	0x0800b5cb
 800b5bc:	0800b5d1 	.word	0x0800b5d1
 800b5c0:	0800b5d7 	.word	0x0800b5d7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	73fb      	strb	r3, [r7, #15]
    break;
 800b5c8:	e00b      	b.n	800b5e2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b5ca:	2302      	movs	r3, #2
 800b5cc:	73fb      	strb	r3, [r7, #15]
    break;
 800b5ce:	e008      	b.n	800b5e2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	73fb      	strb	r3, [r7, #15]
    break;
 800b5d4:	e005      	b.n	800b5e2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b5d6:	2302      	movs	r3, #2
 800b5d8:	73fb      	strb	r3, [r7, #15]
    break;
 800b5da:	e002      	b.n	800b5e2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b5dc:	2302      	movs	r3, #2
 800b5de:	73fb      	strb	r3, [r7, #15]
    break;
 800b5e0:	bf00      	nop
  }
  return usb_status;
 800b5e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3714      	adds	r7, #20
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b5fa:	79fb      	ldrb	r3, [r7, #7]
 800b5fc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b5fe:	79fb      	ldrb	r3, [r7, #7]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d102      	bne.n	800b60a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b604:	2300      	movs	r3, #0
 800b606:	73fb      	strb	r3, [r7, #15]
 800b608:	e001      	b.n	800b60e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b60a:	2301      	movs	r3, #1
 800b60c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b60e:	7bfb      	ldrb	r3, [r7, #15]
 800b610:	461a      	mov	r2, r3
 800b612:	2101      	movs	r1, #1
 800b614:	4803      	ldr	r0, [pc, #12]	; (800b624 <MX_DriverVbusFS+0x34>)
 800b616:	f7f9 f901 	bl	800481c <HAL_GPIO_WritePin>
}
 800b61a:	bf00      	nop
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	40020800 	.word	0x40020800

0800b628 <_init>:
 800b628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b62a:	bf00      	nop
 800b62c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b62e:	bc08      	pop	{r3}
 800b630:	469e      	mov	lr, r3
 800b632:	4770      	bx	lr

0800b634 <_fini>:
 800b634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b636:	bf00      	nop
 800b638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b63a:	bc08      	pop	{r3}
 800b63c:	469e      	mov	lr, r3
 800b63e:	4770      	bx	lr
