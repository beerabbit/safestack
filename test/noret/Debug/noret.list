
noret.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b344  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800b4d4  0800b4d4  0001b4d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000018  0800b598  0800b598  0001b598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000c8  0800b5b0  0800b5b0  0001b5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b678  0800b678  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b678  0800b678  0001b678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b67c  0800b67c  0001b67c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800b680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000860  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008f0  200008f0  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000034  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .comment      0000009e  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 14 .debug_line   0001b2d7  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0002a31b  00000000  00000000  0003b439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000076d0  00000000  00000000  00065754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001720  00000000  00000000  0006ce28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf8c5  00000000  00000000  0006e548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00001738  00000000  00000000  0013de10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000236a3  00000000  00000000  0013f548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005a48  00000000  00000000  00162bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00007bb7  00000000  00000000  00168634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <deregister_tm_clones>:
 8000190:	4803      	ldr	r0, [pc, #12]	; (80001a0 <deregister_tm_clones+0x10>)
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <deregister_tm_clones+0x14>)
 8000194:	4283      	cmp	r3, r0
 8000196:	d002      	beq.n	800019e <deregister_tm_clones+0xe>
 8000198:	4b03      	ldr	r3, [pc, #12]	; (80001a8 <deregister_tm_clones+0x18>)
 800019a:	b103      	cbz	r3, 800019e <deregister_tm_clones+0xe>
 800019c:	4718      	bx	r3
 800019e:	4770      	bx	lr
 80001a0:	20000090 	.word	0x20000090
 80001a4:	20000090 	.word	0x20000090
 80001a8:	00000000 	.word	0x00000000

080001ac <register_tm_clones>:
 80001ac:	4805      	ldr	r0, [pc, #20]	; (80001c4 <register_tm_clones+0x18>)
 80001ae:	4906      	ldr	r1, [pc, #24]	; (80001c8 <register_tm_clones+0x1c>)
 80001b0:	1a0b      	subs	r3, r1, r0
 80001b2:	0fd9      	lsrs	r1, r3, #31
 80001b4:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001b8:	1049      	asrs	r1, r1, #1
 80001ba:	d002      	beq.n	80001c2 <register_tm_clones+0x16>
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <register_tm_clones+0x20>)
 80001be:	b103      	cbz	r3, 80001c2 <register_tm_clones+0x16>
 80001c0:	4718      	bx	r3
 80001c2:	4770      	bx	lr
 80001c4:	20000090 	.word	0x20000090
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c06      	ldr	r4, [pc, #24]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b943      	cbnz	r3, 80001ea <__do_global_dtors_aux+0x1a>
 80001d8:	f7ff ffda 	bl	8000190 <deregister_tm_clones>
 80001dc:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	b113      	cbz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001e0:	4804      	ldr	r0, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x24>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	2301      	movs	r3, #1
 80001e8:	7023      	strb	r3, [r4, #0]
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000090 	.word	0x20000090
 80001f0:	00000000 	.word	0x00000000
 80001f4:	0800b4bc 	.word	0x0800b4bc

080001f8 <frame_dummy>:
 80001f8:	b508      	push	{r3, lr}
 80001fa:	4b04      	ldr	r3, [pc, #16]	; (800020c <frame_dummy+0x14>)
 80001fc:	b11b      	cbz	r3, 8000206 <frame_dummy+0xe>
 80001fe:	4904      	ldr	r1, [pc, #16]	; (8000210 <frame_dummy+0x18>)
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <frame_dummy+0x1c>)
 8000202:	f3af 8000 	nop.w
 8000206:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800020a:	e7cf      	b.n	80001ac <register_tm_clones>
 800020c:	00000000 	.word	0x00000000
 8000210:	20000094 	.word	0x20000094
 8000214:	0800b4bc 	.word	0x0800b4bc

08000218 <__io_putchar>:
 8000218:	b580      	push	{r7, lr}
 800021a:	466f      	mov	r7, sp
 800021c:	b082      	sub	sp, #8
 800021e:	9001      	str	r0, [sp, #4]
 8000220:	f240 00ac 	movw	r0, #172	; 0xac
 8000224:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000228:	a901      	add	r1, sp, #4
 800022a:	2201      	movs	r2, #1
 800022c:	2364      	movs	r3, #100	; 0x64
 800022e:	f007 faf5 	bl	800781c <HAL_UART_Transmit>
 8000232:	9801      	ldr	r0, [sp, #4]
 8000234:	b002      	add	sp, #8
 8000236:	bd80      	pop	{r7, pc}

08000238 <function_a>:
 8000238:	b580      	push	{r7, lr}
 800023a:	466f      	mov	r7, sp
 800023c:	b086      	sub	sp, #24
 800023e:	9005      	str	r0, [sp, #20]
 8000240:	9104      	str	r1, [sp, #16]
 8000242:	9203      	str	r2, [sp, #12]
 8000244:	9805      	ldr	r0, [sp, #20]
 8000246:	9904      	ldr	r1, [sp, #16]
 8000248:	4408      	add	r0, r1
 800024a:	9903      	ldr	r1, [sp, #12]
 800024c:	4408      	add	r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	9802      	ldr	r0, [sp, #8]

08000252 <function_a_0_FORPUSH>:
 8000252:	f2c0 0e00 	movt	lr, #0
 8000256:	f640 0e0c 	movw	lr, #2060	; 0x80c
 800025a:	b500      	push	{lr}
 800025c:	9000      	str	r0, [sp, #0]
 800025e:	2001      	movs	r0, #1
 8000260:	2102      	movs	r1, #2
 8000262:	2203      	movs	r2, #3
 8000264:	2304      	movs	r3, #4
 8000266:	f000 f805 	bl	8000274 <function_b>
 800026a:	9001      	str	r0, [sp, #4]
 800026c:	9801      	ldr	r0, [sp, #4]
 800026e:	b006      	add	sp, #24
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop

08000274 <function_b>:
 8000274:	b085      	sub	sp, #20
 8000276:	f8dd c014 	ldr.w	ip, [sp, #20]
 800027a:	9004      	str	r0, [sp, #16]
 800027c:	9103      	str	r1, [sp, #12]
 800027e:	9202      	str	r2, [sp, #8]
 8000280:	9301      	str	r3, [sp, #4]
 8000282:	9804      	ldr	r0, [sp, #16]
 8000284:	9903      	ldr	r1, [sp, #12]
 8000286:	4408      	add	r0, r1
 8000288:	9902      	ldr	r1, [sp, #8]
 800028a:	4408      	add	r0, r1
 800028c:	9901      	ldr	r1, [sp, #4]
 800028e:	4408      	add	r0, r1
 8000290:	9905      	ldr	r1, [sp, #20]
 8000292:	4408      	add	r0, r1
 8000294:	9000      	str	r0, [sp, #0]
 8000296:	9800      	ldr	r0, [sp, #0]
 8000298:	b005      	add	sp, #20
 800029a:	4770      	bx	lr

0800029c <main>:
 800029c:	b5d0      	push	{r4, r6, r7, lr}
 800029e:	af02      	add	r7, sp, #8
 80002a0:	b084      	sub	sp, #16
 80002a2:	2400      	movs	r4, #0
 80002a4:	9403      	str	r4, [sp, #12]
 80002a6:	f003 fdc3 	bl	8003e30 <HAL_Init>

080002aa <main_0_FORPUSH>:
 80002aa:	f2c0 0e00 	movt	lr, #0
 80002ae:	f640 0e0c 	movw	lr, #2060	; 0x80c
 80002b2:	b500      	push	{lr}
 80002b4:	f000 f842 	bl	800033c <SystemClock_Config>

080002b8 <main_1_FORPUSH>:
 80002b8:	f2c0 0e00 	movt	lr, #0
 80002bc:	f640 0e0c 	movw	lr, #2060	; 0x80c
 80002c0:	b500      	push	{lr}
 80002c2:	f000 f8a5 	bl	8000410 <MX_GPIO_Init>

080002c6 <main_2_FORPUSH>:
 80002c6:	f2c0 0e00 	movt	lr, #0
 80002ca:	f640 0e0c 	movw	lr, #2060	; 0x80c
 80002ce:	b500      	push	{lr}
 80002d0:	f000 f9a2 	bl	8000618 <MX_I2C1_Init>

080002d4 <main_3_FORPUSH>:
 80002d4:	f2c0 0e00 	movt	lr, #0
 80002d8:	f640 0e0c 	movw	lr, #2060	; 0x80c
 80002dc:	b500      	push	{lr}
 80002de:	f000 f9c3 	bl	8000668 <MX_I2S3_Init>

080002e2 <main_4_FORPUSH>:
 80002e2:	f2c0 0e00 	movt	lr, #0
 80002e6:	f640 0e0c 	movw	lr, #2060	; 0x80c
 80002ea:	b500      	push	{lr}
 80002ec:	f000 f9e4 	bl	80006b8 <MX_SPI1_Init>
 80002f0:	f00a fddc 	bl	800aeac <MX_USB_HOST_Init>

080002f4 <main_5_FORPUSH>:
 80002f4:	f2c0 0e00 	movt	lr, #0
 80002f8:	f640 0e0c 	movw	lr, #2060	; 0x80c
 80002fc:	b500      	push	{lr}
 80002fe:	f000 fa05 	bl	800070c <MX_USART2_UART_Init>
 8000302:	9402      	str	r4, [sp, #8]
 8000304:	e7ff      	b.n	8000306 <main_5_FORPUSH+0x12>
 8000306:	f00a fdf7 	bl	800aef8 <MX_USB_HOST_Process>
 800030a:	9902      	ldr	r1, [sp, #8]
 800030c:	f24b 5054 	movw	r0, #46420	; 0xb554
 8000310:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000314:	f000 ffce 	bl	80012b4 <iprintf>

08000318 <main_6_FORPUSH>:
 8000318:	f2c0 0e00 	movt	lr, #0
 800031c:	f640 0e0c 	movw	lr, #2060	; 0x80c
 8000320:	b500      	push	{lr}
 8000322:	2001      	movs	r0, #1
 8000324:	2102      	movs	r1, #2
 8000326:	2203      	movs	r2, #3
 8000328:	f7ff ff86 	bl	8000238 <function_a>
 800032c:	9001      	str	r0, [sp, #4]
 800032e:	9802      	ldr	r0, [sp, #8]
 8000330:	3001      	adds	r0, #1
 8000332:	9002      	str	r0, [sp, #8]
 8000334:	2001      	movs	r0, #1
 8000336:	f003 fded 	bl	8003f14 <HAL_Delay>
 800033a:	e7e4      	b.n	8000306 <main_5_FORPUSH+0x12>

0800033c <SystemClock_Config>:
 800033c:	b580      	push	{r7, lr}
 800033e:	466f      	mov	r7, sp
 8000340:	b094      	sub	sp, #80	; 0x50
 8000342:	a808      	add	r0, sp, #32
 8000344:	2130      	movs	r1, #48	; 0x30
 8000346:	f000 fe05 	bl	8000f54 <__aeabi_memclr>
 800034a:	2000      	movs	r0, #0
 800034c:	9007      	str	r0, [sp, #28]
 800034e:	9006      	str	r0, [sp, #24]
 8000350:	9005      	str	r0, [sp, #20]
 8000352:	9004      	str	r0, [sp, #16]
 8000354:	9003      	str	r0, [sp, #12]
 8000356:	e7ff      	b.n	8000358 <SystemClock_Config+0x1c>
 8000358:	2000      	movs	r0, #0
 800035a:	9002      	str	r0, [sp, #8]
 800035c:	f643 0040 	movw	r0, #14400	; 0x3840
 8000360:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000364:	6801      	ldr	r1, [r0, #0]
 8000366:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800036a:	6001      	str	r1, [r0, #0]
 800036c:	6800      	ldr	r0, [r0, #0]
 800036e:	f000 5080 	and.w	r0, r0, #268435456	; 0x10000000
 8000372:	9002      	str	r0, [sp, #8]
 8000374:	9802      	ldr	r0, [sp, #8]
 8000376:	e7ff      	b.n	8000378 <SystemClock_Config+0x3c>
 8000378:	e7ff      	b.n	800037a <SystemClock_Config+0x3e>
 800037a:	2000      	movs	r0, #0
 800037c:	9001      	str	r0, [sp, #4]
 800037e:	f247 0000 	movw	r0, #28672	; 0x7000
 8000382:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8000386:	6801      	ldr	r1, [r0, #0]
 8000388:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800038c:	6001      	str	r1, [r0, #0]
 800038e:	6800      	ldr	r0, [r0, #0]
 8000390:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
 8000394:	9001      	str	r0, [sp, #4]
 8000396:	9801      	ldr	r0, [sp, #4]
 8000398:	e7ff      	b.n	800039a <SystemClock_Config+0x5e>
 800039a:	2001      	movs	r0, #1
 800039c:	9008      	str	r0, [sp, #32]
 800039e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80003a2:	9009      	str	r0, [sp, #36]	; 0x24
 80003a4:	2002      	movs	r0, #2
 80003a6:	900e      	str	r0, [sp, #56]	; 0x38
 80003a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80003ac:	910f      	str	r1, [sp, #60]	; 0x3c
 80003ae:	2108      	movs	r1, #8
 80003b0:	9110      	str	r1, [sp, #64]	; 0x40
 80003b2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80003b6:	9111      	str	r1, [sp, #68]	; 0x44
 80003b8:	9012      	str	r0, [sp, #72]	; 0x48
 80003ba:	2007      	movs	r0, #7
 80003bc:	9013      	str	r0, [sp, #76]	; 0x4c
 80003be:	a808      	add	r0, sp, #32
 80003c0:	f006 fb7e 	bl	8006ac0 <HAL_RCC_OscConfig>
 80003c4:	b140      	cbz	r0, 80003d8 <SystemClock_Config_0_FORPUSH+0x10>
 80003c6:	e7ff      	b.n	80003c8 <SystemClock_Config_0_FORPUSH>

080003c8 <SystemClock_Config_0_FORPUSH>:
 80003c8:	f2c0 0e00 	movt	lr, #0
 80003cc:	f640 0e0c 	movw	lr, #2060	; 0x80c
 80003d0:	b500      	push	{lr}
 80003d2:	f000 f9bf 	bl	8000754 <Error_Handler>
 80003d6:	e7ff      	b.n	80003d8 <SystemClock_Config_0_FORPUSH+0x10>
 80003d8:	200f      	movs	r0, #15
 80003da:	9003      	str	r0, [sp, #12]
 80003dc:	2002      	movs	r0, #2
 80003de:	9004      	str	r0, [sp, #16]
 80003e0:	2000      	movs	r0, #0
 80003e2:	9005      	str	r0, [sp, #20]
 80003e4:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80003e8:	9006      	str	r0, [sp, #24]
 80003ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80003ee:	9007      	str	r0, [sp, #28]
 80003f0:	a803      	add	r0, sp, #12
 80003f2:	2105      	movs	r1, #5
 80003f4:	f006 fddc 	bl	8006fb0 <HAL_RCC_ClockConfig>
 80003f8:	b140      	cbz	r0, 800040c <SystemClock_Config_1_FORPUSH+0x10>
 80003fa:	e7ff      	b.n	80003fc <SystemClock_Config_1_FORPUSH>

080003fc <SystemClock_Config_1_FORPUSH>:
 80003fc:	f2c0 0e00 	movt	lr, #0
 8000400:	f640 0e0c 	movw	lr, #2060	; 0x80c
 8000404:	b500      	push	{lr}
 8000406:	f000 f9a5 	bl	8000754 <Error_Handler>
 800040a:	e7ff      	b.n	800040c <SystemClock_Config_1_FORPUSH+0x10>
 800040c:	b014      	add	sp, #80	; 0x50
 800040e:	bd80      	pop	{r7, pc}

08000410 <MX_GPIO_Init>:
 8000410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000412:	af03      	add	r7, sp, #12
 8000414:	e92d 0f00 	stmdb	sp!, {r8, r9, sl, fp}
 8000418:	b08b      	sub	sp, #44	; 0x2c
 800041a:	2000      	movs	r0, #0
 800041c:	900a      	str	r0, [sp, #40]	; 0x28
 800041e:	9009      	str	r0, [sp, #36]	; 0x24
 8000420:	9008      	str	r0, [sp, #32]
 8000422:	9007      	str	r0, [sp, #28]
 8000424:	9006      	str	r0, [sp, #24]
 8000426:	e7ff      	b.n	8000428 <MX_GPIO_Init+0x18>
 8000428:	2000      	movs	r0, #0
 800042a:	9005      	str	r0, [sp, #20]
 800042c:	f643 0030 	movw	r0, #14384	; 0x3830
 8000430:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000434:	6801      	ldr	r1, [r0, #0]
 8000436:	f041 0110 	orr.w	r1, r1, #16
 800043a:	6001      	str	r1, [r0, #0]
 800043c:	6800      	ldr	r0, [r0, #0]
 800043e:	f000 0010 	and.w	r0, r0, #16
 8000442:	9005      	str	r0, [sp, #20]
 8000444:	9805      	ldr	r0, [sp, #20]
 8000446:	e7ff      	b.n	8000448 <MX_GPIO_Init+0x38>
 8000448:	e7ff      	b.n	800044a <MX_GPIO_Init+0x3a>
 800044a:	2000      	movs	r0, #0
 800044c:	9004      	str	r0, [sp, #16]
 800044e:	f643 0030 	movw	r0, #14384	; 0x3830
 8000452:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000456:	6801      	ldr	r1, [r0, #0]
 8000458:	f041 0104 	orr.w	r1, r1, #4
 800045c:	6001      	str	r1, [r0, #0]
 800045e:	6800      	ldr	r0, [r0, #0]
 8000460:	f000 0004 	and.w	r0, r0, #4
 8000464:	9004      	str	r0, [sp, #16]
 8000466:	9804      	ldr	r0, [sp, #16]
 8000468:	e7ff      	b.n	800046a <MX_GPIO_Init+0x5a>
 800046a:	e7ff      	b.n	800046c <MX_GPIO_Init+0x5c>
 800046c:	2000      	movs	r0, #0
 800046e:	9003      	str	r0, [sp, #12]
 8000470:	f643 0030 	movw	r0, #14384	; 0x3830
 8000474:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000478:	6801      	ldr	r1, [r0, #0]
 800047a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800047e:	6001      	str	r1, [r0, #0]
 8000480:	6800      	ldr	r0, [r0, #0]
 8000482:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8000486:	9003      	str	r0, [sp, #12]
 8000488:	9803      	ldr	r0, [sp, #12]
 800048a:	e7ff      	b.n	800048c <MX_GPIO_Init+0x7c>
 800048c:	e7ff      	b.n	800048e <MX_GPIO_Init+0x7e>
 800048e:	2000      	movs	r0, #0
 8000490:	9002      	str	r0, [sp, #8]
 8000492:	f643 0030 	movw	r0, #14384	; 0x3830
 8000496:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800049a:	6801      	ldr	r1, [r0, #0]
 800049c:	f041 0101 	orr.w	r1, r1, #1
 80004a0:	6001      	str	r1, [r0, #0]
 80004a2:	6800      	ldr	r0, [r0, #0]
 80004a4:	f000 0001 	and.w	r0, r0, #1
 80004a8:	9002      	str	r0, [sp, #8]
 80004aa:	9802      	ldr	r0, [sp, #8]
 80004ac:	e7ff      	b.n	80004ae <MX_GPIO_Init+0x9e>
 80004ae:	e7ff      	b.n	80004b0 <MX_GPIO_Init+0xa0>
 80004b0:	2000      	movs	r0, #0
 80004b2:	9001      	str	r0, [sp, #4]
 80004b4:	f643 0030 	movw	r0, #14384	; 0x3830
 80004b8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80004bc:	6801      	ldr	r1, [r0, #0]
 80004be:	f041 0102 	orr.w	r1, r1, #2
 80004c2:	6001      	str	r1, [r0, #0]
 80004c4:	6800      	ldr	r0, [r0, #0]
 80004c6:	f000 0002 	and.w	r0, r0, #2
 80004ca:	9001      	str	r0, [sp, #4]
 80004cc:	9801      	ldr	r0, [sp, #4]
 80004ce:	e7ff      	b.n	80004d0 <MX_GPIO_Init+0xc0>
 80004d0:	e7ff      	b.n	80004d2 <MX_GPIO_Init+0xc2>
 80004d2:	2000      	movs	r0, #0
 80004d4:	9000      	str	r0, [sp, #0]
 80004d6:	f643 0030 	movw	r0, #14384	; 0x3830
 80004da:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80004de:	6801      	ldr	r1, [r0, #0]
 80004e0:	f041 0108 	orr.w	r1, r1, #8
 80004e4:	6001      	str	r1, [r0, #0]
 80004e6:	6800      	ldr	r0, [r0, #0]
 80004e8:	f000 0008 	and.w	r0, r0, #8
 80004ec:	9000      	str	r0, [sp, #0]
 80004ee:	9800      	ldr	r0, [sp, #0]
 80004f0:	e7ff      	b.n	80004f2 <MX_GPIO_Init+0xe2>
 80004f2:	f241 0900 	movw	r9, #4096	; 0x1000
 80004f6:	f2c4 0902 	movt	r9, #16386	; 0x4002
 80004fa:	f04f 0808 	mov.w	r8, #8
 80004fe:	2500      	movs	r5, #0
 8000500:	4648      	mov	r0, r9
 8000502:	2108      	movs	r1, #8
 8000504:	2200      	movs	r2, #0
 8000506:	f004 f8d3 	bl	80046b0 <HAL_GPIO_WritePin>
 800050a:	f640 0400 	movw	r4, #2048	; 0x800
 800050e:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8000512:	f04f 0a01 	mov.w	sl, #1
 8000516:	4620      	mov	r0, r4
 8000518:	2101      	movs	r1, #1
 800051a:	2201      	movs	r2, #1
 800051c:	f004 f8c8 	bl	80046b0 <HAL_GPIO_WritePin>
 8000520:	f640 4000 	movw	r0, #3072	; 0xc00
 8000524:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000528:	f24f 0110 	movw	r1, #61456	; 0xf010
 800052c:	2200      	movs	r2, #0
 800052e:	f004 f8bf 	bl	80046b0 <HAL_GPIO_WritePin>
 8000532:	f8cd 8018 	str.w	r8, [sp, #24]
 8000536:	f8cd a01c 	str.w	sl, [sp, #28]
 800053a:	9508      	str	r5, [sp, #32]
 800053c:	9509      	str	r5, [sp, #36]	; 0x24
 800053e:	ae06      	add	r6, sp, #24
 8000540:	4648      	mov	r0, r9
 8000542:	4631      	mov	r1, r6
 8000544:	f003 fe1c 	bl	8004180 <HAL_GPIO_Init>
 8000548:	f8cd a018 	str.w	sl, [sp, #24]
 800054c:	f8cd a01c 	str.w	sl, [sp, #28]
 8000550:	9508      	str	r5, [sp, #32]
 8000552:	9509      	str	r5, [sp, #36]	; 0x24
 8000554:	4620      	mov	r0, r4
 8000556:	4631      	mov	r1, r6
 8000558:	f003 fe12 	bl	8004180 <HAL_GPIO_Init>
 800055c:	f8cd 8018 	str.w	r8, [sp, #24]
 8000560:	f04f 0b02 	mov.w	fp, #2
 8000564:	f8cd b01c 	str.w	fp, [sp, #28]
 8000568:	9508      	str	r5, [sp, #32]
 800056a:	9509      	str	r5, [sp, #36]	; 0x24
 800056c:	f04f 0905 	mov.w	r9, #5
 8000570:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8000574:	4620      	mov	r0, r4
 8000576:	4631      	mov	r1, r6
 8000578:	f003 fe02 	bl	8004180 <HAL_GPIO_Init>
 800057c:	f8cd a018 	str.w	sl, [sp, #24]
 8000580:	f44f 1890 	mov.w	r8, #1179648	; 0x120000
 8000584:	f8cd 801c 	str.w	r8, [sp, #28]
 8000588:	9508      	str	r5, [sp, #32]
 800058a:	2000      	movs	r0, #0
 800058c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000590:	4631      	mov	r1, r6
 8000592:	f003 fdf5 	bl	8004180 <HAL_GPIO_Init>
 8000596:	2004      	movs	r0, #4
 8000598:	9006      	str	r0, [sp, #24]
 800059a:	9507      	str	r5, [sp, #28]
 800059c:	9508      	str	r5, [sp, #32]
 800059e:	f240 4400 	movw	r4, #1024	; 0x400
 80005a2:	f2c4 0402 	movt	r4, #16386	; 0x4002
 80005a6:	4620      	mov	r0, r4
 80005a8:	4631      	mov	r1, r6
 80005aa:	f003 fde9 	bl	8004180 <HAL_GPIO_Init>
 80005ae:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80005b2:	9006      	str	r0, [sp, #24]
 80005b4:	f8cd b01c 	str.w	fp, [sp, #28]
 80005b8:	9508      	str	r5, [sp, #32]
 80005ba:	9509      	str	r5, [sp, #36]	; 0x24
 80005bc:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80005c0:	4620      	mov	r0, r4
 80005c2:	4631      	mov	r1, r6
 80005c4:	f003 fddc 	bl	8004180 <HAL_GPIO_Init>
 80005c8:	f24f 0010 	movw	r0, #61456	; 0xf010
 80005cc:	9006      	str	r0, [sp, #24]
 80005ce:	f8cd a01c 	str.w	sl, [sp, #28]
 80005d2:	9508      	str	r5, [sp, #32]
 80005d4:	9509      	str	r5, [sp, #36]	; 0x24
 80005d6:	f640 4400 	movw	r4, #3072	; 0xc00
 80005da:	f2c4 0402 	movt	r4, #16386	; 0x4002
 80005de:	4620      	mov	r0, r4
 80005e0:	4631      	mov	r1, r6
 80005e2:	f003 fdcd 	bl	8004180 <HAL_GPIO_Init>
 80005e6:	2020      	movs	r0, #32
 80005e8:	9006      	str	r0, [sp, #24]
 80005ea:	9507      	str	r5, [sp, #28]
 80005ec:	9508      	str	r5, [sp, #32]
 80005ee:	4620      	mov	r0, r4
 80005f0:	4631      	mov	r1, r6
 80005f2:	f003 fdc5 	bl	8004180 <HAL_GPIO_Init>
 80005f6:	f8cd b018 	str.w	fp, [sp, #24]
 80005fa:	f8cd 801c 	str.w	r8, [sp, #28]
 80005fe:	9508      	str	r5, [sp, #32]
 8000600:	f241 0000 	movw	r0, #4096	; 0x1000
 8000604:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000608:	4631      	mov	r1, r6
 800060a:	f003 fdb9 	bl	8004180 <HAL_GPIO_Init>
 800060e:	b00b      	add	sp, #44	; 0x2c
 8000610:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
 8000614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000616:	bf00      	nop

08000618 <MX_I2C1_Init>:
 8000618:	b580      	push	{r7, lr}
 800061a:	466f      	mov	r7, sp
 800061c:	f240 00f8 	movw	r0, #248	; 0xf8
 8000620:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000624:	f245 4100 	movw	r1, #21504	; 0x5400
 8000628:	f2c4 0100 	movt	r1, #16384	; 0x4000
 800062c:	6001      	str	r1, [r0, #0]
 800062e:	f248 61a0 	movw	r1, #34464	; 0x86a0
 8000632:	f2c0 0101 	movt	r1, #1
 8000636:	6041      	str	r1, [r0, #4]
 8000638:	2100      	movs	r1, #0
 800063a:	6081      	str	r1, [r0, #8]
 800063c:	60c1      	str	r1, [r0, #12]
 800063e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000642:	6102      	str	r2, [r0, #16]
 8000644:	6141      	str	r1, [r0, #20]
 8000646:	6181      	str	r1, [r0, #24]
 8000648:	61c1      	str	r1, [r0, #28]
 800064a:	6201      	str	r1, [r0, #32]
 800064c:	f005 fc54 	bl	8005ef8 <HAL_I2C_Init>
 8000650:	b140      	cbz	r0, 8000664 <MX_I2C1_Init_0_FORPUSH+0x10>
 8000652:	e7ff      	b.n	8000654 <MX_I2C1_Init_0_FORPUSH>

08000654 <MX_I2C1_Init_0_FORPUSH>:
 8000654:	f2c0 0e00 	movt	lr, #0
 8000658:	f640 0e0c 	movw	lr, #2060	; 0x80c
 800065c:	b500      	push	{lr}
 800065e:	f000 f879 	bl	8000754 <Error_Handler>
 8000662:	e7ff      	b.n	8000664 <MX_I2C1_Init_0_FORPUSH+0x10>
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop

08000668 <MX_I2S3_Init>:
 8000668:	b580      	push	{r7, lr}
 800066a:	466f      	mov	r7, sp
 800066c:	f240 1054 	movw	r0, #340	; 0x154
 8000670:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000674:	f643 4100 	movw	r1, #15360	; 0x3c00
 8000678:	f2c4 0100 	movt	r1, #16384	; 0x4000
 800067c:	6001      	str	r1, [r0, #0]
 800067e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000682:	6041      	str	r1, [r0, #4]
 8000684:	2200      	movs	r2, #0
 8000686:	6082      	str	r2, [r0, #8]
 8000688:	60c2      	str	r2, [r0, #12]
 800068a:	6101      	str	r1, [r0, #16]
 800068c:	f247 7100 	movw	r1, #30464	; 0x7700
 8000690:	f2c0 0101 	movt	r1, #1
 8000694:	6141      	str	r1, [r0, #20]
 8000696:	6182      	str	r2, [r0, #24]
 8000698:	61c2      	str	r2, [r0, #28]
 800069a:	6202      	str	r2, [r0, #32]
 800069c:	f005 fd70 	bl	8006180 <HAL_I2S_Init>
 80006a0:	b140      	cbz	r0, 80006b4 <MX_I2S3_Init_0_FORPUSH+0x10>
 80006a2:	e7ff      	b.n	80006a4 <MX_I2S3_Init_0_FORPUSH>

080006a4 <MX_I2S3_Init_0_FORPUSH>:
 80006a4:	f2c0 0e00 	movt	lr, #0
 80006a8:	f640 0e0c 	movw	lr, #2060	; 0x80c
 80006ac:	b500      	push	{lr}
 80006ae:	f000 f851 	bl	8000754 <Error_Handler>
 80006b2:	e7ff      	b.n	80006b4 <MX_I2S3_Init_0_FORPUSH+0x10>
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop

080006b8 <MX_SPI1_Init>:
 80006b8:	b580      	push	{r7, lr}
 80006ba:	466f      	mov	r7, sp
 80006bc:	f240 10a0 	movw	r0, #416	; 0x1a0
 80006c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80006c4:	f243 0100 	movw	r1, #12288	; 0x3000
 80006c8:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80006cc:	6001      	str	r1, [r0, #0]
 80006ce:	f44f 7182 	mov.w	r1, #260	; 0x104
 80006d2:	6041      	str	r1, [r0, #4]
 80006d4:	2100      	movs	r1, #0
 80006d6:	6081      	str	r1, [r0, #8]
 80006d8:	60c1      	str	r1, [r0, #12]
 80006da:	6101      	str	r1, [r0, #16]
 80006dc:	6141      	str	r1, [r0, #20]
 80006de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e2:	6182      	str	r2, [r0, #24]
 80006e4:	61c1      	str	r1, [r0, #28]
 80006e6:	6201      	str	r1, [r0, #32]
 80006e8:	6241      	str	r1, [r0, #36]	; 0x24
 80006ea:	6281      	str	r1, [r0, #40]	; 0x28
 80006ec:	210a      	movs	r1, #10
 80006ee:	62c1      	str	r1, [r0, #44]	; 0x2c
 80006f0:	f006 ffbe 	bl	8007670 <HAL_SPI_Init>
 80006f4:	b140      	cbz	r0, 8000708 <MX_SPI1_Init_0_FORPUSH+0x10>
 80006f6:	e7ff      	b.n	80006f8 <MX_SPI1_Init_0_FORPUSH>

080006f8 <MX_SPI1_Init_0_FORPUSH>:
 80006f8:	f2c0 0e00 	movt	lr, #0
 80006fc:	f640 0e0c 	movw	lr, #2060	; 0x80c
 8000700:	b500      	push	{lr}
 8000702:	f000 f827 	bl	8000754 <Error_Handler>
 8000706:	e7ff      	b.n	8000708 <MX_SPI1_Init_0_FORPUSH+0x10>
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop

0800070c <MX_USART2_UART_Init>:
 800070c:	b580      	push	{r7, lr}
 800070e:	466f      	mov	r7, sp
 8000710:	f240 00ac 	movw	r0, #172	; 0xac
 8000714:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000718:	f244 4100 	movw	r1, #17408	; 0x4400
 800071c:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000720:	6001      	str	r1, [r0, #0]
 8000722:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000726:	6041      	str	r1, [r0, #4]
 8000728:	2100      	movs	r1, #0
 800072a:	6081      	str	r1, [r0, #8]
 800072c:	60c1      	str	r1, [r0, #12]
 800072e:	6101      	str	r1, [r0, #16]
 8000730:	220c      	movs	r2, #12
 8000732:	6142      	str	r2, [r0, #20]
 8000734:	6181      	str	r1, [r0, #24]
 8000736:	61c1      	str	r1, [r0, #28]
 8000738:	f007 f823 	bl	8007782 <HAL_UART_Init>
 800073c:	b140      	cbz	r0, 8000750 <MX_USART2_UART_Init_0_FORPUSH+0x10>
 800073e:	e7ff      	b.n	8000740 <MX_USART2_UART_Init_0_FORPUSH>

08000740 <MX_USART2_UART_Init_0_FORPUSH>:
 8000740:	f2c0 0e00 	movt	lr, #0
 8000744:	f640 0e0c 	movw	lr, #2060	; 0x80c
 8000748:	b500      	push	{lr}
 800074a:	f000 f803 	bl	8000754 <Error_Handler>
 800074e:	e7ff      	b.n	8000750 <MX_USART2_UART_Init_0_FORPUSH+0x10>
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop

08000754 <Error_Handler>:
 8000754:	b672      	cpsid	i
 8000756:	e7ff      	b.n	8000758 <Error_Handler+0x4>
 8000758:	e7fe      	b.n	8000758 <Error_Handler+0x4>

0800075a <MasterForward>:
 800075a:	b40f      	push	{r0, r1, r2, r3}
 800075c:	9804      	ldr	r0, [sp, #16]
 800075e:	6801      	ldr	r1, [r0, #0]
 8000760:	4571      	cmp	r1, lr
 8000762:	d10c      	bne.n	800077e <fail>
 8000764:	490d      	ldr	r1, [pc, #52]	; (800079c <fail_back+0x2>)
 8000766:	680a      	ldr	r2, [r1, #0]
 8000768:	6010      	str	r0, [r2, #0]
 800076a:	f102 0204 	add.w	r2, r2, #4
 800076e:	600a      	str	r2, [r1, #0]
 8000770:	e8bd 400f 	ldmia.w	sp!, {r0, r1, r2, r3, lr}
 8000774:	f10e 0e04 	add.w	lr, lr, #4
 8000778:	f8de e000 	ldr.w	lr, [lr]
 800077c:	4770      	bx	lr

0800077e <fail>:
 800077e:	4770      	bx	lr

08000780 <MasterBackward>:
 8000780:	4906      	ldr	r1, [pc, #24]	; (800079c <fail_back+0x2>)
 8000782:	680a      	ldr	r2, [r1, #0]
 8000784:	f102 0208 	add.w	r2, r2, #8
 8000788:	6813      	ldr	r3, [r2, #0]
 800078a:	4573      	cmp	r3, lr
 800078c:	d105      	bne.n	800079a <fail_back>
 800078e:	f8d1 e000 	ldr.w	lr, [r1]
 8000792:	f1a1 0104 	sub.w	r1, r1, #4
 8000796:	6009      	str	r1, [r1, #0]
 8000798:	4770      	bx	lr

0800079a <fail_back>:
 800079a:	4770      	bx	lr
 800079c:	080c0000 	.word	0x080c0000

080007a0 <HAL_MspInit>:
 80007a0:	b580      	push	{r7, lr}
 80007a2:	466f      	mov	r7, sp
 80007a4:	b082      	sub	sp, #8
 80007a6:	e7ff      	b.n	80007a8 <HAL_MspInit+0x8>
 80007a8:	2000      	movs	r0, #0
 80007aa:	9001      	str	r0, [sp, #4]
 80007ac:	f643 0044 	movw	r0, #14404	; 0x3844
 80007b0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80007b4:	6801      	ldr	r1, [r0, #0]
 80007b6:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80007ba:	6001      	str	r1, [r0, #0]
 80007bc:	6800      	ldr	r0, [r0, #0]
 80007be:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
 80007c2:	9001      	str	r0, [sp, #4]
 80007c4:	9801      	ldr	r0, [sp, #4]
 80007c6:	e7ff      	b.n	80007c8 <HAL_MspInit+0x28>
 80007c8:	e7ff      	b.n	80007ca <HAL_MspInit+0x2a>
 80007ca:	2000      	movs	r0, #0
 80007cc:	9000      	str	r0, [sp, #0]
 80007ce:	f643 0040 	movw	r0, #14400	; 0x3840
 80007d2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80007d6:	6801      	ldr	r1, [r0, #0]
 80007d8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80007dc:	6001      	str	r1, [r0, #0]
 80007de:	6800      	ldr	r0, [r0, #0]
 80007e0:	f000 5080 	and.w	r0, r0, #268435456	; 0x10000000
 80007e4:	9000      	str	r0, [sp, #0]
 80007e6:	9800      	ldr	r0, [sp, #0]
 80007e8:	e7ff      	b.n	80007ea <HAL_MspInit+0x4a>
 80007ea:	2007      	movs	r0, #7
 80007ec:	f003 fc86 	bl	80040fc <HAL_NVIC_SetPriorityGrouping>
 80007f0:	b002      	add	sp, #8
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <HAL_I2C_MspInit>:
 80007f4:	b580      	push	{r7, lr}
 80007f6:	466f      	mov	r7, sp
 80007f8:	b088      	sub	sp, #32
 80007fa:	9007      	str	r0, [sp, #28]
 80007fc:	2000      	movs	r0, #0
 80007fe:	9006      	str	r0, [sp, #24]
 8000800:	9005      	str	r0, [sp, #20]
 8000802:	9004      	str	r0, [sp, #16]
 8000804:	9003      	str	r0, [sp, #12]
 8000806:	9002      	str	r0, [sp, #8]
 8000808:	9807      	ldr	r0, [sp, #28]
 800080a:	6800      	ldr	r0, [r0, #0]
 800080c:	f245 4100 	movw	r1, #21504	; 0x5400
 8000810:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000814:	4288      	cmp	r0, r1
 8000816:	d135      	bne.n	8000884 <HAL_I2C_MspInit+0x90>
 8000818:	e7ff      	b.n	800081a <HAL_I2C_MspInit+0x26>
 800081a:	e7ff      	b.n	800081c <HAL_I2C_MspInit+0x28>
 800081c:	2000      	movs	r0, #0
 800081e:	9001      	str	r0, [sp, #4]
 8000820:	f643 0030 	movw	r0, #14384	; 0x3830
 8000824:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000828:	6801      	ldr	r1, [r0, #0]
 800082a:	f041 0102 	orr.w	r1, r1, #2
 800082e:	6001      	str	r1, [r0, #0]
 8000830:	6800      	ldr	r0, [r0, #0]
 8000832:	f000 0002 	and.w	r0, r0, #2
 8000836:	9001      	str	r0, [sp, #4]
 8000838:	9801      	ldr	r0, [sp, #4]
 800083a:	e7ff      	b.n	800083c <HAL_I2C_MspInit+0x48>
 800083c:	f44f 7010 	mov.w	r0, #576	; 0x240
 8000840:	9002      	str	r0, [sp, #8]
 8000842:	2012      	movs	r0, #18
 8000844:	9003      	str	r0, [sp, #12]
 8000846:	2001      	movs	r0, #1
 8000848:	9004      	str	r0, [sp, #16]
 800084a:	2000      	movs	r0, #0
 800084c:	9005      	str	r0, [sp, #20]
 800084e:	2004      	movs	r0, #4
 8000850:	9006      	str	r0, [sp, #24]
 8000852:	f240 4000 	movw	r0, #1024	; 0x400
 8000856:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800085a:	a902      	add	r1, sp, #8
 800085c:	f003 fc90 	bl	8004180 <HAL_GPIO_Init>
 8000860:	e7ff      	b.n	8000862 <HAL_I2C_MspInit+0x6e>
 8000862:	2000      	movs	r0, #0
 8000864:	9000      	str	r0, [sp, #0]
 8000866:	f643 0040 	movw	r0, #14400	; 0x3840
 800086a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800086e:	6801      	ldr	r1, [r0, #0]
 8000870:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8000874:	6001      	str	r1, [r0, #0]
 8000876:	6800      	ldr	r0, [r0, #0]
 8000878:	f400 1000 	and.w	r0, r0, #2097152	; 0x200000
 800087c:	9000      	str	r0, [sp, #0]
 800087e:	9800      	ldr	r0, [sp, #0]
 8000880:	e7ff      	b.n	8000882 <HAL_I2C_MspInit+0x8e>
 8000882:	e7ff      	b.n	8000884 <HAL_I2C_MspInit+0x90>
 8000884:	b008      	add	sp, #32
 8000886:	bd80      	pop	{r7, pc}

08000888 <HAL_I2C_MspDeInit>:
 8000888:	b5d0      	push	{r4, r6, r7, lr}
 800088a:	af02      	add	r7, sp, #8
 800088c:	b082      	sub	sp, #8
 800088e:	9001      	str	r0, [sp, #4]
 8000890:	9801      	ldr	r0, [sp, #4]
 8000892:	6800      	ldr	r0, [r0, #0]
 8000894:	f245 4100 	movw	r1, #21504	; 0x5400
 8000898:	f2c4 0100 	movt	r1, #16384	; 0x4000
 800089c:	4288      	cmp	r0, r1
 800089e:	d116      	bne.n	80008ce <HAL_I2C_MspDeInit+0x46>
 80008a0:	e7ff      	b.n	80008a2 <HAL_I2C_MspDeInit+0x1a>
 80008a2:	f643 0040 	movw	r0, #14400	; 0x3840
 80008a6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80008aa:	6801      	ldr	r1, [r0, #0]
 80008ac:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 80008b0:	6001      	str	r1, [r0, #0]
 80008b2:	f240 4400 	movw	r4, #1024	; 0x400
 80008b6:	f2c4 0402 	movt	r4, #16386	; 0x4002
 80008ba:	4620      	mov	r0, r4
 80008bc:	2140      	movs	r1, #64	; 0x40
 80008be:	f003 fdfb 	bl	80044b8 <HAL_GPIO_DeInit>
 80008c2:	4620      	mov	r0, r4
 80008c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c8:	f003 fdf6 	bl	80044b8 <HAL_GPIO_DeInit>
 80008cc:	e7ff      	b.n	80008ce <HAL_I2C_MspDeInit+0x46>
 80008ce:	b002      	add	sp, #8
 80008d0:	bdd0      	pop	{r4, r6, r7, pc}
 80008d2:	bf00      	nop

080008d4 <HAL_I2S_MspInit>:
 80008d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d6:	af03      	add	r7, sp, #12
 80008d8:	f84d 8d04 	str.w	r8, [sp, #-4]!
 80008dc:	b08e      	sub	sp, #56	; 0x38
 80008de:	900d      	str	r0, [sp, #52]	; 0x34
 80008e0:	2000      	movs	r0, #0
 80008e2:	900c      	str	r0, [sp, #48]	; 0x30
 80008e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80008e6:	900a      	str	r0, [sp, #40]	; 0x28
 80008e8:	9009      	str	r0, [sp, #36]	; 0x24
 80008ea:	9008      	str	r0, [sp, #32]
 80008ec:	9007      	str	r0, [sp, #28]
 80008ee:	9006      	str	r0, [sp, #24]
 80008f0:	9005      	str	r0, [sp, #20]
 80008f2:	9004      	str	r0, [sp, #16]
 80008f4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80008f6:	6800      	ldr	r0, [r0, #0]
 80008f8:	f643 4100 	movw	r1, #15360	; 0x3c00
 80008fc:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000900:	4288      	cmp	r0, r1
 8000902:	d163      	bne.n	80009cc <HAL_I2S_MspInit+0xf8>
 8000904:	e7ff      	b.n	8000906 <HAL_I2S_MspInit+0x32>
 8000906:	2001      	movs	r0, #1
 8000908:	9004      	str	r0, [sp, #16]
 800090a:	20c0      	movs	r0, #192	; 0xc0
 800090c:	9005      	str	r0, [sp, #20]
 800090e:	2002      	movs	r0, #2
 8000910:	9006      	str	r0, [sp, #24]
 8000912:	a804      	add	r0, sp, #16
 8000914:	f006 fd6c 	bl	80073f0 <HAL_RCCEx_PeriphCLKConfig>
 8000918:	b118      	cbz	r0, 8000922 <HAL_I2S_MspInit+0x4e>
 800091a:	e7ff      	b.n	800091c <HAL_I2S_MspInit+0x48>
 800091c:	f7ff ff1a 	bl	8000754 <Error_Handler>
 8000920:	e7ff      	b.n	8000922 <HAL_I2S_MspInit+0x4e>
 8000922:	e7ff      	b.n	8000924 <HAL_I2S_MspInit+0x50>
 8000924:	2000      	movs	r0, #0
 8000926:	9003      	str	r0, [sp, #12]
 8000928:	f643 0040 	movw	r0, #14400	; 0x3840
 800092c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000930:	6801      	ldr	r1, [r0, #0]
 8000932:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8000936:	6001      	str	r1, [r0, #0]
 8000938:	6800      	ldr	r0, [r0, #0]
 800093a:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
 800093e:	9003      	str	r0, [sp, #12]
 8000940:	9803      	ldr	r0, [sp, #12]
 8000942:	e7ff      	b.n	8000944 <HAL_I2S_MspInit+0x70>
 8000944:	e7ff      	b.n	8000946 <HAL_I2S_MspInit+0x72>
 8000946:	2000      	movs	r0, #0
 8000948:	9002      	str	r0, [sp, #8]
 800094a:	f643 0030 	movw	r0, #14384	; 0x3830
 800094e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000952:	6801      	ldr	r1, [r0, #0]
 8000954:	f041 0101 	orr.w	r1, r1, #1
 8000958:	6001      	str	r1, [r0, #0]
 800095a:	6800      	ldr	r0, [r0, #0]
 800095c:	f000 0001 	and.w	r0, r0, #1
 8000960:	9002      	str	r0, [sp, #8]
 8000962:	9802      	ldr	r0, [sp, #8]
 8000964:	e7ff      	b.n	8000966 <HAL_I2S_MspInit+0x92>
 8000966:	e7ff      	b.n	8000968 <HAL_I2S_MspInit+0x94>
 8000968:	2000      	movs	r0, #0
 800096a:	9001      	str	r0, [sp, #4]
 800096c:	f643 0030 	movw	r0, #14384	; 0x3830
 8000970:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000974:	6801      	ldr	r1, [r0, #0]
 8000976:	f041 0104 	orr.w	r1, r1, #4
 800097a:	6001      	str	r1, [r0, #0]
 800097c:	6800      	ldr	r0, [r0, #0]
 800097e:	f000 0004 	and.w	r0, r0, #4
 8000982:	9001      	str	r0, [sp, #4]
 8000984:	9801      	ldr	r0, [sp, #4]
 8000986:	e7ff      	b.n	8000988 <HAL_I2S_MspInit+0xb4>
 8000988:	2010      	movs	r0, #16
 800098a:	9008      	str	r0, [sp, #32]
 800098c:	f04f 0802 	mov.w	r8, #2
 8000990:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8000994:	2600      	movs	r6, #0
 8000996:	960a      	str	r6, [sp, #40]	; 0x28
 8000998:	960b      	str	r6, [sp, #44]	; 0x2c
 800099a:	2506      	movs	r5, #6
 800099c:	950c      	str	r5, [sp, #48]	; 0x30
 800099e:	2000      	movs	r0, #0
 80009a0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80009a4:	ac08      	add	r4, sp, #32
 80009a6:	4621      	mov	r1, r4
 80009a8:	f003 fbea 	bl	8004180 <HAL_GPIO_Init>
 80009ac:	f44f 50a4 	mov.w	r0, #5248	; 0x1480
 80009b0:	9008      	str	r0, [sp, #32]
 80009b2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80009b6:	960a      	str	r6, [sp, #40]	; 0x28
 80009b8:	960b      	str	r6, [sp, #44]	; 0x2c
 80009ba:	950c      	str	r5, [sp, #48]	; 0x30
 80009bc:	f640 0000 	movw	r0, #2048	; 0x800
 80009c0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80009c4:	4621      	mov	r1, r4
 80009c6:	f003 fbdb 	bl	8004180 <HAL_GPIO_Init>
 80009ca:	e7ff      	b.n	80009cc <HAL_I2S_MspInit+0xf8>
 80009cc:	b00e      	add	sp, #56	; 0x38
 80009ce:	f85d 8b04 	ldr.w	r8, [sp], #4
 80009d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080009d4 <HAL_I2S_MspDeInit>:
 80009d4:	b580      	push	{r7, lr}
 80009d6:	466f      	mov	r7, sp
 80009d8:	b082      	sub	sp, #8
 80009da:	9001      	str	r0, [sp, #4]
 80009dc:	9801      	ldr	r0, [sp, #4]
 80009de:	6800      	ldr	r0, [r0, #0]
 80009e0:	f643 4100 	movw	r1, #15360	; 0x3c00
 80009e4:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80009e8:	4288      	cmp	r0, r1
 80009ea:	d117      	bne.n	8000a1c <HAL_I2S_MspDeInit+0x48>
 80009ec:	e7ff      	b.n	80009ee <HAL_I2S_MspDeInit+0x1a>
 80009ee:	f643 0040 	movw	r0, #14400	; 0x3840
 80009f2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80009f6:	6801      	ldr	r1, [r0, #0]
 80009f8:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80009fc:	6001      	str	r1, [r0, #0]
 80009fe:	2000      	movs	r0, #0
 8000a00:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000a04:	2110      	movs	r1, #16
 8000a06:	f003 fd57 	bl	80044b8 <HAL_GPIO_DeInit>
 8000a0a:	f640 0000 	movw	r0, #2048	; 0x800
 8000a0e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000a12:	f44f 51a4 	mov.w	r1, #5248	; 0x1480
 8000a16:	f003 fd4f 	bl	80044b8 <HAL_GPIO_DeInit>
 8000a1a:	e7ff      	b.n	8000a1c <HAL_I2S_MspDeInit+0x48>
 8000a1c:	b002      	add	sp, #8
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <HAL_SPI_MspInit>:
 8000a20:	b580      	push	{r7, lr}
 8000a22:	466f      	mov	r7, sp
 8000a24:	b088      	sub	sp, #32
 8000a26:	9007      	str	r0, [sp, #28]
 8000a28:	2000      	movs	r0, #0
 8000a2a:	9006      	str	r0, [sp, #24]
 8000a2c:	9005      	str	r0, [sp, #20]
 8000a2e:	9004      	str	r0, [sp, #16]
 8000a30:	9003      	str	r0, [sp, #12]
 8000a32:	9002      	str	r0, [sp, #8]
 8000a34:	9807      	ldr	r0, [sp, #28]
 8000a36:	6800      	ldr	r0, [r0, #0]
 8000a38:	f243 0100 	movw	r1, #12288	; 0x3000
 8000a3c:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8000a40:	4288      	cmp	r0, r1
 8000a42:	d132      	bne.n	8000aaa <HAL_SPI_MspInit+0x8a>
 8000a44:	e7ff      	b.n	8000a46 <HAL_SPI_MspInit+0x26>
 8000a46:	e7ff      	b.n	8000a48 <HAL_SPI_MspInit+0x28>
 8000a48:	2000      	movs	r0, #0
 8000a4a:	9001      	str	r0, [sp, #4]
 8000a4c:	f643 0044 	movw	r0, #14404	; 0x3844
 8000a50:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000a54:	6801      	ldr	r1, [r0, #0]
 8000a56:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8000a5a:	6001      	str	r1, [r0, #0]
 8000a5c:	6800      	ldr	r0, [r0, #0]
 8000a5e:	f400 5080 	and.w	r0, r0, #4096	; 0x1000
 8000a62:	9001      	str	r0, [sp, #4]
 8000a64:	9801      	ldr	r0, [sp, #4]
 8000a66:	e7ff      	b.n	8000a68 <HAL_SPI_MspInit+0x48>
 8000a68:	e7ff      	b.n	8000a6a <HAL_SPI_MspInit+0x4a>
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	9000      	str	r0, [sp, #0]
 8000a6e:	f643 0030 	movw	r0, #14384	; 0x3830
 8000a72:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000a76:	6801      	ldr	r1, [r0, #0]
 8000a78:	f041 0101 	orr.w	r1, r1, #1
 8000a7c:	6001      	str	r1, [r0, #0]
 8000a7e:	6800      	ldr	r0, [r0, #0]
 8000a80:	f000 0001 	and.w	r0, r0, #1
 8000a84:	9000      	str	r0, [sp, #0]
 8000a86:	9800      	ldr	r0, [sp, #0]
 8000a88:	e7ff      	b.n	8000a8a <HAL_SPI_MspInit+0x6a>
 8000a8a:	20e0      	movs	r0, #224	; 0xe0
 8000a8c:	9002      	str	r0, [sp, #8]
 8000a8e:	2002      	movs	r0, #2
 8000a90:	9003      	str	r0, [sp, #12]
 8000a92:	2000      	movs	r0, #0
 8000a94:	9004      	str	r0, [sp, #16]
 8000a96:	9005      	str	r0, [sp, #20]
 8000a98:	2005      	movs	r0, #5
 8000a9a:	9006      	str	r0, [sp, #24]
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000aa2:	a902      	add	r1, sp, #8
 8000aa4:	f003 fb6c 	bl	8004180 <HAL_GPIO_Init>
 8000aa8:	e7ff      	b.n	8000aaa <HAL_SPI_MspInit+0x8a>
 8000aaa:	b008      	add	sp, #32
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop

08000ab0 <HAL_SPI_MspDeInit>:
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	466f      	mov	r7, sp
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	9001      	str	r0, [sp, #4]
 8000ab8:	9801      	ldr	r0, [sp, #4]
 8000aba:	6800      	ldr	r0, [r0, #0]
 8000abc:	f243 0100 	movw	r1, #12288	; 0x3000
 8000ac0:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8000ac4:	4288      	cmp	r0, r1
 8000ac6:	d10f      	bne.n	8000ae8 <HAL_SPI_MspDeInit+0x38>
 8000ac8:	e7ff      	b.n	8000aca <HAL_SPI_MspDeInit+0x1a>
 8000aca:	f643 0044 	movw	r0, #14404	; 0x3844
 8000ace:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000ad2:	6801      	ldr	r1, [r0, #0]
 8000ad4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8000ad8:	6001      	str	r1, [r0, #0]
 8000ada:	2000      	movs	r0, #0
 8000adc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000ae0:	21e0      	movs	r1, #224	; 0xe0
 8000ae2:	f003 fce9 	bl	80044b8 <HAL_GPIO_DeInit>
 8000ae6:	e7ff      	b.n	8000ae8 <HAL_SPI_MspDeInit+0x38>
 8000ae8:	b002      	add	sp, #8
 8000aea:	bd80      	pop	{r7, pc}

08000aec <HAL_UART_MspInit>:
 8000aec:	b580      	push	{r7, lr}
 8000aee:	466f      	mov	r7, sp
 8000af0:	b088      	sub	sp, #32
 8000af2:	9007      	str	r0, [sp, #28]
 8000af4:	2000      	movs	r0, #0
 8000af6:	9006      	str	r0, [sp, #24]
 8000af8:	9005      	str	r0, [sp, #20]
 8000afa:	9004      	str	r0, [sp, #16]
 8000afc:	9003      	str	r0, [sp, #12]
 8000afe:	9002      	str	r0, [sp, #8]
 8000b00:	9807      	ldr	r0, [sp, #28]
 8000b02:	6800      	ldr	r0, [r0, #0]
 8000b04:	f244 4100 	movw	r1, #17408	; 0x4400
 8000b08:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000b0c:	4288      	cmp	r0, r1
 8000b0e:	d133      	bne.n	8000b78 <HAL_UART_MspInit+0x8c>
 8000b10:	e7ff      	b.n	8000b12 <HAL_UART_MspInit+0x26>
 8000b12:	e7ff      	b.n	8000b14 <HAL_UART_MspInit+0x28>
 8000b14:	2000      	movs	r0, #0
 8000b16:	9001      	str	r0, [sp, #4]
 8000b18:	f643 0040 	movw	r0, #14400	; 0x3840
 8000b1c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000b20:	6801      	ldr	r1, [r0, #0]
 8000b22:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8000b26:	6001      	str	r1, [r0, #0]
 8000b28:	6800      	ldr	r0, [r0, #0]
 8000b2a:	f400 3000 	and.w	r0, r0, #131072	; 0x20000
 8000b2e:	9001      	str	r0, [sp, #4]
 8000b30:	9801      	ldr	r0, [sp, #4]
 8000b32:	e7ff      	b.n	8000b34 <HAL_UART_MspInit+0x48>
 8000b34:	e7ff      	b.n	8000b36 <HAL_UART_MspInit+0x4a>
 8000b36:	2000      	movs	r0, #0
 8000b38:	9000      	str	r0, [sp, #0]
 8000b3a:	f643 0030 	movw	r0, #14384	; 0x3830
 8000b3e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000b42:	6801      	ldr	r1, [r0, #0]
 8000b44:	f041 0101 	orr.w	r1, r1, #1
 8000b48:	6001      	str	r1, [r0, #0]
 8000b4a:	6800      	ldr	r0, [r0, #0]
 8000b4c:	f000 0001 	and.w	r0, r0, #1
 8000b50:	9000      	str	r0, [sp, #0]
 8000b52:	9800      	ldr	r0, [sp, #0]
 8000b54:	e7ff      	b.n	8000b56 <HAL_UART_MspInit+0x6a>
 8000b56:	200c      	movs	r0, #12
 8000b58:	9002      	str	r0, [sp, #8]
 8000b5a:	2002      	movs	r0, #2
 8000b5c:	9003      	str	r0, [sp, #12]
 8000b5e:	2000      	movs	r0, #0
 8000b60:	9004      	str	r0, [sp, #16]
 8000b62:	2003      	movs	r0, #3
 8000b64:	9005      	str	r0, [sp, #20]
 8000b66:	2007      	movs	r0, #7
 8000b68:	9006      	str	r0, [sp, #24]
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000b70:	a902      	add	r1, sp, #8
 8000b72:	f003 fb05 	bl	8004180 <HAL_GPIO_Init>
 8000b76:	e7ff      	b.n	8000b78 <HAL_UART_MspInit+0x8c>
 8000b78:	b008      	add	sp, #32
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <HAL_UART_MspDeInit>:
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	466f      	mov	r7, sp
 8000b80:	b082      	sub	sp, #8
 8000b82:	9001      	str	r0, [sp, #4]
 8000b84:	9801      	ldr	r0, [sp, #4]
 8000b86:	6800      	ldr	r0, [r0, #0]
 8000b88:	f244 4100 	movw	r1, #17408	; 0x4400
 8000b8c:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000b90:	4288      	cmp	r0, r1
 8000b92:	d10f      	bne.n	8000bb4 <HAL_UART_MspDeInit+0x38>
 8000b94:	e7ff      	b.n	8000b96 <HAL_UART_MspDeInit+0x1a>
 8000b96:	f643 0040 	movw	r0, #14400	; 0x3840
 8000b9a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000b9e:	6801      	ldr	r1, [r0, #0]
 8000ba0:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
 8000ba4:	6001      	str	r1, [r0, #0]
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000bac:	210c      	movs	r1, #12
 8000bae:	f003 fc83 	bl	80044b8 <HAL_GPIO_DeInit>
 8000bb2:	e7ff      	b.n	8000bb4 <HAL_UART_MspDeInit+0x38>
 8000bb4:	b002      	add	sp, #8
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <NMI_Handler>:
 8000bb8:	e7ff      	b.n	8000bba <NMI_Handler+0x2>
 8000bba:	e7fe      	b.n	8000bba <NMI_Handler+0x2>

08000bbc <HardFault_Handler>:
 8000bbc:	e7ff      	b.n	8000bbe <HardFault_Handler+0x2>
 8000bbe:	e7fe      	b.n	8000bbe <HardFault_Handler+0x2>

08000bc0 <MemManage_Handler>:
 8000bc0:	e7ff      	b.n	8000bc2 <MemManage_Handler+0x2>
 8000bc2:	e7fe      	b.n	8000bc2 <MemManage_Handler+0x2>

08000bc4 <BusFault_Handler>:
 8000bc4:	e7ff      	b.n	8000bc6 <BusFault_Handler+0x2>
 8000bc6:	e7fe      	b.n	8000bc6 <BusFault_Handler+0x2>

08000bc8 <UsageFault_Handler>:
 8000bc8:	e7ff      	b.n	8000bca <UsageFault_Handler+0x2>
 8000bca:	e7fe      	b.n	8000bca <UsageFault_Handler+0x2>

08000bcc <SVC_Handler>:
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <DebugMon_Handler>:
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <PendSV_Handler>:
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <SysTick_Handler>:
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	466f      	mov	r7, sp
 8000bdc:	f003 f97a 	bl	8003ed4 <HAL_IncTick>
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop

08000be4 <OTG_FS_IRQHandler>:
 8000be4:	b580      	push	{r7, lr}
 8000be6:	466f      	mov	r7, sp
 8000be8:	f240 50ec 	movw	r0, #1516	; 0x5ec
 8000bec:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000bf0:	f003 ffe2 	bl	8004bb8 <HAL_HCD_IRQHandler>
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop

08000bf8 <initialise_monitor_handles>:
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <_getpid>:
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	4770      	bx	lr

08000c00 <_kill>:
 8000c00:	b580      	push	{r7, lr}
 8000c02:	466f      	mov	r7, sp
 8000c04:	b082      	sub	sp, #8
 8000c06:	9001      	str	r0, [sp, #4]
 8000c08:	9100      	str	r1, [sp, #0]
 8000c0a:	f000 f9f5 	bl	8000ff8 <__errno>
 8000c0e:	2116      	movs	r1, #22
 8000c10:	6001      	str	r1, [r0, #0]
 8000c12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c16:	b002      	add	sp, #8
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop

08000c1c <_exit>:
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	466f      	mov	r7, sp
 8000c20:	b082      	sub	sp, #8
 8000c22:	9001      	str	r0, [sp, #4]
 8000c24:	9801      	ldr	r0, [sp, #4]
 8000c26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c2a:	f7ff ffe9 	bl	8000c00 <_kill>
 8000c2e:	e7ff      	b.n	8000c30 <_exit+0x14>
 8000c30:	e7fe      	b.n	8000c30 <_exit+0x14>
 8000c32:	bf00      	nop

08000c34 <_read>:
 8000c34:	b580      	push	{r7, lr}
 8000c36:	466f      	mov	r7, sp
 8000c38:	b084      	sub	sp, #16
 8000c3a:	9003      	str	r0, [sp, #12]
 8000c3c:	9102      	str	r1, [sp, #8]
 8000c3e:	9201      	str	r2, [sp, #4]
 8000c40:	2000      	movs	r0, #0
 8000c42:	9000      	str	r0, [sp, #0]
 8000c44:	e7ff      	b.n	8000c46 <_read+0x12>
 8000c46:	9800      	ldr	r0, [sp, #0]
 8000c48:	9901      	ldr	r1, [sp, #4]
 8000c4a:	4288      	cmp	r0, r1
 8000c4c:	da0b      	bge.n	8000c66 <_read+0x32>
 8000c4e:	e7ff      	b.n	8000c50 <_read+0x1c>
 8000c50:	f3af 8000 	nop.w
 8000c54:	9902      	ldr	r1, [sp, #8]
 8000c56:	1c4a      	adds	r2, r1, #1
 8000c58:	9202      	str	r2, [sp, #8]
 8000c5a:	7008      	strb	r0, [r1, #0]
 8000c5c:	e7ff      	b.n	8000c5e <_read+0x2a>
 8000c5e:	9800      	ldr	r0, [sp, #0]
 8000c60:	3001      	adds	r0, #1
 8000c62:	9000      	str	r0, [sp, #0]
 8000c64:	e7ef      	b.n	8000c46 <_read+0x12>
 8000c66:	9801      	ldr	r0, [sp, #4]
 8000c68:	b004      	add	sp, #16
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <_write>:
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	466f      	mov	r7, sp
 8000c70:	b084      	sub	sp, #16
 8000c72:	9003      	str	r0, [sp, #12]
 8000c74:	9102      	str	r1, [sp, #8]
 8000c76:	9201      	str	r2, [sp, #4]
 8000c78:	2000      	movs	r0, #0
 8000c7a:	9000      	str	r0, [sp, #0]
 8000c7c:	e7ff      	b.n	8000c7e <_write+0x12>
 8000c7e:	9800      	ldr	r0, [sp, #0]
 8000c80:	9901      	ldr	r1, [sp, #4]
 8000c82:	4288      	cmp	r0, r1
 8000c84:	da0b      	bge.n	8000c9e <_write+0x32>
 8000c86:	e7ff      	b.n	8000c88 <_write+0x1c>
 8000c88:	9802      	ldr	r0, [sp, #8]
 8000c8a:	1c41      	adds	r1, r0, #1
 8000c8c:	9102      	str	r1, [sp, #8]
 8000c8e:	7800      	ldrb	r0, [r0, #0]
 8000c90:	f7ff fac2 	bl	8000218 <__io_putchar>
 8000c94:	e7ff      	b.n	8000c96 <_write+0x2a>
 8000c96:	9800      	ldr	r0, [sp, #0]
 8000c98:	3001      	adds	r0, #1
 8000c9a:	9000      	str	r0, [sp, #0]
 8000c9c:	e7ef      	b.n	8000c7e <_write+0x12>
 8000c9e:	9801      	ldr	r0, [sp, #4]
 8000ca0:	b004      	add	sp, #16
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <_close>:
 8000ca4:	b081      	sub	sp, #4
 8000ca6:	9000      	str	r0, [sp, #0]
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cac:	b001      	add	sp, #4
 8000cae:	4770      	bx	lr

08000cb0 <_fstat>:
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	9001      	str	r0, [sp, #4]
 8000cb4:	9100      	str	r1, [sp, #0]
 8000cb6:	9800      	ldr	r0, [sp, #0]
 8000cb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cbc:	6041      	str	r1, [r0, #4]
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	b002      	add	sp, #8
 8000cc2:	4770      	bx	lr

08000cc4 <_isatty>:
 8000cc4:	b081      	sub	sp, #4
 8000cc6:	9000      	str	r0, [sp, #0]
 8000cc8:	2001      	movs	r0, #1
 8000cca:	b001      	add	sp, #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <_lseek>:
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	9002      	str	r0, [sp, #8]
 8000cd4:	9101      	str	r1, [sp, #4]
 8000cd6:	9200      	str	r2, [sp, #0]
 8000cd8:	2000      	movs	r0, #0
 8000cda:	b003      	add	sp, #12
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop

08000ce0 <_open>:
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	9001      	str	r0, [sp, #4]
 8000ce4:	9100      	str	r1, [sp, #0]
 8000ce6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cea:	b002      	add	sp, #8
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <_wait>:
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	466f      	mov	r7, sp
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	9001      	str	r0, [sp, #4]
 8000cf8:	f000 f97e 	bl	8000ff8 <__errno>
 8000cfc:	210a      	movs	r1, #10
 8000cfe:	6001      	str	r1, [r0, #0]
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d04:	b002      	add	sp, #8
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <_unlink>:
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	466f      	mov	r7, sp
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	9001      	str	r0, [sp, #4]
 8000d10:	f000 f972 	bl	8000ff8 <__errno>
 8000d14:	2102      	movs	r1, #2
 8000d16:	6001      	str	r1, [r0, #0]
 8000d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d1c:	b002      	add	sp, #8
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <_times>:
 8000d20:	b081      	sub	sp, #4
 8000d22:	9000      	str	r0, [sp, #0]
 8000d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d28:	b001      	add	sp, #4
 8000d2a:	4770      	bx	lr

08000d2c <_stat>:
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	9001      	str	r0, [sp, #4]
 8000d30:	9100      	str	r1, [sp, #0]
 8000d32:	9800      	ldr	r0, [sp, #0]
 8000d34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d38:	6041      	str	r1, [r0, #4]
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	b002      	add	sp, #8
 8000d3e:	4770      	bx	lr

08000d40 <_link>:
 8000d40:	b580      	push	{r7, lr}
 8000d42:	466f      	mov	r7, sp
 8000d44:	b082      	sub	sp, #8
 8000d46:	9001      	str	r0, [sp, #4]
 8000d48:	9100      	str	r1, [sp, #0]
 8000d4a:	f000 f955 	bl	8000ff8 <__errno>
 8000d4e:	211f      	movs	r1, #31
 8000d50:	6001      	str	r1, [r0, #0]
 8000d52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d56:	b002      	add	sp, #8
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop

08000d5c <_fork>:
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	466f      	mov	r7, sp
 8000d60:	f000 f94a 	bl	8000ff8 <__errno>
 8000d64:	210b      	movs	r1, #11
 8000d66:	6001      	str	r1, [r0, #0]
 8000d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop

08000d70 <_execve>:
 8000d70:	b580      	push	{r7, lr}
 8000d72:	466f      	mov	r7, sp
 8000d74:	b084      	sub	sp, #16
 8000d76:	9003      	str	r0, [sp, #12]
 8000d78:	9102      	str	r1, [sp, #8]
 8000d7a:	9201      	str	r2, [sp, #4]
 8000d7c:	f000 f93c 	bl	8000ff8 <__errno>
 8000d80:	210c      	movs	r1, #12
 8000d82:	6001      	str	r1, [r0, #0]
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d88:	b004      	add	sp, #16
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <_sbrk>:
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	466f      	mov	r7, sp
 8000d90:	b086      	sub	sp, #24
 8000d92:	9004      	str	r0, [sp, #16]
 8000d94:	f240 4000 	movw	r0, #1024	; 0x400
 8000d98:	f2c0 0000 	movt	r0, #0
 8000d9c:	f240 0100 	movw	r1, #0
 8000da0:	f2c2 0102 	movt	r1, #8194	; 0x2002
 8000da4:	1a08      	subs	r0, r1, r0
 8000da6:	9003      	str	r0, [sp, #12]
 8000da8:	9803      	ldr	r0, [sp, #12]
 8000daa:	9002      	str	r0, [sp, #8]
 8000dac:	f240 10fc 	movw	r0, #508	; 0x1fc
 8000db0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000db4:	6800      	ldr	r0, [r0, #0]
 8000db6:	b950      	cbnz	r0, 8000dce <_sbrk+0x42>
 8000db8:	e7ff      	b.n	8000dba <_sbrk+0x2e>
 8000dba:	f240 10fc 	movw	r0, #508	; 0x1fc
 8000dbe:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000dc2:	f640 01f0 	movw	r1, #2288	; 0x8f0
 8000dc6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000dca:	6001      	str	r1, [r0, #0]
 8000dcc:	e7ff      	b.n	8000dce <_sbrk+0x42>
 8000dce:	f240 10fc 	movw	r0, #508	; 0x1fc
 8000dd2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000dd6:	6800      	ldr	r0, [r0, #0]
 8000dd8:	9904      	ldr	r1, [sp, #16]
 8000dda:	4408      	add	r0, r1
 8000ddc:	9902      	ldr	r1, [sp, #8]
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <_sbrk+0x68>
 8000de2:	e7ff      	b.n	8000de4 <_sbrk+0x58>
 8000de4:	f000 f908 	bl	8000ff8 <__errno>
 8000de8:	210c      	movs	r1, #12
 8000dea:	6001      	str	r1, [r0, #0]
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000df0:	9005      	str	r0, [sp, #20]
 8000df2:	e00c      	b.n	8000e0e <_sbrk+0x82>
 8000df4:	f240 10fc 	movw	r0, #508	; 0x1fc
 8000df8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000dfc:	6801      	ldr	r1, [r0, #0]
 8000dfe:	9101      	str	r1, [sp, #4]
 8000e00:	9904      	ldr	r1, [sp, #16]
 8000e02:	6802      	ldr	r2, [r0, #0]
 8000e04:	4411      	add	r1, r2
 8000e06:	6001      	str	r1, [r0, #0]
 8000e08:	9801      	ldr	r0, [sp, #4]
 8000e0a:	9005      	str	r0, [sp, #20]
 8000e0c:	e7ff      	b.n	8000e0e <_sbrk+0x82>
 8000e0e:	9805      	ldr	r0, [sp, #20]
 8000e10:	b006      	add	sp, #24
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <SystemInit>:
 8000e14:	f64e 5088 	movw	r0, #60808	; 0xed88
 8000e18:	f2ce 0000 	movt	r0, #57344	; 0xe000
 8000e1c:	6801      	ldr	r1, [r0, #0]
 8000e1e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000e22:	6001      	str	r1, [r0, #0]
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <SystemCoreClockUpdate>:
 8000e28:	b085      	sub	sp, #20
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	9004      	str	r0, [sp, #16]
 8000e2e:	9003      	str	r0, [sp, #12]
 8000e30:	2102      	movs	r1, #2
 8000e32:	9102      	str	r1, [sp, #8]
 8000e34:	9001      	str	r0, [sp, #4]
 8000e36:	9100      	str	r1, [sp, #0]
 8000e38:	f643 0008 	movw	r0, #14344	; 0x3808
 8000e3c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000e40:	6800      	ldr	r0, [r0, #0]
 8000e42:	f000 000c 	and.w	r0, r0, #12
 8000e46:	9004      	str	r0, [sp, #16]
 8000e48:	9804      	ldr	r0, [sp, #16]
 8000e4a:	b130      	cbz	r0, 8000e5a <SystemCoreClockUpdate+0x32>
 8000e4c:	e7ff      	b.n	8000e4e <SystemCoreClockUpdate+0x26>
 8000e4e:	2804      	cmp	r0, #4
 8000e50:	d00d      	beq.n	8000e6e <SystemCoreClockUpdate+0x46>
 8000e52:	e7ff      	b.n	8000e54 <SystemCoreClockUpdate+0x2c>
 8000e54:	2808      	cmp	r0, #8
 8000e56:	d014      	beq.n	8000e82 <SystemCoreClockUpdate+0x5a>
 8000e58:	e059      	b.n	8000f0e <SystemCoreClockUpdate+0xe6>
 8000e5a:	f240 0000 	movw	r0, #0
 8000e5e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000e62:	f242 4100 	movw	r1, #9216	; 0x2400
 8000e66:	f2c0 01f4 	movt	r1, #244	; 0xf4
 8000e6a:	6001      	str	r1, [r0, #0]
 8000e6c:	e059      	b.n	8000f22 <SystemCoreClockUpdate+0xfa>
 8000e6e:	f240 0000 	movw	r0, #0
 8000e72:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000e76:	f241 2100 	movw	r1, #4608	; 0x1200
 8000e7a:	f2c0 017a 	movt	r1, #122	; 0x7a
 8000e7e:	6001      	str	r1, [r0, #0]
 8000e80:	e04f      	b.n	8000f22 <SystemCoreClockUpdate+0xfa>
 8000e82:	f643 0004 	movw	r0, #14340	; 0x3804
 8000e86:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000e8a:	6801      	ldr	r1, [r0, #0]
 8000e8c:	f3c1 5180 	ubfx	r1, r1, #22, #1
 8000e90:	9101      	str	r1, [sp, #4]
 8000e92:	6800      	ldr	r0, [r0, #0]
 8000e94:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8000e98:	9000      	str	r0, [sp, #0]
 8000e9a:	9801      	ldr	r0, [sp, #4]
 8000e9c:	b188      	cbz	r0, 8000ec2 <SystemCoreClockUpdate+0x9a>
 8000e9e:	e7ff      	b.n	8000ea0 <SystemCoreClockUpdate+0x78>
 8000ea0:	9800      	ldr	r0, [sp, #0]
 8000ea2:	f241 2100 	movw	r1, #4608	; 0x1200
 8000ea6:	f2c0 017a 	movt	r1, #122	; 0x7a
 8000eaa:	fbb1 f0f0 	udiv	r0, r1, r0
 8000eae:	f643 0104 	movw	r1, #14340	; 0x3804
 8000eb2:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8000eb6:	6809      	ldr	r1, [r1, #0]
 8000eb8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000ebc:	4348      	muls	r0, r1
 8000ebe:	9003      	str	r0, [sp, #12]
 8000ec0:	e010      	b.n	8000ee4 <SystemCoreClockUpdate+0xbc>
 8000ec2:	9800      	ldr	r0, [sp, #0]
 8000ec4:	f242 4100 	movw	r1, #9216	; 0x2400
 8000ec8:	f2c0 01f4 	movt	r1, #244	; 0xf4
 8000ecc:	fbb1 f0f0 	udiv	r0, r1, r0
 8000ed0:	f643 0104 	movw	r1, #14340	; 0x3804
 8000ed4:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8000ed8:	6809      	ldr	r1, [r1, #0]
 8000eda:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000ede:	4348      	muls	r0, r1
 8000ee0:	9003      	str	r0, [sp, #12]
 8000ee2:	e7ff      	b.n	8000ee4 <SystemCoreClockUpdate+0xbc>
 8000ee4:	f643 0004 	movw	r0, #14340	; 0x3804
 8000ee8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000eec:	6800      	ldr	r0, [r0, #0]
 8000eee:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8000ef2:	2102      	movs	r1, #2
 8000ef4:	eb01 30d0 	add.w	r0, r1, r0, lsr #15
 8000ef8:	9002      	str	r0, [sp, #8]
 8000efa:	9803      	ldr	r0, [sp, #12]
 8000efc:	9902      	ldr	r1, [sp, #8]
 8000efe:	fbb0 f0f1 	udiv	r0, r0, r1
 8000f02:	f240 0100 	movw	r1, #0
 8000f06:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000f0a:	6008      	str	r0, [r1, #0]
 8000f0c:	e009      	b.n	8000f22 <SystemCoreClockUpdate+0xfa>
 8000f0e:	f240 0000 	movw	r0, #0
 8000f12:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000f16:	f242 4100 	movw	r1, #9216	; 0x2400
 8000f1a:	f2c0 01f4 	movt	r1, #244	; 0xf4
 8000f1e:	6001      	str	r1, [r0, #0]
 8000f20:	e7ff      	b.n	8000f22 <SystemCoreClockUpdate+0xfa>
 8000f22:	f643 0008 	movw	r0, #14344	; 0x3808
 8000f26:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000f2a:	6800      	ldr	r0, [r0, #0]
 8000f2c:	b2c0      	uxtb	r0, r0
 8000f2e:	0900      	lsrs	r0, r0, #4
 8000f30:	f24b 41d4 	movw	r1, #46292	; 0xb4d4
 8000f34:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000f38:	5c08      	ldrb	r0, [r1, r0]
 8000f3a:	9004      	str	r0, [sp, #16]
 8000f3c:	9804      	ldr	r0, [sp, #16]
 8000f3e:	f240 0100 	movw	r1, #0
 8000f42:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000f46:	680a      	ldr	r2, [r1, #0]
 8000f48:	fa22 f000 	lsr.w	r0, r2, r0
 8000f4c:	6008      	str	r0, [r1, #0]
 8000f4e:	b005      	add	sp, #20
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <__aeabi_memclr>:
 8000f54:	2200      	movs	r2, #0
 8000f56:	f000 b801 	b.w	8000f5c <__aeabi_memset>
 8000f5a:	bf00      	nop

08000f5c <__aeabi_memset>:
 8000f5c:	b470      	push	{r4, r5, r6}
 8000f5e:	0784      	lsls	r4, r0, #30
 8000f60:	d046      	beq.n	8000ff0 <__aeabi_memset+0x94>
 8000f62:	1e4c      	subs	r4, r1, #1
 8000f64:	2900      	cmp	r1, #0
 8000f66:	d041      	beq.n	8000fec <__aeabi_memset+0x90>
 8000f68:	b2d5      	uxtb	r5, r2
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	e002      	b.n	8000f74 <__aeabi_memset+0x18>
 8000f6e:	1e61      	subs	r1, r4, #1
 8000f70:	b3e4      	cbz	r4, 8000fec <__aeabi_memset+0x90>
 8000f72:	460c      	mov	r4, r1
 8000f74:	f803 5b01 	strb.w	r5, [r3], #1
 8000f78:	0799      	lsls	r1, r3, #30
 8000f7a:	d1f8      	bne.n	8000f6e <__aeabi_memset+0x12>
 8000f7c:	2c03      	cmp	r4, #3
 8000f7e:	d92e      	bls.n	8000fde <__aeabi_memset+0x82>
 8000f80:	b2d5      	uxtb	r5, r2
 8000f82:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8000f86:	2c0f      	cmp	r4, #15
 8000f88:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8000f8c:	d919      	bls.n	8000fc2 <__aeabi_memset+0x66>
 8000f8e:	4626      	mov	r6, r4
 8000f90:	f103 0110 	add.w	r1, r3, #16
 8000f94:	3e10      	subs	r6, #16
 8000f96:	2e0f      	cmp	r6, #15
 8000f98:	f841 5c10 	str.w	r5, [r1, #-16]
 8000f9c:	f841 5c0c 	str.w	r5, [r1, #-12]
 8000fa0:	f841 5c08 	str.w	r5, [r1, #-8]
 8000fa4:	f841 5c04 	str.w	r5, [r1, #-4]
 8000fa8:	f101 0110 	add.w	r1, r1, #16
 8000fac:	d8f2      	bhi.n	8000f94 <__aeabi_memset+0x38>
 8000fae:	f1a4 0110 	sub.w	r1, r4, #16
 8000fb2:	f021 010f 	bic.w	r1, r1, #15
 8000fb6:	f004 040f 	and.w	r4, r4, #15
 8000fba:	3110      	adds	r1, #16
 8000fbc:	2c03      	cmp	r4, #3
 8000fbe:	440b      	add	r3, r1
 8000fc0:	d90d      	bls.n	8000fde <__aeabi_memset+0x82>
 8000fc2:	461e      	mov	r6, r3
 8000fc4:	4621      	mov	r1, r4
 8000fc6:	3904      	subs	r1, #4
 8000fc8:	2903      	cmp	r1, #3
 8000fca:	f846 5b04 	str.w	r5, [r6], #4
 8000fce:	d8fa      	bhi.n	8000fc6 <__aeabi_memset+0x6a>
 8000fd0:	1f21      	subs	r1, r4, #4
 8000fd2:	f021 0103 	bic.w	r1, r1, #3
 8000fd6:	3104      	adds	r1, #4
 8000fd8:	440b      	add	r3, r1
 8000fda:	f004 0403 	and.w	r4, r4, #3
 8000fde:	b12c      	cbz	r4, 8000fec <__aeabi_memset+0x90>
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	441c      	add	r4, r3
 8000fe4:	f803 2b01 	strb.w	r2, [r3], #1
 8000fe8:	42a3      	cmp	r3, r4
 8000fea:	d1fb      	bne.n	8000fe4 <__aeabi_memset+0x88>
 8000fec:	bc70      	pop	{r4, r5, r6}
 8000fee:	4770      	bx	lr
 8000ff0:	460c      	mov	r4, r1
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	e7c2      	b.n	8000f7c <__aeabi_memset+0x20>
	...

08000ff8 <__errno>:
 8000ff8:	4b01      	ldr	r3, [pc, #4]	; (8001000 <__errno+0x8>)
 8000ffa:	6818      	ldr	r0, [r3, #0]
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000004 	.word	0x20000004

08001004 <__libc_init_array>:
 8001004:	b570      	push	{r4, r5, r6, lr}
 8001006:	4e0d      	ldr	r6, [pc, #52]	; (800103c <__libc_init_array+0x38>)
 8001008:	4d0d      	ldr	r5, [pc, #52]	; (8001040 <__libc_init_array+0x3c>)
 800100a:	1b76      	subs	r6, r6, r5
 800100c:	10b6      	asrs	r6, r6, #2
 800100e:	d006      	beq.n	800101e <__libc_init_array+0x1a>
 8001010:	2400      	movs	r4, #0
 8001012:	f855 3b04 	ldr.w	r3, [r5], #4
 8001016:	3401      	adds	r4, #1
 8001018:	4798      	blx	r3
 800101a:	42a6      	cmp	r6, r4
 800101c:	d1f9      	bne.n	8001012 <__libc_init_array+0xe>
 800101e:	4e09      	ldr	r6, [pc, #36]	; (8001044 <__libc_init_array+0x40>)
 8001020:	4d09      	ldr	r5, [pc, #36]	; (8001048 <__libc_init_array+0x44>)
 8001022:	1b76      	subs	r6, r6, r5
 8001024:	f00a fa4a 	bl	800b4bc <_init>
 8001028:	10b6      	asrs	r6, r6, #2
 800102a:	d006      	beq.n	800103a <__libc_init_array+0x36>
 800102c:	2400      	movs	r4, #0
 800102e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001032:	3401      	adds	r4, #1
 8001034:	4798      	blx	r3
 8001036:	42a6      	cmp	r6, r4
 8001038:	d1f9      	bne.n	800102e <__libc_init_array+0x2a>
 800103a:	bd70      	pop	{r4, r5, r6, pc}
 800103c:	0800b678 	.word	0x0800b678
 8001040:	0800b678 	.word	0x0800b678
 8001044:	0800b67c 	.word	0x0800b67c
 8001048:	0800b678 	.word	0x0800b678

0800104c <malloc>:
 800104c:	4b02      	ldr	r3, [pc, #8]	; (8001058 <malloc+0xc>)
 800104e:	4601      	mov	r1, r0
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	f000 b8bf 	b.w	80011d4 <_malloc_r>
 8001056:	bf00      	nop
 8001058:	20000004 	.word	0x20000004

0800105c <free>:
 800105c:	4b02      	ldr	r3, [pc, #8]	; (8001068 <free+0xc>)
 800105e:	4601      	mov	r1, r0
 8001060:	6818      	ldr	r0, [r3, #0]
 8001062:	f000 b855 	b.w	8001110 <_free_r>
 8001066:	bf00      	nop
 8001068:	20000004 	.word	0x20000004

0800106c <memset>:
 800106c:	0783      	lsls	r3, r0, #30
 800106e:	b530      	push	{r4, r5, lr}
 8001070:	d048      	beq.n	8001104 <memset+0x98>
 8001072:	1e54      	subs	r4, r2, #1
 8001074:	2a00      	cmp	r2, #0
 8001076:	d03f      	beq.n	80010f8 <memset+0x8c>
 8001078:	b2ca      	uxtb	r2, r1
 800107a:	4603      	mov	r3, r0
 800107c:	e001      	b.n	8001082 <memset+0x16>
 800107e:	3c01      	subs	r4, #1
 8001080:	d33a      	bcc.n	80010f8 <memset+0x8c>
 8001082:	f803 2b01 	strb.w	r2, [r3], #1
 8001086:	079d      	lsls	r5, r3, #30
 8001088:	d1f9      	bne.n	800107e <memset+0x12>
 800108a:	2c03      	cmp	r4, #3
 800108c:	d92d      	bls.n	80010ea <memset+0x7e>
 800108e:	b2cd      	uxtb	r5, r1
 8001090:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8001094:	2c0f      	cmp	r4, #15
 8001096:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800109a:	d936      	bls.n	800110a <memset+0x9e>
 800109c:	f1a4 0210 	sub.w	r2, r4, #16
 80010a0:	f022 0c0f 	bic.w	ip, r2, #15
 80010a4:	f103 0e20 	add.w	lr, r3, #32
 80010a8:	44e6      	add	lr, ip
 80010aa:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 80010ae:	f103 0210 	add.w	r2, r3, #16
 80010b2:	e942 5504 	strd	r5, r5, [r2, #-16]
 80010b6:	e942 5502 	strd	r5, r5, [r2, #-8]
 80010ba:	3210      	adds	r2, #16
 80010bc:	4572      	cmp	r2, lr
 80010be:	d1f8      	bne.n	80010b2 <memset+0x46>
 80010c0:	f10c 0201 	add.w	r2, ip, #1
 80010c4:	f014 0f0c 	tst.w	r4, #12
 80010c8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80010cc:	f004 0c0f 	and.w	ip, r4, #15
 80010d0:	d013      	beq.n	80010fa <memset+0x8e>
 80010d2:	f1ac 0304 	sub.w	r3, ip, #4
 80010d6:	f023 0303 	bic.w	r3, r3, #3
 80010da:	3304      	adds	r3, #4
 80010dc:	4413      	add	r3, r2
 80010de:	f842 5b04 	str.w	r5, [r2], #4
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d1fb      	bne.n	80010de <memset+0x72>
 80010e6:	f00c 0403 	and.w	r4, ip, #3
 80010ea:	b12c      	cbz	r4, 80010f8 <memset+0x8c>
 80010ec:	b2ca      	uxtb	r2, r1
 80010ee:	441c      	add	r4, r3
 80010f0:	f803 2b01 	strb.w	r2, [r3], #1
 80010f4:	429c      	cmp	r4, r3
 80010f6:	d1fb      	bne.n	80010f0 <memset+0x84>
 80010f8:	bd30      	pop	{r4, r5, pc}
 80010fa:	4664      	mov	r4, ip
 80010fc:	4613      	mov	r3, r2
 80010fe:	2c00      	cmp	r4, #0
 8001100:	d1f4      	bne.n	80010ec <memset+0x80>
 8001102:	e7f9      	b.n	80010f8 <memset+0x8c>
 8001104:	4603      	mov	r3, r0
 8001106:	4614      	mov	r4, r2
 8001108:	e7bf      	b.n	800108a <memset+0x1e>
 800110a:	461a      	mov	r2, r3
 800110c:	46a4      	mov	ip, r4
 800110e:	e7e0      	b.n	80010d2 <memset+0x66>

08001110 <_free_r>:
 8001110:	2900      	cmp	r1, #0
 8001112:	d058      	beq.n	80011c6 <_free_r+0xb6>
 8001114:	b530      	push	{r4, r5, lr}
 8001116:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800111a:	b083      	sub	sp, #12
 800111c:	2b00      	cmp	r3, #0
 800111e:	f1a1 0404 	sub.w	r4, r1, #4
 8001122:	bfb8      	it	lt
 8001124:	18e4      	addlt	r4, r4, r3
 8001126:	9001      	str	r0, [sp, #4]
 8001128:	f000 fa50 	bl	80015cc <__malloc_lock>
 800112c:	4a28      	ldr	r2, [pc, #160]	; (80011d0 <_free_r+0xc0>)
 800112e:	9801      	ldr	r0, [sp, #4]
 8001130:	6813      	ldr	r3, [r2, #0]
 8001132:	b133      	cbz	r3, 8001142 <_free_r+0x32>
 8001134:	42a3      	cmp	r3, r4
 8001136:	d90d      	bls.n	8001154 <_free_r+0x44>
 8001138:	6821      	ldr	r1, [r4, #0]
 800113a:	eb04 0c01 	add.w	ip, r4, r1
 800113e:	4563      	cmp	r3, ip
 8001140:	d02f      	beq.n	80011a2 <_free_r+0x92>
 8001142:	6063      	str	r3, [r4, #4]
 8001144:	6014      	str	r4, [r2, #0]
 8001146:	b003      	add	sp, #12
 8001148:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800114c:	f000 ba40 	b.w	80015d0 <__malloc_unlock>
 8001150:	42a3      	cmp	r3, r4
 8001152:	d810      	bhi.n	8001176 <_free_r+0x66>
 8001154:	461a      	mov	r2, r3
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d1f9      	bne.n	8001150 <_free_r+0x40>
 800115c:	6811      	ldr	r1, [r2, #0]
 800115e:	eb02 0c01 	add.w	ip, r2, r1
 8001162:	4564      	cmp	r4, ip
 8001164:	d019      	beq.n	800119a <_free_r+0x8a>
 8001166:	d32f      	bcc.n	80011c8 <_free_r+0xb8>
 8001168:	6063      	str	r3, [r4, #4]
 800116a:	6054      	str	r4, [r2, #4]
 800116c:	b003      	add	sp, #12
 800116e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001172:	f000 ba2d 	b.w	80015d0 <__malloc_unlock>
 8001176:	6811      	ldr	r1, [r2, #0]
 8001178:	eb02 0c01 	add.w	ip, r2, r1
 800117c:	45a4      	cmp	ip, r4
 800117e:	d016      	beq.n	80011ae <_free_r+0x9e>
 8001180:	d822      	bhi.n	80011c8 <_free_r+0xb8>
 8001182:	6821      	ldr	r1, [r4, #0]
 8001184:	eb04 0c01 	add.w	ip, r4, r1
 8001188:	4563      	cmp	r3, ip
 800118a:	d1ed      	bne.n	8001168 <_free_r+0x58>
 800118c:	681d      	ldr	r5, [r3, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	4429      	add	r1, r5
 8001192:	e9c4 1300 	strd	r1, r3, [r4]
 8001196:	6054      	str	r4, [r2, #4]
 8001198:	e7d5      	b.n	8001146 <_free_r+0x36>
 800119a:	6823      	ldr	r3, [r4, #0]
 800119c:	4419      	add	r1, r3
 800119e:	6011      	str	r1, [r2, #0]
 80011a0:	e7d1      	b.n	8001146 <_free_r+0x36>
 80011a2:	681d      	ldr	r5, [r3, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	4429      	add	r1, r5
 80011a8:	e9c4 1300 	strd	r1, r3, [r4]
 80011ac:	e7ca      	b.n	8001144 <_free_r+0x34>
 80011ae:	6824      	ldr	r4, [r4, #0]
 80011b0:	4421      	add	r1, r4
 80011b2:	1854      	adds	r4, r2, r1
 80011b4:	42a3      	cmp	r3, r4
 80011b6:	6011      	str	r1, [r2, #0]
 80011b8:	d1c5      	bne.n	8001146 <_free_r+0x36>
 80011ba:	e9d3 4300 	ldrd	r4, r3, [r3]
 80011be:	4421      	add	r1, r4
 80011c0:	e9c2 1300 	strd	r1, r3, [r2]
 80011c4:	e7bf      	b.n	8001146 <_free_r+0x36>
 80011c6:	4770      	bx	lr
 80011c8:	230c      	movs	r3, #12
 80011ca:	6003      	str	r3, [r0, #0]
 80011cc:	e7bb      	b.n	8001146 <_free_r+0x36>
 80011ce:	bf00      	nop
 80011d0:	20000200 	.word	0x20000200

080011d4 <_malloc_r>:
 80011d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011d6:	1ccd      	adds	r5, r1, #3
 80011d8:	f025 0503 	bic.w	r5, r5, #3
 80011dc:	3508      	adds	r5, #8
 80011de:	2d0c      	cmp	r5, #12
 80011e0:	bf38      	it	cc
 80011e2:	250c      	movcc	r5, #12
 80011e4:	2d00      	cmp	r5, #0
 80011e6:	4606      	mov	r6, r0
 80011e8:	db23      	blt.n	8001232 <_malloc_r+0x5e>
 80011ea:	42a9      	cmp	r1, r5
 80011ec:	d821      	bhi.n	8001232 <_malloc_r+0x5e>
 80011ee:	4f25      	ldr	r7, [pc, #148]	; (8001284 <_malloc_r+0xb0>)
 80011f0:	f000 f9ec 	bl	80015cc <__malloc_lock>
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	b322      	cbz	r2, 8001242 <_malloc_r+0x6e>
 80011f8:	4614      	mov	r4, r2
 80011fa:	e003      	b.n	8001204 <_malloc_r+0x30>
 80011fc:	6863      	ldr	r3, [r4, #4]
 80011fe:	4622      	mov	r2, r4
 8001200:	b1fb      	cbz	r3, 8001242 <_malloc_r+0x6e>
 8001202:	461c      	mov	r4, r3
 8001204:	6823      	ldr	r3, [r4, #0]
 8001206:	1b5b      	subs	r3, r3, r5
 8001208:	d4f8      	bmi.n	80011fc <_malloc_r+0x28>
 800120a:	2b0b      	cmp	r3, #11
 800120c:	d815      	bhi.n	800123a <_malloc_r+0x66>
 800120e:	6863      	ldr	r3, [r4, #4]
 8001210:	4294      	cmp	r4, r2
 8001212:	bf0c      	ite	eq
 8001214:	603b      	streq	r3, [r7, #0]
 8001216:	6053      	strne	r3, [r2, #4]
 8001218:	4630      	mov	r0, r6
 800121a:	f000 f9d9 	bl	80015d0 <__malloc_unlock>
 800121e:	f104 000b 	add.w	r0, r4, #11
 8001222:	1d23      	adds	r3, r4, #4
 8001224:	f020 0007 	bic.w	r0, r0, #7
 8001228:	1ac2      	subs	r2, r0, r3
 800122a:	d001      	beq.n	8001230 <_malloc_r+0x5c>
 800122c:	1a1b      	subs	r3, r3, r0
 800122e:	50a3      	str	r3, [r4, r2]
 8001230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001232:	230c      	movs	r3, #12
 8001234:	6033      	str	r3, [r6, #0]
 8001236:	2000      	movs	r0, #0
 8001238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800123a:	6023      	str	r3, [r4, #0]
 800123c:	441c      	add	r4, r3
 800123e:	6025      	str	r5, [r4, #0]
 8001240:	e7ea      	b.n	8001218 <_malloc_r+0x44>
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	b1c9      	cbz	r1, 800127a <_malloc_r+0xa6>
 8001246:	4629      	mov	r1, r5
 8001248:	4630      	mov	r0, r6
 800124a:	f000 f84d 	bl	80012e8 <_sbrk_r>
 800124e:	1c43      	adds	r3, r0, #1
 8001250:	d00c      	beq.n	800126c <_malloc_r+0x98>
 8001252:	1cc4      	adds	r4, r0, #3
 8001254:	f024 0403 	bic.w	r4, r4, #3
 8001258:	42a0      	cmp	r0, r4
 800125a:	d005      	beq.n	8001268 <_malloc_r+0x94>
 800125c:	1a21      	subs	r1, r4, r0
 800125e:	4630      	mov	r0, r6
 8001260:	f000 f842 	bl	80012e8 <_sbrk_r>
 8001264:	3001      	adds	r0, #1
 8001266:	d001      	beq.n	800126c <_malloc_r+0x98>
 8001268:	6025      	str	r5, [r4, #0]
 800126a:	e7d5      	b.n	8001218 <_malloc_r+0x44>
 800126c:	230c      	movs	r3, #12
 800126e:	4630      	mov	r0, r6
 8001270:	6033      	str	r3, [r6, #0]
 8001272:	f000 f9ad 	bl	80015d0 <__malloc_unlock>
 8001276:	2000      	movs	r0, #0
 8001278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800127a:	4630      	mov	r0, r6
 800127c:	f000 f834 	bl	80012e8 <_sbrk_r>
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	e7e0      	b.n	8001246 <_malloc_r+0x72>
 8001284:	20000200 	.word	0x20000200

08001288 <_iprintf_r>:
 8001288:	b40e      	push	{r1, r2, r3}
 800128a:	b510      	push	{r4, lr}
 800128c:	4604      	mov	r4, r0
 800128e:	b083      	sub	sp, #12
 8001290:	b108      	cbz	r0, 8001296 <_iprintf_r+0xe>
 8001292:	6983      	ldr	r3, [r0, #24]
 8001294:	b15b      	cbz	r3, 80012ae <_iprintf_r+0x26>
 8001296:	ab06      	add	r3, sp, #24
 8001298:	68a1      	ldr	r1, [r4, #8]
 800129a:	9a05      	ldr	r2, [sp, #20]
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	4620      	mov	r0, r4
 80012a0:	f000 f9dc 	bl	800165c <_vfiprintf_r>
 80012a4:	b003      	add	sp, #12
 80012a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012aa:	b003      	add	sp, #12
 80012ac:	4770      	bx	lr
 80012ae:	f000 f929 	bl	8001504 <__sinit>
 80012b2:	e7f0      	b.n	8001296 <_iprintf_r+0xe>

080012b4 <iprintf>:
 80012b4:	b40f      	push	{r0, r1, r2, r3}
 80012b6:	b510      	push	{r4, lr}
 80012b8:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <iprintf+0x30>)
 80012ba:	681c      	ldr	r4, [r3, #0]
 80012bc:	b082      	sub	sp, #8
 80012be:	b10c      	cbz	r4, 80012c4 <iprintf+0x10>
 80012c0:	69a3      	ldr	r3, [r4, #24]
 80012c2:	b15b      	cbz	r3, 80012dc <iprintf+0x28>
 80012c4:	ab05      	add	r3, sp, #20
 80012c6:	68a1      	ldr	r1, [r4, #8]
 80012c8:	9a04      	ldr	r2, [sp, #16]
 80012ca:	9301      	str	r3, [sp, #4]
 80012cc:	4620      	mov	r0, r4
 80012ce:	f000 f9c5 	bl	800165c <_vfiprintf_r>
 80012d2:	b002      	add	sp, #8
 80012d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012d8:	b004      	add	sp, #16
 80012da:	4770      	bx	lr
 80012dc:	4620      	mov	r0, r4
 80012de:	f000 f911 	bl	8001504 <__sinit>
 80012e2:	e7ef      	b.n	80012c4 <iprintf+0x10>
 80012e4:	20000004 	.word	0x20000004

080012e8 <_sbrk_r>:
 80012e8:	b538      	push	{r3, r4, r5, lr}
 80012ea:	4d07      	ldr	r5, [pc, #28]	; (8001308 <_sbrk_r+0x20>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	4604      	mov	r4, r0
 80012f0:	4608      	mov	r0, r1
 80012f2:	602a      	str	r2, [r5, #0]
 80012f4:	f7ff fd4a 	bl	8000d8c <_sbrk>
 80012f8:	1c43      	adds	r3, r0, #1
 80012fa:	d000      	beq.n	80012fe <_sbrk_r+0x16>
 80012fc:	bd38      	pop	{r3, r4, r5, pc}
 80012fe:	682b      	ldr	r3, [r5, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0fb      	beq.n	80012fc <_sbrk_r+0x14>
 8001304:	6023      	str	r3, [r4, #0]
 8001306:	bd38      	pop	{r3, r4, r5, pc}
 8001308:	20000208 	.word	0x20000208

0800130c <__fp_lock>:
 800130c:	2000      	movs	r0, #0
 800130e:	4770      	bx	lr

08001310 <_cleanup_r>:
 8001310:	4901      	ldr	r1, [pc, #4]	; (8001318 <_cleanup_r+0x8>)
 8001312:	f000 b937 	b.w	8001584 <_fwalk_reent>
 8001316:	bf00      	nop
 8001318:	08002099 	.word	0x08002099

0800131c <__fp_unlock>:
 800131c:	2000      	movs	r0, #0
 800131e:	4770      	bx	lr

08001320 <__sfmoreglue>:
 8001320:	b570      	push	{r4, r5, r6, lr}
 8001322:	2268      	movs	r2, #104	; 0x68
 8001324:	1e4d      	subs	r5, r1, #1
 8001326:	fb02 f505 	mul.w	r5, r2, r5
 800132a:	460e      	mov	r6, r1
 800132c:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001330:	f7ff ff50 	bl	80011d4 <_malloc_r>
 8001334:	4604      	mov	r4, r0
 8001336:	b140      	cbz	r0, 800134a <__sfmoreglue+0x2a>
 8001338:	2100      	movs	r1, #0
 800133a:	300c      	adds	r0, #12
 800133c:	e9c4 1600 	strd	r1, r6, [r4]
 8001340:	60a0      	str	r0, [r4, #8]
 8001342:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001346:	f7ff fe91 	bl	800106c <memset>
 800134a:	4620      	mov	r0, r4
 800134c:	bd70      	pop	{r4, r5, r6, pc}
 800134e:	bf00      	nop

08001350 <__sfp>:
 8001350:	4b27      	ldr	r3, [pc, #156]	; (80013f0 <__sfp+0xa0>)
 8001352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001356:	681e      	ldr	r6, [r3, #0]
 8001358:	69b3      	ldr	r3, [r6, #24]
 800135a:	4607      	mov	r7, r0
 800135c:	b353      	cbz	r3, 80013b4 <__sfp+0x64>
 800135e:	3648      	adds	r6, #72	; 0x48
 8001360:	f04f 0804 	mov.w	r8, #4
 8001364:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001368:	3b01      	subs	r3, #1
 800136a:	d504      	bpl.n	8001376 <__sfp+0x26>
 800136c:	e01e      	b.n	80013ac <__sfp+0x5c>
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8001374:	d01a      	beq.n	80013ac <__sfp+0x5c>
 8001376:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800137a:	3b01      	subs	r3, #1
 800137c:	2d00      	cmp	r5, #0
 800137e:	d1f6      	bne.n	800136e <__sfp+0x1e>
 8001380:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <__sfp+0xa4>)
 8001382:	6665      	str	r5, [r4, #100]	; 0x64
 8001384:	e9c4 5500 	strd	r5, r5, [r4]
 8001388:	e9c4 5302 	strd	r5, r3, [r4, #8]
 800138c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001390:	61a5      	str	r5, [r4, #24]
 8001392:	2208      	movs	r2, #8
 8001394:	4629      	mov	r1, r5
 8001396:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800139a:	f7ff fe67 	bl	800106c <memset>
 800139e:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80013a2:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80013a6:	4620      	mov	r0, r4
 80013a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013ac:	6835      	ldr	r5, [r6, #0]
 80013ae:	b12d      	cbz	r5, 80013bc <__sfp+0x6c>
 80013b0:	462e      	mov	r6, r5
 80013b2:	e7d7      	b.n	8001364 <__sfp+0x14>
 80013b4:	4630      	mov	r0, r6
 80013b6:	f000 f81f 	bl	80013f8 <__sinit.part.0>
 80013ba:	e7d0      	b.n	800135e <__sfp+0xe>
 80013bc:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80013c0:	4638      	mov	r0, r7
 80013c2:	f7ff ff07 	bl	80011d4 <_malloc_r>
 80013c6:	4604      	mov	r4, r0
 80013c8:	b168      	cbz	r0, 80013e6 <__sfp+0x96>
 80013ca:	6005      	str	r5, [r0, #0]
 80013cc:	f8c0 8004 	str.w	r8, [r0, #4]
 80013d0:	300c      	adds	r0, #12
 80013d2:	4629      	mov	r1, r5
 80013d4:	60a0      	str	r0, [r4, #8]
 80013d6:	4625      	mov	r5, r4
 80013d8:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80013dc:	f7ff fe46 	bl	800106c <memset>
 80013e0:	6034      	str	r4, [r6, #0]
 80013e2:	462e      	mov	r6, r5
 80013e4:	e7be      	b.n	8001364 <__sfp+0x14>
 80013e6:	230c      	movs	r3, #12
 80013e8:	6030      	str	r0, [r6, #0]
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	e7db      	b.n	80013a6 <__sfp+0x56>
 80013ee:	bf00      	nop
 80013f0:	0800b4f0 	.word	0x0800b4f0
 80013f4:	ffff0001 	.word	0xffff0001

080013f8 <__sinit.part.0>:
 80013f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013fc:	4b34      	ldr	r3, [pc, #208]	; (80014d0 <__sinit.part.0+0xd8>)
 80013fe:	4935      	ldr	r1, [pc, #212]	; (80014d4 <__sinit.part.0+0xdc>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	6281      	str	r1, [r0, #40]	; 0x28
 8001404:	4290      	cmp	r0, r2
 8001406:	f04f 0300 	mov.w	r3, #0
 800140a:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800140e:	6503      	str	r3, [r0, #80]	; 0x50
 8001410:	bf04      	itt	eq
 8001412:	2301      	moveq	r3, #1
 8001414:	6183      	streq	r3, [r0, #24]
 8001416:	4605      	mov	r5, r0
 8001418:	f7ff ff9a 	bl	8001350 <__sfp>
 800141c:	6068      	str	r0, [r5, #4]
 800141e:	4628      	mov	r0, r5
 8001420:	f7ff ff96 	bl	8001350 <__sfp>
 8001424:	60a8      	str	r0, [r5, #8]
 8001426:	4628      	mov	r0, r5
 8001428:	f7ff ff92 	bl	8001350 <__sfp>
 800142c:	686f      	ldr	r7, [r5, #4]
 800142e:	60e8      	str	r0, [r5, #12]
 8001430:	2400      	movs	r4, #0
 8001432:	2304      	movs	r3, #4
 8001434:	e9c7 4302 	strd	r4, r3, [r7, #8]
 8001438:	2208      	movs	r2, #8
 800143a:	4621      	mov	r1, r4
 800143c:	e9c7 4400 	strd	r4, r4, [r7]
 8001440:	e9c7 4404 	strd	r4, r4, [r7, #16]
 8001444:	667c      	str	r4, [r7, #100]	; 0x64
 8001446:	61bc      	str	r4, [r7, #24]
 8001448:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800144c:	f7ff fe0e 	bl	800106c <memset>
 8001450:	f8df b08c 	ldr.w	fp, [pc, #140]	; 80014e0 <__sinit.part.0+0xe8>
 8001454:	68ae      	ldr	r6, [r5, #8]
 8001456:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80014e4 <__sinit.part.0+0xec>
 800145a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80014e8 <__sinit.part.0+0xf0>
 800145e:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80014ec <__sinit.part.0+0xf4>
 8001462:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <__sinit.part.0+0xe0>)
 8001464:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
 8001468:	e9c7 7b08 	strd	r7, fp, [r7, #32]
 800146c:	f8c7 902c 	str.w	r9, [r7, #44]	; 0x2c
 8001470:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
 8001474:	2208      	movs	r2, #8
 8001476:	60f3      	str	r3, [r6, #12]
 8001478:	e9c6 4400 	strd	r4, r4, [r6]
 800147c:	e9c6 4404 	strd	r4, r4, [r6, #16]
 8001480:	6674      	str	r4, [r6, #100]	; 0x64
 8001482:	60b4      	str	r4, [r6, #8]
 8001484:	61b4      	str	r4, [r6, #24]
 8001486:	4621      	mov	r1, r4
 8001488:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 800148c:	f7ff fdee 	bl	800106c <memset>
 8001490:	e9c6 6b08 	strd	r6, fp, [r6, #32]
 8001494:	e9c6 a90a 	strd	sl, r9, [r6, #40]	; 0x28
 8001498:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
 800149c:	68ee      	ldr	r6, [r5, #12]
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <__sinit.part.0+0xe4>)
 80014a0:	60f3      	str	r3, [r6, #12]
 80014a2:	e9c6 4400 	strd	r4, r4, [r6]
 80014a6:	e9c6 4404 	strd	r4, r4, [r6, #16]
 80014aa:	6674      	str	r4, [r6, #100]	; 0x64
 80014ac:	60b4      	str	r4, [r6, #8]
 80014ae:	61b4      	str	r4, [r6, #24]
 80014b0:	4621      	mov	r1, r4
 80014b2:	2208      	movs	r2, #8
 80014b4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 80014b8:	f7ff fdd8 	bl	800106c <memset>
 80014bc:	2301      	movs	r3, #1
 80014be:	e9c6 6b08 	strd	r6, fp, [r6, #32]
 80014c2:	e9c6 980b 	strd	r9, r8, [r6, #44]	; 0x2c
 80014c6:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
 80014ca:	61ab      	str	r3, [r5, #24]
 80014cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014d0:	0800b4f0 	.word	0x0800b4f0
 80014d4:	08001311 	.word	0x08001311
 80014d8:	00010009 	.word	0x00010009
 80014dc:	00020012 	.word	0x00020012
 80014e0:	08001cd9 	.word	0x08001cd9
 80014e4:	08001d01 	.word	0x08001d01
 80014e8:	08001d41 	.word	0x08001d41
 80014ec:	08001d61 	.word	0x08001d61

080014f0 <_cleanup>:
 80014f0:	4b02      	ldr	r3, [pc, #8]	; (80014fc <_cleanup+0xc>)
 80014f2:	4903      	ldr	r1, [pc, #12]	; (8001500 <_cleanup+0x10>)
 80014f4:	6818      	ldr	r0, [r3, #0]
 80014f6:	f000 b845 	b.w	8001584 <_fwalk_reent>
 80014fa:	bf00      	nop
 80014fc:	0800b4f0 	.word	0x0800b4f0
 8001500:	08002099 	.word	0x08002099

08001504 <__sinit>:
 8001504:	6983      	ldr	r3, [r0, #24]
 8001506:	b903      	cbnz	r3, 800150a <__sinit+0x6>
 8001508:	e776      	b.n	80013f8 <__sinit.part.0>
 800150a:	4770      	bx	lr

0800150c <__sfp_lock_acquire>:
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop

08001510 <__sfp_lock_release>:
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop

08001514 <__sinit_lock_acquire>:
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop

08001518 <__sinit_lock_release>:
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop

0800151c <__fp_lock_all>:
 800151c:	4b02      	ldr	r3, [pc, #8]	; (8001528 <__fp_lock_all+0xc>)
 800151e:	4903      	ldr	r1, [pc, #12]	; (800152c <__fp_lock_all+0x10>)
 8001520:	6818      	ldr	r0, [r3, #0]
 8001522:	f000 b80f 	b.w	8001544 <_fwalk>
 8001526:	bf00      	nop
 8001528:	20000004 	.word	0x20000004
 800152c:	0800130d 	.word	0x0800130d

08001530 <__fp_unlock_all>:
 8001530:	4b02      	ldr	r3, [pc, #8]	; (800153c <__fp_unlock_all+0xc>)
 8001532:	4903      	ldr	r1, [pc, #12]	; (8001540 <__fp_unlock_all+0x10>)
 8001534:	6818      	ldr	r0, [r3, #0]
 8001536:	f000 b805 	b.w	8001544 <_fwalk>
 800153a:	bf00      	nop
 800153c:	20000004 	.word	0x20000004
 8001540:	0800131d 	.word	0x0800131d

08001544 <_fwalk>:
 8001544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001548:	4688      	mov	r8, r1
 800154a:	f100 0748 	add.w	r7, r0, #72	; 0x48
 800154e:	2600      	movs	r6, #0
 8001550:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 8001554:	3d01      	subs	r5, #1
 8001556:	d40f      	bmi.n	8001578 <_fwalk+0x34>
 8001558:	89a3      	ldrh	r3, [r4, #12]
 800155a:	2b01      	cmp	r3, #1
 800155c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8001560:	d906      	bls.n	8001570 <_fwalk+0x2c>
 8001562:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8001566:	3301      	adds	r3, #1
 8001568:	4620      	mov	r0, r4
 800156a:	d001      	beq.n	8001570 <_fwalk+0x2c>
 800156c:	47c0      	blx	r8
 800156e:	4306      	orrs	r6, r0
 8001570:	1c6b      	adds	r3, r5, #1
 8001572:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8001576:	d1ef      	bne.n	8001558 <_fwalk+0x14>
 8001578:	683f      	ldr	r7, [r7, #0]
 800157a:	2f00      	cmp	r7, #0
 800157c:	d1e8      	bne.n	8001550 <_fwalk+0xc>
 800157e:	4630      	mov	r0, r6
 8001580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001584 <_fwalk_reent>:
 8001584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001588:	4607      	mov	r7, r0
 800158a:	4688      	mov	r8, r1
 800158c:	f100 0648 	add.w	r6, r0, #72	; 0x48
 8001590:	f04f 0900 	mov.w	r9, #0
 8001594:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 8001598:	3d01      	subs	r5, #1
 800159a:	d411      	bmi.n	80015c0 <_fwalk_reent+0x3c>
 800159c:	89a3      	ldrh	r3, [r4, #12]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80015a4:	d908      	bls.n	80015b8 <_fwalk_reent+0x34>
 80015a6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80015aa:	3301      	adds	r3, #1
 80015ac:	4621      	mov	r1, r4
 80015ae:	d003      	beq.n	80015b8 <_fwalk_reent+0x34>
 80015b0:	4638      	mov	r0, r7
 80015b2:	47c0      	blx	r8
 80015b4:	ea49 0900 	orr.w	r9, r9, r0
 80015b8:	1c6b      	adds	r3, r5, #1
 80015ba:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80015be:	d1ed      	bne.n	800159c <_fwalk_reent+0x18>
 80015c0:	6836      	ldr	r6, [r6, #0]
 80015c2:	2e00      	cmp	r6, #0
 80015c4:	d1e6      	bne.n	8001594 <_fwalk_reent+0x10>
 80015c6:	4648      	mov	r0, r9
 80015c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080015cc <__malloc_lock>:
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop

080015d0 <__malloc_unlock>:
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop

080015d4 <__sfputc_r>:
 80015d4:	6893      	ldr	r3, [r2, #8]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	2b00      	cmp	r3, #0
 80015da:	6093      	str	r3, [r2, #8]
 80015dc:	da11      	bge.n	8001602 <__sfputc_r+0x2e>
 80015de:	b410      	push	{r4}
 80015e0:	6994      	ldr	r4, [r2, #24]
 80015e2:	42a3      	cmp	r3, r4
 80015e4:	db09      	blt.n	80015fa <__sfputc_r+0x26>
 80015e6:	290a      	cmp	r1, #10
 80015e8:	d007      	beq.n	80015fa <__sfputc_r+0x26>
 80015ea:	6813      	ldr	r3, [r2, #0]
 80015ec:	1c58      	adds	r0, r3, #1
 80015ee:	6010      	str	r0, [r2, #0]
 80015f0:	7019      	strb	r1, [r3, #0]
 80015f2:	4608      	mov	r0, r1
 80015f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80015fe:	f000 bbb3 	b.w	8001d68 <__swbuf_r>
 8001602:	6813      	ldr	r3, [r2, #0]
 8001604:	1c58      	adds	r0, r3, #1
 8001606:	6010      	str	r0, [r2, #0]
 8001608:	7019      	strb	r1, [r3, #0]
 800160a:	4608      	mov	r0, r1
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop

08001610 <__sfputs_r>:
 8001610:	b19b      	cbz	r3, 800163a <__sfputs_r+0x2a>
 8001612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001614:	4413      	add	r3, r2
 8001616:	4606      	mov	r6, r0
 8001618:	460f      	mov	r7, r1
 800161a:	1e54      	subs	r4, r2, #1
 800161c:	1e5d      	subs	r5, r3, #1
 800161e:	e001      	b.n	8001624 <__sfputs_r+0x14>
 8001620:	42ac      	cmp	r4, r5
 8001622:	d008      	beq.n	8001636 <__sfputs_r+0x26>
 8001624:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8001628:	463a      	mov	r2, r7
 800162a:	4630      	mov	r0, r6
 800162c:	f7ff ffd2 	bl	80015d4 <__sfputc_r>
 8001630:	1c43      	adds	r3, r0, #1
 8001632:	d1f5      	bne.n	8001620 <__sfputs_r+0x10>
 8001634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001636:	2000      	movs	r0, #0
 8001638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800163a:	2000      	movs	r0, #0
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop

08001640 <__sprint_r>:
 8001640:	6893      	ldr	r3, [r2, #8]
 8001642:	b510      	push	{r4, lr}
 8001644:	4614      	mov	r4, r2
 8001646:	b913      	cbnz	r3, 800164e <__sprint_r+0xe>
 8001648:	6053      	str	r3, [r2, #4]
 800164a:	4618      	mov	r0, r3
 800164c:	bd10      	pop	{r4, pc}
 800164e:	f000 fd8d 	bl	800216c <__sfvwrite_r>
 8001652:	2300      	movs	r3, #0
 8001654:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8001658:	bd10      	pop	{r4, pc}
 800165a:	bf00      	nop

0800165c <_vfiprintf_r>:
 800165c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001660:	4688      	mov	r8, r1
 8001662:	b09f      	sub	sp, #124	; 0x7c
 8001664:	4615      	mov	r5, r2
 8001666:	461c      	mov	r4, r3
 8001668:	4681      	mov	r9, r0
 800166a:	b118      	cbz	r0, 8001674 <_vfiprintf_r+0x18>
 800166c:	6983      	ldr	r3, [r0, #24]
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 80a2 	beq.w	80017b8 <_vfiprintf_r+0x15c>
 8001674:	4b92      	ldr	r3, [pc, #584]	; (80018c0 <_vfiprintf_r+0x264>)
 8001676:	4598      	cmp	r8, r3
 8001678:	f000 80a4 	beq.w	80017c4 <_vfiprintf_r+0x168>
 800167c:	4b91      	ldr	r3, [pc, #580]	; (80018c4 <_vfiprintf_r+0x268>)
 800167e:	4598      	cmp	r8, r3
 8001680:	f000 80b1 	beq.w	80017e6 <_vfiprintf_r+0x18a>
 8001684:	4b90      	ldr	r3, [pc, #576]	; (80018c8 <_vfiprintf_r+0x26c>)
 8001686:	4598      	cmp	r8, r3
 8001688:	bf08      	it	eq
 800168a:	f8d9 800c 	ldreq.w	r8, [r9, #12]
 800168e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8001692:	0718      	lsls	r0, r3, #28
 8001694:	f140 809d 	bpl.w	80017d2 <_vfiprintf_r+0x176>
 8001698:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800169c:	2b00      	cmp	r3, #0
 800169e:	f000 8098 	beq.w	80017d2 <_vfiprintf_r+0x176>
 80016a2:	2300      	movs	r3, #0
 80016a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80016a6:	7829      	ldrb	r1, [r5, #0]
 80016a8:	4e88      	ldr	r6, [pc, #544]	; (80018cc <_vfiprintf_r+0x270>)
 80016aa:	9405      	str	r4, [sp, #20]
 80016ac:	2320      	movs	r3, #32
 80016ae:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 80016b2:	2330      	movs	r3, #48	; 0x30
 80016b4:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 80016b8:	2701      	movs	r7, #1
 80016ba:	2900      	cmp	r1, #0
 80016bc:	d074      	beq.n	80017a8 <_vfiprintf_r+0x14c>
 80016be:	462c      	mov	r4, r5
 80016c0:	460b      	mov	r3, r1
 80016c2:	e004      	b.n	80016ce <_vfiprintf_r+0x72>
 80016c4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 808f 	beq.w	80017ec <_vfiprintf_r+0x190>
 80016ce:	2b25      	cmp	r3, #37	; 0x25
 80016d0:	d1f8      	bne.n	80016c4 <_vfiprintf_r+0x68>
 80016d2:	ebb4 0b05 	subs.w	fp, r4, r5
 80016d6:	f040 808c 	bne.w	80017f2 <_vfiprintf_r+0x196>
 80016da:	7823      	ldrb	r3, [r4, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d063      	beq.n	80017a8 <_vfiprintf_r+0x14c>
 80016e0:	2300      	movs	r3, #0
 80016e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016e6:	e9cd 2307 	strd	r2, r3, [sp, #28]
 80016ea:	9306      	str	r3, [sp, #24]
 80016ec:	9309      	str	r3, [sp, #36]	; 0x24
 80016ee:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 80016f2:	931c      	str	r3, [sp, #112]	; 0x70
 80016f4:	3401      	adds	r4, #1
 80016f6:	e004      	b.n	8001702 <_vfiprintf_r+0xa6>
 80016f8:	9a06      	ldr	r2, [sp, #24]
 80016fa:	fa07 f303 	lsl.w	r3, r7, r3
 80016fe:	4313      	orrs	r3, r2
 8001700:	9306      	str	r3, [sp, #24]
 8001702:	4625      	mov	r5, r4
 8001704:	2205      	movs	r2, #5
 8001706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800170a:	4630      	mov	r0, r6
 800170c:	f000 ff50 	bl	80025b0 <memchr>
 8001710:	1b83      	subs	r3, r0, r6
 8001712:	2800      	cmp	r0, #0
 8001714:	d1f0      	bne.n	80016f8 <_vfiprintf_r+0x9c>
 8001716:	9b06      	ldr	r3, [sp, #24]
 8001718:	06d9      	lsls	r1, r3, #27
 800171a:	bf44      	itt	mi
 800171c:	2220      	movmi	r2, #32
 800171e:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 8001722:	7829      	ldrb	r1, [r5, #0]
 8001724:	071a      	lsls	r2, r3, #28
 8001726:	bf44      	itt	mi
 8001728:	222b      	movmi	r2, #43	; 0x2b
 800172a:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 800172e:	292a      	cmp	r1, #42	; 0x2a
 8001730:	d170      	bne.n	8001814 <_vfiprintf_r+0x1b8>
 8001732:	9a05      	ldr	r2, [sp, #20]
 8001734:	6811      	ldr	r1, [r2, #0]
 8001736:	3204      	adds	r2, #4
 8001738:	2900      	cmp	r1, #0
 800173a:	9205      	str	r2, [sp, #20]
 800173c:	f2c0 809b 	blt.w	8001876 <_vfiprintf_r+0x21a>
 8001740:	9109      	str	r1, [sp, #36]	; 0x24
 8001742:	7869      	ldrb	r1, [r5, #1]
 8001744:	3501      	adds	r5, #1
 8001746:	292e      	cmp	r1, #46	; 0x2e
 8001748:	d076      	beq.n	8001838 <_vfiprintf_r+0x1dc>
 800174a:	4c61      	ldr	r4, [pc, #388]	; (80018d0 <_vfiprintf_r+0x274>)
 800174c:	2203      	movs	r2, #3
 800174e:	4620      	mov	r0, r4
 8001750:	f000 ff2e 	bl	80025b0 <memchr>
 8001754:	b138      	cbz	r0, 8001766 <_vfiprintf_r+0x10a>
 8001756:	9b06      	ldr	r3, [sp, #24]
 8001758:	1b00      	subs	r0, r0, r4
 800175a:	2440      	movs	r4, #64	; 0x40
 800175c:	fa04 f000 	lsl.w	r0, r4, r0
 8001760:	4303      	orrs	r3, r0
 8001762:	9306      	str	r3, [sp, #24]
 8001764:	3501      	adds	r5, #1
 8001766:	f815 1b01 	ldrb.w	r1, [r5], #1
 800176a:	485a      	ldr	r0, [pc, #360]	; (80018d4 <_vfiprintf_r+0x278>)
 800176c:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 8001770:	2206      	movs	r2, #6
 8001772:	f000 ff1d 	bl	80025b0 <memchr>
 8001776:	2800      	cmp	r0, #0
 8001778:	f000 8083 	beq.w	8001882 <_vfiprintf_r+0x226>
 800177c:	4b56      	ldr	r3, [pc, #344]	; (80018d8 <_vfiprintf_r+0x27c>)
 800177e:	2b00      	cmp	r3, #0
 8001780:	d06d      	beq.n	800185e <_vfiprintf_r+0x202>
 8001782:	aa05      	add	r2, sp, #20
 8001784:	9200      	str	r2, [sp, #0]
 8001786:	4b55      	ldr	r3, [pc, #340]	; (80018dc <_vfiprintf_r+0x280>)
 8001788:	4642      	mov	r2, r8
 800178a:	a906      	add	r1, sp, #24
 800178c:	4648      	mov	r0, r9
 800178e:	f3af 8000 	nop.w
 8001792:	9003      	str	r0, [sp, #12]
 8001794:	9b03      	ldr	r3, [sp, #12]
 8001796:	3301      	adds	r3, #1
 8001798:	d006      	beq.n	80017a8 <_vfiprintf_r+0x14c>
 800179a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800179c:	9a03      	ldr	r2, [sp, #12]
 800179e:	7829      	ldrb	r1, [r5, #0]
 80017a0:	4413      	add	r3, r2
 80017a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80017a4:	2900      	cmp	r1, #0
 80017a6:	d18a      	bne.n	80016be <_vfiprintf_r+0x62>
 80017a8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80017ac:	065b      	lsls	r3, r3, #25
 80017ae:	d417      	bmi.n	80017e0 <_vfiprintf_r+0x184>
 80017b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80017b2:	b01f      	add	sp, #124	; 0x7c
 80017b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017b8:	f7ff fea4 	bl	8001504 <__sinit>
 80017bc:	4b40      	ldr	r3, [pc, #256]	; (80018c0 <_vfiprintf_r+0x264>)
 80017be:	4598      	cmp	r8, r3
 80017c0:	f47f af5c 	bne.w	800167c <_vfiprintf_r+0x20>
 80017c4:	f8d9 8004 	ldr.w	r8, [r9, #4]
 80017c8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80017cc:	0718      	lsls	r0, r3, #28
 80017ce:	f53f af63 	bmi.w	8001698 <_vfiprintf_r+0x3c>
 80017d2:	4641      	mov	r1, r8
 80017d4:	4648      	mov	r0, r9
 80017d6:	f000 fb41 	bl	8001e5c <__swsetup_r>
 80017da:	2800      	cmp	r0, #0
 80017dc:	f43f af61 	beq.w	80016a2 <_vfiprintf_r+0x46>
 80017e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017e4:	e7e5      	b.n	80017b2 <_vfiprintf_r+0x156>
 80017e6:	f8d9 8008 	ldr.w	r8, [r9, #8]
 80017ea:	e750      	b.n	800168e <_vfiprintf_r+0x32>
 80017ec:	ebb4 0b05 	subs.w	fp, r4, r5
 80017f0:	d0da      	beq.n	80017a8 <_vfiprintf_r+0x14c>
 80017f2:	46aa      	mov	sl, r5
 80017f4:	f1c5 0501 	rsb	r5, r5, #1
 80017f8:	e003      	b.n	8001802 <_vfiprintf_r+0x1a6>
 80017fa:	4593      	cmp	fp, r2
 80017fc:	d936      	bls.n	800186c <_vfiprintf_r+0x210>
 80017fe:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8001802:	4642      	mov	r2, r8
 8001804:	4648      	mov	r0, r9
 8001806:	f7ff fee5 	bl	80015d4 <__sfputc_r>
 800180a:	3001      	adds	r0, #1
 800180c:	eb05 020a 	add.w	r2, r5, sl
 8001810:	d1f3      	bne.n	80017fa <_vfiprintf_r+0x19e>
 8001812:	e7c9      	b.n	80017a8 <_vfiprintf_r+0x14c>
 8001814:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8001818:	2a09      	cmp	r2, #9
 800181a:	d894      	bhi.n	8001746 <_vfiprintf_r+0xea>
 800181c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800181e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8001822:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001826:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800182a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800182e:	2a09      	cmp	r2, #9
 8001830:	d9f5      	bls.n	800181e <_vfiprintf_r+0x1c2>
 8001832:	292e      	cmp	r1, #46	; 0x2e
 8001834:	9309      	str	r3, [sp, #36]	; 0x24
 8001836:	d188      	bne.n	800174a <_vfiprintf_r+0xee>
 8001838:	7869      	ldrb	r1, [r5, #1]
 800183a:	292a      	cmp	r1, #42	; 0x2a
 800183c:	d12b      	bne.n	8001896 <_vfiprintf_r+0x23a>
 800183e:	9b05      	ldr	r3, [sp, #20]
 8001840:	78a9      	ldrb	r1, [r5, #2]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	9207      	str	r2, [sp, #28]
 8001846:	3304      	adds	r3, #4
 8001848:	2a00      	cmp	r2, #0
 800184a:	f105 0002 	add.w	r0, r5, #2
 800184e:	9305      	str	r3, [sp, #20]
 8001850:	bfb8      	it	lt
 8001852:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001856:	4605      	mov	r5, r0
 8001858:	bfb8      	it	lt
 800185a:	9307      	strlt	r3, [sp, #28]
 800185c:	e775      	b.n	800174a <_vfiprintf_r+0xee>
 800185e:	9b05      	ldr	r3, [sp, #20]
 8001860:	3307      	adds	r3, #7
 8001862:	f023 0307 	bic.w	r3, r3, #7
 8001866:	3308      	adds	r3, #8
 8001868:	9305      	str	r3, [sp, #20]
 800186a:	e796      	b.n	800179a <_vfiprintf_r+0x13e>
 800186c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800186e:	7823      	ldrb	r3, [r4, #0]
 8001870:	445a      	add	r2, fp
 8001872:	920b      	str	r2, [sp, #44]	; 0x2c
 8001874:	e732      	b.n	80016dc <_vfiprintf_r+0x80>
 8001876:	4249      	negs	r1, r1
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	9109      	str	r1, [sp, #36]	; 0x24
 800187e:	9306      	str	r3, [sp, #24]
 8001880:	e75f      	b.n	8001742 <_vfiprintf_r+0xe6>
 8001882:	aa05      	add	r2, sp, #20
 8001884:	9200      	str	r2, [sp, #0]
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <_vfiprintf_r+0x280>)
 8001888:	4642      	mov	r2, r8
 800188a:	a906      	add	r1, sp, #24
 800188c:	4648      	mov	r0, r9
 800188e:	f000 f8cb 	bl	8001a28 <_printf_i>
 8001892:	9003      	str	r0, [sp, #12]
 8001894:	e77e      	b.n	8001794 <_vfiprintf_r+0x138>
 8001896:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800189a:	2300      	movs	r3, #0
 800189c:	2a09      	cmp	r2, #9
 800189e:	9307      	str	r3, [sp, #28]
 80018a0:	f105 0501 	add.w	r5, r5, #1
 80018a4:	f63f af51 	bhi.w	800174a <_vfiprintf_r+0xee>
 80018a8:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80018ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80018b0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80018b4:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80018b8:	2a09      	cmp	r2, #9
 80018ba:	d9f5      	bls.n	80018a8 <_vfiprintf_r+0x24c>
 80018bc:	9307      	str	r3, [sp, #28]
 80018be:	e744      	b.n	800174a <_vfiprintf_r+0xee>
 80018c0:	0800b534 	.word	0x0800b534
 80018c4:	0800b514 	.word	0x0800b514
 80018c8:	0800b4f4 	.word	0x0800b4f4
 80018cc:	0800b55c 	.word	0x0800b55c
 80018d0:	0800b564 	.word	0x0800b564
 80018d4:	0800b568 	.word	0x0800b568
 80018d8:	00000000 	.word	0x00000000
 80018dc:	08001611 	.word	0x08001611

080018e0 <vfiprintf>:
 80018e0:	b410      	push	{r4}
 80018e2:	4c05      	ldr	r4, [pc, #20]	; (80018f8 <vfiprintf+0x18>)
 80018e4:	4684      	mov	ip, r0
 80018e6:	4613      	mov	r3, r2
 80018e8:	6820      	ldr	r0, [r4, #0]
 80018ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018ee:	460a      	mov	r2, r1
 80018f0:	4661      	mov	r1, ip
 80018f2:	f7ff beb3 	b.w	800165c <_vfiprintf_r>
 80018f6:	bf00      	nop
 80018f8:	20000004 	.word	0x20000004

080018fc <_printf_common>:
 80018fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001900:	4692      	mov	sl, r2
 8001902:	461f      	mov	r7, r3
 8001904:	690a      	ldr	r2, [r1, #16]
 8001906:	688b      	ldr	r3, [r1, #8]
 8001908:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800190c:	429a      	cmp	r2, r3
 800190e:	bfb8      	it	lt
 8001910:	461a      	movlt	r2, r3
 8001912:	f8ca 2000 	str.w	r2, [sl]
 8001916:	f891 3043 	ldrb.w	r3, [r1, #67]	; 0x43
 800191a:	460c      	mov	r4, r1
 800191c:	4606      	mov	r6, r0
 800191e:	b113      	cbz	r3, 8001926 <_printf_common+0x2a>
 8001920:	3201      	adds	r2, #1
 8001922:	f8ca 2000 	str.w	r2, [sl]
 8001926:	6822      	ldr	r2, [r4, #0]
 8001928:	0691      	lsls	r1, r2, #26
 800192a:	d55d      	bpl.n	80019e8 <_printf_common+0xec>
 800192c:	f8da 3000 	ldr.w	r3, [sl]
 8001930:	3302      	adds	r3, #2
 8001932:	f8ca 3000 	str.w	r3, [sl]
 8001936:	6822      	ldr	r2, [r4, #0]
 8001938:	f012 0f06 	tst.w	r2, #6
 800193c:	4611      	mov	r1, r2
 800193e:	d11e      	bne.n	800197e <_printf_common+0x82>
 8001940:	68e1      	ldr	r1, [r4, #12]
 8001942:	1acb      	subs	r3, r1, r3
 8001944:	2b00      	cmp	r3, #0
 8001946:	bfd8      	it	le
 8001948:	4611      	movle	r1, r2
 800194a:	dd18      	ble.n	800197e <_printf_common+0x82>
 800194c:	f104 0b19 	add.w	fp, r4, #25
 8001950:	f04f 0800 	mov.w	r8, #0
 8001954:	e005      	b.n	8001962 <_printf_common+0x66>
 8001956:	68e5      	ldr	r5, [r4, #12]
 8001958:	f8da 3000 	ldr.w	r3, [sl]
 800195c:	1aed      	subs	r5, r5, r3
 800195e:	4545      	cmp	r5, r8
 8001960:	dd0c      	ble.n	800197c <_printf_common+0x80>
 8001962:	2301      	movs	r3, #1
 8001964:	465a      	mov	r2, fp
 8001966:	4639      	mov	r1, r7
 8001968:	4630      	mov	r0, r6
 800196a:	47c8      	blx	r9
 800196c:	3001      	adds	r0, #1
 800196e:	f108 0801 	add.w	r8, r8, #1
 8001972:	d1f0      	bne.n	8001956 <_printf_common+0x5a>
 8001974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001978:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800197c:	6821      	ldr	r1, [r4, #0]
 800197e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001982:	3b00      	subs	r3, #0
 8001984:	bf18      	it	ne
 8001986:	2301      	movne	r3, #1
 8001988:	068a      	lsls	r2, r1, #26
 800198a:	d50a      	bpl.n	80019a2 <_printf_common+0xa6>
 800198c:	18e1      	adds	r1, r4, r3
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	2030      	movs	r0, #48	; 0x30
 8001992:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001996:	4422      	add	r2, r4
 8001998:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800199c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80019a0:	3302      	adds	r3, #2
 80019a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80019a6:	4639      	mov	r1, r7
 80019a8:	4630      	mov	r0, r6
 80019aa:	47c8      	blx	r9
 80019ac:	3001      	adds	r0, #1
 80019ae:	d0e1      	beq.n	8001974 <_printf_common+0x78>
 80019b0:	6823      	ldr	r3, [r4, #0]
 80019b2:	f003 0306 	and.w	r3, r3, #6
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	d01d      	beq.n	80019f6 <_printf_common+0xfa>
 80019ba:	68a3      	ldr	r3, [r4, #8]
 80019bc:	6922      	ldr	r2, [r4, #16]
 80019be:	4293      	cmp	r3, r2
 80019c0:	dd25      	ble.n	8001a0e <_printf_common+0x112>
 80019c2:	f04f 0800 	mov.w	r8, #0
 80019c6:	1a9b      	subs	r3, r3, r2
 80019c8:	4498      	add	r8, r3
 80019ca:	341a      	adds	r4, #26
 80019cc:	2500      	movs	r5, #0
 80019ce:	e001      	b.n	80019d4 <_printf_common+0xd8>
 80019d0:	4545      	cmp	r5, r8
 80019d2:	da1c      	bge.n	8001a0e <_printf_common+0x112>
 80019d4:	2301      	movs	r3, #1
 80019d6:	4622      	mov	r2, r4
 80019d8:	4639      	mov	r1, r7
 80019da:	4630      	mov	r0, r6
 80019dc:	47c8      	blx	r9
 80019de:	3001      	adds	r0, #1
 80019e0:	f105 0501 	add.w	r5, r5, #1
 80019e4:	d1f4      	bne.n	80019d0 <_printf_common+0xd4>
 80019e6:	e7c5      	b.n	8001974 <_printf_common+0x78>
 80019e8:	f012 0f06 	tst.w	r2, #6
 80019ec:	d012      	beq.n	8001a14 <_printf_common+0x118>
 80019ee:	3b00      	subs	r3, #0
 80019f0:	bf18      	it	ne
 80019f2:	2301      	movne	r3, #1
 80019f4:	e7d5      	b.n	80019a2 <_printf_common+0xa6>
 80019f6:	f8da 3000 	ldr.w	r3, [sl]
 80019fa:	68e1      	ldr	r1, [r4, #12]
 80019fc:	6922      	ldr	r2, [r4, #16]
 80019fe:	1ac9      	subs	r1, r1, r3
 8001a00:	68a3      	ldr	r3, [r4, #8]
 8001a02:	4293      	cmp	r3, r2
 8001a04:	ea21 78e1 	bic.w	r8, r1, r1, asr #31
 8001a08:	dcdd      	bgt.n	80019c6 <_printf_common+0xca>
 8001a0a:	2900      	cmp	r1, #0
 8001a0c:	dcdd      	bgt.n	80019ca <_printf_common+0xce>
 8001a0e:	2000      	movs	r0, #0
 8001a10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a14:	68e1      	ldr	r1, [r4, #12]
 8001a16:	f8da 3000 	ldr.w	r3, [sl]
 8001a1a:	1acb      	subs	r3, r1, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	bfd8      	it	le
 8001a20:	4611      	movle	r1, r2
 8001a22:	dc93      	bgt.n	800194c <_printf_common+0x50>
 8001a24:	e7ab      	b.n	800197e <_printf_common+0x82>
 8001a26:	bf00      	nop

08001a28 <_printf_i>:
 8001a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a2c:	460c      	mov	r4, r1
 8001a2e:	b084      	sub	sp, #16
 8001a30:	4690      	mov	r8, r2
 8001a32:	7e22      	ldrb	r2, [r4, #24]
 8001a34:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001a36:	4607      	mov	r7, r0
 8001a38:	4699      	mov	r9, r3
 8001a3a:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8001a3e:	2a00      	cmp	r2, #0
 8001a40:	d033      	beq.n	8001aaa <_printf_i+0x82>
 8001a42:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8001a46:	b2dd      	uxtb	r5, r3
 8001a48:	2d20      	cmp	r5, #32
 8001a4a:	d867      	bhi.n	8001b1c <_printf_i+0xf4>
 8001a4c:	2b20      	cmp	r3, #32
 8001a4e:	d865      	bhi.n	8001b1c <_printf_i+0xf4>
 8001a50:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001a54:	006400de 	.word	0x006400de
 8001a58:	00640064 	.word	0x00640064
 8001a5c:	00640064 	.word	0x00640064
 8001a60:	00640064 	.word	0x00640064
 8001a64:	00640064 	.word	0x00640064
 8001a68:	00a30064 	.word	0x00a30064
 8001a6c:	0064006e 	.word	0x0064006e
 8001a70:	00640064 	.word	0x00640064
 8001a74:	006e0064 	.word	0x006e0064
 8001a78:	00640064 	.word	0x00640064
 8001a7c:	00640064 	.word	0x00640064
 8001a80:	007f0021 	.word	0x007f0021
 8001a84:	006400c0 	.word	0x006400c0
 8001a88:	00ae0064 	.word	0x00ae0064
 8001a8c:	007f0064 	.word	0x007f0064
 8001a90:	00640064 	.word	0x00640064
 8001a94:	00e5      	.short	0x00e5
 8001a96:	6823      	ldr	r3, [r4, #0]
 8001a98:	061a      	lsls	r2, r3, #24
 8001a9a:	f140 8104 	bpl.w	8001ca6 <_printf_i+0x27e>
 8001a9e:	680b      	ldr	r3, [r1, #0]
 8001aa0:	6962      	ldr	r2, [r4, #20]
 8001aa2:	1d1d      	adds	r5, r3, #4
 8001aa4:	600d      	str	r5, [r1, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	4682      	mov	sl, r0
 8001aae:	6123      	str	r3, [r4, #16]
 8001ab0:	f8cd 9000 	str.w	r9, [sp]
 8001ab4:	4643      	mov	r3, r8
 8001ab6:	aa03      	add	r2, sp, #12
 8001ab8:	4621      	mov	r1, r4
 8001aba:	4638      	mov	r0, r7
 8001abc:	f7ff ff1e 	bl	80018fc <_printf_common>
 8001ac0:	3001      	adds	r0, #1
 8001ac2:	d020      	beq.n	8001b06 <_printf_i+0xde>
 8001ac4:	6923      	ldr	r3, [r4, #16]
 8001ac6:	4652      	mov	r2, sl
 8001ac8:	4641      	mov	r1, r8
 8001aca:	4638      	mov	r0, r7
 8001acc:	47c8      	blx	r9
 8001ace:	3001      	adds	r0, #1
 8001ad0:	d019      	beq.n	8001b06 <_printf_i+0xde>
 8001ad2:	6823      	ldr	r3, [r4, #0]
 8001ad4:	68e0      	ldr	r0, [r4, #12]
 8001ad6:	9e03      	ldr	r6, [sp, #12]
 8001ad8:	079b      	lsls	r3, r3, #30
 8001ada:	d519      	bpl.n	8001b10 <_printf_i+0xe8>
 8001adc:	1b83      	subs	r3, r0, r6
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	dd16      	ble.n	8001b10 <_printf_i+0xe8>
 8001ae2:	f104 0a19 	add.w	sl, r4, #25
 8001ae6:	2500      	movs	r5, #0
 8001ae8:	e004      	b.n	8001af4 <_printf_i+0xcc>
 8001aea:	68e0      	ldr	r0, [r4, #12]
 8001aec:	9e03      	ldr	r6, [sp, #12]
 8001aee:	1b83      	subs	r3, r0, r6
 8001af0:	42ab      	cmp	r3, r5
 8001af2:	dd0d      	ble.n	8001b10 <_printf_i+0xe8>
 8001af4:	2301      	movs	r3, #1
 8001af6:	4652      	mov	r2, sl
 8001af8:	4641      	mov	r1, r8
 8001afa:	4638      	mov	r0, r7
 8001afc:	47c8      	blx	r9
 8001afe:	3001      	adds	r0, #1
 8001b00:	f105 0501 	add.w	r5, r5, #1
 8001b04:	d1f1      	bne.n	8001aea <_printf_i+0xc2>
 8001b06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b0a:	b004      	add	sp, #16
 8001b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b10:	42b0      	cmp	r0, r6
 8001b12:	bfb8      	it	lt
 8001b14:	4630      	movlt	r0, r6
 8001b16:	b004      	add	sp, #16
 8001b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001b22:	6123      	str	r3, [r4, #16]
 8001b24:	f104 0a42 	add.w	sl, r4, #66	; 0x42
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b2e:	e7bf      	b.n	8001ab0 <_printf_i+0x88>
 8001b30:	6823      	ldr	r3, [r4, #0]
 8001b32:	061a      	lsls	r2, r3, #24
 8001b34:	d402      	bmi.n	8001b3c <_printf_i+0x114>
 8001b36:	065e      	lsls	r6, r3, #25
 8001b38:	f100 80c1 	bmi.w	8001cbe <_printf_i+0x296>
 8001b3c:	680d      	ldr	r5, [r1, #0]
 8001b3e:	682a      	ldr	r2, [r5, #0]
 8001b40:	3504      	adds	r5, #4
 8001b42:	600d      	str	r5, [r1, #0]
 8001b44:	4615      	mov	r5, r2
 8001b46:	2a00      	cmp	r2, #0
 8001b48:	db6b      	blt.n	8001c22 <_printf_i+0x1fa>
 8001b4a:	f8df c184 	ldr.w	ip, [pc, #388]	; 8001cd0 <_printf_i+0x2a8>
 8001b4e:	260a      	movs	r6, #10
 8001b50:	e010      	b.n	8001b74 <_printf_i+0x14c>
 8001b52:	6823      	ldr	r3, [r4, #0]
 8001b54:	061d      	lsls	r5, r3, #24
 8001b56:	f140 809c 	bpl.w	8001c92 <_printf_i+0x26a>
 8001b5a:	680b      	ldr	r3, [r1, #0]
 8001b5c:	1d1d      	adds	r5, r3, #4
 8001b5e:	600d      	str	r5, [r1, #0]
 8001b60:	681d      	ldr	r5, [r3, #0]
 8001b62:	f8df c16c 	ldr.w	ip, [pc, #364]	; 8001cd0 <_printf_i+0x2a8>
 8001b66:	2a6f      	cmp	r2, #111	; 0x6f
 8001b68:	bf0c      	ite	eq
 8001b6a:	2608      	moveq	r6, #8
 8001b6c:	260a      	movne	r6, #10
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b74:	6862      	ldr	r2, [r4, #4]
 8001b76:	60a2      	str	r2, [r4, #8]
 8001b78:	2a00      	cmp	r2, #0
 8001b7a:	db7f      	blt.n	8001c7c <_printf_i+0x254>
 8001b7c:	6823      	ldr	r3, [r4, #0]
 8001b7e:	f023 0304 	bic.w	r3, r3, #4
 8001b82:	6023      	str	r3, [r4, #0]
 8001b84:	2d00      	cmp	r5, #0
 8001b86:	d15b      	bne.n	8001c40 <_printf_i+0x218>
 8001b88:	2a00      	cmp	r2, #0
 8001b8a:	d179      	bne.n	8001c80 <_printf_i+0x258>
 8001b8c:	4682      	mov	sl, r0
 8001b8e:	2e08      	cmp	r6, #8
 8001b90:	d065      	beq.n	8001c5e <_printf_i+0x236>
 8001b92:	eba0 000a 	sub.w	r0, r0, sl
 8001b96:	6120      	str	r0, [r4, #16]
 8001b98:	e78a      	b.n	8001ab0 <_printf_i+0x88>
 8001b9a:	680b      	ldr	r3, [r1, #0]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	6818      	ldr	r0, [r3, #0]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	600b      	str	r3, [r1, #0]
 8001ba4:	f104 0a42 	add.w	sl, r4, #66	; 0x42
 8001ba8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
 8001bac:	6122      	str	r2, [r4, #16]
 8001bae:	e7bb      	b.n	8001b28 <_printf_i+0x100>
 8001bb0:	680b      	ldr	r3, [r1, #0]
 8001bb2:	6862      	ldr	r2, [r4, #4]
 8001bb4:	1d18      	adds	r0, r3, #4
 8001bb6:	6008      	str	r0, [r1, #0]
 8001bb8:	f8d3 a000 	ldr.w	sl, [r3]
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4650      	mov	r0, sl
 8001bc0:	f000 fcf6 	bl	80025b0 <memchr>
 8001bc4:	2800      	cmp	r0, #0
 8001bc6:	f000 8081 	beq.w	8001ccc <_printf_i+0x2a4>
 8001bca:	eba0 000a 	sub.w	r0, r0, sl
 8001bce:	6060      	str	r0, [r4, #4]
 8001bd0:	6120      	str	r0, [r4, #16]
 8001bd2:	e7a9      	b.n	8001b28 <_printf_i+0x100>
 8001bd4:	6823      	ldr	r3, [r4, #0]
 8001bd6:	f043 0320 	orr.w	r3, r3, #32
 8001bda:	6023      	str	r3, [r4, #0]
 8001bdc:	2278      	movs	r2, #120	; 0x78
 8001bde:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8001cd4 <_printf_i+0x2ac>
 8001be2:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001be6:	680a      	ldr	r2, [r1, #0]
 8001be8:	1d15      	adds	r5, r2, #4
 8001bea:	600d      	str	r5, [r1, #0]
 8001bec:	061d      	lsls	r5, r3, #24
 8001bee:	d443      	bmi.n	8001c78 <_printf_i+0x250>
 8001bf0:	0659      	lsls	r1, r3, #25
 8001bf2:	d541      	bpl.n	8001c78 <_printf_i+0x250>
 8001bf4:	8815      	ldrh	r5, [r2, #0]
 8001bf6:	07de      	lsls	r6, r3, #31
 8001bf8:	bf44      	itt	mi
 8001bfa:	f043 0320 	orrmi.w	r3, r3, #32
 8001bfe:	6023      	strmi	r3, [r4, #0]
 8001c00:	2d00      	cmp	r5, #0
 8001c02:	d144      	bne.n	8001c8e <_printf_i+0x266>
 8001c04:	6823      	ldr	r3, [r4, #0]
 8001c06:	f023 0320 	bic.w	r3, r3, #32
 8001c0a:	6023      	str	r3, [r4, #0]
 8001c0c:	2610      	movs	r6, #16
 8001c0e:	e7ae      	b.n	8001b6e <_printf_i+0x146>
 8001c10:	2358      	movs	r3, #88	; 0x58
 8001c12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001c16:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8001cd0 <_printf_i+0x2a8>
 8001c1a:	6823      	ldr	r3, [r4, #0]
 8001c1c:	e7e3      	b.n	8001be6 <_printf_i+0x1be>
 8001c1e:	6823      	ldr	r3, [r4, #0]
 8001c20:	e7dc      	b.n	8001bdc <_printf_i+0x1b4>
 8001c22:	6862      	ldr	r2, [r4, #4]
 8001c24:	60a2      	str	r2, [r4, #8]
 8001c26:	212d      	movs	r1, #45	; 0x2d
 8001c28:	2a00      	cmp	r2, #0
 8001c2a:	f1c5 0500 	rsb	r5, r5, #0
 8001c2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c32:	db02      	blt.n	8001c3a <_printf_i+0x212>
 8001c34:	f023 0304 	bic.w	r3, r3, #4
 8001c38:	6023      	str	r3, [r4, #0]
 8001c3a:	f8df c094 	ldr.w	ip, [pc, #148]	; 8001cd0 <_printf_i+0x2a8>
 8001c3e:	260a      	movs	r6, #10
 8001c40:	4682      	mov	sl, r0
 8001c42:	fbb5 f3f6 	udiv	r3, r5, r6
 8001c46:	fb06 5113 	mls	r1, r6, r3, r5
 8001c4a:	462a      	mov	r2, r5
 8001c4c:	f81c 1001 	ldrb.w	r1, [ip, r1]
 8001c50:	f80a 1d01 	strb.w	r1, [sl, #-1]!
 8001c54:	42b2      	cmp	r2, r6
 8001c56:	461d      	mov	r5, r3
 8001c58:	d2f3      	bcs.n	8001c42 <_printf_i+0x21a>
 8001c5a:	2e08      	cmp	r6, #8
 8001c5c:	d199      	bne.n	8001b92 <_printf_i+0x16a>
 8001c5e:	6823      	ldr	r3, [r4, #0]
 8001c60:	07d9      	lsls	r1, r3, #31
 8001c62:	d596      	bpl.n	8001b92 <_printf_i+0x16a>
 8001c64:	6862      	ldr	r2, [r4, #4]
 8001c66:	6923      	ldr	r3, [r4, #16]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	dc92      	bgt.n	8001b92 <_printf_i+0x16a>
 8001c6c:	2330      	movs	r3, #48	; 0x30
 8001c6e:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8001c72:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8001c76:	e78c      	b.n	8001b92 <_printf_i+0x16a>
 8001c78:	6815      	ldr	r5, [r2, #0]
 8001c7a:	e7bc      	b.n	8001bf6 <_printf_i+0x1ce>
 8001c7c:	2d00      	cmp	r5, #0
 8001c7e:	d1df      	bne.n	8001c40 <_printf_i+0x218>
 8001c80:	f89c 3000 	ldrb.w	r3, [ip]
 8001c84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c88:	f104 0a42 	add.w	sl, r4, #66	; 0x42
 8001c8c:	e77f      	b.n	8001b8e <_printf_i+0x166>
 8001c8e:	2610      	movs	r6, #16
 8001c90:	e76d      	b.n	8001b6e <_printf_i+0x146>
 8001c92:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001c96:	680b      	ldr	r3, [r1, #0]
 8001c98:	f103 0504 	add.w	r5, r3, #4
 8001c9c:	600d      	str	r5, [r1, #0]
 8001c9e:	bf0c      	ite	eq
 8001ca0:	681d      	ldreq	r5, [r3, #0]
 8001ca2:	881d      	ldrhne	r5, [r3, #0]
 8001ca4:	e75d      	b.n	8001b62 <_printf_i+0x13a>
 8001ca6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001caa:	680b      	ldr	r3, [r1, #0]
 8001cac:	6962      	ldr	r2, [r4, #20]
 8001cae:	f103 0504 	add.w	r5, r3, #4
 8001cb2:	600d      	str	r5, [r1, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	bf14      	ite	ne
 8001cb8:	801a      	strhne	r2, [r3, #0]
 8001cba:	601a      	streq	r2, [r3, #0]
 8001cbc:	e6f5      	b.n	8001aaa <_printf_i+0x82>
 8001cbe:	680a      	ldr	r2, [r1, #0]
 8001cc0:	f9b2 5000 	ldrsh.w	r5, [r2]
 8001cc4:	3204      	adds	r2, #4
 8001cc6:	600a      	str	r2, [r1, #0]
 8001cc8:	462a      	mov	r2, r5
 8001cca:	e73c      	b.n	8001b46 <_printf_i+0x11e>
 8001ccc:	6860      	ldr	r0, [r4, #4]
 8001cce:	e77f      	b.n	8001bd0 <_printf_i+0x1a8>
 8001cd0:	0800b570 	.word	0x0800b570
 8001cd4:	0800b584 	.word	0x0800b584

08001cd8 <__sread>:
 8001cd8:	b510      	push	{r4, lr}
 8001cda:	460c      	mov	r4, r1
 8001cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ce0:	f000 fdf4 	bl	80028cc <_read_r>
 8001ce4:	2800      	cmp	r0, #0
 8001ce6:	db03      	blt.n	8001cf0 <__sread+0x18>
 8001ce8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001cea:	4403      	add	r3, r0
 8001cec:	6563      	str	r3, [r4, #84]	; 0x54
 8001cee:	bd10      	pop	{r4, pc}
 8001cf0:	89a3      	ldrh	r3, [r4, #12]
 8001cf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cf6:	81a3      	strh	r3, [r4, #12]
 8001cf8:	bd10      	pop	{r4, pc}
 8001cfa:	bf00      	nop

08001cfc <__seofread>:
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	4770      	bx	lr

08001d00 <__swrite>:
 8001d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d04:	460c      	mov	r4, r1
 8001d06:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 8001d0a:	461f      	mov	r7, r3
 8001d0c:	05cb      	lsls	r3, r1, #23
 8001d0e:	4605      	mov	r5, r0
 8001d10:	4616      	mov	r6, r2
 8001d12:	d40b      	bmi.n	8001d2c <__swrite+0x2c>
 8001d14:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8001d18:	81a1      	strh	r1, [r4, #12]
 8001d1a:	463b      	mov	r3, r7
 8001d1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d20:	4632      	mov	r2, r6
 8001d22:	4628      	mov	r0, r5
 8001d24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d28:	f000 b882 	b.w	8001e30 <_write_r>
 8001d2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d30:	2302      	movs	r3, #2
 8001d32:	2200      	movs	r2, #0
 8001d34:	f000 fb92 	bl	800245c <_lseek_r>
 8001d38:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8001d3c:	e7ea      	b.n	8001d14 <__swrite+0x14>
 8001d3e:	bf00      	nop

08001d40 <__sseek>:
 8001d40:	b510      	push	{r4, lr}
 8001d42:	460c      	mov	r4, r1
 8001d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d48:	f000 fb88 	bl	800245c <_lseek_r>
 8001d4c:	89a3      	ldrh	r3, [r4, #12]
 8001d4e:	1c42      	adds	r2, r0, #1
 8001d50:	bf0e      	itee	eq
 8001d52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001d56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001d5a:	6560      	strne	r0, [r4, #84]	; 0x54
 8001d5c:	81a3      	strh	r3, [r4, #12]
 8001d5e:	bd10      	pop	{r4, pc}

08001d60 <__sclose>:
 8001d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d64:	f000 b8fc 	b.w	8001f60 <_close_r>

08001d68 <__swbuf_r>:
 8001d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d6a:	460d      	mov	r5, r1
 8001d6c:	4614      	mov	r4, r2
 8001d6e:	4606      	mov	r6, r0
 8001d70:	b108      	cbz	r0, 8001d76 <__swbuf_r+0xe>
 8001d72:	6983      	ldr	r3, [r0, #24]
 8001d74:	b343      	cbz	r3, 8001dc8 <__swbuf_r+0x60>
 8001d76:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <__swbuf_r+0xa4>)
 8001d78:	429c      	cmp	r4, r3
 8001d7a:	d02a      	beq.n	8001dd2 <__swbuf_r+0x6a>
 8001d7c:	4b24      	ldr	r3, [pc, #144]	; (8001e10 <__swbuf_r+0xa8>)
 8001d7e:	429c      	cmp	r4, r3
 8001d80:	d029      	beq.n	8001dd6 <__swbuf_r+0x6e>
 8001d82:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <__swbuf_r+0xac>)
 8001d84:	429c      	cmp	r4, r3
 8001d86:	bf08      	it	eq
 8001d88:	68f4      	ldreq	r4, [r6, #12]
 8001d8a:	89a3      	ldrh	r3, [r4, #12]
 8001d8c:	69a2      	ldr	r2, [r4, #24]
 8001d8e:	60a2      	str	r2, [r4, #8]
 8001d90:	071a      	lsls	r2, r3, #28
 8001d92:	d522      	bpl.n	8001dda <__swbuf_r+0x72>
 8001d94:	6923      	ldr	r3, [r4, #16]
 8001d96:	b303      	cbz	r3, 8001dda <__swbuf_r+0x72>
 8001d98:	6822      	ldr	r2, [r4, #0]
 8001d9a:	6961      	ldr	r1, [r4, #20]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	b2ed      	uxtb	r5, r5
 8001da0:	4299      	cmp	r1, r3
 8001da2:	462f      	mov	r7, r5
 8001da4:	dd29      	ble.n	8001dfa <__swbuf_r+0x92>
 8001da6:	3301      	adds	r3, #1
 8001da8:	68a1      	ldr	r1, [r4, #8]
 8001daa:	3901      	subs	r1, #1
 8001dac:	60a1      	str	r1, [r4, #8]
 8001dae:	1c51      	adds	r1, r2, #1
 8001db0:	6021      	str	r1, [r4, #0]
 8001db2:	7015      	strb	r5, [r2, #0]
 8001db4:	6962      	ldr	r2, [r4, #20]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d016      	beq.n	8001de8 <__swbuf_r+0x80>
 8001dba:	89a3      	ldrh	r3, [r4, #12]
 8001dbc:	07db      	lsls	r3, r3, #31
 8001dbe:	d501      	bpl.n	8001dc4 <__swbuf_r+0x5c>
 8001dc0:	2d0a      	cmp	r5, #10
 8001dc2:	d011      	beq.n	8001de8 <__swbuf_r+0x80>
 8001dc4:	4638      	mov	r0, r7
 8001dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dc8:	f7ff fb9c 	bl	8001504 <__sinit>
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <__swbuf_r+0xa4>)
 8001dce:	429c      	cmp	r4, r3
 8001dd0:	d1d4      	bne.n	8001d7c <__swbuf_r+0x14>
 8001dd2:	6874      	ldr	r4, [r6, #4]
 8001dd4:	e7d9      	b.n	8001d8a <__swbuf_r+0x22>
 8001dd6:	68b4      	ldr	r4, [r6, #8]
 8001dd8:	e7d7      	b.n	8001d8a <__swbuf_r+0x22>
 8001dda:	4621      	mov	r1, r4
 8001ddc:	4630      	mov	r0, r6
 8001dde:	f000 f83d 	bl	8001e5c <__swsetup_r>
 8001de2:	b938      	cbnz	r0, 8001df4 <__swbuf_r+0x8c>
 8001de4:	6923      	ldr	r3, [r4, #16]
 8001de6:	e7d7      	b.n	8001d98 <__swbuf_r+0x30>
 8001de8:	4621      	mov	r1, r4
 8001dea:	4630      	mov	r0, r6
 8001dec:	f000 f954 	bl	8002098 <_fflush_r>
 8001df0:	2800      	cmp	r0, #0
 8001df2:	d0e7      	beq.n	8001dc4 <__swbuf_r+0x5c>
 8001df4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001df8:	e7e4      	b.n	8001dc4 <__swbuf_r+0x5c>
 8001dfa:	4621      	mov	r1, r4
 8001dfc:	4630      	mov	r0, r6
 8001dfe:	f000 f94b 	bl	8002098 <_fflush_r>
 8001e02:	2800      	cmp	r0, #0
 8001e04:	d1f6      	bne.n	8001df4 <__swbuf_r+0x8c>
 8001e06:	6822      	ldr	r2, [r4, #0]
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e7cd      	b.n	8001da8 <__swbuf_r+0x40>
 8001e0c:	0800b534 	.word	0x0800b534
 8001e10:	0800b514 	.word	0x0800b514
 8001e14:	0800b4f4 	.word	0x0800b4f4

08001e18 <__swbuf>:
 8001e18:	b410      	push	{r4}
 8001e1a:	4c04      	ldr	r4, [pc, #16]	; (8001e2c <__swbuf+0x14>)
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	460a      	mov	r2, r1
 8001e20:	6820      	ldr	r0, [r4, #0]
 8001e22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	f7ff bf9e 	b.w	8001d68 <__swbuf_r>
 8001e2c:	20000004 	.word	0x20000004

08001e30 <_write_r>:
 8001e30:	b538      	push	{r3, r4, r5, lr}
 8001e32:	460c      	mov	r4, r1
 8001e34:	4d08      	ldr	r5, [pc, #32]	; (8001e58 <_write_r+0x28>)
 8001e36:	4684      	mov	ip, r0
 8001e38:	4611      	mov	r1, r2
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	2300      	movs	r3, #0
 8001e40:	602b      	str	r3, [r5, #0]
 8001e42:	4664      	mov	r4, ip
 8001e44:	f7fe ff12 	bl	8000c6c <_write>
 8001e48:	1c43      	adds	r3, r0, #1
 8001e4a:	d000      	beq.n	8001e4e <_write_r+0x1e>
 8001e4c:	bd38      	pop	{r3, r4, r5, pc}
 8001e4e:	682b      	ldr	r3, [r5, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0fb      	beq.n	8001e4c <_write_r+0x1c>
 8001e54:	6023      	str	r3, [r4, #0]
 8001e56:	bd38      	pop	{r3, r4, r5, pc}
 8001e58:	20000208 	.word	0x20000208

08001e5c <__swsetup_r>:
 8001e5c:	4b3c      	ldr	r3, [pc, #240]	; (8001f50 <__swsetup_r+0xf4>)
 8001e5e:	b570      	push	{r4, r5, r6, lr}
 8001e60:	681d      	ldr	r5, [r3, #0]
 8001e62:	4606      	mov	r6, r0
 8001e64:	460c      	mov	r4, r1
 8001e66:	b10d      	cbz	r5, 8001e6c <__swsetup_r+0x10>
 8001e68:	69ab      	ldr	r3, [r5, #24]
 8001e6a:	b1e3      	cbz	r3, 8001ea6 <__swsetup_r+0x4a>
 8001e6c:	4b39      	ldr	r3, [pc, #228]	; (8001f54 <__swsetup_r+0xf8>)
 8001e6e:	429c      	cmp	r4, r3
 8001e70:	d01f      	beq.n	8001eb2 <__swsetup_r+0x56>
 8001e72:	4b39      	ldr	r3, [pc, #228]	; (8001f58 <__swsetup_r+0xfc>)
 8001e74:	429c      	cmp	r4, r3
 8001e76:	d04d      	beq.n	8001f14 <__swsetup_r+0xb8>
 8001e78:	4b38      	ldr	r3, [pc, #224]	; (8001f5c <__swsetup_r+0x100>)
 8001e7a:	429c      	cmp	r4, r3
 8001e7c:	bf08      	it	eq
 8001e7e:	68ec      	ldreq	r4, [r5, #12]
 8001e80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e84:	0718      	lsls	r0, r3, #28
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	d519      	bpl.n	8001ebe <__swsetup_r+0x62>
 8001e8a:	6921      	ldr	r1, [r4, #16]
 8001e8c:	b311      	cbz	r1, 8001ed4 <__swsetup_r+0x78>
 8001e8e:	f012 0001 	ands.w	r0, r2, #1
 8001e92:	d02f      	beq.n	8001ef4 <__swsetup_r+0x98>
 8001e94:	2000      	movs	r0, #0
 8001e96:	60a0      	str	r0, [r4, #8]
 8001e98:	6960      	ldr	r0, [r4, #20]
 8001e9a:	4240      	negs	r0, r0
 8001e9c:	61a0      	str	r0, [r4, #24]
 8001e9e:	2900      	cmp	r1, #0
 8001ea0:	d02e      	beq.n	8001f00 <__swsetup_r+0xa4>
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	bd70      	pop	{r4, r5, r6, pc}
 8001ea6:	4628      	mov	r0, r5
 8001ea8:	f7ff fb2c 	bl	8001504 <__sinit>
 8001eac:	4b29      	ldr	r3, [pc, #164]	; (8001f54 <__swsetup_r+0xf8>)
 8001eae:	429c      	cmp	r4, r3
 8001eb0:	d1df      	bne.n	8001e72 <__swsetup_r+0x16>
 8001eb2:	686c      	ldr	r4, [r5, #4]
 8001eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001eb8:	0718      	lsls	r0, r3, #28
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	d4e5      	bmi.n	8001e8a <__swsetup_r+0x2e>
 8001ebe:	06d1      	lsls	r1, r2, #27
 8001ec0:	d53e      	bpl.n	8001f40 <__swsetup_r+0xe4>
 8001ec2:	0752      	lsls	r2, r2, #29
 8001ec4:	d428      	bmi.n	8001f18 <__swsetup_r+0xbc>
 8001ec6:	6921      	ldr	r1, [r4, #16]
 8001ec8:	f043 0308 	orr.w	r3, r3, #8
 8001ecc:	81a3      	strh	r3, [r4, #12]
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	2900      	cmp	r1, #0
 8001ed2:	d1dc      	bne.n	8001e8e <__swsetup_r+0x32>
 8001ed4:	f402 7020 	and.w	r0, r2, #640	; 0x280
 8001ed8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001edc:	d0d7      	beq.n	8001e8e <__swsetup_r+0x32>
 8001ede:	4621      	mov	r1, r4
 8001ee0:	4630      	mov	r0, r6
 8001ee2:	f000 fad1 	bl	8002488 <__smakebuf_r>
 8001ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001eea:	6921      	ldr	r1, [r4, #16]
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	f012 0001 	ands.w	r0, r2, #1
 8001ef2:	d1cf      	bne.n	8001e94 <__swsetup_r+0x38>
 8001ef4:	0795      	lsls	r5, r2, #30
 8001ef6:	bf58      	it	pl
 8001ef8:	6960      	ldrpl	r0, [r4, #20]
 8001efa:	60a0      	str	r0, [r4, #8]
 8001efc:	2900      	cmp	r1, #0
 8001efe:	d1d0      	bne.n	8001ea2 <__swsetup_r+0x46>
 8001f00:	0612      	lsls	r2, r2, #24
 8001f02:	bf58      	it	pl
 8001f04:	4608      	movpl	r0, r1
 8001f06:	d5cd      	bpl.n	8001ea4 <__swsetup_r+0x48>
 8001f08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f0c:	81a3      	strh	r3, [r4, #12]
 8001f0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f12:	bd70      	pop	{r4, r5, r6, pc}
 8001f14:	68ac      	ldr	r4, [r5, #8]
 8001f16:	e7b3      	b.n	8001e80 <__swsetup_r+0x24>
 8001f18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f1a:	b151      	cbz	r1, 8001f32 <__swsetup_r+0xd6>
 8001f1c:	f104 0244 	add.w	r2, r4, #68	; 0x44
 8001f20:	4291      	cmp	r1, r2
 8001f22:	d004      	beq.n	8001f2e <__swsetup_r+0xd2>
 8001f24:	4630      	mov	r0, r6
 8001f26:	f7ff f8f3 	bl	8001110 <_free_r>
 8001f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	6362      	str	r2, [r4, #52]	; 0x34
 8001f32:	6921      	ldr	r1, [r4, #16]
 8001f34:	2200      	movs	r2, #0
 8001f36:	e9c4 1200 	strd	r1, r2, [r4]
 8001f3a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001f3e:	e7c3      	b.n	8001ec8 <__swsetup_r+0x6c>
 8001f40:	2209      	movs	r2, #9
 8001f42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f46:	6032      	str	r2, [r6, #0]
 8001f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f4c:	81a3      	strh	r3, [r4, #12]
 8001f4e:	bd70      	pop	{r4, r5, r6, pc}
 8001f50:	20000004 	.word	0x20000004
 8001f54:	0800b534 	.word	0x0800b534
 8001f58:	0800b514 	.word	0x0800b514
 8001f5c:	0800b4f4 	.word	0x0800b4f4

08001f60 <_close_r>:
 8001f60:	b538      	push	{r3, r4, r5, lr}
 8001f62:	4d07      	ldr	r5, [pc, #28]	; (8001f80 <_close_r+0x20>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	4604      	mov	r4, r0
 8001f68:	4608      	mov	r0, r1
 8001f6a:	602a      	str	r2, [r5, #0]
 8001f6c:	f7fe fe9a 	bl	8000ca4 <_close>
 8001f70:	1c43      	adds	r3, r0, #1
 8001f72:	d000      	beq.n	8001f76 <_close_r+0x16>
 8001f74:	bd38      	pop	{r3, r4, r5, pc}
 8001f76:	682b      	ldr	r3, [r5, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0fb      	beq.n	8001f74 <_close_r+0x14>
 8001f7c:	6023      	str	r3, [r4, #0]
 8001f7e:	bd38      	pop	{r3, r4, r5, pc}
 8001f80:	20000208 	.word	0x20000208

08001f84 <__sflush_r>:
 8001f84:	898b      	ldrh	r3, [r1, #12]
 8001f86:	071a      	lsls	r2, r3, #28
 8001f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f8c:	460c      	mov	r4, r1
 8001f8e:	4680      	mov	r8, r0
 8001f90:	d43f      	bmi.n	8002012 <__sflush_r+0x8e>
 8001f92:	684a      	ldr	r2, [r1, #4]
 8001f94:	2a00      	cmp	r2, #0
 8001f96:	dd58      	ble.n	800204a <__sflush_r+0xc6>
 8001f98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f9a:	2e00      	cmp	r6, #0
 8001f9c:	d052      	beq.n	8002044 <__sflush_r+0xc0>
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f8d8 5000 	ldr.w	r5, [r8]
 8001fa4:	f8c8 2000 	str.w	r2, [r8]
 8001fa8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
 8001fac:	d151      	bne.n	8002052 <__sflush_r+0xce>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	6a21      	ldr	r1, [r4, #32]
 8001fb2:	4640      	mov	r0, r8
 8001fb4:	47b0      	blx	r6
 8001fb6:	1c43      	adds	r3, r0, #1
 8001fb8:	d05e      	beq.n	8002078 <__sflush_r+0xf4>
 8001fba:	89a3      	ldrh	r3, [r4, #12]
 8001fbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001fbe:	075f      	lsls	r7, r3, #29
 8001fc0:	d505      	bpl.n	8001fce <__sflush_r+0x4a>
 8001fc2:	6863      	ldr	r3, [r4, #4]
 8001fc4:	1ac0      	subs	r0, r0, r3
 8001fc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001fc8:	b10b      	cbz	r3, 8001fce <__sflush_r+0x4a>
 8001fca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fcc:	1ac0      	subs	r0, r0, r3
 8001fce:	6a21      	ldr	r1, [r4, #32]
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	4640      	mov	r0, r8
 8001fd6:	47b0      	blx	r6
 8001fd8:	1c41      	adds	r1, r0, #1
 8001fda:	d13c      	bne.n	8002056 <__sflush_r+0xd2>
 8001fdc:	f8d8 3000 	ldr.w	r3, [r8]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d038      	beq.n	8002056 <__sflush_r+0xd2>
 8001fe4:	2b1d      	cmp	r3, #29
 8001fe6:	d001      	beq.n	8001fec <__sflush_r+0x68>
 8001fe8:	2b16      	cmp	r3, #22
 8001fea:	d14d      	bne.n	8002088 <__sflush_r+0x104>
 8001fec:	6923      	ldr	r3, [r4, #16]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	e9c4 3200 	strd	r3, r2, [r4]
 8001ff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ff6:	f8c8 5000 	str.w	r5, [r8]
 8001ffa:	b319      	cbz	r1, 8002044 <__sflush_r+0xc0>
 8001ffc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002000:	4299      	cmp	r1, r3
 8002002:	d002      	beq.n	800200a <__sflush_r+0x86>
 8002004:	4640      	mov	r0, r8
 8002006:	f7ff f883 	bl	8001110 <_free_r>
 800200a:	2000      	movs	r0, #0
 800200c:	6360      	str	r0, [r4, #52]	; 0x34
 800200e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002012:	690e      	ldr	r6, [r1, #16]
 8002014:	b1b6      	cbz	r6, 8002044 <__sflush_r+0xc0>
 8002016:	680d      	ldr	r5, [r1, #0]
 8002018:	600e      	str	r6, [r1, #0]
 800201a:	079a      	lsls	r2, r3, #30
 800201c:	bf0c      	ite	eq
 800201e:	694b      	ldreq	r3, [r1, #20]
 8002020:	2300      	movne	r3, #0
 8002022:	1bad      	subs	r5, r5, r6
 8002024:	608b      	str	r3, [r1, #8]
 8002026:	e00b      	b.n	8002040 <__sflush_r+0xbc>
 8002028:	462b      	mov	r3, r5
 800202a:	4632      	mov	r2, r6
 800202c:	6a21      	ldr	r1, [r4, #32]
 800202e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8002030:	4640      	mov	r0, r8
 8002032:	47b8      	blx	r7
 8002034:	f1b0 0c00 	subs.w	ip, r0, #0
 8002038:	eba5 050c 	sub.w	r5, r5, ip
 800203c:	4466      	add	r6, ip
 800203e:	dd13      	ble.n	8002068 <__sflush_r+0xe4>
 8002040:	2d00      	cmp	r5, #0
 8002042:	dcf1      	bgt.n	8002028 <__sflush_r+0xa4>
 8002044:	2000      	movs	r0, #0
 8002046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800204a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800204c:	2a00      	cmp	r2, #0
 800204e:	dca3      	bgt.n	8001f98 <__sflush_r+0x14>
 8002050:	e7f8      	b.n	8002044 <__sflush_r+0xc0>
 8002052:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002054:	e7b3      	b.n	8001fbe <__sflush_r+0x3a>
 8002056:	2300      	movs	r3, #0
 8002058:	6063      	str	r3, [r4, #4]
 800205a:	6923      	ldr	r3, [r4, #16]
 800205c:	6023      	str	r3, [r4, #0]
 800205e:	89a3      	ldrh	r3, [r4, #12]
 8002060:	04db      	lsls	r3, r3, #19
 8002062:	d5c7      	bpl.n	8001ff4 <__sflush_r+0x70>
 8002064:	6560      	str	r0, [r4, #84]	; 0x54
 8002066:	e7c5      	b.n	8001ff4 <__sflush_r+0x70>
 8002068:	89a3      	ldrh	r3, [r4, #12]
 800206a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800206e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002072:	81a3      	strh	r3, [r4, #12]
 8002074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002078:	f8d8 3000 	ldr.w	r3, [r8]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d09c      	beq.n	8001fba <__sflush_r+0x36>
 8002080:	2b1d      	cmp	r3, #29
 8002082:	d006      	beq.n	8002092 <__sflush_r+0x10e>
 8002084:	2b16      	cmp	r3, #22
 8002086:	d004      	beq.n	8002092 <__sflush_r+0x10e>
 8002088:	89a3      	ldrh	r3, [r4, #12]
 800208a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800208e:	81a3      	strh	r3, [r4, #12]
 8002090:	e7d9      	b.n	8002046 <__sflush_r+0xc2>
 8002092:	f8c8 5000 	str.w	r5, [r8]
 8002096:	e7d5      	b.n	8002044 <__sflush_r+0xc0>

08002098 <_fflush_r>:
 8002098:	b538      	push	{r3, r4, r5, lr}
 800209a:	690b      	ldr	r3, [r1, #16]
 800209c:	b1bb      	cbz	r3, 80020ce <_fflush_r+0x36>
 800209e:	460d      	mov	r5, r1
 80020a0:	4604      	mov	r4, r0
 80020a2:	b108      	cbz	r0, 80020a8 <_fflush_r+0x10>
 80020a4:	6983      	ldr	r3, [r0, #24]
 80020a6:	b1b3      	cbz	r3, 80020d6 <_fflush_r+0x3e>
 80020a8:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <_fflush_r+0x48>)
 80020aa:	429d      	cmp	r5, r3
 80020ac:	d011      	beq.n	80020d2 <_fflush_r+0x3a>
 80020ae:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <_fflush_r+0x4c>)
 80020b0:	429d      	cmp	r5, r3
 80020b2:	d013      	beq.n	80020dc <_fflush_r+0x44>
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <_fflush_r+0x50>)
 80020b6:	429d      	cmp	r5, r3
 80020b8:	bf08      	it	eq
 80020ba:	68e5      	ldreq	r5, [r4, #12]
 80020bc:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 80020c0:	b12b      	cbz	r3, 80020ce <_fflush_r+0x36>
 80020c2:	4629      	mov	r1, r5
 80020c4:	4620      	mov	r0, r4
 80020c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020ca:	f7ff bf5b 	b.w	8001f84 <__sflush_r>
 80020ce:	2000      	movs	r0, #0
 80020d0:	bd38      	pop	{r3, r4, r5, pc}
 80020d2:	6865      	ldr	r5, [r4, #4]
 80020d4:	e7f2      	b.n	80020bc <_fflush_r+0x24>
 80020d6:	f7ff fa15 	bl	8001504 <__sinit>
 80020da:	e7e5      	b.n	80020a8 <_fflush_r+0x10>
 80020dc:	68a5      	ldr	r5, [r4, #8]
 80020de:	e7ed      	b.n	80020bc <_fflush_r+0x24>
 80020e0:	0800b534 	.word	0x0800b534
 80020e4:	0800b514 	.word	0x0800b514
 80020e8:	0800b4f4 	.word	0x0800b4f4

080020ec <fflush>:
 80020ec:	b538      	push	{r3, r4, r5, lr}
 80020ee:	b340      	cbz	r0, 8002142 <fflush+0x56>
 80020f0:	6903      	ldr	r3, [r0, #16]
 80020f2:	4604      	mov	r4, r0
 80020f4:	b1e3      	cbz	r3, 8002130 <fflush+0x44>
 80020f6:	4b17      	ldr	r3, [pc, #92]	; (8002154 <fflush+0x68>)
 80020f8:	681d      	ldr	r5, [r3, #0]
 80020fa:	b10d      	cbz	r5, 8002100 <fflush+0x14>
 80020fc:	69ab      	ldr	r3, [r5, #24]
 80020fe:	b1cb      	cbz	r3, 8002134 <fflush+0x48>
 8002100:	4b15      	ldr	r3, [pc, #84]	; (8002158 <fflush+0x6c>)
 8002102:	429c      	cmp	r4, r3
 8002104:	d00f      	beq.n	8002126 <fflush+0x3a>
 8002106:	4b15      	ldr	r3, [pc, #84]	; (800215c <fflush+0x70>)
 8002108:	429c      	cmp	r4, r3
 800210a:	d021      	beq.n	8002150 <fflush+0x64>
 800210c:	4b14      	ldr	r3, [pc, #80]	; (8002160 <fflush+0x74>)
 800210e:	429c      	cmp	r4, r3
 8002110:	bf08      	it	eq
 8002112:	68ec      	ldreq	r4, [r5, #12]
 8002114:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002118:	b153      	cbz	r3, 8002130 <fflush+0x44>
 800211a:	4621      	mov	r1, r4
 800211c:	4628      	mov	r0, r5
 800211e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002122:	f7ff bf2f 	b.w	8001f84 <__sflush_r>
 8002126:	686c      	ldr	r4, [r5, #4]
 8002128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1f4      	bne.n	800211a <fflush+0x2e>
 8002130:	2000      	movs	r0, #0
 8002132:	bd38      	pop	{r3, r4, r5, pc}
 8002134:	4628      	mov	r0, r5
 8002136:	f7ff f9e5 	bl	8001504 <__sinit>
 800213a:	4b07      	ldr	r3, [pc, #28]	; (8002158 <fflush+0x6c>)
 800213c:	429c      	cmp	r4, r3
 800213e:	d1e2      	bne.n	8002106 <fflush+0x1a>
 8002140:	e7f1      	b.n	8002126 <fflush+0x3a>
 8002142:	4b08      	ldr	r3, [pc, #32]	; (8002164 <fflush+0x78>)
 8002144:	4908      	ldr	r1, [pc, #32]	; (8002168 <fflush+0x7c>)
 8002146:	6818      	ldr	r0, [r3, #0]
 8002148:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800214c:	f7ff ba1a 	b.w	8001584 <_fwalk_reent>
 8002150:	68ac      	ldr	r4, [r5, #8]
 8002152:	e7df      	b.n	8002114 <fflush+0x28>
 8002154:	20000004 	.word	0x20000004
 8002158:	0800b534 	.word	0x0800b534
 800215c:	0800b514 	.word	0x0800b514
 8002160:	0800b4f4 	.word	0x0800b4f4
 8002164:	0800b4f0 	.word	0x0800b4f0
 8002168:	08002099 	.word	0x08002099

0800216c <__sfvwrite_r>:
 800216c:	6893      	ldr	r3, [r2, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 8085 	beq.w	800227e <__sfvwrite_r+0x112>
 8002174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002178:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800217c:	460c      	mov	r4, r1
 800217e:	0719      	lsls	r1, r3, #28
 8002180:	4680      	mov	r8, r0
 8002182:	b083      	sub	sp, #12
 8002184:	4617      	mov	r7, r2
 8002186:	b298      	uxth	r0, r3
 8002188:	d525      	bpl.n	80021d6 <__sfvwrite_r+0x6a>
 800218a:	6923      	ldr	r3, [r4, #16]
 800218c:	b31b      	cbz	r3, 80021d6 <__sfvwrite_r+0x6a>
 800218e:	f010 0302 	ands.w	r3, r0, #2
 8002192:	683d      	ldr	r5, [r7, #0]
 8002194:	d02d      	beq.n	80021f2 <__sfvwrite_r+0x86>
 8002196:	f04f 0a00 	mov.w	sl, #0
 800219a:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 8002458 <__sfvwrite_r+0x2ec>
 800219e:	4656      	mov	r6, sl
 80021a0:	46b9      	mov	r9, r7
 80021a2:	455e      	cmp	r6, fp
 80021a4:	4633      	mov	r3, r6
 80021a6:	4652      	mov	r2, sl
 80021a8:	bf28      	it	cs
 80021aa:	465b      	movcs	r3, fp
 80021ac:	4640      	mov	r0, r8
 80021ae:	2e00      	cmp	r6, #0
 80021b0:	d052      	beq.n	8002258 <__sfvwrite_r+0xec>
 80021b2:	6a21      	ldr	r1, [r4, #32]
 80021b4:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80021b6:	47b8      	blx	r7
 80021b8:	2800      	cmp	r0, #0
 80021ba:	dd56      	ble.n	800226a <__sfvwrite_r+0xfe>
 80021bc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80021c0:	1a1b      	subs	r3, r3, r0
 80021c2:	4482      	add	sl, r0
 80021c4:	1a36      	subs	r6, r6, r0
 80021c6:	f8c9 3008 	str.w	r3, [r9, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1e9      	bne.n	80021a2 <__sfvwrite_r+0x36>
 80021ce:	2000      	movs	r0, #0
 80021d0:	b003      	add	sp, #12
 80021d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021d6:	4621      	mov	r1, r4
 80021d8:	4640      	mov	r0, r8
 80021da:	f7ff fe3f 	bl	8001e5c <__swsetup_r>
 80021de:	2800      	cmp	r0, #0
 80021e0:	f040 8136 	bne.w	8002450 <__sfvwrite_r+0x2e4>
 80021e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021e8:	683d      	ldr	r5, [r7, #0]
 80021ea:	b298      	uxth	r0, r3
 80021ec:	f010 0302 	ands.w	r3, r0, #2
 80021f0:	d1d1      	bne.n	8002196 <__sfvwrite_r+0x2a>
 80021f2:	f010 0901 	ands.w	r9, r0, #1
 80021f6:	d144      	bne.n	8002282 <__sfvwrite_r+0x116>
 80021f8:	464e      	mov	r6, r9
 80021fa:	9700      	str	r7, [sp, #0]
 80021fc:	b346      	cbz	r6, 8002250 <__sfvwrite_r+0xe4>
 80021fe:	0582      	lsls	r2, r0, #22
 8002200:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8002204:	f140 8083 	bpl.w	800230e <__sfvwrite_r+0x1a2>
 8002208:	45b3      	cmp	fp, r6
 800220a:	465a      	mov	r2, fp
 800220c:	f200 80b2 	bhi.w	8002374 <__sfvwrite_r+0x208>
 8002210:	f410 6f90 	tst.w	r0, #1152	; 0x480
 8002214:	f040 80bf 	bne.w	8002396 <__sfvwrite_r+0x22a>
 8002218:	6820      	ldr	r0, [r4, #0]
 800221a:	9201      	str	r2, [sp, #4]
 800221c:	4649      	mov	r1, r9
 800221e:	f000 fab1 	bl	8002784 <memmove>
 8002222:	68a3      	ldr	r3, [r4, #8]
 8002224:	9a01      	ldr	r2, [sp, #4]
 8002226:	eba3 010b 	sub.w	r1, r3, fp
 800222a:	6823      	ldr	r3, [r4, #0]
 800222c:	60a1      	str	r1, [r4, #8]
 800222e:	4413      	add	r3, r2
 8002230:	46b2      	mov	sl, r6
 8002232:	6023      	str	r3, [r4, #0]
 8002234:	2600      	movs	r6, #0
 8002236:	9b00      	ldr	r3, [sp, #0]
 8002238:	6898      	ldr	r0, [r3, #8]
 800223a:	eba0 000a 	sub.w	r0, r0, sl
 800223e:	44d1      	add	r9, sl
 8002240:	6098      	str	r0, [r3, #8]
 8002242:	2800      	cmp	r0, #0
 8002244:	d0c3      	beq.n	80021ce <__sfvwrite_r+0x62>
 8002246:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800224a:	b280      	uxth	r0, r0
 800224c:	2e00      	cmp	r6, #0
 800224e:	d1d6      	bne.n	80021fe <__sfvwrite_r+0x92>
 8002250:	e9d5 9600 	ldrd	r9, r6, [r5]
 8002254:	3508      	adds	r5, #8
 8002256:	e7d1      	b.n	80021fc <__sfvwrite_r+0x90>
 8002258:	e9d5 a600 	ldrd	sl, r6, [r5]
 800225c:	3508      	adds	r5, #8
 800225e:	e7a0      	b.n	80021a2 <__sfvwrite_r+0x36>
 8002260:	4621      	mov	r1, r4
 8002262:	4640      	mov	r0, r8
 8002264:	f7ff ff18 	bl	8002098 <_fflush_r>
 8002268:	b380      	cbz	r0, 80022cc <__sfvwrite_r+0x160>
 800226a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800226e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002272:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002276:	81a3      	strh	r3, [r4, #12]
 8002278:	b003      	add	sp, #12
 800227a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800227e:	2000      	movs	r0, #0
 8002280:	4770      	bx	lr
 8002282:	461e      	mov	r6, r3
 8002284:	46aa      	mov	sl, r5
 8002286:	4699      	mov	r9, r3
 8002288:	4618      	mov	r0, r3
 800228a:	461d      	mov	r5, r3
 800228c:	9700      	str	r7, [sp, #0]
 800228e:	b356      	cbz	r6, 80022e6 <__sfvwrite_r+0x17a>
 8002290:	b388      	cbz	r0, 80022f6 <__sfvwrite_r+0x18a>
 8002292:	464a      	mov	r2, r9
 8002294:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
 8002298:	6820      	ldr	r0, [r4, #0]
 800229a:	42b2      	cmp	r2, r6
 800229c:	bf28      	it	cs
 800229e:	4632      	movcs	r2, r6
 80022a0:	4288      	cmp	r0, r1
 80022a2:	d905      	bls.n	80022b0 <__sfvwrite_r+0x144>
 80022a4:	68a1      	ldr	r1, [r4, #8]
 80022a6:	eb03 0b01 	add.w	fp, r3, r1
 80022aa:	455a      	cmp	r2, fp
 80022ac:	f300 80a6 	bgt.w	80023fc <__sfvwrite_r+0x290>
 80022b0:	4293      	cmp	r3, r2
 80022b2:	dc63      	bgt.n	800237c <__sfvwrite_r+0x210>
 80022b4:	6a21      	ldr	r1, [r4, #32]
 80022b6:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80022b8:	462a      	mov	r2, r5
 80022ba:	4640      	mov	r0, r8
 80022bc:	47b8      	blx	r7
 80022be:	f1b0 0b00 	subs.w	fp, r0, #0
 80022c2:	ddd2      	ble.n	800226a <__sfvwrite_r+0xfe>
 80022c4:	ebb9 090b 	subs.w	r9, r9, fp
 80022c8:	d0ca      	beq.n	8002260 <__sfvwrite_r+0xf4>
 80022ca:	2001      	movs	r0, #1
 80022cc:	9a00      	ldr	r2, [sp, #0]
 80022ce:	6893      	ldr	r3, [r2, #8]
 80022d0:	eba3 030b 	sub.w	r3, r3, fp
 80022d4:	445d      	add	r5, fp
 80022d6:	eba6 060b 	sub.w	r6, r6, fp
 80022da:	6093      	str	r3, [r2, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f43f af76 	beq.w	80021ce <__sfvwrite_r+0x62>
 80022e2:	2e00      	cmp	r6, #0
 80022e4:	d1d4      	bne.n	8002290 <__sfvwrite_r+0x124>
 80022e6:	f10a 0308 	add.w	r3, sl, #8
 80022ea:	e953 5602 	ldrd	r5, r6, [r3, #-8]
 80022ee:	469a      	mov	sl, r3
 80022f0:	3308      	adds	r3, #8
 80022f2:	2e00      	cmp	r6, #0
 80022f4:	d0f9      	beq.n	80022ea <__sfvwrite_r+0x17e>
 80022f6:	4632      	mov	r2, r6
 80022f8:	210a      	movs	r1, #10
 80022fa:	4628      	mov	r0, r5
 80022fc:	f000 f958 	bl	80025b0 <memchr>
 8002300:	2800      	cmp	r0, #0
 8002302:	f000 809c 	beq.w	800243e <__sfvwrite_r+0x2d2>
 8002306:	3001      	adds	r0, #1
 8002308:	eba0 0905 	sub.w	r9, r0, r5
 800230c:	e7c1      	b.n	8002292 <__sfvwrite_r+0x126>
 800230e:	6820      	ldr	r0, [r4, #0]
 8002310:	6923      	ldr	r3, [r4, #16]
 8002312:	4298      	cmp	r0, r3
 8002314:	d816      	bhi.n	8002344 <__sfvwrite_r+0x1d8>
 8002316:	6963      	ldr	r3, [r4, #20]
 8002318:	42b3      	cmp	r3, r6
 800231a:	d813      	bhi.n	8002344 <__sfvwrite_r+0x1d8>
 800231c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002320:	42b2      	cmp	r2, r6
 8002322:	bf28      	it	cs
 8002324:	4632      	movcs	r2, r6
 8002326:	6a21      	ldr	r1, [r4, #32]
 8002328:	fb92 f2f3 	sdiv	r2, r2, r3
 800232c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800232e:	fb02 f303 	mul.w	r3, r2, r3
 8002332:	4640      	mov	r0, r8
 8002334:	464a      	mov	r2, r9
 8002336:	47b8      	blx	r7
 8002338:	f1b0 0a00 	subs.w	sl, r0, #0
 800233c:	dd95      	ble.n	800226a <__sfvwrite_r+0xfe>
 800233e:	eba6 060a 	sub.w	r6, r6, sl
 8002342:	e778      	b.n	8002236 <__sfvwrite_r+0xca>
 8002344:	45b3      	cmp	fp, r6
 8002346:	46da      	mov	sl, fp
 8002348:	bf28      	it	cs
 800234a:	46b2      	movcs	sl, r6
 800234c:	4652      	mov	r2, sl
 800234e:	4649      	mov	r1, r9
 8002350:	f000 fa18 	bl	8002784 <memmove>
 8002354:	68a3      	ldr	r3, [r4, #8]
 8002356:	6822      	ldr	r2, [r4, #0]
 8002358:	eba3 030a 	sub.w	r3, r3, sl
 800235c:	4452      	add	r2, sl
 800235e:	60a3      	str	r3, [r4, #8]
 8002360:	6022      	str	r2, [r4, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1eb      	bne.n	800233e <__sfvwrite_r+0x1d2>
 8002366:	4621      	mov	r1, r4
 8002368:	4640      	mov	r0, r8
 800236a:	f7ff fe95 	bl	8002098 <_fflush_r>
 800236e:	2800      	cmp	r0, #0
 8002370:	d0e5      	beq.n	800233e <__sfvwrite_r+0x1d2>
 8002372:	e77a      	b.n	800226a <__sfvwrite_r+0xfe>
 8002374:	6820      	ldr	r0, [r4, #0]
 8002376:	46b3      	mov	fp, r6
 8002378:	4632      	mov	r2, r6
 800237a:	e74e      	b.n	800221a <__sfvwrite_r+0xae>
 800237c:	4629      	mov	r1, r5
 800237e:	9201      	str	r2, [sp, #4]
 8002380:	f000 fa00 	bl	8002784 <memmove>
 8002384:	9a01      	ldr	r2, [sp, #4]
 8002386:	68a3      	ldr	r3, [r4, #8]
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	60a3      	str	r3, [r4, #8]
 800238c:	6823      	ldr	r3, [r4, #0]
 800238e:	4413      	add	r3, r2
 8002390:	6023      	str	r3, [r4, #0]
 8002392:	4693      	mov	fp, r2
 8002394:	e796      	b.n	80022c4 <__sfvwrite_r+0x158>
 8002396:	6823      	ldr	r3, [r4, #0]
 8002398:	6921      	ldr	r1, [r4, #16]
 800239a:	eba3 0b01 	sub.w	fp, r3, r1
 800239e:	6963      	ldr	r3, [r4, #20]
 80023a0:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 80023a4:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 80023a8:	f10b 0301 	add.w	r3, fp, #1
 80023ac:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 80023b0:	4433      	add	r3, r6
 80023b2:	4553      	cmp	r3, sl
 80023b4:	4652      	mov	r2, sl
 80023b6:	bf84      	itt	hi
 80023b8:	469a      	movhi	sl, r3
 80023ba:	4652      	movhi	r2, sl
 80023bc:	0543      	lsls	r3, r0, #21
 80023be:	d52c      	bpl.n	800241a <__sfvwrite_r+0x2ae>
 80023c0:	4611      	mov	r1, r2
 80023c2:	4640      	mov	r0, r8
 80023c4:	f7fe ff06 	bl	80011d4 <_malloc_r>
 80023c8:	2800      	cmp	r0, #0
 80023ca:	d03b      	beq.n	8002444 <__sfvwrite_r+0x2d8>
 80023cc:	465a      	mov	r2, fp
 80023ce:	6921      	ldr	r1, [r4, #16]
 80023d0:	9001      	str	r0, [sp, #4]
 80023d2:	f000 f93d 	bl	8002650 <memcpy>
 80023d6:	89a2      	ldrh	r2, [r4, #12]
 80023d8:	9b01      	ldr	r3, [sp, #4]
 80023da:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80023de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023e2:	81a2      	strh	r2, [r4, #12]
 80023e4:	eb03 000b 	add.w	r0, r3, fp
 80023e8:	6123      	str	r3, [r4, #16]
 80023ea:	ebaa 030b 	sub.w	r3, sl, fp
 80023ee:	f8c4 a014 	str.w	sl, [r4, #20]
 80023f2:	60a3      	str	r3, [r4, #8]
 80023f4:	6020      	str	r0, [r4, #0]
 80023f6:	46b3      	mov	fp, r6
 80023f8:	4632      	mov	r2, r6
 80023fa:	e70e      	b.n	800221a <__sfvwrite_r+0xae>
 80023fc:	4629      	mov	r1, r5
 80023fe:	465a      	mov	r2, fp
 8002400:	f000 f9c0 	bl	8002784 <memmove>
 8002404:	6823      	ldr	r3, [r4, #0]
 8002406:	445b      	add	r3, fp
 8002408:	6023      	str	r3, [r4, #0]
 800240a:	4621      	mov	r1, r4
 800240c:	4640      	mov	r0, r8
 800240e:	f7ff fe43 	bl	8002098 <_fflush_r>
 8002412:	2800      	cmp	r0, #0
 8002414:	f43f af56 	beq.w	80022c4 <__sfvwrite_r+0x158>
 8002418:	e727      	b.n	800226a <__sfvwrite_r+0xfe>
 800241a:	4640      	mov	r0, r8
 800241c:	f000 fa2e 	bl	800287c <_realloc_r>
 8002420:	4603      	mov	r3, r0
 8002422:	2800      	cmp	r0, #0
 8002424:	d1de      	bne.n	80023e4 <__sfvwrite_r+0x278>
 8002426:	6921      	ldr	r1, [r4, #16]
 8002428:	4640      	mov	r0, r8
 800242a:	f7fe fe71 	bl	8001110 <_free_r>
 800242e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002432:	220c      	movs	r2, #12
 8002434:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002438:	f8c8 2000 	str.w	r2, [r8]
 800243c:	e717      	b.n	800226e <__sfvwrite_r+0x102>
 800243e:	1c72      	adds	r2, r6, #1
 8002440:	4691      	mov	r9, r2
 8002442:	e727      	b.n	8002294 <__sfvwrite_r+0x128>
 8002444:	220c      	movs	r2, #12
 8002446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800244a:	f8c8 2000 	str.w	r2, [r8]
 800244e:	e70e      	b.n	800226e <__sfvwrite_r+0x102>
 8002450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002454:	e6bc      	b.n	80021d0 <__sfvwrite_r+0x64>
 8002456:	bf00      	nop
 8002458:	7ffffc00 	.word	0x7ffffc00

0800245c <_lseek_r>:
 800245c:	b538      	push	{r3, r4, r5, lr}
 800245e:	460c      	mov	r4, r1
 8002460:	4d08      	ldr	r5, [pc, #32]	; (8002484 <_lseek_r+0x28>)
 8002462:	4684      	mov	ip, r0
 8002464:	4611      	mov	r1, r2
 8002466:	4620      	mov	r0, r4
 8002468:	461a      	mov	r2, r3
 800246a:	2300      	movs	r3, #0
 800246c:	602b      	str	r3, [r5, #0]
 800246e:	4664      	mov	r4, ip
 8002470:	f7fe fc2e 	bl	8000cd0 <_lseek>
 8002474:	1c43      	adds	r3, r0, #1
 8002476:	d000      	beq.n	800247a <_lseek_r+0x1e>
 8002478:	bd38      	pop	{r3, r4, r5, pc}
 800247a:	682b      	ldr	r3, [r5, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0fb      	beq.n	8002478 <_lseek_r+0x1c>
 8002480:	6023      	str	r3, [r4, #0]
 8002482:	bd38      	pop	{r3, r4, r5, pc}
 8002484:	20000208 	.word	0x20000208

08002488 <__smakebuf_r>:
 8002488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800248a:	898b      	ldrh	r3, [r1, #12]
 800248c:	460c      	mov	r4, r1
 800248e:	0799      	lsls	r1, r3, #30
 8002490:	b097      	sub	sp, #92	; 0x5c
 8002492:	d507      	bpl.n	80024a4 <__smakebuf_r+0x1c>
 8002494:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002498:	2201      	movs	r2, #1
 800249a:	e9c4 3204 	strd	r3, r2, [r4, #16]
 800249e:	6023      	str	r3, [r4, #0]
 80024a0:	b017      	add	sp, #92	; 0x5c
 80024a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024a8:	2900      	cmp	r1, #0
 80024aa:	4605      	mov	r5, r0
 80024ac:	db2d      	blt.n	800250a <__smakebuf_r+0x82>
 80024ae:	466a      	mov	r2, sp
 80024b0:	f000 fa22 	bl	80028f8 <_fstat_r>
 80024b4:	2800      	cmp	r0, #0
 80024b6:	db27      	blt.n	8002508 <__smakebuf_r+0x80>
 80024b8:	9e01      	ldr	r6, [sp, #4]
 80024ba:	f406 4670 	and.w	r6, r6, #61440	; 0xf000
 80024be:	f44f 6780 	mov.w	r7, #1024	; 0x400
 80024c2:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
 80024c6:	fab6 f686 	clz	r6, r6
 80024ca:	4639      	mov	r1, r7
 80024cc:	4628      	mov	r0, r5
 80024ce:	0976      	lsrs	r6, r6, #5
 80024d0:	f7fe fe80 	bl	80011d4 <_malloc_r>
 80024d4:	b330      	cbz	r0, 8002524 <__smakebuf_r+0x9c>
 80024d6:	89a3      	ldrh	r3, [r4, #12]
 80024d8:	4a1a      	ldr	r2, [pc, #104]	; (8002544 <__smakebuf_r+0xbc>)
 80024da:	62aa      	str	r2, [r5, #40]	; 0x28
 80024dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024e0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80024e4:	81a3      	strh	r3, [r4, #12]
 80024e6:	6020      	str	r0, [r4, #0]
 80024e8:	2e00      	cmp	r6, #0
 80024ea:	d0d9      	beq.n	80024a0 <__smakebuf_r+0x18>
 80024ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024f0:	4628      	mov	r0, r5
 80024f2:	f000 fa17 	bl	8002924 <_isatty_r>
 80024f6:	2800      	cmp	r0, #0
 80024f8:	d0d2      	beq.n	80024a0 <__smakebuf_r+0x18>
 80024fa:	89a3      	ldrh	r3, [r4, #12]
 80024fc:	f023 0303 	bic.w	r3, r3, #3
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	81a3      	strh	r3, [r4, #12]
 8002506:	e7cb      	b.n	80024a0 <__smakebuf_r+0x18>
 8002508:	89a3      	ldrh	r3, [r4, #12]
 800250a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800250e:	bf14      	ite	ne
 8002510:	2740      	movne	r7, #64	; 0x40
 8002512:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 8002516:	4639      	mov	r1, r7
 8002518:	4628      	mov	r0, r5
 800251a:	2600      	movs	r6, #0
 800251c:	f7fe fe5a 	bl	80011d4 <_malloc_r>
 8002520:	2800      	cmp	r0, #0
 8002522:	d1d8      	bne.n	80024d6 <__smakebuf_r+0x4e>
 8002524:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002528:	059a      	lsls	r2, r3, #22
 800252a:	d4b9      	bmi.n	80024a0 <__smakebuf_r+0x18>
 800252c:	f023 0303 	bic.w	r3, r3, #3
 8002530:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002534:	f043 0302 	orr.w	r3, r3, #2
 8002538:	2101      	movs	r1, #1
 800253a:	e9c4 2104 	strd	r2, r1, [r4, #16]
 800253e:	81a3      	strh	r3, [r4, #12]
 8002540:	6022      	str	r2, [r4, #0]
 8002542:	e7ad      	b.n	80024a0 <__smakebuf_r+0x18>
 8002544:	08001311 	.word	0x08001311

08002548 <__swhatbuf_r>:
 8002548:	b570      	push	{r4, r5, r6, lr}
 800254a:	460c      	mov	r4, r1
 800254c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002550:	2900      	cmp	r1, #0
 8002552:	b096      	sub	sp, #88	; 0x58
 8002554:	4616      	mov	r6, r2
 8002556:	461d      	mov	r5, r3
 8002558:	db13      	blt.n	8002582 <__swhatbuf_r+0x3a>
 800255a:	466a      	mov	r2, sp
 800255c:	f000 f9cc 	bl	80028f8 <_fstat_r>
 8002560:	2800      	cmp	r0, #0
 8002562:	db0e      	blt.n	8002582 <__swhatbuf_r+0x3a>
 8002564:	9901      	ldr	r1, [sp, #4]
 8002566:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800256a:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
 800256e:	fab1 f181 	clz	r1, r1
 8002572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002576:	0949      	lsrs	r1, r1, #5
 8002578:	2000      	movs	r0, #0
 800257a:	6029      	str	r1, [r5, #0]
 800257c:	6033      	str	r3, [r6, #0]
 800257e:	b016      	add	sp, #88	; 0x58
 8002580:	bd70      	pop	{r4, r5, r6, pc}
 8002582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	061b      	lsls	r3, r3, #24
 800258a:	602a      	str	r2, [r5, #0]
 800258c:	d504      	bpl.n	8002598 <__swhatbuf_r+0x50>
 800258e:	2340      	movs	r3, #64	; 0x40
 8002590:	2000      	movs	r0, #0
 8002592:	6033      	str	r3, [r6, #0]
 8002594:	b016      	add	sp, #88	; 0x58
 8002596:	bd70      	pop	{r4, r5, r6, pc}
 8002598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800259c:	2000      	movs	r0, #0
 800259e:	6033      	str	r3, [r6, #0]
 80025a0:	b016      	add	sp, #88	; 0x58
 80025a2:	bd70      	pop	{r4, r5, r6, pc}
	...

080025b0 <memchr>:
 80025b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80025b4:	2a10      	cmp	r2, #16
 80025b6:	db2b      	blt.n	8002610 <memchr+0x60>
 80025b8:	f010 0f07 	tst.w	r0, #7
 80025bc:	d008      	beq.n	80025d0 <memchr+0x20>
 80025be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80025c2:	3a01      	subs	r2, #1
 80025c4:	428b      	cmp	r3, r1
 80025c6:	d02d      	beq.n	8002624 <memchr+0x74>
 80025c8:	f010 0f07 	tst.w	r0, #7
 80025cc:	b342      	cbz	r2, 8002620 <memchr+0x70>
 80025ce:	d1f6      	bne.n	80025be <memchr+0xe>
 80025d0:	b4f0      	push	{r4, r5, r6, r7}
 80025d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80025d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80025da:	f022 0407 	bic.w	r4, r2, #7
 80025de:	f07f 0700 	mvns.w	r7, #0
 80025e2:	2300      	movs	r3, #0
 80025e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80025e8:	3c08      	subs	r4, #8
 80025ea:	ea85 0501 	eor.w	r5, r5, r1
 80025ee:	ea86 0601 	eor.w	r6, r6, r1
 80025f2:	fa85 f547 	uadd8	r5, r5, r7
 80025f6:	faa3 f587 	sel	r5, r3, r7
 80025fa:	fa86 f647 	uadd8	r6, r6, r7
 80025fe:	faa5 f687 	sel	r6, r5, r7
 8002602:	b98e      	cbnz	r6, 8002628 <memchr+0x78>
 8002604:	d1ee      	bne.n	80025e4 <memchr+0x34>
 8002606:	bcf0      	pop	{r4, r5, r6, r7}
 8002608:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800260c:	f002 0207 	and.w	r2, r2, #7
 8002610:	b132      	cbz	r2, 8002620 <memchr+0x70>
 8002612:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002616:	3a01      	subs	r2, #1
 8002618:	ea83 0301 	eor.w	r3, r3, r1
 800261c:	b113      	cbz	r3, 8002624 <memchr+0x74>
 800261e:	d1f8      	bne.n	8002612 <memchr+0x62>
 8002620:	2000      	movs	r0, #0
 8002622:	4770      	bx	lr
 8002624:	3801      	subs	r0, #1
 8002626:	4770      	bx	lr
 8002628:	2d00      	cmp	r5, #0
 800262a:	bf06      	itte	eq
 800262c:	4635      	moveq	r5, r6
 800262e:	3803      	subeq	r0, #3
 8002630:	3807      	subne	r0, #7
 8002632:	f015 0f01 	tst.w	r5, #1
 8002636:	d107      	bne.n	8002648 <memchr+0x98>
 8002638:	3001      	adds	r0, #1
 800263a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800263e:	bf02      	ittt	eq
 8002640:	3001      	addeq	r0, #1
 8002642:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8002646:	3001      	addeq	r0, #1
 8002648:	bcf0      	pop	{r4, r5, r6, r7}
 800264a:	3801      	subs	r0, #1
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop

08002650 <memcpy>:
 8002650:	4684      	mov	ip, r0
 8002652:	ea41 0300 	orr.w	r3, r1, r0
 8002656:	f013 0303 	ands.w	r3, r3, #3
 800265a:	d16d      	bne.n	8002738 <memcpy+0xe8>
 800265c:	3a40      	subs	r2, #64	; 0x40
 800265e:	d341      	bcc.n	80026e4 <memcpy+0x94>
 8002660:	f851 3b04 	ldr.w	r3, [r1], #4
 8002664:	f840 3b04 	str.w	r3, [r0], #4
 8002668:	f851 3b04 	ldr.w	r3, [r1], #4
 800266c:	f840 3b04 	str.w	r3, [r0], #4
 8002670:	f851 3b04 	ldr.w	r3, [r1], #4
 8002674:	f840 3b04 	str.w	r3, [r0], #4
 8002678:	f851 3b04 	ldr.w	r3, [r1], #4
 800267c:	f840 3b04 	str.w	r3, [r0], #4
 8002680:	f851 3b04 	ldr.w	r3, [r1], #4
 8002684:	f840 3b04 	str.w	r3, [r0], #4
 8002688:	f851 3b04 	ldr.w	r3, [r1], #4
 800268c:	f840 3b04 	str.w	r3, [r0], #4
 8002690:	f851 3b04 	ldr.w	r3, [r1], #4
 8002694:	f840 3b04 	str.w	r3, [r0], #4
 8002698:	f851 3b04 	ldr.w	r3, [r1], #4
 800269c:	f840 3b04 	str.w	r3, [r0], #4
 80026a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80026a4:	f840 3b04 	str.w	r3, [r0], #4
 80026a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80026ac:	f840 3b04 	str.w	r3, [r0], #4
 80026b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80026b4:	f840 3b04 	str.w	r3, [r0], #4
 80026b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80026bc:	f840 3b04 	str.w	r3, [r0], #4
 80026c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80026c4:	f840 3b04 	str.w	r3, [r0], #4
 80026c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80026cc:	f840 3b04 	str.w	r3, [r0], #4
 80026d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80026d4:	f840 3b04 	str.w	r3, [r0], #4
 80026d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80026dc:	f840 3b04 	str.w	r3, [r0], #4
 80026e0:	3a40      	subs	r2, #64	; 0x40
 80026e2:	d2bd      	bcs.n	8002660 <memcpy+0x10>
 80026e4:	3230      	adds	r2, #48	; 0x30
 80026e6:	d311      	bcc.n	800270c <memcpy+0xbc>
 80026e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80026ec:	f840 3b04 	str.w	r3, [r0], #4
 80026f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80026f4:	f840 3b04 	str.w	r3, [r0], #4
 80026f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80026fc:	f840 3b04 	str.w	r3, [r0], #4
 8002700:	f851 3b04 	ldr.w	r3, [r1], #4
 8002704:	f840 3b04 	str.w	r3, [r0], #4
 8002708:	3a10      	subs	r2, #16
 800270a:	d2ed      	bcs.n	80026e8 <memcpy+0x98>
 800270c:	320c      	adds	r2, #12
 800270e:	d305      	bcc.n	800271c <memcpy+0xcc>
 8002710:	f851 3b04 	ldr.w	r3, [r1], #4
 8002714:	f840 3b04 	str.w	r3, [r0], #4
 8002718:	3a04      	subs	r2, #4
 800271a:	d2f9      	bcs.n	8002710 <memcpy+0xc0>
 800271c:	3204      	adds	r2, #4
 800271e:	d008      	beq.n	8002732 <memcpy+0xe2>
 8002720:	07d2      	lsls	r2, r2, #31
 8002722:	bf1c      	itt	ne
 8002724:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8002728:	f800 3b01 	strbne.w	r3, [r0], #1
 800272c:	d301      	bcc.n	8002732 <memcpy+0xe2>
 800272e:	880b      	ldrh	r3, [r1, #0]
 8002730:	8003      	strh	r3, [r0, #0]
 8002732:	4660      	mov	r0, ip
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	2a08      	cmp	r2, #8
 800273a:	d313      	bcc.n	8002764 <memcpy+0x114>
 800273c:	078b      	lsls	r3, r1, #30
 800273e:	d08d      	beq.n	800265c <memcpy+0xc>
 8002740:	f010 0303 	ands.w	r3, r0, #3
 8002744:	d08a      	beq.n	800265c <memcpy+0xc>
 8002746:	f1c3 0304 	rsb	r3, r3, #4
 800274a:	1ad2      	subs	r2, r2, r3
 800274c:	07db      	lsls	r3, r3, #31
 800274e:	bf1c      	itt	ne
 8002750:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8002754:	f800 3b01 	strbne.w	r3, [r0], #1
 8002758:	d380      	bcc.n	800265c <memcpy+0xc>
 800275a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800275e:	f820 3b02 	strh.w	r3, [r0], #2
 8002762:	e77b      	b.n	800265c <memcpy+0xc>
 8002764:	3a04      	subs	r2, #4
 8002766:	d3d9      	bcc.n	800271c <memcpy+0xcc>
 8002768:	3a01      	subs	r2, #1
 800276a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800276e:	f800 3b01 	strb.w	r3, [r0], #1
 8002772:	d2f9      	bcs.n	8002768 <memcpy+0x118>
 8002774:	780b      	ldrb	r3, [r1, #0]
 8002776:	7003      	strb	r3, [r0, #0]
 8002778:	784b      	ldrb	r3, [r1, #1]
 800277a:	7043      	strb	r3, [r0, #1]
 800277c:	788b      	ldrb	r3, [r1, #2]
 800277e:	7083      	strb	r3, [r0, #2]
 8002780:	4660      	mov	r0, ip
 8002782:	4770      	bx	lr

08002784 <memmove>:
 8002784:	4288      	cmp	r0, r1
 8002786:	d90d      	bls.n	80027a4 <memmove+0x20>
 8002788:	188b      	adds	r3, r1, r2
 800278a:	4283      	cmp	r3, r0
 800278c:	d90a      	bls.n	80027a4 <memmove+0x20>
 800278e:	eb00 0c02 	add.w	ip, r0, r2
 8002792:	b1ba      	cbz	r2, 80027c4 <memmove+0x40>
 8002794:	4662      	mov	r2, ip
 8002796:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 800279a:	f802 cd01 	strb.w	ip, [r2, #-1]!
 800279e:	4299      	cmp	r1, r3
 80027a0:	d1f9      	bne.n	8002796 <memmove+0x12>
 80027a2:	4770      	bx	lr
 80027a4:	2a0f      	cmp	r2, #15
 80027a6:	d80e      	bhi.n	80027c6 <memmove+0x42>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 80027ae:	b14a      	cbz	r2, 80027c4 <memmove+0x40>
 80027b0:	f10c 0c01 	add.w	ip, ip, #1
 80027b4:	3b01      	subs	r3, #1
 80027b6:	448c      	add	ip, r1
 80027b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80027bc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80027c0:	4561      	cmp	r1, ip
 80027c2:	d1f9      	bne.n	80027b8 <memmove+0x34>
 80027c4:	4770      	bx	lr
 80027c6:	ea40 0301 	orr.w	r3, r0, r1
 80027ca:	079b      	lsls	r3, r3, #30
 80027cc:	d150      	bne.n	8002870 <memmove+0xec>
 80027ce:	f1a2 0310 	sub.w	r3, r2, #16
 80027d2:	b570      	push	{r4, r5, r6, lr}
 80027d4:	f101 0c20 	add.w	ip, r1, #32
 80027d8:	f023 050f 	bic.w	r5, r3, #15
 80027dc:	f101 0e10 	add.w	lr, r1, #16
 80027e0:	f100 0410 	add.w	r4, r0, #16
 80027e4:	44ac      	add	ip, r5
 80027e6:	091b      	lsrs	r3, r3, #4
 80027e8:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 80027ec:	f844 5c10 	str.w	r5, [r4, #-16]
 80027f0:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
 80027f4:	f844 5c0c 	str.w	r5, [r4, #-12]
 80027f8:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 80027fc:	f844 5c08 	str.w	r5, [r4, #-8]
 8002800:	f85e 5c04 	ldr.w	r5, [lr, #-4]
 8002804:	f844 5c04 	str.w	r5, [r4, #-4]
 8002808:	f10e 0e10 	add.w	lr, lr, #16
 800280c:	45e6      	cmp	lr, ip
 800280e:	f104 0410 	add.w	r4, r4, #16
 8002812:	d1e9      	bne.n	80027e8 <memmove+0x64>
 8002814:	3301      	adds	r3, #1
 8002816:	f012 0f0c 	tst.w	r2, #12
 800281a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800281e:	f002 040f 	and.w	r4, r2, #15
 8002822:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8002826:	d027      	beq.n	8002878 <memmove+0xf4>
 8002828:	3c04      	subs	r4, #4
 800282a:	f024 0603 	bic.w	r6, r4, #3
 800282e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 8002832:	441e      	add	r6, r3
 8002834:	1f1c      	subs	r4, r3, #4
 8002836:	468e      	mov	lr, r1
 8002838:	f85e 5b04 	ldr.w	r5, [lr], #4
 800283c:	f844 5f04 	str.w	r5, [r4, #4]!
 8002840:	42b4      	cmp	r4, r6
 8002842:	d1f9      	bne.n	8002838 <memmove+0xb4>
 8002844:	f10c 0401 	add.w	r4, ip, #1
 8002848:	f002 0203 	and.w	r2, r2, #3
 800284c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002850:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8002854:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8002858:	b14a      	cbz	r2, 800286e <memmove+0xea>
 800285a:	f10c 0c01 	add.w	ip, ip, #1
 800285e:	3b01      	subs	r3, #1
 8002860:	448c      	add	ip, r1
 8002862:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002866:	f803 2f01 	strb.w	r2, [r3, #1]!
 800286a:	4561      	cmp	r1, ip
 800286c:	d1f9      	bne.n	8002862 <memmove+0xde>
 800286e:	bd70      	pop	{r4, r5, r6, pc}
 8002870:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8002874:	4603      	mov	r3, r0
 8002876:	e79b      	b.n	80027b0 <memmove+0x2c>
 8002878:	4622      	mov	r2, r4
 800287a:	e7eb      	b.n	8002854 <memmove+0xd0>

0800287c <_realloc_r>:
 800287c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800287e:	4614      	mov	r4, r2
 8002880:	b1f9      	cbz	r1, 80028c2 <_realloc_r+0x46>
 8002882:	b1ca      	cbz	r2, 80028b8 <_realloc_r+0x3c>
 8002884:	4606      	mov	r6, r0
 8002886:	460d      	mov	r5, r1
 8002888:	f000 f85e 	bl	8002948 <_malloc_usable_size_r>
 800288c:	42a0      	cmp	r0, r4
 800288e:	d302      	bcc.n	8002896 <_realloc_r+0x1a>
 8002890:	462f      	mov	r7, r5
 8002892:	4638      	mov	r0, r7
 8002894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002896:	4621      	mov	r1, r4
 8002898:	4630      	mov	r0, r6
 800289a:	f7fe fc9b 	bl	80011d4 <_malloc_r>
 800289e:	4607      	mov	r7, r0
 80028a0:	2800      	cmp	r0, #0
 80028a2:	d0f6      	beq.n	8002892 <_realloc_r+0x16>
 80028a4:	4622      	mov	r2, r4
 80028a6:	4629      	mov	r1, r5
 80028a8:	f7ff fed2 	bl	8002650 <memcpy>
 80028ac:	4630      	mov	r0, r6
 80028ae:	4629      	mov	r1, r5
 80028b0:	f7fe fc2e 	bl	8001110 <_free_r>
 80028b4:	4638      	mov	r0, r7
 80028b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028b8:	4627      	mov	r7, r4
 80028ba:	f7fe fc29 	bl	8001110 <_free_r>
 80028be:	4638      	mov	r0, r7
 80028c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80028c6:	4611      	mov	r1, r2
 80028c8:	f7fe bc84 	b.w	80011d4 <_malloc_r>

080028cc <_read_r>:
 80028cc:	b538      	push	{r3, r4, r5, lr}
 80028ce:	460c      	mov	r4, r1
 80028d0:	4d08      	ldr	r5, [pc, #32]	; (80028f4 <_read_r+0x28>)
 80028d2:	4684      	mov	ip, r0
 80028d4:	4611      	mov	r1, r2
 80028d6:	4620      	mov	r0, r4
 80028d8:	461a      	mov	r2, r3
 80028da:	2300      	movs	r3, #0
 80028dc:	602b      	str	r3, [r5, #0]
 80028de:	4664      	mov	r4, ip
 80028e0:	f7fe f9a8 	bl	8000c34 <_read>
 80028e4:	1c43      	adds	r3, r0, #1
 80028e6:	d000      	beq.n	80028ea <_read_r+0x1e>
 80028e8:	bd38      	pop	{r3, r4, r5, pc}
 80028ea:	682b      	ldr	r3, [r5, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0fb      	beq.n	80028e8 <_read_r+0x1c>
 80028f0:	6023      	str	r3, [r4, #0]
 80028f2:	bd38      	pop	{r3, r4, r5, pc}
 80028f4:	20000208 	.word	0x20000208

080028f8 <_fstat_r>:
 80028f8:	b570      	push	{r4, r5, r6, lr}
 80028fa:	460c      	mov	r4, r1
 80028fc:	4d08      	ldr	r5, [pc, #32]	; (8002920 <_fstat_r+0x28>)
 80028fe:	4603      	mov	r3, r0
 8002900:	2600      	movs	r6, #0
 8002902:	4620      	mov	r0, r4
 8002904:	4611      	mov	r1, r2
 8002906:	461c      	mov	r4, r3
 8002908:	602e      	str	r6, [r5, #0]
 800290a:	f7fe f9d1 	bl	8000cb0 <_fstat>
 800290e:	1c43      	adds	r3, r0, #1
 8002910:	d000      	beq.n	8002914 <_fstat_r+0x1c>
 8002912:	bd70      	pop	{r4, r5, r6, pc}
 8002914:	682b      	ldr	r3, [r5, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0fb      	beq.n	8002912 <_fstat_r+0x1a>
 800291a:	6023      	str	r3, [r4, #0]
 800291c:	bd70      	pop	{r4, r5, r6, pc}
 800291e:	bf00      	nop
 8002920:	20000208 	.word	0x20000208

08002924 <_isatty_r>:
 8002924:	b538      	push	{r3, r4, r5, lr}
 8002926:	4d07      	ldr	r5, [pc, #28]	; (8002944 <_isatty_r+0x20>)
 8002928:	2200      	movs	r2, #0
 800292a:	4604      	mov	r4, r0
 800292c:	4608      	mov	r0, r1
 800292e:	602a      	str	r2, [r5, #0]
 8002930:	f7fe f9c8 	bl	8000cc4 <_isatty>
 8002934:	1c43      	adds	r3, r0, #1
 8002936:	d000      	beq.n	800293a <_isatty_r+0x16>
 8002938:	bd38      	pop	{r3, r4, r5, pc}
 800293a:	682b      	ldr	r3, [r5, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0fb      	beq.n	8002938 <_isatty_r+0x14>
 8002940:	6023      	str	r3, [r4, #0]
 8002942:	bd38      	pop	{r3, r4, r5, pc}
 8002944:	20000208 	.word	0x20000208

08002948 <_malloc_usable_size_r>:
 8002948:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800294c:	2800      	cmp	r0, #0
 800294e:	f1a0 0004 	sub.w	r0, r0, #4
 8002952:	bfbc      	itt	lt
 8002954:	580b      	ldrlt	r3, [r1, r0]
 8002956:	18c0      	addlt	r0, r0, r3
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop

0800295c <__aeabi_uldivmod>:
 800295c:	b953      	cbnz	r3, 8002974 <__aeabi_uldivmod+0x18>
 800295e:	b94a      	cbnz	r2, 8002974 <__aeabi_uldivmod+0x18>
 8002960:	2900      	cmp	r1, #0
 8002962:	bf08      	it	eq
 8002964:	2800      	cmpeq	r0, #0
 8002966:	bf1c      	itt	ne
 8002968:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800296c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8002970:	f001 b8de 	b.w	8003b30 <__aeabi_idiv0>
 8002974:	f1ad 0c08 	sub.w	ip, sp, #8
 8002978:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800297c:	f000 f806 	bl	800298c <__udivmoddi4>
 8002980:	f8dd e004 	ldr.w	lr, [sp, #4]
 8002984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002988:	b004      	add	sp, #16
 800298a:	4770      	bx	lr

0800298c <__udivmoddi4>:
 800298c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002990:	9d08      	ldr	r5, [sp, #32]
 8002992:	4604      	mov	r4, r0
 8002994:	468e      	mov	lr, r1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d14d      	bne.n	8002a36 <__udivmoddi4+0xaa>
 800299a:	428a      	cmp	r2, r1
 800299c:	4694      	mov	ip, r2
 800299e:	d969      	bls.n	8002a74 <__udivmoddi4+0xe8>
 80029a0:	fab2 f282 	clz	r2, r2
 80029a4:	b152      	cbz	r2, 80029bc <__udivmoddi4+0x30>
 80029a6:	fa01 f302 	lsl.w	r3, r1, r2
 80029aa:	f1c2 0120 	rsb	r1, r2, #32
 80029ae:	fa20 f101 	lsr.w	r1, r0, r1
 80029b2:	fa0c fc02 	lsl.w	ip, ip, r2
 80029b6:	ea41 0e03 	orr.w	lr, r1, r3
 80029ba:	4094      	lsls	r4, r2
 80029bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80029c0:	0c21      	lsrs	r1, r4, #16
 80029c2:	fbbe f6f8 	udiv	r6, lr, r8
 80029c6:	fa1f f78c 	uxth.w	r7, ip
 80029ca:	fb08 e316 	mls	r3, r8, r6, lr
 80029ce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80029d2:	fb06 f107 	mul.w	r1, r6, r7
 80029d6:	4299      	cmp	r1, r3
 80029d8:	d90a      	bls.n	80029f0 <__udivmoddi4+0x64>
 80029da:	eb1c 0303 	adds.w	r3, ip, r3
 80029de:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80029e2:	f080 811f 	bcs.w	8002c24 <__udivmoddi4+0x298>
 80029e6:	4299      	cmp	r1, r3
 80029e8:	f240 811c 	bls.w	8002c24 <__udivmoddi4+0x298>
 80029ec:	3e02      	subs	r6, #2
 80029ee:	4463      	add	r3, ip
 80029f0:	1a5b      	subs	r3, r3, r1
 80029f2:	b2a4      	uxth	r4, r4
 80029f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80029f8:	fb08 3310 	mls	r3, r8, r0, r3
 80029fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8002a00:	fb00 f707 	mul.w	r7, r0, r7
 8002a04:	42a7      	cmp	r7, r4
 8002a06:	d90a      	bls.n	8002a1e <__udivmoddi4+0x92>
 8002a08:	eb1c 0404 	adds.w	r4, ip, r4
 8002a0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002a10:	f080 810a 	bcs.w	8002c28 <__udivmoddi4+0x29c>
 8002a14:	42a7      	cmp	r7, r4
 8002a16:	f240 8107 	bls.w	8002c28 <__udivmoddi4+0x29c>
 8002a1a:	4464      	add	r4, ip
 8002a1c:	3802      	subs	r0, #2
 8002a1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8002a22:	1be4      	subs	r4, r4, r7
 8002a24:	2600      	movs	r6, #0
 8002a26:	b11d      	cbz	r5, 8002a30 <__udivmoddi4+0xa4>
 8002a28:	40d4      	lsrs	r4, r2
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	e9c5 4300 	strd	r4, r3, [r5]
 8002a30:	4631      	mov	r1, r6
 8002a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a36:	428b      	cmp	r3, r1
 8002a38:	d909      	bls.n	8002a4e <__udivmoddi4+0xc2>
 8002a3a:	2d00      	cmp	r5, #0
 8002a3c:	f000 80ef 	beq.w	8002c1e <__udivmoddi4+0x292>
 8002a40:	2600      	movs	r6, #0
 8002a42:	e9c5 0100 	strd	r0, r1, [r5]
 8002a46:	4630      	mov	r0, r6
 8002a48:	4631      	mov	r1, r6
 8002a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a4e:	fab3 f683 	clz	r6, r3
 8002a52:	2e00      	cmp	r6, #0
 8002a54:	d14a      	bne.n	8002aec <__udivmoddi4+0x160>
 8002a56:	428b      	cmp	r3, r1
 8002a58:	d302      	bcc.n	8002a60 <__udivmoddi4+0xd4>
 8002a5a:	4282      	cmp	r2, r0
 8002a5c:	f200 80f9 	bhi.w	8002c52 <__udivmoddi4+0x2c6>
 8002a60:	1a84      	subs	r4, r0, r2
 8002a62:	eb61 0303 	sbc.w	r3, r1, r3
 8002a66:	2001      	movs	r0, #1
 8002a68:	469e      	mov	lr, r3
 8002a6a:	2d00      	cmp	r5, #0
 8002a6c:	d0e0      	beq.n	8002a30 <__udivmoddi4+0xa4>
 8002a6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8002a72:	e7dd      	b.n	8002a30 <__udivmoddi4+0xa4>
 8002a74:	b902      	cbnz	r2, 8002a78 <__udivmoddi4+0xec>
 8002a76:	deff      	udf	#255	; 0xff
 8002a78:	fab2 f282 	clz	r2, r2
 8002a7c:	2a00      	cmp	r2, #0
 8002a7e:	f040 8092 	bne.w	8002ba6 <__udivmoddi4+0x21a>
 8002a82:	eba1 010c 	sub.w	r1, r1, ip
 8002a86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8002a8a:	fa1f fe8c 	uxth.w	lr, ip
 8002a8e:	2601      	movs	r6, #1
 8002a90:	0c20      	lsrs	r0, r4, #16
 8002a92:	fbb1 f3f7 	udiv	r3, r1, r7
 8002a96:	fb07 1113 	mls	r1, r7, r3, r1
 8002a9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8002a9e:	fb0e f003 	mul.w	r0, lr, r3
 8002aa2:	4288      	cmp	r0, r1
 8002aa4:	d908      	bls.n	8002ab8 <__udivmoddi4+0x12c>
 8002aa6:	eb1c 0101 	adds.w	r1, ip, r1
 8002aaa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8002aae:	d202      	bcs.n	8002ab6 <__udivmoddi4+0x12a>
 8002ab0:	4288      	cmp	r0, r1
 8002ab2:	f200 80cb 	bhi.w	8002c4c <__udivmoddi4+0x2c0>
 8002ab6:	4643      	mov	r3, r8
 8002ab8:	1a09      	subs	r1, r1, r0
 8002aba:	b2a4      	uxth	r4, r4
 8002abc:	fbb1 f0f7 	udiv	r0, r1, r7
 8002ac0:	fb07 1110 	mls	r1, r7, r0, r1
 8002ac4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8002ac8:	fb0e fe00 	mul.w	lr, lr, r0
 8002acc:	45a6      	cmp	lr, r4
 8002ace:	d908      	bls.n	8002ae2 <__udivmoddi4+0x156>
 8002ad0:	eb1c 0404 	adds.w	r4, ip, r4
 8002ad4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8002ad8:	d202      	bcs.n	8002ae0 <__udivmoddi4+0x154>
 8002ada:	45a6      	cmp	lr, r4
 8002adc:	f200 80bb 	bhi.w	8002c56 <__udivmoddi4+0x2ca>
 8002ae0:	4608      	mov	r0, r1
 8002ae2:	eba4 040e 	sub.w	r4, r4, lr
 8002ae6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002aea:	e79c      	b.n	8002a26 <__udivmoddi4+0x9a>
 8002aec:	f1c6 0720 	rsb	r7, r6, #32
 8002af0:	40b3      	lsls	r3, r6
 8002af2:	fa22 fc07 	lsr.w	ip, r2, r7
 8002af6:	ea4c 0c03 	orr.w	ip, ip, r3
 8002afa:	fa20 f407 	lsr.w	r4, r0, r7
 8002afe:	fa01 f306 	lsl.w	r3, r1, r6
 8002b02:	431c      	orrs	r4, r3
 8002b04:	40f9      	lsrs	r1, r7
 8002b06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8002b0a:	fa00 f306 	lsl.w	r3, r0, r6
 8002b0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8002b12:	0c20      	lsrs	r0, r4, #16
 8002b14:	fa1f fe8c 	uxth.w	lr, ip
 8002b18:	fb09 1118 	mls	r1, r9, r8, r1
 8002b1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8002b20:	fb08 f00e 	mul.w	r0, r8, lr
 8002b24:	4288      	cmp	r0, r1
 8002b26:	fa02 f206 	lsl.w	r2, r2, r6
 8002b2a:	d90b      	bls.n	8002b44 <__udivmoddi4+0x1b8>
 8002b2c:	eb1c 0101 	adds.w	r1, ip, r1
 8002b30:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8002b34:	f080 8088 	bcs.w	8002c48 <__udivmoddi4+0x2bc>
 8002b38:	4288      	cmp	r0, r1
 8002b3a:	f240 8085 	bls.w	8002c48 <__udivmoddi4+0x2bc>
 8002b3e:	f1a8 0802 	sub.w	r8, r8, #2
 8002b42:	4461      	add	r1, ip
 8002b44:	1a09      	subs	r1, r1, r0
 8002b46:	b2a4      	uxth	r4, r4
 8002b48:	fbb1 f0f9 	udiv	r0, r1, r9
 8002b4c:	fb09 1110 	mls	r1, r9, r0, r1
 8002b50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8002b54:	fb00 fe0e 	mul.w	lr, r0, lr
 8002b58:	458e      	cmp	lr, r1
 8002b5a:	d908      	bls.n	8002b6e <__udivmoddi4+0x1e2>
 8002b5c:	eb1c 0101 	adds.w	r1, ip, r1
 8002b60:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8002b64:	d26c      	bcs.n	8002c40 <__udivmoddi4+0x2b4>
 8002b66:	458e      	cmp	lr, r1
 8002b68:	d96a      	bls.n	8002c40 <__udivmoddi4+0x2b4>
 8002b6a:	3802      	subs	r0, #2
 8002b6c:	4461      	add	r1, ip
 8002b6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8002b72:	fba0 9402 	umull	r9, r4, r0, r2
 8002b76:	eba1 010e 	sub.w	r1, r1, lr
 8002b7a:	42a1      	cmp	r1, r4
 8002b7c:	46c8      	mov	r8, r9
 8002b7e:	46a6      	mov	lr, r4
 8002b80:	d356      	bcc.n	8002c30 <__udivmoddi4+0x2a4>
 8002b82:	d053      	beq.n	8002c2c <__udivmoddi4+0x2a0>
 8002b84:	b15d      	cbz	r5, 8002b9e <__udivmoddi4+0x212>
 8002b86:	ebb3 0208 	subs.w	r2, r3, r8
 8002b8a:	eb61 010e 	sbc.w	r1, r1, lr
 8002b8e:	fa01 f707 	lsl.w	r7, r1, r7
 8002b92:	fa22 f306 	lsr.w	r3, r2, r6
 8002b96:	40f1      	lsrs	r1, r6
 8002b98:	431f      	orrs	r7, r3
 8002b9a:	e9c5 7100 	strd	r7, r1, [r5]
 8002b9e:	2600      	movs	r6, #0
 8002ba0:	4631      	mov	r1, r6
 8002ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ba6:	f1c2 0320 	rsb	r3, r2, #32
 8002baa:	40d8      	lsrs	r0, r3
 8002bac:	fa0c fc02 	lsl.w	ip, ip, r2
 8002bb0:	fa21 f303 	lsr.w	r3, r1, r3
 8002bb4:	4091      	lsls	r1, r2
 8002bb6:	4301      	orrs	r1, r0
 8002bb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8002bbc:	fa1f fe8c 	uxth.w	lr, ip
 8002bc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8002bc4:	fb07 3610 	mls	r6, r7, r0, r3
 8002bc8:	0c0b      	lsrs	r3, r1, #16
 8002bca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8002bce:	fb00 f60e 	mul.w	r6, r0, lr
 8002bd2:	429e      	cmp	r6, r3
 8002bd4:	fa04 f402 	lsl.w	r4, r4, r2
 8002bd8:	d908      	bls.n	8002bec <__udivmoddi4+0x260>
 8002bda:	eb1c 0303 	adds.w	r3, ip, r3
 8002bde:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8002be2:	d22f      	bcs.n	8002c44 <__udivmoddi4+0x2b8>
 8002be4:	429e      	cmp	r6, r3
 8002be6:	d92d      	bls.n	8002c44 <__udivmoddi4+0x2b8>
 8002be8:	3802      	subs	r0, #2
 8002bea:	4463      	add	r3, ip
 8002bec:	1b9b      	subs	r3, r3, r6
 8002bee:	b289      	uxth	r1, r1
 8002bf0:	fbb3 f6f7 	udiv	r6, r3, r7
 8002bf4:	fb07 3316 	mls	r3, r7, r6, r3
 8002bf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8002bfc:	fb06 f30e 	mul.w	r3, r6, lr
 8002c00:	428b      	cmp	r3, r1
 8002c02:	d908      	bls.n	8002c16 <__udivmoddi4+0x28a>
 8002c04:	eb1c 0101 	adds.w	r1, ip, r1
 8002c08:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8002c0c:	d216      	bcs.n	8002c3c <__udivmoddi4+0x2b0>
 8002c0e:	428b      	cmp	r3, r1
 8002c10:	d914      	bls.n	8002c3c <__udivmoddi4+0x2b0>
 8002c12:	3e02      	subs	r6, #2
 8002c14:	4461      	add	r1, ip
 8002c16:	1ac9      	subs	r1, r1, r3
 8002c18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8002c1c:	e738      	b.n	8002a90 <__udivmoddi4+0x104>
 8002c1e:	462e      	mov	r6, r5
 8002c20:	4628      	mov	r0, r5
 8002c22:	e705      	b.n	8002a30 <__udivmoddi4+0xa4>
 8002c24:	4606      	mov	r6, r0
 8002c26:	e6e3      	b.n	80029f0 <__udivmoddi4+0x64>
 8002c28:	4618      	mov	r0, r3
 8002c2a:	e6f8      	b.n	8002a1e <__udivmoddi4+0x92>
 8002c2c:	454b      	cmp	r3, r9
 8002c2e:	d2a9      	bcs.n	8002b84 <__udivmoddi4+0x1f8>
 8002c30:	ebb9 0802 	subs.w	r8, r9, r2
 8002c34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8002c38:	3801      	subs	r0, #1
 8002c3a:	e7a3      	b.n	8002b84 <__udivmoddi4+0x1f8>
 8002c3c:	4646      	mov	r6, r8
 8002c3e:	e7ea      	b.n	8002c16 <__udivmoddi4+0x28a>
 8002c40:	4620      	mov	r0, r4
 8002c42:	e794      	b.n	8002b6e <__udivmoddi4+0x1e2>
 8002c44:	4640      	mov	r0, r8
 8002c46:	e7d1      	b.n	8002bec <__udivmoddi4+0x260>
 8002c48:	46d0      	mov	r8, sl
 8002c4a:	e77b      	b.n	8002b44 <__udivmoddi4+0x1b8>
 8002c4c:	3b02      	subs	r3, #2
 8002c4e:	4461      	add	r1, ip
 8002c50:	e732      	b.n	8002ab8 <__udivmoddi4+0x12c>
 8002c52:	4630      	mov	r0, r6
 8002c54:	e709      	b.n	8002a6a <__udivmoddi4+0xde>
 8002c56:	4464      	add	r4, ip
 8002c58:	3802      	subs	r0, #2
 8002c5a:	e742      	b.n	8002ae2 <__udivmoddi4+0x156>

08002c5c <selfrel_offset31>:
 8002c5c:	6803      	ldr	r3, [r0, #0]
 8002c5e:	005a      	lsls	r2, r3, #1
 8002c60:	bf4c      	ite	mi
 8002c62:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8002c66:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8002c6a:	4418      	add	r0, r3
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop

08002c70 <search_EIT_table>:
 8002c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c74:	b329      	cbz	r1, 8002cc2 <search_EIT_table+0x52>
 8002c76:	1e4f      	subs	r7, r1, #1
 8002c78:	4604      	mov	r4, r0
 8002c7a:	4615      	mov	r5, r2
 8002c7c:	463e      	mov	r6, r7
 8002c7e:	f04f 0800 	mov.w	r8, #0
 8002c82:	eb08 0106 	add.w	r1, r8, r6
 8002c86:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8002c8a:	1049      	asrs	r1, r1, #1
 8002c8c:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8002c90:	4648      	mov	r0, r9
 8002c92:	f7ff ffe3 	bl	8002c5c <selfrel_offset31>
 8002c96:	4603      	mov	r3, r0
 8002c98:	00c8      	lsls	r0, r1, #3
 8002c9a:	3008      	adds	r0, #8
 8002c9c:	428f      	cmp	r7, r1
 8002c9e:	4420      	add	r0, r4
 8002ca0:	d009      	beq.n	8002cb6 <search_EIT_table+0x46>
 8002ca2:	42ab      	cmp	r3, r5
 8002ca4:	d809      	bhi.n	8002cba <search_EIT_table+0x4a>
 8002ca6:	f7ff ffd9 	bl	8002c5c <selfrel_offset31>
 8002caa:	3801      	subs	r0, #1
 8002cac:	42a8      	cmp	r0, r5
 8002cae:	d20a      	bcs.n	8002cc6 <search_EIT_table+0x56>
 8002cb0:	f101 0801 	add.w	r8, r1, #1
 8002cb4:	e7e5      	b.n	8002c82 <search_EIT_table+0x12>
 8002cb6:	42ab      	cmp	r3, r5
 8002cb8:	d905      	bls.n	8002cc6 <search_EIT_table+0x56>
 8002cba:	4588      	cmp	r8, r1
 8002cbc:	d001      	beq.n	8002cc2 <search_EIT_table+0x52>
 8002cbe:	1e4e      	subs	r6, r1, #1
 8002cc0:	e7df      	b.n	8002c82 <search_EIT_table+0x12>
 8002cc2:	f04f 0900 	mov.w	r9, #0
 8002cc6:	4648      	mov	r0, r9
 8002cc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002ccc <__gnu_unwind_get_pr_addr>:
 8002ccc:	2801      	cmp	r0, #1
 8002cce:	d007      	beq.n	8002ce0 <__gnu_unwind_get_pr_addr+0x14>
 8002cd0:	2802      	cmp	r0, #2
 8002cd2:	d007      	beq.n	8002ce4 <__gnu_unwind_get_pr_addr+0x18>
 8002cd4:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <__gnu_unwind_get_pr_addr+0x1c>)
 8002cd6:	2800      	cmp	r0, #0
 8002cd8:	bf0c      	ite	eq
 8002cda:	4618      	moveq	r0, r3
 8002cdc:	2000      	movne	r0, #0
 8002cde:	4770      	bx	lr
 8002ce0:	4802      	ldr	r0, [pc, #8]	; (8002cec <__gnu_unwind_get_pr_addr+0x20>)
 8002ce2:	4770      	bx	lr
 8002ce4:	4802      	ldr	r0, [pc, #8]	; (8002cf0 <__gnu_unwind_get_pr_addr+0x24>)
 8002ce6:	4770      	bx	lr
 8002ce8:	080033a5 	.word	0x080033a5
 8002cec:	080033a9 	.word	0x080033a9
 8002cf0:	080033ad 	.word	0x080033ad

08002cf4 <get_eit_entry>:
 8002cf4:	b530      	push	{r4, r5, lr}
 8002cf6:	4b23      	ldr	r3, [pc, #140]	; (8002d84 <get_eit_entry+0x90>)
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	4604      	mov	r4, r0
 8002cfc:	1e8d      	subs	r5, r1, #2
 8002cfe:	b33b      	cbz	r3, 8002d50 <get_eit_entry+0x5c>
 8002d00:	a901      	add	r1, sp, #4
 8002d02:	4628      	mov	r0, r5
 8002d04:	f3af 8000 	nop.w
 8002d08:	b1e8      	cbz	r0, 8002d46 <get_eit_entry+0x52>
 8002d0a:	9901      	ldr	r1, [sp, #4]
 8002d0c:	462a      	mov	r2, r5
 8002d0e:	f7ff ffaf 	bl	8002c70 <search_EIT_table>
 8002d12:	4601      	mov	r1, r0
 8002d14:	b1b8      	cbz	r0, 8002d46 <get_eit_entry+0x52>
 8002d16:	f7ff ffa1 	bl	8002c5c <selfrel_offset31>
 8002d1a:	684b      	ldr	r3, [r1, #4]
 8002d1c:	64a0      	str	r0, [r4, #72]	; 0x48
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d02c      	beq.n	8002d7c <get_eit_entry+0x88>
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f101 0004 	add.w	r0, r1, #4
 8002d28:	db24      	blt.n	8002d74 <get_eit_entry+0x80>
 8002d2a:	f7ff ff97 	bl	8002c5c <selfrel_offset31>
 8002d2e:	2300      	movs	r3, #0
 8002d30:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8002d34:	6803      	ldr	r3, [r0, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	db11      	blt.n	8002d5e <get_eit_entry+0x6a>
 8002d3a:	f7ff ff8f 	bl	8002c5c <selfrel_offset31>
 8002d3e:	6120      	str	r0, [r4, #16]
 8002d40:	2000      	movs	r0, #0
 8002d42:	b003      	add	sp, #12
 8002d44:	bd30      	pop	{r4, r5, pc}
 8002d46:	2300      	movs	r3, #0
 8002d48:	2009      	movs	r0, #9
 8002d4a:	6123      	str	r3, [r4, #16]
 8002d4c:	b003      	add	sp, #12
 8002d4e:	bd30      	pop	{r4, r5, pc}
 8002d50:	4b0d      	ldr	r3, [pc, #52]	; (8002d88 <get_eit_entry+0x94>)
 8002d52:	490e      	ldr	r1, [pc, #56]	; (8002d8c <get_eit_entry+0x98>)
 8002d54:	1ac9      	subs	r1, r1, r3
 8002d56:	10c9      	asrs	r1, r1, #3
 8002d58:	4618      	mov	r0, r3
 8002d5a:	9101      	str	r1, [sp, #4]
 8002d5c:	e7d6      	b.n	8002d0c <get_eit_entry+0x18>
 8002d5e:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8002d62:	f7ff ffb3 	bl	8002ccc <__gnu_unwind_get_pr_addr>
 8002d66:	2800      	cmp	r0, #0
 8002d68:	6120      	str	r0, [r4, #16]
 8002d6a:	bf14      	ite	ne
 8002d6c:	2000      	movne	r0, #0
 8002d6e:	2009      	moveq	r0, #9
 8002d70:	b003      	add	sp, #12
 8002d72:	bd30      	pop	{r4, r5, pc}
 8002d74:	2301      	movs	r3, #1
 8002d76:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8002d7a:	e7db      	b.n	8002d34 <get_eit_entry+0x40>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	6123      	str	r3, [r4, #16]
 8002d80:	2005      	movs	r0, #5
 8002d82:	e7de      	b.n	8002d42 <get_eit_entry+0x4e>
 8002d84:	00000000 	.word	0x00000000
 8002d88:	0800b5b0 	.word	0x0800b5b0
 8002d8c:	0800b678 	.word	0x0800b678

08002d90 <restore_non_core_regs>:
 8002d90:	6803      	ldr	r3, [r0, #0]
 8002d92:	07da      	lsls	r2, r3, #31
 8002d94:	b510      	push	{r4, lr}
 8002d96:	4604      	mov	r4, r0
 8002d98:	d406      	bmi.n	8002da8 <restore_non_core_regs+0x18>
 8002d9a:	079b      	lsls	r3, r3, #30
 8002d9c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8002da0:	d509      	bpl.n	8002db6 <restore_non_core_regs+0x26>
 8002da2:	f000 fc5b 	bl	800365c <__gnu_Unwind_Restore_VFP_D>
 8002da6:	6823      	ldr	r3, [r4, #0]
 8002da8:	0759      	lsls	r1, r3, #29
 8002daa:	d509      	bpl.n	8002dc0 <restore_non_core_regs+0x30>
 8002dac:	071a      	lsls	r2, r3, #28
 8002dae:	d50e      	bpl.n	8002dce <restore_non_core_regs+0x3e>
 8002db0:	06db      	lsls	r3, r3, #27
 8002db2:	d513      	bpl.n	8002ddc <restore_non_core_regs+0x4c>
 8002db4:	bd10      	pop	{r4, pc}
 8002db6:	f000 fc49 	bl	800364c <__gnu_Unwind_Restore_VFP>
 8002dba:	6823      	ldr	r3, [r4, #0]
 8002dbc:	0759      	lsls	r1, r3, #29
 8002dbe:	d4f5      	bmi.n	8002dac <restore_non_core_regs+0x1c>
 8002dc0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002dc4:	f000 fc52 	bl	800366c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8002dc8:	6823      	ldr	r3, [r4, #0]
 8002dca:	071a      	lsls	r2, r3, #28
 8002dcc:	d4f0      	bmi.n	8002db0 <restore_non_core_regs+0x20>
 8002dce:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8002dd2:	f000 fc53 	bl	800367c <__gnu_Unwind_Restore_WMMXD>
 8002dd6:	6823      	ldr	r3, [r4, #0]
 8002dd8:	06db      	lsls	r3, r3, #27
 8002dda:	d4eb      	bmi.n	8002db4 <restore_non_core_regs+0x24>
 8002ddc:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8002de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002de4:	f000 bc8e 	b.w	8003704 <__gnu_Unwind_Restore_WMMXC>

08002de8 <__gnu_unwind_24bit.constprop.0>:
 8002de8:	2009      	movs	r0, #9
 8002dea:	4770      	bx	lr

08002dec <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8002dec:	4603      	mov	r3, r0
 8002dee:	6800      	ldr	r0, [r0, #0]
 8002df0:	b100      	cbz	r0, 8002df4 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 8002df2:	4418      	add	r0, r3
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop

08002df8 <_Unwind_DebugHook>:
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop

08002dfc <unwind_phase2>:
 8002dfc:	b570      	push	{r4, r5, r6, lr}
 8002dfe:	4604      	mov	r4, r0
 8002e00:	460e      	mov	r6, r1
 8002e02:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8002e04:	4620      	mov	r0, r4
 8002e06:	f7ff ff75 	bl	8002cf4 <get_eit_entry>
 8002e0a:	4605      	mov	r5, r0
 8002e0c:	b988      	cbnz	r0, 8002e32 <unwind_phase2+0x36>
 8002e0e:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8002e10:	6162      	str	r2, [r4, #20]
 8002e12:	6923      	ldr	r3, [r4, #16]
 8002e14:	4632      	mov	r2, r6
 8002e16:	4621      	mov	r1, r4
 8002e18:	2001      	movs	r0, #1
 8002e1a:	4798      	blx	r3
 8002e1c:	2808      	cmp	r0, #8
 8002e1e:	d0f0      	beq.n	8002e02 <unwind_phase2+0x6>
 8002e20:	2807      	cmp	r0, #7
 8002e22:	d106      	bne.n	8002e32 <unwind_phase2+0x36>
 8002e24:	4628      	mov	r0, r5
 8002e26:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8002e28:	f7ff ffe6 	bl	8002df8 <_Unwind_DebugHook>
 8002e2c:	1d30      	adds	r0, r6, #4
 8002e2e:	f000 fc01 	bl	8003634 <__restore_core_regs>
 8002e32:	f000 fe7f 	bl	8003b34 <abort>
 8002e36:	bf00      	nop

08002e38 <unwind_phase2_forced>:
 8002e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e3c:	1d0d      	adds	r5, r1, #4
 8002e3e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8002e42:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8002e46:	4607      	mov	r7, r0
 8002e48:	4614      	mov	r4, r2
 8002e4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e4c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8002e50:	f10d 0c0c 	add.w	ip, sp, #12
 8002e54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002e58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e5a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002e5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002e64:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002e68:	ae02      	add	r6, sp, #8
 8002e6a:	f04f 0e00 	mov.w	lr, #0
 8002e6e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8002e72:	f8c6 e000 	str.w	lr, [r6]
 8002e76:	e020      	b.n	8002eba <unwind_phase2_forced+0x82>
 8002e78:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002e80:	4631      	mov	r1, r6
 8002e82:	a87a      	add	r0, sp, #488	; 0x1e8
 8002e84:	f7ff fbe4 	bl	8002650 <memcpy>
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	aa7a      	add	r2, sp, #488	; 0x1e8
 8002e8c:	4639      	mov	r1, r7
 8002e8e:	4650      	mov	r0, sl
 8002e90:	4798      	blx	r3
 8002e92:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8002e94:	6473      	str	r3, [r6, #68]	; 0x44
 8002e96:	4621      	mov	r1, r4
 8002e98:	e9cd 6900 	strd	r6, r9, [sp]
 8002e9c:	4605      	mov	r5, r0
 8002e9e:	463b      	mov	r3, r7
 8002ea0:	463a      	mov	r2, r7
 8002ea2:	2001      	movs	r0, #1
 8002ea4:	47c0      	blx	r8
 8002ea6:	4604      	mov	r4, r0
 8002ea8:	b9e0      	cbnz	r0, 8002ee4 <unwind_phase2_forced+0xac>
 8002eaa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002eae:	a97a      	add	r1, sp, #488	; 0x1e8
 8002eb0:	4630      	mov	r0, r6
 8002eb2:	f7ff fbcd 	bl	8002650 <memcpy>
 8002eb6:	2d08      	cmp	r5, #8
 8002eb8:	d11a      	bne.n	8002ef0 <unwind_phase2_forced+0xb8>
 8002eba:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8002ebc:	4638      	mov	r0, r7
 8002ebe:	f7ff ff19 	bl	8002cf4 <get_eit_entry>
 8002ec2:	3409      	adds	r4, #9
 8002ec4:	fa5f fa84 	uxtb.w	sl, r4
 8002ec8:	4605      	mov	r5, r0
 8002eca:	2800      	cmp	r0, #0
 8002ecc:	d0d4      	beq.n	8002e78 <unwind_phase2_forced+0x40>
 8002ece:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8002ed0:	6473      	str	r3, [r6, #68]	; 0x44
 8002ed2:	463a      	mov	r2, r7
 8002ed4:	e9cd 6900 	strd	r6, r9, [sp]
 8002ed8:	463b      	mov	r3, r7
 8002eda:	f04a 0110 	orr.w	r1, sl, #16
 8002ede:	2001      	movs	r0, #1
 8002ee0:	47c0      	blx	r8
 8002ee2:	b100      	cbz	r0, 8002ee6 <unwind_phase2_forced+0xae>
 8002ee4:	2509      	movs	r5, #9
 8002ee6:	4628      	mov	r0, r5
 8002ee8:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8002eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ef0:	2d07      	cmp	r5, #7
 8002ef2:	d1f7      	bne.n	8002ee4 <unwind_phase2_forced+0xac>
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8002ef8:	f7ff ff7e 	bl	8002df8 <_Unwind_DebugHook>
 8002efc:	a803      	add	r0, sp, #12
 8002efe:	f000 fb99 	bl	8003634 <__restore_core_regs>
 8002f02:	bf00      	nop

08002f04 <_Unwind_GetCFA>:
 8002f04:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8002f06:	4770      	bx	lr

08002f08 <__gnu_Unwind_RaiseException>:
 8002f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f0a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8002f0c:	640b      	str	r3, [r1, #64]	; 0x40
 8002f0e:	f101 0c04 	add.w	ip, r1, #4
 8002f12:	460e      	mov	r6, r1
 8002f14:	4605      	mov	r5, r0
 8002f16:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002f1a:	b0f9      	sub	sp, #484	; 0x1e4
 8002f1c:	ac01      	add	r4, sp, #4
 8002f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f20:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002f24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f26:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f2c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8002f30:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002f34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002f38:	9700      	str	r7, [sp, #0]
 8002f3a:	e006      	b.n	8002f4a <__gnu_Unwind_RaiseException+0x42>
 8002f3c:	692b      	ldr	r3, [r5, #16]
 8002f3e:	466a      	mov	r2, sp
 8002f40:	4629      	mov	r1, r5
 8002f42:	4798      	blx	r3
 8002f44:	2808      	cmp	r0, #8
 8002f46:	4604      	mov	r4, r0
 8002f48:	d108      	bne.n	8002f5c <__gnu_Unwind_RaiseException+0x54>
 8002f4a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002f4c:	4628      	mov	r0, r5
 8002f4e:	f7ff fed1 	bl	8002cf4 <get_eit_entry>
 8002f52:	2800      	cmp	r0, #0
 8002f54:	d0f2      	beq.n	8002f3c <__gnu_Unwind_RaiseException+0x34>
 8002f56:	2009      	movs	r0, #9
 8002f58:	b079      	add	sp, #484	; 0x1e4
 8002f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f5c:	4668      	mov	r0, sp
 8002f5e:	f7ff ff17 	bl	8002d90 <restore_non_core_regs>
 8002f62:	2c06      	cmp	r4, #6
 8002f64:	d1f7      	bne.n	8002f56 <__gnu_Unwind_RaiseException+0x4e>
 8002f66:	4631      	mov	r1, r6
 8002f68:	4628      	mov	r0, r5
 8002f6a:	f7ff ff47 	bl	8002dfc <unwind_phase2>
 8002f6e:	bf00      	nop

08002f70 <__gnu_Unwind_ForcedUnwind>:
 8002f70:	60c1      	str	r1, [r0, #12]
 8002f72:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002f74:	6182      	str	r2, [r0, #24]
 8002f76:	6419      	str	r1, [r3, #64]	; 0x40
 8002f78:	2200      	movs	r2, #0
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	e75c      	b.n	8002e38 <unwind_phase2_forced>
 8002f7e:	bf00      	nop

08002f80 <__gnu_Unwind_Resume>:
 8002f80:	b570      	push	{r4, r5, r6, lr}
 8002f82:	68c6      	ldr	r6, [r0, #12]
 8002f84:	6943      	ldr	r3, [r0, #20]
 8002f86:	640b      	str	r3, [r1, #64]	; 0x40
 8002f88:	b9ae      	cbnz	r6, 8002fb6 <__gnu_Unwind_Resume+0x36>
 8002f8a:	6903      	ldr	r3, [r0, #16]
 8002f8c:	460a      	mov	r2, r1
 8002f8e:	4604      	mov	r4, r0
 8002f90:	460d      	mov	r5, r1
 8002f92:	4601      	mov	r1, r0
 8002f94:	2002      	movs	r0, #2
 8002f96:	4798      	blx	r3
 8002f98:	2807      	cmp	r0, #7
 8002f9a:	d005      	beq.n	8002fa8 <__gnu_Unwind_Resume+0x28>
 8002f9c:	2808      	cmp	r0, #8
 8002f9e:	d10f      	bne.n	8002fc0 <__gnu_Unwind_Resume+0x40>
 8002fa0:	4629      	mov	r1, r5
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	f7ff ff2a 	bl	8002dfc <unwind_phase2>
 8002fa8:	4630      	mov	r0, r6
 8002faa:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8002fac:	f7ff ff24 	bl	8002df8 <_Unwind_DebugHook>
 8002fb0:	1d28      	adds	r0, r5, #4
 8002fb2:	f000 fb3f 	bl	8003634 <__restore_core_regs>
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f7ff ff3e 	bl	8002e38 <unwind_phase2_forced>
 8002fbc:	f000 fdba 	bl	8003b34 <abort>
 8002fc0:	f000 fdb8 	bl	8003b34 <abort>

08002fc4 <__gnu_Unwind_Resume_or_Rethrow>:
 8002fc4:	68c2      	ldr	r2, [r0, #12]
 8002fc6:	b11a      	cbz	r2, 8002fd0 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8002fc8:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8002fca:	640a      	str	r2, [r1, #64]	; 0x40
 8002fcc:	2200      	movs	r2, #0
 8002fce:	e733      	b.n	8002e38 <unwind_phase2_forced>
 8002fd0:	e79a      	b.n	8002f08 <__gnu_Unwind_RaiseException>
 8002fd2:	bf00      	nop

08002fd4 <_Unwind_Complete>:
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop

08002fd8 <_Unwind_DeleteException>:
 8002fd8:	6883      	ldr	r3, [r0, #8]
 8002fda:	4601      	mov	r1, r0
 8002fdc:	b10b      	cbz	r3, 8002fe2 <_Unwind_DeleteException+0xa>
 8002fde:	2001      	movs	r0, #1
 8002fe0:	4718      	bx	r3
 8002fe2:	4770      	bx	lr

08002fe4 <_Unwind_VRS_Get>:
 8002fe4:	2901      	cmp	r1, #1
 8002fe6:	d012      	beq.n	800300e <_Unwind_VRS_Get+0x2a>
 8002fe8:	d809      	bhi.n	8002ffe <_Unwind_VRS_Get+0x1a>
 8002fea:	b973      	cbnz	r3, 800300a <_Unwind_VRS_Get+0x26>
 8002fec:	2a0f      	cmp	r2, #15
 8002fee:	d80c      	bhi.n	800300a <_Unwind_VRS_Get+0x26>
 8002ff0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	6853      	ldr	r3, [r2, #4]
 8002ff8:	9a00      	ldr	r2, [sp, #0]
 8002ffa:	6013      	str	r3, [r2, #0]
 8002ffc:	4770      	bx	lr
 8002ffe:	3903      	subs	r1, #3
 8003000:	2901      	cmp	r1, #1
 8003002:	bf94      	ite	ls
 8003004:	2001      	movls	r0, #1
 8003006:	2002      	movhi	r0, #2
 8003008:	4770      	bx	lr
 800300a:	2002      	movs	r0, #2
 800300c:	4770      	bx	lr
 800300e:	4608      	mov	r0, r1
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop

08003014 <_Unwind_GetGR>:
 8003014:	b500      	push	{lr}
 8003016:	b085      	sub	sp, #20
 8003018:	460a      	mov	r2, r1
 800301a:	2300      	movs	r3, #0
 800301c:	a903      	add	r1, sp, #12
 800301e:	9100      	str	r1, [sp, #0]
 8003020:	4619      	mov	r1, r3
 8003022:	f7ff ffdf 	bl	8002fe4 <_Unwind_VRS_Get>
 8003026:	9803      	ldr	r0, [sp, #12]
 8003028:	b005      	add	sp, #20
 800302a:	f85d fb04 	ldr.w	pc, [sp], #4
 800302e:	bf00      	nop

08003030 <_Unwind_VRS_Set>:
 8003030:	2901      	cmp	r1, #1
 8003032:	d012      	beq.n	800305a <_Unwind_VRS_Set+0x2a>
 8003034:	d809      	bhi.n	800304a <_Unwind_VRS_Set+0x1a>
 8003036:	b973      	cbnz	r3, 8003056 <_Unwind_VRS_Set+0x26>
 8003038:	2a0f      	cmp	r2, #15
 800303a:	d80c      	bhi.n	8003056 <_Unwind_VRS_Set+0x26>
 800303c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003040:	9a00      	ldr	r2, [sp, #0]
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	6042      	str	r2, [r0, #4]
 8003046:	4618      	mov	r0, r3
 8003048:	4770      	bx	lr
 800304a:	3903      	subs	r1, #3
 800304c:	2901      	cmp	r1, #1
 800304e:	bf94      	ite	ls
 8003050:	2001      	movls	r0, #1
 8003052:	2002      	movhi	r0, #2
 8003054:	4770      	bx	lr
 8003056:	2002      	movs	r0, #2
 8003058:	4770      	bx	lr
 800305a:	4608      	mov	r0, r1
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop

08003060 <_Unwind_SetGR>:
 8003060:	b510      	push	{r4, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	2300      	movs	r3, #0
 8003066:	ac03      	add	r4, sp, #12
 8003068:	9203      	str	r2, [sp, #12]
 800306a:	9400      	str	r4, [sp, #0]
 800306c:	460a      	mov	r2, r1
 800306e:	4619      	mov	r1, r3
 8003070:	f7ff ffde 	bl	8003030 <_Unwind_VRS_Set>
 8003074:	b004      	add	sp, #16
 8003076:	bd10      	pop	{r4, pc}

08003078 <__gnu_Unwind_Backtrace>:
 8003078:	b570      	push	{r4, r5, r6, lr}
 800307a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800307c:	6413      	str	r3, [r2, #64]	; 0x40
 800307e:	f102 0c04 	add.w	ip, r2, #4
 8003082:	4605      	mov	r5, r0
 8003084:	460c      	mov	r4, r1
 8003086:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800308a:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800308e:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 8003092:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003096:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800309a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800309e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80030a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80030a6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80030aa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80030ae:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80030b2:	9616      	str	r6, [sp, #88]	; 0x58
 80030b4:	e010      	b.n	80030d8 <__gnu_Unwind_Backtrace+0x60>
 80030b6:	f7ff ffd3 	bl	8003060 <_Unwind_SetGR>
 80030ba:	4621      	mov	r1, r4
 80030bc:	a816      	add	r0, sp, #88	; 0x58
 80030be:	47a8      	blx	r5
 80030c0:	4603      	mov	r3, r0
 80030c2:	aa16      	add	r2, sp, #88	; 0x58
 80030c4:	4669      	mov	r1, sp
 80030c6:	2008      	movs	r0, #8
 80030c8:	b983      	cbnz	r3, 80030ec <__gnu_Unwind_Backtrace+0x74>
 80030ca:	9b04      	ldr	r3, [sp, #16]
 80030cc:	4798      	blx	r3
 80030ce:	2805      	cmp	r0, #5
 80030d0:	4606      	mov	r6, r0
 80030d2:	d00c      	beq.n	80030ee <__gnu_Unwind_Backtrace+0x76>
 80030d4:	2809      	cmp	r0, #9
 80030d6:	d009      	beq.n	80030ec <__gnu_Unwind_Backtrace+0x74>
 80030d8:	9926      	ldr	r1, [sp, #152]	; 0x98
 80030da:	4668      	mov	r0, sp
 80030dc:	f7ff fe0a 	bl	8002cf4 <get_eit_entry>
 80030e0:	4603      	mov	r3, r0
 80030e2:	466a      	mov	r2, sp
 80030e4:	210c      	movs	r1, #12
 80030e6:	a816      	add	r0, sp, #88	; 0x58
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0e4      	beq.n	80030b6 <__gnu_Unwind_Backtrace+0x3e>
 80030ec:	2609      	movs	r6, #9
 80030ee:	a816      	add	r0, sp, #88	; 0x58
 80030f0:	f7ff fe4e 	bl	8002d90 <restore_non_core_regs>
 80030f4:	4630      	mov	r0, r6
 80030f6:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 80030fa:	bd70      	pop	{r4, r5, r6, pc}

080030fc <__gnu_unwind_pr_common>:
 80030fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003100:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8003102:	b089      	sub	sp, #36	; 0x24
 8003104:	461e      	mov	r6, r3
 8003106:	f854 3b04 	ldr.w	r3, [r4], #4
 800310a:	9406      	str	r4, [sp, #24]
 800310c:	460d      	mov	r5, r1
 800310e:	4617      	mov	r7, r2
 8003110:	f000 0803 	and.w	r8, r0, #3
 8003114:	2e00      	cmp	r6, #0
 8003116:	d079      	beq.n	800320c <__gnu_unwind_pr_common+0x110>
 8003118:	0c1a      	lsrs	r2, r3, #16
 800311a:	041b      	lsls	r3, r3, #16
 800311c:	9305      	str	r3, [sp, #20]
 800311e:	f88d 201d 	strb.w	r2, [sp, #29]
 8003122:	2302      	movs	r3, #2
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800312a:	f88d 301c 	strb.w	r3, [sp, #28]
 800312e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8003130:	f1b8 0f02 	cmp.w	r8, #2
 8003134:	bf08      	it	eq
 8003136:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8003138:	f013 0301 	ands.w	r3, r3, #1
 800313c:	d00c      	beq.n	8003158 <__gnu_unwind_pr_common+0x5c>
 800313e:	a905      	add	r1, sp, #20
 8003140:	4638      	mov	r0, r7
 8003142:	f000 fb79 	bl	8003838 <__gnu_unwind_execute>
 8003146:	b918      	cbnz	r0, 8003150 <__gnu_unwind_pr_common+0x54>
 8003148:	2008      	movs	r0, #8
 800314a:	b009      	add	sp, #36	; 0x24
 800314c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003150:	2009      	movs	r0, #9
 8003152:	b009      	add	sp, #36	; 0x24
 8003154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003158:	f8d4 a000 	ldr.w	sl, [r4]
 800315c:	f1ba 0f00 	cmp.w	sl, #0
 8003160:	d0ed      	beq.n	800313e <__gnu_unwind_pr_common+0x42>
 8003162:	9301      	str	r3, [sp, #4]
 8003164:	f000 0308 	and.w	r3, r0, #8
 8003168:	9302      	str	r3, [sp, #8]
 800316a:	2e02      	cmp	r6, #2
 800316c:	d04a      	beq.n	8003204 <__gnu_unwind_pr_common+0x108>
 800316e:	f8b4 a000 	ldrh.w	sl, [r4]
 8003172:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8003176:	3404      	adds	r4, #4
 8003178:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800317a:	f029 0b01 	bic.w	fp, r9, #1
 800317e:	210f      	movs	r1, #15
 8003180:	4638      	mov	r0, r7
 8003182:	449b      	add	fp, r3
 8003184:	f7ff ff46 	bl	8003014 <_Unwind_GetGR>
 8003188:	4583      	cmp	fp, r0
 800318a:	d839      	bhi.n	8003200 <__gnu_unwind_pr_common+0x104>
 800318c:	f02a 0301 	bic.w	r3, sl, #1
 8003190:	449b      	add	fp, r3
 8003192:	4583      	cmp	fp, r0
 8003194:	bf94      	ite	ls
 8003196:	2000      	movls	r0, #0
 8003198:	2001      	movhi	r0, #1
 800319a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	f00a 0a01 	and.w	sl, sl, #1
 80031a6:	ea43 030a 	orr.w	r3, r3, sl
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d049      	beq.n	8003242 <__gnu_unwind_pr_common+0x146>
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d032      	beq.n	8003218 <__gnu_unwind_pr_common+0x11c>
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1cc      	bne.n	8003150 <__gnu_unwind_pr_common+0x54>
 80031b6:	f1b8 0f00 	cmp.w	r8, #0
 80031ba:	d002      	beq.n	80031c2 <__gnu_unwind_pr_common+0xc6>
 80031bc:	2800      	cmp	r0, #0
 80031be:	f040 80cd 	bne.w	800335c <__gnu_unwind_pr_common+0x260>
 80031c2:	3404      	adds	r4, #4
 80031c4:	f8d4 a000 	ldr.w	sl, [r4]
 80031c8:	f1ba 0f00 	cmp.w	sl, #0
 80031cc:	d1cd      	bne.n	800316a <__gnu_unwind_pr_common+0x6e>
 80031ce:	a905      	add	r1, sp, #20
 80031d0:	4638      	mov	r0, r7
 80031d2:	f000 fb31 	bl	8003838 <__gnu_unwind_execute>
 80031d6:	2800      	cmp	r0, #0
 80031d8:	d1ba      	bne.n	8003150 <__gnu_unwind_pr_common+0x54>
 80031da:	9b01      	ldr	r3, [sp, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0b3      	beq.n	8003148 <__gnu_unwind_pr_common+0x4c>
 80031e0:	210f      	movs	r1, #15
 80031e2:	4638      	mov	r0, r7
 80031e4:	f7ff ff16 	bl	8003014 <_Unwind_GetGR>
 80031e8:	210e      	movs	r1, #14
 80031ea:	4602      	mov	r2, r0
 80031ec:	4638      	mov	r0, r7
 80031ee:	f7ff ff37 	bl	8003060 <_Unwind_SetGR>
 80031f2:	4638      	mov	r0, r7
 80031f4:	4a6a      	ldr	r2, [pc, #424]	; (80033a0 <__gnu_unwind_pr_common+0x2a4>)
 80031f6:	210f      	movs	r1, #15
 80031f8:	f7ff ff32 	bl	8003060 <_Unwind_SetGR>
 80031fc:	2007      	movs	r0, #7
 80031fe:	e7a8      	b.n	8003152 <__gnu_unwind_pr_common+0x56>
 8003200:	2000      	movs	r0, #0
 8003202:	e7ca      	b.n	800319a <__gnu_unwind_pr_common+0x9e>
 8003204:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8003208:	3408      	adds	r4, #8
 800320a:	e7b5      	b.n	8003178 <__gnu_unwind_pr_common+0x7c>
 800320c:	021b      	lsls	r3, r3, #8
 800320e:	9305      	str	r3, [sp, #20]
 8003210:	2303      	movs	r3, #3
 8003212:	f8ad 301c 	strh.w	r3, [sp, #28]
 8003216:	e78a      	b.n	800312e <__gnu_unwind_pr_common+0x32>
 8003218:	6823      	ldr	r3, [r4, #0]
 800321a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800321e:	f1b8 0f00 	cmp.w	r8, #0
 8003222:	d145      	bne.n	80032b0 <__gnu_unwind_pr_common+0x1b4>
 8003224:	b128      	cbz	r0, 8003232 <__gnu_unwind_pr_common+0x136>
 8003226:	9a02      	ldr	r2, [sp, #8]
 8003228:	2a00      	cmp	r2, #0
 800322a:	d05c      	beq.n	80032e6 <__gnu_unwind_pr_common+0x1ea>
 800322c:	f1bb 0f00 	cmp.w	fp, #0
 8003230:	d074      	beq.n	800331c <__gnu_unwind_pr_common+0x220>
 8003232:	2b00      	cmp	r3, #0
 8003234:	da00      	bge.n	8003238 <__gnu_unwind_pr_common+0x13c>
 8003236:	3404      	adds	r4, #4
 8003238:	f10b 0b01 	add.w	fp, fp, #1
 800323c:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8003240:	e7c0      	b.n	80031c4 <__gnu_unwind_pr_common+0xc8>
 8003242:	f1b8 0f00 	cmp.w	r8, #0
 8003246:	d119      	bne.n	800327c <__gnu_unwind_pr_common+0x180>
 8003248:	b1b0      	cbz	r0, 8003278 <__gnu_unwind_pr_common+0x17c>
 800324a:	6863      	ldr	r3, [r4, #4]
 800324c:	6822      	ldr	r2, [r4, #0]
 800324e:	1c99      	adds	r1, r3, #2
 8003250:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8003254:	f43f af7c 	beq.w	8003150 <__gnu_unwind_pr_common+0x54>
 8003258:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800325c:	3301      	adds	r3, #1
 800325e:	9104      	str	r1, [sp, #16]
 8003260:	f000 8090 	beq.w	8003384 <__gnu_unwind_pr_common+0x288>
 8003264:	1d20      	adds	r0, r4, #4
 8003266:	f7ff fdc1 	bl	8002dec <_Unwind_decode_typeinfo_ptr.constprop.0>
 800326a:	ab04      	add	r3, sp, #16
 800326c:	4601      	mov	r1, r0
 800326e:	4628      	mov	r0, r5
 8003270:	f3af 8000 	nop.w
 8003274:	2800      	cmp	r0, #0
 8003276:	d15b      	bne.n	8003330 <__gnu_unwind_pr_common+0x234>
 8003278:	3408      	adds	r4, #8
 800327a:	e7a3      	b.n	80031c4 <__gnu_unwind_pr_common+0xc8>
 800327c:	210d      	movs	r1, #13
 800327e:	4638      	mov	r0, r7
 8003280:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8003284:	f7ff fec6 	bl	8003014 <_Unwind_GetGR>
 8003288:	4581      	cmp	r9, r0
 800328a:	d1f5      	bne.n	8003278 <__gnu_unwind_pr_common+0x17c>
 800328c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800328e:	429c      	cmp	r4, r3
 8003290:	d1f2      	bne.n	8003278 <__gnu_unwind_pr_common+0x17c>
 8003292:	4620      	mov	r0, r4
 8003294:	f7ff fce2 	bl	8002c5c <selfrel_offset31>
 8003298:	210f      	movs	r1, #15
 800329a:	4602      	mov	r2, r0
 800329c:	4638      	mov	r0, r7
 800329e:	f7ff fedf 	bl	8003060 <_Unwind_SetGR>
 80032a2:	4638      	mov	r0, r7
 80032a4:	462a      	mov	r2, r5
 80032a6:	2100      	movs	r1, #0
 80032a8:	f7ff feda 	bl	8003060 <_Unwind_SetGR>
 80032ac:	2007      	movs	r0, #7
 80032ae:	e750      	b.n	8003152 <__gnu_unwind_pr_common+0x56>
 80032b0:	210d      	movs	r1, #13
 80032b2:	4638      	mov	r0, r7
 80032b4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80032b8:	f7ff feac 	bl	8003014 <_Unwind_GetGR>
 80032bc:	4581      	cmp	r9, r0
 80032be:	d001      	beq.n	80032c4 <__gnu_unwind_pr_common+0x1c8>
 80032c0:	6823      	ldr	r3, [r4, #0]
 80032c2:	e7b6      	b.n	8003232 <__gnu_unwind_pr_common+0x136>
 80032c4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80032c6:	429c      	cmp	r4, r3
 80032c8:	d1fa      	bne.n	80032c0 <__gnu_unwind_pr_common+0x1c4>
 80032ca:	2304      	movs	r3, #4
 80032cc:	2200      	movs	r2, #0
 80032ce:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 80032d2:	18e3      	adds	r3, r4, r3
 80032d4:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 80032d8:	636b      	str	r3, [r5, #52]	; 0x34
 80032da:	6823      	ldr	r3, [r4, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	db59      	blt.n	8003394 <__gnu_unwind_pr_common+0x298>
 80032e0:	2301      	movs	r3, #1
 80032e2:	9301      	str	r3, [sp, #4]
 80032e4:	e7a8      	b.n	8003238 <__gnu_unwind_pr_common+0x13c>
 80032e6:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80032ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80032ee:	f104 0a04 	add.w	sl, r4, #4
 80032f2:	46b0      	mov	r8, r6
 80032f4:	4691      	mov	r9, r2
 80032f6:	461e      	mov	r6, r3
 80032f8:	e00e      	b.n	8003318 <__gnu_unwind_pr_common+0x21c>
 80032fa:	4650      	mov	r0, sl
 80032fc:	9604      	str	r6, [sp, #16]
 80032fe:	f7ff fd75 	bl	8002dec <_Unwind_decode_typeinfo_ptr.constprop.0>
 8003302:	2200      	movs	r2, #0
 8003304:	4601      	mov	r1, r0
 8003306:	ab04      	add	r3, sp, #16
 8003308:	4628      	mov	r0, r5
 800330a:	f109 0901 	add.w	r9, r9, #1
 800330e:	f10a 0a04 	add.w	sl, sl, #4
 8003312:	f3af 8000 	nop.w
 8003316:	b9e0      	cbnz	r0, 8003352 <__gnu_unwind_pr_common+0x256>
 8003318:	45d9      	cmp	r9, fp
 800331a:	d1ee      	bne.n	80032fa <__gnu_unwind_pr_common+0x1fe>
 800331c:	210d      	movs	r1, #13
 800331e:	4638      	mov	r0, r7
 8003320:	f7ff fe78 	bl	8003014 <_Unwind_GetGR>
 8003324:	9b04      	ldr	r3, [sp, #16]
 8003326:	62ac      	str	r4, [r5, #40]	; 0x28
 8003328:	e9c5 0308 	strd	r0, r3, [r5, #32]
 800332c:	2006      	movs	r0, #6
 800332e:	e710      	b.n	8003152 <__gnu_unwind_pr_common+0x56>
 8003330:	4681      	mov	r9, r0
 8003332:	210d      	movs	r1, #13
 8003334:	4638      	mov	r0, r7
 8003336:	f7ff fe6d 	bl	8003014 <_Unwind_GetGR>
 800333a:	f1b9 0f02 	cmp.w	r9, #2
 800333e:	6228      	str	r0, [r5, #32]
 8003340:	d125      	bne.n	800338e <__gnu_unwind_pr_common+0x292>
 8003342:	462b      	mov	r3, r5
 8003344:	9a04      	ldr	r2, [sp, #16]
 8003346:	f843 2f2c 	str.w	r2, [r3, #44]!
 800334a:	626b      	str	r3, [r5, #36]	; 0x24
 800334c:	62ac      	str	r4, [r5, #40]	; 0x28
 800334e:	2006      	movs	r0, #6
 8003350:	e6ff      	b.n	8003152 <__gnu_unwind_pr_common+0x56>
 8003352:	4646      	mov	r6, r8
 8003354:	6823      	ldr	r3, [r4, #0]
 8003356:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800335a:	e76a      	b.n	8003232 <__gnu_unwind_pr_common+0x136>
 800335c:	4620      	mov	r0, r4
 800335e:	f7ff fc7d 	bl	8002c5c <selfrel_offset31>
 8003362:	3404      	adds	r4, #4
 8003364:	4602      	mov	r2, r0
 8003366:	63ac      	str	r4, [r5, #56]	; 0x38
 8003368:	4628      	mov	r0, r5
 800336a:	4614      	mov	r4, r2
 800336c:	f3af 8000 	nop.w
 8003370:	2800      	cmp	r0, #0
 8003372:	f43f aeed 	beq.w	8003150 <__gnu_unwind_pr_common+0x54>
 8003376:	4638      	mov	r0, r7
 8003378:	4622      	mov	r2, r4
 800337a:	210f      	movs	r1, #15
 800337c:	f7ff fe70 	bl	8003060 <_Unwind_SetGR>
 8003380:	2007      	movs	r0, #7
 8003382:	e6e6      	b.n	8003152 <__gnu_unwind_pr_common+0x56>
 8003384:	210d      	movs	r1, #13
 8003386:	4638      	mov	r0, r7
 8003388:	f7ff fe44 	bl	8003014 <_Unwind_GetGR>
 800338c:	6228      	str	r0, [r5, #32]
 800338e:	9b04      	ldr	r3, [sp, #16]
 8003390:	626b      	str	r3, [r5, #36]	; 0x24
 8003392:	e7db      	b.n	800334c <__gnu_unwind_pr_common+0x250>
 8003394:	f10b 0001 	add.w	r0, fp, #1
 8003398:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800339c:	e77a      	b.n	8003294 <__gnu_unwind_pr_common+0x198>
 800339e:	bf00      	nop
 80033a0:	00000000 	.word	0x00000000

080033a4 <__aeabi_unwind_cpp_pr0>:
 80033a4:	2300      	movs	r3, #0
 80033a6:	e6a9      	b.n	80030fc <__gnu_unwind_pr_common>

080033a8 <__aeabi_unwind_cpp_pr1>:
 80033a8:	2301      	movs	r3, #1
 80033aa:	e6a7      	b.n	80030fc <__gnu_unwind_pr_common>

080033ac <__aeabi_unwind_cpp_pr2>:
 80033ac:	2302      	movs	r3, #2
 80033ae:	e6a5      	b.n	80030fc <__gnu_unwind_pr_common>

080033b0 <_Unwind_VRS_Pop>:
 80033b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033b4:	4606      	mov	r6, r0
 80033b6:	b0c3      	sub	sp, #268	; 0x10c
 80033b8:	4615      	mov	r5, r2
 80033ba:	461c      	mov	r4, r3
 80033bc:	2904      	cmp	r1, #4
 80033be:	f200 80bf 	bhi.w	8003540 <_Unwind_VRS_Pop+0x190>
 80033c2:	e8df f001 	tbb	[pc, r1]
 80033c6:	579e      	.short	0x579e
 80033c8:	2dbd      	.short	0x2dbd
 80033ca:	03          	.byte	0x03
 80033cb:	00          	.byte	0x00
 80033cc:	2c00      	cmp	r4, #0
 80033ce:	f040 80b7 	bne.w	8003540 <_Unwind_VRS_Pop+0x190>
 80033d2:	2a10      	cmp	r2, #16
 80033d4:	f200 80b4 	bhi.w	8003540 <_Unwind_VRS_Pop+0x190>
 80033d8:	6803      	ldr	r3, [r0, #0]
 80033da:	06d8      	lsls	r0, r3, #27
 80033dc:	f100 80f9 	bmi.w	80035d2 <_Unwind_VRS_Pop+0x222>
 80033e0:	af20      	add	r7, sp, #128	; 0x80
 80033e2:	4638      	mov	r0, r7
 80033e4:	f000 f998 	bl	8003718 <__gnu_Unwind_Save_WMMXC>
 80033e8:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 80033ea:	4639      	mov	r1, r7
 80033ec:	2300      	movs	r3, #0
 80033ee:	f04f 0c01 	mov.w	ip, #1
 80033f2:	fa0c f203 	lsl.w	r2, ip, r3
 80033f6:	422a      	tst	r2, r5
 80033f8:	4620      	mov	r0, r4
 80033fa:	f103 0301 	add.w	r3, r3, #1
 80033fe:	d003      	beq.n	8003408 <_Unwind_VRS_Pop+0x58>
 8003400:	f850 2b04 	ldr.w	r2, [r0], #4
 8003404:	600a      	str	r2, [r1, #0]
 8003406:	4604      	mov	r4, r0
 8003408:	2b04      	cmp	r3, #4
 800340a:	f101 0104 	add.w	r1, r1, #4
 800340e:	d1f0      	bne.n	80033f2 <_Unwind_VRS_Pop+0x42>
 8003410:	4638      	mov	r0, r7
 8003412:	63b4      	str	r4, [r6, #56]	; 0x38
 8003414:	f000 f976 	bl	8003704 <__gnu_Unwind_Restore_WMMXC>
 8003418:	2000      	movs	r0, #0
 800341a:	b043      	add	sp, #268	; 0x10c
 800341c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003420:	2c03      	cmp	r4, #3
 8003422:	f040 808d 	bne.w	8003540 <_Unwind_VRS_Pop+0x190>
 8003426:	b294      	uxth	r4, r2
 8003428:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 800342c:	2b10      	cmp	r3, #16
 800342e:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8003432:	f200 8085 	bhi.w	8003540 <_Unwind_VRS_Pop+0x190>
 8003436:	6803      	ldr	r3, [r0, #0]
 8003438:	071f      	lsls	r7, r3, #28
 800343a:	f100 80d2 	bmi.w	80035e2 <_Unwind_VRS_Pop+0x232>
 800343e:	af20      	add	r7, sp, #128	; 0x80
 8003440:	4638      	mov	r0, r7
 8003442:	f000 f93d 	bl	80036c0 <__gnu_Unwind_Save_WMMXD>
 8003446:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8003448:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 800344c:	b154      	cbz	r4, 8003464 <_Unwind_VRS_Pop+0xb4>
 800344e:	460b      	mov	r3, r1
 8003450:	1ad0      	subs	r0, r2, r3
 8003452:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8003456:	00e4      	lsls	r4, r4, #3
 8003458:	581d      	ldr	r5, [r3, r0]
 800345a:	f843 5b04 	str.w	r5, [r3], #4
 800345e:	428b      	cmp	r3, r1
 8003460:	d1fa      	bne.n	8003458 <_Unwind_VRS_Pop+0xa8>
 8003462:	4422      	add	r2, r4
 8003464:	4638      	mov	r0, r7
 8003466:	63b2      	str	r2, [r6, #56]	; 0x38
 8003468:	f000 f908 	bl	800367c <__gnu_Unwind_Restore_WMMXD>
 800346c:	2000      	movs	r0, #0
 800346e:	b043      	add	sp, #268	; 0x10c
 8003470:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003474:	2c01      	cmp	r4, #1
 8003476:	ea4f 4812 	mov.w	r8, r2, lsr #16
 800347a:	b295      	uxth	r5, r2
 800347c:	d05c      	beq.n	8003538 <_Unwind_VRS_Pop+0x188>
 800347e:	2c05      	cmp	r4, #5
 8003480:	d15e      	bne.n	8003540 <_Unwind_VRS_Pop+0x190>
 8003482:	eb08 0905 	add.w	r9, r8, r5
 8003486:	f1b9 0f20 	cmp.w	r9, #32
 800348a:	d859      	bhi.n	8003540 <_Unwind_VRS_Pop+0x190>
 800348c:	f1b8 0f0f 	cmp.w	r8, #15
 8003490:	d979      	bls.n	8003586 <_Unwind_VRS_Pop+0x1d6>
 8003492:	46a9      	mov	r9, r5
 8003494:	2d00      	cmp	r5, #0
 8003496:	f040 808a 	bne.w	80035ae <_Unwind_VRS_Pop+0x1fe>
 800349a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800349c:	b36d      	cbz	r5, 80034fa <_Unwind_VRS_Pop+0x14a>
 800349e:	af20      	add	r7, sp, #128	; 0x80
 80034a0:	f04f 0900 	mov.w	r9, #0
 80034a4:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 80034a8:	3f04      	subs	r7, #4
 80034aa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80034ae:	f853 1b04 	ldr.w	r1, [r3], #4
 80034b2:	f847 1f04 	str.w	r1, [r7, #4]!
 80034b6:	42ab      	cmp	r3, r5
 80034b8:	d1f9      	bne.n	80034ae <_Unwind_VRS_Pop+0xfe>
 80034ba:	f1b9 0f00 	cmp.w	r9, #0
 80034be:	d00f      	beq.n	80034e0 <_Unwind_VRS_Pop+0x130>
 80034c0:	466f      	mov	r7, sp
 80034c2:	4641      	mov	r1, r8
 80034c4:	2910      	cmp	r1, #16
 80034c6:	bf38      	it	cc
 80034c8:	2110      	movcc	r1, #16
 80034ca:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80034ce:	3984      	subs	r1, #132	; 0x84
 80034d0:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 80034d4:	f853 0b04 	ldr.w	r0, [r3], #4
 80034d8:	f841 0f04 	str.w	r0, [r1, #4]!
 80034dc:	42ab      	cmp	r3, r5
 80034de:	d1f9      	bne.n	80034d4 <_Unwind_VRS_Pop+0x124>
 80034e0:	2c01      	cmp	r4, #1
 80034e2:	f000 8086 	beq.w	80035f2 <_Unwind_VRS_Pop+0x242>
 80034e6:	f1b8 0f0f 	cmp.w	r8, #15
 80034ea:	63b5      	str	r5, [r6, #56]	; 0x38
 80034ec:	d947      	bls.n	800357e <_Unwind_VRS_Pop+0x1ce>
 80034ee:	f1b9 0f00 	cmp.w	r9, #0
 80034f2:	d002      	beq.n	80034fa <_Unwind_VRS_Pop+0x14a>
 80034f4:	4668      	mov	r0, sp
 80034f6:	f000 f8b9 	bl	800366c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80034fa:	2000      	movs	r0, #0
 80034fc:	b043      	add	sp, #268	; 0x10c
 80034fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003502:	b9ec      	cbnz	r4, 8003540 <_Unwind_VRS_Pop+0x190>
 8003504:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003506:	4623      	mov	r3, r4
 8003508:	fa1f fc82 	uxth.w	ip, r2
 800350c:	2401      	movs	r4, #1
 800350e:	1d37      	adds	r7, r6, #4
 8003510:	fa04 f203 	lsl.w	r2, r4, r3
 8003514:	ea12 0f0c 	tst.w	r2, ip
 8003518:	4601      	mov	r1, r0
 800351a:	d004      	beq.n	8003526 <_Unwind_VRS_Pop+0x176>
 800351c:	f851 2b04 	ldr.w	r2, [r1], #4
 8003520:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8003524:	4608      	mov	r0, r1
 8003526:	3301      	adds	r3, #1
 8003528:	2b10      	cmp	r3, #16
 800352a:	d1f1      	bne.n	8003510 <_Unwind_VRS_Pop+0x160>
 800352c:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
 8003530:	d1e3      	bne.n	80034fa <_Unwind_VRS_Pop+0x14a>
 8003532:	63b0      	str	r0, [r6, #56]	; 0x38
 8003534:	4628      	mov	r0, r5
 8003536:	e004      	b.n	8003542 <_Unwind_VRS_Pop+0x192>
 8003538:	eb08 0305 	add.w	r3, r8, r5
 800353c:	2b10      	cmp	r3, #16
 800353e:	d903      	bls.n	8003548 <_Unwind_VRS_Pop+0x198>
 8003540:	2002      	movs	r0, #2
 8003542:	b043      	add	sp, #268	; 0x10c
 8003544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003548:	f1b8 0f0f 	cmp.w	r8, #15
 800354c:	d8f8      	bhi.n	8003540 <_Unwind_VRS_Pop+0x190>
 800354e:	6833      	ldr	r3, [r6, #0]
 8003550:	07da      	lsls	r2, r3, #31
 8003552:	d506      	bpl.n	8003562 <_Unwind_VRS_Pop+0x1b2>
 8003554:	4630      	mov	r0, r6
 8003556:	f023 0303 	bic.w	r3, r3, #3
 800355a:	f840 3b48 	str.w	r3, [r0], #72
 800355e:	f000 f879 	bl	8003654 <__gnu_Unwind_Save_VFP>
 8003562:	af20      	add	r7, sp, #128	; 0x80
 8003564:	4638      	mov	r0, r7
 8003566:	f000 f875 	bl	8003654 <__gnu_Unwind_Save_VFP>
 800356a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800356c:	2d00      	cmp	r5, #0
 800356e:	d197      	bne.n	80034a0 <_Unwind_VRS_Pop+0xf0>
 8003570:	461d      	mov	r5, r3
 8003572:	3504      	adds	r5, #4
 8003574:	63b5      	str	r5, [r6, #56]	; 0x38
 8003576:	4638      	mov	r0, r7
 8003578:	f000 f868 	bl	800364c <__gnu_Unwind_Restore_VFP>
 800357c:	e7bd      	b.n	80034fa <_Unwind_VRS_Pop+0x14a>
 800357e:	a820      	add	r0, sp, #128	; 0x80
 8003580:	f000 f86c 	bl	800365c <__gnu_Unwind_Restore_VFP_D>
 8003584:	e7b3      	b.n	80034ee <_Unwind_VRS_Pop+0x13e>
 8003586:	f1b9 0f10 	cmp.w	r9, #16
 800358a:	d940      	bls.n	800360e <_Unwind_VRS_Pop+0x25e>
 800358c:	f1a9 0910 	sub.w	r9, r9, #16
 8003590:	6833      	ldr	r3, [r6, #0]
 8003592:	07d9      	lsls	r1, r3, #31
 8003594:	d508      	bpl.n	80035a8 <_Unwind_VRS_Pop+0x1f8>
 8003596:	f023 0301 	bic.w	r3, r3, #1
 800359a:	4630      	mov	r0, r6
 800359c:	f043 0302 	orr.w	r3, r3, #2
 80035a0:	f840 3b48 	str.w	r3, [r0], #72
 80035a4:	f000 f85e 	bl	8003664 <__gnu_Unwind_Save_VFP_D>
 80035a8:	f1b9 0f00 	cmp.w	r9, #0
 80035ac:	d032      	beq.n	8003614 <_Unwind_VRS_Pop+0x264>
 80035ae:	6833      	ldr	r3, [r6, #0]
 80035b0:	075a      	lsls	r2, r3, #29
 80035b2:	d420      	bmi.n	80035f6 <_Unwind_VRS_Pop+0x246>
 80035b4:	f1b8 0f0f 	cmp.w	r8, #15
 80035b8:	d925      	bls.n	8003606 <_Unwind_VRS_Pop+0x256>
 80035ba:	466f      	mov	r7, sp
 80035bc:	4638      	mov	r0, r7
 80035be:	f1c8 0510 	rsb	r5, r8, #16
 80035c2:	f000 f857 	bl	8003674 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80035c6:	2d00      	cmp	r5, #0
 80035c8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80035ca:	f77f af7a 	ble.w	80034c2 <_Unwind_VRS_Pop+0x112>
 80035ce:	af20      	add	r7, sp, #128	; 0x80
 80035d0:	e768      	b.n	80034a4 <_Unwind_VRS_Pop+0xf4>
 80035d2:	f023 0310 	bic.w	r3, r3, #16
 80035d6:	6033      	str	r3, [r6, #0]
 80035d8:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 80035dc:	f000 f89c 	bl	8003718 <__gnu_Unwind_Save_WMMXC>
 80035e0:	e6fe      	b.n	80033e0 <_Unwind_VRS_Pop+0x30>
 80035e2:	f023 0308 	bic.w	r3, r3, #8
 80035e6:	6003      	str	r3, [r0, #0]
 80035e8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 80035ec:	f000 f868 	bl	80036c0 <__gnu_Unwind_Save_WMMXD>
 80035f0:	e725      	b.n	800343e <_Unwind_VRS_Pop+0x8e>
 80035f2:	af20      	add	r7, sp, #128	; 0x80
 80035f4:	e7bd      	b.n	8003572 <_Unwind_VRS_Pop+0x1c2>
 80035f6:	4630      	mov	r0, r6
 80035f8:	f023 0304 	bic.w	r3, r3, #4
 80035fc:	f840 3bd0 	str.w	r3, [r0], #208
 8003600:	f000 f838 	bl	8003674 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8003604:	e7d6      	b.n	80035b4 <_Unwind_VRS_Pop+0x204>
 8003606:	a820      	add	r0, sp, #128	; 0x80
 8003608:	f000 f82c 	bl	8003664 <__gnu_Unwind_Save_VFP_D>
 800360c:	e7d5      	b.n	80035ba <_Unwind_VRS_Pop+0x20a>
 800360e:	f04f 0900 	mov.w	r9, #0
 8003612:	e7bd      	b.n	8003590 <_Unwind_VRS_Pop+0x1e0>
 8003614:	f1b8 0f0f 	cmp.w	r8, #15
 8003618:	f63f af3f 	bhi.w	800349a <_Unwind_VRS_Pop+0xea>
 800361c:	af20      	add	r7, sp, #128	; 0x80
 800361e:	4638      	mov	r0, r7
 8003620:	f000 f820 	bl	8003664 <__gnu_Unwind_Save_VFP_D>
 8003624:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8003626:	2d00      	cmp	r5, #0
 8003628:	f47f af3a 	bne.w	80034a0 <_Unwind_VRS_Pop+0xf0>
 800362c:	4638      	mov	r0, r7
 800362e:	f000 f815 	bl	800365c <__gnu_Unwind_Restore_VFP_D>
 8003632:	e762      	b.n	80034fa <_Unwind_VRS_Pop+0x14a>

08003634 <__restore_core_regs>:
 8003634:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8003638:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 800363c:	469c      	mov	ip, r3
 800363e:	46a6      	mov	lr, r4
 8003640:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8003644:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8003648:	46e5      	mov	sp, ip
 800364a:	bd00      	pop	{pc}

0800364c <__gnu_Unwind_Restore_VFP>:
 800364c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop

08003654 <__gnu_Unwind_Save_VFP>:
 8003654:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop

0800365c <__gnu_Unwind_Restore_VFP_D>:
 800365c:	ec90 0b20 	vldmia	r0, {d0-d15}
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop

08003664 <__gnu_Unwind_Save_VFP_D>:
 8003664:	ec80 0b20 	vstmia	r0, {d0-d15}
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop

0800366c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 800366c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop

08003674 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8003674:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop

0800367c <__gnu_Unwind_Restore_WMMXD>:
 800367c:	ecf0 0102 	ldfe	f0, [r0], #8
 8003680:	ecf0 1102 	ldfe	f1, [r0], #8
 8003684:	ecf0 2102 	ldfe	f2, [r0], #8
 8003688:	ecf0 3102 	ldfe	f3, [r0], #8
 800368c:	ecf0 4102 	ldfe	f4, [r0], #8
 8003690:	ecf0 5102 	ldfe	f5, [r0], #8
 8003694:	ecf0 6102 	ldfe	f6, [r0], #8
 8003698:	ecf0 7102 	ldfe	f7, [r0], #8
 800369c:	ecf0 8102 	ldfp	f0, [r0], #8
 80036a0:	ecf0 9102 	ldfp	f1, [r0], #8
 80036a4:	ecf0 a102 	ldfp	f2, [r0], #8
 80036a8:	ecf0 b102 	ldfp	f3, [r0], #8
 80036ac:	ecf0 c102 	ldfp	f4, [r0], #8
 80036b0:	ecf0 d102 	ldfp	f5, [r0], #8
 80036b4:	ecf0 e102 	ldfp	f6, [r0], #8
 80036b8:	ecf0 f102 	ldfp	f7, [r0], #8
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop

080036c0 <__gnu_Unwind_Save_WMMXD>:
 80036c0:	ece0 0102 	stfe	f0, [r0], #8
 80036c4:	ece0 1102 	stfe	f1, [r0], #8
 80036c8:	ece0 2102 	stfe	f2, [r0], #8
 80036cc:	ece0 3102 	stfe	f3, [r0], #8
 80036d0:	ece0 4102 	stfe	f4, [r0], #8
 80036d4:	ece0 5102 	stfe	f5, [r0], #8
 80036d8:	ece0 6102 	stfe	f6, [r0], #8
 80036dc:	ece0 7102 	stfe	f7, [r0], #8
 80036e0:	ece0 8102 	stfp	f0, [r0], #8
 80036e4:	ece0 9102 	stfp	f1, [r0], #8
 80036e8:	ece0 a102 	stfp	f2, [r0], #8
 80036ec:	ece0 b102 	stfp	f3, [r0], #8
 80036f0:	ece0 c102 	stfp	f4, [r0], #8
 80036f4:	ece0 d102 	stfp	f5, [r0], #8
 80036f8:	ece0 e102 	stfp	f6, [r0], #8
 80036fc:	ece0 f102 	stfp	f7, [r0], #8
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop

08003704 <__gnu_Unwind_Restore_WMMXC>:
 8003704:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8003708:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 800370c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8003710:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop

08003718 <__gnu_Unwind_Save_WMMXC>:
 8003718:	fca0 8101 	stc2	1, cr8, [r0], #4
 800371c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8003720:	fca0 a101 	stc2	1, cr10, [r0], #4
 8003724:	fca0 b101 	stc2	1, cr11, [r0], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop

0800372c <_Unwind_RaiseException>:
 800372c:	46ec      	mov	ip, sp
 800372e:	b500      	push	{lr}
 8003730:	e92d 5000 	stmdb	sp!, {ip, lr}
 8003734:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8003740:	a901      	add	r1, sp, #4
 8003742:	f7ff fbe1 	bl	8002f08 <__gnu_Unwind_RaiseException>
 8003746:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800374a:	b012      	add	sp, #72	; 0x48
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop

08003750 <_Unwind_Resume>:
 8003750:	46ec      	mov	ip, sp
 8003752:	b500      	push	{lr}
 8003754:	e92d 5000 	stmdb	sp!, {ip, lr}
 8003758:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800375c:	f04f 0300 	mov.w	r3, #0
 8003760:	e92d 000c 	stmdb	sp!, {r2, r3}
 8003764:	a901      	add	r1, sp, #4
 8003766:	f7ff fc0b 	bl	8002f80 <__gnu_Unwind_Resume>
 800376a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800376e:	b012      	add	sp, #72	; 0x48
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop

08003774 <_Unwind_Resume_or_Rethrow>:
 8003774:	46ec      	mov	ip, sp
 8003776:	b500      	push	{lr}
 8003778:	e92d 5000 	stmdb	sp!, {ip, lr}
 800377c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	e92d 000c 	stmdb	sp!, {r2, r3}
 8003788:	a901      	add	r1, sp, #4
 800378a:	f7ff fc1b 	bl	8002fc4 <__gnu_Unwind_Resume_or_Rethrow>
 800378e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8003792:	b012      	add	sp, #72	; 0x48
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop

08003798 <_Unwind_ForcedUnwind>:
 8003798:	46ec      	mov	ip, sp
 800379a:	b500      	push	{lr}
 800379c:	e92d 5000 	stmdb	sp!, {ip, lr}
 80037a0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80037ac:	ab01      	add	r3, sp, #4
 80037ae:	f7ff fbdf 	bl	8002f70 <__gnu_Unwind_ForcedUnwind>
 80037b2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80037b6:	b012      	add	sp, #72	; 0x48
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop

080037bc <_Unwind_Backtrace>:
 80037bc:	46ec      	mov	ip, sp
 80037be:	b500      	push	{lr}
 80037c0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80037c4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80037c8:	f04f 0300 	mov.w	r3, #0
 80037cc:	e92d 000c 	stmdb	sp!, {r2, r3}
 80037d0:	aa01      	add	r2, sp, #4
 80037d2:	f7ff fc51 	bl	8003078 <__gnu_Unwind_Backtrace>
 80037d6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80037da:	b012      	add	sp, #72	; 0x48
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop

080037e0 <next_unwind_byte>:
 80037e0:	7a02      	ldrb	r2, [r0, #8]
 80037e2:	4603      	mov	r3, r0
 80037e4:	b97a      	cbnz	r2, 8003806 <next_unwind_byte+0x26>
 80037e6:	7a42      	ldrb	r2, [r0, #9]
 80037e8:	b1a2      	cbz	r2, 8003814 <next_unwind_byte+0x34>
 80037ea:	6841      	ldr	r1, [r0, #4]
 80037ec:	3a01      	subs	r2, #1
 80037ee:	b410      	push	{r4}
 80037f0:	7242      	strb	r2, [r0, #9]
 80037f2:	6808      	ldr	r0, [r1, #0]
 80037f4:	2203      	movs	r2, #3
 80037f6:	1d0c      	adds	r4, r1, #4
 80037f8:	721a      	strb	r2, [r3, #8]
 80037fa:	0202      	lsls	r2, r0, #8
 80037fc:	605c      	str	r4, [r3, #4]
 80037fe:	0e00      	lsrs	r0, r0, #24
 8003800:	bc10      	pop	{r4}
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	4770      	bx	lr
 8003806:	6800      	ldr	r0, [r0, #0]
 8003808:	3a01      	subs	r2, #1
 800380a:	721a      	strb	r2, [r3, #8]
 800380c:	0202      	lsls	r2, r0, #8
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	0e00      	lsrs	r0, r0, #24
 8003812:	4770      	bx	lr
 8003814:	20b0      	movs	r0, #176	; 0xb0
 8003816:	4770      	bx	lr

08003818 <_Unwind_GetGR.constprop.0>:
 8003818:	b500      	push	{lr}
 800381a:	b085      	sub	sp, #20
 800381c:	2300      	movs	r3, #0
 800381e:	aa03      	add	r2, sp, #12
 8003820:	9200      	str	r2, [sp, #0]
 8003822:	4619      	mov	r1, r3
 8003824:	220c      	movs	r2, #12
 8003826:	f7ff fbdd 	bl	8002fe4 <_Unwind_VRS_Get>
 800382a:	9803      	ldr	r0, [sp, #12]
 800382c:	b005      	add	sp, #20
 800382e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003832:	bf00      	nop

08003834 <unwind_UCB_from_context>:
 8003834:	e7f0      	b.n	8003818 <_Unwind_GetGR.constprop.0>
 8003836:	bf00      	nop

08003838 <__gnu_unwind_execute>:
 8003838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800383c:	4605      	mov	r5, r0
 800383e:	b085      	sub	sp, #20
 8003840:	460e      	mov	r6, r1
 8003842:	f04f 0800 	mov.w	r8, #0
 8003846:	4630      	mov	r0, r6
 8003848:	f7ff ffca 	bl	80037e0 <next_unwind_byte>
 800384c:	28b0      	cmp	r0, #176	; 0xb0
 800384e:	4604      	mov	r4, r0
 8003850:	f000 80ba 	beq.w	80039c8 <__gnu_unwind_execute+0x190>
 8003854:	0607      	lsls	r7, r0, #24
 8003856:	d520      	bpl.n	800389a <__gnu_unwind_execute+0x62>
 8003858:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800385c:	2b80      	cmp	r3, #128	; 0x80
 800385e:	d04d      	beq.n	80038fc <__gnu_unwind_execute+0xc4>
 8003860:	2b90      	cmp	r3, #144	; 0x90
 8003862:	d036      	beq.n	80038d2 <__gnu_unwind_execute+0x9a>
 8003864:	2ba0      	cmp	r3, #160	; 0xa0
 8003866:	d060      	beq.n	800392a <__gnu_unwind_execute+0xf2>
 8003868:	2bb0      	cmp	r3, #176	; 0xb0
 800386a:	d074      	beq.n	8003956 <__gnu_unwind_execute+0x11e>
 800386c:	2bc0      	cmp	r3, #192	; 0xc0
 800386e:	f000 808b 	beq.w	8003988 <__gnu_unwind_execute+0x150>
 8003872:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8003876:	2bd0      	cmp	r3, #208	; 0xd0
 8003878:	d10b      	bne.n	8003892 <__gnu_unwind_execute+0x5a>
 800387a:	f000 0207 	and.w	r2, r0, #7
 800387e:	3201      	adds	r2, #1
 8003880:	2305      	movs	r3, #5
 8003882:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003886:	2101      	movs	r1, #1
 8003888:	4628      	mov	r0, r5
 800388a:	f7ff fd91 	bl	80033b0 <_Unwind_VRS_Pop>
 800388e:	2800      	cmp	r0, #0
 8003890:	d0d9      	beq.n	8003846 <__gnu_unwind_execute+0xe>
 8003892:	2009      	movs	r0, #9
 8003894:	b005      	add	sp, #20
 8003896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800389a:	0083      	lsls	r3, r0, #2
 800389c:	b2db      	uxtb	r3, r3
 800389e:	1d1f      	adds	r7, r3, #4
 80038a0:	f10d 090c 	add.w	r9, sp, #12
 80038a4:	2300      	movs	r3, #0
 80038a6:	4619      	mov	r1, r3
 80038a8:	f8cd 9000 	str.w	r9, [sp]
 80038ac:	220d      	movs	r2, #13
 80038ae:	4628      	mov	r0, r5
 80038b0:	f7ff fb98 	bl	8002fe4 <_Unwind_VRS_Get>
 80038b4:	9b03      	ldr	r3, [sp, #12]
 80038b6:	f8cd 9000 	str.w	r9, [sp]
 80038ba:	0660      	lsls	r0, r4, #25
 80038bc:	bf4c      	ite	mi
 80038be:	1bdf      	submi	r7, r3, r7
 80038c0:	18ff      	addpl	r7, r7, r3
 80038c2:	2300      	movs	r3, #0
 80038c4:	220d      	movs	r2, #13
 80038c6:	4619      	mov	r1, r3
 80038c8:	4628      	mov	r0, r5
 80038ca:	9703      	str	r7, [sp, #12]
 80038cc:	f7ff fbb0 	bl	8003030 <_Unwind_VRS_Set>
 80038d0:	e7b9      	b.n	8003846 <__gnu_unwind_execute+0xe>
 80038d2:	f000 030d 	and.w	r3, r0, #13
 80038d6:	2b0d      	cmp	r3, #13
 80038d8:	d0db      	beq.n	8003892 <__gnu_unwind_execute+0x5a>
 80038da:	af03      	add	r7, sp, #12
 80038dc:	2300      	movs	r3, #0
 80038de:	f000 020f 	and.w	r2, r0, #15
 80038e2:	4619      	mov	r1, r3
 80038e4:	9700      	str	r7, [sp, #0]
 80038e6:	4628      	mov	r0, r5
 80038e8:	f7ff fb7c 	bl	8002fe4 <_Unwind_VRS_Get>
 80038ec:	2300      	movs	r3, #0
 80038ee:	9700      	str	r7, [sp, #0]
 80038f0:	220d      	movs	r2, #13
 80038f2:	4619      	mov	r1, r3
 80038f4:	4628      	mov	r0, r5
 80038f6:	f7ff fb9b 	bl	8003030 <_Unwind_VRS_Set>
 80038fa:	e7a4      	b.n	8003846 <__gnu_unwind_execute+0xe>
 80038fc:	4630      	mov	r0, r6
 80038fe:	f7ff ff6f 	bl	80037e0 <next_unwind_byte>
 8003902:	0224      	lsls	r4, r4, #8
 8003904:	4320      	orrs	r0, r4
 8003906:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800390a:	d0c2      	beq.n	8003892 <__gnu_unwind_execute+0x5a>
 800390c:	0104      	lsls	r4, r0, #4
 800390e:	2300      	movs	r3, #0
 8003910:	b2a2      	uxth	r2, r4
 8003912:	4619      	mov	r1, r3
 8003914:	4628      	mov	r0, r5
 8003916:	f7ff fd4b 	bl	80033b0 <_Unwind_VRS_Pop>
 800391a:	2800      	cmp	r0, #0
 800391c:	d1b9      	bne.n	8003892 <__gnu_unwind_execute+0x5a>
 800391e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8003922:	bf18      	it	ne
 8003924:	f04f 0801 	movne.w	r8, #1
 8003928:	e78d      	b.n	8003846 <__gnu_unwind_execute+0xe>
 800392a:	43c2      	mvns	r2, r0
 800392c:	f002 0307 	and.w	r3, r2, #7
 8003930:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8003934:	411a      	asrs	r2, r3
 8003936:	0701      	lsls	r1, r0, #28
 8003938:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 800393c:	f04f 0300 	mov.w	r3, #0
 8003940:	bf48      	it	mi
 8003942:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8003946:	4619      	mov	r1, r3
 8003948:	4628      	mov	r0, r5
 800394a:	f7ff fd31 	bl	80033b0 <_Unwind_VRS_Pop>
 800394e:	2800      	cmp	r0, #0
 8003950:	f43f af79 	beq.w	8003846 <__gnu_unwind_execute+0xe>
 8003954:	e79d      	b.n	8003892 <__gnu_unwind_execute+0x5a>
 8003956:	28b1      	cmp	r0, #177	; 0xb1
 8003958:	d03b      	beq.n	80039d2 <__gnu_unwind_execute+0x19a>
 800395a:	28b2      	cmp	r0, #178	; 0xb2
 800395c:	f000 8093 	beq.w	8003a86 <__gnu_unwind_execute+0x24e>
 8003960:	28b3      	cmp	r0, #179	; 0xb3
 8003962:	d041      	beq.n	80039e8 <__gnu_unwind_execute+0x1b0>
 8003964:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8003968:	2bb4      	cmp	r3, #180	; 0xb4
 800396a:	d092      	beq.n	8003892 <__gnu_unwind_execute+0x5a>
 800396c:	f000 0207 	and.w	r2, r0, #7
 8003970:	3201      	adds	r2, #1
 8003972:	2301      	movs	r3, #1
 8003974:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003978:	4619      	mov	r1, r3
 800397a:	4628      	mov	r0, r5
 800397c:	f7ff fd18 	bl	80033b0 <_Unwind_VRS_Pop>
 8003980:	2800      	cmp	r0, #0
 8003982:	f43f af60 	beq.w	8003846 <__gnu_unwind_execute+0xe>
 8003986:	e784      	b.n	8003892 <__gnu_unwind_execute+0x5a>
 8003988:	28c6      	cmp	r0, #198	; 0xc6
 800398a:	d04a      	beq.n	8003a22 <__gnu_unwind_execute+0x1ea>
 800398c:	28c7      	cmp	r0, #199	; 0xc7
 800398e:	d054      	beq.n	8003a3a <__gnu_unwind_execute+0x202>
 8003990:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8003994:	2bc0      	cmp	r3, #192	; 0xc0
 8003996:	d063      	beq.n	8003a60 <__gnu_unwind_execute+0x228>
 8003998:	28c8      	cmp	r0, #200	; 0xc8
 800399a:	d068      	beq.n	8003a6e <__gnu_unwind_execute+0x236>
 800399c:	28c9      	cmp	r0, #201	; 0xc9
 800399e:	f47f af78 	bne.w	8003892 <__gnu_unwind_execute+0x5a>
 80039a2:	4630      	mov	r0, r6
 80039a4:	f7ff ff1c 	bl	80037e0 <next_unwind_byte>
 80039a8:	0302      	lsls	r2, r0, #12
 80039aa:	f000 000f 	and.w	r0, r0, #15
 80039ae:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80039b2:	3001      	adds	r0, #1
 80039b4:	4302      	orrs	r2, r0
 80039b6:	2101      	movs	r1, #1
 80039b8:	2305      	movs	r3, #5
 80039ba:	4628      	mov	r0, r5
 80039bc:	f7ff fcf8 	bl	80033b0 <_Unwind_VRS_Pop>
 80039c0:	2800      	cmp	r0, #0
 80039c2:	f43f af40 	beq.w	8003846 <__gnu_unwind_execute+0xe>
 80039c6:	e764      	b.n	8003892 <__gnu_unwind_execute+0x5a>
 80039c8:	f1b8 0f00 	cmp.w	r8, #0
 80039cc:	d018      	beq.n	8003a00 <__gnu_unwind_execute+0x1c8>
 80039ce:	2000      	movs	r0, #0
 80039d0:	e760      	b.n	8003894 <__gnu_unwind_execute+0x5c>
 80039d2:	4630      	mov	r0, r6
 80039d4:	f7ff ff04 	bl	80037e0 <next_unwind_byte>
 80039d8:	4602      	mov	r2, r0
 80039da:	2800      	cmp	r0, #0
 80039dc:	f43f af59 	beq.w	8003892 <__gnu_unwind_execute+0x5a>
 80039e0:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80039e4:	d0c8      	beq.n	8003978 <__gnu_unwind_execute+0x140>
 80039e6:	e754      	b.n	8003892 <__gnu_unwind_execute+0x5a>
 80039e8:	4630      	mov	r0, r6
 80039ea:	f7ff fef9 	bl	80037e0 <next_unwind_byte>
 80039ee:	0302      	lsls	r2, r0, #12
 80039f0:	f000 030f 	and.w	r3, r0, #15
 80039f4:	3301      	adds	r3, #1
 80039f6:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80039fa:	431a      	orrs	r2, r3
 80039fc:	2301      	movs	r3, #1
 80039fe:	e7bb      	b.n	8003978 <__gnu_unwind_execute+0x140>
 8003a00:	ac03      	add	r4, sp, #12
 8003a02:	4643      	mov	r3, r8
 8003a04:	220e      	movs	r2, #14
 8003a06:	4641      	mov	r1, r8
 8003a08:	9400      	str	r4, [sp, #0]
 8003a0a:	4628      	mov	r0, r5
 8003a0c:	f7ff faea 	bl	8002fe4 <_Unwind_VRS_Get>
 8003a10:	9400      	str	r4, [sp, #0]
 8003a12:	4643      	mov	r3, r8
 8003a14:	220f      	movs	r2, #15
 8003a16:	4641      	mov	r1, r8
 8003a18:	4628      	mov	r0, r5
 8003a1a:	f7ff fb09 	bl	8003030 <_Unwind_VRS_Set>
 8003a1e:	4640      	mov	r0, r8
 8003a20:	e738      	b.n	8003894 <__gnu_unwind_execute+0x5c>
 8003a22:	4630      	mov	r0, r6
 8003a24:	f7ff fedc 	bl	80037e0 <next_unwind_byte>
 8003a28:	0302      	lsls	r2, r0, #12
 8003a2a:	f000 030f 	and.w	r3, r0, #15
 8003a2e:	3301      	adds	r3, #1
 8003a30:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8003a34:	431a      	orrs	r2, r3
 8003a36:	2303      	movs	r3, #3
 8003a38:	e79e      	b.n	8003978 <__gnu_unwind_execute+0x140>
 8003a3a:	4630      	mov	r0, r6
 8003a3c:	f7ff fed0 	bl	80037e0 <next_unwind_byte>
 8003a40:	4602      	mov	r2, r0
 8003a42:	2800      	cmp	r0, #0
 8003a44:	f43f af25 	beq.w	8003892 <__gnu_unwind_execute+0x5a>
 8003a48:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8003a4c:	f47f af21 	bne.w	8003892 <__gnu_unwind_execute+0x5a>
 8003a50:	2104      	movs	r1, #4
 8003a52:	4628      	mov	r0, r5
 8003a54:	f7ff fcac 	bl	80033b0 <_Unwind_VRS_Pop>
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	f43f aef4 	beq.w	8003846 <__gnu_unwind_execute+0xe>
 8003a5e:	e718      	b.n	8003892 <__gnu_unwind_execute+0x5a>
 8003a60:	f000 020f 	and.w	r2, r0, #15
 8003a64:	3201      	adds	r2, #1
 8003a66:	2303      	movs	r3, #3
 8003a68:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8003a6c:	e784      	b.n	8003978 <__gnu_unwind_execute+0x140>
 8003a6e:	4630      	mov	r0, r6
 8003a70:	f7ff feb6 	bl	80037e0 <next_unwind_byte>
 8003a74:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8003a78:	f000 030f 	and.w	r3, r0, #15
 8003a7c:	3210      	adds	r2, #16
 8003a7e:	3301      	adds	r3, #1
 8003a80:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8003a84:	e797      	b.n	80039b6 <__gnu_unwind_execute+0x17e>
 8003a86:	2300      	movs	r3, #0
 8003a88:	f10d 090c 	add.w	r9, sp, #12
 8003a8c:	220d      	movs	r2, #13
 8003a8e:	4619      	mov	r1, r3
 8003a90:	f8cd 9000 	str.w	r9, [sp]
 8003a94:	4628      	mov	r0, r5
 8003a96:	f7ff faa5 	bl	8002fe4 <_Unwind_VRS_Get>
 8003a9a:	4630      	mov	r0, r6
 8003a9c:	f7ff fea0 	bl	80037e0 <next_unwind_byte>
 8003aa0:	0602      	lsls	r2, r0, #24
 8003aa2:	f04f 0402 	mov.w	r4, #2
 8003aa6:	d50c      	bpl.n	8003ac2 <__gnu_unwind_execute+0x28a>
 8003aa8:	9b03      	ldr	r3, [sp, #12]
 8003aaa:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8003aae:	40a0      	lsls	r0, r4
 8003ab0:	4418      	add	r0, r3
 8003ab2:	9003      	str	r0, [sp, #12]
 8003ab4:	4630      	mov	r0, r6
 8003ab6:	f7ff fe93 	bl	80037e0 <next_unwind_byte>
 8003aba:	0603      	lsls	r3, r0, #24
 8003abc:	f104 0407 	add.w	r4, r4, #7
 8003ac0:	d4f2      	bmi.n	8003aa8 <__gnu_unwind_execute+0x270>
 8003ac2:	9b03      	ldr	r3, [sp, #12]
 8003ac4:	f8cd 9000 	str.w	r9, [sp]
 8003ac8:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8003acc:	40a2      	lsls	r2, r4
 8003ace:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003ad2:	441a      	add	r2, r3
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	9203      	str	r2, [sp, #12]
 8003ad8:	4619      	mov	r1, r3
 8003ada:	220d      	movs	r2, #13
 8003adc:	4628      	mov	r0, r5
 8003ade:	f7ff faa7 	bl	8003030 <_Unwind_VRS_Set>
 8003ae2:	e6b0      	b.n	8003846 <__gnu_unwind_execute+0xe>

08003ae4 <__gnu_unwind_frame>:
 8003ae4:	b510      	push	{r4, lr}
 8003ae6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8003ae8:	6853      	ldr	r3, [r2, #4]
 8003aea:	b084      	sub	sp, #16
 8003aec:	f04f 0c03 	mov.w	ip, #3
 8003af0:	3208      	adds	r2, #8
 8003af2:	021c      	lsls	r4, r3, #8
 8003af4:	4608      	mov	r0, r1
 8003af6:	0e1b      	lsrs	r3, r3, #24
 8003af8:	a901      	add	r1, sp, #4
 8003afa:	9401      	str	r4, [sp, #4]
 8003afc:	9202      	str	r2, [sp, #8]
 8003afe:	f88d c00c 	strb.w	ip, [sp, #12]
 8003b02:	f88d 300d 	strb.w	r3, [sp, #13]
 8003b06:	f7ff fe97 	bl	8003838 <__gnu_unwind_execute>
 8003b0a:	b004      	add	sp, #16
 8003b0c:	bd10      	pop	{r4, pc}
 8003b0e:	bf00      	nop

08003b10 <_Unwind_GetRegionStart>:
 8003b10:	b508      	push	{r3, lr}
 8003b12:	f7ff fe8f 	bl	8003834 <unwind_UCB_from_context>
 8003b16:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8003b18:	bd08      	pop	{r3, pc}
 8003b1a:	bf00      	nop

08003b1c <_Unwind_GetLanguageSpecificData>:
 8003b1c:	b508      	push	{r3, lr}
 8003b1e:	f7ff fe89 	bl	8003834 <unwind_UCB_from_context>
 8003b22:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8003b24:	79c3      	ldrb	r3, [r0, #7]
 8003b26:	3302      	adds	r3, #2
 8003b28:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003b2c:	bd08      	pop	{r3, pc}
 8003b2e:	bf00      	nop

08003b30 <__aeabi_idiv0>:
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop

08003b34 <abort>:
 8003b34:	b508      	push	{r3, lr}
 8003b36:	2006      	movs	r0, #6
 8003b38:	f000 f898 	bl	8003c6c <raise>
 8003b3c:	2001      	movs	r0, #1
 8003b3e:	f7fd f86d 	bl	8000c1c <_exit>
 8003b42:	bf00      	nop

08003b44 <_init_signal_r>:
 8003b44:	b538      	push	{r3, r4, r5, lr}
 8003b46:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003b48:	b10c      	cbz	r4, 8003b4e <_init_signal_r+0xa>
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	bd38      	pop	{r3, r4, r5, pc}
 8003b4e:	2180      	movs	r1, #128	; 0x80
 8003b50:	4605      	mov	r5, r0
 8003b52:	f7fd fb3f 	bl	80011d4 <_malloc_r>
 8003b56:	4602      	mov	r2, r0
 8003b58:	6468      	str	r0, [r5, #68]	; 0x44
 8003b5a:	b130      	cbz	r0, 8003b6a <_init_signal_r+0x26>
 8003b5c:	1f03      	subs	r3, r0, #4
 8003b5e:	327c      	adds	r2, #124	; 0x7c
 8003b60:	f843 4f04 	str.w	r4, [r3, #4]!
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d1fb      	bne.n	8003b60 <_init_signal_r+0x1c>
 8003b68:	e7ef      	b.n	8003b4a <_init_signal_r+0x6>
 8003b6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b6e:	bd38      	pop	{r3, r4, r5, pc}

08003b70 <_signal_r>:
 8003b70:	291f      	cmp	r1, #31
 8003b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b74:	4605      	mov	r5, r0
 8003b76:	d808      	bhi.n	8003b8a <_signal_r+0x1a>
 8003b78:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8003b7a:	460c      	mov	r4, r1
 8003b7c:	4617      	mov	r7, r2
 8003b7e:	b14e      	cbz	r6, 8003b94 <_signal_r+0x24>
 8003b80:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003b84:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 8003b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b8a:	2316      	movs	r3, #22
 8003b8c:	6003      	str	r3, [r0, #0]
 8003b8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b94:	2180      	movs	r1, #128	; 0x80
 8003b96:	f7fd fb1d 	bl	80011d4 <_malloc_r>
 8003b9a:	4606      	mov	r6, r0
 8003b9c:	6468      	str	r0, [r5, #68]	; 0x44
 8003b9e:	b140      	cbz	r0, 8003bb2 <_signal_r+0x42>
 8003ba0:	1f03      	subs	r3, r0, #4
 8003ba2:	f100 057c 	add.w	r5, r0, #124	; 0x7c
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	f843 1f04 	str.w	r1, [r3, #4]!
 8003bac:	429d      	cmp	r5, r3
 8003bae:	d1fb      	bne.n	8003ba8 <_signal_r+0x38>
 8003bb0:	e7e6      	b.n	8003b80 <_signal_r+0x10>
 8003bb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003bb8 <_raise_r>:
 8003bb8:	291f      	cmp	r1, #31
 8003bba:	b538      	push	{r3, r4, r5, lr}
 8003bbc:	4605      	mov	r5, r0
 8003bbe:	d820      	bhi.n	8003c02 <_raise_r+0x4a>
 8003bc0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003bc2:	460c      	mov	r4, r1
 8003bc4:	b16a      	cbz	r2, 8003be2 <_raise_r+0x2a>
 8003bc6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003bca:	b153      	cbz	r3, 8003be2 <_raise_r+0x2a>
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d016      	beq.n	8003bfe <_raise_r+0x46>
 8003bd0:	1c59      	adds	r1, r3, #1
 8003bd2:	d010      	beq.n	8003bf6 <_raise_r+0x3e>
 8003bd4:	2500      	movs	r5, #0
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 8003bdc:	4798      	blx	r3
 8003bde:	4628      	mov	r0, r5
 8003be0:	bd38      	pop	{r3, r4, r5, pc}
 8003be2:	4628      	mov	r0, r5
 8003be4:	f000 f8f8 	bl	8003dd8 <_getpid_r>
 8003be8:	4622      	mov	r2, r4
 8003bea:	4601      	mov	r1, r0
 8003bec:	4628      	mov	r0, r5
 8003bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bf2:	f000 b8db 	b.w	8003dac <_kill_r>
 8003bf6:	2316      	movs	r3, #22
 8003bf8:	6003      	str	r3, [r0, #0]
 8003bfa:	2001      	movs	r0, #1
 8003bfc:	bd38      	pop	{r3, r4, r5, pc}
 8003bfe:	2000      	movs	r0, #0
 8003c00:	bd38      	pop	{r3, r4, r5, pc}
 8003c02:	2316      	movs	r3, #22
 8003c04:	6003      	str	r3, [r0, #0]
 8003c06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c0a:	bd38      	pop	{r3, r4, r5, pc}

08003c0c <__sigtramp_r>:
 8003c0c:	291f      	cmp	r1, #31
 8003c0e:	d82a      	bhi.n	8003c66 <__sigtramp_r+0x5a>
 8003c10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003c12:	b538      	push	{r3, r4, r5, lr}
 8003c14:	460c      	mov	r4, r1
 8003c16:	4605      	mov	r5, r0
 8003c18:	b182      	cbz	r2, 8003c3c <__sigtramp_r+0x30>
 8003c1a:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8003c1e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8003c22:	b14b      	cbz	r3, 8003c38 <__sigtramp_r+0x2c>
 8003c24:	1c59      	adds	r1, r3, #1
 8003c26:	d019      	beq.n	8003c5c <__sigtramp_r+0x50>
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d015      	beq.n	8003c58 <__sigtramp_r+0x4c>
 8003c2c:	2500      	movs	r5, #0
 8003c2e:	4620      	mov	r0, r4
 8003c30:	6015      	str	r5, [r2, #0]
 8003c32:	4798      	blx	r3
 8003c34:	4628      	mov	r0, r5
 8003c36:	bd38      	pop	{r3, r4, r5, pc}
 8003c38:	2001      	movs	r0, #1
 8003c3a:	bd38      	pop	{r3, r4, r5, pc}
 8003c3c:	2180      	movs	r1, #128	; 0x80
 8003c3e:	f7fd fac9 	bl	80011d4 <_malloc_r>
 8003c42:	4602      	mov	r2, r0
 8003c44:	6468      	str	r0, [r5, #68]	; 0x44
 8003c46:	b158      	cbz	r0, 8003c60 <__sigtramp_r+0x54>
 8003c48:	1f03      	subs	r3, r0, #4
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	307c      	adds	r0, #124	; 0x7c
 8003c4e:	f843 1f04 	str.w	r1, [r3, #4]!
 8003c52:	4298      	cmp	r0, r3
 8003c54:	d1fb      	bne.n	8003c4e <__sigtramp_r+0x42>
 8003c56:	e7e0      	b.n	8003c1a <__sigtramp_r+0xe>
 8003c58:	2003      	movs	r0, #3
 8003c5a:	bd38      	pop	{r3, r4, r5, pc}
 8003c5c:	2002      	movs	r0, #2
 8003c5e:	bd38      	pop	{r3, r4, r5, pc}
 8003c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c64:	bd38      	pop	{r3, r4, r5, pc}
 8003c66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c6a:	4770      	bx	lr

08003c6c <raise>:
 8003c6c:	b538      	push	{r3, r4, r5, lr}
 8003c6e:	4b14      	ldr	r3, [pc, #80]	; (8003cc0 <raise+0x54>)
 8003c70:	281f      	cmp	r0, #31
 8003c72:	681d      	ldr	r5, [r3, #0]
 8003c74:	d81f      	bhi.n	8003cb6 <raise+0x4a>
 8003c76:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8003c78:	4604      	mov	r4, r0
 8003c7a:	b162      	cbz	r2, 8003c96 <raise+0x2a>
 8003c7c:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8003c80:	b14b      	cbz	r3, 8003c96 <raise+0x2a>
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d015      	beq.n	8003cb2 <raise+0x46>
 8003c86:	1c59      	adds	r1, r3, #1
 8003c88:	d00f      	beq.n	8003caa <raise+0x3e>
 8003c8a:	2500      	movs	r5, #0
 8003c8c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8003c90:	4798      	blx	r3
 8003c92:	4628      	mov	r0, r5
 8003c94:	bd38      	pop	{r3, r4, r5, pc}
 8003c96:	4628      	mov	r0, r5
 8003c98:	f000 f89e 	bl	8003dd8 <_getpid_r>
 8003c9c:	4622      	mov	r2, r4
 8003c9e:	4601      	mov	r1, r0
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ca6:	f000 b881 	b.w	8003dac <_kill_r>
 8003caa:	2316      	movs	r3, #22
 8003cac:	602b      	str	r3, [r5, #0]
 8003cae:	2001      	movs	r0, #1
 8003cb0:	bd38      	pop	{r3, r4, r5, pc}
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	bd38      	pop	{r3, r4, r5, pc}
 8003cb6:	2316      	movs	r3, #22
 8003cb8:	602b      	str	r3, [r5, #0]
 8003cba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cbe:	bd38      	pop	{r3, r4, r5, pc}
 8003cc0:	20000004 	.word	0x20000004

08003cc4 <signal>:
 8003cc4:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <signal+0x4c>)
 8003cc6:	281f      	cmp	r0, #31
 8003cc8:	b570      	push	{r4, r5, r6, lr}
 8003cca:	681e      	ldr	r6, [r3, #0]
 8003ccc:	d808      	bhi.n	8003ce0 <signal+0x1c>
 8003cce:	460d      	mov	r5, r1
 8003cd0:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8003cd2:	4604      	mov	r4, r0
 8003cd4:	b149      	cbz	r1, 8003cea <signal+0x26>
 8003cd6:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8003cda:	f841 5024 	str.w	r5, [r1, r4, lsl #2]
 8003cde:	bd70      	pop	{r4, r5, r6, pc}
 8003ce0:	2316      	movs	r3, #22
 8003ce2:	6033      	str	r3, [r6, #0]
 8003ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ce8:	bd70      	pop	{r4, r5, r6, pc}
 8003cea:	2180      	movs	r1, #128	; 0x80
 8003cec:	4630      	mov	r0, r6
 8003cee:	f7fd fa71 	bl	80011d4 <_malloc_r>
 8003cf2:	4601      	mov	r1, r0
 8003cf4:	6470      	str	r0, [r6, #68]	; 0x44
 8003cf6:	b140      	cbz	r0, 8003d0a <signal+0x46>
 8003cf8:	1f03      	subs	r3, r0, #4
 8003cfa:	f100 0c7c 	add.w	ip, r0, #124	; 0x7c
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f843 2f04 	str.w	r2, [r3, #4]!
 8003d04:	4563      	cmp	r3, ip
 8003d06:	d1fb      	bne.n	8003d00 <signal+0x3c>
 8003d08:	e7e5      	b.n	8003cd6 <signal+0x12>
 8003d0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d0e:	bd70      	pop	{r4, r5, r6, pc}
 8003d10:	20000004 	.word	0x20000004

08003d14 <_init_signal>:
 8003d14:	b538      	push	{r3, r4, r5, lr}
 8003d16:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <_init_signal+0x30>)
 8003d18:	681d      	ldr	r5, [r3, #0]
 8003d1a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8003d1c:	b10c      	cbz	r4, 8003d22 <_init_signal+0xe>
 8003d1e:	2000      	movs	r0, #0
 8003d20:	bd38      	pop	{r3, r4, r5, pc}
 8003d22:	2180      	movs	r1, #128	; 0x80
 8003d24:	4628      	mov	r0, r5
 8003d26:	f7fd fa55 	bl	80011d4 <_malloc_r>
 8003d2a:	6468      	str	r0, [r5, #68]	; 0x44
 8003d2c:	b138      	cbz	r0, 8003d3e <_init_signal+0x2a>
 8003d2e:	1f03      	subs	r3, r0, #4
 8003d30:	f100 027c 	add.w	r2, r0, #124	; 0x7c
 8003d34:	f843 4f04 	str.w	r4, [r3, #4]!
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d1fb      	bne.n	8003d34 <_init_signal+0x20>
 8003d3c:	e7ef      	b.n	8003d1e <_init_signal+0xa>
 8003d3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d42:	bd38      	pop	{r3, r4, r5, pc}
 8003d44:	20000004 	.word	0x20000004

08003d48 <__sigtramp>:
 8003d48:	b538      	push	{r3, r4, r5, lr}
 8003d4a:	4b17      	ldr	r3, [pc, #92]	; (8003da8 <__sigtramp+0x60>)
 8003d4c:	281f      	cmp	r0, #31
 8003d4e:	681d      	ldr	r5, [r3, #0]
 8003d50:	d826      	bhi.n	8003da0 <__sigtramp+0x58>
 8003d52:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8003d54:	4604      	mov	r4, r0
 8003d56:	b182      	cbz	r2, 8003d7a <__sigtramp+0x32>
 8003d58:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8003d5c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8003d60:	b14b      	cbz	r3, 8003d76 <__sigtramp+0x2e>
 8003d62:	1c59      	adds	r1, r3, #1
 8003d64:	d01a      	beq.n	8003d9c <__sigtramp+0x54>
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d016      	beq.n	8003d98 <__sigtramp+0x50>
 8003d6a:	2500      	movs	r5, #0
 8003d6c:	4620      	mov	r0, r4
 8003d6e:	6015      	str	r5, [r2, #0]
 8003d70:	4798      	blx	r3
 8003d72:	4628      	mov	r0, r5
 8003d74:	bd38      	pop	{r3, r4, r5, pc}
 8003d76:	2001      	movs	r0, #1
 8003d78:	bd38      	pop	{r3, r4, r5, pc}
 8003d7a:	2180      	movs	r1, #128	; 0x80
 8003d7c:	4628      	mov	r0, r5
 8003d7e:	f7fd fa29 	bl	80011d4 <_malloc_r>
 8003d82:	4602      	mov	r2, r0
 8003d84:	6468      	str	r0, [r5, #68]	; 0x44
 8003d86:	b158      	cbz	r0, 8003da0 <__sigtramp+0x58>
 8003d88:	1f03      	subs	r3, r0, #4
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	307c      	adds	r0, #124	; 0x7c
 8003d8e:	f843 1f04 	str.w	r1, [r3, #4]!
 8003d92:	4283      	cmp	r3, r0
 8003d94:	d1fb      	bne.n	8003d8e <__sigtramp+0x46>
 8003d96:	e7df      	b.n	8003d58 <__sigtramp+0x10>
 8003d98:	2003      	movs	r0, #3
 8003d9a:	bd38      	pop	{r3, r4, r5, pc}
 8003d9c:	2002      	movs	r0, #2
 8003d9e:	bd38      	pop	{r3, r4, r5, pc}
 8003da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003da4:	bd38      	pop	{r3, r4, r5, pc}
 8003da6:	bf00      	nop
 8003da8:	20000004 	.word	0x20000004

08003dac <_kill_r>:
 8003dac:	b570      	push	{r4, r5, r6, lr}
 8003dae:	460c      	mov	r4, r1
 8003db0:	4d08      	ldr	r5, [pc, #32]	; (8003dd4 <_kill_r+0x28>)
 8003db2:	4603      	mov	r3, r0
 8003db4:	2600      	movs	r6, #0
 8003db6:	4620      	mov	r0, r4
 8003db8:	4611      	mov	r1, r2
 8003dba:	461c      	mov	r4, r3
 8003dbc:	602e      	str	r6, [r5, #0]
 8003dbe:	f7fc ff1f 	bl	8000c00 <_kill>
 8003dc2:	1c43      	adds	r3, r0, #1
 8003dc4:	d000      	beq.n	8003dc8 <_kill_r+0x1c>
 8003dc6:	bd70      	pop	{r4, r5, r6, pc}
 8003dc8:	682b      	ldr	r3, [r5, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0fb      	beq.n	8003dc6 <_kill_r+0x1a>
 8003dce:	6023      	str	r3, [r4, #0]
 8003dd0:	bd70      	pop	{r4, r5, r6, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20000208 	.word	0x20000208

08003dd8 <_getpid_r>:
 8003dd8:	f7fc bf10 	b.w	8000bfc <_getpid>

08003ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003ddc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003de0:	480d      	ldr	r0, [pc, #52]	; (8003e18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003de2:	490e      	ldr	r1, [pc, #56]	; (8003e1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003de4:	4a0e      	ldr	r2, [pc, #56]	; (8003e20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003de8:	e002      	b.n	8003df0 <LoopCopyDataInit>

08003dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003dee:	3304      	adds	r3, #4

08003df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003df4:	d3f9      	bcc.n	8003dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003df6:	4a0b      	ldr	r2, [pc, #44]	; (8003e24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003df8:	4c0b      	ldr	r4, [pc, #44]	; (8003e28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003dfc:	e001      	b.n	8003e02 <LoopFillZerobss>

08003dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e00:	3204      	adds	r2, #4

08003e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e04:	d3fb      	bcc.n	8003dfe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003e06:	f7fd f805 	bl	8000e14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e0a:	f7fd f8fb 	bl	8001004 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e0e:	f7fc fa45 	bl	800029c <main>
  bx  lr    
 8003e12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003e14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e1c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8003e20:	0800b680 	.word	0x0800b680
  ldr r2, =_sbss
 8003e24:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8003e28:	200008f0 	.word	0x200008f0

08003e2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e2c:	e7fe      	b.n	8003e2c <ADC_IRQHandler>
	...

08003e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e34:	4b0e      	ldr	r3, [pc, #56]	; (8003e70 <HAL_Init+0x40>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a0d      	ldr	r2, [pc, #52]	; (8003e70 <HAL_Init+0x40>)
 8003e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e40:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <HAL_Init+0x40>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a0a      	ldr	r2, [pc, #40]	; (8003e70 <HAL_Init+0x40>)
 8003e46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e4c:	4b08      	ldr	r3, [pc, #32]	; (8003e70 <HAL_Init+0x40>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a07      	ldr	r2, [pc, #28]	; (8003e70 <HAL_Init+0x40>)
 8003e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e58:	2003      	movs	r0, #3
 8003e5a:	f000 f94f 	bl	80040fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e5e:	2000      	movs	r0, #0
 8003e60:	f000 f808 	bl	8003e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e64:	f7fc fc9c 	bl	80007a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	40023c00 	.word	0x40023c00

08003e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e7c:	4b12      	ldr	r3, [pc, #72]	; (8003ec8 <HAL_InitTick+0x54>)
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <HAL_InitTick+0x58>)
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	4619      	mov	r1, r3
 8003e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 f967 	bl	8004166 <HAL_SYSTICK_Config>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e00e      	b.n	8003ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b0f      	cmp	r3, #15
 8003ea6:	d80a      	bhi.n	8003ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003eb0:	f000 f92f 	bl	8004112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003eb4:	4a06      	ldr	r2, [pc, #24]	; (8003ed0 <HAL_InitTick+0x5c>)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	e000      	b.n	8003ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	20000000 	.word	0x20000000
 8003ecc:	2000006c 	.word	0x2000006c
 8003ed0:	20000068 	.word	0x20000068

08003ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ed8:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <HAL_IncTick+0x20>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	461a      	mov	r2, r3
 8003ede:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <HAL_IncTick+0x24>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	4a04      	ldr	r2, [pc, #16]	; (8003ef8 <HAL_IncTick+0x24>)
 8003ee6:	6013      	str	r3, [r2, #0]
}
 8003ee8:	bf00      	nop
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	2000006c 	.word	0x2000006c
 8003ef8:	2000020c 	.word	0x2000020c

08003efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  return uwTick;
 8003f00:	4b03      	ldr	r3, [pc, #12]	; (8003f10 <HAL_GetTick+0x14>)
 8003f02:	681b      	ldr	r3, [r3, #0]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	2000020c 	.word	0x2000020c

08003f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f1c:	f7ff ffee 	bl	8003efc <HAL_GetTick>
 8003f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f2c:	d005      	beq.n	8003f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f2e:	4b0a      	ldr	r3, [pc, #40]	; (8003f58 <HAL_Delay+0x44>)
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	461a      	mov	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4413      	add	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f3a:	bf00      	nop
 8003f3c:	f7ff ffde 	bl	8003efc <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d8f7      	bhi.n	8003f3c <HAL_Delay+0x28>
  {
  }
}
 8003f4c:	bf00      	nop
 8003f4e:	bf00      	nop
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	2000006c 	.word	0x2000006c

08003f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f6c:	4b0c      	ldr	r3, [pc, #48]	; (8003fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f78:	4013      	ands	r3, r2
 8003f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f8e:	4a04      	ldr	r2, [pc, #16]	; (8003fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	60d3      	str	r3, [r2, #12]
}
 8003f94:	bf00      	nop
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	e000ed00 	.word	0xe000ed00

08003fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fa8:	4b04      	ldr	r3, [pc, #16]	; (8003fbc <__NVIC_GetPriorityGrouping+0x18>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	0a1b      	lsrs	r3, r3, #8
 8003fae:	f003 0307 	and.w	r3, r3, #7
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	e000ed00 	.word	0xe000ed00

08003fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	db0b      	blt.n	8003fea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fd2:	79fb      	ldrb	r3, [r7, #7]
 8003fd4:	f003 021f 	and.w	r2, r3, #31
 8003fd8:	4907      	ldr	r1, [pc, #28]	; (8003ff8 <__NVIC_EnableIRQ+0x38>)
 8003fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	2001      	movs	r0, #1
 8003fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8003fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	e000e100 	.word	0xe000e100

08003ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	4603      	mov	r3, r0
 8004004:	6039      	str	r1, [r7, #0]
 8004006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400c:	2b00      	cmp	r3, #0
 800400e:	db0a      	blt.n	8004026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	b2da      	uxtb	r2, r3
 8004014:	490c      	ldr	r1, [pc, #48]	; (8004048 <__NVIC_SetPriority+0x4c>)
 8004016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800401a:	0112      	lsls	r2, r2, #4
 800401c:	b2d2      	uxtb	r2, r2
 800401e:	440b      	add	r3, r1
 8004020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004024:	e00a      	b.n	800403c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	b2da      	uxtb	r2, r3
 800402a:	4908      	ldr	r1, [pc, #32]	; (800404c <__NVIC_SetPriority+0x50>)
 800402c:	79fb      	ldrb	r3, [r7, #7]
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	3b04      	subs	r3, #4
 8004034:	0112      	lsls	r2, r2, #4
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	440b      	add	r3, r1
 800403a:	761a      	strb	r2, [r3, #24]
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	e000e100 	.word	0xe000e100
 800404c:	e000ed00 	.word	0xe000ed00

08004050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004050:	b480      	push	{r7}
 8004052:	b089      	sub	sp, #36	; 0x24
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f1c3 0307 	rsb	r3, r3, #7
 800406a:	2b04      	cmp	r3, #4
 800406c:	bf28      	it	cs
 800406e:	2304      	movcs	r3, #4
 8004070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	3304      	adds	r3, #4
 8004076:	2b06      	cmp	r3, #6
 8004078:	d902      	bls.n	8004080 <NVIC_EncodePriority+0x30>
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	3b03      	subs	r3, #3
 800407e:	e000      	b.n	8004082 <NVIC_EncodePriority+0x32>
 8004080:	2300      	movs	r3, #0
 8004082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004084:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	43da      	mvns	r2, r3
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	401a      	ands	r2, r3
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004098:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	fa01 f303 	lsl.w	r3, r1, r3
 80040a2:	43d9      	mvns	r1, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040a8:	4313      	orrs	r3, r2
         );
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3724      	adds	r7, #36	; 0x24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
	...

080040b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040c8:	d301      	bcc.n	80040ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040ca:	2301      	movs	r3, #1
 80040cc:	e00f      	b.n	80040ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040ce:	4a0a      	ldr	r2, [pc, #40]	; (80040f8 <SysTick_Config+0x40>)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040d6:	210f      	movs	r1, #15
 80040d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040dc:	f7ff ff8e 	bl	8003ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040e0:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <SysTick_Config+0x40>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040e6:	4b04      	ldr	r3, [pc, #16]	; (80040f8 <SysTick_Config+0x40>)
 80040e8:	2207      	movs	r2, #7
 80040ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	e000e010 	.word	0xe000e010

080040fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff ff29 	bl	8003f5c <__NVIC_SetPriorityGrouping>
}
 800410a:	bf00      	nop
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004112:	b580      	push	{r7, lr}
 8004114:	b086      	sub	sp, #24
 8004116:	af00      	add	r7, sp, #0
 8004118:	4603      	mov	r3, r0
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	607a      	str	r2, [r7, #4]
 800411e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004120:	2300      	movs	r3, #0
 8004122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004124:	f7ff ff3e 	bl	8003fa4 <__NVIC_GetPriorityGrouping>
 8004128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	68b9      	ldr	r1, [r7, #8]
 800412e:	6978      	ldr	r0, [r7, #20]
 8004130:	f7ff ff8e 	bl	8004050 <NVIC_EncodePriority>
 8004134:	4602      	mov	r2, r0
 8004136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800413a:	4611      	mov	r1, r2
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff ff5d 	bl	8003ffc <__NVIC_SetPriority>
}
 8004142:	bf00      	nop
 8004144:	3718      	adds	r7, #24
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b082      	sub	sp, #8
 800414e:	af00      	add	r7, sp, #0
 8004150:	4603      	mov	r3, r0
 8004152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff ff31 	bl	8003fc0 <__NVIC_EnableIRQ>
}
 800415e:	bf00      	nop
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7ff ffa2 	bl	80040b8 <SysTick_Config>
 8004174:	4603      	mov	r3, r0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004180:	b480      	push	{r7}
 8004182:	b089      	sub	sp, #36	; 0x24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800418a:	2300      	movs	r3, #0
 800418c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800418e:	2300      	movs	r3, #0
 8004190:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004192:	2300      	movs	r3, #0
 8004194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004196:	2300      	movs	r3, #0
 8004198:	61fb      	str	r3, [r7, #28]
 800419a:	e16b      	b.n	8004474 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800419c:	2201      	movs	r2, #1
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4013      	ands	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	f040 815a 	bne.w	800446e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f003 0303 	and.w	r3, r3, #3
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d005      	beq.n	80041d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d130      	bne.n	8004234 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	2203      	movs	r2, #3
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	43db      	mvns	r3, r3
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	4013      	ands	r3, r2
 80041e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004208:	2201      	movs	r2, #1
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	43db      	mvns	r3, r3
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	4013      	ands	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	091b      	lsrs	r3, r3, #4
 800421e:	f003 0201 	and.w	r2, r3, #1
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4313      	orrs	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f003 0303 	and.w	r3, r3, #3
 800423c:	2b03      	cmp	r3, #3
 800423e:	d017      	beq.n	8004270 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	2203      	movs	r2, #3
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	43db      	mvns	r3, r3
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	4013      	ands	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	4313      	orrs	r3, r2
 8004268:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d123      	bne.n	80042c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	08da      	lsrs	r2, r3, #3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3208      	adds	r2, #8
 8004284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004288:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	220f      	movs	r2, #15
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	43db      	mvns	r3, r3
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	4013      	ands	r3, r2
 800429e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	691a      	ldr	r2, [r3, #16]
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	69ba      	ldr	r2, [r7, #24]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	08da      	lsrs	r2, r3, #3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3208      	adds	r2, #8
 80042be:	69b9      	ldr	r1, [r7, #24]
 80042c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	2203      	movs	r2, #3
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	43db      	mvns	r3, r3
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	4013      	ands	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f003 0203 	and.w	r2, r3, #3
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 80b4 	beq.w	800446e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004306:	2300      	movs	r3, #0
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	4b60      	ldr	r3, [pc, #384]	; (800448c <HAL_GPIO_Init+0x30c>)
 800430c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430e:	4a5f      	ldr	r2, [pc, #380]	; (800448c <HAL_GPIO_Init+0x30c>)
 8004310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004314:	6453      	str	r3, [r2, #68]	; 0x44
 8004316:	4b5d      	ldr	r3, [pc, #372]	; (800448c <HAL_GPIO_Init+0x30c>)
 8004318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004322:	4a5b      	ldr	r2, [pc, #364]	; (8004490 <HAL_GPIO_Init+0x310>)
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	089b      	lsrs	r3, r3, #2
 8004328:	3302      	adds	r3, #2
 800432a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800432e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	220f      	movs	r2, #15
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	43db      	mvns	r3, r3
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	4013      	ands	r3, r2
 8004344:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a52      	ldr	r2, [pc, #328]	; (8004494 <HAL_GPIO_Init+0x314>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d02b      	beq.n	80043a6 <HAL_GPIO_Init+0x226>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a51      	ldr	r2, [pc, #324]	; (8004498 <HAL_GPIO_Init+0x318>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d025      	beq.n	80043a2 <HAL_GPIO_Init+0x222>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a50      	ldr	r2, [pc, #320]	; (800449c <HAL_GPIO_Init+0x31c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d01f      	beq.n	800439e <HAL_GPIO_Init+0x21e>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a4f      	ldr	r2, [pc, #316]	; (80044a0 <HAL_GPIO_Init+0x320>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d019      	beq.n	800439a <HAL_GPIO_Init+0x21a>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a4e      	ldr	r2, [pc, #312]	; (80044a4 <HAL_GPIO_Init+0x324>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d013      	beq.n	8004396 <HAL_GPIO_Init+0x216>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a4d      	ldr	r2, [pc, #308]	; (80044a8 <HAL_GPIO_Init+0x328>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d00d      	beq.n	8004392 <HAL_GPIO_Init+0x212>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a4c      	ldr	r2, [pc, #304]	; (80044ac <HAL_GPIO_Init+0x32c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d007      	beq.n	800438e <HAL_GPIO_Init+0x20e>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a4b      	ldr	r2, [pc, #300]	; (80044b0 <HAL_GPIO_Init+0x330>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d101      	bne.n	800438a <HAL_GPIO_Init+0x20a>
 8004386:	2307      	movs	r3, #7
 8004388:	e00e      	b.n	80043a8 <HAL_GPIO_Init+0x228>
 800438a:	2308      	movs	r3, #8
 800438c:	e00c      	b.n	80043a8 <HAL_GPIO_Init+0x228>
 800438e:	2306      	movs	r3, #6
 8004390:	e00a      	b.n	80043a8 <HAL_GPIO_Init+0x228>
 8004392:	2305      	movs	r3, #5
 8004394:	e008      	b.n	80043a8 <HAL_GPIO_Init+0x228>
 8004396:	2304      	movs	r3, #4
 8004398:	e006      	b.n	80043a8 <HAL_GPIO_Init+0x228>
 800439a:	2303      	movs	r3, #3
 800439c:	e004      	b.n	80043a8 <HAL_GPIO_Init+0x228>
 800439e:	2302      	movs	r3, #2
 80043a0:	e002      	b.n	80043a8 <HAL_GPIO_Init+0x228>
 80043a2:	2301      	movs	r3, #1
 80043a4:	e000      	b.n	80043a8 <HAL_GPIO_Init+0x228>
 80043a6:	2300      	movs	r3, #0
 80043a8:	69fa      	ldr	r2, [r7, #28]
 80043aa:	f002 0203 	and.w	r2, r2, #3
 80043ae:	0092      	lsls	r2, r2, #2
 80043b0:	4093      	lsls	r3, r2
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043b8:	4935      	ldr	r1, [pc, #212]	; (8004490 <HAL_GPIO_Init+0x310>)
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	089b      	lsrs	r3, r3, #2
 80043be:	3302      	adds	r3, #2
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043c6:	4b3b      	ldr	r3, [pc, #236]	; (80044b4 <HAL_GPIO_Init+0x334>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	43db      	mvns	r3, r3
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	4013      	ands	r3, r2
 80043d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043ea:	4a32      	ldr	r2, [pc, #200]	; (80044b4 <HAL_GPIO_Init+0x334>)
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043f0:	4b30      	ldr	r3, [pc, #192]	; (80044b4 <HAL_GPIO_Init+0x334>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	43db      	mvns	r3, r3
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	4013      	ands	r3, r2
 80043fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d003      	beq.n	8004414 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	4313      	orrs	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004414:	4a27      	ldr	r2, [pc, #156]	; (80044b4 <HAL_GPIO_Init+0x334>)
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800441a:	4b26      	ldr	r3, [pc, #152]	; (80044b4 <HAL_GPIO_Init+0x334>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	43db      	mvns	r3, r3
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	4013      	ands	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	4313      	orrs	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800443e:	4a1d      	ldr	r2, [pc, #116]	; (80044b4 <HAL_GPIO_Init+0x334>)
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004444:	4b1b      	ldr	r3, [pc, #108]	; (80044b4 <HAL_GPIO_Init+0x334>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	43db      	mvns	r3, r3
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	4013      	ands	r3, r2
 8004452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d003      	beq.n	8004468 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004468:	4a12      	ldr	r2, [pc, #72]	; (80044b4 <HAL_GPIO_Init+0x334>)
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	3301      	adds	r3, #1
 8004472:	61fb      	str	r3, [r7, #28]
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	2b0f      	cmp	r3, #15
 8004478:	f67f ae90 	bls.w	800419c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800447c:	bf00      	nop
 800447e:	bf00      	nop
 8004480:	3724      	adds	r7, #36	; 0x24
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40023800 	.word	0x40023800
 8004490:	40013800 	.word	0x40013800
 8004494:	40020000 	.word	0x40020000
 8004498:	40020400 	.word	0x40020400
 800449c:	40020800 	.word	0x40020800
 80044a0:	40020c00 	.word	0x40020c00
 80044a4:	40021000 	.word	0x40021000
 80044a8:	40021400 	.word	0x40021400
 80044ac:	40021800 	.word	0x40021800
 80044b0:	40021c00 	.word	0x40021c00
 80044b4:	40013c00 	.word	0x40013c00

080044b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80044c6:	2300      	movs	r3, #0
 80044c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ce:	2300      	movs	r3, #0
 80044d0:	617b      	str	r3, [r7, #20]
 80044d2:	e0cd      	b.n	8004670 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044d4:	2201      	movs	r2, #1
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	fa02 f303 	lsl.w	r3, r2, r3
 80044dc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	4013      	ands	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	f040 80bd 	bne.w	800466a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80044f0:	4a65      	ldr	r2, [pc, #404]	; (8004688 <HAL_GPIO_DeInit+0x1d0>)
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	089b      	lsrs	r3, r3, #2
 80044f6:	3302      	adds	r3, #2
 80044f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044fc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f003 0303 	and.w	r3, r3, #3
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	220f      	movs	r2, #15
 8004508:	fa02 f303 	lsl.w	r3, r2, r3
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	4013      	ands	r3, r2
 8004510:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a5d      	ldr	r2, [pc, #372]	; (800468c <HAL_GPIO_DeInit+0x1d4>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d02b      	beq.n	8004572 <HAL_GPIO_DeInit+0xba>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a5c      	ldr	r2, [pc, #368]	; (8004690 <HAL_GPIO_DeInit+0x1d8>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d025      	beq.n	800456e <HAL_GPIO_DeInit+0xb6>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a5b      	ldr	r2, [pc, #364]	; (8004694 <HAL_GPIO_DeInit+0x1dc>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d01f      	beq.n	800456a <HAL_GPIO_DeInit+0xb2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a5a      	ldr	r2, [pc, #360]	; (8004698 <HAL_GPIO_DeInit+0x1e0>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d019      	beq.n	8004566 <HAL_GPIO_DeInit+0xae>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a59      	ldr	r2, [pc, #356]	; (800469c <HAL_GPIO_DeInit+0x1e4>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d013      	beq.n	8004562 <HAL_GPIO_DeInit+0xaa>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a58      	ldr	r2, [pc, #352]	; (80046a0 <HAL_GPIO_DeInit+0x1e8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00d      	beq.n	800455e <HAL_GPIO_DeInit+0xa6>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a57      	ldr	r2, [pc, #348]	; (80046a4 <HAL_GPIO_DeInit+0x1ec>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d007      	beq.n	800455a <HAL_GPIO_DeInit+0xa2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a56      	ldr	r2, [pc, #344]	; (80046a8 <HAL_GPIO_DeInit+0x1f0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d101      	bne.n	8004556 <HAL_GPIO_DeInit+0x9e>
 8004552:	2307      	movs	r3, #7
 8004554:	e00e      	b.n	8004574 <HAL_GPIO_DeInit+0xbc>
 8004556:	2308      	movs	r3, #8
 8004558:	e00c      	b.n	8004574 <HAL_GPIO_DeInit+0xbc>
 800455a:	2306      	movs	r3, #6
 800455c:	e00a      	b.n	8004574 <HAL_GPIO_DeInit+0xbc>
 800455e:	2305      	movs	r3, #5
 8004560:	e008      	b.n	8004574 <HAL_GPIO_DeInit+0xbc>
 8004562:	2304      	movs	r3, #4
 8004564:	e006      	b.n	8004574 <HAL_GPIO_DeInit+0xbc>
 8004566:	2303      	movs	r3, #3
 8004568:	e004      	b.n	8004574 <HAL_GPIO_DeInit+0xbc>
 800456a:	2302      	movs	r3, #2
 800456c:	e002      	b.n	8004574 <HAL_GPIO_DeInit+0xbc>
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <HAL_GPIO_DeInit+0xbc>
 8004572:	2300      	movs	r3, #0
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	f002 0203 	and.w	r2, r2, #3
 800457a:	0092      	lsls	r2, r2, #2
 800457c:	4093      	lsls	r3, r2
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	429a      	cmp	r2, r3
 8004582:	d132      	bne.n	80045ea <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004584:	4b49      	ldr	r3, [pc, #292]	; (80046ac <HAL_GPIO_DeInit+0x1f4>)
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	43db      	mvns	r3, r3
 800458c:	4947      	ldr	r1, [pc, #284]	; (80046ac <HAL_GPIO_DeInit+0x1f4>)
 800458e:	4013      	ands	r3, r2
 8004590:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004592:	4b46      	ldr	r3, [pc, #280]	; (80046ac <HAL_GPIO_DeInit+0x1f4>)
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	43db      	mvns	r3, r3
 800459a:	4944      	ldr	r1, [pc, #272]	; (80046ac <HAL_GPIO_DeInit+0x1f4>)
 800459c:	4013      	ands	r3, r2
 800459e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80045a0:	4b42      	ldr	r3, [pc, #264]	; (80046ac <HAL_GPIO_DeInit+0x1f4>)
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	43db      	mvns	r3, r3
 80045a8:	4940      	ldr	r1, [pc, #256]	; (80046ac <HAL_GPIO_DeInit+0x1f4>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80045ae:	4b3f      	ldr	r3, [pc, #252]	; (80046ac <HAL_GPIO_DeInit+0x1f4>)
 80045b0:	689a      	ldr	r2, [r3, #8]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	43db      	mvns	r3, r3
 80045b6:	493d      	ldr	r1, [pc, #244]	; (80046ac <HAL_GPIO_DeInit+0x1f4>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	220f      	movs	r2, #15
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80045cc:	4a2e      	ldr	r2, [pc, #184]	; (8004688 <HAL_GPIO_DeInit+0x1d0>)
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	089b      	lsrs	r3, r3, #2
 80045d2:	3302      	adds	r3, #2
 80045d4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	43da      	mvns	r2, r3
 80045dc:	482a      	ldr	r0, [pc, #168]	; (8004688 <HAL_GPIO_DeInit+0x1d0>)
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	089b      	lsrs	r3, r3, #2
 80045e2:	400a      	ands	r2, r1
 80045e4:	3302      	adds	r3, #2
 80045e6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	2103      	movs	r1, #3
 80045f4:	fa01 f303 	lsl.w	r3, r1, r3
 80045f8:	43db      	mvns	r3, r3
 80045fa:	401a      	ands	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	08da      	lsrs	r2, r3, #3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3208      	adds	r2, #8
 8004608:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	220f      	movs	r2, #15
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	43db      	mvns	r3, r3
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	08d2      	lsrs	r2, r2, #3
 8004620:	4019      	ands	r1, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3208      	adds	r2, #8
 8004626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	2103      	movs	r1, #3
 8004634:	fa01 f303 	lsl.w	r3, r1, r3
 8004638:	43db      	mvns	r3, r3
 800463a:	401a      	ands	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	2101      	movs	r1, #1
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	fa01 f303 	lsl.w	r3, r1, r3
 800464c:	43db      	mvns	r3, r3
 800464e:	401a      	ands	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	2103      	movs	r1, #3
 800465e:	fa01 f303 	lsl.w	r3, r1, r3
 8004662:	43db      	mvns	r3, r3
 8004664:	401a      	ands	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	3301      	adds	r3, #1
 800466e:	617b      	str	r3, [r7, #20]
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	2b0f      	cmp	r3, #15
 8004674:	f67f af2e 	bls.w	80044d4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004678:	bf00      	nop
 800467a:	bf00      	nop
 800467c:	371c      	adds	r7, #28
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	40013800 	.word	0x40013800
 800468c:	40020000 	.word	0x40020000
 8004690:	40020400 	.word	0x40020400
 8004694:	40020800 	.word	0x40020800
 8004698:	40020c00 	.word	0x40020c00
 800469c:	40021000 	.word	0x40021000
 80046a0:	40021400 	.word	0x40021400
 80046a4:	40021800 	.word	0x40021800
 80046a8:	40021c00 	.word	0x40021c00
 80046ac:	40013c00 	.word	0x40013c00

080046b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	460b      	mov	r3, r1
 80046ba:	807b      	strh	r3, [r7, #2]
 80046bc:	4613      	mov	r3, r2
 80046be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046c0:	787b      	ldrb	r3, [r7, #1]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046c6:	887a      	ldrh	r2, [r7, #2]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046cc:	e003      	b.n	80046d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046ce:	887b      	ldrh	r3, [r7, #2]
 80046d0:	041a      	lsls	r2, r3, #16
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	619a      	str	r2, [r3, #24]
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80046e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046e4:	b08f      	sub	sp, #60	; 0x3c
 80046e6:	af0a      	add	r7, sp, #40	; 0x28
 80046e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e054      	b.n	800479e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f006 fc2a 	bl	800af68 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2203      	movs	r2, #3
 8004718:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004724:	2b00      	cmp	r3, #0
 8004726:	d102      	bne.n	800472e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f003 fc58 	bl	8007fe8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	603b      	str	r3, [r7, #0]
 800473e:	687e      	ldr	r6, [r7, #4]
 8004740:	466d      	mov	r5, sp
 8004742:	f106 0410 	add.w	r4, r6, #16
 8004746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800474a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800474c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800474e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004752:	e885 0003 	stmia.w	r5, {r0, r1}
 8004756:	1d33      	adds	r3, r6, #4
 8004758:	cb0e      	ldmia	r3, {r1, r2, r3}
 800475a:	6838      	ldr	r0, [r7, #0]
 800475c:	f003 fbd2 	bl	8007f04 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2101      	movs	r1, #1
 8004766:	4618      	mov	r0, r3
 8004768:	f003 fc4f 	bl	800800a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	603b      	str	r3, [r7, #0]
 8004772:	687e      	ldr	r6, [r7, #4]
 8004774:	466d      	mov	r5, sp
 8004776:	f106 0410 	add.w	r4, r6, #16
 800477a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800477c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800477e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004780:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004782:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004786:	e885 0003 	stmia.w	r5, {r0, r1}
 800478a:	1d33      	adds	r3, r6, #4
 800478c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800478e:	6838      	ldr	r0, [r7, #0]
 8004790:	f003 fdd8 	bl	8008344 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047a6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80047a6:	b590      	push	{r4, r7, lr}
 80047a8:	b089      	sub	sp, #36	; 0x24
 80047aa:	af04      	add	r7, sp, #16
 80047ac:	6078      	str	r0, [r7, #4]
 80047ae:	4608      	mov	r0, r1
 80047b0:	4611      	mov	r1, r2
 80047b2:	461a      	mov	r2, r3
 80047b4:	4603      	mov	r3, r0
 80047b6:	70fb      	strb	r3, [r7, #3]
 80047b8:	460b      	mov	r3, r1
 80047ba:	70bb      	strb	r3, [r7, #2]
 80047bc:	4613      	mov	r3, r2
 80047be:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d101      	bne.n	80047ce <HAL_HCD_HC_Init+0x28>
 80047ca:	2302      	movs	r3, #2
 80047cc:	e076      	b.n	80048bc <HAL_HCD_HC_Init+0x116>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80047d6:	78fb      	ldrb	r3, [r7, #3]
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	212c      	movs	r1, #44	; 0x2c
 80047dc:	fb01 f303 	mul.w	r3, r1, r3
 80047e0:	4413      	add	r3, r2
 80047e2:	333d      	adds	r3, #61	; 0x3d
 80047e4:	2200      	movs	r2, #0
 80047e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	212c      	movs	r1, #44	; 0x2c
 80047ee:	fb01 f303 	mul.w	r3, r1, r3
 80047f2:	4413      	add	r3, r2
 80047f4:	3338      	adds	r3, #56	; 0x38
 80047f6:	787a      	ldrb	r2, [r7, #1]
 80047f8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80047fa:	78fb      	ldrb	r3, [r7, #3]
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	212c      	movs	r1, #44	; 0x2c
 8004800:	fb01 f303 	mul.w	r3, r1, r3
 8004804:	4413      	add	r3, r2
 8004806:	3340      	adds	r3, #64	; 0x40
 8004808:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800480a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800480c:	78fb      	ldrb	r3, [r7, #3]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	212c      	movs	r1, #44	; 0x2c
 8004812:	fb01 f303 	mul.w	r3, r1, r3
 8004816:	4413      	add	r3, r2
 8004818:	3339      	adds	r3, #57	; 0x39
 800481a:	78fa      	ldrb	r2, [r7, #3]
 800481c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800481e:	78fb      	ldrb	r3, [r7, #3]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	212c      	movs	r1, #44	; 0x2c
 8004824:	fb01 f303 	mul.w	r3, r1, r3
 8004828:	4413      	add	r3, r2
 800482a:	333f      	adds	r3, #63	; 0x3f
 800482c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004830:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004832:	78fb      	ldrb	r3, [r7, #3]
 8004834:	78ba      	ldrb	r2, [r7, #2]
 8004836:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800483a:	b2d0      	uxtb	r0, r2
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	212c      	movs	r1, #44	; 0x2c
 8004840:	fb01 f303 	mul.w	r3, r1, r3
 8004844:	4413      	add	r3, r2
 8004846:	333a      	adds	r3, #58	; 0x3a
 8004848:	4602      	mov	r2, r0
 800484a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800484c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004850:	2b00      	cmp	r3, #0
 8004852:	da09      	bge.n	8004868 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004854:	78fb      	ldrb	r3, [r7, #3]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	212c      	movs	r1, #44	; 0x2c
 800485a:	fb01 f303 	mul.w	r3, r1, r3
 800485e:	4413      	add	r3, r2
 8004860:	333b      	adds	r3, #59	; 0x3b
 8004862:	2201      	movs	r2, #1
 8004864:	701a      	strb	r2, [r3, #0]
 8004866:	e008      	b.n	800487a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004868:	78fb      	ldrb	r3, [r7, #3]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	212c      	movs	r1, #44	; 0x2c
 800486e:	fb01 f303 	mul.w	r3, r1, r3
 8004872:	4413      	add	r3, r2
 8004874:	333b      	adds	r3, #59	; 0x3b
 8004876:	2200      	movs	r2, #0
 8004878:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800487a:	78fb      	ldrb	r3, [r7, #3]
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	212c      	movs	r1, #44	; 0x2c
 8004880:	fb01 f303 	mul.w	r3, r1, r3
 8004884:	4413      	add	r3, r2
 8004886:	333c      	adds	r3, #60	; 0x3c
 8004888:	f897 2020 	ldrb.w	r2, [r7, #32]
 800488c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	787c      	ldrb	r4, [r7, #1]
 8004894:	78ba      	ldrb	r2, [r7, #2]
 8004896:	78f9      	ldrb	r1, [r7, #3]
 8004898:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800489a:	9302      	str	r3, [sp, #8]
 800489c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80048a0:	9301      	str	r3, [sp, #4]
 80048a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	4623      	mov	r3, r4
 80048aa:	f003 fed1 	bl	8008650 <USB_HC_Init>
 80048ae:	4603      	mov	r3, r0
 80048b0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80048ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd90      	pop	{r4, r7, pc}

080048c4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	460b      	mov	r3, r1
 80048ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80048d0:	2300      	movs	r3, #0
 80048d2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d101      	bne.n	80048e2 <HAL_HCD_HC_Halt+0x1e>
 80048de:	2302      	movs	r3, #2
 80048e0:	e00f      	b.n	8004902 <HAL_HCD_HC_Halt+0x3e>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	78fa      	ldrb	r2, [r7, #3]
 80048f0:	4611      	mov	r1, r2
 80048f2:	4618      	mov	r0, r3
 80048f4:	f004 f921 	bl	8008b3a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004900:	7bfb      	ldrb	r3, [r7, #15]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
	...

0800490c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	4608      	mov	r0, r1
 8004916:	4611      	mov	r1, r2
 8004918:	461a      	mov	r2, r3
 800491a:	4603      	mov	r3, r0
 800491c:	70fb      	strb	r3, [r7, #3]
 800491e:	460b      	mov	r3, r1
 8004920:	70bb      	strb	r3, [r7, #2]
 8004922:	4613      	mov	r3, r2
 8004924:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004926:	78fb      	ldrb	r3, [r7, #3]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	212c      	movs	r1, #44	; 0x2c
 800492c:	fb01 f303 	mul.w	r3, r1, r3
 8004930:	4413      	add	r3, r2
 8004932:	333b      	adds	r3, #59	; 0x3b
 8004934:	78ba      	ldrb	r2, [r7, #2]
 8004936:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004938:	78fb      	ldrb	r3, [r7, #3]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	212c      	movs	r1, #44	; 0x2c
 800493e:	fb01 f303 	mul.w	r3, r1, r3
 8004942:	4413      	add	r3, r2
 8004944:	333f      	adds	r3, #63	; 0x3f
 8004946:	787a      	ldrb	r2, [r7, #1]
 8004948:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800494a:	7c3b      	ldrb	r3, [r7, #16]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d112      	bne.n	8004976 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	212c      	movs	r1, #44	; 0x2c
 8004956:	fb01 f303 	mul.w	r3, r1, r3
 800495a:	4413      	add	r3, r2
 800495c:	3342      	adds	r3, #66	; 0x42
 800495e:	2203      	movs	r2, #3
 8004960:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004962:	78fb      	ldrb	r3, [r7, #3]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	212c      	movs	r1, #44	; 0x2c
 8004968:	fb01 f303 	mul.w	r3, r1, r3
 800496c:	4413      	add	r3, r2
 800496e:	333d      	adds	r3, #61	; 0x3d
 8004970:	7f3a      	ldrb	r2, [r7, #28]
 8004972:	701a      	strb	r2, [r3, #0]
 8004974:	e008      	b.n	8004988 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004976:	78fb      	ldrb	r3, [r7, #3]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	212c      	movs	r1, #44	; 0x2c
 800497c:	fb01 f303 	mul.w	r3, r1, r3
 8004980:	4413      	add	r3, r2
 8004982:	3342      	adds	r3, #66	; 0x42
 8004984:	2202      	movs	r2, #2
 8004986:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004988:	787b      	ldrb	r3, [r7, #1]
 800498a:	2b03      	cmp	r3, #3
 800498c:	f200 80c6 	bhi.w	8004b1c <HAL_HCD_HC_SubmitRequest+0x210>
 8004990:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004996:	bf00      	nop
 8004998:	080049a9 	.word	0x080049a9
 800499c:	08004b09 	.word	0x08004b09
 80049a0:	08004a0d 	.word	0x08004a0d
 80049a4:	08004a8b 	.word	0x08004a8b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80049a8:	7c3b      	ldrb	r3, [r7, #16]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	f040 80b8 	bne.w	8004b20 <HAL_HCD_HC_SubmitRequest+0x214>
 80049b0:	78bb      	ldrb	r3, [r7, #2]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f040 80b4 	bne.w	8004b20 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80049b8:	8b3b      	ldrh	r3, [r7, #24]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d108      	bne.n	80049d0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80049be:	78fb      	ldrb	r3, [r7, #3]
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	212c      	movs	r1, #44	; 0x2c
 80049c4:	fb01 f303 	mul.w	r3, r1, r3
 80049c8:	4413      	add	r3, r2
 80049ca:	3355      	adds	r3, #85	; 0x55
 80049cc:	2201      	movs	r2, #1
 80049ce:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80049d0:	78fb      	ldrb	r3, [r7, #3]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	212c      	movs	r1, #44	; 0x2c
 80049d6:	fb01 f303 	mul.w	r3, r1, r3
 80049da:	4413      	add	r3, r2
 80049dc:	3355      	adds	r3, #85	; 0x55
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d109      	bne.n	80049f8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	212c      	movs	r1, #44	; 0x2c
 80049ea:	fb01 f303 	mul.w	r3, r1, r3
 80049ee:	4413      	add	r3, r2
 80049f0:	3342      	adds	r3, #66	; 0x42
 80049f2:	2200      	movs	r2, #0
 80049f4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80049f6:	e093      	b.n	8004b20 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80049f8:	78fb      	ldrb	r3, [r7, #3]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	212c      	movs	r1, #44	; 0x2c
 80049fe:	fb01 f303 	mul.w	r3, r1, r3
 8004a02:	4413      	add	r3, r2
 8004a04:	3342      	adds	r3, #66	; 0x42
 8004a06:	2202      	movs	r2, #2
 8004a08:	701a      	strb	r2, [r3, #0]
      break;
 8004a0a:	e089      	b.n	8004b20 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004a0c:	78bb      	ldrb	r3, [r7, #2]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d11d      	bne.n	8004a4e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004a12:	78fb      	ldrb	r3, [r7, #3]
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	212c      	movs	r1, #44	; 0x2c
 8004a18:	fb01 f303 	mul.w	r3, r1, r3
 8004a1c:	4413      	add	r3, r2
 8004a1e:	3355      	adds	r3, #85	; 0x55
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d109      	bne.n	8004a3a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004a26:	78fb      	ldrb	r3, [r7, #3]
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	212c      	movs	r1, #44	; 0x2c
 8004a2c:	fb01 f303 	mul.w	r3, r1, r3
 8004a30:	4413      	add	r3, r2
 8004a32:	3342      	adds	r3, #66	; 0x42
 8004a34:	2200      	movs	r2, #0
 8004a36:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004a38:	e073      	b.n	8004b22 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	212c      	movs	r1, #44	; 0x2c
 8004a40:	fb01 f303 	mul.w	r3, r1, r3
 8004a44:	4413      	add	r3, r2
 8004a46:	3342      	adds	r3, #66	; 0x42
 8004a48:	2202      	movs	r2, #2
 8004a4a:	701a      	strb	r2, [r3, #0]
      break;
 8004a4c:	e069      	b.n	8004b22 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004a4e:	78fb      	ldrb	r3, [r7, #3]
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	212c      	movs	r1, #44	; 0x2c
 8004a54:	fb01 f303 	mul.w	r3, r1, r3
 8004a58:	4413      	add	r3, r2
 8004a5a:	3354      	adds	r3, #84	; 0x54
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d109      	bne.n	8004a76 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004a62:	78fb      	ldrb	r3, [r7, #3]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	212c      	movs	r1, #44	; 0x2c
 8004a68:	fb01 f303 	mul.w	r3, r1, r3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	3342      	adds	r3, #66	; 0x42
 8004a70:	2200      	movs	r2, #0
 8004a72:	701a      	strb	r2, [r3, #0]
      break;
 8004a74:	e055      	b.n	8004b22 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004a76:	78fb      	ldrb	r3, [r7, #3]
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	212c      	movs	r1, #44	; 0x2c
 8004a7c:	fb01 f303 	mul.w	r3, r1, r3
 8004a80:	4413      	add	r3, r2
 8004a82:	3342      	adds	r3, #66	; 0x42
 8004a84:	2202      	movs	r2, #2
 8004a86:	701a      	strb	r2, [r3, #0]
      break;
 8004a88:	e04b      	b.n	8004b22 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004a8a:	78bb      	ldrb	r3, [r7, #2]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d11d      	bne.n	8004acc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004a90:	78fb      	ldrb	r3, [r7, #3]
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	212c      	movs	r1, #44	; 0x2c
 8004a96:	fb01 f303 	mul.w	r3, r1, r3
 8004a9a:	4413      	add	r3, r2
 8004a9c:	3355      	adds	r3, #85	; 0x55
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d109      	bne.n	8004ab8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004aa4:	78fb      	ldrb	r3, [r7, #3]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	212c      	movs	r1, #44	; 0x2c
 8004aaa:	fb01 f303 	mul.w	r3, r1, r3
 8004aae:	4413      	add	r3, r2
 8004ab0:	3342      	adds	r3, #66	; 0x42
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004ab6:	e034      	b.n	8004b22 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	212c      	movs	r1, #44	; 0x2c
 8004abe:	fb01 f303 	mul.w	r3, r1, r3
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3342      	adds	r3, #66	; 0x42
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	701a      	strb	r2, [r3, #0]
      break;
 8004aca:	e02a      	b.n	8004b22 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004acc:	78fb      	ldrb	r3, [r7, #3]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	212c      	movs	r1, #44	; 0x2c
 8004ad2:	fb01 f303 	mul.w	r3, r1, r3
 8004ad6:	4413      	add	r3, r2
 8004ad8:	3354      	adds	r3, #84	; 0x54
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d109      	bne.n	8004af4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ae0:	78fb      	ldrb	r3, [r7, #3]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	212c      	movs	r1, #44	; 0x2c
 8004ae6:	fb01 f303 	mul.w	r3, r1, r3
 8004aea:	4413      	add	r3, r2
 8004aec:	3342      	adds	r3, #66	; 0x42
 8004aee:	2200      	movs	r2, #0
 8004af0:	701a      	strb	r2, [r3, #0]
      break;
 8004af2:	e016      	b.n	8004b22 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004af4:	78fb      	ldrb	r3, [r7, #3]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	212c      	movs	r1, #44	; 0x2c
 8004afa:	fb01 f303 	mul.w	r3, r1, r3
 8004afe:	4413      	add	r3, r2
 8004b00:	3342      	adds	r3, #66	; 0x42
 8004b02:	2202      	movs	r2, #2
 8004b04:	701a      	strb	r2, [r3, #0]
      break;
 8004b06:	e00c      	b.n	8004b22 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b08:	78fb      	ldrb	r3, [r7, #3]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	212c      	movs	r1, #44	; 0x2c
 8004b0e:	fb01 f303 	mul.w	r3, r1, r3
 8004b12:	4413      	add	r3, r2
 8004b14:	3342      	adds	r3, #66	; 0x42
 8004b16:	2200      	movs	r2, #0
 8004b18:	701a      	strb	r2, [r3, #0]
      break;
 8004b1a:	e002      	b.n	8004b22 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004b1c:	bf00      	nop
 8004b1e:	e000      	b.n	8004b22 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004b20:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004b22:	78fb      	ldrb	r3, [r7, #3]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	212c      	movs	r1, #44	; 0x2c
 8004b28:	fb01 f303 	mul.w	r3, r1, r3
 8004b2c:	4413      	add	r3, r2
 8004b2e:	3344      	adds	r3, #68	; 0x44
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004b34:	78fb      	ldrb	r3, [r7, #3]
 8004b36:	8b3a      	ldrh	r2, [r7, #24]
 8004b38:	6879      	ldr	r1, [r7, #4]
 8004b3a:	202c      	movs	r0, #44	; 0x2c
 8004b3c:	fb00 f303 	mul.w	r3, r0, r3
 8004b40:	440b      	add	r3, r1
 8004b42:	334c      	adds	r3, #76	; 0x4c
 8004b44:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004b46:	78fb      	ldrb	r3, [r7, #3]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	212c      	movs	r1, #44	; 0x2c
 8004b4c:	fb01 f303 	mul.w	r3, r1, r3
 8004b50:	4413      	add	r3, r2
 8004b52:	3360      	adds	r3, #96	; 0x60
 8004b54:	2200      	movs	r2, #0
 8004b56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004b58:	78fb      	ldrb	r3, [r7, #3]
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	212c      	movs	r1, #44	; 0x2c
 8004b5e:	fb01 f303 	mul.w	r3, r1, r3
 8004b62:	4413      	add	r3, r2
 8004b64:	3350      	adds	r3, #80	; 0x50
 8004b66:	2200      	movs	r2, #0
 8004b68:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004b6a:	78fb      	ldrb	r3, [r7, #3]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	212c      	movs	r1, #44	; 0x2c
 8004b70:	fb01 f303 	mul.w	r3, r1, r3
 8004b74:	4413      	add	r3, r2
 8004b76:	3339      	adds	r3, #57	; 0x39
 8004b78:	78fa      	ldrb	r2, [r7, #3]
 8004b7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004b7c:	78fb      	ldrb	r3, [r7, #3]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	212c      	movs	r1, #44	; 0x2c
 8004b82:	fb01 f303 	mul.w	r3, r1, r3
 8004b86:	4413      	add	r3, r2
 8004b88:	3361      	adds	r3, #97	; 0x61
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6818      	ldr	r0, [r3, #0]
 8004b92:	78fb      	ldrb	r3, [r7, #3]
 8004b94:	222c      	movs	r2, #44	; 0x2c
 8004b96:	fb02 f303 	mul.w	r3, r2, r3
 8004b9a:	3338      	adds	r3, #56	; 0x38
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	18d1      	adds	r1, r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f003 fe74 	bl	8008894 <USB_HC_StartXfer>
 8004bac:	4603      	mov	r3, r0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop

08004bb8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f003 fb75 	bl	80082be <USB_GetMode>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	f040 80f6 	bne.w	8004dc8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f003 fb59 	bl	8008298 <USB_ReadInterrupts>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 80ec 	beq.w	8004dc6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f003 fb50 	bl	8008298 <USB_ReadInterrupts>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c02:	d104      	bne.n	8004c0e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004c0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f003 fb40 	bl	8008298 <USB_ReadInterrupts>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c22:	d104      	bne.n	8004c2e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004c2c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f003 fb30 	bl	8008298 <USB_ReadInterrupts>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c42:	d104      	bne.n	8004c4e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004c4c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f003 fb20 	bl	8008298 <USB_ReadInterrupts>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d103      	bne.n	8004c6a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2202      	movs	r2, #2
 8004c68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f003 fb12 	bl	8008298 <USB_ReadInterrupts>
 8004c74:	4603      	mov	r3, r0
 8004c76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c7e:	d11c      	bne.n	8004cba <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004c88:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10f      	bne.n	8004cba <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004c9a:	2110      	movs	r1, #16
 8004c9c:	6938      	ldr	r0, [r7, #16]
 8004c9e:	f003 fa01 	bl	80080a4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004ca2:	6938      	ldr	r0, [r7, #16]
 8004ca4:	f003 fa32 	bl	800810c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2101      	movs	r1, #1
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f003 fc08 	bl	80084c4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f006 f9d5 	bl	800b064 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f003 faea 	bl	8008298 <USB_ReadInterrupts>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cce:	d102      	bne.n	8004cd6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f001 f89e 	bl	8005e12 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f003 fadc 	bl	8008298 <USB_ReadInterrupts>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	f003 0308 	and.w	r3, r3, #8
 8004ce6:	2b08      	cmp	r3, #8
 8004ce8:	d106      	bne.n	8004cf8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f006 f99e 	bl	800b02c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2208      	movs	r2, #8
 8004cf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f003 facb 	bl	8008298 <USB_ReadInterrupts>
 8004d02:	4603      	mov	r3, r0
 8004d04:	f003 0310 	and.w	r3, r3, #16
 8004d08:	2b10      	cmp	r3, #16
 8004d0a:	d101      	bne.n	8004d10 <HAL_HCD_IRQHandler+0x158>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e000      	b.n	8004d12 <HAL_HCD_IRQHandler+0x15a>
 8004d10:	2300      	movs	r3, #0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d012      	beq.n	8004d3c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	699a      	ldr	r2, [r3, #24]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0210 	bic.w	r2, r2, #16
 8004d24:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 ffa1 	bl	8005c6e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	699a      	ldr	r2, [r3, #24]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0210 	orr.w	r2, r2, #16
 8004d3a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f003 faa9 	bl	8008298 <USB_ReadInterrupts>
 8004d46:	4603      	mov	r3, r0
 8004d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d50:	d13a      	bne.n	8004dc8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f003 fede 	bl	8008b18 <USB_HC_ReadInterrupt>
 8004d5c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004d5e:	2300      	movs	r3, #0
 8004d60:	617b      	str	r3, [r7, #20]
 8004d62:	e025      	b.n	8004db0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d018      	beq.n	8004daa <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d8e:	d106      	bne.n	8004d9e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	4619      	mov	r1, r3
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f8ab 	bl	8004ef2 <HCD_HC_IN_IRQHandler>
 8004d9c:	e005      	b.n	8004daa <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	4619      	mov	r1, r3
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 fbf9 	bl	800559c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	3301      	adds	r3, #1
 8004dae:	617b      	str	r3, [r7, #20]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d3d4      	bcc.n	8004d64 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dc2:	615a      	str	r2, [r3, #20]
 8004dc4:	e000      	b.n	8004dc8 <HAL_HCD_IRQHandler+0x210>
      return;
 8004dc6:	bf00      	nop
    }
  }
}
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b082      	sub	sp, #8
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d101      	bne.n	8004de4 <HAL_HCD_Start+0x16>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e013      	b.n	8004e0c <HAL_HCD_Start+0x3e>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2101      	movs	r1, #1
 8004df2:	4618      	mov	r0, r3
 8004df4:	f003 fbca 	bl	800858c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f003 f8e2 	bl	8007fc6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3708      	adds	r7, #8
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d101      	bne.n	8004e2a <HAL_HCD_Stop+0x16>
 8004e26:	2302      	movs	r3, #2
 8004e28:	e00d      	b.n	8004e46 <HAL_HCD_Stop+0x32>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f003 ffb8 	bl	8008dac <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b082      	sub	sp, #8
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f003 fb6c 	bl	8008538 <USB_ResetPort>
 8004e60:	4603      	mov	r3, r0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	460b      	mov	r3, r1
 8004e74:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004e76:	78fb      	ldrb	r3, [r7, #3]
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	212c      	movs	r1, #44	; 0x2c
 8004e7c:	fb01 f303 	mul.w	r3, r1, r3
 8004e80:	4413      	add	r3, r2
 8004e82:	3360      	adds	r3, #96	; 0x60
 8004e84:	781b      	ldrb	r3, [r3, #0]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004e9e:	78fb      	ldrb	r3, [r7, #3]
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	212c      	movs	r1, #44	; 0x2c
 8004ea4:	fb01 f303 	mul.w	r3, r1, r3
 8004ea8:	4413      	add	r3, r2
 8004eaa:	3350      	adds	r3, #80	; 0x50
 8004eac:	681b      	ldr	r3, [r3, #0]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b082      	sub	sp, #8
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f003 fbb0 	bl	800862c <USB_GetCurrentFrame>
 8004ecc:	4603      	mov	r3, r0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b082      	sub	sp, #8
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f003 fb8b 	bl	80085fe <USB_GetHostSpeed>
 8004ee8:	4603      	mov	r3, r0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b086      	sub	sp, #24
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
 8004efa:	460b      	mov	r3, r1
 8004efc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004f08:	78fb      	ldrb	r3, [r7, #3]
 8004f0a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 0304 	and.w	r3, r3, #4
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	d11a      	bne.n	8004f58 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f2e:	461a      	mov	r2, r3
 8004f30:	2304      	movs	r3, #4
 8004f32:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	212c      	movs	r1, #44	; 0x2c
 8004f3a:	fb01 f303 	mul.w	r3, r1, r3
 8004f3e:	4413      	add	r3, r2
 8004f40:	3361      	adds	r3, #97	; 0x61
 8004f42:	2206      	movs	r2, #6
 8004f44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	b2d2      	uxtb	r2, r2
 8004f4e:	4611      	mov	r1, r2
 8004f50:	4618      	mov	r0, r3
 8004f52:	f003 fdf2 	bl	8008b3a <USB_HC_Halt>
 8004f56:	e0af      	b.n	80050b8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f6e:	d11b      	bne.n	8004fa8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f82:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	212c      	movs	r1, #44	; 0x2c
 8004f8a:	fb01 f303 	mul.w	r3, r1, r3
 8004f8e:	4413      	add	r3, r2
 8004f90:	3361      	adds	r3, #97	; 0x61
 8004f92:	2207      	movs	r2, #7
 8004f94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f003 fdca 	bl	8008b3a <USB_HC_Halt>
 8004fa6:	e087      	b.n	80050b8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	015a      	lsls	r2, r3, #5
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d109      	bne.n	8004fd2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fca:	461a      	mov	r2, r3
 8004fcc:	2320      	movs	r3, #32
 8004fce:	6093      	str	r3, [r2, #8]
 8004fd0:	e072      	b.n	80050b8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f003 0308 	and.w	r3, r3, #8
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d11a      	bne.n	800501e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	2308      	movs	r3, #8
 8004ff8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	212c      	movs	r1, #44	; 0x2c
 8005000:	fb01 f303 	mul.w	r3, r1, r3
 8005004:	4413      	add	r3, r2
 8005006:	3361      	adds	r3, #97	; 0x61
 8005008:	2205      	movs	r2, #5
 800500a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	b2d2      	uxtb	r2, r2
 8005014:	4611      	mov	r1, r2
 8005016:	4618      	mov	r0, r3
 8005018:	f003 fd8f 	bl	8008b3a <USB_HC_Halt>
 800501c:	e04c      	b.n	80050b8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	4413      	add	r3, r2
 8005026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005034:	d11b      	bne.n	800506e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	4413      	add	r3, r2
 800503e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005042:	461a      	mov	r2, r3
 8005044:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005048:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	212c      	movs	r1, #44	; 0x2c
 8005050:	fb01 f303 	mul.w	r3, r1, r3
 8005054:	4413      	add	r3, r2
 8005056:	3361      	adds	r3, #97	; 0x61
 8005058:	2208      	movs	r2, #8
 800505a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	4611      	mov	r1, r2
 8005066:	4618      	mov	r0, r3
 8005068:	f003 fd67 	bl	8008b3a <USB_HC_Halt>
 800506c:	e024      	b.n	80050b8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	4413      	add	r3, r2
 8005076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005080:	2b80      	cmp	r3, #128	; 0x80
 8005082:	d119      	bne.n	80050b8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	4413      	add	r3, r2
 800508c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005090:	461a      	mov	r2, r3
 8005092:	2380      	movs	r3, #128	; 0x80
 8005094:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	212c      	movs	r1, #44	; 0x2c
 800509c:	fb01 f303 	mul.w	r3, r1, r3
 80050a0:	4413      	add	r3, r2
 80050a2:	3361      	adds	r3, #97	; 0x61
 80050a4:	2206      	movs	r2, #6
 80050a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	4611      	mov	r1, r2
 80050b2:	4618      	mov	r0, r3
 80050b4:	f003 fd41 	bl	8008b3a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ce:	d112      	bne.n	80050f6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	4611      	mov	r1, r2
 80050da:	4618      	mov	r0, r3
 80050dc:	f003 fd2d 	bl	8008b3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ec:	461a      	mov	r2, r3
 80050ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050f2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80050f4:	e24e      	b.n	8005594 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b01      	cmp	r3, #1
 800510a:	f040 80df 	bne.w	80052cc <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d019      	beq.n	800514a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	212c      	movs	r1, #44	; 0x2c
 800511c:	fb01 f303 	mul.w	r3, r1, r3
 8005120:	4413      	add	r3, r2
 8005122:	3348      	adds	r3, #72	; 0x48
 8005124:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	0159      	lsls	r1, r3, #5
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	440b      	add	r3, r1
 800512e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005138:	1ad2      	subs	r2, r2, r3
 800513a:	6879      	ldr	r1, [r7, #4]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	202c      	movs	r0, #44	; 0x2c
 8005140:	fb00 f303 	mul.w	r3, r0, r3
 8005144:	440b      	add	r3, r1
 8005146:	3350      	adds	r3, #80	; 0x50
 8005148:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	212c      	movs	r1, #44	; 0x2c
 8005150:	fb01 f303 	mul.w	r3, r1, r3
 8005154:	4413      	add	r3, r2
 8005156:	3361      	adds	r3, #97	; 0x61
 8005158:	2201      	movs	r2, #1
 800515a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	212c      	movs	r1, #44	; 0x2c
 8005162:	fb01 f303 	mul.w	r3, r1, r3
 8005166:	4413      	add	r3, r2
 8005168:	335c      	adds	r3, #92	; 0x5c
 800516a:	2200      	movs	r2, #0
 800516c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	4413      	add	r3, r2
 8005176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517a:	461a      	mov	r2, r3
 800517c:	2301      	movs	r3, #1
 800517e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	212c      	movs	r1, #44	; 0x2c
 8005186:	fb01 f303 	mul.w	r3, r1, r3
 800518a:	4413      	add	r3, r2
 800518c:	333f      	adds	r3, #63	; 0x3f
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d009      	beq.n	80051a8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	212c      	movs	r1, #44	; 0x2c
 800519a:	fb01 f303 	mul.w	r3, r1, r3
 800519e:	4413      	add	r3, r2
 80051a0:	333f      	adds	r3, #63	; 0x3f
 80051a2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d111      	bne.n	80051cc <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	4611      	mov	r1, r2
 80051b2:	4618      	mov	r0, r3
 80051b4:	f003 fcc1 	bl	8008b3a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c4:	461a      	mov	r2, r3
 80051c6:	2310      	movs	r3, #16
 80051c8:	6093      	str	r3, [r2, #8]
 80051ca:	e03a      	b.n	8005242 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	212c      	movs	r1, #44	; 0x2c
 80051d2:	fb01 f303 	mul.w	r3, r1, r3
 80051d6:	4413      	add	r3, r2
 80051d8:	333f      	adds	r3, #63	; 0x3f
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	2b03      	cmp	r3, #3
 80051de:	d009      	beq.n	80051f4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	212c      	movs	r1, #44	; 0x2c
 80051e6:	fb01 f303 	mul.w	r3, r1, r3
 80051ea:	4413      	add	r3, r2
 80051ec:	333f      	adds	r3, #63	; 0x3f
 80051ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d126      	bne.n	8005242 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	0151      	lsls	r1, r2, #5
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	440a      	add	r2, r1
 800520a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800520e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005212:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	212c      	movs	r1, #44	; 0x2c
 800521a:	fb01 f303 	mul.w	r3, r1, r3
 800521e:	4413      	add	r3, r2
 8005220:	3360      	adds	r3, #96	; 0x60
 8005222:	2201      	movs	r2, #1
 8005224:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	b2d9      	uxtb	r1, r3
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	202c      	movs	r0, #44	; 0x2c
 8005230:	fb00 f303 	mul.w	r3, r0, r3
 8005234:	4413      	add	r3, r2
 8005236:	3360      	adds	r3, #96	; 0x60
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	461a      	mov	r2, r3
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f005 ff1f 	bl	800b080 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d12b      	bne.n	80052a2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	212c      	movs	r1, #44	; 0x2c
 8005250:	fb01 f303 	mul.w	r3, r1, r3
 8005254:	4413      	add	r3, r2
 8005256:	3348      	adds	r3, #72	; 0x48
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6879      	ldr	r1, [r7, #4]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	202c      	movs	r0, #44	; 0x2c
 8005260:	fb00 f202 	mul.w	r2, r0, r2
 8005264:	440a      	add	r2, r1
 8005266:	3240      	adds	r2, #64	; 0x40
 8005268:	8812      	ldrh	r2, [r2, #0]
 800526a:	fbb3 f3f2 	udiv	r3, r3, r2
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	f000 818e 	beq.w	8005594 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	212c      	movs	r1, #44	; 0x2c
 800527e:	fb01 f303 	mul.w	r3, r1, r3
 8005282:	4413      	add	r3, r2
 8005284:	3354      	adds	r3, #84	; 0x54
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	f083 0301 	eor.w	r3, r3, #1
 800528c:	b2d8      	uxtb	r0, r3
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	212c      	movs	r1, #44	; 0x2c
 8005294:	fb01 f303 	mul.w	r3, r1, r3
 8005298:	4413      	add	r3, r2
 800529a:	3354      	adds	r3, #84	; 0x54
 800529c:	4602      	mov	r2, r0
 800529e:	701a      	strb	r2, [r3, #0]
}
 80052a0:	e178      	b.n	8005594 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	212c      	movs	r1, #44	; 0x2c
 80052a8:	fb01 f303 	mul.w	r3, r1, r3
 80052ac:	4413      	add	r3, r2
 80052ae:	3354      	adds	r3, #84	; 0x54
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	f083 0301 	eor.w	r3, r3, #1
 80052b6:	b2d8      	uxtb	r0, r3
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	212c      	movs	r1, #44	; 0x2c
 80052be:	fb01 f303 	mul.w	r3, r1, r3
 80052c2:	4413      	add	r3, r2
 80052c4:	3354      	adds	r3, #84	; 0x54
 80052c6:	4602      	mov	r2, r0
 80052c8:	701a      	strb	r2, [r3, #0]
}
 80052ca:	e163      	b.n	8005594 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b02      	cmp	r3, #2
 80052e0:	f040 80f6 	bne.w	80054d0 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	212c      	movs	r1, #44	; 0x2c
 80052ea:	fb01 f303 	mul.w	r3, r1, r3
 80052ee:	4413      	add	r3, r2
 80052f0:	3361      	adds	r3, #97	; 0x61
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d109      	bne.n	800530c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	212c      	movs	r1, #44	; 0x2c
 80052fe:	fb01 f303 	mul.w	r3, r1, r3
 8005302:	4413      	add	r3, r2
 8005304:	3360      	adds	r3, #96	; 0x60
 8005306:	2201      	movs	r2, #1
 8005308:	701a      	strb	r2, [r3, #0]
 800530a:	e0c9      	b.n	80054a0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	212c      	movs	r1, #44	; 0x2c
 8005312:	fb01 f303 	mul.w	r3, r1, r3
 8005316:	4413      	add	r3, r2
 8005318:	3361      	adds	r3, #97	; 0x61
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	2b05      	cmp	r3, #5
 800531e:	d109      	bne.n	8005334 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	212c      	movs	r1, #44	; 0x2c
 8005326:	fb01 f303 	mul.w	r3, r1, r3
 800532a:	4413      	add	r3, r2
 800532c:	3360      	adds	r3, #96	; 0x60
 800532e:	2205      	movs	r2, #5
 8005330:	701a      	strb	r2, [r3, #0]
 8005332:	e0b5      	b.n	80054a0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	212c      	movs	r1, #44	; 0x2c
 800533a:	fb01 f303 	mul.w	r3, r1, r3
 800533e:	4413      	add	r3, r2
 8005340:	3361      	adds	r3, #97	; 0x61
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	2b06      	cmp	r3, #6
 8005346:	d009      	beq.n	800535c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	212c      	movs	r1, #44	; 0x2c
 800534e:	fb01 f303 	mul.w	r3, r1, r3
 8005352:	4413      	add	r3, r2
 8005354:	3361      	adds	r3, #97	; 0x61
 8005356:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005358:	2b08      	cmp	r3, #8
 800535a:	d150      	bne.n	80053fe <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	212c      	movs	r1, #44	; 0x2c
 8005362:	fb01 f303 	mul.w	r3, r1, r3
 8005366:	4413      	add	r3, r2
 8005368:	335c      	adds	r3, #92	; 0x5c
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	6879      	ldr	r1, [r7, #4]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	202c      	movs	r0, #44	; 0x2c
 8005374:	fb00 f303 	mul.w	r3, r0, r3
 8005378:	440b      	add	r3, r1
 800537a:	335c      	adds	r3, #92	; 0x5c
 800537c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	212c      	movs	r1, #44	; 0x2c
 8005384:	fb01 f303 	mul.w	r3, r1, r3
 8005388:	4413      	add	r3, r2
 800538a:	335c      	adds	r3, #92	; 0x5c
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b02      	cmp	r3, #2
 8005390:	d912      	bls.n	80053b8 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	212c      	movs	r1, #44	; 0x2c
 8005398:	fb01 f303 	mul.w	r3, r1, r3
 800539c:	4413      	add	r3, r2
 800539e:	335c      	adds	r3, #92	; 0x5c
 80053a0:	2200      	movs	r2, #0
 80053a2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	212c      	movs	r1, #44	; 0x2c
 80053aa:	fb01 f303 	mul.w	r3, r1, r3
 80053ae:	4413      	add	r3, r2
 80053b0:	3360      	adds	r3, #96	; 0x60
 80053b2:	2204      	movs	r2, #4
 80053b4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80053b6:	e073      	b.n	80054a0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	212c      	movs	r1, #44	; 0x2c
 80053be:	fb01 f303 	mul.w	r3, r1, r3
 80053c2:	4413      	add	r3, r2
 80053c4:	3360      	adds	r3, #96	; 0x60
 80053c6:	2202      	movs	r2, #2
 80053c8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053e0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053e8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f6:	461a      	mov	r2, r3
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80053fc:	e050      	b.n	80054a0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	212c      	movs	r1, #44	; 0x2c
 8005404:	fb01 f303 	mul.w	r3, r1, r3
 8005408:	4413      	add	r3, r2
 800540a:	3361      	adds	r3, #97	; 0x61
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	2b03      	cmp	r3, #3
 8005410:	d122      	bne.n	8005458 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	212c      	movs	r1, #44	; 0x2c
 8005418:	fb01 f303 	mul.w	r3, r1, r3
 800541c:	4413      	add	r3, r2
 800541e:	3360      	adds	r3, #96	; 0x60
 8005420:	2202      	movs	r2, #2
 8005422:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	4413      	add	r3, r2
 800542c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800543a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005442:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	4413      	add	r3, r2
 800544c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005450:	461a      	mov	r2, r3
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	e023      	b.n	80054a0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	212c      	movs	r1, #44	; 0x2c
 800545e:	fb01 f303 	mul.w	r3, r1, r3
 8005462:	4413      	add	r3, r2
 8005464:	3361      	adds	r3, #97	; 0x61
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2b07      	cmp	r3, #7
 800546a:	d119      	bne.n	80054a0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	212c      	movs	r1, #44	; 0x2c
 8005472:	fb01 f303 	mul.w	r3, r1, r3
 8005476:	4413      	add	r3, r2
 8005478:	335c      	adds	r3, #92	; 0x5c
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	202c      	movs	r0, #44	; 0x2c
 8005484:	fb00 f303 	mul.w	r3, r0, r3
 8005488:	440b      	add	r3, r1
 800548a:	335c      	adds	r3, #92	; 0x5c
 800548c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	212c      	movs	r1, #44	; 0x2c
 8005494:	fb01 f303 	mul.w	r3, r1, r3
 8005498:	4413      	add	r3, r2
 800549a:	3360      	adds	r3, #96	; 0x60
 800549c:	2204      	movs	r2, #4
 800549e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ac:	461a      	mov	r2, r3
 80054ae:	2302      	movs	r3, #2
 80054b0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	b2d9      	uxtb	r1, r3
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	202c      	movs	r0, #44	; 0x2c
 80054bc:	fb00 f303 	mul.w	r3, r0, r3
 80054c0:	4413      	add	r3, r2
 80054c2:	3360      	adds	r3, #96	; 0x60
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	461a      	mov	r2, r3
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f005 fdd9 	bl	800b080 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80054ce:	e061      	b.n	8005594 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f003 0310 	and.w	r3, r3, #16
 80054e2:	2b10      	cmp	r3, #16
 80054e4:	d156      	bne.n	8005594 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	212c      	movs	r1, #44	; 0x2c
 80054ec:	fb01 f303 	mul.w	r3, r1, r3
 80054f0:	4413      	add	r3, r2
 80054f2:	333f      	adds	r3, #63	; 0x3f
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	2b03      	cmp	r3, #3
 80054f8:	d111      	bne.n	800551e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	212c      	movs	r1, #44	; 0x2c
 8005500:	fb01 f303 	mul.w	r3, r1, r3
 8005504:	4413      	add	r3, r2
 8005506:	335c      	adds	r3, #92	; 0x5c
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	b2d2      	uxtb	r2, r2
 8005514:	4611      	mov	r1, r2
 8005516:	4618      	mov	r0, r3
 8005518:	f003 fb0f 	bl	8008b3a <USB_HC_Halt>
 800551c:	e031      	b.n	8005582 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	212c      	movs	r1, #44	; 0x2c
 8005524:	fb01 f303 	mul.w	r3, r1, r3
 8005528:	4413      	add	r3, r2
 800552a:	333f      	adds	r3, #63	; 0x3f
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d009      	beq.n	8005546 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	212c      	movs	r1, #44	; 0x2c
 8005538:	fb01 f303 	mul.w	r3, r1, r3
 800553c:	4413      	add	r3, r2
 800553e:	333f      	adds	r3, #63	; 0x3f
 8005540:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005542:	2b02      	cmp	r3, #2
 8005544:	d11d      	bne.n	8005582 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	212c      	movs	r1, #44	; 0x2c
 800554c:	fb01 f303 	mul.w	r3, r1, r3
 8005550:	4413      	add	r3, r2
 8005552:	335c      	adds	r3, #92	; 0x5c
 8005554:	2200      	movs	r2, #0
 8005556:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d110      	bne.n	8005582 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	212c      	movs	r1, #44	; 0x2c
 8005566:	fb01 f303 	mul.w	r3, r1, r3
 800556a:	4413      	add	r3, r2
 800556c:	3361      	adds	r3, #97	; 0x61
 800556e:	2203      	movs	r2, #3
 8005570:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	b2d2      	uxtb	r2, r2
 800557a:	4611      	mov	r1, r2
 800557c:	4618      	mov	r0, r3
 800557e:	f003 fadc 	bl	8008b3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	4413      	add	r3, r2
 800558a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800558e:	461a      	mov	r2, r3
 8005590:	2310      	movs	r3, #16
 8005592:	6093      	str	r3, [r2, #8]
}
 8005594:	bf00      	nop
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b088      	sub	sp, #32
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	460b      	mov	r3, r1
 80055a6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80055b2:	78fb      	ldrb	r3, [r7, #3]
 80055b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f003 0304 	and.w	r3, r3, #4
 80055c8:	2b04      	cmp	r3, #4
 80055ca:	d11a      	bne.n	8005602 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d8:	461a      	mov	r2, r3
 80055da:	2304      	movs	r3, #4
 80055dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	212c      	movs	r1, #44	; 0x2c
 80055e4:	fb01 f303 	mul.w	r3, r1, r3
 80055e8:	4413      	add	r3, r2
 80055ea:	3361      	adds	r3, #97	; 0x61
 80055ec:	2206      	movs	r2, #6
 80055ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	4611      	mov	r1, r2
 80055fa:	4618      	mov	r0, r3
 80055fc:	f003 fa9d 	bl	8008b3a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8005600:	e331      	b.n	8005c66 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	4413      	add	r3, r2
 800560a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f003 0320 	and.w	r3, r3, #32
 8005614:	2b20      	cmp	r3, #32
 8005616:	d12e      	bne.n	8005676 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	4413      	add	r3, r2
 8005620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005624:	461a      	mov	r2, r3
 8005626:	2320      	movs	r3, #32
 8005628:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	212c      	movs	r1, #44	; 0x2c
 8005630:	fb01 f303 	mul.w	r3, r1, r3
 8005634:	4413      	add	r3, r2
 8005636:	333d      	adds	r3, #61	; 0x3d
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	2b01      	cmp	r3, #1
 800563c:	f040 8313 	bne.w	8005c66 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	212c      	movs	r1, #44	; 0x2c
 8005646:	fb01 f303 	mul.w	r3, r1, r3
 800564a:	4413      	add	r3, r2
 800564c:	333d      	adds	r3, #61	; 0x3d
 800564e:	2200      	movs	r2, #0
 8005650:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	212c      	movs	r1, #44	; 0x2c
 8005658:	fb01 f303 	mul.w	r3, r1, r3
 800565c:	4413      	add	r3, r2
 800565e:	3360      	adds	r3, #96	; 0x60
 8005660:	2202      	movs	r2, #2
 8005662:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	4611      	mov	r1, r2
 800566e:	4618      	mov	r0, r3
 8005670:	f003 fa63 	bl	8008b3a <USB_HC_Halt>
}
 8005674:	e2f7      	b.n	8005c66 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	4413      	add	r3, r2
 800567e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800568c:	d112      	bne.n	80056b4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	4413      	add	r3, r2
 8005696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800569a:	461a      	mov	r2, r3
 800569c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056a0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	b2d2      	uxtb	r2, r2
 80056aa:	4611      	mov	r1, r2
 80056ac:	4618      	mov	r0, r3
 80056ae:	f003 fa44 	bl	8008b3a <USB_HC_Halt>
}
 80056b2:	e2d8      	b.n	8005c66 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d140      	bne.n	800574c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	212c      	movs	r1, #44	; 0x2c
 80056d0:	fb01 f303 	mul.w	r3, r1, r3
 80056d4:	4413      	add	r3, r2
 80056d6:	335c      	adds	r3, #92	; 0x5c
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ee:	2b40      	cmp	r3, #64	; 0x40
 80056f0:	d111      	bne.n	8005716 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	212c      	movs	r1, #44	; 0x2c
 80056f8:	fb01 f303 	mul.w	r3, r1, r3
 80056fc:	4413      	add	r3, r2
 80056fe:	333d      	adds	r3, #61	; 0x3d
 8005700:	2201      	movs	r2, #1
 8005702:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	4413      	add	r3, r2
 800570c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005710:	461a      	mov	r2, r3
 8005712:	2340      	movs	r3, #64	; 0x40
 8005714:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	4413      	add	r3, r2
 800571e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005722:	461a      	mov	r2, r3
 8005724:	2301      	movs	r3, #1
 8005726:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	212c      	movs	r1, #44	; 0x2c
 800572e:	fb01 f303 	mul.w	r3, r1, r3
 8005732:	4413      	add	r3, r2
 8005734:	3361      	adds	r3, #97	; 0x61
 8005736:	2201      	movs	r2, #1
 8005738:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	b2d2      	uxtb	r2, r2
 8005742:	4611      	mov	r1, r2
 8005744:	4618      	mov	r0, r3
 8005746:	f003 f9f8 	bl	8008b3a <USB_HC_Halt>
}
 800574a:	e28c      	b.n	8005c66 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	4413      	add	r3, r2
 8005754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575e:	2b40      	cmp	r3, #64	; 0x40
 8005760:	d12c      	bne.n	80057bc <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	212c      	movs	r1, #44	; 0x2c
 8005768:	fb01 f303 	mul.w	r3, r1, r3
 800576c:	4413      	add	r3, r2
 800576e:	3361      	adds	r3, #97	; 0x61
 8005770:	2204      	movs	r2, #4
 8005772:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	212c      	movs	r1, #44	; 0x2c
 800577a:	fb01 f303 	mul.w	r3, r1, r3
 800577e:	4413      	add	r3, r2
 8005780:	333d      	adds	r3, #61	; 0x3d
 8005782:	2201      	movs	r2, #1
 8005784:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	212c      	movs	r1, #44	; 0x2c
 800578c:	fb01 f303 	mul.w	r3, r1, r3
 8005790:	4413      	add	r3, r2
 8005792:	335c      	adds	r3, #92	; 0x5c
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	b2d2      	uxtb	r2, r2
 80057a0:	4611      	mov	r1, r2
 80057a2:	4618      	mov	r0, r3
 80057a4:	f003 f9c9 	bl	8008b3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b4:	461a      	mov	r2, r3
 80057b6:	2340      	movs	r3, #64	; 0x40
 80057b8:	6093      	str	r3, [r2, #8]
}
 80057ba:	e254      	b.n	8005c66 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f003 0308 	and.w	r3, r3, #8
 80057ce:	2b08      	cmp	r3, #8
 80057d0:	d11a      	bne.n	8005808 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057de:	461a      	mov	r2, r3
 80057e0:	2308      	movs	r3, #8
 80057e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	212c      	movs	r1, #44	; 0x2c
 80057ea:	fb01 f303 	mul.w	r3, r1, r3
 80057ee:	4413      	add	r3, r2
 80057f0:	3361      	adds	r3, #97	; 0x61
 80057f2:	2205      	movs	r2, #5
 80057f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	b2d2      	uxtb	r2, r2
 80057fe:	4611      	mov	r1, r2
 8005800:	4618      	mov	r0, r3
 8005802:	f003 f99a 	bl	8008b3a <USB_HC_Halt>
}
 8005806:	e22e      	b.n	8005c66 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	4413      	add	r3, r2
 8005810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 0310 	and.w	r3, r3, #16
 800581a:	2b10      	cmp	r3, #16
 800581c:	d140      	bne.n	80058a0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	212c      	movs	r1, #44	; 0x2c
 8005824:	fb01 f303 	mul.w	r3, r1, r3
 8005828:	4413      	add	r3, r2
 800582a:	335c      	adds	r3, #92	; 0x5c
 800582c:	2200      	movs	r2, #0
 800582e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	212c      	movs	r1, #44	; 0x2c
 8005836:	fb01 f303 	mul.w	r3, r1, r3
 800583a:	4413      	add	r3, r2
 800583c:	3361      	adds	r3, #97	; 0x61
 800583e:	2203      	movs	r2, #3
 8005840:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	212c      	movs	r1, #44	; 0x2c
 8005848:	fb01 f303 	mul.w	r3, r1, r3
 800584c:	4413      	add	r3, r2
 800584e:	333d      	adds	r3, #61	; 0x3d
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d112      	bne.n	800587c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	212c      	movs	r1, #44	; 0x2c
 800585c:	fb01 f303 	mul.w	r3, r1, r3
 8005860:	4413      	add	r3, r2
 8005862:	333c      	adds	r3, #60	; 0x3c
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d108      	bne.n	800587c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	212c      	movs	r1, #44	; 0x2c
 8005870:	fb01 f303 	mul.w	r3, r1, r3
 8005874:	4413      	add	r3, r2
 8005876:	333d      	adds	r3, #61	; 0x3d
 8005878:	2201      	movs	r2, #1
 800587a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	4611      	mov	r1, r2
 8005886:	4618      	mov	r0, r3
 8005888:	f003 f957 	bl	8008b3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	4413      	add	r3, r2
 8005894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005898:	461a      	mov	r2, r3
 800589a:	2310      	movs	r3, #16
 800589c:	6093      	str	r3, [r2, #8]
}
 800589e:	e1e2      	b.n	8005c66 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b2:	2b80      	cmp	r3, #128	; 0x80
 80058b4:	d164      	bne.n	8005980 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d111      	bne.n	80058e2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	212c      	movs	r1, #44	; 0x2c
 80058c4:	fb01 f303 	mul.w	r3, r1, r3
 80058c8:	4413      	add	r3, r2
 80058ca:	3361      	adds	r3, #97	; 0x61
 80058cc:	2206      	movs	r2, #6
 80058ce:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	b2d2      	uxtb	r2, r2
 80058d8:	4611      	mov	r1, r2
 80058da:	4618      	mov	r0, r3
 80058dc:	f003 f92d 	bl	8008b3a <USB_HC_Halt>
 80058e0:	e044      	b.n	800596c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	212c      	movs	r1, #44	; 0x2c
 80058e8:	fb01 f303 	mul.w	r3, r1, r3
 80058ec:	4413      	add	r3, r2
 80058ee:	335c      	adds	r3, #92	; 0x5c
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	6879      	ldr	r1, [r7, #4]
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	202c      	movs	r0, #44	; 0x2c
 80058fa:	fb00 f303 	mul.w	r3, r0, r3
 80058fe:	440b      	add	r3, r1
 8005900:	335c      	adds	r3, #92	; 0x5c
 8005902:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	212c      	movs	r1, #44	; 0x2c
 800590a:	fb01 f303 	mul.w	r3, r1, r3
 800590e:	4413      	add	r3, r2
 8005910:	335c      	adds	r3, #92	; 0x5c
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b02      	cmp	r3, #2
 8005916:	d920      	bls.n	800595a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	212c      	movs	r1, #44	; 0x2c
 800591e:	fb01 f303 	mul.w	r3, r1, r3
 8005922:	4413      	add	r3, r2
 8005924:	335c      	adds	r3, #92	; 0x5c
 8005926:	2200      	movs	r2, #0
 8005928:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	212c      	movs	r1, #44	; 0x2c
 8005930:	fb01 f303 	mul.w	r3, r1, r3
 8005934:	4413      	add	r3, r2
 8005936:	3360      	adds	r3, #96	; 0x60
 8005938:	2204      	movs	r2, #4
 800593a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	b2d9      	uxtb	r1, r3
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	202c      	movs	r0, #44	; 0x2c
 8005946:	fb00 f303 	mul.w	r3, r0, r3
 800594a:	4413      	add	r3, r2
 800594c:	3360      	adds	r3, #96	; 0x60
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	461a      	mov	r2, r3
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f005 fb94 	bl	800b080 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005958:	e008      	b.n	800596c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	212c      	movs	r1, #44	; 0x2c
 8005960:	fb01 f303 	mul.w	r3, r1, r3
 8005964:	4413      	add	r3, r2
 8005966:	3360      	adds	r3, #96	; 0x60
 8005968:	2202      	movs	r2, #2
 800596a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	4413      	add	r3, r2
 8005974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005978:	461a      	mov	r2, r3
 800597a:	2380      	movs	r3, #128	; 0x80
 800597c:	6093      	str	r3, [r2, #8]
}
 800597e:	e172      	b.n	8005c66 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	4413      	add	r3, r2
 8005988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005996:	d11b      	bne.n	80059d0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	212c      	movs	r1, #44	; 0x2c
 800599e:	fb01 f303 	mul.w	r3, r1, r3
 80059a2:	4413      	add	r3, r2
 80059a4:	3361      	adds	r3, #97	; 0x61
 80059a6:	2208      	movs	r2, #8
 80059a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	4611      	mov	r1, r2
 80059b4:	4618      	mov	r0, r3
 80059b6:	f003 f8c0 	bl	8008b3a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c6:	461a      	mov	r2, r3
 80059c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059cc:	6093      	str	r3, [r2, #8]
}
 80059ce:	e14a      	b.n	8005c66 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	f040 813f 	bne.w	8005c66 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	212c      	movs	r1, #44	; 0x2c
 80059ee:	fb01 f303 	mul.w	r3, r1, r3
 80059f2:	4413      	add	r3, r2
 80059f4:	3361      	adds	r3, #97	; 0x61
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d17d      	bne.n	8005af8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	212c      	movs	r1, #44	; 0x2c
 8005a02:	fb01 f303 	mul.w	r3, r1, r3
 8005a06:	4413      	add	r3, r2
 8005a08:	3360      	adds	r3, #96	; 0x60
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	212c      	movs	r1, #44	; 0x2c
 8005a14:	fb01 f303 	mul.w	r3, r1, r3
 8005a18:	4413      	add	r3, r2
 8005a1a:	333f      	adds	r3, #63	; 0x3f
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d00a      	beq.n	8005a38 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	212c      	movs	r1, #44	; 0x2c
 8005a28:	fb01 f303 	mul.w	r3, r1, r3
 8005a2c:	4413      	add	r3, r2
 8005a2e:	333f      	adds	r3, #63	; 0x3f
 8005a30:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005a32:	2b03      	cmp	r3, #3
 8005a34:	f040 8100 	bne.w	8005c38 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d113      	bne.n	8005a68 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	212c      	movs	r1, #44	; 0x2c
 8005a46:	fb01 f303 	mul.w	r3, r1, r3
 8005a4a:	4413      	add	r3, r2
 8005a4c:	3355      	adds	r3, #85	; 0x55
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	f083 0301 	eor.w	r3, r3, #1
 8005a54:	b2d8      	uxtb	r0, r3
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	212c      	movs	r1, #44	; 0x2c
 8005a5c:	fb01 f303 	mul.w	r3, r1, r3
 8005a60:	4413      	add	r3, r2
 8005a62:	3355      	adds	r3, #85	; 0x55
 8005a64:	4602      	mov	r2, r0
 8005a66:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	f040 80e3 	bne.w	8005c38 <HCD_HC_OUT_IRQHandler+0x69c>
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	212c      	movs	r1, #44	; 0x2c
 8005a78:	fb01 f303 	mul.w	r3, r1, r3
 8005a7c:	4413      	add	r3, r2
 8005a7e:	334c      	adds	r3, #76	; 0x4c
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 80d8 	beq.w	8005c38 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	212c      	movs	r1, #44	; 0x2c
 8005a8e:	fb01 f303 	mul.w	r3, r1, r3
 8005a92:	4413      	add	r3, r2
 8005a94:	334c      	adds	r3, #76	; 0x4c
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6879      	ldr	r1, [r7, #4]
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	202c      	movs	r0, #44	; 0x2c
 8005a9e:	fb00 f202 	mul.w	r2, r0, r2
 8005aa2:	440a      	add	r2, r1
 8005aa4:	3240      	adds	r2, #64	; 0x40
 8005aa6:	8812      	ldrh	r2, [r2, #0]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	6879      	ldr	r1, [r7, #4]
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	202c      	movs	r0, #44	; 0x2c
 8005ab2:	fb00 f202 	mul.w	r2, r0, r2
 8005ab6:	440a      	add	r2, r1
 8005ab8:	3240      	adds	r2, #64	; 0x40
 8005aba:	8812      	ldrh	r2, [r2, #0]
 8005abc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 80b5 	beq.w	8005c38 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	212c      	movs	r1, #44	; 0x2c
 8005ad4:	fb01 f303 	mul.w	r3, r1, r3
 8005ad8:	4413      	add	r3, r2
 8005ada:	3355      	adds	r3, #85	; 0x55
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	f083 0301 	eor.w	r3, r3, #1
 8005ae2:	b2d8      	uxtb	r0, r3
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	212c      	movs	r1, #44	; 0x2c
 8005aea:	fb01 f303 	mul.w	r3, r1, r3
 8005aee:	4413      	add	r3, r2
 8005af0:	3355      	adds	r3, #85	; 0x55
 8005af2:	4602      	mov	r2, r0
 8005af4:	701a      	strb	r2, [r3, #0]
 8005af6:	e09f      	b.n	8005c38 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	212c      	movs	r1, #44	; 0x2c
 8005afe:	fb01 f303 	mul.w	r3, r1, r3
 8005b02:	4413      	add	r3, r2
 8005b04:	3361      	adds	r3, #97	; 0x61
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	2b03      	cmp	r3, #3
 8005b0a:	d109      	bne.n	8005b20 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	212c      	movs	r1, #44	; 0x2c
 8005b12:	fb01 f303 	mul.w	r3, r1, r3
 8005b16:	4413      	add	r3, r2
 8005b18:	3360      	adds	r3, #96	; 0x60
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	701a      	strb	r2, [r3, #0]
 8005b1e:	e08b      	b.n	8005c38 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	212c      	movs	r1, #44	; 0x2c
 8005b26:	fb01 f303 	mul.w	r3, r1, r3
 8005b2a:	4413      	add	r3, r2
 8005b2c:	3361      	adds	r3, #97	; 0x61
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	2b04      	cmp	r3, #4
 8005b32:	d109      	bne.n	8005b48 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	212c      	movs	r1, #44	; 0x2c
 8005b3a:	fb01 f303 	mul.w	r3, r1, r3
 8005b3e:	4413      	add	r3, r2
 8005b40:	3360      	adds	r3, #96	; 0x60
 8005b42:	2202      	movs	r2, #2
 8005b44:	701a      	strb	r2, [r3, #0]
 8005b46:	e077      	b.n	8005c38 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	212c      	movs	r1, #44	; 0x2c
 8005b4e:	fb01 f303 	mul.w	r3, r1, r3
 8005b52:	4413      	add	r3, r2
 8005b54:	3361      	adds	r3, #97	; 0x61
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b05      	cmp	r3, #5
 8005b5a:	d109      	bne.n	8005b70 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	212c      	movs	r1, #44	; 0x2c
 8005b62:	fb01 f303 	mul.w	r3, r1, r3
 8005b66:	4413      	add	r3, r2
 8005b68:	3360      	adds	r3, #96	; 0x60
 8005b6a:	2205      	movs	r2, #5
 8005b6c:	701a      	strb	r2, [r3, #0]
 8005b6e:	e063      	b.n	8005c38 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	212c      	movs	r1, #44	; 0x2c
 8005b76:	fb01 f303 	mul.w	r3, r1, r3
 8005b7a:	4413      	add	r3, r2
 8005b7c:	3361      	adds	r3, #97	; 0x61
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	2b06      	cmp	r3, #6
 8005b82:	d009      	beq.n	8005b98 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	212c      	movs	r1, #44	; 0x2c
 8005b8a:	fb01 f303 	mul.w	r3, r1, r3
 8005b8e:	4413      	add	r3, r2
 8005b90:	3361      	adds	r3, #97	; 0x61
 8005b92:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d14f      	bne.n	8005c38 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	212c      	movs	r1, #44	; 0x2c
 8005b9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ba2:	4413      	add	r3, r2
 8005ba4:	335c      	adds	r3, #92	; 0x5c
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	1c5a      	adds	r2, r3, #1
 8005baa:	6879      	ldr	r1, [r7, #4]
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	202c      	movs	r0, #44	; 0x2c
 8005bb0:	fb00 f303 	mul.w	r3, r0, r3
 8005bb4:	440b      	add	r3, r1
 8005bb6:	335c      	adds	r3, #92	; 0x5c
 8005bb8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	212c      	movs	r1, #44	; 0x2c
 8005bc0:	fb01 f303 	mul.w	r3, r1, r3
 8005bc4:	4413      	add	r3, r2
 8005bc6:	335c      	adds	r3, #92	; 0x5c
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d912      	bls.n	8005bf4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	212c      	movs	r1, #44	; 0x2c
 8005bd4:	fb01 f303 	mul.w	r3, r1, r3
 8005bd8:	4413      	add	r3, r2
 8005bda:	335c      	adds	r3, #92	; 0x5c
 8005bdc:	2200      	movs	r2, #0
 8005bde:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	212c      	movs	r1, #44	; 0x2c
 8005be6:	fb01 f303 	mul.w	r3, r1, r3
 8005bea:	4413      	add	r3, r2
 8005bec:	3360      	adds	r3, #96	; 0x60
 8005bee:	2204      	movs	r2, #4
 8005bf0:	701a      	strb	r2, [r3, #0]
 8005bf2:	e021      	b.n	8005c38 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	212c      	movs	r1, #44	; 0x2c
 8005bfa:	fb01 f303 	mul.w	r3, r1, r3
 8005bfe:	4413      	add	r3, r2
 8005c00:	3360      	adds	r3, #96	; 0x60
 8005c02:	2202      	movs	r2, #2
 8005c04:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c1c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c24:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c32:	461a      	mov	r2, r3
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c44:	461a      	mov	r2, r3
 8005c46:	2302      	movs	r3, #2
 8005c48:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	b2d9      	uxtb	r1, r3
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	202c      	movs	r0, #44	; 0x2c
 8005c54:	fb00 f303 	mul.w	r3, r0, r3
 8005c58:	4413      	add	r3, r2
 8005c5a:	3360      	adds	r3, #96	; 0x60
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f005 fa0d 	bl	800b080 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005c66:	bf00      	nop
 8005c68:	3720      	adds	r7, #32
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b08a      	sub	sp, #40	; 0x28
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	f003 030f 	and.w	r3, r3, #15
 8005c8e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	0c5b      	lsrs	r3, r3, #17
 8005c94:	f003 030f 	and.w	r3, r3, #15
 8005c98:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	091b      	lsrs	r3, r3, #4
 8005c9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ca2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d004      	beq.n	8005cb4 <HCD_RXQLVL_IRQHandler+0x46>
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	2b05      	cmp	r3, #5
 8005cae:	f000 80a9 	beq.w	8005e04 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005cb2:	e0aa      	b.n	8005e0a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f000 80a6 	beq.w	8005e08 <HCD_RXQLVL_IRQHandler+0x19a>
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	212c      	movs	r1, #44	; 0x2c
 8005cc2:	fb01 f303 	mul.w	r3, r1, r3
 8005cc6:	4413      	add	r3, r2
 8005cc8:	3344      	adds	r3, #68	; 0x44
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 809b 	beq.w	8005e08 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	212c      	movs	r1, #44	; 0x2c
 8005cd8:	fb01 f303 	mul.w	r3, r1, r3
 8005cdc:	4413      	add	r3, r2
 8005cde:	3350      	adds	r3, #80	; 0x50
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	441a      	add	r2, r3
 8005ce6:	6879      	ldr	r1, [r7, #4]
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	202c      	movs	r0, #44	; 0x2c
 8005cec:	fb00 f303 	mul.w	r3, r0, r3
 8005cf0:	440b      	add	r3, r1
 8005cf2:	334c      	adds	r3, #76	; 0x4c
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d87a      	bhi.n	8005df0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6818      	ldr	r0, [r3, #0]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	212c      	movs	r1, #44	; 0x2c
 8005d04:	fb01 f303 	mul.w	r3, r1, r3
 8005d08:	4413      	add	r3, r2
 8005d0a:	3344      	adds	r3, #68	; 0x44
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	b292      	uxth	r2, r2
 8005d12:	4619      	mov	r1, r3
 8005d14:	f002 fa68 	bl	80081e8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	212c      	movs	r1, #44	; 0x2c
 8005d1e:	fb01 f303 	mul.w	r3, r1, r3
 8005d22:	4413      	add	r3, r2
 8005d24:	3344      	adds	r3, #68	; 0x44
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	441a      	add	r2, r3
 8005d2c:	6879      	ldr	r1, [r7, #4]
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	202c      	movs	r0, #44	; 0x2c
 8005d32:	fb00 f303 	mul.w	r3, r0, r3
 8005d36:	440b      	add	r3, r1
 8005d38:	3344      	adds	r3, #68	; 0x44
 8005d3a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	212c      	movs	r1, #44	; 0x2c
 8005d42:	fb01 f303 	mul.w	r3, r1, r3
 8005d46:	4413      	add	r3, r2
 8005d48:	3350      	adds	r3, #80	; 0x50
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	441a      	add	r2, r3
 8005d50:	6879      	ldr	r1, [r7, #4]
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	202c      	movs	r0, #44	; 0x2c
 8005d56:	fb00 f303 	mul.w	r3, r0, r3
 8005d5a:	440b      	add	r3, r1
 8005d5c:	3350      	adds	r3, #80	; 0x50
 8005d5e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	015a      	lsls	r2, r3, #5
 8005d64:	6a3b      	ldr	r3, [r7, #32]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	0cdb      	lsrs	r3, r3, #19
 8005d70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d74:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	212c      	movs	r1, #44	; 0x2c
 8005d7c:	fb01 f303 	mul.w	r3, r1, r3
 8005d80:	4413      	add	r3, r2
 8005d82:	3340      	adds	r3, #64	; 0x40
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	461a      	mov	r2, r3
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d13c      	bne.n	8005e08 <HCD_RXQLVL_IRQHandler+0x19a>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d039      	beq.n	8005e08 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005daa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005db2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	212c      	movs	r1, #44	; 0x2c
 8005dcc:	fb01 f303 	mul.w	r3, r1, r3
 8005dd0:	4413      	add	r3, r2
 8005dd2:	3354      	adds	r3, #84	; 0x54
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	f083 0301 	eor.w	r3, r3, #1
 8005dda:	b2d8      	uxtb	r0, r3
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	212c      	movs	r1, #44	; 0x2c
 8005de2:	fb01 f303 	mul.w	r3, r1, r3
 8005de6:	4413      	add	r3, r2
 8005de8:	3354      	adds	r3, #84	; 0x54
 8005dea:	4602      	mov	r2, r0
 8005dec:	701a      	strb	r2, [r3, #0]
      break;
 8005dee:	e00b      	b.n	8005e08 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	212c      	movs	r1, #44	; 0x2c
 8005df6:	fb01 f303 	mul.w	r3, r1, r3
 8005dfa:	4413      	add	r3, r2
 8005dfc:	3360      	adds	r3, #96	; 0x60
 8005dfe:	2204      	movs	r2, #4
 8005e00:	701a      	strb	r2, [r3, #0]
      break;
 8005e02:	e001      	b.n	8005e08 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005e04:	bf00      	nop
 8005e06:	e000      	b.n	8005e0a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005e08:	bf00      	nop
  }
}
 8005e0a:	bf00      	nop
 8005e0c:	3728      	adds	r7, #40	; 0x28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b086      	sub	sp, #24
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e3e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f003 0302 	and.w	r3, r3, #2
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d10b      	bne.n	8005e62 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d102      	bne.n	8005e5a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f005 f8f7 	bl	800b048 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f043 0302 	orr.w	r3, r3, #2
 8005e60:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f003 0308 	and.w	r3, r3, #8
 8005e68:	2b08      	cmp	r3, #8
 8005e6a:	d132      	bne.n	8005ed2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	f043 0308 	orr.w	r3, r3, #8
 8005e72:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f003 0304 	and.w	r3, r3, #4
 8005e7a:	2b04      	cmp	r3, #4
 8005e7c:	d126      	bne.n	8005ecc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d113      	bne.n	8005eae <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005e8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e90:	d106      	bne.n	8005ea0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2102      	movs	r1, #2
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f002 fb13 	bl	80084c4 <USB_InitFSLSPClkSel>
 8005e9e:	e011      	b.n	8005ec4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f002 fb0c 	bl	80084c4 <USB_InitFSLSPClkSel>
 8005eac:	e00a      	b.n	8005ec4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d106      	bne.n	8005ec4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005ec2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f005 f8e9 	bl	800b09c <HAL_HCD_PortEnabled_Callback>
 8005eca:	e002      	b.n	8005ed2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f005 f8f3 	bl	800b0b8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f003 0320 	and.w	r3, r3, #32
 8005ed8:	2b20      	cmp	r3, #32
 8005eda:	d103      	bne.n	8005ee4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	f043 0320 	orr.w	r3, r3, #32
 8005ee2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005eea:	461a      	mov	r2, r3
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	6013      	str	r3, [r2, #0]
}
 8005ef0:	bf00      	nop
 8005ef2:	3718      	adds	r7, #24
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e12b      	b.n	8006162 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d106      	bne.n	8005f24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7fa fc68 	bl	80007f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2224      	movs	r2, #36	; 0x24
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 0201 	bic.w	r2, r2, #1
 8005f3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005f5c:	f001 fa20 	bl	80073a0 <HAL_RCC_GetPCLK1Freq>
 8005f60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	4a81      	ldr	r2, [pc, #516]	; (800616c <HAL_I2C_Init+0x274>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d807      	bhi.n	8005f7c <HAL_I2C_Init+0x84>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4a80      	ldr	r2, [pc, #512]	; (8006170 <HAL_I2C_Init+0x278>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	bf94      	ite	ls
 8005f74:	2301      	movls	r3, #1
 8005f76:	2300      	movhi	r3, #0
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	e006      	b.n	8005f8a <HAL_I2C_Init+0x92>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4a7d      	ldr	r2, [pc, #500]	; (8006174 <HAL_I2C_Init+0x27c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	bf94      	ite	ls
 8005f84:	2301      	movls	r3, #1
 8005f86:	2300      	movhi	r3, #0
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e0e7      	b.n	8006162 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	4a78      	ldr	r2, [pc, #480]	; (8006178 <HAL_I2C_Init+0x280>)
 8005f96:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9a:	0c9b      	lsrs	r3, r3, #18
 8005f9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6a1b      	ldr	r3, [r3, #32]
 8005fb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	4a6a      	ldr	r2, [pc, #424]	; (800616c <HAL_I2C_Init+0x274>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d802      	bhi.n	8005fcc <HAL_I2C_Init+0xd4>
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	e009      	b.n	8005fe0 <HAL_I2C_Init+0xe8>
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005fd2:	fb02 f303 	mul.w	r3, r2, r3
 8005fd6:	4a69      	ldr	r2, [pc, #420]	; (800617c <HAL_I2C_Init+0x284>)
 8005fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fdc:	099b      	lsrs	r3, r3, #6
 8005fde:	3301      	adds	r3, #1
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	6812      	ldr	r2, [r2, #0]
 8005fe4:	430b      	orrs	r3, r1
 8005fe6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005ff2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	495c      	ldr	r1, [pc, #368]	; (800616c <HAL_I2C_Init+0x274>)
 8005ffc:	428b      	cmp	r3, r1
 8005ffe:	d819      	bhi.n	8006034 <HAL_I2C_Init+0x13c>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	1e59      	subs	r1, r3, #1
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	005b      	lsls	r3, r3, #1
 800600a:	fbb1 f3f3 	udiv	r3, r1, r3
 800600e:	1c59      	adds	r1, r3, #1
 8006010:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006014:	400b      	ands	r3, r1
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00a      	beq.n	8006030 <HAL_I2C_Init+0x138>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	1e59      	subs	r1, r3, #1
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	005b      	lsls	r3, r3, #1
 8006024:	fbb1 f3f3 	udiv	r3, r1, r3
 8006028:	3301      	adds	r3, #1
 800602a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800602e:	e051      	b.n	80060d4 <HAL_I2C_Init+0x1dc>
 8006030:	2304      	movs	r3, #4
 8006032:	e04f      	b.n	80060d4 <HAL_I2C_Init+0x1dc>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d111      	bne.n	8006060 <HAL_I2C_Init+0x168>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	1e58      	subs	r0, r3, #1
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6859      	ldr	r1, [r3, #4]
 8006044:	460b      	mov	r3, r1
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	440b      	add	r3, r1
 800604a:	fbb0 f3f3 	udiv	r3, r0, r3
 800604e:	3301      	adds	r3, #1
 8006050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006054:	2b00      	cmp	r3, #0
 8006056:	bf0c      	ite	eq
 8006058:	2301      	moveq	r3, #1
 800605a:	2300      	movne	r3, #0
 800605c:	b2db      	uxtb	r3, r3
 800605e:	e012      	b.n	8006086 <HAL_I2C_Init+0x18e>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	1e58      	subs	r0, r3, #1
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6859      	ldr	r1, [r3, #4]
 8006068:	460b      	mov	r3, r1
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	440b      	add	r3, r1
 800606e:	0099      	lsls	r1, r3, #2
 8006070:	440b      	add	r3, r1
 8006072:	fbb0 f3f3 	udiv	r3, r0, r3
 8006076:	3301      	adds	r3, #1
 8006078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800607c:	2b00      	cmp	r3, #0
 800607e:	bf0c      	ite	eq
 8006080:	2301      	moveq	r3, #1
 8006082:	2300      	movne	r3, #0
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <HAL_I2C_Init+0x196>
 800608a:	2301      	movs	r3, #1
 800608c:	e022      	b.n	80060d4 <HAL_I2C_Init+0x1dc>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10e      	bne.n	80060b4 <HAL_I2C_Init+0x1bc>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	1e58      	subs	r0, r3, #1
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6859      	ldr	r1, [r3, #4]
 800609e:	460b      	mov	r3, r1
 80060a0:	005b      	lsls	r3, r3, #1
 80060a2:	440b      	add	r3, r1
 80060a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80060a8:	3301      	adds	r3, #1
 80060aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060b2:	e00f      	b.n	80060d4 <HAL_I2C_Init+0x1dc>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	1e58      	subs	r0, r3, #1
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6859      	ldr	r1, [r3, #4]
 80060bc:	460b      	mov	r3, r1
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	440b      	add	r3, r1
 80060c2:	0099      	lsls	r1, r3, #2
 80060c4:	440b      	add	r3, r1
 80060c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80060ca:	3301      	adds	r3, #1
 80060cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060d4:	6879      	ldr	r1, [r7, #4]
 80060d6:	6809      	ldr	r1, [r1, #0]
 80060d8:	4313      	orrs	r3, r2
 80060da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	69da      	ldr	r2, [r3, #28]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	431a      	orrs	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006102:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	6911      	ldr	r1, [r2, #16]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	68d2      	ldr	r2, [r2, #12]
 800610e:	4311      	orrs	r1, r2
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	6812      	ldr	r2, [r2, #0]
 8006114:	430b      	orrs	r3, r1
 8006116:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	695a      	ldr	r2, [r3, #20]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	431a      	orrs	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0201 	orr.w	r2, r2, #1
 8006142:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2220      	movs	r2, #32
 800614e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	000186a0 	.word	0x000186a0
 8006170:	001e847f 	.word	0x001e847f
 8006174:	003d08ff 	.word	0x003d08ff
 8006178:	431bde83 	.word	0x431bde83
 800617c:	10624dd3 	.word	0x10624dd3

08006180 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b088      	sub	sp, #32
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e128      	b.n	80063e4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d109      	bne.n	80061b2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a90      	ldr	r2, [pc, #576]	; (80063ec <HAL_I2S_Init+0x26c>)
 80061aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f7fa fb91 	bl	80008d4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2202      	movs	r2, #2
 80061b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	69db      	ldr	r3, [r3, #28]
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	6812      	ldr	r2, [r2, #0]
 80061c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80061c8:	f023 030f 	bic.w	r3, r3, #15
 80061cc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2202      	movs	r2, #2
 80061d4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d060      	beq.n	80062a0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d102      	bne.n	80061ec <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80061e6:	2310      	movs	r3, #16
 80061e8:	617b      	str	r3, [r7, #20]
 80061ea:	e001      	b.n	80061f0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80061ec:	2320      	movs	r3, #32
 80061ee:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	2b20      	cmp	r3, #32
 80061f6:	d802      	bhi.n	80061fe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	005b      	lsls	r3, r3, #1
 80061fc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80061fe:	2001      	movs	r0, #1
 8006200:	f001 f9d8 	bl	80075b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8006204:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800620e:	d125      	bne.n	800625c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d010      	beq.n	800623a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006222:	4613      	mov	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	005b      	lsls	r3, r3, #1
 800622a:	461a      	mov	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	fbb2 f3f3 	udiv	r3, r2, r3
 8006234:	3305      	adds	r3, #5
 8006236:	613b      	str	r3, [r7, #16]
 8006238:	e01f      	b.n	800627a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	00db      	lsls	r3, r3, #3
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	fbb2 f2f3 	udiv	r2, r2, r3
 8006244:	4613      	mov	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	005b      	lsls	r3, r3, #1
 800624c:	461a      	mov	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	fbb2 f3f3 	udiv	r3, r2, r3
 8006256:	3305      	adds	r3, #5
 8006258:	613b      	str	r3, [r7, #16]
 800625a:	e00e      	b.n	800627a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	fbb2 f2f3 	udiv	r2, r2, r3
 8006264:	4613      	mov	r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4413      	add	r3, r2
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	461a      	mov	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	fbb2 f3f3 	udiv	r3, r2, r3
 8006276:	3305      	adds	r3, #5
 8006278:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	4a5c      	ldr	r2, [pc, #368]	; (80063f0 <HAL_I2S_Init+0x270>)
 800627e:	fba2 2303 	umull	r2, r3, r2, r3
 8006282:	08db      	lsrs	r3, r3, #3
 8006284:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	085b      	lsrs	r3, r3, #1
 8006296:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	021b      	lsls	r3, r3, #8
 800629c:	61bb      	str	r3, [r7, #24]
 800629e:	e003      	b.n	80062a8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80062a0:	2302      	movs	r3, #2
 80062a2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80062a4:	2300      	movs	r3, #0
 80062a6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d902      	bls.n	80062b4 <HAL_I2S_Init+0x134>
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	2bff      	cmp	r3, #255	; 0xff
 80062b2:	d907      	bls.n	80062c4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b8:	f043 0210 	orr.w	r2, r3, #16
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e08f      	b.n	80063e4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	691a      	ldr	r2, [r3, #16]
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	ea42 0103 	orr.w	r1, r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69fa      	ldr	r2, [r7, #28]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80062e2:	f023 030f 	bic.w	r3, r3, #15
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	6851      	ldr	r1, [r2, #4]
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	6892      	ldr	r2, [r2, #8]
 80062ee:	4311      	orrs	r1, r2
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	68d2      	ldr	r2, [r2, #12]
 80062f4:	4311      	orrs	r1, r2
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	6992      	ldr	r2, [r2, #24]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	431a      	orrs	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006306:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a1b      	ldr	r3, [r3, #32]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d161      	bne.n	80063d4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a38      	ldr	r2, [pc, #224]	; (80063f4 <HAL_I2S_Init+0x274>)
 8006314:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a37      	ldr	r2, [pc, #220]	; (80063f8 <HAL_I2S_Init+0x278>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d101      	bne.n	8006324 <HAL_I2S_Init+0x1a4>
 8006320:	4b36      	ldr	r3, [pc, #216]	; (80063fc <HAL_I2S_Init+0x27c>)
 8006322:	e001      	b.n	8006328 <HAL_I2S_Init+0x1a8>
 8006324:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	6812      	ldr	r2, [r2, #0]
 800632e:	4932      	ldr	r1, [pc, #200]	; (80063f8 <HAL_I2S_Init+0x278>)
 8006330:	428a      	cmp	r2, r1
 8006332:	d101      	bne.n	8006338 <HAL_I2S_Init+0x1b8>
 8006334:	4a31      	ldr	r2, [pc, #196]	; (80063fc <HAL_I2S_Init+0x27c>)
 8006336:	e001      	b.n	800633c <HAL_I2S_Init+0x1bc>
 8006338:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800633c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006340:	f023 030f 	bic.w	r3, r3, #15
 8006344:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a2b      	ldr	r2, [pc, #172]	; (80063f8 <HAL_I2S_Init+0x278>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d101      	bne.n	8006354 <HAL_I2S_Init+0x1d4>
 8006350:	4b2a      	ldr	r3, [pc, #168]	; (80063fc <HAL_I2S_Init+0x27c>)
 8006352:	e001      	b.n	8006358 <HAL_I2S_Init+0x1d8>
 8006354:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006358:	2202      	movs	r2, #2
 800635a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a25      	ldr	r2, [pc, #148]	; (80063f8 <HAL_I2S_Init+0x278>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d101      	bne.n	800636a <HAL_I2S_Init+0x1ea>
 8006366:	4b25      	ldr	r3, [pc, #148]	; (80063fc <HAL_I2S_Init+0x27c>)
 8006368:	e001      	b.n	800636e <HAL_I2S_Init+0x1ee>
 800636a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800637a:	d003      	beq.n	8006384 <HAL_I2S_Init+0x204>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d103      	bne.n	800638c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006384:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006388:	613b      	str	r3, [r7, #16]
 800638a:	e001      	b.n	8006390 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800638c:	2300      	movs	r3, #0
 800638e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800639a:	4313      	orrs	r3, r2
 800639c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80063a4:	4313      	orrs	r3, r2
 80063a6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80063ae:	4313      	orrs	r3, r2
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	897b      	ldrh	r3, [r7, #10]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80063bc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a0d      	ldr	r2, [pc, #52]	; (80063f8 <HAL_I2S_Init+0x278>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d101      	bne.n	80063cc <HAL_I2S_Init+0x24c>
 80063c8:	4b0c      	ldr	r3, [pc, #48]	; (80063fc <HAL_I2S_Init+0x27c>)
 80063ca:	e001      	b.n	80063d0 <HAL_I2S_Init+0x250>
 80063cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063d0:	897a      	ldrh	r2, [r7, #10]
 80063d2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3720      	adds	r7, #32
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	080064f7 	.word	0x080064f7
 80063f0:	cccccccd 	.word	0xcccccccd
 80063f4:	0800660d 	.word	0x0800660d
 80063f8:	40003800 	.word	0x40003800
 80063fc:	40003400 	.word	0x40003400

08006400 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006448:	881a      	ldrh	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006454:	1c9a      	adds	r2, r3, #2
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800645e:	b29b      	uxth	r3, r3
 8006460:	3b01      	subs	r3, #1
 8006462:	b29a      	uxth	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800646c:	b29b      	uxth	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10e      	bne.n	8006490 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	685a      	ldr	r2, [r3, #4]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006480:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7ff ffb8 	bl	8006400 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006490:	bf00      	nop
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68da      	ldr	r2, [r3, #12]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064aa:	b292      	uxth	r2, r2
 80064ac:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b2:	1c9a      	adds	r2, r3, #2
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80064bc:	b29b      	uxth	r3, r3
 80064be:	3b01      	subs	r3, #1
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10e      	bne.n	80064ee <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80064de:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f7ff ff93 	bl	8006414 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80064ee:	bf00      	nop
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b086      	sub	sp, #24
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b04      	cmp	r3, #4
 8006510:	d13a      	bne.n	8006588 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b01      	cmp	r3, #1
 800651a:	d109      	bne.n	8006530 <I2S_IRQHandler+0x3a>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006526:	2b40      	cmp	r3, #64	; 0x40
 8006528:	d102      	bne.n	8006530 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7ff ffb4 	bl	8006498 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006536:	2b40      	cmp	r3, #64	; 0x40
 8006538:	d126      	bne.n	8006588 <I2S_IRQHandler+0x92>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f003 0320 	and.w	r3, r3, #32
 8006544:	2b20      	cmp	r3, #32
 8006546:	d11f      	bne.n	8006588 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685a      	ldr	r2, [r3, #4]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006556:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006558:	2300      	movs	r3, #0
 800655a:	613b      	str	r3, [r7, #16]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	613b      	str	r3, [r7, #16]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	613b      	str	r3, [r7, #16]
 800656c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800657a:	f043 0202 	orr.w	r2, r3, #2
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7ff ff50 	bl	8006428 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800658e:	b2db      	uxtb	r3, r3
 8006590:	2b03      	cmp	r3, #3
 8006592:	d136      	bne.n	8006602 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b02      	cmp	r3, #2
 800659c:	d109      	bne.n	80065b2 <I2S_IRQHandler+0xbc>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a8:	2b80      	cmp	r3, #128	; 0x80
 80065aa:	d102      	bne.n	80065b2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7ff ff45 	bl	800643c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f003 0308 	and.w	r3, r3, #8
 80065b8:	2b08      	cmp	r3, #8
 80065ba:	d122      	bne.n	8006602 <I2S_IRQHandler+0x10c>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f003 0320 	and.w	r3, r3, #32
 80065c6:	2b20      	cmp	r3, #32
 80065c8:	d11b      	bne.n	8006602 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065d8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80065da:	2300      	movs	r3, #0
 80065dc:	60fb      	str	r3, [r7, #12]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f4:	f043 0204 	orr.w	r2, r3, #4
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f7ff ff13 	bl	8006428 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006602:	bf00      	nop
 8006604:	3718      	adds	r7, #24
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
	...

0800660c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b088      	sub	sp, #32
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a92      	ldr	r2, [pc, #584]	; (800686c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d101      	bne.n	800662a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006626:	4b92      	ldr	r3, [pc, #584]	; (8006870 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006628:	e001      	b.n	800662e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800662a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a8b      	ldr	r2, [pc, #556]	; (800686c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d101      	bne.n	8006648 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006644:	4b8a      	ldr	r3, [pc, #552]	; (8006870 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006646:	e001      	b.n	800664c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006648:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006658:	d004      	beq.n	8006664 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	f040 8099 	bne.w	8006796 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b02      	cmp	r3, #2
 800666c:	d107      	bne.n	800667e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006674:	2b00      	cmp	r3, #0
 8006676:	d002      	beq.n	800667e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f925 	bl	80068c8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b01      	cmp	r3, #1
 8006686:	d107      	bne.n	8006698 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668e:	2b00      	cmp	r3, #0
 8006690:	d002      	beq.n	8006698 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f9c8 	bl	8006a28 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669e:	2b40      	cmp	r3, #64	; 0x40
 80066a0:	d13a      	bne.n	8006718 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f003 0320 	and.w	r3, r3, #32
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d035      	beq.n	8006718 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a6e      	ldr	r2, [pc, #440]	; (800686c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d101      	bne.n	80066ba <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80066b6:	4b6e      	ldr	r3, [pc, #440]	; (8006870 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80066b8:	e001      	b.n	80066be <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80066ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066be:	685a      	ldr	r2, [r3, #4]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4969      	ldr	r1, [pc, #420]	; (800686c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80066c6:	428b      	cmp	r3, r1
 80066c8:	d101      	bne.n	80066ce <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80066ca:	4b69      	ldr	r3, [pc, #420]	; (8006870 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80066cc:	e001      	b.n	80066d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80066ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80066d6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066e6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80066e8:	2300      	movs	r3, #0
 80066ea:	60fb      	str	r3, [r7, #12]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	60fb      	str	r3, [r7, #12]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	60fb      	str	r3, [r7, #12]
 80066fc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800670a:	f043 0202 	orr.w	r2, r3, #2
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7ff fe88 	bl	8006428 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	f003 0308 	and.w	r3, r3, #8
 800671e:	2b08      	cmp	r3, #8
 8006720:	f040 80c3 	bne.w	80068aa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	f003 0320 	and.w	r3, r3, #32
 800672a:	2b00      	cmp	r3, #0
 800672c:	f000 80bd 	beq.w	80068aa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685a      	ldr	r2, [r3, #4]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800673e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a49      	ldr	r2, [pc, #292]	; (800686c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d101      	bne.n	800674e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800674a:	4b49      	ldr	r3, [pc, #292]	; (8006870 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800674c:	e001      	b.n	8006752 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800674e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4944      	ldr	r1, [pc, #272]	; (800686c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800675a:	428b      	cmp	r3, r1
 800675c:	d101      	bne.n	8006762 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800675e:	4b44      	ldr	r3, [pc, #272]	; (8006870 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006760:	e001      	b.n	8006766 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006762:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006766:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800676a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800676c:	2300      	movs	r3, #0
 800676e:	60bb      	str	r3, [r7, #8]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	60bb      	str	r3, [r7, #8]
 8006778:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006786:	f043 0204 	orr.w	r2, r3, #4
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7ff fe4a 	bl	8006428 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006794:	e089      	b.n	80068aa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	f003 0302 	and.w	r3, r3, #2
 800679c:	2b02      	cmp	r3, #2
 800679e:	d107      	bne.n	80067b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f8be 	bl	800692c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d107      	bne.n	80067ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d002      	beq.n	80067ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f8fd 	bl	80069c4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d0:	2b40      	cmp	r3, #64	; 0x40
 80067d2:	d12f      	bne.n	8006834 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	f003 0320 	and.w	r3, r3, #32
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d02a      	beq.n	8006834 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	685a      	ldr	r2, [r3, #4]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80067ec:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a1e      	ldr	r2, [pc, #120]	; (800686c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d101      	bne.n	80067fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80067f8:	4b1d      	ldr	r3, [pc, #116]	; (8006870 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80067fa:	e001      	b.n	8006800 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80067fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4919      	ldr	r1, [pc, #100]	; (800686c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006808:	428b      	cmp	r3, r1
 800680a:	d101      	bne.n	8006810 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800680c:	4b18      	ldr	r3, [pc, #96]	; (8006870 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800680e:	e001      	b.n	8006814 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006810:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006814:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006818:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006826:	f043 0202 	orr.w	r2, r3, #2
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7ff fdfa 	bl	8006428 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	f003 0308 	and.w	r3, r3, #8
 800683a:	2b08      	cmp	r3, #8
 800683c:	d136      	bne.n	80068ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	f003 0320 	and.w	r3, r3, #32
 8006844:	2b00      	cmp	r3, #0
 8006846:	d031      	beq.n	80068ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a07      	ldr	r2, [pc, #28]	; (800686c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d101      	bne.n	8006856 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006852:	4b07      	ldr	r3, [pc, #28]	; (8006870 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006854:	e001      	b.n	800685a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006856:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4902      	ldr	r1, [pc, #8]	; (800686c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006862:	428b      	cmp	r3, r1
 8006864:	d106      	bne.n	8006874 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006866:	4b02      	ldr	r3, [pc, #8]	; (8006870 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006868:	e006      	b.n	8006878 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800686a:	bf00      	nop
 800686c:	40003800 	.word	0x40003800
 8006870:	40003400 	.word	0x40003400
 8006874:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006878:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800687c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800688c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800689a:	f043 0204 	orr.w	r2, r3, #4
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7ff fdc0 	bl	8006428 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80068a8:	e000      	b.n	80068ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80068aa:	bf00      	nop
}
 80068ac:	bf00      	nop
 80068ae:	3720      	adds	r7, #32
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d4:	1c99      	adds	r1, r3, #2
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	6251      	str	r1, [r2, #36]	; 0x24
 80068da:	881a      	ldrh	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	3b01      	subs	r3, #1
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d113      	bne.n	8006922 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006908:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800690e:	b29b      	uxth	r3, r3
 8006910:	2b00      	cmp	r3, #0
 8006912:	d106      	bne.n	8006922 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f7ff ffc9 	bl	80068b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006922:	bf00      	nop
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
	...

0800692c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	1c99      	adds	r1, r3, #2
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	6251      	str	r1, [r2, #36]	; 0x24
 800693e:	8819      	ldrh	r1, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a1d      	ldr	r2, [pc, #116]	; (80069bc <I2SEx_TxISR_I2SExt+0x90>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d101      	bne.n	800694e <I2SEx_TxISR_I2SExt+0x22>
 800694a:	4b1d      	ldr	r3, [pc, #116]	; (80069c0 <I2SEx_TxISR_I2SExt+0x94>)
 800694c:	e001      	b.n	8006952 <I2SEx_TxISR_I2SExt+0x26>
 800694e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006952:	460a      	mov	r2, r1
 8006954:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800695a:	b29b      	uxth	r3, r3
 800695c:	3b01      	subs	r3, #1
 800695e:	b29a      	uxth	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d121      	bne.n	80069b2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a12      	ldr	r2, [pc, #72]	; (80069bc <I2SEx_TxISR_I2SExt+0x90>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d101      	bne.n	800697c <I2SEx_TxISR_I2SExt+0x50>
 8006978:	4b11      	ldr	r3, [pc, #68]	; (80069c0 <I2SEx_TxISR_I2SExt+0x94>)
 800697a:	e001      	b.n	8006980 <I2SEx_TxISR_I2SExt+0x54>
 800697c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	490d      	ldr	r1, [pc, #52]	; (80069bc <I2SEx_TxISR_I2SExt+0x90>)
 8006988:	428b      	cmp	r3, r1
 800698a:	d101      	bne.n	8006990 <I2SEx_TxISR_I2SExt+0x64>
 800698c:	4b0c      	ldr	r3, [pc, #48]	; (80069c0 <I2SEx_TxISR_I2SExt+0x94>)
 800698e:	e001      	b.n	8006994 <I2SEx_TxISR_I2SExt+0x68>
 8006990:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006994:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006998:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800699e:	b29b      	uxth	r3, r3
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d106      	bne.n	80069b2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7ff ff81 	bl	80068b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80069b2:	bf00      	nop
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	40003800 	.word	0x40003800
 80069c0:	40003400 	.word	0x40003400

080069c4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68d8      	ldr	r0, [r3, #12]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d6:	1c99      	adds	r1, r3, #2
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	62d1      	str	r1, [r2, #44]	; 0x2c
 80069dc:	b282      	uxth	r2, r0
 80069de:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	3b01      	subs	r3, #1
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d113      	bne.n	8006a20 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a06:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d106      	bne.n	8006a20 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7ff ff4a 	bl	80068b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a20:	bf00      	nop
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a20      	ldr	r2, [pc, #128]	; (8006ab8 <I2SEx_RxISR_I2SExt+0x90>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d101      	bne.n	8006a3e <I2SEx_RxISR_I2SExt+0x16>
 8006a3a:	4b20      	ldr	r3, [pc, #128]	; (8006abc <I2SEx_RxISR_I2SExt+0x94>)
 8006a3c:	e001      	b.n	8006a42 <I2SEx_RxISR_I2SExt+0x1a>
 8006a3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a42:	68d8      	ldr	r0, [r3, #12]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a48:	1c99      	adds	r1, r3, #2
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006a4e:	b282      	uxth	r2, r0
 8006a50:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d121      	bne.n	8006aae <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a12      	ldr	r2, [pc, #72]	; (8006ab8 <I2SEx_RxISR_I2SExt+0x90>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d101      	bne.n	8006a78 <I2SEx_RxISR_I2SExt+0x50>
 8006a74:	4b11      	ldr	r3, [pc, #68]	; (8006abc <I2SEx_RxISR_I2SExt+0x94>)
 8006a76:	e001      	b.n	8006a7c <I2SEx_RxISR_I2SExt+0x54>
 8006a78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	490d      	ldr	r1, [pc, #52]	; (8006ab8 <I2SEx_RxISR_I2SExt+0x90>)
 8006a84:	428b      	cmp	r3, r1
 8006a86:	d101      	bne.n	8006a8c <I2SEx_RxISR_I2SExt+0x64>
 8006a88:	4b0c      	ldr	r3, [pc, #48]	; (8006abc <I2SEx_RxISR_I2SExt+0x94>)
 8006a8a:	e001      	b.n	8006a90 <I2SEx_RxISR_I2SExt+0x68>
 8006a8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a90:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a94:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d106      	bne.n	8006aae <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f7ff ff03 	bl	80068b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006aae:	bf00      	nop
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	40003800 	.word	0x40003800
 8006abc:	40003400 	.word	0x40003400

08006ac0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d101      	bne.n	8006ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e267      	b.n	8006fa2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d075      	beq.n	8006bca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ade:	4b88      	ldr	r3, [pc, #544]	; (8006d00 <HAL_RCC_OscConfig+0x240>)
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f003 030c 	and.w	r3, r3, #12
 8006ae6:	2b04      	cmp	r3, #4
 8006ae8:	d00c      	beq.n	8006b04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006aea:	4b85      	ldr	r3, [pc, #532]	; (8006d00 <HAL_RCC_OscConfig+0x240>)
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006af2:	2b08      	cmp	r3, #8
 8006af4:	d112      	bne.n	8006b1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006af6:	4b82      	ldr	r3, [pc, #520]	; (8006d00 <HAL_RCC_OscConfig+0x240>)
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006afe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b02:	d10b      	bne.n	8006b1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b04:	4b7e      	ldr	r3, [pc, #504]	; (8006d00 <HAL_RCC_OscConfig+0x240>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d05b      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x108>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d157      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e242      	b.n	8006fa2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b24:	d106      	bne.n	8006b34 <HAL_RCC_OscConfig+0x74>
 8006b26:	4b76      	ldr	r3, [pc, #472]	; (8006d00 <HAL_RCC_OscConfig+0x240>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a75      	ldr	r2, [pc, #468]	; (8006d00 <HAL_RCC_OscConfig+0x240>)
 8006b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b30:	6013      	str	r3, [r2, #0]
 8006b32:	e01d      	b.n	8006b70 <HAL_RCC_OscConfig+0xb0>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b3c:	d10c      	bne.n	8006b58 <HAL_RCC_OscConfig+0x98>
 8006b3e:	4b70      	ldr	r3, [pc, #448]	; (8006d00 <HAL_RCC_OscConfig+0x240>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a6f      	ldr	r2, [pc, #444]	; (8006d00 <HAL_RCC_OscConfig+0x240>)
 8006b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b48:	6013      	str	r3, [r2, #0]
 8006b4a:	4b6d      	ldr	r3, [pc, #436]	; (8006d00 <HAL_RCC_OscConfig+0x240>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a6c      	ldr	r2, [pc, #432]	; (8006d00 <HAL_RCC_OscConfig+0x240>)
 8006b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b54:	6013      	str	r3, [r2, #0]
 8006b56:	e00b      	b.n	8006b70 <HAL_RCC_OscConfig+0xb0>
 8006b58:	4b69      	ldr	r3, [pc, #420]	; (8006d00 <HAL_RCC_OscConfig+0x240>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a68      	ldr	r2, [pc, #416]	; (8006d00 <HAL_RCC_OscConfig+0x240>)
 8006b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b62:	6013      	str	r3, [r2, #0]
 8006b64:	4b66      	ldr	r3, [pc, #408]	; (8006d00 <HAL_RCC_OscConfig+0x240>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a65      	ldr	r2, [pc, #404]	; (8006d00 <HAL_RCC_OscConfig+0x240>)
 8006b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d013      	beq.n	8006ba0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b78:	f7fd f9c0 	bl	8003efc <HAL_GetTick>
 8006b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b7e:	e008      	b.n	8006b92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b80:	f7fd f9bc 	bl	8003efc <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	2b64      	cmp	r3, #100	; 0x64
 8006b8c:	d901      	bls.n	8006b92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e207      	b.n	8006fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b92:	4b5b      	ldr	r3, [pc, #364]	; (8006d00 <HAL_RCC_OscConfig+0x240>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d0f0      	beq.n	8006b80 <HAL_RCC_OscConfig+0xc0>
 8006b9e:	e014      	b.n	8006bca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ba0:	f7fd f9ac 	bl	8003efc <HAL_GetTick>
 8006ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ba6:	e008      	b.n	8006bba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ba8:	f7fd f9a8 	bl	8003efc <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	2b64      	cmp	r3, #100	; 0x64
 8006bb4:	d901      	bls.n	8006bba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e1f3      	b.n	8006fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bba:	4b51      	ldr	r3, [pc, #324]	; (8006d00 <HAL_RCC_OscConfig+0x240>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1f0      	bne.n	8006ba8 <HAL_RCC_OscConfig+0xe8>
 8006bc6:	e000      	b.n	8006bca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0302 	and.w	r3, r3, #2
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d063      	beq.n	8006c9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bd6:	4b4a      	ldr	r3, [pc, #296]	; (8006d00 <HAL_RCC_OscConfig+0x240>)
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	f003 030c 	and.w	r3, r3, #12
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00b      	beq.n	8006bfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006be2:	4b47      	ldr	r3, [pc, #284]	; (8006d00 <HAL_RCC_OscConfig+0x240>)
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bea:	2b08      	cmp	r3, #8
 8006bec:	d11c      	bne.n	8006c28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bee:	4b44      	ldr	r3, [pc, #272]	; (8006d00 <HAL_RCC_OscConfig+0x240>)
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d116      	bne.n	8006c28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bfa:	4b41      	ldr	r3, [pc, #260]	; (8006d00 <HAL_RCC_OscConfig+0x240>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d005      	beq.n	8006c12 <HAL_RCC_OscConfig+0x152>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d001      	beq.n	8006c12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e1c7      	b.n	8006fa2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c12:	4b3b      	ldr	r3, [pc, #236]	; (8006d00 <HAL_RCC_OscConfig+0x240>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	00db      	lsls	r3, r3, #3
 8006c20:	4937      	ldr	r1, [pc, #220]	; (8006d00 <HAL_RCC_OscConfig+0x240>)
 8006c22:	4313      	orrs	r3, r2
 8006c24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c26:	e03a      	b.n	8006c9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d020      	beq.n	8006c72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c30:	4b34      	ldr	r3, [pc, #208]	; (8006d04 <HAL_RCC_OscConfig+0x244>)
 8006c32:	2201      	movs	r2, #1
 8006c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c36:	f7fd f961 	bl	8003efc <HAL_GetTick>
 8006c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c3c:	e008      	b.n	8006c50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c3e:	f7fd f95d 	bl	8003efc <HAL_GetTick>
 8006c42:	4602      	mov	r2, r0
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d901      	bls.n	8006c50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e1a8      	b.n	8006fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c50:	4b2b      	ldr	r3, [pc, #172]	; (8006d00 <HAL_RCC_OscConfig+0x240>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0302 	and.w	r3, r3, #2
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d0f0      	beq.n	8006c3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c5c:	4b28      	ldr	r3, [pc, #160]	; (8006d00 <HAL_RCC_OscConfig+0x240>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	00db      	lsls	r3, r3, #3
 8006c6a:	4925      	ldr	r1, [pc, #148]	; (8006d00 <HAL_RCC_OscConfig+0x240>)
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	600b      	str	r3, [r1, #0]
 8006c70:	e015      	b.n	8006c9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c72:	4b24      	ldr	r3, [pc, #144]	; (8006d04 <HAL_RCC_OscConfig+0x244>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c78:	f7fd f940 	bl	8003efc <HAL_GetTick>
 8006c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c7e:	e008      	b.n	8006c92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c80:	f7fd f93c 	bl	8003efc <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d901      	bls.n	8006c92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e187      	b.n	8006fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c92:	4b1b      	ldr	r3, [pc, #108]	; (8006d00 <HAL_RCC_OscConfig+0x240>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1f0      	bne.n	8006c80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0308 	and.w	r3, r3, #8
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d036      	beq.n	8006d18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d016      	beq.n	8006ce0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cb2:	4b15      	ldr	r3, [pc, #84]	; (8006d08 <HAL_RCC_OscConfig+0x248>)
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb8:	f7fd f920 	bl	8003efc <HAL_GetTick>
 8006cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cbe:	e008      	b.n	8006cd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cc0:	f7fd f91c 	bl	8003efc <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e167      	b.n	8006fa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cd2:	4b0b      	ldr	r3, [pc, #44]	; (8006d00 <HAL_RCC_OscConfig+0x240>)
 8006cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cd6:	f003 0302 	and.w	r3, r3, #2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d0f0      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x200>
 8006cde:	e01b      	b.n	8006d18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ce0:	4b09      	ldr	r3, [pc, #36]	; (8006d08 <HAL_RCC_OscConfig+0x248>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ce6:	f7fd f909 	bl	8003efc <HAL_GetTick>
 8006cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cec:	e00e      	b.n	8006d0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cee:	f7fd f905 	bl	8003efc <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d907      	bls.n	8006d0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e150      	b.n	8006fa2 <HAL_RCC_OscConfig+0x4e2>
 8006d00:	40023800 	.word	0x40023800
 8006d04:	42470000 	.word	0x42470000
 8006d08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d0c:	4b88      	ldr	r3, [pc, #544]	; (8006f30 <HAL_RCC_OscConfig+0x470>)
 8006d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1ea      	bne.n	8006cee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0304 	and.w	r3, r3, #4
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f000 8097 	beq.w	8006e54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d26:	2300      	movs	r3, #0
 8006d28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d2a:	4b81      	ldr	r3, [pc, #516]	; (8006f30 <HAL_RCC_OscConfig+0x470>)
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10f      	bne.n	8006d56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d36:	2300      	movs	r3, #0
 8006d38:	60bb      	str	r3, [r7, #8]
 8006d3a:	4b7d      	ldr	r3, [pc, #500]	; (8006f30 <HAL_RCC_OscConfig+0x470>)
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3e:	4a7c      	ldr	r2, [pc, #496]	; (8006f30 <HAL_RCC_OscConfig+0x470>)
 8006d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d44:	6413      	str	r3, [r2, #64]	; 0x40
 8006d46:	4b7a      	ldr	r3, [pc, #488]	; (8006f30 <HAL_RCC_OscConfig+0x470>)
 8006d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d4e:	60bb      	str	r3, [r7, #8]
 8006d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d52:	2301      	movs	r3, #1
 8006d54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d56:	4b77      	ldr	r3, [pc, #476]	; (8006f34 <HAL_RCC_OscConfig+0x474>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d118      	bne.n	8006d94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d62:	4b74      	ldr	r3, [pc, #464]	; (8006f34 <HAL_RCC_OscConfig+0x474>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a73      	ldr	r2, [pc, #460]	; (8006f34 <HAL_RCC_OscConfig+0x474>)
 8006d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d6e:	f7fd f8c5 	bl	8003efc <HAL_GetTick>
 8006d72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d74:	e008      	b.n	8006d88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d76:	f7fd f8c1 	bl	8003efc <HAL_GetTick>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d901      	bls.n	8006d88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e10c      	b.n	8006fa2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d88:	4b6a      	ldr	r3, [pc, #424]	; (8006f34 <HAL_RCC_OscConfig+0x474>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d0f0      	beq.n	8006d76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d106      	bne.n	8006daa <HAL_RCC_OscConfig+0x2ea>
 8006d9c:	4b64      	ldr	r3, [pc, #400]	; (8006f30 <HAL_RCC_OscConfig+0x470>)
 8006d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da0:	4a63      	ldr	r2, [pc, #396]	; (8006f30 <HAL_RCC_OscConfig+0x470>)
 8006da2:	f043 0301 	orr.w	r3, r3, #1
 8006da6:	6713      	str	r3, [r2, #112]	; 0x70
 8006da8:	e01c      	b.n	8006de4 <HAL_RCC_OscConfig+0x324>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	2b05      	cmp	r3, #5
 8006db0:	d10c      	bne.n	8006dcc <HAL_RCC_OscConfig+0x30c>
 8006db2:	4b5f      	ldr	r3, [pc, #380]	; (8006f30 <HAL_RCC_OscConfig+0x470>)
 8006db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db6:	4a5e      	ldr	r2, [pc, #376]	; (8006f30 <HAL_RCC_OscConfig+0x470>)
 8006db8:	f043 0304 	orr.w	r3, r3, #4
 8006dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8006dbe:	4b5c      	ldr	r3, [pc, #368]	; (8006f30 <HAL_RCC_OscConfig+0x470>)
 8006dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc2:	4a5b      	ldr	r2, [pc, #364]	; (8006f30 <HAL_RCC_OscConfig+0x470>)
 8006dc4:	f043 0301 	orr.w	r3, r3, #1
 8006dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8006dca:	e00b      	b.n	8006de4 <HAL_RCC_OscConfig+0x324>
 8006dcc:	4b58      	ldr	r3, [pc, #352]	; (8006f30 <HAL_RCC_OscConfig+0x470>)
 8006dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd0:	4a57      	ldr	r2, [pc, #348]	; (8006f30 <HAL_RCC_OscConfig+0x470>)
 8006dd2:	f023 0301 	bic.w	r3, r3, #1
 8006dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8006dd8:	4b55      	ldr	r3, [pc, #340]	; (8006f30 <HAL_RCC_OscConfig+0x470>)
 8006dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ddc:	4a54      	ldr	r2, [pc, #336]	; (8006f30 <HAL_RCC_OscConfig+0x470>)
 8006dde:	f023 0304 	bic.w	r3, r3, #4
 8006de2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d015      	beq.n	8006e18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dec:	f7fd f886 	bl	8003efc <HAL_GetTick>
 8006df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006df2:	e00a      	b.n	8006e0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006df4:	f7fd f882 	bl	8003efc <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d901      	bls.n	8006e0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e0cb      	b.n	8006fa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e0a:	4b49      	ldr	r3, [pc, #292]	; (8006f30 <HAL_RCC_OscConfig+0x470>)
 8006e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d0ee      	beq.n	8006df4 <HAL_RCC_OscConfig+0x334>
 8006e16:	e014      	b.n	8006e42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e18:	f7fd f870 	bl	8003efc <HAL_GetTick>
 8006e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e1e:	e00a      	b.n	8006e36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e20:	f7fd f86c 	bl	8003efc <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d901      	bls.n	8006e36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e0b5      	b.n	8006fa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e36:	4b3e      	ldr	r3, [pc, #248]	; (8006f30 <HAL_RCC_OscConfig+0x470>)
 8006e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1ee      	bne.n	8006e20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e42:	7dfb      	ldrb	r3, [r7, #23]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d105      	bne.n	8006e54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e48:	4b39      	ldr	r3, [pc, #228]	; (8006f30 <HAL_RCC_OscConfig+0x470>)
 8006e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4c:	4a38      	ldr	r2, [pc, #224]	; (8006f30 <HAL_RCC_OscConfig+0x470>)
 8006e4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f000 80a1 	beq.w	8006fa0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e5e:	4b34      	ldr	r3, [pc, #208]	; (8006f30 <HAL_RCC_OscConfig+0x470>)
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f003 030c 	and.w	r3, r3, #12
 8006e66:	2b08      	cmp	r3, #8
 8006e68:	d05c      	beq.n	8006f24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d141      	bne.n	8006ef6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e72:	4b31      	ldr	r3, [pc, #196]	; (8006f38 <HAL_RCC_OscConfig+0x478>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e78:	f7fd f840 	bl	8003efc <HAL_GetTick>
 8006e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e7e:	e008      	b.n	8006e92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e80:	f7fd f83c 	bl	8003efc <HAL_GetTick>
 8006e84:	4602      	mov	r2, r0
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d901      	bls.n	8006e92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e087      	b.n	8006fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e92:	4b27      	ldr	r3, [pc, #156]	; (8006f30 <HAL_RCC_OscConfig+0x470>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1f0      	bne.n	8006e80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	69da      	ldr	r2, [r3, #28]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	431a      	orrs	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eac:	019b      	lsls	r3, r3, #6
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb4:	085b      	lsrs	r3, r3, #1
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	041b      	lsls	r3, r3, #16
 8006eba:	431a      	orrs	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec0:	061b      	lsls	r3, r3, #24
 8006ec2:	491b      	ldr	r1, [pc, #108]	; (8006f30 <HAL_RCC_OscConfig+0x470>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ec8:	4b1b      	ldr	r3, [pc, #108]	; (8006f38 <HAL_RCC_OscConfig+0x478>)
 8006eca:	2201      	movs	r2, #1
 8006ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ece:	f7fd f815 	bl	8003efc <HAL_GetTick>
 8006ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ed4:	e008      	b.n	8006ee8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ed6:	f7fd f811 	bl	8003efc <HAL_GetTick>
 8006eda:	4602      	mov	r2, r0
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d901      	bls.n	8006ee8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	e05c      	b.n	8006fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ee8:	4b11      	ldr	r3, [pc, #68]	; (8006f30 <HAL_RCC_OscConfig+0x470>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d0f0      	beq.n	8006ed6 <HAL_RCC_OscConfig+0x416>
 8006ef4:	e054      	b.n	8006fa0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ef6:	4b10      	ldr	r3, [pc, #64]	; (8006f38 <HAL_RCC_OscConfig+0x478>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006efc:	f7fc fffe 	bl	8003efc <HAL_GetTick>
 8006f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f02:	e008      	b.n	8006f16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f04:	f7fc fffa 	bl	8003efc <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d901      	bls.n	8006f16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e045      	b.n	8006fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f16:	4b06      	ldr	r3, [pc, #24]	; (8006f30 <HAL_RCC_OscConfig+0x470>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1f0      	bne.n	8006f04 <HAL_RCC_OscConfig+0x444>
 8006f22:	e03d      	b.n	8006fa0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	699b      	ldr	r3, [r3, #24]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d107      	bne.n	8006f3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e038      	b.n	8006fa2 <HAL_RCC_OscConfig+0x4e2>
 8006f30:	40023800 	.word	0x40023800
 8006f34:	40007000 	.word	0x40007000
 8006f38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f3c:	4b1b      	ldr	r3, [pc, #108]	; (8006fac <HAL_RCC_OscConfig+0x4ec>)
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d028      	beq.n	8006f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d121      	bne.n	8006f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d11a      	bne.n	8006f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d111      	bne.n	8006f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f82:	085b      	lsrs	r3, r3, #1
 8006f84:	3b01      	subs	r3, #1
 8006f86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d107      	bne.n	8006f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d001      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e000      	b.n	8006fa2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3718      	adds	r7, #24
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	40023800 	.word	0x40023800

08006fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d101      	bne.n	8006fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e0cc      	b.n	800715e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fc4:	4b68      	ldr	r3, [pc, #416]	; (8007168 <HAL_RCC_ClockConfig+0x1b8>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0307 	and.w	r3, r3, #7
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d90c      	bls.n	8006fec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fd2:	4b65      	ldr	r3, [pc, #404]	; (8007168 <HAL_RCC_ClockConfig+0x1b8>)
 8006fd4:	683a      	ldr	r2, [r7, #0]
 8006fd6:	b2d2      	uxtb	r2, r2
 8006fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fda:	4b63      	ldr	r3, [pc, #396]	; (8007168 <HAL_RCC_ClockConfig+0x1b8>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 0307 	and.w	r3, r3, #7
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d001      	beq.n	8006fec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e0b8      	b.n	800715e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0302 	and.w	r3, r3, #2
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d020      	beq.n	800703a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0304 	and.w	r3, r3, #4
 8007000:	2b00      	cmp	r3, #0
 8007002:	d005      	beq.n	8007010 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007004:	4b59      	ldr	r3, [pc, #356]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	4a58      	ldr	r2, [pc, #352]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 800700a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800700e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0308 	and.w	r3, r3, #8
 8007018:	2b00      	cmp	r3, #0
 800701a:	d005      	beq.n	8007028 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800701c:	4b53      	ldr	r3, [pc, #332]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	4a52      	ldr	r2, [pc, #328]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007022:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007026:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007028:	4b50      	ldr	r3, [pc, #320]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	494d      	ldr	r1, [pc, #308]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007036:	4313      	orrs	r3, r2
 8007038:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	2b00      	cmp	r3, #0
 8007044:	d044      	beq.n	80070d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	2b01      	cmp	r3, #1
 800704c:	d107      	bne.n	800705e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800704e:	4b47      	ldr	r3, [pc, #284]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d119      	bne.n	800708e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e07f      	b.n	800715e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	2b02      	cmp	r3, #2
 8007064:	d003      	beq.n	800706e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800706a:	2b03      	cmp	r3, #3
 800706c:	d107      	bne.n	800707e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800706e:	4b3f      	ldr	r3, [pc, #252]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d109      	bne.n	800708e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e06f      	b.n	800715e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800707e:	4b3b      	ldr	r3, [pc, #236]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0302 	and.w	r3, r3, #2
 8007086:	2b00      	cmp	r3, #0
 8007088:	d101      	bne.n	800708e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e067      	b.n	800715e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800708e:	4b37      	ldr	r3, [pc, #220]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f023 0203 	bic.w	r2, r3, #3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	4934      	ldr	r1, [pc, #208]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 800709c:	4313      	orrs	r3, r2
 800709e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070a0:	f7fc ff2c 	bl	8003efc <HAL_GetTick>
 80070a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070a6:	e00a      	b.n	80070be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070a8:	f7fc ff28 	bl	8003efc <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d901      	bls.n	80070be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e04f      	b.n	800715e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070be:	4b2b      	ldr	r3, [pc, #172]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f003 020c 	and.w	r2, r3, #12
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d1eb      	bne.n	80070a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070d0:	4b25      	ldr	r3, [pc, #148]	; (8007168 <HAL_RCC_ClockConfig+0x1b8>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0307 	and.w	r3, r3, #7
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d20c      	bcs.n	80070f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070de:	4b22      	ldr	r3, [pc, #136]	; (8007168 <HAL_RCC_ClockConfig+0x1b8>)
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	b2d2      	uxtb	r2, r2
 80070e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070e6:	4b20      	ldr	r3, [pc, #128]	; (8007168 <HAL_RCC_ClockConfig+0x1b8>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0307 	and.w	r3, r3, #7
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d001      	beq.n	80070f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e032      	b.n	800715e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0304 	and.w	r3, r3, #4
 8007100:	2b00      	cmp	r3, #0
 8007102:	d008      	beq.n	8007116 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007104:	4b19      	ldr	r3, [pc, #100]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	4916      	ldr	r1, [pc, #88]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007112:	4313      	orrs	r3, r2
 8007114:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0308 	and.w	r3, r3, #8
 800711e:	2b00      	cmp	r3, #0
 8007120:	d009      	beq.n	8007136 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007122:	4b12      	ldr	r3, [pc, #72]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	00db      	lsls	r3, r3, #3
 8007130:	490e      	ldr	r1, [pc, #56]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007132:	4313      	orrs	r3, r2
 8007134:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007136:	f000 f821 	bl	800717c <HAL_RCC_GetSysClockFreq>
 800713a:	4602      	mov	r2, r0
 800713c:	4b0b      	ldr	r3, [pc, #44]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	091b      	lsrs	r3, r3, #4
 8007142:	f003 030f 	and.w	r3, r3, #15
 8007146:	490a      	ldr	r1, [pc, #40]	; (8007170 <HAL_RCC_ClockConfig+0x1c0>)
 8007148:	5ccb      	ldrb	r3, [r1, r3]
 800714a:	fa22 f303 	lsr.w	r3, r2, r3
 800714e:	4a09      	ldr	r2, [pc, #36]	; (8007174 <HAL_RCC_ClockConfig+0x1c4>)
 8007150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007152:	4b09      	ldr	r3, [pc, #36]	; (8007178 <HAL_RCC_ClockConfig+0x1c8>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4618      	mov	r0, r3
 8007158:	f7fc fe8c 	bl	8003e74 <HAL_InitTick>

  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	40023c00 	.word	0x40023c00
 800716c:	40023800 	.word	0x40023800
 8007170:	0800b4d4 	.word	0x0800b4d4
 8007174:	20000000 	.word	0x20000000
 8007178:	20000068 	.word	0x20000068

0800717c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800717c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007180:	b094      	sub	sp, #80	; 0x50
 8007182:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007184:	2300      	movs	r3, #0
 8007186:	647b      	str	r3, [r7, #68]	; 0x44
 8007188:	2300      	movs	r3, #0
 800718a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800718c:	2300      	movs	r3, #0
 800718e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007190:	2300      	movs	r3, #0
 8007192:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007194:	4b79      	ldr	r3, [pc, #484]	; (800737c <HAL_RCC_GetSysClockFreq+0x200>)
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f003 030c 	and.w	r3, r3, #12
 800719c:	2b08      	cmp	r3, #8
 800719e:	d00d      	beq.n	80071bc <HAL_RCC_GetSysClockFreq+0x40>
 80071a0:	2b08      	cmp	r3, #8
 80071a2:	f200 80e1 	bhi.w	8007368 <HAL_RCC_GetSysClockFreq+0x1ec>
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d002      	beq.n	80071b0 <HAL_RCC_GetSysClockFreq+0x34>
 80071aa:	2b04      	cmp	r3, #4
 80071ac:	d003      	beq.n	80071b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80071ae:	e0db      	b.n	8007368 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071b0:	4b73      	ldr	r3, [pc, #460]	; (8007380 <HAL_RCC_GetSysClockFreq+0x204>)
 80071b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80071b4:	e0db      	b.n	800736e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071b6:	4b73      	ldr	r3, [pc, #460]	; (8007384 <HAL_RCC_GetSysClockFreq+0x208>)
 80071b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80071ba:	e0d8      	b.n	800736e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071bc:	4b6f      	ldr	r3, [pc, #444]	; (800737c <HAL_RCC_GetSysClockFreq+0x200>)
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071c6:	4b6d      	ldr	r3, [pc, #436]	; (800737c <HAL_RCC_GetSysClockFreq+0x200>)
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d063      	beq.n	800729a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071d2:	4b6a      	ldr	r3, [pc, #424]	; (800737c <HAL_RCC_GetSysClockFreq+0x200>)
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	099b      	lsrs	r3, r3, #6
 80071d8:	2200      	movs	r2, #0
 80071da:	63bb      	str	r3, [r7, #56]	; 0x38
 80071dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80071de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e4:	633b      	str	r3, [r7, #48]	; 0x30
 80071e6:	2300      	movs	r3, #0
 80071e8:	637b      	str	r3, [r7, #52]	; 0x34
 80071ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80071ee:	4622      	mov	r2, r4
 80071f0:	462b      	mov	r3, r5
 80071f2:	f04f 0000 	mov.w	r0, #0
 80071f6:	f04f 0100 	mov.w	r1, #0
 80071fa:	0159      	lsls	r1, r3, #5
 80071fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007200:	0150      	lsls	r0, r2, #5
 8007202:	4602      	mov	r2, r0
 8007204:	460b      	mov	r3, r1
 8007206:	4621      	mov	r1, r4
 8007208:	1a51      	subs	r1, r2, r1
 800720a:	6139      	str	r1, [r7, #16]
 800720c:	4629      	mov	r1, r5
 800720e:	eb63 0301 	sbc.w	r3, r3, r1
 8007212:	617b      	str	r3, [r7, #20]
 8007214:	f04f 0200 	mov.w	r2, #0
 8007218:	f04f 0300 	mov.w	r3, #0
 800721c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007220:	4659      	mov	r1, fp
 8007222:	018b      	lsls	r3, r1, #6
 8007224:	4651      	mov	r1, sl
 8007226:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800722a:	4651      	mov	r1, sl
 800722c:	018a      	lsls	r2, r1, #6
 800722e:	4651      	mov	r1, sl
 8007230:	ebb2 0801 	subs.w	r8, r2, r1
 8007234:	4659      	mov	r1, fp
 8007236:	eb63 0901 	sbc.w	r9, r3, r1
 800723a:	f04f 0200 	mov.w	r2, #0
 800723e:	f04f 0300 	mov.w	r3, #0
 8007242:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007246:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800724a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800724e:	4690      	mov	r8, r2
 8007250:	4699      	mov	r9, r3
 8007252:	4623      	mov	r3, r4
 8007254:	eb18 0303 	adds.w	r3, r8, r3
 8007258:	60bb      	str	r3, [r7, #8]
 800725a:	462b      	mov	r3, r5
 800725c:	eb49 0303 	adc.w	r3, r9, r3
 8007260:	60fb      	str	r3, [r7, #12]
 8007262:	f04f 0200 	mov.w	r2, #0
 8007266:	f04f 0300 	mov.w	r3, #0
 800726a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800726e:	4629      	mov	r1, r5
 8007270:	024b      	lsls	r3, r1, #9
 8007272:	4621      	mov	r1, r4
 8007274:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007278:	4621      	mov	r1, r4
 800727a:	024a      	lsls	r2, r1, #9
 800727c:	4610      	mov	r0, r2
 800727e:	4619      	mov	r1, r3
 8007280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007282:	2200      	movs	r2, #0
 8007284:	62bb      	str	r3, [r7, #40]	; 0x28
 8007286:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007288:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800728c:	f7fb fb66 	bl	800295c <__aeabi_uldivmod>
 8007290:	4602      	mov	r2, r0
 8007292:	460b      	mov	r3, r1
 8007294:	4613      	mov	r3, r2
 8007296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007298:	e058      	b.n	800734c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800729a:	4b38      	ldr	r3, [pc, #224]	; (800737c <HAL_RCC_GetSysClockFreq+0x200>)
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	099b      	lsrs	r3, r3, #6
 80072a0:	2200      	movs	r2, #0
 80072a2:	4618      	mov	r0, r3
 80072a4:	4611      	mov	r1, r2
 80072a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80072aa:	623b      	str	r3, [r7, #32]
 80072ac:	2300      	movs	r3, #0
 80072ae:	627b      	str	r3, [r7, #36]	; 0x24
 80072b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80072b4:	4642      	mov	r2, r8
 80072b6:	464b      	mov	r3, r9
 80072b8:	f04f 0000 	mov.w	r0, #0
 80072bc:	f04f 0100 	mov.w	r1, #0
 80072c0:	0159      	lsls	r1, r3, #5
 80072c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072c6:	0150      	lsls	r0, r2, #5
 80072c8:	4602      	mov	r2, r0
 80072ca:	460b      	mov	r3, r1
 80072cc:	4641      	mov	r1, r8
 80072ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80072d2:	4649      	mov	r1, r9
 80072d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80072d8:	f04f 0200 	mov.w	r2, #0
 80072dc:	f04f 0300 	mov.w	r3, #0
 80072e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80072e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80072e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80072ec:	ebb2 040a 	subs.w	r4, r2, sl
 80072f0:	eb63 050b 	sbc.w	r5, r3, fp
 80072f4:	f04f 0200 	mov.w	r2, #0
 80072f8:	f04f 0300 	mov.w	r3, #0
 80072fc:	00eb      	lsls	r3, r5, #3
 80072fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007302:	00e2      	lsls	r2, r4, #3
 8007304:	4614      	mov	r4, r2
 8007306:	461d      	mov	r5, r3
 8007308:	4643      	mov	r3, r8
 800730a:	18e3      	adds	r3, r4, r3
 800730c:	603b      	str	r3, [r7, #0]
 800730e:	464b      	mov	r3, r9
 8007310:	eb45 0303 	adc.w	r3, r5, r3
 8007314:	607b      	str	r3, [r7, #4]
 8007316:	f04f 0200 	mov.w	r2, #0
 800731a:	f04f 0300 	mov.w	r3, #0
 800731e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007322:	4629      	mov	r1, r5
 8007324:	028b      	lsls	r3, r1, #10
 8007326:	4621      	mov	r1, r4
 8007328:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800732c:	4621      	mov	r1, r4
 800732e:	028a      	lsls	r2, r1, #10
 8007330:	4610      	mov	r0, r2
 8007332:	4619      	mov	r1, r3
 8007334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007336:	2200      	movs	r2, #0
 8007338:	61bb      	str	r3, [r7, #24]
 800733a:	61fa      	str	r2, [r7, #28]
 800733c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007340:	f7fb fb0c 	bl	800295c <__aeabi_uldivmod>
 8007344:	4602      	mov	r2, r0
 8007346:	460b      	mov	r3, r1
 8007348:	4613      	mov	r3, r2
 800734a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800734c:	4b0b      	ldr	r3, [pc, #44]	; (800737c <HAL_RCC_GetSysClockFreq+0x200>)
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	0c1b      	lsrs	r3, r3, #16
 8007352:	f003 0303 	and.w	r3, r3, #3
 8007356:	3301      	adds	r3, #1
 8007358:	005b      	lsls	r3, r3, #1
 800735a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800735c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800735e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007360:	fbb2 f3f3 	udiv	r3, r2, r3
 8007364:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007366:	e002      	b.n	800736e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007368:	4b05      	ldr	r3, [pc, #20]	; (8007380 <HAL_RCC_GetSysClockFreq+0x204>)
 800736a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800736c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800736e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007370:	4618      	mov	r0, r3
 8007372:	3750      	adds	r7, #80	; 0x50
 8007374:	46bd      	mov	sp, r7
 8007376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800737a:	bf00      	nop
 800737c:	40023800 	.word	0x40023800
 8007380:	00f42400 	.word	0x00f42400
 8007384:	007a1200 	.word	0x007a1200

08007388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007388:	b480      	push	{r7}
 800738a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800738c:	4b03      	ldr	r3, [pc, #12]	; (800739c <HAL_RCC_GetHCLKFreq+0x14>)
 800738e:	681b      	ldr	r3, [r3, #0]
}
 8007390:	4618      	mov	r0, r3
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	20000000 	.word	0x20000000

080073a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80073a4:	f7ff fff0 	bl	8007388 <HAL_RCC_GetHCLKFreq>
 80073a8:	4602      	mov	r2, r0
 80073aa:	4b05      	ldr	r3, [pc, #20]	; (80073c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	0a9b      	lsrs	r3, r3, #10
 80073b0:	f003 0307 	and.w	r3, r3, #7
 80073b4:	4903      	ldr	r1, [pc, #12]	; (80073c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073b6:	5ccb      	ldrb	r3, [r1, r3]
 80073b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073bc:	4618      	mov	r0, r3
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	40023800 	.word	0x40023800
 80073c4:	0800b4e4 	.word	0x0800b4e4

080073c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80073cc:	f7ff ffdc 	bl	8007388 <HAL_RCC_GetHCLKFreq>
 80073d0:	4602      	mov	r2, r0
 80073d2:	4b05      	ldr	r3, [pc, #20]	; (80073e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	0b5b      	lsrs	r3, r3, #13
 80073d8:	f003 0307 	and.w	r3, r3, #7
 80073dc:	4903      	ldr	r1, [pc, #12]	; (80073ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80073de:	5ccb      	ldrb	r3, [r1, r3]
 80073e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	40023800 	.word	0x40023800
 80073ec:	0800b4e4 	.word	0x0800b4e4

080073f0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073f8:	2300      	movs	r3, #0
 80073fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80073fc:	2300      	movs	r3, #0
 80073fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0301 	and.w	r3, r3, #1
 8007408:	2b00      	cmp	r3, #0
 800740a:	d105      	bne.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007414:	2b00      	cmp	r3, #0
 8007416:	d035      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007418:	4b62      	ldr	r3, [pc, #392]	; (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800741a:	2200      	movs	r2, #0
 800741c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800741e:	f7fc fd6d 	bl	8003efc <HAL_GetTick>
 8007422:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007424:	e008      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007426:	f7fc fd69 	bl	8003efc <HAL_GetTick>
 800742a:	4602      	mov	r2, r0
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	2b02      	cmp	r3, #2
 8007432:	d901      	bls.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	e0b0      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007438:	4b5b      	ldr	r3, [pc, #364]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007440:	2b00      	cmp	r3, #0
 8007442:	d1f0      	bne.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	019a      	lsls	r2, r3, #6
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	071b      	lsls	r3, r3, #28
 8007450:	4955      	ldr	r1, [pc, #340]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007452:	4313      	orrs	r3, r2
 8007454:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007458:	4b52      	ldr	r3, [pc, #328]	; (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800745a:	2201      	movs	r2, #1
 800745c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800745e:	f7fc fd4d 	bl	8003efc <HAL_GetTick>
 8007462:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007464:	e008      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007466:	f7fc fd49 	bl	8003efc <HAL_GetTick>
 800746a:	4602      	mov	r2, r0
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	2b02      	cmp	r3, #2
 8007472:	d901      	bls.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e090      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007478:	4b4b      	ldr	r3, [pc, #300]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d0f0      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0302 	and.w	r3, r3, #2
 800748c:	2b00      	cmp	r3, #0
 800748e:	f000 8083 	beq.w	8007598 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007492:	2300      	movs	r3, #0
 8007494:	60fb      	str	r3, [r7, #12]
 8007496:	4b44      	ldr	r3, [pc, #272]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749a:	4a43      	ldr	r2, [pc, #268]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800749c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074a0:	6413      	str	r3, [r2, #64]	; 0x40
 80074a2:	4b41      	ldr	r3, [pc, #260]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80074ae:	4b3f      	ldr	r3, [pc, #252]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a3e      	ldr	r2, [pc, #248]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80074b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80074ba:	f7fc fd1f 	bl	8003efc <HAL_GetTick>
 80074be:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80074c0:	e008      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80074c2:	f7fc fd1b 	bl	8003efc <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d901      	bls.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e062      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80074d4:	4b35      	ldr	r3, [pc, #212]	; (80075ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d0f0      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80074e0:	4b31      	ldr	r3, [pc, #196]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074e8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d02f      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d028      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074fe:	4b2a      	ldr	r3, [pc, #168]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007506:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007508:	4b29      	ldr	r3, [pc, #164]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800750a:	2201      	movs	r2, #1
 800750c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800750e:	4b28      	ldr	r3, [pc, #160]	; (80075b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007510:	2200      	movs	r2, #0
 8007512:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007514:	4a24      	ldr	r2, [pc, #144]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800751a:	4b23      	ldr	r3, [pc, #140]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800751c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800751e:	f003 0301 	and.w	r3, r3, #1
 8007522:	2b01      	cmp	r3, #1
 8007524:	d114      	bne.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007526:	f7fc fce9 	bl	8003efc <HAL_GetTick>
 800752a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800752c:	e00a      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800752e:	f7fc fce5 	bl	8003efc <HAL_GetTick>
 8007532:	4602      	mov	r2, r0
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	f241 3288 	movw	r2, #5000	; 0x1388
 800753c:	4293      	cmp	r3, r2
 800753e:	d901      	bls.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	e02a      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007544:	4b18      	ldr	r3, [pc, #96]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007548:	f003 0302 	and.w	r3, r3, #2
 800754c:	2b00      	cmp	r3, #0
 800754e:	d0ee      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007558:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800755c:	d10d      	bne.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800755e:	4b12      	ldr	r3, [pc, #72]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800756e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007572:	490d      	ldr	r1, [pc, #52]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007574:	4313      	orrs	r3, r2
 8007576:	608b      	str	r3, [r1, #8]
 8007578:	e005      	b.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800757a:	4b0b      	ldr	r3, [pc, #44]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	4a0a      	ldr	r2, [pc, #40]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007580:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007584:	6093      	str	r3, [r2, #8]
 8007586:	4b08      	ldr	r3, [pc, #32]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007588:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007592:	4905      	ldr	r1, [pc, #20]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007594:	4313      	orrs	r3, r2
 8007596:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3718      	adds	r7, #24
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	42470068 	.word	0x42470068
 80075a8:	40023800 	.word	0x40023800
 80075ac:	40007000 	.word	0x40007000
 80075b0:	42470e40 	.word	0x42470e40

080075b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b087      	sub	sp, #28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80075bc:	2300      	movs	r3, #0
 80075be:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80075c0:	2300      	movs	r3, #0
 80075c2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80075c4:	2300      	movs	r3, #0
 80075c6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80075c8:	2300      	movs	r3, #0
 80075ca:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d13e      	bne.n	8007650 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80075d2:	4b23      	ldr	r3, [pc, #140]	; (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075da:	60fb      	str	r3, [r7, #12]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d005      	beq.n	80075ee <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d12f      	bne.n	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80075e8:	4b1e      	ldr	r3, [pc, #120]	; (8007664 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80075ea:	617b      	str	r3, [r7, #20]
          break;
 80075ec:	e02f      	b.n	800764e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80075ee:	4b1c      	ldr	r3, [pc, #112]	; (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075fa:	d108      	bne.n	800760e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80075fc:	4b18      	ldr	r3, [pc, #96]	; (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007604:	4a18      	ldr	r2, [pc, #96]	; (8007668 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007606:	fbb2 f3f3 	udiv	r3, r2, r3
 800760a:	613b      	str	r3, [r7, #16]
 800760c:	e007      	b.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800760e:	4b14      	ldr	r3, [pc, #80]	; (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007616:	4a15      	ldr	r2, [pc, #84]	; (800766c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007618:	fbb2 f3f3 	udiv	r3, r2, r3
 800761c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800761e:	4b10      	ldr	r3, [pc, #64]	; (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007620:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007624:	099b      	lsrs	r3, r3, #6
 8007626:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	fb02 f303 	mul.w	r3, r2, r3
 8007630:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007632:	4b0b      	ldr	r3, [pc, #44]	; (8007660 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007638:	0f1b      	lsrs	r3, r3, #28
 800763a:	f003 0307 	and.w	r3, r3, #7
 800763e:	68ba      	ldr	r2, [r7, #8]
 8007640:	fbb2 f3f3 	udiv	r3, r2, r3
 8007644:	617b      	str	r3, [r7, #20]
          break;
 8007646:	e002      	b.n	800764e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007648:	2300      	movs	r3, #0
 800764a:	617b      	str	r3, [r7, #20]
          break;
 800764c:	bf00      	nop
        }
      }
      break;
 800764e:	bf00      	nop
    }
  }
  return frequency;
 8007650:	697b      	ldr	r3, [r7, #20]
}
 8007652:	4618      	mov	r0, r3
 8007654:	371c      	adds	r7, #28
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	40023800 	.word	0x40023800
 8007664:	00bb8000 	.word	0x00bb8000
 8007668:	007a1200 	.word	0x007a1200
 800766c:	00f42400 	.word	0x00f42400

08007670 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e07b      	b.n	800777a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007686:	2b00      	cmp	r3, #0
 8007688:	d108      	bne.n	800769c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007692:	d009      	beq.n	80076a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	61da      	str	r2, [r3, #28]
 800769a:	e005      	b.n	80076a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d106      	bne.n	80076c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7f9 f9ac 	bl	8000a20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2202      	movs	r2, #2
 80076cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80076f0:	431a      	orrs	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076fa:	431a      	orrs	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	f003 0302 	and.w	r3, r3, #2
 8007704:	431a      	orrs	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	f003 0301 	and.w	r3, r3, #1
 800770e:	431a      	orrs	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007718:	431a      	orrs	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	69db      	ldr	r3, [r3, #28]
 800771e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007722:	431a      	orrs	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a1b      	ldr	r3, [r3, #32]
 8007728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800772c:	ea42 0103 	orr.w	r1, r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007734:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	430a      	orrs	r2, r1
 800773e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	699b      	ldr	r3, [r3, #24]
 8007744:	0c1b      	lsrs	r3, r3, #16
 8007746:	f003 0104 	and.w	r1, r3, #4
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774e:	f003 0210 	and.w	r2, r3, #16
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	430a      	orrs	r2, r1
 8007758:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	69da      	ldr	r2, [r3, #28]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007768:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3708      	adds	r7, #8
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b082      	sub	sp, #8
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d101      	bne.n	8007794 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	e03f      	b.n	8007814 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800779a:	b2db      	uxtb	r3, r3
 800779c:	2b00      	cmp	r3, #0
 800779e:	d106      	bne.n	80077ae <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f7f9 f99f 	bl	8000aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2224      	movs	r2, #36	; 0x24
 80077b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68da      	ldr	r2, [r3, #12]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077c4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f928 	bl	8007a1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	691a      	ldr	r2, [r3, #16]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	695a      	ldr	r2, [r3, #20]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077ea:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68da      	ldr	r2, [r3, #12]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077fa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2220      	movs	r2, #32
 8007806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2220      	movs	r2, #32
 800780e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b08a      	sub	sp, #40	; 0x28
 8007820:	af02      	add	r7, sp, #8
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	603b      	str	r3, [r7, #0]
 8007828:	4613      	mov	r3, r2
 800782a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007836:	b2db      	uxtb	r3, r3
 8007838:	2b20      	cmp	r3, #32
 800783a:	d17c      	bne.n	8007936 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d002      	beq.n	8007848 <HAL_UART_Transmit+0x2c>
 8007842:	88fb      	ldrh	r3, [r7, #6]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d101      	bne.n	800784c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e075      	b.n	8007938 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007852:	2b01      	cmp	r3, #1
 8007854:	d101      	bne.n	800785a <HAL_UART_Transmit+0x3e>
 8007856:	2302      	movs	r3, #2
 8007858:	e06e      	b.n	8007938 <HAL_UART_Transmit+0x11c>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2201      	movs	r2, #1
 800785e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2221      	movs	r2, #33	; 0x21
 800786c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007870:	f7fc fb44 	bl	8003efc <HAL_GetTick>
 8007874:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	88fa      	ldrh	r2, [r7, #6]
 800787a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	88fa      	ldrh	r2, [r7, #6]
 8007880:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800788a:	d108      	bne.n	800789e <HAL_UART_Transmit+0x82>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d104      	bne.n	800789e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007894:	2300      	movs	r3, #0
 8007896:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	61bb      	str	r3, [r7, #24]
 800789c:	e003      	b.n	80078a6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078a2:	2300      	movs	r3, #0
 80078a4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80078ae:	e02a      	b.n	8007906 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	9300      	str	r3, [sp, #0]
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	2200      	movs	r2, #0
 80078b8:	2180      	movs	r1, #128	; 0x80
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 f840 	bl	8007940 <UART_WaitOnFlagUntilTimeout>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e036      	b.n	8007938 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d10b      	bne.n	80078e8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	881b      	ldrh	r3, [r3, #0]
 80078d4:	461a      	mov	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078de:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	3302      	adds	r3, #2
 80078e4:	61bb      	str	r3, [r7, #24]
 80078e6:	e007      	b.n	80078f8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	781a      	ldrb	r2, [r3, #0]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	3301      	adds	r3, #1
 80078f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	3b01      	subs	r3, #1
 8007900:	b29a      	uxth	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800790a:	b29b      	uxth	r3, r3
 800790c:	2b00      	cmp	r3, #0
 800790e:	d1cf      	bne.n	80078b0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	2200      	movs	r2, #0
 8007918:	2140      	movs	r1, #64	; 0x40
 800791a:	68f8      	ldr	r0, [r7, #12]
 800791c:	f000 f810 	bl	8007940 <UART_WaitOnFlagUntilTimeout>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d001      	beq.n	800792a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e006      	b.n	8007938 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2220      	movs	r2, #32
 800792e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007932:	2300      	movs	r3, #0
 8007934:	e000      	b.n	8007938 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007936:	2302      	movs	r3, #2
  }
}
 8007938:	4618      	mov	r0, r3
 800793a:	3720      	adds	r7, #32
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b090      	sub	sp, #64	; 0x40
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	603b      	str	r3, [r7, #0]
 800794c:	4613      	mov	r3, r2
 800794e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007950:	e050      	b.n	80079f4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007954:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007958:	d04c      	beq.n	80079f4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800795a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800795c:	2b00      	cmp	r3, #0
 800795e:	d007      	beq.n	8007970 <UART_WaitOnFlagUntilTimeout+0x30>
 8007960:	f7fc facc 	bl	8003efc <HAL_GetTick>
 8007964:	4602      	mov	r2, r0
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800796c:	429a      	cmp	r2, r3
 800796e:	d241      	bcs.n	80079f4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	330c      	adds	r3, #12
 8007976:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797a:	e853 3f00 	ldrex	r3, [r3]
 800797e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007982:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	330c      	adds	r3, #12
 800798e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007990:	637a      	str	r2, [r7, #52]	; 0x34
 8007992:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007994:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007996:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007998:	e841 2300 	strex	r3, r2, [r1]
 800799c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800799e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1e5      	bne.n	8007970 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	3314      	adds	r3, #20
 80079aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	e853 3f00 	ldrex	r3, [r3]
 80079b2:	613b      	str	r3, [r7, #16]
   return(result);
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	f023 0301 	bic.w	r3, r3, #1
 80079ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3314      	adds	r3, #20
 80079c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079c4:	623a      	str	r2, [r7, #32]
 80079c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c8:	69f9      	ldr	r1, [r7, #28]
 80079ca:	6a3a      	ldr	r2, [r7, #32]
 80079cc:	e841 2300 	strex	r3, r2, [r1]
 80079d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1e5      	bne.n	80079a4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2220      	movs	r2, #32
 80079dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2220      	movs	r2, #32
 80079e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e00f      	b.n	8007a14 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	4013      	ands	r3, r2
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	bf0c      	ite	eq
 8007a04:	2301      	moveq	r3, #1
 8007a06:	2300      	movne	r3, #0
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	79fb      	ldrb	r3, [r7, #7]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d09f      	beq.n	8007952 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3740      	adds	r7, #64	; 0x40
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a20:	b0c0      	sub	sp, #256	; 0x100
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a38:	68d9      	ldr	r1, [r3, #12]
 8007a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	ea40 0301 	orr.w	r3, r0, r1
 8007a44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a4a:	689a      	ldr	r2, [r3, #8]
 8007a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	431a      	orrs	r2, r3
 8007a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a58:	695b      	ldr	r3, [r3, #20]
 8007a5a:	431a      	orrs	r2, r3
 8007a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a60:	69db      	ldr	r3, [r3, #28]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007a74:	f021 010c 	bic.w	r1, r1, #12
 8007a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a82:	430b      	orrs	r3, r1
 8007a84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a96:	6999      	ldr	r1, [r3, #24]
 8007a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	ea40 0301 	orr.w	r3, r0, r1
 8007aa2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	4b8f      	ldr	r3, [pc, #572]	; (8007ce8 <UART_SetConfig+0x2cc>)
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d005      	beq.n	8007abc <UART_SetConfig+0xa0>
 8007ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	4b8d      	ldr	r3, [pc, #564]	; (8007cec <UART_SetConfig+0x2d0>)
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d104      	bne.n	8007ac6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007abc:	f7ff fc84 	bl	80073c8 <HAL_RCC_GetPCLK2Freq>
 8007ac0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007ac4:	e003      	b.n	8007ace <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ac6:	f7ff fc6b 	bl	80073a0 <HAL_RCC_GetPCLK1Freq>
 8007aca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ad2:	69db      	ldr	r3, [r3, #28]
 8007ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ad8:	f040 810c 	bne.w	8007cf4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007adc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ae6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007aea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007aee:	4622      	mov	r2, r4
 8007af0:	462b      	mov	r3, r5
 8007af2:	1891      	adds	r1, r2, r2
 8007af4:	65b9      	str	r1, [r7, #88]	; 0x58
 8007af6:	415b      	adcs	r3, r3
 8007af8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007afa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007afe:	4621      	mov	r1, r4
 8007b00:	eb12 0801 	adds.w	r8, r2, r1
 8007b04:	4629      	mov	r1, r5
 8007b06:	eb43 0901 	adc.w	r9, r3, r1
 8007b0a:	f04f 0200 	mov.w	r2, #0
 8007b0e:	f04f 0300 	mov.w	r3, #0
 8007b12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b1e:	4690      	mov	r8, r2
 8007b20:	4699      	mov	r9, r3
 8007b22:	4623      	mov	r3, r4
 8007b24:	eb18 0303 	adds.w	r3, r8, r3
 8007b28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b2c:	462b      	mov	r3, r5
 8007b2e:	eb49 0303 	adc.w	r3, r9, r3
 8007b32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007b46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	18db      	adds	r3, r3, r3
 8007b4e:	653b      	str	r3, [r7, #80]	; 0x50
 8007b50:	4613      	mov	r3, r2
 8007b52:	eb42 0303 	adc.w	r3, r2, r3
 8007b56:	657b      	str	r3, [r7, #84]	; 0x54
 8007b58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007b5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007b60:	f7fa fefc 	bl	800295c <__aeabi_uldivmod>
 8007b64:	4602      	mov	r2, r0
 8007b66:	460b      	mov	r3, r1
 8007b68:	4b61      	ldr	r3, [pc, #388]	; (8007cf0 <UART_SetConfig+0x2d4>)
 8007b6a:	fba3 2302 	umull	r2, r3, r3, r2
 8007b6e:	095b      	lsrs	r3, r3, #5
 8007b70:	011c      	lsls	r4, r3, #4
 8007b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b76:	2200      	movs	r2, #0
 8007b78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007b80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007b84:	4642      	mov	r2, r8
 8007b86:	464b      	mov	r3, r9
 8007b88:	1891      	adds	r1, r2, r2
 8007b8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8007b8c:	415b      	adcs	r3, r3
 8007b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007b94:	4641      	mov	r1, r8
 8007b96:	eb12 0a01 	adds.w	sl, r2, r1
 8007b9a:	4649      	mov	r1, r9
 8007b9c:	eb43 0b01 	adc.w	fp, r3, r1
 8007ba0:	f04f 0200 	mov.w	r2, #0
 8007ba4:	f04f 0300 	mov.w	r3, #0
 8007ba8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007bac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007bb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bb4:	4692      	mov	sl, r2
 8007bb6:	469b      	mov	fp, r3
 8007bb8:	4643      	mov	r3, r8
 8007bba:	eb1a 0303 	adds.w	r3, sl, r3
 8007bbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bc2:	464b      	mov	r3, r9
 8007bc4:	eb4b 0303 	adc.w	r3, fp, r3
 8007bc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007bd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007bdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007be0:	460b      	mov	r3, r1
 8007be2:	18db      	adds	r3, r3, r3
 8007be4:	643b      	str	r3, [r7, #64]	; 0x40
 8007be6:	4613      	mov	r3, r2
 8007be8:	eb42 0303 	adc.w	r3, r2, r3
 8007bec:	647b      	str	r3, [r7, #68]	; 0x44
 8007bee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007bf2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007bf6:	f7fa feb1 	bl	800295c <__aeabi_uldivmod>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	4611      	mov	r1, r2
 8007c00:	4b3b      	ldr	r3, [pc, #236]	; (8007cf0 <UART_SetConfig+0x2d4>)
 8007c02:	fba3 2301 	umull	r2, r3, r3, r1
 8007c06:	095b      	lsrs	r3, r3, #5
 8007c08:	2264      	movs	r2, #100	; 0x64
 8007c0a:	fb02 f303 	mul.w	r3, r2, r3
 8007c0e:	1acb      	subs	r3, r1, r3
 8007c10:	00db      	lsls	r3, r3, #3
 8007c12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007c16:	4b36      	ldr	r3, [pc, #216]	; (8007cf0 <UART_SetConfig+0x2d4>)
 8007c18:	fba3 2302 	umull	r2, r3, r3, r2
 8007c1c:	095b      	lsrs	r3, r3, #5
 8007c1e:	005b      	lsls	r3, r3, #1
 8007c20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c24:	441c      	add	r4, r3
 8007c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007c34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007c38:	4642      	mov	r2, r8
 8007c3a:	464b      	mov	r3, r9
 8007c3c:	1891      	adds	r1, r2, r2
 8007c3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c40:	415b      	adcs	r3, r3
 8007c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c48:	4641      	mov	r1, r8
 8007c4a:	1851      	adds	r1, r2, r1
 8007c4c:	6339      	str	r1, [r7, #48]	; 0x30
 8007c4e:	4649      	mov	r1, r9
 8007c50:	414b      	adcs	r3, r1
 8007c52:	637b      	str	r3, [r7, #52]	; 0x34
 8007c54:	f04f 0200 	mov.w	r2, #0
 8007c58:	f04f 0300 	mov.w	r3, #0
 8007c5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007c60:	4659      	mov	r1, fp
 8007c62:	00cb      	lsls	r3, r1, #3
 8007c64:	4651      	mov	r1, sl
 8007c66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c6a:	4651      	mov	r1, sl
 8007c6c:	00ca      	lsls	r2, r1, #3
 8007c6e:	4610      	mov	r0, r2
 8007c70:	4619      	mov	r1, r3
 8007c72:	4603      	mov	r3, r0
 8007c74:	4642      	mov	r2, r8
 8007c76:	189b      	adds	r3, r3, r2
 8007c78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c7c:	464b      	mov	r3, r9
 8007c7e:	460a      	mov	r2, r1
 8007c80:	eb42 0303 	adc.w	r3, r2, r3
 8007c84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007c94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007c98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	18db      	adds	r3, r3, r3
 8007ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	eb42 0303 	adc.w	r3, r2, r3
 8007ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007caa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007cae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007cb2:	f7fa fe53 	bl	800295c <__aeabi_uldivmod>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	460b      	mov	r3, r1
 8007cba:	4b0d      	ldr	r3, [pc, #52]	; (8007cf0 <UART_SetConfig+0x2d4>)
 8007cbc:	fba3 1302 	umull	r1, r3, r3, r2
 8007cc0:	095b      	lsrs	r3, r3, #5
 8007cc2:	2164      	movs	r1, #100	; 0x64
 8007cc4:	fb01 f303 	mul.w	r3, r1, r3
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	00db      	lsls	r3, r3, #3
 8007ccc:	3332      	adds	r3, #50	; 0x32
 8007cce:	4a08      	ldr	r2, [pc, #32]	; (8007cf0 <UART_SetConfig+0x2d4>)
 8007cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd4:	095b      	lsrs	r3, r3, #5
 8007cd6:	f003 0207 	and.w	r2, r3, #7
 8007cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4422      	add	r2, r4
 8007ce2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ce4:	e105      	b.n	8007ef2 <UART_SetConfig+0x4d6>
 8007ce6:	bf00      	nop
 8007ce8:	40011000 	.word	0x40011000
 8007cec:	40011400 	.word	0x40011400
 8007cf0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007cfe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007d02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007d06:	4642      	mov	r2, r8
 8007d08:	464b      	mov	r3, r9
 8007d0a:	1891      	adds	r1, r2, r2
 8007d0c:	6239      	str	r1, [r7, #32]
 8007d0e:	415b      	adcs	r3, r3
 8007d10:	627b      	str	r3, [r7, #36]	; 0x24
 8007d12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d16:	4641      	mov	r1, r8
 8007d18:	1854      	adds	r4, r2, r1
 8007d1a:	4649      	mov	r1, r9
 8007d1c:	eb43 0501 	adc.w	r5, r3, r1
 8007d20:	f04f 0200 	mov.w	r2, #0
 8007d24:	f04f 0300 	mov.w	r3, #0
 8007d28:	00eb      	lsls	r3, r5, #3
 8007d2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d2e:	00e2      	lsls	r2, r4, #3
 8007d30:	4614      	mov	r4, r2
 8007d32:	461d      	mov	r5, r3
 8007d34:	4643      	mov	r3, r8
 8007d36:	18e3      	adds	r3, r4, r3
 8007d38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d3c:	464b      	mov	r3, r9
 8007d3e:	eb45 0303 	adc.w	r3, r5, r3
 8007d42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d56:	f04f 0200 	mov.w	r2, #0
 8007d5a:	f04f 0300 	mov.w	r3, #0
 8007d5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007d62:	4629      	mov	r1, r5
 8007d64:	008b      	lsls	r3, r1, #2
 8007d66:	4621      	mov	r1, r4
 8007d68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d6c:	4621      	mov	r1, r4
 8007d6e:	008a      	lsls	r2, r1, #2
 8007d70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007d74:	f7fa fdf2 	bl	800295c <__aeabi_uldivmod>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	4b60      	ldr	r3, [pc, #384]	; (8007f00 <UART_SetConfig+0x4e4>)
 8007d7e:	fba3 2302 	umull	r2, r3, r3, r2
 8007d82:	095b      	lsrs	r3, r3, #5
 8007d84:	011c      	lsls	r4, r3, #4
 8007d86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007d90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007d94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007d98:	4642      	mov	r2, r8
 8007d9a:	464b      	mov	r3, r9
 8007d9c:	1891      	adds	r1, r2, r2
 8007d9e:	61b9      	str	r1, [r7, #24]
 8007da0:	415b      	adcs	r3, r3
 8007da2:	61fb      	str	r3, [r7, #28]
 8007da4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007da8:	4641      	mov	r1, r8
 8007daa:	1851      	adds	r1, r2, r1
 8007dac:	6139      	str	r1, [r7, #16]
 8007dae:	4649      	mov	r1, r9
 8007db0:	414b      	adcs	r3, r1
 8007db2:	617b      	str	r3, [r7, #20]
 8007db4:	f04f 0200 	mov.w	r2, #0
 8007db8:	f04f 0300 	mov.w	r3, #0
 8007dbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007dc0:	4659      	mov	r1, fp
 8007dc2:	00cb      	lsls	r3, r1, #3
 8007dc4:	4651      	mov	r1, sl
 8007dc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dca:	4651      	mov	r1, sl
 8007dcc:	00ca      	lsls	r2, r1, #3
 8007dce:	4610      	mov	r0, r2
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	4642      	mov	r2, r8
 8007dd6:	189b      	adds	r3, r3, r2
 8007dd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ddc:	464b      	mov	r3, r9
 8007dde:	460a      	mov	r2, r1
 8007de0:	eb42 0303 	adc.w	r3, r2, r3
 8007de4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	67bb      	str	r3, [r7, #120]	; 0x78
 8007df2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007df4:	f04f 0200 	mov.w	r2, #0
 8007df8:	f04f 0300 	mov.w	r3, #0
 8007dfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007e00:	4649      	mov	r1, r9
 8007e02:	008b      	lsls	r3, r1, #2
 8007e04:	4641      	mov	r1, r8
 8007e06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e0a:	4641      	mov	r1, r8
 8007e0c:	008a      	lsls	r2, r1, #2
 8007e0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007e12:	f7fa fda3 	bl	800295c <__aeabi_uldivmod>
 8007e16:	4602      	mov	r2, r0
 8007e18:	460b      	mov	r3, r1
 8007e1a:	4b39      	ldr	r3, [pc, #228]	; (8007f00 <UART_SetConfig+0x4e4>)
 8007e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8007e20:	095b      	lsrs	r3, r3, #5
 8007e22:	2164      	movs	r1, #100	; 0x64
 8007e24:	fb01 f303 	mul.w	r3, r1, r3
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	011b      	lsls	r3, r3, #4
 8007e2c:	3332      	adds	r3, #50	; 0x32
 8007e2e:	4a34      	ldr	r2, [pc, #208]	; (8007f00 <UART_SetConfig+0x4e4>)
 8007e30:	fba2 2303 	umull	r2, r3, r2, r3
 8007e34:	095b      	lsrs	r3, r3, #5
 8007e36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e3a:	441c      	add	r4, r3
 8007e3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e40:	2200      	movs	r2, #0
 8007e42:	673b      	str	r3, [r7, #112]	; 0x70
 8007e44:	677a      	str	r2, [r7, #116]	; 0x74
 8007e46:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007e4a:	4642      	mov	r2, r8
 8007e4c:	464b      	mov	r3, r9
 8007e4e:	1891      	adds	r1, r2, r2
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	415b      	adcs	r3, r3
 8007e54:	60fb      	str	r3, [r7, #12]
 8007e56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e5a:	4641      	mov	r1, r8
 8007e5c:	1851      	adds	r1, r2, r1
 8007e5e:	6039      	str	r1, [r7, #0]
 8007e60:	4649      	mov	r1, r9
 8007e62:	414b      	adcs	r3, r1
 8007e64:	607b      	str	r3, [r7, #4]
 8007e66:	f04f 0200 	mov.w	r2, #0
 8007e6a:	f04f 0300 	mov.w	r3, #0
 8007e6e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007e72:	4659      	mov	r1, fp
 8007e74:	00cb      	lsls	r3, r1, #3
 8007e76:	4651      	mov	r1, sl
 8007e78:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e7c:	4651      	mov	r1, sl
 8007e7e:	00ca      	lsls	r2, r1, #3
 8007e80:	4610      	mov	r0, r2
 8007e82:	4619      	mov	r1, r3
 8007e84:	4603      	mov	r3, r0
 8007e86:	4642      	mov	r2, r8
 8007e88:	189b      	adds	r3, r3, r2
 8007e8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e8c:	464b      	mov	r3, r9
 8007e8e:	460a      	mov	r2, r1
 8007e90:	eb42 0303 	adc.w	r3, r2, r3
 8007e94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	663b      	str	r3, [r7, #96]	; 0x60
 8007ea0:	667a      	str	r2, [r7, #100]	; 0x64
 8007ea2:	f04f 0200 	mov.w	r2, #0
 8007ea6:	f04f 0300 	mov.w	r3, #0
 8007eaa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007eae:	4649      	mov	r1, r9
 8007eb0:	008b      	lsls	r3, r1, #2
 8007eb2:	4641      	mov	r1, r8
 8007eb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007eb8:	4641      	mov	r1, r8
 8007eba:	008a      	lsls	r2, r1, #2
 8007ebc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007ec0:	f7fa fd4c 	bl	800295c <__aeabi_uldivmod>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	4b0d      	ldr	r3, [pc, #52]	; (8007f00 <UART_SetConfig+0x4e4>)
 8007eca:	fba3 1302 	umull	r1, r3, r3, r2
 8007ece:	095b      	lsrs	r3, r3, #5
 8007ed0:	2164      	movs	r1, #100	; 0x64
 8007ed2:	fb01 f303 	mul.w	r3, r1, r3
 8007ed6:	1ad3      	subs	r3, r2, r3
 8007ed8:	011b      	lsls	r3, r3, #4
 8007eda:	3332      	adds	r3, #50	; 0x32
 8007edc:	4a08      	ldr	r2, [pc, #32]	; (8007f00 <UART_SetConfig+0x4e4>)
 8007ede:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee2:	095b      	lsrs	r3, r3, #5
 8007ee4:	f003 020f 	and.w	r2, r3, #15
 8007ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4422      	add	r2, r4
 8007ef0:	609a      	str	r2, [r3, #8]
}
 8007ef2:	bf00      	nop
 8007ef4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007efe:	bf00      	nop
 8007f00:	51eb851f 	.word	0x51eb851f

08007f04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f04:	b084      	sub	sp, #16
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b084      	sub	sp, #16
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
 8007f0e:	f107 001c 	add.w	r0, r7, #28
 8007f12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d122      	bne.n	8007f62 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d105      	bne.n	8007f56 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f9c0 	bl	80082dc <USB_CoreReset>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	73fb      	strb	r3, [r7, #15]
 8007f60:	e01a      	b.n	8007f98 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f9b4 	bl	80082dc <USB_CoreReset>
 8007f74:	4603      	mov	r3, r0
 8007f76:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d106      	bne.n	8007f8c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	639a      	str	r2, [r3, #56]	; 0x38
 8007f8a:	e005      	b.n	8007f98 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d10b      	bne.n	8007fb6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	f043 0206 	orr.w	r2, r3, #6
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f043 0220 	orr.w	r2, r3, #32
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007fc2:	b004      	add	sp, #16
 8007fc4:	4770      	bx	lr

08007fc6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b083      	sub	sp, #12
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	f043 0201 	orr.w	r2, r3, #1
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	f023 0201 	bic.w	r2, r3, #1
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	370c      	adds	r7, #12
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b084      	sub	sp, #16
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
 8008012:	460b      	mov	r3, r1
 8008014:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008016:	2300      	movs	r3, #0
 8008018:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008026:	78fb      	ldrb	r3, [r7, #3]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d115      	bne.n	8008058 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008038:	2001      	movs	r0, #1
 800803a:	f7fb ff6b 	bl	8003f14 <HAL_Delay>
      ms++;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	3301      	adds	r3, #1
 8008042:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 f93a 	bl	80082be <USB_GetMode>
 800804a:	4603      	mov	r3, r0
 800804c:	2b01      	cmp	r3, #1
 800804e:	d01e      	beq.n	800808e <USB_SetCurrentMode+0x84>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2b31      	cmp	r3, #49	; 0x31
 8008054:	d9f0      	bls.n	8008038 <USB_SetCurrentMode+0x2e>
 8008056:	e01a      	b.n	800808e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008058:	78fb      	ldrb	r3, [r7, #3]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d115      	bne.n	800808a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800806a:	2001      	movs	r0, #1
 800806c:	f7fb ff52 	bl	8003f14 <HAL_Delay>
      ms++;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	3301      	adds	r3, #1
 8008074:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f921 	bl	80082be <USB_GetMode>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d005      	beq.n	800808e <USB_SetCurrentMode+0x84>
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2b31      	cmp	r3, #49	; 0x31
 8008086:	d9f0      	bls.n	800806a <USB_SetCurrentMode+0x60>
 8008088:	e001      	b.n	800808e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e005      	b.n	800809a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2b32      	cmp	r3, #50	; 0x32
 8008092:	d101      	bne.n	8008098 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e000      	b.n	800809a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
	...

080080a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b085      	sub	sp, #20
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80080ae:	2300      	movs	r3, #0
 80080b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	3301      	adds	r3, #1
 80080b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	4a13      	ldr	r2, [pc, #76]	; (8008108 <USB_FlushTxFifo+0x64>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d901      	bls.n	80080c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e01b      	b.n	80080fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	daf2      	bge.n	80080b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80080cc:	2300      	movs	r3, #0
 80080ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	019b      	lsls	r3, r3, #6
 80080d4:	f043 0220 	orr.w	r2, r3, #32
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	3301      	adds	r3, #1
 80080e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	4a08      	ldr	r2, [pc, #32]	; (8008108 <USB_FlushTxFifo+0x64>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d901      	bls.n	80080ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80080ea:	2303      	movs	r3, #3
 80080ec:	e006      	b.n	80080fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	f003 0320 	and.w	r3, r3, #32
 80080f6:	2b20      	cmp	r3, #32
 80080f8:	d0f0      	beq.n	80080dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3714      	adds	r7, #20
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr
 8008108:	00030d40 	.word	0x00030d40

0800810c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008114:	2300      	movs	r3, #0
 8008116:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	3301      	adds	r3, #1
 800811c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	4a11      	ldr	r2, [pc, #68]	; (8008168 <USB_FlushRxFifo+0x5c>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d901      	bls.n	800812a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e018      	b.n	800815c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	2b00      	cmp	r3, #0
 8008130:	daf2      	bge.n	8008118 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008132:	2300      	movs	r3, #0
 8008134:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2210      	movs	r2, #16
 800813a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	3301      	adds	r3, #1
 8008140:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	4a08      	ldr	r2, [pc, #32]	; (8008168 <USB_FlushRxFifo+0x5c>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d901      	bls.n	800814e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800814a:	2303      	movs	r3, #3
 800814c:	e006      	b.n	800815c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	f003 0310 	and.w	r3, r3, #16
 8008156:	2b10      	cmp	r3, #16
 8008158:	d0f0      	beq.n	800813c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3714      	adds	r7, #20
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr
 8008168:	00030d40 	.word	0x00030d40

0800816c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800816c:	b480      	push	{r7}
 800816e:	b089      	sub	sp, #36	; 0x24
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	4611      	mov	r1, r2
 8008178:	461a      	mov	r2, r3
 800817a:	460b      	mov	r3, r1
 800817c:	71fb      	strb	r3, [r7, #7]
 800817e:	4613      	mov	r3, r2
 8008180:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800818a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800818e:	2b00      	cmp	r3, #0
 8008190:	d123      	bne.n	80081da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008192:	88bb      	ldrh	r3, [r7, #4]
 8008194:	3303      	adds	r3, #3
 8008196:	089b      	lsrs	r3, r3, #2
 8008198:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800819a:	2300      	movs	r3, #0
 800819c:	61bb      	str	r3, [r7, #24]
 800819e:	e018      	b.n	80081d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80081a0:	79fb      	ldrb	r3, [r7, #7]
 80081a2:	031a      	lsls	r2, r3, #12
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	4413      	add	r3, r2
 80081a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081ac:	461a      	mov	r2, r3
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	3301      	adds	r3, #1
 80081b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	3301      	adds	r3, #1
 80081be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	3301      	adds	r3, #1
 80081c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	3301      	adds	r3, #1
 80081ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	3301      	adds	r3, #1
 80081d0:	61bb      	str	r3, [r7, #24]
 80081d2:	69ba      	ldr	r2, [r7, #24]
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d3e2      	bcc.n	80081a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3724      	adds	r7, #36	; 0x24
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b08b      	sub	sp, #44	; 0x2c
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	4613      	mov	r3, r2
 80081f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80081fe:	88fb      	ldrh	r3, [r7, #6]
 8008200:	089b      	lsrs	r3, r3, #2
 8008202:	b29b      	uxth	r3, r3
 8008204:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008206:	88fb      	ldrh	r3, [r7, #6]
 8008208:	f003 0303 	and.w	r3, r3, #3
 800820c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800820e:	2300      	movs	r3, #0
 8008210:	623b      	str	r3, [r7, #32]
 8008212:	e014      	b.n	800823e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008222:	3301      	adds	r3, #1
 8008224:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008228:	3301      	adds	r3, #1
 800822a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800822c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822e:	3301      	adds	r3, #1
 8008230:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008234:	3301      	adds	r3, #1
 8008236:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008238:	6a3b      	ldr	r3, [r7, #32]
 800823a:	3301      	adds	r3, #1
 800823c:	623b      	str	r3, [r7, #32]
 800823e:	6a3a      	ldr	r2, [r7, #32]
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	429a      	cmp	r2, r3
 8008244:	d3e6      	bcc.n	8008214 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008246:	8bfb      	ldrh	r3, [r7, #30]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d01e      	beq.n	800828a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800824c:	2300      	movs	r3, #0
 800824e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008256:	461a      	mov	r2, r3
 8008258:	f107 0310 	add.w	r3, r7, #16
 800825c:	6812      	ldr	r2, [r2, #0]
 800825e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008260:	693a      	ldr	r2, [r7, #16]
 8008262:	6a3b      	ldr	r3, [r7, #32]
 8008264:	b2db      	uxtb	r3, r3
 8008266:	00db      	lsls	r3, r3, #3
 8008268:	fa22 f303 	lsr.w	r3, r2, r3
 800826c:	b2da      	uxtb	r2, r3
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	701a      	strb	r2, [r3, #0]
      i++;
 8008272:	6a3b      	ldr	r3, [r7, #32]
 8008274:	3301      	adds	r3, #1
 8008276:	623b      	str	r3, [r7, #32]
      pDest++;
 8008278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827a:	3301      	adds	r3, #1
 800827c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800827e:	8bfb      	ldrh	r3, [r7, #30]
 8008280:	3b01      	subs	r3, #1
 8008282:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008284:	8bfb      	ldrh	r3, [r7, #30]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1ea      	bne.n	8008260 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800828a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800828c:	4618      	mov	r0, r3
 800828e:	372c      	adds	r7, #44	; 0x2c
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	695b      	ldr	r3, [r3, #20]
 80082a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	4013      	ands	r3, r2
 80082ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80082b0:	68fb      	ldr	r3, [r7, #12]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80082be:	b480      	push	{r7}
 80082c0:	b083      	sub	sp, #12
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	695b      	ldr	r3, [r3, #20]
 80082ca:	f003 0301 	and.w	r3, r3, #1
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	370c      	adds	r7, #12
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
	...

080082dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082e4:	2300      	movs	r3, #0
 80082e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	3301      	adds	r3, #1
 80082ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	4a13      	ldr	r2, [pc, #76]	; (8008340 <USB_CoreReset+0x64>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d901      	bls.n	80082fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80082f6:	2303      	movs	r3, #3
 80082f8:	e01b      	b.n	8008332 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	daf2      	bge.n	80082e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008302:	2300      	movs	r3, #0
 8008304:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	f043 0201 	orr.w	r2, r3, #1
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	3301      	adds	r3, #1
 8008316:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	4a09      	ldr	r2, [pc, #36]	; (8008340 <USB_CoreReset+0x64>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d901      	bls.n	8008324 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008320:	2303      	movs	r3, #3
 8008322:	e006      	b.n	8008332 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	f003 0301 	and.w	r3, r3, #1
 800832c:	2b01      	cmp	r3, #1
 800832e:	d0f0      	beq.n	8008312 <USB_CoreReset+0x36>

  return HAL_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3714      	adds	r7, #20
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop
 8008340:	00030d40 	.word	0x00030d40

08008344 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008344:	b084      	sub	sp, #16
 8008346:	b580      	push	{r7, lr}
 8008348:	b086      	sub	sp, #24
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008352:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008356:	2300      	movs	r3, #0
 8008358:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008364:	461a      	mov	r2, r3
 8008366:	2300      	movs	r3, #0
 8008368:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800836e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008386:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008396:	2b00      	cmp	r3, #0
 8008398:	d018      	beq.n	80083cc <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800839a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839c:	2b01      	cmp	r3, #1
 800839e:	d10a      	bne.n	80083b6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80083ae:	f043 0304 	orr.w	r3, r3, #4
 80083b2:	6013      	str	r3, [r2, #0]
 80083b4:	e014      	b.n	80083e0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80083c4:	f023 0304 	bic.w	r3, r3, #4
 80083c8:	6013      	str	r3, [r2, #0]
 80083ca:	e009      	b.n	80083e0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80083da:	f023 0304 	bic.w	r3, r3, #4
 80083de:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80083e0:	2110      	movs	r1, #16
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7ff fe5e 	bl	80080a4 <USB_FlushTxFifo>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d001      	beq.n	80083f2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f7ff fe8a 	bl	800810c <USB_FlushRxFifo>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008402:	2300      	movs	r3, #0
 8008404:	613b      	str	r3, [r7, #16]
 8008406:	e015      	b.n	8008434 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	015a      	lsls	r2, r3, #5
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	4413      	add	r3, r2
 8008410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008414:	461a      	mov	r2, r3
 8008416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800841a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	015a      	lsls	r2, r3, #5
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	4413      	add	r3, r2
 8008424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008428:	461a      	mov	r2, r3
 800842a:	2300      	movs	r3, #0
 800842c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	3301      	adds	r3, #1
 8008432:	613b      	str	r3, [r7, #16]
 8008434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008436:	693a      	ldr	r2, [r7, #16]
 8008438:	429a      	cmp	r2, r3
 800843a:	d3e5      	bcc.n	8008408 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008448:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800844e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00b      	beq.n	800846e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f44f 7200 	mov.w	r2, #512	; 0x200
 800845c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a13      	ldr	r2, [pc, #76]	; (80084b0 <USB_HostInit+0x16c>)
 8008462:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a13      	ldr	r2, [pc, #76]	; (80084b4 <USB_HostInit+0x170>)
 8008468:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800846c:	e009      	b.n	8008482 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2280      	movs	r2, #128	; 0x80
 8008472:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a10      	ldr	r2, [pc, #64]	; (80084b8 <USB_HostInit+0x174>)
 8008478:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4a0f      	ldr	r2, [pc, #60]	; (80084bc <USB_HostInit+0x178>)
 800847e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008484:	2b00      	cmp	r3, #0
 8008486:	d105      	bne.n	8008494 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	699b      	ldr	r3, [r3, #24]
 800848c:	f043 0210 	orr.w	r2, r3, #16
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	699a      	ldr	r2, [r3, #24]
 8008498:	4b09      	ldr	r3, [pc, #36]	; (80084c0 <USB_HostInit+0x17c>)
 800849a:	4313      	orrs	r3, r2
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80084a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3718      	adds	r7, #24
 80084a6:	46bd      	mov	sp, r7
 80084a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80084ac:	b004      	add	sp, #16
 80084ae:	4770      	bx	lr
 80084b0:	01000200 	.word	0x01000200
 80084b4:	00e00300 	.word	0x00e00300
 80084b8:	00600080 	.word	0x00600080
 80084bc:	004000e0 	.word	0x004000e0
 80084c0:	a3200008 	.word	0xa3200008

080084c4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	460b      	mov	r3, r1
 80084ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80084e2:	f023 0303 	bic.w	r3, r3, #3
 80084e6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	78fb      	ldrb	r3, [r7, #3]
 80084f2:	f003 0303 	and.w	r3, r3, #3
 80084f6:	68f9      	ldr	r1, [r7, #12]
 80084f8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80084fc:	4313      	orrs	r3, r2
 80084fe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008500:	78fb      	ldrb	r3, [r7, #3]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d107      	bne.n	8008516 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800850c:	461a      	mov	r2, r3
 800850e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008512:	6053      	str	r3, [r2, #4]
 8008514:	e009      	b.n	800852a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008516:	78fb      	ldrb	r3, [r7, #3]
 8008518:	2b02      	cmp	r3, #2
 800851a:	d106      	bne.n	800852a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008522:	461a      	mov	r2, r3
 8008524:	f241 7370 	movw	r3, #6000	; 0x1770
 8008528:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3714      	adds	r7, #20
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008544:	2300      	movs	r3, #0
 8008546:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008558:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008566:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008568:	2064      	movs	r0, #100	; 0x64
 800856a:	f7fb fcd3 	bl	8003f14 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008576:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800857a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800857c:	200a      	movs	r0, #10
 800857e:	f7fb fcc9 	bl	8003f14 <HAL_Delay>

  return HAL_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	460b      	mov	r3, r1
 8008596:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800859c:	2300      	movs	r3, #0
 800859e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80085b0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d109      	bne.n	80085d0 <USB_DriveVbus+0x44>
 80085bc:	78fb      	ldrb	r3, [r7, #3]
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d106      	bne.n	80085d0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80085ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80085ce:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80085d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085da:	d109      	bne.n	80085f0 <USB_DriveVbus+0x64>
 80085dc:	78fb      	ldrb	r3, [r7, #3]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d106      	bne.n	80085f0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80085ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085ee:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3714      	adds	r7, #20
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80085fe:	b480      	push	{r7}
 8008600:	b085      	sub	sp, #20
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800860a:	2300      	movs	r3, #0
 800860c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	0c5b      	lsrs	r3, r3, #17
 800861c:	f003 0303 	and.w	r3, r3, #3
}
 8008620:	4618      	mov	r0, r3
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800862c:	b480      	push	{r7}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	b29b      	uxth	r3, r3
}
 8008642:	4618      	mov	r0, r3
 8008644:	3714      	adds	r7, #20
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr
	...

08008650 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b088      	sub	sp, #32
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	4608      	mov	r0, r1
 800865a:	4611      	mov	r1, r2
 800865c:	461a      	mov	r2, r3
 800865e:	4603      	mov	r3, r0
 8008660:	70fb      	strb	r3, [r7, #3]
 8008662:	460b      	mov	r3, r1
 8008664:	70bb      	strb	r3, [r7, #2]
 8008666:	4613      	mov	r3, r2
 8008668:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008672:	78fb      	ldrb	r3, [r7, #3]
 8008674:	015a      	lsls	r2, r3, #5
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	4413      	add	r3, r2
 800867a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800867e:	461a      	mov	r2, r3
 8008680:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008684:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008686:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800868a:	2b03      	cmp	r3, #3
 800868c:	d87e      	bhi.n	800878c <USB_HC_Init+0x13c>
 800868e:	a201      	add	r2, pc, #4	; (adr r2, 8008694 <USB_HC_Init+0x44>)
 8008690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008694:	080086a5 	.word	0x080086a5
 8008698:	0800874f 	.word	0x0800874f
 800869c:	080086a5 	.word	0x080086a5
 80086a0:	08008711 	.word	0x08008711
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80086a4:	78fb      	ldrb	r3, [r7, #3]
 80086a6:	015a      	lsls	r2, r3, #5
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	4413      	add	r3, r2
 80086ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086b0:	461a      	mov	r2, r3
 80086b2:	f240 439d 	movw	r3, #1181	; 0x49d
 80086b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80086b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	da10      	bge.n	80086e2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80086c0:	78fb      	ldrb	r3, [r7, #3]
 80086c2:	015a      	lsls	r2, r3, #5
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	4413      	add	r3, r2
 80086c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	78fa      	ldrb	r2, [r7, #3]
 80086d0:	0151      	lsls	r1, r2, #5
 80086d2:	693a      	ldr	r2, [r7, #16]
 80086d4:	440a      	add	r2, r1
 80086d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086de:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80086e0:	e057      	b.n	8008792 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d051      	beq.n	8008792 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80086ee:	78fb      	ldrb	r3, [r7, #3]
 80086f0:	015a      	lsls	r2, r3, #5
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	4413      	add	r3, r2
 80086f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	78fa      	ldrb	r2, [r7, #3]
 80086fe:	0151      	lsls	r1, r2, #5
 8008700:	693a      	ldr	r2, [r7, #16]
 8008702:	440a      	add	r2, r1
 8008704:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008708:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800870c:	60d3      	str	r3, [r2, #12]
      break;
 800870e:	e040      	b.n	8008792 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008710:	78fb      	ldrb	r3, [r7, #3]
 8008712:	015a      	lsls	r2, r3, #5
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	4413      	add	r3, r2
 8008718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800871c:	461a      	mov	r2, r3
 800871e:	f240 639d 	movw	r3, #1693	; 0x69d
 8008722:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008724:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008728:	2b00      	cmp	r3, #0
 800872a:	da34      	bge.n	8008796 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800872c:	78fb      	ldrb	r3, [r7, #3]
 800872e:	015a      	lsls	r2, r3, #5
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	4413      	add	r3, r2
 8008734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	78fa      	ldrb	r2, [r7, #3]
 800873c:	0151      	lsls	r1, r2, #5
 800873e:	693a      	ldr	r2, [r7, #16]
 8008740:	440a      	add	r2, r1
 8008742:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800874a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800874c:	e023      	b.n	8008796 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800874e:	78fb      	ldrb	r3, [r7, #3]
 8008750:	015a      	lsls	r2, r3, #5
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	4413      	add	r3, r2
 8008756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800875a:	461a      	mov	r2, r3
 800875c:	f240 2325 	movw	r3, #549	; 0x225
 8008760:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008762:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008766:	2b00      	cmp	r3, #0
 8008768:	da17      	bge.n	800879a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800876a:	78fb      	ldrb	r3, [r7, #3]
 800876c:	015a      	lsls	r2, r3, #5
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	4413      	add	r3, r2
 8008772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	78fa      	ldrb	r2, [r7, #3]
 800877a:	0151      	lsls	r1, r2, #5
 800877c:	693a      	ldr	r2, [r7, #16]
 800877e:	440a      	add	r2, r1
 8008780:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008784:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008788:	60d3      	str	r3, [r2, #12]
      }
      break;
 800878a:	e006      	b.n	800879a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	77fb      	strb	r3, [r7, #31]
      break;
 8008790:	e004      	b.n	800879c <USB_HC_Init+0x14c>
      break;
 8008792:	bf00      	nop
 8008794:	e002      	b.n	800879c <USB_HC_Init+0x14c>
      break;
 8008796:	bf00      	nop
 8008798:	e000      	b.n	800879c <USB_HC_Init+0x14c>
      break;
 800879a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800879c:	78fb      	ldrb	r3, [r7, #3]
 800879e:	015a      	lsls	r2, r3, #5
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	4413      	add	r3, r2
 80087a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	78fa      	ldrb	r2, [r7, #3]
 80087ac:	0151      	lsls	r1, r2, #5
 80087ae:	693a      	ldr	r2, [r7, #16]
 80087b0:	440a      	add	r2, r1
 80087b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087b6:	f043 0302 	orr.w	r3, r3, #2
 80087ba:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087c2:	699a      	ldr	r2, [r3, #24]
 80087c4:	78fb      	ldrb	r3, [r7, #3]
 80087c6:	f003 030f 	and.w	r3, r3, #15
 80087ca:	2101      	movs	r1, #1
 80087cc:	fa01 f303 	lsl.w	r3, r1, r3
 80087d0:	6939      	ldr	r1, [r7, #16]
 80087d2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80087d6:	4313      	orrs	r3, r2
 80087d8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	699b      	ldr	r3, [r3, #24]
 80087de:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80087e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	da03      	bge.n	80087f6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80087ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087f2:	61bb      	str	r3, [r7, #24]
 80087f4:	e001      	b.n	80087fa <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80087f6:	2300      	movs	r3, #0
 80087f8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f7ff feff 	bl	80085fe <USB_GetHostSpeed>
 8008800:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008802:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008806:	2b02      	cmp	r3, #2
 8008808:	d106      	bne.n	8008818 <USB_HC_Init+0x1c8>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2b02      	cmp	r3, #2
 800880e:	d003      	beq.n	8008818 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008810:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008814:	617b      	str	r3, [r7, #20]
 8008816:	e001      	b.n	800881c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008818:	2300      	movs	r3, #0
 800881a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800881c:	787b      	ldrb	r3, [r7, #1]
 800881e:	059b      	lsls	r3, r3, #22
 8008820:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008824:	78bb      	ldrb	r3, [r7, #2]
 8008826:	02db      	lsls	r3, r3, #11
 8008828:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800882c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800882e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008832:	049b      	lsls	r3, r3, #18
 8008834:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008838:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800883a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800883c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008840:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008846:	78fb      	ldrb	r3, [r7, #3]
 8008848:	0159      	lsls	r1, r3, #5
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	440b      	add	r3, r1
 800884e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008852:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008858:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800885a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800885e:	2b03      	cmp	r3, #3
 8008860:	d003      	beq.n	800886a <USB_HC_Init+0x21a>
 8008862:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008866:	2b01      	cmp	r3, #1
 8008868:	d10f      	bne.n	800888a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800886a:	78fb      	ldrb	r3, [r7, #3]
 800886c:	015a      	lsls	r2, r3, #5
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	4413      	add	r3, r2
 8008872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	78fa      	ldrb	r2, [r7, #3]
 800887a:	0151      	lsls	r1, r2, #5
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	440a      	add	r2, r1
 8008880:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008884:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008888:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800888a:	7ffb      	ldrb	r3, [r7, #31]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3720      	adds	r7, #32
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b08c      	sub	sp, #48	; 0x30
 8008898:	af02      	add	r7, sp, #8
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	4613      	mov	r3, r2
 80088a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	785b      	ldrb	r3, [r3, #1]
 80088aa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80088ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088b0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d02d      	beq.n	800891a <USB_HC_StartXfer+0x86>
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	791b      	ldrb	r3, [r3, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d129      	bne.n	800891a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80088c6:	79fb      	ldrb	r3, [r7, #7]
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d117      	bne.n	80088fc <USB_HC_StartXfer+0x68>
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	79db      	ldrb	r3, [r3, #7]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d003      	beq.n	80088dc <USB_HC_StartXfer+0x48>
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	79db      	ldrb	r3, [r3, #7]
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d10f      	bne.n	80088fc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	015a      	lsls	r2, r3, #5
 80088e0:	6a3b      	ldr	r3, [r7, #32]
 80088e2:	4413      	add	r3, r2
 80088e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	69fa      	ldr	r2, [r7, #28]
 80088ec:	0151      	lsls	r1, r2, #5
 80088ee:	6a3a      	ldr	r2, [r7, #32]
 80088f0:	440a      	add	r2, r1
 80088f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088fa:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80088fc:	79fb      	ldrb	r3, [r7, #7]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10b      	bne.n	800891a <USB_HC_StartXfer+0x86>
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	795b      	ldrb	r3, [r3, #5]
 8008906:	2b01      	cmp	r3, #1
 8008908:	d107      	bne.n	800891a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	785b      	ldrb	r3, [r3, #1]
 800890e:	4619      	mov	r1, r3
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f000 fa0f 	bl	8008d34 <USB_DoPing>
      return HAL_OK;
 8008916:	2300      	movs	r3, #0
 8008918:	e0f8      	b.n	8008b0c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	695b      	ldr	r3, [r3, #20]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d018      	beq.n	8008954 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	695b      	ldr	r3, [r3, #20]
 8008926:	68ba      	ldr	r2, [r7, #8]
 8008928:	8912      	ldrh	r2, [r2, #8]
 800892a:	4413      	add	r3, r2
 800892c:	3b01      	subs	r3, #1
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	8912      	ldrh	r2, [r2, #8]
 8008932:	fbb3 f3f2 	udiv	r3, r3, r2
 8008936:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008938:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800893a:	8b7b      	ldrh	r3, [r7, #26]
 800893c:	429a      	cmp	r2, r3
 800893e:	d90b      	bls.n	8008958 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008940:	8b7b      	ldrh	r3, [r7, #26]
 8008942:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008944:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008946:	68ba      	ldr	r2, [r7, #8]
 8008948:	8912      	ldrh	r2, [r2, #8]
 800894a:	fb03 f202 	mul.w	r2, r3, r2
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	611a      	str	r2, [r3, #16]
 8008952:	e001      	b.n	8008958 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008954:	2301      	movs	r3, #1
 8008956:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	78db      	ldrb	r3, [r3, #3]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d007      	beq.n	8008970 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008960:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008962:	68ba      	ldr	r2, [r7, #8]
 8008964:	8912      	ldrh	r2, [r2, #8]
 8008966:	fb03 f202 	mul.w	r2, r3, r2
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	611a      	str	r2, [r3, #16]
 800896e:	e003      	b.n	8008978 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	695a      	ldr	r2, [r3, #20]
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008980:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008982:	04d9      	lsls	r1, r3, #19
 8008984:	4b63      	ldr	r3, [pc, #396]	; (8008b14 <USB_HC_StartXfer+0x280>)
 8008986:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008988:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	7a9b      	ldrb	r3, [r3, #10]
 800898e:	075b      	lsls	r3, r3, #29
 8008990:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008994:	69f9      	ldr	r1, [r7, #28]
 8008996:	0148      	lsls	r0, r1, #5
 8008998:	6a39      	ldr	r1, [r7, #32]
 800899a:	4401      	add	r1, r0
 800899c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80089a0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80089a2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80089a4:	79fb      	ldrb	r3, [r7, #7]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d009      	beq.n	80089be <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	68d9      	ldr	r1, [r3, #12]
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	015a      	lsls	r2, r3, #5
 80089b2:	6a3b      	ldr	r3, [r7, #32]
 80089b4:	4413      	add	r3, r2
 80089b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ba:	460a      	mov	r2, r1
 80089bc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80089be:	6a3b      	ldr	r3, [r7, #32]
 80089c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	f003 0301 	and.w	r3, r3, #1
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	bf0c      	ite	eq
 80089ce:	2301      	moveq	r3, #1
 80089d0:	2300      	movne	r3, #0
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	015a      	lsls	r2, r3, #5
 80089da:	6a3b      	ldr	r3, [r7, #32]
 80089dc:	4413      	add	r3, r2
 80089de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	69fa      	ldr	r2, [r7, #28]
 80089e6:	0151      	lsls	r1, r2, #5
 80089e8:	6a3a      	ldr	r2, [r7, #32]
 80089ea:	440a      	add	r2, r1
 80089ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80089f4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	015a      	lsls	r2, r3, #5
 80089fa:	6a3b      	ldr	r3, [r7, #32]
 80089fc:	4413      	add	r3, r2
 80089fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	7e7b      	ldrb	r3, [r7, #25]
 8008a06:	075b      	lsls	r3, r3, #29
 8008a08:	69f9      	ldr	r1, [r7, #28]
 8008a0a:	0148      	lsls	r0, r1, #5
 8008a0c:	6a39      	ldr	r1, [r7, #32]
 8008a0e:	4401      	add	r1, r0
 8008a10:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008a14:	4313      	orrs	r3, r2
 8008a16:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	015a      	lsls	r2, r3, #5
 8008a1c:	6a3b      	ldr	r3, [r7, #32]
 8008a1e:	4413      	add	r3, r2
 8008a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008a2e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	78db      	ldrb	r3, [r3, #3]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d004      	beq.n	8008a42 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a3e:	613b      	str	r3, [r7, #16]
 8008a40:	e003      	b.n	8008a4a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a48:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a50:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	015a      	lsls	r2, r3, #5
 8008a56:	6a3b      	ldr	r3, [r7, #32]
 8008a58:	4413      	add	r3, r2
 8008a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a5e:	461a      	mov	r2, r3
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008a64:	79fb      	ldrb	r3, [r7, #7]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d001      	beq.n	8008a6e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	e04e      	b.n	8008b0c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	78db      	ldrb	r3, [r3, #3]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d149      	bne.n	8008b0a <USB_HC_StartXfer+0x276>
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d045      	beq.n	8008b0a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	79db      	ldrb	r3, [r3, #7]
 8008a82:	2b03      	cmp	r3, #3
 8008a84:	d830      	bhi.n	8008ae8 <USB_HC_StartXfer+0x254>
 8008a86:	a201      	add	r2, pc, #4	; (adr r2, 8008a8c <USB_HC_StartXfer+0x1f8>)
 8008a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a8c:	08008a9d 	.word	0x08008a9d
 8008a90:	08008ac1 	.word	0x08008ac1
 8008a94:	08008a9d 	.word	0x08008a9d
 8008a98:	08008ac1 	.word	0x08008ac1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	695b      	ldr	r3, [r3, #20]
 8008aa0:	3303      	adds	r3, #3
 8008aa2:	089b      	lsrs	r3, r3, #2
 8008aa4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008aa6:	8afa      	ldrh	r2, [r7, #22]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d91c      	bls.n	8008aec <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	699b      	ldr	r3, [r3, #24]
 8008ab6:	f043 0220 	orr.w	r2, r3, #32
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	619a      	str	r2, [r3, #24]
        }
        break;
 8008abe:	e015      	b.n	8008aec <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	695b      	ldr	r3, [r3, #20]
 8008ac4:	3303      	adds	r3, #3
 8008ac6:	089b      	lsrs	r3, r3, #2
 8008ac8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008aca:	8afa      	ldrh	r2, [r7, #22]
 8008acc:	6a3b      	ldr	r3, [r7, #32]
 8008ace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d90a      	bls.n	8008af0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	699b      	ldr	r3, [r3, #24]
 8008ade:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	619a      	str	r2, [r3, #24]
        }
        break;
 8008ae6:	e003      	b.n	8008af0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008ae8:	bf00      	nop
 8008aea:	e002      	b.n	8008af2 <USB_HC_StartXfer+0x25e>
        break;
 8008aec:	bf00      	nop
 8008aee:	e000      	b.n	8008af2 <USB_HC_StartXfer+0x25e>
        break;
 8008af0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	68d9      	ldr	r1, [r3, #12]
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	785a      	ldrb	r2, [r3, #1]
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	695b      	ldr	r3, [r3, #20]
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	2000      	movs	r0, #0
 8008b02:	9000      	str	r0, [sp, #0]
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f7ff fb31 	bl	800816c <USB_WritePacket>
  }

  return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3728      	adds	r7, #40	; 0x28
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}
 8008b14:	1ff80000 	.word	0x1ff80000

08008b18 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b085      	sub	sp, #20
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b2a:	695b      	ldr	r3, [r3, #20]
 8008b2c:	b29b      	uxth	r3, r3
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3714      	adds	r7, #20
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr

08008b3a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008b3a:	b480      	push	{r7}
 8008b3c:	b089      	sub	sp, #36	; 0x24
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
 8008b42:	460b      	mov	r3, r1
 8008b44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008b4a:	78fb      	ldrb	r3, [r7, #3]
 8008b4c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	015a      	lsls	r2, r3, #5
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	0c9b      	lsrs	r3, r3, #18
 8008b62:	f003 0303 	and.w	r3, r3, #3
 8008b66:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	015a      	lsls	r2, r3, #5
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	4413      	add	r3, r2
 8008b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	0fdb      	lsrs	r3, r3, #31
 8008b78:	f003 0301 	and.w	r3, r3, #1
 8008b7c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	f003 0320 	and.w	r3, r3, #32
 8008b86:	2b20      	cmp	r3, #32
 8008b88:	d104      	bne.n	8008b94 <USB_HC_Halt+0x5a>
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d101      	bne.n	8008b94 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	e0c8      	b.n	8008d26 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d002      	beq.n	8008ba0 <USB_HC_Halt+0x66>
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d163      	bne.n	8008c68 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	015a      	lsls	r2, r3, #5
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	69ba      	ldr	r2, [r7, #24]
 8008bb0:	0151      	lsls	r1, r2, #5
 8008bb2:	69fa      	ldr	r2, [r7, #28]
 8008bb4:	440a      	add	r2, r1
 8008bb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bbe:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	f003 0320 	and.w	r3, r3, #32
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f040 80ab 	bne.w	8008d24 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d133      	bne.n	8008c42 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	015a      	lsls	r2, r3, #5
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	4413      	add	r3, r2
 8008be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	69ba      	ldr	r2, [r7, #24]
 8008bea:	0151      	lsls	r1, r2, #5
 8008bec:	69fa      	ldr	r2, [r7, #28]
 8008bee:	440a      	add	r2, r1
 8008bf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008bf8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	015a      	lsls	r2, r3, #5
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	4413      	add	r3, r2
 8008c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	69ba      	ldr	r2, [r7, #24]
 8008c0a:	0151      	lsls	r1, r2, #5
 8008c0c:	69fa      	ldr	r2, [r7, #28]
 8008c0e:	440a      	add	r2, r1
 8008c10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c18:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c26:	d81d      	bhi.n	8008c64 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	015a      	lsls	r2, r3, #5
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	4413      	add	r3, r2
 8008c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c3e:	d0ec      	beq.n	8008c1a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c40:	e070      	b.n	8008d24 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	015a      	lsls	r2, r3, #5
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	4413      	add	r3, r2
 8008c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	69ba      	ldr	r2, [r7, #24]
 8008c52:	0151      	lsls	r1, r2, #5
 8008c54:	69fa      	ldr	r2, [r7, #28]
 8008c56:	440a      	add	r2, r1
 8008c58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c60:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c62:	e05f      	b.n	8008d24 <USB_HC_Halt+0x1ea>
            break;
 8008c64:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c66:	e05d      	b.n	8008d24 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	015a      	lsls	r2, r3, #5
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	4413      	add	r3, r2
 8008c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	69ba      	ldr	r2, [r7, #24]
 8008c78:	0151      	lsls	r1, r2, #5
 8008c7a:	69fa      	ldr	r2, [r7, #28]
 8008c7c:	440a      	add	r2, r1
 8008c7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c86:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d133      	bne.n	8008d00 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	015a      	lsls	r2, r3, #5
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	69ba      	ldr	r2, [r7, #24]
 8008ca8:	0151      	lsls	r1, r2, #5
 8008caa:	69fa      	ldr	r2, [r7, #28]
 8008cac:	440a      	add	r2, r1
 8008cae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008cb6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	015a      	lsls	r2, r3, #5
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	69ba      	ldr	r2, [r7, #24]
 8008cc8:	0151      	lsls	r1, r2, #5
 8008cca:	69fa      	ldr	r2, [r7, #28]
 8008ccc:	440a      	add	r2, r1
 8008cce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008cd6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ce4:	d81d      	bhi.n	8008d22 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	015a      	lsls	r2, r3, #5
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	4413      	add	r3, r2
 8008cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cfc:	d0ec      	beq.n	8008cd8 <USB_HC_Halt+0x19e>
 8008cfe:	e011      	b.n	8008d24 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	015a      	lsls	r2, r3, #5
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	4413      	add	r3, r2
 8008d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	69ba      	ldr	r2, [r7, #24]
 8008d10:	0151      	lsls	r1, r2, #5
 8008d12:	69fa      	ldr	r2, [r7, #28]
 8008d14:	440a      	add	r2, r1
 8008d16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d1e:	6013      	str	r3, [r2, #0]
 8008d20:	e000      	b.n	8008d24 <USB_HC_Halt+0x1ea>
          break;
 8008d22:	bf00      	nop
    }
  }

  return HAL_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3724      	adds	r7, #36	; 0x24
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
	...

08008d34 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b087      	sub	sp, #28
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008d44:	78fb      	ldrb	r3, [r7, #3]
 8008d46:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	04da      	lsls	r2, r3, #19
 8008d50:	4b15      	ldr	r3, [pc, #84]	; (8008da8 <USB_DoPing+0x74>)
 8008d52:	4013      	ands	r3, r2
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	0151      	lsls	r1, r2, #5
 8008d58:	697a      	ldr	r2, [r7, #20]
 8008d5a:	440a      	add	r2, r1
 8008d5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d64:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	015a      	lsls	r2, r3, #5
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008d7c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d84:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	015a      	lsls	r2, r3, #5
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d92:	461a      	mov	r2, r3
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	371c      	adds	r7, #28
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	1ff80000 	.word	0x1ff80000

08008dac <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b088      	sub	sp, #32
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008db4:	2300      	movs	r3, #0
 8008db6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f7ff f911 	bl	8007fe8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008dc6:	2110      	movs	r1, #16
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f7ff f96b 	bl	80080a4 <USB_FlushTxFifo>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d001      	beq.n	8008dd8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f7ff f997 	bl	800810c <USB_FlushRxFifo>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d001      	beq.n	8008de8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008de8:	2300      	movs	r3, #0
 8008dea:	61bb      	str	r3, [r7, #24]
 8008dec:	e01f      	b.n	8008e2e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	015a      	lsls	r2, r3, #5
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	4413      	add	r3, r2
 8008df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e04:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e0c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e14:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	015a      	lsls	r2, r3, #5
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e22:	461a      	mov	r2, r3
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	61bb      	str	r3, [r7, #24]
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	2b0f      	cmp	r3, #15
 8008e32:	d9dc      	bls.n	8008dee <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008e34:	2300      	movs	r3, #0
 8008e36:	61bb      	str	r3, [r7, #24]
 8008e38:	e034      	b.n	8008ea4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	015a      	lsls	r2, r3, #5
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	4413      	add	r3, r2
 8008e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e50:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e58:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e60:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	015a      	lsls	r2, r3, #5
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	4413      	add	r3, r2
 8008e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e6e:	461a      	mov	r2, r3
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	3301      	adds	r3, #1
 8008e78:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e80:	d80c      	bhi.n	8008e9c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	015a      	lsls	r2, r3, #5
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	4413      	add	r3, r2
 8008e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e98:	d0ec      	beq.n	8008e74 <USB_StopHost+0xc8>
 8008e9a:	e000      	b.n	8008e9e <USB_StopHost+0xf2>
        break;
 8008e9c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	61bb      	str	r3, [r7, #24]
 8008ea4:	69bb      	ldr	r3, [r7, #24]
 8008ea6:	2b0f      	cmp	r3, #15
 8008ea8:	d9c7      	bls.n	8008e3a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008eb6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ebe:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f7ff f880 	bl	8007fc6 <USB_EnableGlobalInt>

  return ret;
 8008ec6:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3720      	adds	r7, #32
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008ed0:	b590      	push	{r4, r7, lr}
 8008ed2:	b089      	sub	sp, #36	; 0x24
 8008ed4:	af04      	add	r7, sp, #16
 8008ed6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008ed8:	2301      	movs	r3, #1
 8008eda:	2202      	movs	r2, #2
 8008edc:	2102      	movs	r1, #2
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 fc66 	bl	80097b0 <USBH_FindInterface>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008ee8:	7bfb      	ldrb	r3, [r7, #15]
 8008eea:	2bff      	cmp	r3, #255	; 0xff
 8008eec:	d002      	beq.n	8008ef4 <USBH_CDC_InterfaceInit+0x24>
 8008eee:	7bfb      	ldrb	r3, [r7, #15]
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d901      	bls.n	8008ef8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008ef4:	2302      	movs	r3, #2
 8008ef6:	e13d      	b.n	8009174 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008ef8:	7bfb      	ldrb	r3, [r7, #15]
 8008efa:	4619      	mov	r1, r3
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 fc3b 	bl	8009778 <USBH_SelectInterface>
 8008f02:	4603      	mov	r3, r0
 8008f04:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008f06:	7bbb      	ldrb	r3, [r7, #14]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d001      	beq.n	8008f10 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	e131      	b.n	8009174 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008f16:	2050      	movs	r0, #80	; 0x50
 8008f18:	f7f8 f898 	bl	800104c <malloc>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f26:	69db      	ldr	r3, [r3, #28]
 8008f28:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d101      	bne.n	8008f34 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008f30:	2302      	movs	r3, #2
 8008f32:	e11f      	b.n	8009174 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008f34:	2250      	movs	r2, #80	; 0x50
 8008f36:	2100      	movs	r1, #0
 8008f38:	68b8      	ldr	r0, [r7, #8]
 8008f3a:	f7f8 f897 	bl	800106c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008f3e:	7bfb      	ldrb	r3, [r7, #15]
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	211a      	movs	r1, #26
 8008f44:	fb01 f303 	mul.w	r3, r1, r3
 8008f48:	4413      	add	r3, r2
 8008f4a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	b25b      	sxtb	r3, r3
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	da15      	bge.n	8008f82 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008f56:	7bfb      	ldrb	r3, [r7, #15]
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	211a      	movs	r1, #26
 8008f5c:	fb01 f303 	mul.w	r3, r1, r3
 8008f60:	4413      	add	r3, r2
 8008f62:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008f66:	781a      	ldrb	r2, [r3, #0]
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	211a      	movs	r1, #26
 8008f72:	fb01 f303 	mul.w	r3, r1, r3
 8008f76:	4413      	add	r3, r2
 8008f78:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008f7c:	881a      	ldrh	r2, [r3, #0]
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	785b      	ldrb	r3, [r3, #1]
 8008f86:	4619      	mov	r1, r3
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f001 ff2c 	bl	800ade6 <USBH_AllocPipe>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	461a      	mov	r2, r3
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	7819      	ldrb	r1, [r3, #0]
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	7858      	ldrb	r0, [r3, #1]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008faa:	68ba      	ldr	r2, [r7, #8]
 8008fac:	8952      	ldrh	r2, [r2, #10]
 8008fae:	9202      	str	r2, [sp, #8]
 8008fb0:	2203      	movs	r2, #3
 8008fb2:	9201      	str	r2, [sp, #4]
 8008fb4:	9300      	str	r3, [sp, #0]
 8008fb6:	4623      	mov	r3, r4
 8008fb8:	4602      	mov	r2, r0
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f001 fee4 	bl	800ad88 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f002 f9f3 	bl	800b3b4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008fce:	2300      	movs	r3, #0
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	210a      	movs	r1, #10
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 fbeb 	bl	80097b0 <USBH_FindInterface>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008fde:	7bfb      	ldrb	r3, [r7, #15]
 8008fe0:	2bff      	cmp	r3, #255	; 0xff
 8008fe2:	d002      	beq.n	8008fea <USBH_CDC_InterfaceInit+0x11a>
 8008fe4:	7bfb      	ldrb	r3, [r7, #15]
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d901      	bls.n	8008fee <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008fea:	2302      	movs	r3, #2
 8008fec:	e0c2      	b.n	8009174 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008fee:	7bfb      	ldrb	r3, [r7, #15]
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	211a      	movs	r1, #26
 8008ff4:	fb01 f303 	mul.w	r3, r1, r3
 8008ff8:	4413      	add	r3, r2
 8008ffa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	b25b      	sxtb	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	da16      	bge.n	8009034 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009006:	7bfb      	ldrb	r3, [r7, #15]
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	211a      	movs	r1, #26
 800900c:	fb01 f303 	mul.w	r3, r1, r3
 8009010:	4413      	add	r3, r2
 8009012:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009016:	781a      	ldrb	r2, [r3, #0]
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800901c:	7bfb      	ldrb	r3, [r7, #15]
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	211a      	movs	r1, #26
 8009022:	fb01 f303 	mul.w	r3, r1, r3
 8009026:	4413      	add	r3, r2
 8009028:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800902c:	881a      	ldrh	r2, [r3, #0]
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	835a      	strh	r2, [r3, #26]
 8009032:	e015      	b.n	8009060 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009034:	7bfb      	ldrb	r3, [r7, #15]
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	211a      	movs	r1, #26
 800903a:	fb01 f303 	mul.w	r3, r1, r3
 800903e:	4413      	add	r3, r2
 8009040:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009044:	781a      	ldrb	r2, [r3, #0]
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800904a:	7bfb      	ldrb	r3, [r7, #15]
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	211a      	movs	r1, #26
 8009050:	fb01 f303 	mul.w	r3, r1, r3
 8009054:	4413      	add	r3, r2
 8009056:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800905a:	881a      	ldrh	r2, [r3, #0]
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009060:	7bfb      	ldrb	r3, [r7, #15]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	211a      	movs	r1, #26
 8009066:	fb01 f303 	mul.w	r3, r1, r3
 800906a:	4413      	add	r3, r2
 800906c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	b25b      	sxtb	r3, r3
 8009074:	2b00      	cmp	r3, #0
 8009076:	da16      	bge.n	80090a6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009078:	7bfb      	ldrb	r3, [r7, #15]
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	211a      	movs	r1, #26
 800907e:	fb01 f303 	mul.w	r3, r1, r3
 8009082:	4413      	add	r3, r2
 8009084:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009088:	781a      	ldrb	r2, [r3, #0]
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800908e:	7bfb      	ldrb	r3, [r7, #15]
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	211a      	movs	r1, #26
 8009094:	fb01 f303 	mul.w	r3, r1, r3
 8009098:	4413      	add	r3, r2
 800909a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800909e:	881a      	ldrh	r2, [r3, #0]
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	835a      	strh	r2, [r3, #26]
 80090a4:	e015      	b.n	80090d2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80090a6:	7bfb      	ldrb	r3, [r7, #15]
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	211a      	movs	r1, #26
 80090ac:	fb01 f303 	mul.w	r3, r1, r3
 80090b0:	4413      	add	r3, r2
 80090b2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80090b6:	781a      	ldrb	r2, [r3, #0]
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80090bc:	7bfb      	ldrb	r3, [r7, #15]
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	211a      	movs	r1, #26
 80090c2:	fb01 f303 	mul.w	r3, r1, r3
 80090c6:	4413      	add	r3, r2
 80090c8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80090cc:	881a      	ldrh	r2, [r3, #0]
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	7b9b      	ldrb	r3, [r3, #14]
 80090d6:	4619      	mov	r1, r3
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f001 fe84 	bl	800ade6 <USBH_AllocPipe>
 80090de:	4603      	mov	r3, r0
 80090e0:	461a      	mov	r2, r3
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	7bdb      	ldrb	r3, [r3, #15]
 80090ea:	4619      	mov	r1, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f001 fe7a 	bl	800ade6 <USBH_AllocPipe>
 80090f2:	4603      	mov	r3, r0
 80090f4:	461a      	mov	r2, r3
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	7b59      	ldrb	r1, [r3, #13]
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	7b98      	ldrb	r0, [r3, #14]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800910e:	68ba      	ldr	r2, [r7, #8]
 8009110:	8b12      	ldrh	r2, [r2, #24]
 8009112:	9202      	str	r2, [sp, #8]
 8009114:	2202      	movs	r2, #2
 8009116:	9201      	str	r2, [sp, #4]
 8009118:	9300      	str	r3, [sp, #0]
 800911a:	4623      	mov	r3, r4
 800911c:	4602      	mov	r2, r0
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f001 fe32 	bl	800ad88 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	7b19      	ldrb	r1, [r3, #12]
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	7bd8      	ldrb	r0, [r3, #15]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009138:	68ba      	ldr	r2, [r7, #8]
 800913a:	8b52      	ldrh	r2, [r2, #26]
 800913c:	9202      	str	r2, [sp, #8]
 800913e:	2202      	movs	r2, #2
 8009140:	9201      	str	r2, [sp, #4]
 8009142:	9300      	str	r3, [sp, #0]
 8009144:	4623      	mov	r3, r4
 8009146:	4602      	mov	r2, r0
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f001 fe1d 	bl	800ad88 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	7b5b      	ldrb	r3, [r3, #13]
 800915a:	2200      	movs	r2, #0
 800915c:	4619      	mov	r1, r3
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f002 f928 	bl	800b3b4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	7b1b      	ldrb	r3, [r3, #12]
 8009168:	2200      	movs	r2, #0
 800916a:	4619      	mov	r1, r3
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f002 f921 	bl	800b3b4 <USBH_LL_SetToggle>

  return USBH_OK;
 8009172:	2300      	movs	r3, #0
}
 8009174:	4618      	mov	r0, r3
 8009176:	3714      	adds	r7, #20
 8009178:	46bd      	mov	sp, r7
 800917a:	bd90      	pop	{r4, r7, pc}

0800917c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800918a:	69db      	ldr	r3, [r3, #28]
 800918c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00e      	beq.n	80091b4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	4619      	mov	r1, r3
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f001 fe12 	bl	800adc6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	4619      	mov	r1, r3
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f001 fe3d 	bl	800ae28 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2200      	movs	r2, #0
 80091b2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	7b1b      	ldrb	r3, [r3, #12]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d00e      	beq.n	80091da <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	7b1b      	ldrb	r3, [r3, #12]
 80091c0:	4619      	mov	r1, r3
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f001 fdff 	bl	800adc6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	7b1b      	ldrb	r3, [r3, #12]
 80091cc:	4619      	mov	r1, r3
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f001 fe2a 	bl	800ae28 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2200      	movs	r2, #0
 80091d8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	7b5b      	ldrb	r3, [r3, #13]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d00e      	beq.n	8009200 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	7b5b      	ldrb	r3, [r3, #13]
 80091e6:	4619      	mov	r1, r3
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f001 fdec 	bl	800adc6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	7b5b      	ldrb	r3, [r3, #13]
 80091f2:	4619      	mov	r1, r3
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f001 fe17 	bl	800ae28 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2200      	movs	r2, #0
 80091fe:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009206:	69db      	ldr	r3, [r3, #28]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d00b      	beq.n	8009224 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009212:	69db      	ldr	r3, [r3, #28]
 8009214:	4618      	mov	r0, r3
 8009216:	f7f7 ff21 	bl	800105c <free>
    phost->pActiveClass->pData = 0U;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009220:	2200      	movs	r2, #0
 8009222:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b084      	sub	sp, #16
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800923c:	69db      	ldr	r3, [r3, #28]
 800923e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	3340      	adds	r3, #64	; 0x40
 8009244:	4619      	mov	r1, r3
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 f8b1 	bl	80093ae <GetLineCoding>
 800924c:	4603      	mov	r3, r0
 800924e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009250:	7afb      	ldrb	r3, [r7, #11]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d105      	bne.n	8009262 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800925c:	2102      	movs	r1, #2
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009262:	7afb      	ldrb	r3, [r7, #11]
}
 8009264:	4618      	mov	r0, r3
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009274:	2301      	movs	r3, #1
 8009276:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009278:	2300      	movs	r3, #0
 800927a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009282:	69db      	ldr	r3, [r3, #28]
 8009284:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800928c:	2b04      	cmp	r3, #4
 800928e:	d877      	bhi.n	8009380 <USBH_CDC_Process+0x114>
 8009290:	a201      	add	r2, pc, #4	; (adr r2, 8009298 <USBH_CDC_Process+0x2c>)
 8009292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009296:	bf00      	nop
 8009298:	080092ad 	.word	0x080092ad
 800929c:	080092b3 	.word	0x080092b3
 80092a0:	080092e3 	.word	0x080092e3
 80092a4:	08009357 	.word	0x08009357
 80092a8:	08009365 	.word	0x08009365
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80092ac:	2300      	movs	r3, #0
 80092ae:	73fb      	strb	r3, [r7, #15]
      break;
 80092b0:	e06d      	b.n	800938e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092b6:	4619      	mov	r1, r3
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 f897 	bl	80093ec <SetLineCoding>
 80092be:	4603      	mov	r3, r0
 80092c0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80092c2:	7bbb      	ldrb	r3, [r7, #14]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d104      	bne.n	80092d2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	2202      	movs	r2, #2
 80092cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80092d0:	e058      	b.n	8009384 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80092d2:	7bbb      	ldrb	r3, [r7, #14]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d055      	beq.n	8009384 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	2204      	movs	r2, #4
 80092dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80092e0:	e050      	b.n	8009384 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	3340      	adds	r3, #64	; 0x40
 80092e6:	4619      	mov	r1, r3
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f000 f860 	bl	80093ae <GetLineCoding>
 80092ee:	4603      	mov	r3, r0
 80092f0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80092f2:	7bbb      	ldrb	r3, [r7, #14]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d126      	bne.n	8009346 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800930a:	791b      	ldrb	r3, [r3, #4]
 800930c:	429a      	cmp	r2, r3
 800930e:	d13b      	bne.n	8009388 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800931a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800931c:	429a      	cmp	r2, r3
 800931e:	d133      	bne.n	8009388 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800932a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800932c:	429a      	cmp	r2, r3
 800932e:	d12b      	bne.n	8009388 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009338:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800933a:	429a      	cmp	r2, r3
 800933c:	d124      	bne.n	8009388 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f958 	bl	80095f4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009344:	e020      	b.n	8009388 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009346:	7bbb      	ldrb	r3, [r7, #14]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d01d      	beq.n	8009388 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	2204      	movs	r2, #4
 8009350:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009354:	e018      	b.n	8009388 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f867 	bl	800942a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 f8da 	bl	8009516 <CDC_ProcessReception>
      break;
 8009362:	e014      	b.n	800938e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009364:	2100      	movs	r1, #0
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 ffef 	bl	800a34a <USBH_ClrFeature>
 800936c:	4603      	mov	r3, r0
 800936e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009370:	7bbb      	ldrb	r3, [r7, #14]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d10a      	bne.n	800938c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	2200      	movs	r2, #0
 800937a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800937e:	e005      	b.n	800938c <USBH_CDC_Process+0x120>

    default:
      break;
 8009380:	bf00      	nop
 8009382:	e004      	b.n	800938e <USBH_CDC_Process+0x122>
      break;
 8009384:	bf00      	nop
 8009386:	e002      	b.n	800938e <USBH_CDC_Process+0x122>
      break;
 8009388:	bf00      	nop
 800938a:	e000      	b.n	800938e <USBH_CDC_Process+0x122>
      break;
 800938c:	bf00      	nop

  }

  return status;
 800938e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009390:	4618      	mov	r0, r3
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	370c      	adds	r7, #12
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr

080093ae <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b082      	sub	sp, #8
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
 80093b6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	22a1      	movs	r2, #161	; 0xa1
 80093bc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2221      	movs	r2, #33	; 0x21
 80093c2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2207      	movs	r2, #7
 80093d4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	2207      	movs	r2, #7
 80093da:	4619      	mov	r1, r3
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f001 fa81 	bl	800a8e4 <USBH_CtlReq>
 80093e2:	4603      	mov	r3, r0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2221      	movs	r2, #33	; 0x21
 80093fa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2220      	movs	r2, #32
 8009400:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2207      	movs	r2, #7
 8009412:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	2207      	movs	r2, #7
 8009418:	4619      	mov	r1, r3
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f001 fa62 	bl	800a8e4 <USBH_CtlReq>
 8009420:	4603      	mov	r3, r0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b086      	sub	sp, #24
 800942e:	af02      	add	r7, sp, #8
 8009430:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009438:	69db      	ldr	r3, [r3, #28]
 800943a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800943c:	2300      	movs	r3, #0
 800943e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009446:	2b01      	cmp	r3, #1
 8009448:	d002      	beq.n	8009450 <CDC_ProcessTransmission+0x26>
 800944a:	2b02      	cmp	r3, #2
 800944c:	d023      	beq.n	8009496 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800944e:	e05e      	b.n	800950e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	8b12      	ldrh	r2, [r2, #24]
 8009458:	4293      	cmp	r3, r2
 800945a:	d90b      	bls.n	8009474 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	69d9      	ldr	r1, [r3, #28]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	8b1a      	ldrh	r2, [r3, #24]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	7b5b      	ldrb	r3, [r3, #13]
 8009468:	2001      	movs	r0, #1
 800946a:	9000      	str	r0, [sp, #0]
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f001 fc48 	bl	800ad02 <USBH_BulkSendData>
 8009472:	e00b      	b.n	800948c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800947c:	b29a      	uxth	r2, r3
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	7b5b      	ldrb	r3, [r3, #13]
 8009482:	2001      	movs	r0, #1
 8009484:	9000      	str	r0, [sp, #0]
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f001 fc3b 	bl	800ad02 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2202      	movs	r2, #2
 8009490:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009494:	e03b      	b.n	800950e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	7b5b      	ldrb	r3, [r3, #13]
 800949a:	4619      	mov	r1, r3
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f001 ff5f 	bl	800b360 <USBH_LL_GetURBState>
 80094a2:	4603      	mov	r3, r0
 80094a4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80094a6:	7afb      	ldrb	r3, [r7, #11]
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d128      	bne.n	80094fe <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	8b12      	ldrh	r2, [r2, #24]
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d90e      	bls.n	80094d6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	8b12      	ldrh	r2, [r2, #24]
 80094c0:	1a9a      	subs	r2, r3, r2
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	69db      	ldr	r3, [r3, #28]
 80094ca:	68fa      	ldr	r2, [r7, #12]
 80094cc:	8b12      	ldrh	r2, [r2, #24]
 80094ce:	441a      	add	r2, r3
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	61da      	str	r2, [r3, #28]
 80094d4:	e002      	b.n	80094dc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2200      	movs	r2, #0
 80094da:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d004      	beq.n	80094ee <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2201      	movs	r2, #1
 80094e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80094ec:	e00e      	b.n	800950c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 f868 	bl	80095cc <USBH_CDC_TransmitCallback>
      break;
 80094fc:	e006      	b.n	800950c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80094fe:	7afb      	ldrb	r3, [r7, #11]
 8009500:	2b02      	cmp	r3, #2
 8009502:	d103      	bne.n	800950c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2201      	movs	r2, #1
 8009508:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800950c:	bf00      	nop
  }
}
 800950e:	bf00      	nop
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b086      	sub	sp, #24
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009524:	69db      	ldr	r3, [r3, #28]
 8009526:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009528:	2300      	movs	r3, #0
 800952a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009532:	2b03      	cmp	r3, #3
 8009534:	d002      	beq.n	800953c <CDC_ProcessReception+0x26>
 8009536:	2b04      	cmp	r3, #4
 8009538:	d00e      	beq.n	8009558 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800953a:	e043      	b.n	80095c4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	6a19      	ldr	r1, [r3, #32]
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	8b5a      	ldrh	r2, [r3, #26]
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	7b1b      	ldrb	r3, [r3, #12]
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f001 fbff 	bl	800ad4c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	2204      	movs	r2, #4
 8009552:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009556:	e035      	b.n	80095c4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	7b1b      	ldrb	r3, [r3, #12]
 800955c:	4619      	mov	r1, r3
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f001 fefe 	bl	800b360 <USBH_LL_GetURBState>
 8009564:	4603      	mov	r3, r0
 8009566:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009568:	7cfb      	ldrb	r3, [r7, #19]
 800956a:	2b01      	cmp	r3, #1
 800956c:	d129      	bne.n	80095c2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	7b1b      	ldrb	r3, [r3, #12]
 8009572:	4619      	mov	r1, r3
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f001 fe61 	bl	800b23c <USBH_LL_GetLastXferSize>
 800957a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009580:	68fa      	ldr	r2, [r7, #12]
 8009582:	429a      	cmp	r2, r3
 8009584:	d016      	beq.n	80095b4 <CDC_ProcessReception+0x9e>
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	8b5b      	ldrh	r3, [r3, #26]
 800958a:	461a      	mov	r2, r3
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	4293      	cmp	r3, r2
 8009590:	d910      	bls.n	80095b4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	1ad2      	subs	r2, r2, r3
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	6a1a      	ldr	r2, [r3, #32]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	441a      	add	r2, r3
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	2203      	movs	r2, #3
 80095ae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80095b2:	e006      	b.n	80095c2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 f80f 	bl	80095e0 <USBH_CDC_ReceiveCallback>
      break;
 80095c2:	bf00      	nop
  }
}
 80095c4:	bf00      	nop
 80095c6:	3718      	adds	r7, #24
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80095d4:	bf00      	nop
 80095d6:	370c      	adds	r7, #12
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80095e8:	bf00      	nop
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80095fc:	bf00      	nop
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	4613      	mov	r3, r2
 8009614:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d101      	bne.n	8009620 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800961c:	2302      	movs	r3, #2
 800961e:	e029      	b.n	8009674 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	79fa      	ldrb	r2, [r7, #7]
 8009624:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2200      	movs	r2, #0
 8009634:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	f000 f81f 	bl	800967c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2200      	movs	r2, #0
 8009642:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2200      	movs	r2, #0
 800964a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2200      	movs	r2, #0
 8009652:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2200      	movs	r2, #0
 800965a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d003      	beq.n	800966c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	68ba      	ldr	r2, [r7, #8]
 8009668:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f001 fd31 	bl	800b0d4 <USBH_LL_Init>

  return USBH_OK;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800967c:	b480      	push	{r7}
 800967e:	b085      	sub	sp, #20
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009684:	2300      	movs	r3, #0
 8009686:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009688:	2300      	movs	r3, #0
 800968a:	60fb      	str	r3, [r7, #12]
 800968c:	e009      	b.n	80096a2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	33e0      	adds	r3, #224	; 0xe0
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	4413      	add	r3, r2
 8009698:	2200      	movs	r2, #0
 800969a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	3301      	adds	r3, #1
 80096a0:	60fb      	str	r3, [r7, #12]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2b0f      	cmp	r3, #15
 80096a6:	d9f2      	bls.n	800968e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80096a8:	2300      	movs	r3, #0
 80096aa:	60fb      	str	r3, [r7, #12]
 80096ac:	e009      	b.n	80096c2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	4413      	add	r3, r2
 80096b4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80096b8:	2200      	movs	r2, #0
 80096ba:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	3301      	adds	r3, #1
 80096c0:	60fb      	str	r3, [r7, #12]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096c8:	d3f1      	bcc.n	80096ae <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2201      	movs	r2, #1
 80096da:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2240      	movs	r2, #64	; 0x40
 80096ee:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2200      	movs	r2, #0
 80096f4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2201      	movs	r2, #1
 8009702:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3714      	adds	r7, #20
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800972e:	2300      	movs	r3, #0
 8009730:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d016      	beq.n	8009766 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800973e:	2b00      	cmp	r3, #0
 8009740:	d10e      	bne.n	8009760 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009748:	1c59      	adds	r1, r3, #1
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	33de      	adds	r3, #222	; 0xde
 8009754:	6839      	ldr	r1, [r7, #0]
 8009756:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800975a:	2300      	movs	r3, #0
 800975c:	73fb      	strb	r3, [r7, #15]
 800975e:	e004      	b.n	800976a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009760:	2302      	movs	r3, #2
 8009762:	73fb      	strb	r3, [r7, #15]
 8009764:	e001      	b.n	800976a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009766:	2302      	movs	r3, #2
 8009768:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800976a:	7bfb      	ldrb	r3, [r7, #15]
}
 800976c:	4618      	mov	r0, r3
 800976e:	3714      	adds	r7, #20
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009778:	b480      	push	{r7}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	460b      	mov	r3, r1
 8009782:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009784:	2300      	movs	r3, #0
 8009786:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800978e:	78fa      	ldrb	r2, [r7, #3]
 8009790:	429a      	cmp	r2, r3
 8009792:	d204      	bcs.n	800979e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	78fa      	ldrb	r2, [r7, #3]
 8009798:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800979c:	e001      	b.n	80097a2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800979e:	2302      	movs	r3, #2
 80097a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80097a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3714      	adds	r7, #20
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b087      	sub	sp, #28
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	4608      	mov	r0, r1
 80097ba:	4611      	mov	r1, r2
 80097bc:	461a      	mov	r2, r3
 80097be:	4603      	mov	r3, r0
 80097c0:	70fb      	strb	r3, [r7, #3]
 80097c2:	460b      	mov	r3, r1
 80097c4:	70bb      	strb	r3, [r7, #2]
 80097c6:	4613      	mov	r3, r2
 80097c8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80097ca:	2300      	movs	r3, #0
 80097cc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80097ce:	2300      	movs	r3, #0
 80097d0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80097d8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80097da:	e025      	b.n	8009828 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80097dc:	7dfb      	ldrb	r3, [r7, #23]
 80097de:	221a      	movs	r2, #26
 80097e0:	fb02 f303 	mul.w	r3, r2, r3
 80097e4:	3308      	adds	r3, #8
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	4413      	add	r3, r2
 80097ea:	3302      	adds	r3, #2
 80097ec:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	795b      	ldrb	r3, [r3, #5]
 80097f2:	78fa      	ldrb	r2, [r7, #3]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d002      	beq.n	80097fe <USBH_FindInterface+0x4e>
 80097f8:	78fb      	ldrb	r3, [r7, #3]
 80097fa:	2bff      	cmp	r3, #255	; 0xff
 80097fc:	d111      	bne.n	8009822 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009802:	78ba      	ldrb	r2, [r7, #2]
 8009804:	429a      	cmp	r2, r3
 8009806:	d002      	beq.n	800980e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009808:	78bb      	ldrb	r3, [r7, #2]
 800980a:	2bff      	cmp	r3, #255	; 0xff
 800980c:	d109      	bne.n	8009822 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009812:	787a      	ldrb	r2, [r7, #1]
 8009814:	429a      	cmp	r2, r3
 8009816:	d002      	beq.n	800981e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009818:	787b      	ldrb	r3, [r7, #1]
 800981a:	2bff      	cmp	r3, #255	; 0xff
 800981c:	d101      	bne.n	8009822 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800981e:	7dfb      	ldrb	r3, [r7, #23]
 8009820:	e006      	b.n	8009830 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009822:	7dfb      	ldrb	r3, [r7, #23]
 8009824:	3301      	adds	r3, #1
 8009826:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009828:	7dfb      	ldrb	r3, [r7, #23]
 800982a:	2b01      	cmp	r3, #1
 800982c:	d9d6      	bls.n	80097dc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800982e:	23ff      	movs	r3, #255	; 0xff
}
 8009830:	4618      	mov	r0, r3
 8009832:	371c      	adds	r7, #28
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b082      	sub	sp, #8
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f001 fc81 	bl	800b14c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800984a:	2101      	movs	r1, #1
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f001 fd9a 	bl	800b386 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009852:	2300      	movs	r3, #0
}
 8009854:	4618      	mov	r0, r3
 8009856:	3708      	adds	r7, #8
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b088      	sub	sp, #32
 8009860:	af04      	add	r7, sp, #16
 8009862:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009864:	2302      	movs	r3, #2
 8009866:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009868:	2300      	movs	r3, #0
 800986a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009872:	b2db      	uxtb	r3, r3
 8009874:	2b01      	cmp	r3, #1
 8009876:	d102      	bne.n	800987e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2203      	movs	r2, #3
 800987c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	b2db      	uxtb	r3, r3
 8009884:	2b0b      	cmp	r3, #11
 8009886:	f200 81be 	bhi.w	8009c06 <USBH_Process+0x3aa>
 800988a:	a201      	add	r2, pc, #4	; (adr r2, 8009890 <USBH_Process+0x34>)
 800988c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009890:	080098c1 	.word	0x080098c1
 8009894:	080098f3 	.word	0x080098f3
 8009898:	0800995b 	.word	0x0800995b
 800989c:	08009ba1 	.word	0x08009ba1
 80098a0:	08009c07 	.word	0x08009c07
 80098a4:	080099ff 	.word	0x080099ff
 80098a8:	08009b47 	.word	0x08009b47
 80098ac:	08009a35 	.word	0x08009a35
 80098b0:	08009a55 	.word	0x08009a55
 80098b4:	08009a75 	.word	0x08009a75
 80098b8:	08009ab9 	.word	0x08009ab9
 80098bc:	08009b89 	.word	0x08009b89
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	f000 819e 	beq.w	8009c0a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2201      	movs	r2, #1
 80098d2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80098d4:	20c8      	movs	r0, #200	; 0xc8
 80098d6:	f001 fd9d 	bl	800b414 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f001 fc93 	bl	800b206 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80098f0:	e18b      	b.n	8009c0a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d107      	bne.n	800990c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2202      	movs	r2, #2
 8009908:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800990a:	e18d      	b.n	8009c28 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009912:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009916:	d914      	bls.n	8009942 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800991e:	3301      	adds	r3, #1
 8009920:	b2da      	uxtb	r2, r3
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800992e:	2b03      	cmp	r3, #3
 8009930:	d903      	bls.n	800993a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	220d      	movs	r2, #13
 8009936:	701a      	strb	r2, [r3, #0]
      break;
 8009938:	e176      	b.n	8009c28 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	701a      	strb	r2, [r3, #0]
      break;
 8009940:	e172      	b.n	8009c28 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009948:	f103 020a 	add.w	r2, r3, #10
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009952:	200a      	movs	r0, #10
 8009954:	f001 fd5e 	bl	800b414 <USBH_Delay>
      break;
 8009958:	e166      	b.n	8009c28 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009960:	2b00      	cmp	r3, #0
 8009962:	d005      	beq.n	8009970 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800996a:	2104      	movs	r1, #4
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009970:	2064      	movs	r0, #100	; 0x64
 8009972:	f001 fd4f 	bl	800b414 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f001 fc1e 	bl	800b1b8 <USBH_LL_GetSpeed>
 800997c:	4603      	mov	r3, r0
 800997e:	461a      	mov	r2, r3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2205      	movs	r2, #5
 800998a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800998c:	2100      	movs	r1, #0
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f001 fa29 	bl	800ade6 <USBH_AllocPipe>
 8009994:	4603      	mov	r3, r0
 8009996:	461a      	mov	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800999c:	2180      	movs	r1, #128	; 0x80
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f001 fa21 	bl	800ade6 <USBH_AllocPipe>
 80099a4:	4603      	mov	r3, r0
 80099a6:	461a      	mov	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	7919      	ldrb	r1, [r3, #4]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80099c0:	b292      	uxth	r2, r2
 80099c2:	9202      	str	r2, [sp, #8]
 80099c4:	2200      	movs	r2, #0
 80099c6:	9201      	str	r2, [sp, #4]
 80099c8:	9300      	str	r3, [sp, #0]
 80099ca:	4603      	mov	r3, r0
 80099cc:	2280      	movs	r2, #128	; 0x80
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f001 f9da 	bl	800ad88 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	7959      	ldrb	r1, [r3, #5]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80099e8:	b292      	uxth	r2, r2
 80099ea:	9202      	str	r2, [sp, #8]
 80099ec:	2200      	movs	r2, #0
 80099ee:	9201      	str	r2, [sp, #4]
 80099f0:	9300      	str	r3, [sp, #0]
 80099f2:	4603      	mov	r3, r0
 80099f4:	2200      	movs	r2, #0
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f001 f9c6 	bl	800ad88 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80099fc:	e114      	b.n	8009c28 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f918 	bl	8009c34 <USBH_HandleEnum>
 8009a04:	4603      	mov	r3, r0
 8009a06:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009a08:	7bbb      	ldrb	r3, [r7, #14]
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f040 80fe 	bne.w	8009c0e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d103      	bne.n	8009a2c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2208      	movs	r2, #8
 8009a28:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009a2a:	e0f0      	b.n	8009c0e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2207      	movs	r2, #7
 8009a30:	701a      	strb	r2, [r3, #0]
      break;
 8009a32:	e0ec      	b.n	8009c0e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f000 80e9 	beq.w	8009c12 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a46:	2101      	movs	r1, #1
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2208      	movs	r2, #8
 8009a50:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009a52:	e0de      	b.n	8009c12 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fc2c 	bl	800a2bc <USBH_SetCfg>
 8009a64:	4603      	mov	r3, r0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	f040 80d5 	bne.w	8009c16 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2209      	movs	r2, #9
 8009a70:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009a72:	e0d0      	b.n	8009c16 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009a7a:	f003 0320 	and.w	r3, r3, #32
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d016      	beq.n	8009ab0 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009a82:	2101      	movs	r1, #1
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 fc3c 	bl	800a302 <USBH_SetFeature>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009a8e:	7bbb      	ldrb	r3, [r7, #14]
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d103      	bne.n	8009a9e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	220a      	movs	r2, #10
 8009a9a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009a9c:	e0bd      	b.n	8009c1a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8009a9e:	7bbb      	ldrb	r3, [r7, #14]
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	2b03      	cmp	r3, #3
 8009aa4:	f040 80b9 	bne.w	8009c1a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	220a      	movs	r2, #10
 8009aac:	701a      	strb	r2, [r3, #0]
      break;
 8009aae:	e0b4      	b.n	8009c1a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	220a      	movs	r2, #10
 8009ab4:	701a      	strb	r2, [r3, #0]
      break;
 8009ab6:	e0b0      	b.n	8009c1a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	f000 80ad 	beq.w	8009c1e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009acc:	2300      	movs	r3, #0
 8009ace:	73fb      	strb	r3, [r7, #15]
 8009ad0:	e016      	b.n	8009b00 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009ad2:	7bfa      	ldrb	r2, [r7, #15]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	32de      	adds	r2, #222	; 0xde
 8009ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009adc:	791a      	ldrb	r2, [r3, #4]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d108      	bne.n	8009afa <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009ae8:	7bfa      	ldrb	r2, [r7, #15]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	32de      	adds	r2, #222	; 0xde
 8009aee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009af8:	e005      	b.n	8009b06 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009afa:	7bfb      	ldrb	r3, [r7, #15]
 8009afc:	3301      	adds	r3, #1
 8009afe:	73fb      	strb	r3, [r7, #15]
 8009b00:	7bfb      	ldrb	r3, [r7, #15]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d0e5      	beq.n	8009ad2 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d016      	beq.n	8009b3e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	4798      	blx	r3
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d109      	bne.n	8009b36 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2206      	movs	r2, #6
 8009b26:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009b2e:	2103      	movs	r1, #3
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009b34:	e073      	b.n	8009c1e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	220d      	movs	r2, #13
 8009b3a:	701a      	strb	r2, [r3, #0]
      break;
 8009b3c:	e06f      	b.n	8009c1e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	220d      	movs	r2, #13
 8009b42:	701a      	strb	r2, [r3, #0]
      break;
 8009b44:	e06b      	b.n	8009c1e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d017      	beq.n	8009b80 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b56:	691b      	ldr	r3, [r3, #16]
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	4798      	blx	r3
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009b60:	7bbb      	ldrb	r3, [r7, #14]
 8009b62:	b2db      	uxtb	r3, r3
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d103      	bne.n	8009b70 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	220b      	movs	r2, #11
 8009b6c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009b6e:	e058      	b.n	8009c22 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8009b70:	7bbb      	ldrb	r3, [r7, #14]
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d154      	bne.n	8009c22 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	220d      	movs	r2, #13
 8009b7c:	701a      	strb	r2, [r3, #0]
      break;
 8009b7e:	e050      	b.n	8009c22 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	220d      	movs	r2, #13
 8009b84:	701a      	strb	r2, [r3, #0]
      break;
 8009b86:	e04c      	b.n	8009c22 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d049      	beq.n	8009c26 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b98:	695b      	ldr	r3, [r3, #20]
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	4798      	blx	r3
      }
      break;
 8009b9e:	e042      	b.n	8009c26 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f7ff fd67 	bl	800967c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d009      	beq.n	8009bcc <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d005      	beq.n	8009be2 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009bdc:	2105      	movs	r1, #5
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	d107      	bne.n	8009bfe <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f7ff fe20 	bl	800983c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009bfc:	e014      	b.n	8009c28 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f001 faa4 	bl	800b14c <USBH_LL_Start>
      break;
 8009c04:	e010      	b.n	8009c28 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8009c06:	bf00      	nop
 8009c08:	e00e      	b.n	8009c28 <USBH_Process+0x3cc>
      break;
 8009c0a:	bf00      	nop
 8009c0c:	e00c      	b.n	8009c28 <USBH_Process+0x3cc>
      break;
 8009c0e:	bf00      	nop
 8009c10:	e00a      	b.n	8009c28 <USBH_Process+0x3cc>
    break;
 8009c12:	bf00      	nop
 8009c14:	e008      	b.n	8009c28 <USBH_Process+0x3cc>
      break;
 8009c16:	bf00      	nop
 8009c18:	e006      	b.n	8009c28 <USBH_Process+0x3cc>
      break;
 8009c1a:	bf00      	nop
 8009c1c:	e004      	b.n	8009c28 <USBH_Process+0x3cc>
      break;
 8009c1e:	bf00      	nop
 8009c20:	e002      	b.n	8009c28 <USBH_Process+0x3cc>
      break;
 8009c22:	bf00      	nop
 8009c24:	e000      	b.n	8009c28 <USBH_Process+0x3cc>
      break;
 8009c26:	bf00      	nop
  }
  return USBH_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop

08009c34 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b088      	sub	sp, #32
 8009c38:	af04      	add	r7, sp, #16
 8009c3a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009c40:	2301      	movs	r3, #1
 8009c42:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	785b      	ldrb	r3, [r3, #1]
 8009c48:	2b07      	cmp	r3, #7
 8009c4a:	f200 81c1 	bhi.w	8009fd0 <USBH_HandleEnum+0x39c>
 8009c4e:	a201      	add	r2, pc, #4	; (adr r2, 8009c54 <USBH_HandleEnum+0x20>)
 8009c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c54:	08009c75 	.word	0x08009c75
 8009c58:	08009d33 	.word	0x08009d33
 8009c5c:	08009d9d 	.word	0x08009d9d
 8009c60:	08009e2b 	.word	0x08009e2b
 8009c64:	08009e95 	.word	0x08009e95
 8009c68:	08009f05 	.word	0x08009f05
 8009c6c:	08009f4b 	.word	0x08009f4b
 8009c70:	08009f91 	.word	0x08009f91
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009c74:	2108      	movs	r1, #8
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 fa50 	bl	800a11c <USBH_Get_DevDesc>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009c80:	7bbb      	ldrb	r3, [r7, #14]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d130      	bne.n	8009ce8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2201      	movs	r2, #1
 8009c94:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	7919      	ldrb	r1, [r3, #4]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009caa:	b292      	uxth	r2, r2
 8009cac:	9202      	str	r2, [sp, #8]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	9201      	str	r2, [sp, #4]
 8009cb2:	9300      	str	r3, [sp, #0]
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2280      	movs	r2, #128	; 0x80
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f001 f865 	bl	800ad88 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	7959      	ldrb	r1, [r3, #5]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009cd2:	b292      	uxth	r2, r2
 8009cd4:	9202      	str	r2, [sp, #8]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	9201      	str	r2, [sp, #4]
 8009cda:	9300      	str	r3, [sp, #0]
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2200      	movs	r2, #0
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f001 f851 	bl	800ad88 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009ce6:	e175      	b.n	8009fd4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ce8:	7bbb      	ldrb	r3, [r7, #14]
 8009cea:	2b03      	cmp	r3, #3
 8009cec:	f040 8172 	bne.w	8009fd4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	b2da      	uxtb	r2, r3
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009d06:	2b03      	cmp	r3, #3
 8009d08:	d903      	bls.n	8009d12 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	220d      	movs	r2, #13
 8009d0e:	701a      	strb	r2, [r3, #0]
      break;
 8009d10:	e160      	b.n	8009fd4 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	795b      	ldrb	r3, [r3, #5]
 8009d16:	4619      	mov	r1, r3
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f001 f885 	bl	800ae28 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	791b      	ldrb	r3, [r3, #4]
 8009d22:	4619      	mov	r1, r3
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f001 f87f 	bl	800ae28 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	701a      	strb	r2, [r3, #0]
      break;
 8009d30:	e150      	b.n	8009fd4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009d32:	2112      	movs	r1, #18
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 f9f1 	bl	800a11c <USBH_Get_DevDesc>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009d3e:	7bbb      	ldrb	r3, [r7, #14]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d103      	bne.n	8009d4c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2202      	movs	r2, #2
 8009d48:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009d4a:	e145      	b.n	8009fd8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d4c:	7bbb      	ldrb	r3, [r7, #14]
 8009d4e:	2b03      	cmp	r3, #3
 8009d50:	f040 8142 	bne.w	8009fd8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	b2da      	uxtb	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009d6a:	2b03      	cmp	r3, #3
 8009d6c:	d903      	bls.n	8009d76 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	220d      	movs	r2, #13
 8009d72:	701a      	strb	r2, [r3, #0]
      break;
 8009d74:	e130      	b.n	8009fd8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	795b      	ldrb	r3, [r3, #5]
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f001 f853 	bl	800ae28 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	791b      	ldrb	r3, [r3, #4]
 8009d86:	4619      	mov	r1, r3
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f001 f84d 	bl	800ae28 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	701a      	strb	r2, [r3, #0]
      break;
 8009d9a:	e11d      	b.n	8009fd8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009d9c:	2101      	movs	r1, #1
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 fa68 	bl	800a274 <USBH_SetAddress>
 8009da4:	4603      	mov	r3, r0
 8009da6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009da8:	7bbb      	ldrb	r3, [r7, #14]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d132      	bne.n	8009e14 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009dae:	2002      	movs	r0, #2
 8009db0:	f001 fb30 	bl	800b414 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2201      	movs	r2, #1
 8009db8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2203      	movs	r2, #3
 8009dc0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	7919      	ldrb	r1, [r3, #4]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009dd6:	b292      	uxth	r2, r2
 8009dd8:	9202      	str	r2, [sp, #8]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	9201      	str	r2, [sp, #4]
 8009dde:	9300      	str	r3, [sp, #0]
 8009de0:	4603      	mov	r3, r0
 8009de2:	2280      	movs	r2, #128	; 0x80
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 ffcf 	bl	800ad88 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	7959      	ldrb	r1, [r3, #5]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009dfe:	b292      	uxth	r2, r2
 8009e00:	9202      	str	r2, [sp, #8]
 8009e02:	2200      	movs	r2, #0
 8009e04:	9201      	str	r2, [sp, #4]
 8009e06:	9300      	str	r3, [sp, #0]
 8009e08:	4603      	mov	r3, r0
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 ffbb 	bl	800ad88 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009e12:	e0e3      	b.n	8009fdc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e14:	7bbb      	ldrb	r3, [r7, #14]
 8009e16:	2b03      	cmp	r3, #3
 8009e18:	f040 80e0 	bne.w	8009fdc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	220d      	movs	r2, #13
 8009e20:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	705a      	strb	r2, [r3, #1]
      break;
 8009e28:	e0d8      	b.n	8009fdc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009e2a:	2109      	movs	r1, #9
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f99d 	bl	800a16c <USBH_Get_CfgDesc>
 8009e32:	4603      	mov	r3, r0
 8009e34:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009e36:	7bbb      	ldrb	r3, [r7, #14]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d103      	bne.n	8009e44 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2204      	movs	r2, #4
 8009e40:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009e42:	e0cd      	b.n	8009fe0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e44:	7bbb      	ldrb	r3, [r7, #14]
 8009e46:	2b03      	cmp	r3, #3
 8009e48:	f040 80ca 	bne.w	8009fe0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009e52:	3301      	adds	r3, #1
 8009e54:	b2da      	uxtb	r2, r3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009e62:	2b03      	cmp	r3, #3
 8009e64:	d903      	bls.n	8009e6e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	220d      	movs	r2, #13
 8009e6a:	701a      	strb	r2, [r3, #0]
      break;
 8009e6c:	e0b8      	b.n	8009fe0 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	795b      	ldrb	r3, [r3, #5]
 8009e72:	4619      	mov	r1, r3
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 ffd7 	bl	800ae28 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	791b      	ldrb	r3, [r3, #4]
 8009e7e:	4619      	mov	r1, r3
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 ffd1 	bl	800ae28 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	701a      	strb	r2, [r3, #0]
      break;
 8009e92:	e0a5      	b.n	8009fe0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f000 f965 	bl	800a16c <USBH_Get_CfgDesc>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ea6:	7bbb      	ldrb	r3, [r7, #14]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d103      	bne.n	8009eb4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2205      	movs	r2, #5
 8009eb0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009eb2:	e097      	b.n	8009fe4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009eb4:	7bbb      	ldrb	r3, [r7, #14]
 8009eb6:	2b03      	cmp	r3, #3
 8009eb8:	f040 8094 	bne.w	8009fe4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	b2da      	uxtb	r2, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009ed2:	2b03      	cmp	r3, #3
 8009ed4:	d903      	bls.n	8009ede <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	220d      	movs	r2, #13
 8009eda:	701a      	strb	r2, [r3, #0]
      break;
 8009edc:	e082      	b.n	8009fe4 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	795b      	ldrb	r3, [r3, #5]
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 ff9f 	bl	800ae28 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	791b      	ldrb	r3, [r3, #4]
 8009eee:	4619      	mov	r1, r3
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 ff99 	bl	800ae28 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	701a      	strb	r2, [r3, #0]
      break;
 8009f02:	e06f      	b.n	8009fe4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d019      	beq.n	8009f42 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009f1a:	23ff      	movs	r3, #255	; 0xff
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 f949 	bl	800a1b4 <USBH_Get_StringDesc>
 8009f22:	4603      	mov	r3, r0
 8009f24:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009f26:	7bbb      	ldrb	r3, [r7, #14]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d103      	bne.n	8009f34 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2206      	movs	r2, #6
 8009f30:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009f32:	e059      	b.n	8009fe8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f34:	7bbb      	ldrb	r3, [r7, #14]
 8009f36:	2b03      	cmp	r3, #3
 8009f38:	d156      	bne.n	8009fe8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2206      	movs	r2, #6
 8009f3e:	705a      	strb	r2, [r3, #1]
      break;
 8009f40:	e052      	b.n	8009fe8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2206      	movs	r2, #6
 8009f46:	705a      	strb	r2, [r3, #1]
      break;
 8009f48:	e04e      	b.n	8009fe8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d019      	beq.n	8009f88 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009f60:	23ff      	movs	r3, #255	; 0xff
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 f926 	bl	800a1b4 <USBH_Get_StringDesc>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009f6c:	7bbb      	ldrb	r3, [r7, #14]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d103      	bne.n	8009f7a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2207      	movs	r2, #7
 8009f76:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009f78:	e038      	b.n	8009fec <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f7a:	7bbb      	ldrb	r3, [r7, #14]
 8009f7c:	2b03      	cmp	r3, #3
 8009f7e:	d135      	bne.n	8009fec <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2207      	movs	r2, #7
 8009f84:	705a      	strb	r2, [r3, #1]
      break;
 8009f86:	e031      	b.n	8009fec <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2207      	movs	r2, #7
 8009f8c:	705a      	strb	r2, [r3, #1]
      break;
 8009f8e:	e02d      	b.n	8009fec <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d017      	beq.n	8009fca <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009fa6:	23ff      	movs	r3, #255	; 0xff
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 f903 	bl	800a1b4 <USBH_Get_StringDesc>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009fb2:	7bbb      	ldrb	r3, [r7, #14]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d102      	bne.n	8009fbe <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009fbc:	e018      	b.n	8009ff0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009fbe:	7bbb      	ldrb	r3, [r7, #14]
 8009fc0:	2b03      	cmp	r3, #3
 8009fc2:	d115      	bne.n	8009ff0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8009fc8:	e012      	b.n	8009ff0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8009fce:	e00f      	b.n	8009ff0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009fd0:	bf00      	nop
 8009fd2:	e00e      	b.n	8009ff2 <USBH_HandleEnum+0x3be>
      break;
 8009fd4:	bf00      	nop
 8009fd6:	e00c      	b.n	8009ff2 <USBH_HandleEnum+0x3be>
      break;
 8009fd8:	bf00      	nop
 8009fda:	e00a      	b.n	8009ff2 <USBH_HandleEnum+0x3be>
      break;
 8009fdc:	bf00      	nop
 8009fde:	e008      	b.n	8009ff2 <USBH_HandleEnum+0x3be>
      break;
 8009fe0:	bf00      	nop
 8009fe2:	e006      	b.n	8009ff2 <USBH_HandleEnum+0x3be>
      break;
 8009fe4:	bf00      	nop
 8009fe6:	e004      	b.n	8009ff2 <USBH_HandleEnum+0x3be>
      break;
 8009fe8:	bf00      	nop
 8009fea:	e002      	b.n	8009ff2 <USBH_HandleEnum+0x3be>
      break;
 8009fec:	bf00      	nop
 8009fee:	e000      	b.n	8009ff2 <USBH_HandleEnum+0x3be>
      break;
 8009ff0:	bf00      	nop
  }
  return Status;
 8009ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	683a      	ldr	r2, [r7, #0]
 800a00a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a00e:	bf00      	nop
 800a010:	370c      	adds	r7, #12
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr

0800a01a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b082      	sub	sp, #8
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a028:	1c5a      	adds	r2, r3, #1
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 f804 	bl	800a03e <USBH_HandleSof>
}
 800a036:	bf00      	nop
 800a038:	3708      	adds	r7, #8
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}

0800a03e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a03e:	b580      	push	{r7, lr}
 800a040:	b082      	sub	sp, #8
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	2b0b      	cmp	r3, #11
 800a04e:	d10a      	bne.n	800a066 <USBH_HandleSof+0x28>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a056:	2b00      	cmp	r3, #0
 800a058:	d005      	beq.n	800a066 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a060:	699b      	ldr	r3, [r3, #24]
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	4798      	blx	r3
  }
}
 800a066:	bf00      	nop
 800a068:	3708      	adds	r7, #8
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a06e:	b480      	push	{r7}
 800a070:	b083      	sub	sp, #12
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2201      	movs	r2, #1
 800a07a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a07e:	bf00      	nop
}
 800a080:	370c      	adds	r7, #12
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr

0800a08a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a08a:	b480      	push	{r7}
 800a08c:	b083      	sub	sp, #12
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a09a:	bf00      	nop
}
 800a09c:	370c      	adds	r7, #12
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr

0800a0a6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a0a6:	b480      	push	{r7}
 800a0a8:	b083      	sub	sp, #12
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a0c6:	2300      	movs	r3, #0
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	370c      	adds	r7, #12
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f001 f844 	bl	800b182 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	791b      	ldrb	r3, [r3, #4]
 800a0fe:	4619      	mov	r1, r3
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 fe91 	bl	800ae28 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	795b      	ldrb	r3, [r3, #5]
 800a10a:	4619      	mov	r1, r3
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 fe8b 	bl	800ae28 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a112:	2300      	movs	r3, #0
}
 800a114:	4618      	mov	r0, r3
 800a116:	3708      	adds	r7, #8
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b086      	sub	sp, #24
 800a120:	af02      	add	r7, sp, #8
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	460b      	mov	r3, r1
 800a126:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a12e:	78fb      	ldrb	r3, [r7, #3]
 800a130:	b29b      	uxth	r3, r3
 800a132:	9300      	str	r3, [sp, #0]
 800a134:	4613      	mov	r3, r2
 800a136:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a13a:	2100      	movs	r1, #0
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 f864 	bl	800a20a <USBH_GetDescriptor>
 800a142:	4603      	mov	r3, r0
 800a144:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800a146:	7bfb      	ldrb	r3, [r7, #15]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d10a      	bne.n	800a162 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a158:	78fa      	ldrb	r2, [r7, #3]
 800a15a:	b292      	uxth	r2, r2
 800a15c:	4619      	mov	r1, r3
 800a15e:	f000 f918 	bl	800a392 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a162:	7bfb      	ldrb	r3, [r7, #15]
}
 800a164:	4618      	mov	r0, r3
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b086      	sub	sp, #24
 800a170:	af02      	add	r7, sp, #8
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	460b      	mov	r3, r1
 800a176:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	331c      	adds	r3, #28
 800a17c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a17e:	887b      	ldrh	r3, [r7, #2]
 800a180:	9300      	str	r3, [sp, #0]
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a188:	2100      	movs	r1, #0
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 f83d 	bl	800a20a <USBH_GetDescriptor>
 800a190:	4603      	mov	r3, r0
 800a192:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a194:	7bfb      	ldrb	r3, [r7, #15]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d107      	bne.n	800a1aa <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a19a:	887b      	ldrh	r3, [r7, #2]
 800a19c:	461a      	mov	r2, r3
 800a19e:	68b9      	ldr	r1, [r7, #8]
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 f987 	bl	800a4b4 <USBH_ParseCfgDesc>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a1aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3710      	adds	r7, #16
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b088      	sub	sp, #32
 800a1b8:	af02      	add	r7, sp, #8
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	607a      	str	r2, [r7, #4]
 800a1be:	461a      	mov	r2, r3
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	72fb      	strb	r3, [r7, #11]
 800a1c4:	4613      	mov	r3, r2
 800a1c6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800a1c8:	7afb      	ldrb	r3, [r7, #11]
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a1d0:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a1d8:	893b      	ldrh	r3, [r7, #8]
 800a1da:	9300      	str	r3, [sp, #0]
 800a1dc:	460b      	mov	r3, r1
 800a1de:	2100      	movs	r1, #0
 800a1e0:	68f8      	ldr	r0, [r7, #12]
 800a1e2:	f000 f812 	bl	800a20a <USBH_GetDescriptor>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a1ea:	7dfb      	ldrb	r3, [r7, #23]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d107      	bne.n	800a200 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a1f6:	893a      	ldrh	r2, [r7, #8]
 800a1f8:	6879      	ldr	r1, [r7, #4]
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f000 fb24 	bl	800a848 <USBH_ParseStringDesc>
  }

  return status;
 800a200:	7dfb      	ldrb	r3, [r7, #23]
}
 800a202:	4618      	mov	r0, r3
 800a204:	3718      	adds	r7, #24
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b084      	sub	sp, #16
 800a20e:	af00      	add	r7, sp, #0
 800a210:	60f8      	str	r0, [r7, #12]
 800a212:	607b      	str	r3, [r7, #4]
 800a214:	460b      	mov	r3, r1
 800a216:	72fb      	strb	r3, [r7, #11]
 800a218:	4613      	mov	r3, r2
 800a21a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	789b      	ldrb	r3, [r3, #2]
 800a220:	2b01      	cmp	r3, #1
 800a222:	d11c      	bne.n	800a25e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a224:	7afb      	ldrb	r3, [r7, #11]
 800a226:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a22a:	b2da      	uxtb	r2, r3
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2206      	movs	r2, #6
 800a234:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	893a      	ldrh	r2, [r7, #8]
 800a23a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a23c:	893b      	ldrh	r3, [r7, #8]
 800a23e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a242:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a246:	d104      	bne.n	800a252 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f240 4209 	movw	r2, #1033	; 0x409
 800a24e:	829a      	strh	r2, [r3, #20]
 800a250:	e002      	b.n	800a258 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2200      	movs	r2, #0
 800a256:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	8b3a      	ldrh	r2, [r7, #24]
 800a25c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a25e:	8b3b      	ldrh	r3, [r7, #24]
 800a260:	461a      	mov	r2, r3
 800a262:	6879      	ldr	r1, [r7, #4]
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f000 fb3d 	bl	800a8e4 <USBH_CtlReq>
 800a26a:	4603      	mov	r3, r0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3710      	adds	r7, #16
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	460b      	mov	r3, r1
 800a27e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	789b      	ldrb	r3, [r3, #2]
 800a284:	2b01      	cmp	r3, #1
 800a286:	d10f      	bne.n	800a2a8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2205      	movs	r2, #5
 800a292:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a294:	78fb      	ldrb	r3, [r7, #3]
 800a296:	b29a      	uxth	r2, r3
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	2100      	movs	r1, #0
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 fb19 	bl	800a8e4 <USBH_CtlReq>
 800a2b2:	4603      	mov	r3, r0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3708      	adds	r7, #8
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	789b      	ldrb	r3, [r3, #2]
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d10e      	bne.n	800a2ee <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2209      	movs	r2, #9
 800a2da:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	887a      	ldrh	r2, [r7, #2]
 800a2e0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	2100      	movs	r1, #0
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 faf6 	bl	800a8e4 <USBH_CtlReq>
 800a2f8:	4603      	mov	r3, r0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3708      	adds	r7, #8
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b082      	sub	sp, #8
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
 800a30a:	460b      	mov	r3, r1
 800a30c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	789b      	ldrb	r3, [r3, #2]
 800a312:	2b01      	cmp	r3, #1
 800a314:	d10f      	bne.n	800a336 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2203      	movs	r2, #3
 800a320:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a322:	78fb      	ldrb	r3, [r7, #3]
 800a324:	b29a      	uxth	r2, r3
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2200      	movs	r2, #0
 800a32e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a336:	2200      	movs	r2, #0
 800a338:	2100      	movs	r1, #0
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 fad2 	bl	800a8e4 <USBH_CtlReq>
 800a340:	4603      	mov	r3, r0
}
 800a342:	4618      	mov	r0, r3
 800a344:	3708      	adds	r7, #8
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b082      	sub	sp, #8
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
 800a352:	460b      	mov	r3, r1
 800a354:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	789b      	ldrb	r3, [r3, #2]
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d10f      	bne.n	800a37e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2202      	movs	r2, #2
 800a362:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2201      	movs	r2, #1
 800a368:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a370:	78fb      	ldrb	r3, [r7, #3]
 800a372:	b29a      	uxth	r2, r3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800a37e:	2200      	movs	r2, #0
 800a380:	2100      	movs	r1, #0
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 faae 	bl	800a8e4 <USBH_CtlReq>
 800a388:	4603      	mov	r3, r0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3708      	adds	r7, #8
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a392:	b480      	push	{r7}
 800a394:	b085      	sub	sp, #20
 800a396:	af00      	add	r7, sp, #0
 800a398:	60f8      	str	r0, [r7, #12]
 800a39a:	60b9      	str	r1, [r7, #8]
 800a39c:	4613      	mov	r3, r2
 800a39e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	781a      	ldrb	r2, [r3, #0]
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	785a      	ldrb	r2, [r3, #1]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	3302      	adds	r3, #2
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	b29a      	uxth	r2, r3
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	3303      	adds	r3, #3
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	021b      	lsls	r3, r3, #8
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	b29a      	uxth	r2, r3
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	791a      	ldrb	r2, [r3, #4]
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	795a      	ldrb	r2, [r3, #5]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	799a      	ldrb	r2, [r3, #6]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	79da      	ldrb	r2, [r3, #7]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	79db      	ldrb	r3, [r3, #7]
 800a3f0:	2b20      	cmp	r3, #32
 800a3f2:	dc11      	bgt.n	800a418 <USBH_ParseDevDesc+0x86>
 800a3f4:	2b08      	cmp	r3, #8
 800a3f6:	db16      	blt.n	800a426 <USBH_ParseDevDesc+0x94>
 800a3f8:	3b08      	subs	r3, #8
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a400:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800a404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a408:	2b00      	cmp	r3, #0
 800a40a:	bf14      	ite	ne
 800a40c:	2301      	movne	r3, #1
 800a40e:	2300      	moveq	r3, #0
 800a410:	b2db      	uxtb	r3, r3
 800a412:	2b00      	cmp	r3, #0
 800a414:	d102      	bne.n	800a41c <USBH_ParseDevDesc+0x8a>
 800a416:	e006      	b.n	800a426 <USBH_ParseDevDesc+0x94>
 800a418:	2b40      	cmp	r3, #64	; 0x40
 800a41a:	d104      	bne.n	800a426 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	79da      	ldrb	r2, [r3, #7]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	71da      	strb	r2, [r3, #7]
      break;
 800a424:	e003      	b.n	800a42e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2240      	movs	r2, #64	; 0x40
 800a42a:	71da      	strb	r2, [r3, #7]
      break;
 800a42c:	bf00      	nop
  }

  if (length > 8U)
 800a42e:	88fb      	ldrh	r3, [r7, #6]
 800a430:	2b08      	cmp	r3, #8
 800a432:	d939      	bls.n	800a4a8 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	3308      	adds	r3, #8
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	b29a      	uxth	r2, r3
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	3309      	adds	r3, #9
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	b29b      	uxth	r3, r3
 800a444:	021b      	lsls	r3, r3, #8
 800a446:	b29b      	uxth	r3, r3
 800a448:	4313      	orrs	r3, r2
 800a44a:	b29a      	uxth	r2, r3
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	330a      	adds	r3, #10
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	b29a      	uxth	r2, r3
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	330b      	adds	r3, #11
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	b29b      	uxth	r3, r3
 800a460:	021b      	lsls	r3, r3, #8
 800a462:	b29b      	uxth	r3, r3
 800a464:	4313      	orrs	r3, r2
 800a466:	b29a      	uxth	r2, r3
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	330c      	adds	r3, #12
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	b29a      	uxth	r2, r3
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	330d      	adds	r3, #13
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	021b      	lsls	r3, r3, #8
 800a47e:	b29b      	uxth	r3, r3
 800a480:	4313      	orrs	r3, r2
 800a482:	b29a      	uxth	r2, r3
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	7b9a      	ldrb	r2, [r3, #14]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	7bda      	ldrb	r2, [r3, #15]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	7c1a      	ldrb	r2, [r3, #16]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	7c5a      	ldrb	r2, [r3, #17]
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	745a      	strb	r2, [r3, #17]
  }
}
 800a4a8:	bf00      	nop
 800a4aa:	3714      	adds	r7, #20
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b08c      	sub	sp, #48	; 0x30
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	4613      	mov	r3, r2
 800a4c0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a4c8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	781a      	ldrb	r2, [r3, #0]
 800a4e8:	6a3b      	ldr	r3, [r7, #32]
 800a4ea:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	785a      	ldrb	r2, [r3, #1]
 800a4f0:	6a3b      	ldr	r3, [r7, #32]
 800a4f2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	3302      	adds	r3, #2
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	b29a      	uxth	r2, r3
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	3303      	adds	r3, #3
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	b29b      	uxth	r3, r3
 800a504:	021b      	lsls	r3, r3, #8
 800a506:	b29b      	uxth	r3, r3
 800a508:	4313      	orrs	r3, r2
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a510:	bf28      	it	cs
 800a512:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800a516:	b29a      	uxth	r2, r3
 800a518:	6a3b      	ldr	r3, [r7, #32]
 800a51a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	791a      	ldrb	r2, [r3, #4]
 800a520:	6a3b      	ldr	r3, [r7, #32]
 800a522:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	795a      	ldrb	r2, [r3, #5]
 800a528:	6a3b      	ldr	r3, [r7, #32]
 800a52a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	799a      	ldrb	r2, [r3, #6]
 800a530:	6a3b      	ldr	r3, [r7, #32]
 800a532:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	79da      	ldrb	r2, [r3, #7]
 800a538:	6a3b      	ldr	r3, [r7, #32]
 800a53a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	7a1a      	ldrb	r2, [r3, #8]
 800a540:	6a3b      	ldr	r3, [r7, #32]
 800a542:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800a544:	6a3b      	ldr	r3, [r7, #32]
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	2b09      	cmp	r3, #9
 800a54a:	d002      	beq.n	800a552 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a54c:	6a3b      	ldr	r3, [r7, #32]
 800a54e:	2209      	movs	r2, #9
 800a550:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a552:	88fb      	ldrh	r3, [r7, #6]
 800a554:	2b09      	cmp	r3, #9
 800a556:	f240 809d 	bls.w	800a694 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800a55a:	2309      	movs	r3, #9
 800a55c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a55e:	2300      	movs	r3, #0
 800a560:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a562:	e081      	b.n	800a668 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a564:	f107 0316 	add.w	r3, r7, #22
 800a568:	4619      	mov	r1, r3
 800a56a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a56c:	f000 f99f 	bl	800a8ae <USBH_GetNextDesc>
 800a570:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a574:	785b      	ldrb	r3, [r3, #1]
 800a576:	2b04      	cmp	r3, #4
 800a578:	d176      	bne.n	800a668 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	2b09      	cmp	r3, #9
 800a580:	d002      	beq.n	800a588 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a584:	2209      	movs	r2, #9
 800a586:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a58c:	221a      	movs	r2, #26
 800a58e:	fb02 f303 	mul.w	r3, r2, r3
 800a592:	3308      	adds	r3, #8
 800a594:	6a3a      	ldr	r2, [r7, #32]
 800a596:	4413      	add	r3, r2
 800a598:	3302      	adds	r3, #2
 800a59a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a59c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a59e:	69f8      	ldr	r0, [r7, #28]
 800a5a0:	f000 f87e 	bl	800a6a0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a5ae:	e043      	b.n	800a638 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a5b0:	f107 0316 	add.w	r3, r7, #22
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5b8:	f000 f979 	bl	800a8ae <USBH_GetNextDesc>
 800a5bc:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c0:	785b      	ldrb	r3, [r3, #1]
 800a5c2:	2b05      	cmp	r3, #5
 800a5c4:	d138      	bne.n	800a638 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	795b      	ldrb	r3, [r3, #5]
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d10f      	bne.n	800a5ee <USBH_ParseCfgDesc+0x13a>
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	799b      	ldrb	r3, [r3, #6]
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	d10b      	bne.n	800a5ee <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a5d6:	69fb      	ldr	r3, [r7, #28]
 800a5d8:	79db      	ldrb	r3, [r3, #7]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d10f      	bne.n	800a5fe <USBH_ParseCfgDesc+0x14a>
 800a5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	2b09      	cmp	r3, #9
 800a5e4:	d00b      	beq.n	800a5fe <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800a5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e8:	2209      	movs	r2, #9
 800a5ea:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a5ec:	e007      	b.n	800a5fe <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800a5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	2b07      	cmp	r3, #7
 800a5f4:	d004      	beq.n	800a600 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f8:	2207      	movs	r2, #7
 800a5fa:	701a      	strb	r2, [r3, #0]
 800a5fc:	e000      	b.n	800a600 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a5fe:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a600:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a604:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a608:	3201      	adds	r2, #1
 800a60a:	00d2      	lsls	r2, r2, #3
 800a60c:	211a      	movs	r1, #26
 800a60e:	fb01 f303 	mul.w	r3, r1, r3
 800a612:	4413      	add	r3, r2
 800a614:	3308      	adds	r3, #8
 800a616:	6a3a      	ldr	r2, [r7, #32]
 800a618:	4413      	add	r3, r2
 800a61a:	3304      	adds	r3, #4
 800a61c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a61e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a620:	69b9      	ldr	r1, [r7, #24]
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	f000 f86b 	bl	800a6fe <USBH_ParseEPDesc>
 800a628:	4603      	mov	r3, r0
 800a62a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800a62e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a632:	3301      	adds	r3, #1
 800a634:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a638:	69fb      	ldr	r3, [r7, #28]
 800a63a:	791b      	ldrb	r3, [r3, #4]
 800a63c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a640:	429a      	cmp	r2, r3
 800a642:	d204      	bcs.n	800a64e <USBH_ParseCfgDesc+0x19a>
 800a644:	6a3b      	ldr	r3, [r7, #32]
 800a646:	885a      	ldrh	r2, [r3, #2]
 800a648:	8afb      	ldrh	r3, [r7, #22]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d8b0      	bhi.n	800a5b0 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a64e:	69fb      	ldr	r3, [r7, #28]
 800a650:	791b      	ldrb	r3, [r3, #4]
 800a652:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a656:	429a      	cmp	r2, r3
 800a658:	d201      	bcs.n	800a65e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800a65a:	2303      	movs	r3, #3
 800a65c:	e01c      	b.n	800a698 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800a65e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a662:	3301      	adds	r3, #1
 800a664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d805      	bhi.n	800a67c <USBH_ParseCfgDesc+0x1c8>
 800a670:	6a3b      	ldr	r3, [r7, #32]
 800a672:	885a      	ldrh	r2, [r3, #2]
 800a674:	8afb      	ldrh	r3, [r7, #22]
 800a676:	429a      	cmp	r2, r3
 800a678:	f63f af74 	bhi.w	800a564 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a67c:	6a3b      	ldr	r3, [r7, #32]
 800a67e:	791b      	ldrb	r3, [r3, #4]
 800a680:	2b02      	cmp	r3, #2
 800a682:	bf28      	it	cs
 800a684:	2302      	movcs	r3, #2
 800a686:	b2db      	uxtb	r3, r3
 800a688:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d201      	bcs.n	800a694 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800a690:	2303      	movs	r3, #3
 800a692:	e001      	b.n	800a698 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800a694:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3730      	adds	r7, #48	; 0x30
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b083      	sub	sp, #12
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	781a      	ldrb	r2, [r3, #0]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	785a      	ldrb	r2, [r3, #1]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	789a      	ldrb	r2, [r3, #2]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	78da      	ldrb	r2, [r3, #3]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	791a      	ldrb	r2, [r3, #4]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	795a      	ldrb	r2, [r3, #5]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	799a      	ldrb	r2, [r3, #6]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	79da      	ldrb	r2, [r3, #7]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	7a1a      	ldrb	r2, [r3, #8]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	721a      	strb	r2, [r3, #8]
}
 800a6f2:	bf00      	nop
 800a6f4:	370c      	adds	r7, #12
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr

0800a6fe <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800a6fe:	b480      	push	{r7}
 800a700:	b087      	sub	sp, #28
 800a702:	af00      	add	r7, sp, #0
 800a704:	60f8      	str	r0, [r7, #12]
 800a706:	60b9      	str	r1, [r7, #8]
 800a708:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a70a:	2300      	movs	r3, #0
 800a70c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	781a      	ldrb	r2, [r3, #0]
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	785a      	ldrb	r2, [r3, #1]
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	789a      	ldrb	r2, [r3, #2]
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	78da      	ldrb	r2, [r3, #3]
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	3304      	adds	r3, #4
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	b29a      	uxth	r2, r3
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	3305      	adds	r3, #5
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	021b      	lsls	r3, r3, #8
 800a740:	b29b      	uxth	r3, r3
 800a742:	4313      	orrs	r3, r2
 800a744:	b29a      	uxth	r2, r3
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	799a      	ldrb	r2, [r3, #6]
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	889b      	ldrh	r3, [r3, #4]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d102      	bne.n	800a760 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800a75a:	2303      	movs	r3, #3
 800a75c:	75fb      	strb	r3, [r7, #23]
 800a75e:	e033      	b.n	800a7c8 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	889b      	ldrh	r3, [r3, #4]
 800a764:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a768:	f023 0307 	bic.w	r3, r3, #7
 800a76c:	b29a      	uxth	r2, r3
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	889b      	ldrh	r3, [r3, #4]
 800a776:	b21a      	sxth	r2, r3
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	3304      	adds	r3, #4
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	b299      	uxth	r1, r3
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	3305      	adds	r3, #5
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	b29b      	uxth	r3, r3
 800a788:	021b      	lsls	r3, r3, #8
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	430b      	orrs	r3, r1
 800a78e:	b29b      	uxth	r3, r3
 800a790:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a794:	2b00      	cmp	r3, #0
 800a796:	d110      	bne.n	800a7ba <USBH_ParseEPDesc+0xbc>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	3304      	adds	r3, #4
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	b299      	uxth	r1, r3
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	3305      	adds	r3, #5
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	021b      	lsls	r3, r3, #8
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	430b      	orrs	r3, r1
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	b21b      	sxth	r3, r3
 800a7b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a7b6:	b21b      	sxth	r3, r3
 800a7b8:	e001      	b.n	800a7be <USBH_ParseEPDesc+0xc0>
 800a7ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	b21b      	sxth	r3, r3
 800a7c2:	b29a      	uxth	r2, r3
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d116      	bne.n	800a800 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	78db      	ldrb	r3, [r3, #3]
 800a7d6:	f003 0303 	and.w	r3, r3, #3
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d005      	beq.n	800a7ea <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	78db      	ldrb	r3, [r3, #3]
 800a7e2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a7e6:	2b03      	cmp	r3, #3
 800a7e8:	d127      	bne.n	800a83a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	799b      	ldrb	r3, [r3, #6]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d003      	beq.n	800a7fa <USBH_ParseEPDesc+0xfc>
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	799b      	ldrb	r3, [r3, #6]
 800a7f6:	2b10      	cmp	r3, #16
 800a7f8:	d91f      	bls.n	800a83a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a7fa:	2303      	movs	r3, #3
 800a7fc:	75fb      	strb	r3, [r7, #23]
 800a7fe:	e01c      	b.n	800a83a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	78db      	ldrb	r3, [r3, #3]
 800a804:	f003 0303 	and.w	r3, r3, #3
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d10a      	bne.n	800a822 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	799b      	ldrb	r3, [r3, #6]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d003      	beq.n	800a81c <USBH_ParseEPDesc+0x11e>
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	799b      	ldrb	r3, [r3, #6]
 800a818:	2b10      	cmp	r3, #16
 800a81a:	d90e      	bls.n	800a83a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a81c:	2303      	movs	r3, #3
 800a81e:	75fb      	strb	r3, [r7, #23]
 800a820:	e00b      	b.n	800a83a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	78db      	ldrb	r3, [r3, #3]
 800a826:	f003 0303 	and.w	r3, r3, #3
 800a82a:	2b03      	cmp	r3, #3
 800a82c:	d105      	bne.n	800a83a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	799b      	ldrb	r3, [r3, #6]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d101      	bne.n	800a83a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a836:	2303      	movs	r3, #3
 800a838:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800a83a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	371c      	adds	r7, #28
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a848:	b480      	push	{r7}
 800a84a:	b087      	sub	sp, #28
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	4613      	mov	r3, r2
 800a854:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	3301      	adds	r3, #1
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	2b03      	cmp	r3, #3
 800a85e:	d120      	bne.n	800a8a2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	781b      	ldrb	r3, [r3, #0]
 800a864:	1e9a      	subs	r2, r3, #2
 800a866:	88fb      	ldrh	r3, [r7, #6]
 800a868:	4293      	cmp	r3, r2
 800a86a:	bf28      	it	cs
 800a86c:	4613      	movcs	r3, r2
 800a86e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	3302      	adds	r3, #2
 800a874:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a876:	2300      	movs	r3, #0
 800a878:	82fb      	strh	r3, [r7, #22]
 800a87a:	e00b      	b.n	800a894 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a87c:	8afb      	ldrh	r3, [r7, #22]
 800a87e:	68fa      	ldr	r2, [r7, #12]
 800a880:	4413      	add	r3, r2
 800a882:	781a      	ldrb	r2, [r3, #0]
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	3301      	adds	r3, #1
 800a88c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a88e:	8afb      	ldrh	r3, [r7, #22]
 800a890:	3302      	adds	r3, #2
 800a892:	82fb      	strh	r3, [r7, #22]
 800a894:	8afa      	ldrh	r2, [r7, #22]
 800a896:	8abb      	ldrh	r3, [r7, #20]
 800a898:	429a      	cmp	r2, r3
 800a89a:	d3ef      	bcc.n	800a87c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	701a      	strb	r2, [r3, #0]
  }
}
 800a8a2:	bf00      	nop
 800a8a4:	371c      	adds	r7, #28
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr

0800a8ae <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a8ae:	b480      	push	{r7}
 800a8b0:	b085      	sub	sp, #20
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	6078      	str	r0, [r7, #4]
 800a8b6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	881a      	ldrh	r2, [r3, #0]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	4413      	add	r3, r2
 800a8c4:	b29a      	uxth	r2, r3
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	4413      	add	r3, r2
 800a8d4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3714      	adds	r7, #20
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b086      	sub	sp, #24
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	789b      	ldrb	r3, [r3, #2]
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d002      	beq.n	800a904 <USBH_CtlReq+0x20>
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d00f      	beq.n	800a922 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a902:	e027      	b.n	800a954 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	68ba      	ldr	r2, [r7, #8]
 800a908:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	88fa      	ldrh	r2, [r7, #6]
 800a90e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2201      	movs	r2, #1
 800a914:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2202      	movs	r2, #2
 800a91a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a91c:	2301      	movs	r3, #1
 800a91e:	75fb      	strb	r3, [r7, #23]
      break;
 800a920:	e018      	b.n	800a954 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a922:	68f8      	ldr	r0, [r7, #12]
 800a924:	f000 f81c 	bl	800a960 <USBH_HandleControl>
 800a928:	4603      	mov	r3, r0
 800a92a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a92c:	7dfb      	ldrb	r3, [r7, #23]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d002      	beq.n	800a938 <USBH_CtlReq+0x54>
 800a932:	7dfb      	ldrb	r3, [r7, #23]
 800a934:	2b03      	cmp	r3, #3
 800a936:	d106      	bne.n	800a946 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2201      	movs	r2, #1
 800a93c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2200      	movs	r2, #0
 800a942:	761a      	strb	r2, [r3, #24]
      break;
 800a944:	e005      	b.n	800a952 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a946:	7dfb      	ldrb	r3, [r7, #23]
 800a948:	2b02      	cmp	r3, #2
 800a94a:	d102      	bne.n	800a952 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2201      	movs	r2, #1
 800a950:	709a      	strb	r2, [r3, #2]
      break;
 800a952:	bf00      	nop
  }
  return status;
 800a954:	7dfb      	ldrb	r3, [r7, #23]
}
 800a956:	4618      	mov	r0, r3
 800a958:	3718      	adds	r7, #24
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
	...

0800a960 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b086      	sub	sp, #24
 800a964:	af02      	add	r7, sp, #8
 800a966:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a968:	2301      	movs	r3, #1
 800a96a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a96c:	2300      	movs	r3, #0
 800a96e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	7e1b      	ldrb	r3, [r3, #24]
 800a974:	3b01      	subs	r3, #1
 800a976:	2b0a      	cmp	r3, #10
 800a978:	f200 8156 	bhi.w	800ac28 <USBH_HandleControl+0x2c8>
 800a97c:	a201      	add	r2, pc, #4	; (adr r2, 800a984 <USBH_HandleControl+0x24>)
 800a97e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a982:	bf00      	nop
 800a984:	0800a9b1 	.word	0x0800a9b1
 800a988:	0800a9cb 	.word	0x0800a9cb
 800a98c:	0800aa35 	.word	0x0800aa35
 800a990:	0800aa5b 	.word	0x0800aa5b
 800a994:	0800aa93 	.word	0x0800aa93
 800a998:	0800aabd 	.word	0x0800aabd
 800a99c:	0800ab0f 	.word	0x0800ab0f
 800a9a0:	0800ab31 	.word	0x0800ab31
 800a9a4:	0800ab6d 	.word	0x0800ab6d
 800a9a8:	0800ab93 	.word	0x0800ab93
 800a9ac:	0800abd1 	.word	0x0800abd1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f103 0110 	add.w	r1, r3, #16
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	795b      	ldrb	r3, [r3, #5]
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 f943 	bl	800ac48 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2202      	movs	r2, #2
 800a9c6:	761a      	strb	r2, [r3, #24]
      break;
 800a9c8:	e139      	b.n	800ac3e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	795b      	ldrb	r3, [r3, #5]
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 fcc5 	bl	800b360 <USBH_LL_GetURBState>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a9da:	7bbb      	ldrb	r3, [r7, #14]
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d11e      	bne.n	800aa1e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	7c1b      	ldrb	r3, [r3, #16]
 800a9e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a9e8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	8adb      	ldrh	r3, [r3, #22]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d00a      	beq.n	800aa08 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a9f2:	7b7b      	ldrb	r3, [r7, #13]
 800a9f4:	2b80      	cmp	r3, #128	; 0x80
 800a9f6:	d103      	bne.n	800aa00 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2203      	movs	r2, #3
 800a9fc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a9fe:	e115      	b.n	800ac2c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2205      	movs	r2, #5
 800aa04:	761a      	strb	r2, [r3, #24]
      break;
 800aa06:	e111      	b.n	800ac2c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800aa08:	7b7b      	ldrb	r3, [r7, #13]
 800aa0a:	2b80      	cmp	r3, #128	; 0x80
 800aa0c:	d103      	bne.n	800aa16 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2209      	movs	r2, #9
 800aa12:	761a      	strb	r2, [r3, #24]
      break;
 800aa14:	e10a      	b.n	800ac2c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2207      	movs	r2, #7
 800aa1a:	761a      	strb	r2, [r3, #24]
      break;
 800aa1c:	e106      	b.n	800ac2c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800aa1e:	7bbb      	ldrb	r3, [r7, #14]
 800aa20:	2b04      	cmp	r3, #4
 800aa22:	d003      	beq.n	800aa2c <USBH_HandleControl+0xcc>
 800aa24:	7bbb      	ldrb	r3, [r7, #14]
 800aa26:	2b02      	cmp	r3, #2
 800aa28:	f040 8100 	bne.w	800ac2c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	220b      	movs	r2, #11
 800aa30:	761a      	strb	r2, [r3, #24]
      break;
 800aa32:	e0fb      	b.n	800ac2c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6899      	ldr	r1, [r3, #8]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	899a      	ldrh	r2, [r3, #12]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	791b      	ldrb	r3, [r3, #4]
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 f93a 	bl	800acc6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2204      	movs	r2, #4
 800aa56:	761a      	strb	r2, [r3, #24]
      break;
 800aa58:	e0f1      	b.n	800ac3e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	791b      	ldrb	r3, [r3, #4]
 800aa5e:	4619      	mov	r1, r3
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 fc7d 	bl	800b360 <USBH_LL_GetURBState>
 800aa66:	4603      	mov	r3, r0
 800aa68:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800aa6a:	7bbb      	ldrb	r3, [r7, #14]
 800aa6c:	2b01      	cmp	r3, #1
 800aa6e:	d102      	bne.n	800aa76 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2209      	movs	r2, #9
 800aa74:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800aa76:	7bbb      	ldrb	r3, [r7, #14]
 800aa78:	2b05      	cmp	r3, #5
 800aa7a:	d102      	bne.n	800aa82 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800aa7c:	2303      	movs	r3, #3
 800aa7e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800aa80:	e0d6      	b.n	800ac30 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800aa82:	7bbb      	ldrb	r3, [r7, #14]
 800aa84:	2b04      	cmp	r3, #4
 800aa86:	f040 80d3 	bne.w	800ac30 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	220b      	movs	r2, #11
 800aa8e:	761a      	strb	r2, [r3, #24]
      break;
 800aa90:	e0ce      	b.n	800ac30 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6899      	ldr	r1, [r3, #8]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	899a      	ldrh	r2, [r3, #12]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	795b      	ldrb	r3, [r3, #5]
 800aa9e:	2001      	movs	r0, #1
 800aaa0:	9000      	str	r0, [sp, #0]
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 f8ea 	bl	800ac7c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aaae:	b29a      	uxth	r2, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2206      	movs	r2, #6
 800aab8:	761a      	strb	r2, [r3, #24]
      break;
 800aaba:	e0c0      	b.n	800ac3e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	795b      	ldrb	r3, [r3, #5]
 800aac0:	4619      	mov	r1, r3
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 fc4c 	bl	800b360 <USBH_LL_GetURBState>
 800aac8:	4603      	mov	r3, r0
 800aaca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800aacc:	7bbb      	ldrb	r3, [r7, #14]
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d103      	bne.n	800aada <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2207      	movs	r2, #7
 800aad6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800aad8:	e0ac      	b.n	800ac34 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800aada:	7bbb      	ldrb	r3, [r7, #14]
 800aadc:	2b05      	cmp	r3, #5
 800aade:	d105      	bne.n	800aaec <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	220c      	movs	r2, #12
 800aae4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800aae6:	2303      	movs	r3, #3
 800aae8:	73fb      	strb	r3, [r7, #15]
      break;
 800aaea:	e0a3      	b.n	800ac34 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800aaec:	7bbb      	ldrb	r3, [r7, #14]
 800aaee:	2b02      	cmp	r3, #2
 800aaf0:	d103      	bne.n	800aafa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2205      	movs	r2, #5
 800aaf6:	761a      	strb	r2, [r3, #24]
      break;
 800aaf8:	e09c      	b.n	800ac34 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800aafa:	7bbb      	ldrb	r3, [r7, #14]
 800aafc:	2b04      	cmp	r3, #4
 800aafe:	f040 8099 	bne.w	800ac34 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	220b      	movs	r2, #11
 800ab06:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ab08:	2302      	movs	r3, #2
 800ab0a:	73fb      	strb	r3, [r7, #15]
      break;
 800ab0c:	e092      	b.n	800ac34 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	791b      	ldrb	r3, [r3, #4]
 800ab12:	2200      	movs	r2, #0
 800ab14:	2100      	movs	r1, #0
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 f8d5 	bl	800acc6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ab22:	b29a      	uxth	r2, r3
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2208      	movs	r2, #8
 800ab2c:	761a      	strb	r2, [r3, #24]

      break;
 800ab2e:	e086      	b.n	800ac3e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	791b      	ldrb	r3, [r3, #4]
 800ab34:	4619      	mov	r1, r3
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 fc12 	bl	800b360 <USBH_LL_GetURBState>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ab40:	7bbb      	ldrb	r3, [r7, #14]
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d105      	bne.n	800ab52 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	220d      	movs	r2, #13
 800ab4a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ab50:	e072      	b.n	800ac38 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800ab52:	7bbb      	ldrb	r3, [r7, #14]
 800ab54:	2b04      	cmp	r3, #4
 800ab56:	d103      	bne.n	800ab60 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	220b      	movs	r2, #11
 800ab5c:	761a      	strb	r2, [r3, #24]
      break;
 800ab5e:	e06b      	b.n	800ac38 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800ab60:	7bbb      	ldrb	r3, [r7, #14]
 800ab62:	2b05      	cmp	r3, #5
 800ab64:	d168      	bne.n	800ac38 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800ab66:	2303      	movs	r3, #3
 800ab68:	73fb      	strb	r3, [r7, #15]
      break;
 800ab6a:	e065      	b.n	800ac38 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	795b      	ldrb	r3, [r3, #5]
 800ab70:	2201      	movs	r2, #1
 800ab72:	9200      	str	r2, [sp, #0]
 800ab74:	2200      	movs	r2, #0
 800ab76:	2100      	movs	r1, #0
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 f87f 	bl	800ac7c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ab84:	b29a      	uxth	r2, r3
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	220a      	movs	r2, #10
 800ab8e:	761a      	strb	r2, [r3, #24]
      break;
 800ab90:	e055      	b.n	800ac3e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	795b      	ldrb	r3, [r3, #5]
 800ab96:	4619      	mov	r1, r3
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 fbe1 	bl	800b360 <USBH_LL_GetURBState>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800aba2:	7bbb      	ldrb	r3, [r7, #14]
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d105      	bne.n	800abb4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800aba8:	2300      	movs	r3, #0
 800abaa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	220d      	movs	r2, #13
 800abb0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800abb2:	e043      	b.n	800ac3c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800abb4:	7bbb      	ldrb	r3, [r7, #14]
 800abb6:	2b02      	cmp	r3, #2
 800abb8:	d103      	bne.n	800abc2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2209      	movs	r2, #9
 800abbe:	761a      	strb	r2, [r3, #24]
      break;
 800abc0:	e03c      	b.n	800ac3c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800abc2:	7bbb      	ldrb	r3, [r7, #14]
 800abc4:	2b04      	cmp	r3, #4
 800abc6:	d139      	bne.n	800ac3c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	220b      	movs	r2, #11
 800abcc:	761a      	strb	r2, [r3, #24]
      break;
 800abce:	e035      	b.n	800ac3c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	7e5b      	ldrb	r3, [r3, #25]
 800abd4:	3301      	adds	r3, #1
 800abd6:	b2da      	uxtb	r2, r3
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	765a      	strb	r2, [r3, #25]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	7e5b      	ldrb	r3, [r3, #25]
 800abe0:	2b02      	cmp	r3, #2
 800abe2:	d806      	bhi.n	800abf2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2201      	movs	r2, #1
 800abe8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2201      	movs	r2, #1
 800abee:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800abf0:	e025      	b.n	800ac3e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800abf8:	2106      	movs	r1, #6
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	795b      	ldrb	r3, [r3, #5]
 800ac08:	4619      	mov	r1, r3
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 f90c 	bl	800ae28 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	791b      	ldrb	r3, [r3, #4]
 800ac14:	4619      	mov	r1, r3
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 f906 	bl	800ae28 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ac22:	2302      	movs	r3, #2
 800ac24:	73fb      	strb	r3, [r7, #15]
      break;
 800ac26:	e00a      	b.n	800ac3e <USBH_HandleControl+0x2de>

    default:
      break;
 800ac28:	bf00      	nop
 800ac2a:	e008      	b.n	800ac3e <USBH_HandleControl+0x2de>
      break;
 800ac2c:	bf00      	nop
 800ac2e:	e006      	b.n	800ac3e <USBH_HandleControl+0x2de>
      break;
 800ac30:	bf00      	nop
 800ac32:	e004      	b.n	800ac3e <USBH_HandleControl+0x2de>
      break;
 800ac34:	bf00      	nop
 800ac36:	e002      	b.n	800ac3e <USBH_HandleControl+0x2de>
      break;
 800ac38:	bf00      	nop
 800ac3a:	e000      	b.n	800ac3e <USBH_HandleControl+0x2de>
      break;
 800ac3c:	bf00      	nop
  }

  return status;
 800ac3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3710      	adds	r7, #16
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b088      	sub	sp, #32
 800ac4c:	af04      	add	r7, sp, #16
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	4613      	mov	r3, r2
 800ac54:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ac56:	79f9      	ldrb	r1, [r7, #7]
 800ac58:	2300      	movs	r3, #0
 800ac5a:	9303      	str	r3, [sp, #12]
 800ac5c:	2308      	movs	r3, #8
 800ac5e:	9302      	str	r3, [sp, #8]
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	9301      	str	r3, [sp, #4]
 800ac64:	2300      	movs	r3, #0
 800ac66:	9300      	str	r3, [sp, #0]
 800ac68:	2300      	movs	r3, #0
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	68f8      	ldr	r0, [r7, #12]
 800ac6e:	f000 fb46 	bl	800b2fe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800ac72:	2300      	movs	r3, #0
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3710      	adds	r7, #16
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b088      	sub	sp, #32
 800ac80:	af04      	add	r7, sp, #16
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	4611      	mov	r1, r2
 800ac88:	461a      	mov	r2, r3
 800ac8a:	460b      	mov	r3, r1
 800ac8c:	80fb      	strh	r3, [r7, #6]
 800ac8e:	4613      	mov	r3, r2
 800ac90:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d001      	beq.n	800aca0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aca0:	7979      	ldrb	r1, [r7, #5]
 800aca2:	7e3b      	ldrb	r3, [r7, #24]
 800aca4:	9303      	str	r3, [sp, #12]
 800aca6:	88fb      	ldrh	r3, [r7, #6]
 800aca8:	9302      	str	r3, [sp, #8]
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	9301      	str	r3, [sp, #4]
 800acae:	2301      	movs	r3, #1
 800acb0:	9300      	str	r3, [sp, #0]
 800acb2:	2300      	movs	r3, #0
 800acb4:	2200      	movs	r2, #0
 800acb6:	68f8      	ldr	r0, [r7, #12]
 800acb8:	f000 fb21 	bl	800b2fe <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800acbc:	2300      	movs	r3, #0
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3710      	adds	r7, #16
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b088      	sub	sp, #32
 800acca:	af04      	add	r7, sp, #16
 800accc:	60f8      	str	r0, [r7, #12]
 800acce:	60b9      	str	r1, [r7, #8]
 800acd0:	4611      	mov	r1, r2
 800acd2:	461a      	mov	r2, r3
 800acd4:	460b      	mov	r3, r1
 800acd6:	80fb      	strh	r3, [r7, #6]
 800acd8:	4613      	mov	r3, r2
 800acda:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800acdc:	7979      	ldrb	r1, [r7, #5]
 800acde:	2300      	movs	r3, #0
 800ace0:	9303      	str	r3, [sp, #12]
 800ace2:	88fb      	ldrh	r3, [r7, #6]
 800ace4:	9302      	str	r3, [sp, #8]
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	9301      	str	r3, [sp, #4]
 800acea:	2301      	movs	r3, #1
 800acec:	9300      	str	r3, [sp, #0]
 800acee:	2300      	movs	r3, #0
 800acf0:	2201      	movs	r2, #1
 800acf2:	68f8      	ldr	r0, [r7, #12]
 800acf4:	f000 fb03 	bl	800b2fe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800acf8:	2300      	movs	r3, #0

}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3710      	adds	r7, #16
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b088      	sub	sp, #32
 800ad06:	af04      	add	r7, sp, #16
 800ad08:	60f8      	str	r0, [r7, #12]
 800ad0a:	60b9      	str	r1, [r7, #8]
 800ad0c:	4611      	mov	r1, r2
 800ad0e:	461a      	mov	r2, r3
 800ad10:	460b      	mov	r3, r1
 800ad12:	80fb      	strh	r3, [r7, #6]
 800ad14:	4613      	mov	r3, r2
 800ad16:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d001      	beq.n	800ad26 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ad22:	2300      	movs	r3, #0
 800ad24:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ad26:	7979      	ldrb	r1, [r7, #5]
 800ad28:	7e3b      	ldrb	r3, [r7, #24]
 800ad2a:	9303      	str	r3, [sp, #12]
 800ad2c:	88fb      	ldrh	r3, [r7, #6]
 800ad2e:	9302      	str	r3, [sp, #8]
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	9301      	str	r3, [sp, #4]
 800ad34:	2301      	movs	r3, #1
 800ad36:	9300      	str	r3, [sp, #0]
 800ad38:	2302      	movs	r3, #2
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	68f8      	ldr	r0, [r7, #12]
 800ad3e:	f000 fade 	bl	800b2fe <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ad42:	2300      	movs	r3, #0
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b088      	sub	sp, #32
 800ad50:	af04      	add	r7, sp, #16
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	4611      	mov	r1, r2
 800ad58:	461a      	mov	r2, r3
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	80fb      	strh	r3, [r7, #6]
 800ad5e:	4613      	mov	r3, r2
 800ad60:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ad62:	7979      	ldrb	r1, [r7, #5]
 800ad64:	2300      	movs	r3, #0
 800ad66:	9303      	str	r3, [sp, #12]
 800ad68:	88fb      	ldrh	r3, [r7, #6]
 800ad6a:	9302      	str	r3, [sp, #8]
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	9301      	str	r3, [sp, #4]
 800ad70:	2301      	movs	r3, #1
 800ad72:	9300      	str	r3, [sp, #0]
 800ad74:	2302      	movs	r3, #2
 800ad76:	2201      	movs	r2, #1
 800ad78:	68f8      	ldr	r0, [r7, #12]
 800ad7a:	f000 fac0 	bl	800b2fe <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ad7e:	2300      	movs	r3, #0
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3710      	adds	r7, #16
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b086      	sub	sp, #24
 800ad8c:	af04      	add	r7, sp, #16
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	4608      	mov	r0, r1
 800ad92:	4611      	mov	r1, r2
 800ad94:	461a      	mov	r2, r3
 800ad96:	4603      	mov	r3, r0
 800ad98:	70fb      	strb	r3, [r7, #3]
 800ad9a:	460b      	mov	r3, r1
 800ad9c:	70bb      	strb	r3, [r7, #2]
 800ad9e:	4613      	mov	r3, r2
 800ada0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ada2:	7878      	ldrb	r0, [r7, #1]
 800ada4:	78ba      	ldrb	r2, [r7, #2]
 800ada6:	78f9      	ldrb	r1, [r7, #3]
 800ada8:	8b3b      	ldrh	r3, [r7, #24]
 800adaa:	9302      	str	r3, [sp, #8]
 800adac:	7d3b      	ldrb	r3, [r7, #20]
 800adae:	9301      	str	r3, [sp, #4]
 800adb0:	7c3b      	ldrb	r3, [r7, #16]
 800adb2:	9300      	str	r3, [sp, #0]
 800adb4:	4603      	mov	r3, r0
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 fa53 	bl	800b262 <USBH_LL_OpenPipe>

  return USBH_OK;
 800adbc:	2300      	movs	r3, #0
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3708      	adds	r7, #8
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b082      	sub	sp, #8
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
 800adce:	460b      	mov	r3, r1
 800add0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800add2:	78fb      	ldrb	r3, [r7, #3]
 800add4:	4619      	mov	r1, r3
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 fa72 	bl	800b2c0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800addc:	2300      	movs	r3, #0
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3708      	adds	r7, #8
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b084      	sub	sp, #16
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
 800adee:	460b      	mov	r3, r1
 800adf0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 f836 	bl	800ae64 <USBH_GetFreePipe>
 800adf8:	4603      	mov	r3, r0
 800adfa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800adfc:	89fb      	ldrh	r3, [r7, #14]
 800adfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d00a      	beq.n	800ae1c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ae06:	78fa      	ldrb	r2, [r7, #3]
 800ae08:	89fb      	ldrh	r3, [r7, #14]
 800ae0a:	f003 030f 	and.w	r3, r3, #15
 800ae0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ae12:	6879      	ldr	r1, [r7, #4]
 800ae14:	33e0      	adds	r3, #224	; 0xe0
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	440b      	add	r3, r1
 800ae1a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ae1c:	89fb      	ldrh	r3, [r7, #14]
 800ae1e:	b2db      	uxtb	r3, r3
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3710      	adds	r7, #16
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b083      	sub	sp, #12
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	460b      	mov	r3, r1
 800ae32:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ae34:	78fb      	ldrb	r3, [r7, #3]
 800ae36:	2b0f      	cmp	r3, #15
 800ae38:	d80d      	bhi.n	800ae56 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ae3a:	78fb      	ldrb	r3, [r7, #3]
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	33e0      	adds	r3, #224	; 0xe0
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	4413      	add	r3, r2
 800ae44:	685a      	ldr	r2, [r3, #4]
 800ae46:	78fb      	ldrb	r3, [r7, #3]
 800ae48:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ae4c:	6879      	ldr	r1, [r7, #4]
 800ae4e:	33e0      	adds	r3, #224	; 0xe0
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	440b      	add	r3, r1
 800ae54:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ae56:	2300      	movs	r3, #0
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	370c      	adds	r7, #12
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b085      	sub	sp, #20
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800ae70:	2300      	movs	r3, #0
 800ae72:	73fb      	strb	r3, [r7, #15]
 800ae74:	e00f      	b.n	800ae96 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ae76:	7bfb      	ldrb	r3, [r7, #15]
 800ae78:	687a      	ldr	r2, [r7, #4]
 800ae7a:	33e0      	adds	r3, #224	; 0xe0
 800ae7c:	009b      	lsls	r3, r3, #2
 800ae7e:	4413      	add	r3, r2
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d102      	bne.n	800ae90 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ae8a:	7bfb      	ldrb	r3, [r7, #15]
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	e007      	b.n	800aea0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800ae90:	7bfb      	ldrb	r3, [r7, #15]
 800ae92:	3301      	adds	r3, #1
 800ae94:	73fb      	strb	r3, [r7, #15]
 800ae96:	7bfb      	ldrb	r3, [r7, #15]
 800ae98:	2b0f      	cmp	r3, #15
 800ae9a:	d9ec      	bls.n	800ae76 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ae9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3714      	adds	r7, #20
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr

0800aeac <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	490e      	ldr	r1, [pc, #56]	; (800aeec <MX_USB_HOST_Init+0x40>)
 800aeb4:	480e      	ldr	r0, [pc, #56]	; (800aef0 <MX_USB_HOST_Init+0x44>)
 800aeb6:	f7fe fba7 	bl	8009608 <USBH_Init>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d001      	beq.n	800aec4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800aec0:	f7f5 fc48 	bl	8000754 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800aec4:	490b      	ldr	r1, [pc, #44]	; (800aef4 <MX_USB_HOST_Init+0x48>)
 800aec6:	480a      	ldr	r0, [pc, #40]	; (800aef0 <MX_USB_HOST_Init+0x44>)
 800aec8:	f7fe fc2c 	bl	8009724 <USBH_RegisterClass>
 800aecc:	4603      	mov	r3, r0
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d001      	beq.n	800aed6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800aed2:	f7f5 fc3f 	bl	8000754 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800aed6:	4806      	ldr	r0, [pc, #24]	; (800aef0 <MX_USB_HOST_Init+0x44>)
 800aed8:	f7fe fcb0 	bl	800983c <USBH_Start>
 800aedc:	4603      	mov	r3, r0
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d001      	beq.n	800aee6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800aee2:	f7f5 fc37 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800aee6:	bf00      	nop
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	0800af0d 	.word	0x0800af0d
 800aef0:	20000210 	.word	0x20000210
 800aef4:	20000070 	.word	0x20000070

0800aef8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800aefc:	4802      	ldr	r0, [pc, #8]	; (800af08 <MX_USB_HOST_Process+0x10>)
 800aefe:	f7fe fcad 	bl	800985c <USBH_Process>
}
 800af02:	bf00      	nop
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	20000210 	.word	0x20000210

0800af0c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b083      	sub	sp, #12
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	460b      	mov	r3, r1
 800af16:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800af18:	78fb      	ldrb	r3, [r7, #3]
 800af1a:	3b01      	subs	r3, #1
 800af1c:	2b04      	cmp	r3, #4
 800af1e:	d819      	bhi.n	800af54 <USBH_UserProcess+0x48>
 800af20:	a201      	add	r2, pc, #4	; (adr r2, 800af28 <USBH_UserProcess+0x1c>)
 800af22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af26:	bf00      	nop
 800af28:	0800af55 	.word	0x0800af55
 800af2c:	0800af45 	.word	0x0800af45
 800af30:	0800af55 	.word	0x0800af55
 800af34:	0800af4d 	.word	0x0800af4d
 800af38:	0800af3d 	.word	0x0800af3d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800af3c:	4b09      	ldr	r3, [pc, #36]	; (800af64 <USBH_UserProcess+0x58>)
 800af3e:	2203      	movs	r2, #3
 800af40:	701a      	strb	r2, [r3, #0]
  break;
 800af42:	e008      	b.n	800af56 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800af44:	4b07      	ldr	r3, [pc, #28]	; (800af64 <USBH_UserProcess+0x58>)
 800af46:	2202      	movs	r2, #2
 800af48:	701a      	strb	r2, [r3, #0]
  break;
 800af4a:	e004      	b.n	800af56 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800af4c:	4b05      	ldr	r3, [pc, #20]	; (800af64 <USBH_UserProcess+0x58>)
 800af4e:	2201      	movs	r2, #1
 800af50:	701a      	strb	r2, [r3, #0]
  break;
 800af52:	e000      	b.n	800af56 <USBH_UserProcess+0x4a>

  default:
  break;
 800af54:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800af56:	bf00      	nop
 800af58:	370c      	adds	r7, #12
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	200005e8 	.word	0x200005e8

0800af68 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b08a      	sub	sp, #40	; 0x28
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af70:	f107 0314 	add.w	r3, r7, #20
 800af74:	2200      	movs	r2, #0
 800af76:	601a      	str	r2, [r3, #0]
 800af78:	605a      	str	r2, [r3, #4]
 800af7a:	609a      	str	r2, [r3, #8]
 800af7c:	60da      	str	r2, [r3, #12]
 800af7e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af88:	d147      	bne.n	800b01a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af8a:	2300      	movs	r3, #0
 800af8c:	613b      	str	r3, [r7, #16]
 800af8e:	4b25      	ldr	r3, [pc, #148]	; (800b024 <HAL_HCD_MspInit+0xbc>)
 800af90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af92:	4a24      	ldr	r2, [pc, #144]	; (800b024 <HAL_HCD_MspInit+0xbc>)
 800af94:	f043 0301 	orr.w	r3, r3, #1
 800af98:	6313      	str	r3, [r2, #48]	; 0x30
 800af9a:	4b22      	ldr	r3, [pc, #136]	; (800b024 <HAL_HCD_MspInit+0xbc>)
 800af9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af9e:	f003 0301 	and.w	r3, r3, #1
 800afa2:	613b      	str	r3, [r7, #16]
 800afa4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800afa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800afac:	2300      	movs	r3, #0
 800afae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afb0:	2300      	movs	r3, #0
 800afb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800afb4:	f107 0314 	add.w	r3, r7, #20
 800afb8:	4619      	mov	r1, r3
 800afba:	481b      	ldr	r0, [pc, #108]	; (800b028 <HAL_HCD_MspInit+0xc0>)
 800afbc:	f7f9 f8e0 	bl	8004180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800afc0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800afc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afc6:	2302      	movs	r3, #2
 800afc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afca:	2300      	movs	r3, #0
 800afcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800afce:	2300      	movs	r3, #0
 800afd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800afd2:	230a      	movs	r3, #10
 800afd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800afd6:	f107 0314 	add.w	r3, r7, #20
 800afda:	4619      	mov	r1, r3
 800afdc:	4812      	ldr	r0, [pc, #72]	; (800b028 <HAL_HCD_MspInit+0xc0>)
 800afde:	f7f9 f8cf 	bl	8004180 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800afe2:	4b10      	ldr	r3, [pc, #64]	; (800b024 <HAL_HCD_MspInit+0xbc>)
 800afe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afe6:	4a0f      	ldr	r2, [pc, #60]	; (800b024 <HAL_HCD_MspInit+0xbc>)
 800afe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afec:	6353      	str	r3, [r2, #52]	; 0x34
 800afee:	2300      	movs	r3, #0
 800aff0:	60fb      	str	r3, [r7, #12]
 800aff2:	4b0c      	ldr	r3, [pc, #48]	; (800b024 <HAL_HCD_MspInit+0xbc>)
 800aff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aff6:	4a0b      	ldr	r2, [pc, #44]	; (800b024 <HAL_HCD_MspInit+0xbc>)
 800aff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800affc:	6453      	str	r3, [r2, #68]	; 0x44
 800affe:	4b09      	ldr	r3, [pc, #36]	; (800b024 <HAL_HCD_MspInit+0xbc>)
 800b000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b006:	60fb      	str	r3, [r7, #12]
 800b008:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b00a:	2200      	movs	r2, #0
 800b00c:	2100      	movs	r1, #0
 800b00e:	2043      	movs	r0, #67	; 0x43
 800b010:	f7f9 f87f 	bl	8004112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b014:	2043      	movs	r0, #67	; 0x43
 800b016:	f7f9 f898 	bl	800414a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b01a:	bf00      	nop
 800b01c:	3728      	adds	r7, #40	; 0x28
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
 800b022:	bf00      	nop
 800b024:	40023800 	.word	0x40023800
 800b028:	40020000 	.word	0x40020000

0800b02c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b082      	sub	sp, #8
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b03a:	4618      	mov	r0, r3
 800b03c:	f7fe ffed 	bl	800a01a <USBH_LL_IncTimer>
}
 800b040:	bf00      	nop
 800b042:	3708      	adds	r7, #8
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b056:	4618      	mov	r0, r3
 800b058:	f7ff f825 	bl	800a0a6 <USBH_LL_Connect>
}
 800b05c:	bf00      	nop
 800b05e:	3708      	adds	r7, #8
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b082      	sub	sp, #8
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b072:	4618      	mov	r0, r3
 800b074:	f7ff f82e 	bl	800a0d4 <USBH_LL_Disconnect>
}
 800b078:	bf00      	nop
 800b07a:	3708      	adds	r7, #8
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b080:	b480      	push	{r7}
 800b082:	b083      	sub	sp, #12
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	460b      	mov	r3, r1
 800b08a:	70fb      	strb	r3, [r7, #3]
 800b08c:	4613      	mov	r3, r2
 800b08e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b090:	bf00      	nop
 800b092:	370c      	adds	r7, #12
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr

0800b09c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f7fe ffdf 	bl	800a06e <USBH_LL_PortEnabled>
}
 800b0b0:	bf00      	nop
 800b0b2:	3708      	adds	r7, #8
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7fe ffdf 	bl	800a08a <USBH_LL_PortDisabled>
}
 800b0cc:	bf00      	nop
 800b0ce:	3708      	adds	r7, #8
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d12a      	bne.n	800b13c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b0e6:	4a18      	ldr	r2, [pc, #96]	; (800b148 <USBH_LL_Init+0x74>)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	4a15      	ldr	r2, [pc, #84]	; (800b148 <USBH_LL_Init+0x74>)
 800b0f2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b0f6:	4b14      	ldr	r3, [pc, #80]	; (800b148 <USBH_LL_Init+0x74>)
 800b0f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b0fc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b0fe:	4b12      	ldr	r3, [pc, #72]	; (800b148 <USBH_LL_Init+0x74>)
 800b100:	2208      	movs	r2, #8
 800b102:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b104:	4b10      	ldr	r3, [pc, #64]	; (800b148 <USBH_LL_Init+0x74>)
 800b106:	2201      	movs	r2, #1
 800b108:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b10a:	4b0f      	ldr	r3, [pc, #60]	; (800b148 <USBH_LL_Init+0x74>)
 800b10c:	2200      	movs	r2, #0
 800b10e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b110:	4b0d      	ldr	r3, [pc, #52]	; (800b148 <USBH_LL_Init+0x74>)
 800b112:	2202      	movs	r2, #2
 800b114:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b116:	4b0c      	ldr	r3, [pc, #48]	; (800b148 <USBH_LL_Init+0x74>)
 800b118:	2200      	movs	r2, #0
 800b11a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b11c:	480a      	ldr	r0, [pc, #40]	; (800b148 <USBH_LL_Init+0x74>)
 800b11e:	f7f9 fae0 	bl	80046e2 <HAL_HCD_Init>
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d001      	beq.n	800b12c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b128:	f7f5 fb14 	bl	8000754 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b12c:	4806      	ldr	r0, [pc, #24]	; (800b148 <USBH_LL_Init+0x74>)
 800b12e:	f7f9 fec4 	bl	8004eba <HAL_HCD_GetCurrentFrame>
 800b132:	4603      	mov	r3, r0
 800b134:	4619      	mov	r1, r3
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f7fe ff60 	bl	8009ffc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b13c:	2300      	movs	r3, #0
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3708      	adds	r7, #8
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	200005ec 	.word	0x200005ec

0800b14c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b154:	2300      	movs	r3, #0
 800b156:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b158:	2300      	movs	r3, #0
 800b15a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b162:	4618      	mov	r0, r3
 800b164:	f7f9 fe33 	bl	8004dce <HAL_HCD_Start>
 800b168:	4603      	mov	r3, r0
 800b16a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b16c:	7bfb      	ldrb	r3, [r7, #15]
 800b16e:	4618      	mov	r0, r3
 800b170:	f000 f95c 	bl	800b42c <USBH_Get_USB_Status>
 800b174:	4603      	mov	r3, r0
 800b176:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b178:	7bbb      	ldrb	r3, [r7, #14]
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3710      	adds	r7, #16
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}

0800b182 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b182:	b580      	push	{r7, lr}
 800b184:	b084      	sub	sp, #16
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b18a:	2300      	movs	r3, #0
 800b18c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b18e:	2300      	movs	r3, #0
 800b190:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b198:	4618      	mov	r0, r3
 800b19a:	f7f9 fe3b 	bl	8004e14 <HAL_HCD_Stop>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b1a2:	7bfb      	ldrb	r3, [r7, #15]
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f000 f941 	bl	800b42c <USBH_Get_USB_Status>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3710      	adds	r7, #16
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b084      	sub	sp, #16
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7f9 fe83 	bl	8004ed6 <HAL_HCD_GetCurrentSpeed>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	2b02      	cmp	r3, #2
 800b1d4:	d00c      	beq.n	800b1f0 <USBH_LL_GetSpeed+0x38>
 800b1d6:	2b02      	cmp	r3, #2
 800b1d8:	d80d      	bhi.n	800b1f6 <USBH_LL_GetSpeed+0x3e>
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d002      	beq.n	800b1e4 <USBH_LL_GetSpeed+0x2c>
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d003      	beq.n	800b1ea <USBH_LL_GetSpeed+0x32>
 800b1e2:	e008      	b.n	800b1f6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	73fb      	strb	r3, [r7, #15]
    break;
 800b1e8:	e008      	b.n	800b1fc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	73fb      	strb	r3, [r7, #15]
    break;
 800b1ee:	e005      	b.n	800b1fc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b1f0:	2302      	movs	r3, #2
 800b1f2:	73fb      	strb	r3, [r7, #15]
    break;
 800b1f4:	e002      	b.n	800b1fc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	73fb      	strb	r3, [r7, #15]
    break;
 800b1fa:	bf00      	nop
  }
  return  speed;
 800b1fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3710      	adds	r7, #16
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b206:	b580      	push	{r7, lr}
 800b208:	b084      	sub	sp, #16
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b20e:	2300      	movs	r3, #0
 800b210:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b212:	2300      	movs	r3, #0
 800b214:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b21c:	4618      	mov	r0, r3
 800b21e:	f7f9 fe16 	bl	8004e4e <HAL_HCD_ResetPort>
 800b222:	4603      	mov	r3, r0
 800b224:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b226:	7bfb      	ldrb	r3, [r7, #15]
 800b228:	4618      	mov	r0, r3
 800b22a:	f000 f8ff 	bl	800b42c <USBH_Get_USB_Status>
 800b22e:	4603      	mov	r3, r0
 800b230:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b232:	7bbb      	ldrb	r3, [r7, #14]
}
 800b234:	4618      	mov	r0, r3
 800b236:	3710      	adds	r7, #16
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	460b      	mov	r3, r1
 800b246:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b24e:	78fa      	ldrb	r2, [r7, #3]
 800b250:	4611      	mov	r1, r2
 800b252:	4618      	mov	r0, r3
 800b254:	f7f9 fe1d 	bl	8004e92 <HAL_HCD_HC_GetXferCount>
 800b258:	4603      	mov	r3, r0
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3708      	adds	r7, #8
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}

0800b262 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b262:	b590      	push	{r4, r7, lr}
 800b264:	b089      	sub	sp, #36	; 0x24
 800b266:	af04      	add	r7, sp, #16
 800b268:	6078      	str	r0, [r7, #4]
 800b26a:	4608      	mov	r0, r1
 800b26c:	4611      	mov	r1, r2
 800b26e:	461a      	mov	r2, r3
 800b270:	4603      	mov	r3, r0
 800b272:	70fb      	strb	r3, [r7, #3]
 800b274:	460b      	mov	r3, r1
 800b276:	70bb      	strb	r3, [r7, #2]
 800b278:	4613      	mov	r3, r2
 800b27a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b27c:	2300      	movs	r3, #0
 800b27e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b280:	2300      	movs	r3, #0
 800b282:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b28a:	787c      	ldrb	r4, [r7, #1]
 800b28c:	78ba      	ldrb	r2, [r7, #2]
 800b28e:	78f9      	ldrb	r1, [r7, #3]
 800b290:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b292:	9302      	str	r3, [sp, #8]
 800b294:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b298:	9301      	str	r3, [sp, #4]
 800b29a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b29e:	9300      	str	r3, [sp, #0]
 800b2a0:	4623      	mov	r3, r4
 800b2a2:	f7f9 fa80 	bl	80047a6 <HAL_HCD_HC_Init>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b2aa:	7bfb      	ldrb	r3, [r7, #15]
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f000 f8bd 	bl	800b42c <USBH_Get_USB_Status>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3714      	adds	r7, #20
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd90      	pop	{r4, r7, pc}

0800b2c0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b2da:	78fa      	ldrb	r2, [r7, #3]
 800b2dc:	4611      	mov	r1, r2
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7f9 faf0 	bl	80048c4 <HAL_HCD_HC_Halt>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b2e8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f000 f89e 	bl	800b42c <USBH_Get_USB_Status>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3710      	adds	r7, #16
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}

0800b2fe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b2fe:	b590      	push	{r4, r7, lr}
 800b300:	b089      	sub	sp, #36	; 0x24
 800b302:	af04      	add	r7, sp, #16
 800b304:	6078      	str	r0, [r7, #4]
 800b306:	4608      	mov	r0, r1
 800b308:	4611      	mov	r1, r2
 800b30a:	461a      	mov	r2, r3
 800b30c:	4603      	mov	r3, r0
 800b30e:	70fb      	strb	r3, [r7, #3]
 800b310:	460b      	mov	r3, r1
 800b312:	70bb      	strb	r3, [r7, #2]
 800b314:	4613      	mov	r3, r2
 800b316:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b318:	2300      	movs	r3, #0
 800b31a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b31c:	2300      	movs	r3, #0
 800b31e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b326:	787c      	ldrb	r4, [r7, #1]
 800b328:	78ba      	ldrb	r2, [r7, #2]
 800b32a:	78f9      	ldrb	r1, [r7, #3]
 800b32c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b330:	9303      	str	r3, [sp, #12]
 800b332:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b334:	9302      	str	r3, [sp, #8]
 800b336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b338:	9301      	str	r3, [sp, #4]
 800b33a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b33e:	9300      	str	r3, [sp, #0]
 800b340:	4623      	mov	r3, r4
 800b342:	f7f9 fae3 	bl	800490c <HAL_HCD_HC_SubmitRequest>
 800b346:	4603      	mov	r3, r0
 800b348:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b34a:	7bfb      	ldrb	r3, [r7, #15]
 800b34c:	4618      	mov	r0, r3
 800b34e:	f000 f86d 	bl	800b42c <USBH_Get_USB_Status>
 800b352:	4603      	mov	r3, r0
 800b354:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b356:	7bbb      	ldrb	r3, [r7, #14]
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3714      	adds	r7, #20
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd90      	pop	{r4, r7, pc}

0800b360 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b082      	sub	sp, #8
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	460b      	mov	r3, r1
 800b36a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b372:	78fa      	ldrb	r2, [r7, #3]
 800b374:	4611      	mov	r1, r2
 800b376:	4618      	mov	r0, r3
 800b378:	f7f9 fd77 	bl	8004e6a <HAL_HCD_HC_GetURBState>
 800b37c:	4603      	mov	r3, r0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3708      	adds	r7, #8
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b082      	sub	sp, #8
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
 800b38e:	460b      	mov	r3, r1
 800b390:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d103      	bne.n	800b3a4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b39c:	78fb      	ldrb	r3, [r7, #3]
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f000 f870 	bl	800b484 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b3a4:	20c8      	movs	r0, #200	; 0xc8
 800b3a6:	f7f8 fdb5 	bl	8003f14 <HAL_Delay>
  return USBH_OK;
 800b3aa:	2300      	movs	r3, #0
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3708      	adds	r7, #8
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b085      	sub	sp, #20
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	460b      	mov	r3, r1
 800b3be:	70fb      	strb	r3, [r7, #3]
 800b3c0:	4613      	mov	r3, r2
 800b3c2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b3ca:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b3cc:	78fb      	ldrb	r3, [r7, #3]
 800b3ce:	68fa      	ldr	r2, [r7, #12]
 800b3d0:	212c      	movs	r1, #44	; 0x2c
 800b3d2:	fb01 f303 	mul.w	r3, r1, r3
 800b3d6:	4413      	add	r3, r2
 800b3d8:	333b      	adds	r3, #59	; 0x3b
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d009      	beq.n	800b3f4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b3e0:	78fb      	ldrb	r3, [r7, #3]
 800b3e2:	68fa      	ldr	r2, [r7, #12]
 800b3e4:	212c      	movs	r1, #44	; 0x2c
 800b3e6:	fb01 f303 	mul.w	r3, r1, r3
 800b3ea:	4413      	add	r3, r2
 800b3ec:	3354      	adds	r3, #84	; 0x54
 800b3ee:	78ba      	ldrb	r2, [r7, #2]
 800b3f0:	701a      	strb	r2, [r3, #0]
 800b3f2:	e008      	b.n	800b406 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b3f4:	78fb      	ldrb	r3, [r7, #3]
 800b3f6:	68fa      	ldr	r2, [r7, #12]
 800b3f8:	212c      	movs	r1, #44	; 0x2c
 800b3fa:	fb01 f303 	mul.w	r3, r1, r3
 800b3fe:	4413      	add	r3, r2
 800b400:	3355      	adds	r3, #85	; 0x55
 800b402:	78ba      	ldrb	r2, [r7, #2]
 800b404:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b406:	2300      	movs	r3, #0
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3714      	adds	r7, #20
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f7f8 fd79 	bl	8003f14 <HAL_Delay>
}
 800b422:	bf00      	nop
 800b424:	3708      	adds	r7, #8
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
	...

0800b42c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b085      	sub	sp, #20
 800b430:	af00      	add	r7, sp, #0
 800b432:	4603      	mov	r3, r0
 800b434:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b436:	2300      	movs	r3, #0
 800b438:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b43a:	79fb      	ldrb	r3, [r7, #7]
 800b43c:	2b03      	cmp	r3, #3
 800b43e:	d817      	bhi.n	800b470 <USBH_Get_USB_Status+0x44>
 800b440:	a201      	add	r2, pc, #4	; (adr r2, 800b448 <USBH_Get_USB_Status+0x1c>)
 800b442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b446:	bf00      	nop
 800b448:	0800b459 	.word	0x0800b459
 800b44c:	0800b45f 	.word	0x0800b45f
 800b450:	0800b465 	.word	0x0800b465
 800b454:	0800b46b 	.word	0x0800b46b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b458:	2300      	movs	r3, #0
 800b45a:	73fb      	strb	r3, [r7, #15]
    break;
 800b45c:	e00b      	b.n	800b476 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b45e:	2302      	movs	r3, #2
 800b460:	73fb      	strb	r3, [r7, #15]
    break;
 800b462:	e008      	b.n	800b476 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b464:	2301      	movs	r3, #1
 800b466:	73fb      	strb	r3, [r7, #15]
    break;
 800b468:	e005      	b.n	800b476 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b46a:	2302      	movs	r3, #2
 800b46c:	73fb      	strb	r3, [r7, #15]
    break;
 800b46e:	e002      	b.n	800b476 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b470:	2302      	movs	r3, #2
 800b472:	73fb      	strb	r3, [r7, #15]
    break;
 800b474:	bf00      	nop
  }
  return usb_status;
 800b476:	7bfb      	ldrb	r3, [r7, #15]
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3714      	adds	r7, #20
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	4603      	mov	r3, r0
 800b48c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b48e:	79fb      	ldrb	r3, [r7, #7]
 800b490:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b492:	79fb      	ldrb	r3, [r7, #7]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d102      	bne.n	800b49e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b498:	2300      	movs	r3, #0
 800b49a:	73fb      	strb	r3, [r7, #15]
 800b49c:	e001      	b.n	800b4a2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b4a2:	7bfb      	ldrb	r3, [r7, #15]
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	2101      	movs	r1, #1
 800b4a8:	4803      	ldr	r0, [pc, #12]	; (800b4b8 <MX_DriverVbusFS+0x34>)
 800b4aa:	f7f9 f901 	bl	80046b0 <HAL_GPIO_WritePin>
}
 800b4ae:	bf00      	nop
 800b4b0:	3710      	adds	r7, #16
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	40020800 	.word	0x40020800

0800b4bc <_init>:
 800b4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4be:	bf00      	nop
 800b4c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4c2:	bc08      	pop	{r3}
 800b4c4:	469e      	mov	lr, r3
 800b4c6:	4770      	bx	lr

0800b4c8 <_fini>:
 800b4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ca:	bf00      	nop
 800b4cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4ce:	bc08      	pop	{r3}
 800b4d0:	469e      	mov	lr, r3
 800b4d2:	4770      	bx	lr
