	.text
	.syntax unified
	.eabi_attribute	67, "2.09"	@ Tag_conformance
	.eabi_attribute	6, 13	@ Tag_CPU_arch
	.eabi_attribute	7, 77	@ Tag_CPU_arch_profile
	.eabi_attribute	8, 0	@ Tag_ARM_ISA_use
	.eabi_attribute	9, 2	@ Tag_THUMB_ISA_use
	.eabi_attribute	34, 1	@ Tag_CPU_unaligned_access
	.eabi_attribute	17, 1	@ Tag_ABI_PCS_GOT_use
	.eabi_attribute	20, 1	@ Tag_ABI_FP_denormal
	.eabi_attribute	21, 1	@ Tag_ABI_FP_exceptions
	.eabi_attribute	23, 3	@ Tag_ABI_FP_number_model
	.eabi_attribute	24, 1	@ Tag_ABI_align_needed
	.eabi_attribute	25, 1	@ Tag_ABI_align_preserved
	.eabi_attribute	28, 1	@ Tag_ABI_VFP_args
	.eabi_attribute	38, 1	@ Tag_ABI_FP_16bit_format
	.eabi_attribute	18, 4	@ Tag_ABI_PCS_wchar_t
	.eabi_attribute	26, 2	@ Tag_ABI_enum_size
	.eabi_attribute	14, 0	@ Tag_ABI_PCS_R9_use
	.file	"main.c"
	.globl	__io_putchar                    @ -- Begin function __io_putchar
	.p2align	2
	.type	__io_putchar,%function
	.code	16                              @ @__io_putchar
	.thumb_func
__io_putchar:
	.fnstart
@ %bb.0:
	.save	{r4, r6, r7, lr}
	push	{r4, r6, r7, lr}
	.setfp	r7, sp, #8
	add	r7, sp, #8
	.pad	#8
	sub	sp, #8
	str	r0, [r7, #-12]                  @ 4-byte Spill
	movw	r1, :lower16:function_loc
	movt	r1, :upper16:function_loc
	ldr	r0, .LCPI0_0
	str	r0, [r1]
	b	.LBB0_1
.Ltmp0:                                 @ Block address taken
.LBB0_1:                                @ %"label___io_putchar_Entry:\22, \22\22()"
	ldr	r0, [r7, #-12]                  @ 4-byte Reload
	mov	r2, sp
	sub.w	r1, r2, #8
	mov	sp, r1
	mov	r3, r1
	str	r3, [r7, #-16]                  @ 4-byte Spill
	str	r0, [r2, #-8]
	movw	r0, :lower16:huart2
	movt	r0, :upper16:huart2
	movs	r2, #1
	movs	r3, #100
	bl	HAL_UART_Transmit
	b	.LBB0_2
.LBB0_2:                                @ %"label___io_putchar0_RETURN:\22, \22\22()"
	ldr	r0, [r7, #-16]                  @ 4-byte Reload
	ldr	r0, [r0]
	sub.w	r4, r7, #8
	mov	sp, r4
	pop	{r4, r6, r7, pc}
	.p2align	2
@ %bb.3:
.LCPI0_0:
	.long	.Ltmp0
.Lfunc_end0:
	.size	__io_putchar, .Lfunc_end0-__io_putchar
	.cantunwind
	.fnend
                                        @ -- End function
	.globl	function_a                      @ -- Begin function function_a
	.p2align	2
	.type	function_a,%function
	.code	16                              @ @function_a
	.thumb_func
function_a:
	.fnstart
@ %bb.0:
	.save	{r4, r5, r6, r7, lr}
	push	{r4, r5, r6, r7, lr}
	.setfp	r7, sp, #12
	add	r7, sp, #12
	.save	{r8}
	str	r8, [sp, #-4]!
	.pad	#24
	sub	sp, #24
	str	r2, [r7, #-28]                  @ 4-byte Spill
	str	r1, [r7, #-24]                  @ 4-byte Spill
	str	r0, [r7, #-20]                  @ 4-byte Spill
	movw	r1, :lower16:function_loc
	movt	r1, :upper16:function_loc
	ldr	r0, .LCPI1_0
	str	r0, [r1]
	b	.LBB1_1
.Ltmp1:                                 @ Block address taken
.LBB1_1:                                @ %"label_function_a_Entry:\22, \22\22()"
	ldr	r12, [r7, #-28]                 @ 4-byte Reload
	ldr	lr, [r7, #-24]                  @ 4-byte Reload
	ldr	r4, [r7, #-20]                  @ 4-byte Reload
	mov	r1, sp
	sub.w	r0, r1, #8
	mov	sp, r0
	mov	r3, sp
	sub.w	r0, r3, #8
	mov	sp, r0
	mov	r2, sp
	sub.w	r0, r2, #8
	mov	sp, r0
	mov	r0, sp
	sub.w	r5, r0, #8
	mov	sp, r5
	mov	r5, sp
	subs	r5, #8
	mov	sp, r5
	str	r5, [r7, #-36]                  @ 4-byte Spill
	str	r4, [r1, #-8]
	str	lr, [r3, #-8]
	str	r12, [r2, #-8]
	ldr	r1, [r1, #-8]
	ldr	r3, [r3, #-8]
	add	r1, r3
	ldr	r2, [r2, #-8]
	add	r1, r2
	str	r1, [r0, #-8]
	ldr	r0, [r0, #-8]
	sub	sp, #8
	mov	r1, sp
	str	r0, [r1]
	movs	r0, #1
	movs	r1, #2
	movs	r2, #3
	movs	r3, #4
	bl	function_b
	add	sp, #8
	str	r0, [r7, #-32]                  @ 4-byte Spill
	b	.LBB1_2
.LBB1_2:                                @ %"label_function_a1_RETURN:\22, \22\22()"
	ldr	r0, [r7, #-36]                  @ 4-byte Reload
	ldr	r1, [r7, #-32]                  @ 4-byte Reload
	str	r1, [r0]
	ldr	r0, [r0]
	sub.w	r4, r7, #16
	mov	sp, r4
	ldr	r8, [sp], #4
	pop	{r4, r5, r6, r7, pc}
	.p2align	2
@ %bb.3:
.LCPI1_0:
	.long	.Ltmp1
.Lfunc_end1:
	.size	function_a, .Lfunc_end1-function_a
	.cantunwind
	.fnend
                                        @ -- End function
	.globl	function_b                      @ -- Begin function function_b
	.p2align	2
	.type	function_b,%function
	.code	16                              @ @function_b
	.thumb_func
function_b:
	.fnstart
@ %bb.0:
	.save	{r4, r5, r6, r7, lr}
	push	{r4, r5, r6, r7, lr}
	.setfp	r7, sp, #12
	add	r7, sp, #12
	.save	{r8, r9, r10}
	push.w	{r8, r9, r10}
	.pad	#24
	sub	sp, #24
	str	r3, [r7, #-48]                  @ 4-byte Spill
	str	r2, [r7, #-44]                  @ 4-byte Spill
	str	r1, [r7, #-40]                  @ 4-byte Spill
	str	r0, [r7, #-36]                  @ 4-byte Spill
	ldr	r0, [r7, #8]
	str	r0, [r7, #-32]                  @ 4-byte Spill
	movw	r1, :lower16:function_loc
	movt	r1, :upper16:function_loc
	ldr	r0, .LCPI2_0
	str	r0, [r1]
	b	.LBB2_1
.Ltmp2:                                 @ Block address taken
.LBB2_1:                                @ %"label_function_b_Entry:\22, \22\22()"
	ldr	r4, [r7, #-32]                  @ 4-byte Reload
	ldr	r5, [r7, #-48]                  @ 4-byte Reload
	ldr	r6, [r7, #-44]                  @ 4-byte Reload
	ldr	r8, [r7, #-40]                  @ 4-byte Reload
	ldr	r9, [r7, #-36]                  @ 4-byte Reload
	mov	r1, sp
	sub.w	r0, r1, #8
	mov	sp, r0
	mov	lr, sp
	sub.w	r0, lr, #8
	mov	sp, r0
	mov	r12, sp
	sub.w	r0, r12, #8
	mov	sp, r0
	mov	r3, sp
	sub.w	r0, r3, #8
	mov	sp, r0
	mov	r2, sp
	sub.w	r0, r2, #8
	mov	sp, r0
	mov	r0, sp
	sub.w	r10, r0, #8
	mov	sp, r10
	str	r9, [r1, #-8]
	str	r8, [lr, #-8]
	str	r6, [r12, #-8]
	str	r5, [r3, #-8]
	str	r4, [r2, #-8]
	ldr	r1, [r1, #-8]
	ldr	lr, [lr, #-8]
	add	r1, lr
	ldr	r12, [r12, #-8]
	add	r1, r12
	ldr	r3, [r3, #-8]
	add	r1, r3
	ldr	r2, [r2, #-8]
	add	r1, r2
	str	r1, [r0, #-8]
	ldr	r0, [r0, #-8]
	sub.w	r4, r7, #24
	mov	sp, r4
	pop.w	{r8, r9, r10}
	pop	{r4, r5, r6, r7, pc}
	.p2align	2
@ %bb.2:
.LCPI2_0:
	.long	.Ltmp2
.Lfunc_end2:
	.size	function_b, .Lfunc_end2-function_b
	.cantunwind
	.fnend
                                        @ -- End function
	.globl	main                            @ -- Begin function main
	.p2align	2
	.type	main,%function
	.code	16                              @ @main
	.thumb_func
main:
	.fnstart
@ %bb.0:
	.save	{r4, r6, r7, lr}
	push	{r4, r6, r7, lr}
	.setfp	r7, sp, #8
	add	r7, sp, #8
	.pad	#16
	sub	sp, #16
	movw	r1, :lower16:function_loc
	movt	r1, :upper16:function_loc
	ldr	r0, .LCPI3_0
	str	r0, [r1]
	b	.LBB3_1
.Ltmp3:                                 @ Block address taken
.LBB3_1:                                @ %"label_main_Entry:\22, \22\22()"
	mov	r1, sp
	sub.w	r0, r1, #8
	mov	sp, r0
	mov	r0, sp
	subs	r0, #8
	mov	sp, r0
	str	r0, [r7, #-16]                  @ 4-byte Spill
	mov	r0, sp
	subs	r0, #8
	mov	sp, r0
	str	r0, [r7, #-12]                  @ 4-byte Spill
	movs	r0, #0
	str	r0, [r1, #-8]
	bl	HAL_Init
	b	.LBB3_2
.LBB3_2:                                @ %"label_main2_RETURN:\22, \22\22()"
	movw	r1, :lower16:function_return
	movt	r1, :upper16:function_return
	ldr	r0, .LCPI3_1
	str	r0, [r1]
	bl	SystemClock_Config
	b	.LBB3_3
.Ltmp4:                                 @ Block address taken
.LBB3_3:                                @ %"label_main3_RETURN:\22, \22\22()"
	movw	r1, :lower16:function_return
	movt	r1, :upper16:function_return
	ldr	r0, .LCPI3_2
	str	r0, [r1]
	bl	MX_GPIO_Init
	b	.LBB3_4
.Ltmp5:                                 @ Block address taken
.LBB3_4:                                @ %"label_main4_RETURN:\22, \22\22()"
	movw	r1, :lower16:function_return
	movt	r1, :upper16:function_return
	ldr	r0, .LCPI3_3
	str	r0, [r1]
	bl	MX_I2C1_Init
	b	.LBB3_5
.Ltmp6:                                 @ Block address taken
.LBB3_5:                                @ %"label_main5_RETURN:\22, \22\22()"
	movw	r1, :lower16:function_return
	movt	r1, :upper16:function_return
	ldr	r0, .LCPI3_4
	str	r0, [r1]
	bl	MX_I2S3_Init
	b	.LBB3_6
.Ltmp7:                                 @ Block address taken
.LBB3_6:                                @ %"label_main6_RETURN:\22, \22\22()"
	movw	r1, :lower16:function_return
	movt	r1, :upper16:function_return
	ldr	r0, .LCPI3_5
	str	r0, [r1]
	bl	MX_SPI1_Init
	b	.LBB3_7
.Ltmp8:                                 @ Block address taken
.LBB3_7:                                @ %"label_main7_RETURN:\22, \22\22()"
	movw	r1, :lower16:function_return
	movt	r1, :upper16:function_return
	ldr	r0, .LCPI3_6
	str	r0, [r1]
	bl	MX_USB_HOST_Init
	b	.LBB3_8
.Ltmp9:                                 @ Block address taken
.LBB3_8:                                @ %"label_main8_RETURN:\22, \22\22()"
	movw	r1, :lower16:function_return
	movt	r1, :upper16:function_return
	ldr	r0, .LCPI3_7
	str	r0, [r1]
	bl	MX_USART2_UART_Init
	b	.LBB3_9
.Ltmp10:                                @ Block address taken
.LBB3_9:                                @ %"label_main9_RETURN:\22, \22\22()"
	ldr	r1, [r7, #-16]                  @ 4-byte Reload
	movs	r0, #0
	str	r0, [r1]
	b	.LBB3_10
.LBB3_10:                               @ =>This Inner Loop Header: Depth=1
	movw	r1, :lower16:function_return
	movt	r1, :upper16:function_return
	ldr	r0, .LCPI3_8
	str	r0, [r1]
	bl	MX_USB_HOST_Process
	b	.LBB3_11
.Ltmp11:                                @ Block address taken
.LBB3_11:                               @ %"label_main10_RETURN:\22, \22\22()"
                                        @   in Loop: Header=BB3_10 Depth=1
	ldr	r0, [r7, #-16]                  @ 4-byte Reload
	ldr	r1, [r0]
	movw	r2, :lower16:function_return
	movt	r2, :upper16:function_return
	ldr	r0, .LCPI3_9
	str	r0, [r2]
	movw	r0, :lower16:.L.str
	movt	r0, :upper16:.L.str
	bl	printf
	b	.LBB3_12
.Ltmp12:                                @ Block address taken
.LBB3_12:                               @ %"label_main11_RETURN:\22, \22\22()"
                                        @   in Loop: Header=BB3_10 Depth=1
	movw	r1, :lower16:function_return
	movt	r1, :upper16:function_return
	ldr	r0, .LCPI3_10
	str	r0, [r1]
	movs	r0, #1
	movs	r1, #2
	movs	r2, #3
	bl	function_a
	str	r0, [r7, #-20]                  @ 4-byte Spill
	b	.LBB3_13
.Ltmp13:                                @ Block address taken
.LBB3_13:                               @ %"label_main12_RETURN:\22, \22\22()"
                                        @   in Loop: Header=BB3_10 Depth=1
	ldr	r1, [r7, #-16]                  @ 4-byte Reload
	ldr	r0, [r7, #-20]                  @ 4-byte Reload
	ldr	r2, [r7, #-12]                  @ 4-byte Reload
	str	r0, [r2]
	ldr	r0, [r1]
	adds	r0, #1
	str	r0, [r1]
	movw	r1, :lower16:function_return
	movt	r1, :upper16:function_return
	ldr	r0, .LCPI3_11
	str	r0, [r1]
	movs	r0, #1
	bl	HAL_Delay
	b	.LBB3_14
.Ltmp14:                                @ Block address taken
.LBB3_14:                               @ %"label_main13_RETURN:\22, \22\22()"
                                        @   in Loop: Header=BB3_10 Depth=1
	b	.LBB3_10
	.p2align	2
@ %bb.15:
.LCPI3_0:
	.long	.Ltmp3
.LCPI3_1:
	.long	.Ltmp4
.LCPI3_2:
	.long	.Ltmp5
.LCPI3_3:
	.long	.Ltmp6
.LCPI3_4:
	.long	.Ltmp7
.LCPI3_5:
	.long	.Ltmp8
.LCPI3_6:
	.long	.Ltmp9
.LCPI3_7:
	.long	.Ltmp10
.LCPI3_8:
	.long	.Ltmp11
.LCPI3_9:
	.long	.Ltmp12
.LCPI3_10:
	.long	.Ltmp13
.LCPI3_11:
	.long	.Ltmp14
.Lfunc_end3:
	.size	main, .Lfunc_end3-main
	.cantunwind
	.fnend
                                        @ -- End function
	.globl	SystemClock_Config              @ -- Begin function SystemClock_Config
	.p2align	2
	.type	SystemClock_Config,%function
	.code	16                              @ @SystemClock_Config
	.thumb_func
SystemClock_Config:
	.fnstart
@ %bb.0:
	.save	{r4, r6, r7, lr}
	push	{r4, r6, r7, lr}
	.setfp	r7, sp, #8
	add	r7, sp, #8
	.pad	#32
	sub	sp, #32
	movw	r1, :lower16:function_loc
	movt	r1, :upper16:function_loc
	ldr	r0, .LCPI4_0
	str	r0, [r1]
	b	.LBB4_1
.Ltmp15:                                @ Block address taken
.LBB4_1:                                @ %"label_SystemClock_Config_Entry:\22, \22\22()"
	mov	r0, sp
	subs	r0, #48
	mov	sp, r0
	mov	r1, r0
	str	r1, [r7, #-28]                  @ 4-byte Spill
	mov	r1, sp
	str	r1, [r7, #-12]                  @ 4-byte Spill
	subs	r1, #24
	mov	sp, r1
	str	r1, [r7, #-24]                  @ 4-byte Spill
	mov	r1, sp
	subs	r1, #8
	mov	sp, r1
	str	r1, [r7, #-20]                  @ 4-byte Spill
	mov	r1, sp
	subs	r1, #8
	mov	sp, r1
	str	r1, [r7, #-16]                  @ 4-byte Spill
	movs	r1, #48
	bl	__aeabi_memclr4
	ldr	r1, [r7, #-12]                  @ 4-byte Reload
	movs	r0, #0
	str	r0, [r1, #-8]
	str	r0, [r1, #-12]
	str	r0, [r1, #-16]
	str	r0, [r1, #-20]
	str	r0, [r1, #-24]
	b	.LBB4_2
.LBB4_2:
	ldr	r0, [r7, #-20]                  @ 4-byte Reload
	movs	r1, #0
	str	r1, [r0]
	movw	r1, #14400
	movt	r1, #16386
	ldr	r2, [r1]
	orr	r2, r2, #268435456
	str	r2, [r1]
	ldr	r1, [r1]
	and	r1, r1, #268435456
	str	r1, [r0]
	ldr	r0, [r0]
	b	.LBB4_3
.LBB4_3:
	b	.LBB4_4
.LBB4_4:
	ldr	r0, [r7, #-16]                  @ 4-byte Reload
	movs	r1, #0
	str	r1, [r0]
	movw	r1, #28672
	movt	r1, #16384
	ldr	r2, [r1]
	orr	r2, r2, #16384
	str	r2, [r1]
	ldr	r1, [r1]
	and	r1, r1, #16384
	str	r1, [r0]
	ldr	r0, [r0]
	b	.LBB4_5
.LBB4_5:
	ldr	r0, [r7, #-28]                  @ 4-byte Reload
	movs	r1, #1
	str	r1, [r0]
	mov.w	r1, #65536
	str	r1, [r0, #4]
	movs	r1, #2
	str	r1, [r0, #24]
	mov.w	r2, #4194304
	str	r2, [r0, #28]
	movs	r2, #8
	str	r2, [r0, #32]
	mov.w	r2, #336
	str	r2, [r0, #36]
	str	r1, [r0, #40]
	movs	r1, #7
	str	r1, [r0, #44]
	movw	r2, :lower16:function_return
	movt	r2, :upper16:function_return
	ldr	r1, .LCPI4_1
	str	r1, [r2]
	bl	HAL_RCC_OscConfig
	str	r0, [r7, #-32]                  @ 4-byte Spill
	b	.LBB4_6
.Ltmp16:                                @ Block address taken
.LBB4_6:                                @ %"label_SystemClock_Config14_RETURN:\22, \22\22()"
	ldr	r0, [r7, #-32]                  @ 4-byte Reload
	cbz	r0, .LBB4_9
	b	.LBB4_7
.LBB4_7:
	movw	r1, :lower16:function_return
	movt	r1, :upper16:function_return
	ldr	r0, .LCPI4_2
	str	r0, [r1]
	bl	Error_Handler
	b	.LBB4_8
.Ltmp17:                                @ Block address taken
.LBB4_8:                                @ %"label_SystemClock_Config15_RETURN:\22, \22\22()"
	b	.LBB4_9
.LBB4_9:
	ldr	r0, [r7, #-24]                  @ 4-byte Reload
	movs	r1, #15
	str	r1, [r0]
	movs	r1, #2
	str	r1, [r0, #4]
	movs	r1, #0
	str	r1, [r0, #8]
	mov.w	r1, #5120
	str	r1, [r0, #12]
	mov.w	r1, #4096
	str	r1, [r0, #16]
	movw	r2, :lower16:function_return
	movt	r2, :upper16:function_return
	ldr	r1, .LCPI4_3
	str	r1, [r2]
	movs	r1, #5
	bl	HAL_RCC_ClockConfig
	str	r0, [r7, #-36]                  @ 4-byte Spill
	b	.LBB4_10
.Ltmp18:                                @ Block address taken
.LBB4_10:                               @ %"label_SystemClock_Config16_RETURN:\22, \22\22()"
	ldr	r0, [r7, #-36]                  @ 4-byte Reload
	cbz	r0, .LBB4_13
	b	.LBB4_11
.LBB4_11:
	movw	r1, :lower16:function_return
	movt	r1, :upper16:function_return
	ldr	r0, .LCPI4_4
	str	r0, [r1]
	bl	Error_Handler
	b	.LBB4_12
.Ltmp19:                                @ Block address taken
.LBB4_12:                               @ %"label_SystemClock_Config17_RETURN:\22, \22\22()"
	b	.LBB4_13
.LBB4_13:
	sub.w	r4, r7, #8
	mov	sp, r4
	pop	{r4, r6, r7, pc}
	.p2align	2
@ %bb.14:
.LCPI4_0:
	.long	.Ltmp15
.LCPI4_1:
	.long	.Ltmp16
.LCPI4_2:
	.long	.Ltmp17
.LCPI4_3:
	.long	.Ltmp18
.LCPI4_4:
	.long	.Ltmp19
.Lfunc_end4:
	.size	SystemClock_Config, .Lfunc_end4-SystemClock_Config
	.cantunwind
	.fnend
                                        @ -- End function
	.p2align	2                               @ -- Begin function MX_GPIO_Init
	.type	MX_GPIO_Init,%function
	.code	16                              @ @MX_GPIO_Init
	.thumb_func
MX_GPIO_Init:
	.fnstart
@ %bb.0:
	.save	{r4, r6, r7, lr}
	push	{r4, r6, r7, lr}
	.setfp	r7, sp, #8
	add	r7, sp, #8
	.pad	#32
	sub	sp, #32
	movw	r1, :lower16:function_loc
	movt	r1, :upper16:function_loc
	ldr	r0, .LCPI5_0
	str	r0, [r1]
	b	.LBB5_1
.Ltmp20:                                @ Block address taken
.LBB5_1:                                @ %"label_MX_GPIO_Init_Entry:\22, \22\22()"
	mov	r1, sp
	sub.w	r0, r1, #24
	mov	sp, r0
	str	r0, [r7, #-36]                  @ 4-byte Spill
	mov	r0, sp
	subs	r0, #8
	mov	sp, r0
	str	r0, [r7, #-32]                  @ 4-byte Spill
	mov	r0, sp
	subs	r0, #8
	mov	sp, r0
	str	r0, [r7, #-28]                  @ 4-byte Spill
	mov	r0, sp
	subs	r0, #8
	mov	sp, r0
	str	r0, [r7, #-24]                  @ 4-byte Spill
	mov	r0, sp
	subs	r0, #8
	mov	sp, r0
	str	r0, [r7, #-20]                  @ 4-byte Spill
	mov	r0, sp
	subs	r0, #8
	mov	sp, r0
	str	r0, [r7, #-16]                  @ 4-byte Spill
	mov	r0, sp
	subs	r0, #8
	mov	sp, r0
	str	r0, [r7, #-12]                  @ 4-byte Spill
	movs	r0, #0
	str	r0, [r1, #-8]
	str	r0, [r1, #-12]
	str	r0, [r1, #-16]
	str	r0, [r1, #-20]
	str	r0, [r1, #-24]
	b	.LBB5_2
.LBB5_2:
	ldr	r0, [r7, #-32]                  @ 4-byte Reload
	movs	r1, #0
	str	r1, [r0]
	movw	r1, #14384
	movt	r1, #16386
	ldr	r2, [r1]
	orr	r2, r2, #16
	str	r2, [r1]
	ldr	r1, [r1]
	and	r1, r1, #16
	str	r1, [r0]
	ldr	r0, [r0]
	b	.LBB5_3
.LBB5_3:
	b	.LBB5_4
.LBB5_4:
	ldr	r0, [r7, #-28]                  @ 4-byte Reload
	movs	r1, #0
	str	r1, [r0]
	movw	r1, #14384
	movt	r1, #16386
	ldr	r2, [r1]
	orr	r2, r2, #4
	str	r2, [r1]
	ldr	r1, [r1]
	and	r1, r1, #4
	str	r1, [r0]
	ldr	r0, [r0]
	b	.LBB5_5
.LBB5_5:
	b	.LBB5_6
.LBB5_6:
	ldr	r0, [r7, #-24]                  @ 4-byte Reload
	movs	r1, #0
	str	r1, [r0]
	movw	r1, #14384
	movt	r1, #16386
	ldr	r2, [r1]
	orr	r2, r2, #128
	str	r2, [r1]
	ldr	r1, [r1]
	and	r1, r1, #128
	str	r1, [r0]
	ldr	r0, [r0]
	b	.LBB5_7
.LBB5_7:
	b	.LBB5_8
.LBB5_8:
	ldr	r0, [r7, #-20]                  @ 4-byte Reload
	movs	r1, #0
	str	r1, [r0]
	movw	r1, #14384
	movt	r1, #16386
	ldr	r2, [r1]
	orr	r2, r2, #1
	str	r2, [r1]
	ldr	r1, [r1]
	and	r1, r1, #1
	str	r1, [r0]
	ldr	r0, [r0]
	b	.LBB5_9
.LBB5_9:
	b	.LBB5_10
.LBB5_10:
	ldr	r0, [r7, #-16]                  @ 4-byte Reload
	movs	r1, #0
	str	r1, [r0]
	movw	r1, #14384
	movt	r1, #16386
	ldr	r2, [r1]
	orr	r2, r2, #2
	str	r2, [r1]
	ldr	r1, [r1]
	and	r1, r1, #2
	str	r1, [r0]
	ldr	r0, [r0]
	b	.LBB5_11
.LBB5_11:
	b	.LBB5_12
.LBB5_12:
	ldr	r0, [r7, #-12]                  @ 4-byte Reload
	movs	r1, #0
	str	r1, [r0]
	movw	r1, #14384
	movt	r1, #16386
	ldr	r2, [r1]
	orr	r2, r2, #8
	str	r2, [r1]
	ldr	r1, [r1]
	and	r1, r1, #8
	str	r1, [r0]
	ldr	r0, [r0]
	b	.LBB5_13
.LBB5_13:
	movw	r1, :lower16:function_return
	movt	r1, :upper16:function_return
	ldr	r0, .LCPI5_1
	str	r0, [r1]
	movw	r0, #4096
	movt	r0, #16386
	movs	r1, #8
	movs	r2, #0
	bl	HAL_GPIO_WritePin
	b	.LBB5_14
.Ltmp21:                                @ Block address taken
.LBB5_14:                               @ %"label_MX_GPIO_Init18_RETURN:\22, \22\22()"
	movw	r1, :lower16:function_return
	movt	r1, :upper16:function_return
	ldr	r0, .LCPI5_2
	str	r0, [r1]
	movw	r0, #2048
	movt	r0, #16386
	movs	r2, #1
	mov	r1, r2
	bl	HAL_GPIO_WritePin
	b	.LBB5_15
.Ltmp22:                                @ Block address taken
.LBB5_15:                               @ %"label_MX_GPIO_Init19_RETURN:\22, \22\22()"
	movw	r1, :lower16:function_return
	movt	r1, :upper16:function_return
	ldr	r0, .LCPI5_3
	str	r0, [r1]
	movw	r0, #3072
	movt	r0, #16386
	movw	r1, #61456
	movs	r2, #0
	bl	HAL_GPIO_WritePin
	b	.LBB5_16
.Ltmp23:                                @ Block address taken
.LBB5_16:                               @ %"label_MX_GPIO_Init20_RETURN:\22, \22\22()"
	ldr	r1, [r7, #-36]                  @ 4-byte Reload
	movs	r0, #8
	str	r0, [r1]
	movs	r0, #1
	str	r0, [r1, #4]
	movs	r0, #0
	str	r0, [r1, #8]
	str	r0, [r1, #12]
	movw	r2, :lower16:function_return
	movt	r2, :upper16:function_return
	ldr	r0, .LCPI5_4
	str	r0, [r2]
	movw	r0, #4096
	movt	r0, #16386
	bl	HAL_GPIO_Init
	b	.LBB5_17
.Ltmp24:                                @ Block address taken
.LBB5_17:                               @ %"label_MX_GPIO_Init21_RETURN:\22, \22\22()"
	ldr	r1, [r7, #-36]                  @ 4-byte Reload
	movs	r0, #1
	str	r0, [r1]
	str	r0, [r1, #4]
	movs	r0, #0
	str	r0, [r1, #8]
	str	r0, [r1, #12]
	movw	r2, :lower16:function_return
	movt	r2, :upper16:function_return
	ldr	r0, .LCPI5_5
	str	r0, [r2]
	movw	r0, #2048
	movt	r0, #16386
	bl	HAL_GPIO_Init
	b	.LBB5_18
.Ltmp25:                                @ Block address taken
.LBB5_18:                               @ %"label_MX_GPIO_Init22_RETURN:\22, \22\22()"
	ldr	r1, [r7, #-36]                  @ 4-byte Reload
	movs	r0, #8
	str	r0, [r1]
	movs	r0, #2
	str	r0, [r1, #4]
	movs	r0, #0
	str	r0, [r1, #8]
	str	r0, [r1, #12]
	movs	r0, #5
	str	r0, [r1, #16]
	movw	r2, :lower16:function_return
	movt	r2, :upper16:function_return
	ldr	r0, .LCPI5_6
	str	r0, [r2]
	movw	r0, #2048
	movt	r0, #16386
	bl	HAL_GPIO_Init
	b	.LBB5_19
.Ltmp26:                                @ Block address taken
.LBB5_19:                               @ %"label_MX_GPIO_Init23_RETURN:\22, \22\22()"
	ldr	r1, [r7, #-36]                  @ 4-byte Reload
	movs	r0, #1
	str	r0, [r1]
	mov.w	r0, #1179648
	str	r0, [r1, #4]
	movs	r0, #0
	str	r0, [r1, #8]
	movw	r2, :lower16:function_return
	movt	r2, :upper16:function_return
	ldr	r0, .LCPI5_7
	str	r0, [r2]
	movs	r0, #0
	movt	r0, #16386
	bl	HAL_GPIO_Init
	b	.LBB5_20
.Ltmp27:                                @ Block address taken
.LBB5_20:                               @ %"label_MX_GPIO_Init24_RETURN:\22, \22\22()"
	ldr	r1, [r7, #-36]                  @ 4-byte Reload
	movs	r0, #4
	str	r0, [r1]
	movs	r0, #0
	str	r0, [r1, #4]
	str	r0, [r1, #8]
	movw	r2, :lower16:function_return
	movt	r2, :upper16:function_return
	ldr	r0, .LCPI5_8
	str	r0, [r2]
	movw	r0, #1024
	movt	r0, #16386
	bl	HAL_GPIO_Init
	b	.LBB5_21
.Ltmp28:                                @ Block address taken
.LBB5_21:                               @ %"label_MX_GPIO_Init25_RETURN:\22, \22\22()"
	ldr	r1, [r7, #-36]                  @ 4-byte Reload
	mov.w	r0, #1024
	str	r0, [r1]
	movs	r0, #2
	str	r0, [r1, #4]
	movs	r0, #0
	str	r0, [r1, #8]
	str	r0, [r1, #12]
	movs	r0, #5
	str	r0, [r1, #16]
	movw	r2, :lower16:function_return
	movt	r2, :upper16:function_return
	ldr	r0, .LCPI5_9
	str	r0, [r2]
	movw	r0, #1024
	movt	r0, #16386
	bl	HAL_GPIO_Init
	b	.LBB5_22
.Ltmp29:                                @ Block address taken
.LBB5_22:                               @ %"label_MX_GPIO_Init26_RETURN:\22, \22\22()"
	ldr	r1, [r7, #-36]                  @ 4-byte Reload
	movw	r0, #61456
	str	r0, [r1]
	movs	r0, #1
	str	r0, [r1, #4]
	movs	r0, #0
	str	r0, [r1, #8]
	str	r0, [r1, #12]
	movw	r2, :lower16:function_return
	movt	r2, :upper16:function_return
	ldr	r0, .LCPI5_10
	str	r0, [r2]
	movw	r0, #3072
	movt	r0, #16386
	bl	HAL_GPIO_Init
	b	.LBB5_23
.Ltmp30:                                @ Block address taken
.LBB5_23:                               @ %"label_MX_GPIO_Init27_RETURN:\22, \22\22()"
	ldr	r1, [r7, #-36]                  @ 4-byte Reload
	movs	r0, #32
	str	r0, [r1]
	movs	r0, #0
	str	r0, [r1, #4]
	str	r0, [r1, #8]
	movw	r2, :lower16:function_return
	movt	r2, :upper16:function_return
	ldr	r0, .LCPI5_11
	str	r0, [r2]
	movw	r0, #3072
	movt	r0, #16386
	bl	HAL_GPIO_Init
	b	.LBB5_24
.Ltmp31:                                @ Block address taken
.LBB5_24:                               @ %"label_MX_GPIO_Init28_RETURN:\22, \22\22()"
	ldr	r1, [r7, #-36]                  @ 4-byte Reload
	movs	r0, #2
	str	r0, [r1]
	mov.w	r0, #1179648
	str	r0, [r1, #4]
	movs	r0, #0
	str	r0, [r1, #8]
	movw	r2, :lower16:function_return
	movt	r2, :upper16:function_return
	ldr	r0, .LCPI5_12
	str	r0, [r2]
	movw	r0, #4096
	movt	r0, #16386
	bl	HAL_GPIO_Init
	b	.LBB5_25
.Ltmp32:                                @ Block address taken
.LBB5_25:                               @ %"label_MX_GPIO_Init29_RETURN:\22, \22\22()"
	sub.w	r4, r7, #8
	mov	sp, r4
	pop	{r4, r6, r7, pc}
	.p2align	2
@ %bb.26:
.LCPI5_0:
	.long	.Ltmp20
.LCPI5_1:
	.long	.Ltmp21
.LCPI5_2:
	.long	.Ltmp22
.LCPI5_3:
	.long	.Ltmp23
.LCPI5_4:
	.long	.Ltmp24
.LCPI5_5:
	.long	.Ltmp25
.LCPI5_6:
	.long	.Ltmp26
.LCPI5_7:
	.long	.Ltmp27
.LCPI5_8:
	.long	.Ltmp28
.LCPI5_9:
	.long	.Ltmp29
.LCPI5_10:
	.long	.Ltmp30
.LCPI5_11:
	.long	.Ltmp31
.LCPI5_12:
	.long	.Ltmp32
.Lfunc_end5:
	.size	MX_GPIO_Init, .Lfunc_end5-MX_GPIO_Init
	.cantunwind
	.fnend
                                        @ -- End function
	.p2align	2                               @ -- Begin function MX_I2C1_Init
	.type	MX_I2C1_Init,%function
	.code	16                              @ @MX_I2C1_Init
	.thumb_func
MX_I2C1_Init:
	.fnstart
@ %bb.0:
	.save	{r7, lr}
	push	{r7, lr}
	.setfp	r7, sp
	mov	r7, sp
	.pad	#8
	sub	sp, #8
	movw	r1, :lower16:function_loc
	movt	r1, :upper16:function_loc
	ldr	r0, .LCPI6_0
	str	r0, [r1]
	b	.LBB6_1
.Ltmp33:                                @ Block address taken
.LBB6_1:                                @ %"label_MX_I2C1_Init_Entry:\22, \22\22(), !dbg !10"
	movw	r0, :lower16:hi2c1
	movt	r0, :upper16:hi2c1
	str	r0, [sp]                        @ 4-byte Spill
	movw	r1, #21504
	movt	r1, #16384
	str	r1, [r0]
	movw	r1, #34464
	movt	r1, #1
	str	r1, [r0, #4]
	movs	r1, #0
	str	r1, [r0, #8]
	str	r1, [r0, #12]
	mov.w	r2, #16384
	str	r2, [r0, #16]
	str	r1, [r0, #20]
	str	r1, [r0, #24]
	str	r1, [r0, #28]
	str	r1, [r0, #32]
	bl	HAL_I2C_Init
	str	r0, [sp, #4]                    @ 4-byte Spill
	b	.LBB6_2
.LBB6_2:                                @ %"label_MX_I2C1_Init30_RETURN:\22, \22\22()"
	ldr	r0, [sp, #4]                    @ 4-byte Reload
	cbz	r0, .LBB6_5
	b	.LBB6_3
.LBB6_3:
	movw	r1, :lower16:function_return
	movt	r1, :upper16:function_return
	ldr	r0, .LCPI6_1
	str	r0, [r1]
	bl	Error_Handler
	b	.LBB6_4
.Ltmp34:                                @ Block address taken
.LBB6_4:                                @ %"label_MX_I2C1_Init31_RETURN:\22, \22\22()"
	b	.LBB6_5
.LBB6_5:
	add	sp, #8
	pop	{r7, pc}
	.p2align	2
@ %bb.6:
.LCPI6_0:
	.long	.Ltmp33
.LCPI6_1:
	.long	.Ltmp34
.Lfunc_end6:
	.size	MX_I2C1_Init, .Lfunc_end6-MX_I2C1_Init
	.cantunwind
	.fnend
                                        @ -- End function
	.p2align	2                               @ -- Begin function MX_I2S3_Init
	.type	MX_I2S3_Init,%function
	.code	16                              @ @MX_I2S3_Init
	.thumb_func
MX_I2S3_Init:
	.fnstart
@ %bb.0:
	.save	{r7, lr}
	push	{r7, lr}
	.setfp	r7, sp
	mov	r7, sp
	.pad	#8
	sub	sp, #8
	movw	r1, :lower16:function_loc
	movt	r1, :upper16:function_loc
	ldr	r0, .LCPI7_0
	str	r0, [r1]
	b	.LBB7_1
.Ltmp35:                                @ Block address taken
.LBB7_1:                                @ %"label_MX_I2S3_Init_Entry:\22, \22\22(), !dbg !10"
	movw	r0, :lower16:hi2s3
	movt	r0, :upper16:hi2s3
	str	r0, [sp]                        @ 4-byte Spill
	movw	r1, #15360
	movt	r1, #16384
	str	r1, [r0]
	mov.w	r2, #512
	str	r2, [r0, #4]
	movs	r1, #0
	str	r1, [r0, #8]
	str	r1, [r0, #12]
	str	r2, [r0, #16]
	movw	r2, #30464
	movt	r2, #1
	str	r2, [r0, #20]
	str	r1, [r0, #24]
	str	r1, [r0, #28]
	str	r1, [r0, #32]
	bl	HAL_I2S_Init
	str	r0, [sp, #4]                    @ 4-byte Spill
	b	.LBB7_2
.LBB7_2:                                @ %"label_MX_I2S3_Init32_RETURN:\22, \22\22()"
	ldr	r0, [sp, #4]                    @ 4-byte Reload
	cbz	r0, .LBB7_5
	b	.LBB7_3
.LBB7_3:
	movw	r1, :lower16:function_return
	movt	r1, :upper16:function_return
	ldr	r0, .LCPI7_1
	str	r0, [r1]
	bl	Error_Handler
	b	.LBB7_4
.Ltmp36:                                @ Block address taken
.LBB7_4:                                @ %"label_MX_I2S3_Init33_RETURN:\22, \22\22()"
	b	.LBB7_5
.LBB7_5:
	add	sp, #8
	pop	{r7, pc}
	.p2align	2
@ %bb.6:
.LCPI7_0:
	.long	.Ltmp35
.LCPI7_1:
	.long	.Ltmp36
.Lfunc_end7:
	.size	MX_I2S3_Init, .Lfunc_end7-MX_I2S3_Init
	.cantunwind
	.fnend
                                        @ -- End function
	.p2align	2                               @ -- Begin function MX_SPI1_Init
	.type	MX_SPI1_Init,%function
	.code	16                              @ @MX_SPI1_Init
	.thumb_func
MX_SPI1_Init:
	.fnstart
@ %bb.0:
	.save	{r7, lr}
	push	{r7, lr}
	.setfp	r7, sp
	mov	r7, sp
	.pad	#16
	sub	sp, #16
	movw	r1, :lower16:function_loc
	movt	r1, :upper16:function_loc
	ldr	r0, .LCPI8_0
	str	r0, [r1]
	b	.LBB8_1
.Ltmp37:                                @ Block address taken
.LBB8_1:                                @ %"label_MX_SPI1_Init_Entry:\22, \22\22(), !dbg !10"
	movw	r0, :lower16:hspi1
	movt	r0, :upper16:hspi1
	str	r0, [sp, #4]                    @ 4-byte Spill
	movw	r1, #12288
	movt	r1, #16385
	str	r1, [r0]
	mov.w	r1, #260
	str	r1, [r0, #4]
	movs	r1, #0
	str	r1, [sp, #8]                    @ 4-byte Spill
	str	r1, [r0, #8]
	str	r1, [r0, #12]
	str	r1, [r0, #16]
	str	r1, [r0, #20]
	mov.w	r2, #512
	str	r2, [r0, #24]
	str	r1, [r0, #28]
	str	r1, [r0, #32]
	str	r1, [r0, #36]
	str	r1, [r0, #40]
	movs	r1, #10
	str	r1, [r0, #44]
	bl	HAL_SPI_Init
	str	r0, [sp, #12]                   @ 4-byte Spill
	b	.LBB8_2
.LBB8_2:                                @ %"label_MX_SPI1_Init34_RETURN:\22, \22\22()"
	ldr	r0, [sp, #12]                   @ 4-byte Reload
	cbz	r0, .LBB8_5
	b	.LBB8_3
.LBB8_3:
	movw	r1, :lower16:function_return
	movt	r1, :upper16:function_return
	ldr	r0, .LCPI8_1
	str	r0, [r1]
	bl	Error_Handler
	b	.LBB8_4
.Ltmp38:                                @ Block address taken
.LBB8_4:                                @ %"label_MX_SPI1_Init35_RETURN:\22, \22\22()"
	b	.LBB8_5
.LBB8_5:
	add	sp, #16
	pop	{r7, pc}
	.p2align	2
@ %bb.6:
.LCPI8_0:
	.long	.Ltmp37
.LCPI8_1:
	.long	.Ltmp38
.Lfunc_end8:
	.size	MX_SPI1_Init, .Lfunc_end8-MX_SPI1_Init
	.cantunwind
	.fnend
                                        @ -- End function
	.p2align	2                               @ -- Begin function MX_USART2_UART_Init
	.type	MX_USART2_UART_Init,%function
	.code	16                              @ @MX_USART2_UART_Init
	.thumb_func
MX_USART2_UART_Init:
	.fnstart
@ %bb.0:
	.save	{r7, lr}
	push	{r7, lr}
	.setfp	r7, sp
	mov	r7, sp
	.pad	#8
	sub	sp, #8
	movw	r1, :lower16:function_loc
	movt	r1, :upper16:function_loc
	ldr	r0, .LCPI9_0
	str	r0, [r1]
	b	.LBB9_1
.Ltmp39:                                @ Block address taken
.LBB9_1:                                @ %"label_MX_USART2_UART_Init_Entry:\22, \22\22(), !dbg !10"
	movw	r0, :lower16:huart2
	movt	r0, :upper16:huart2
	str	r0, [sp]                        @ 4-byte Spill
	movw	r1, #17408
	movt	r1, #16384
	str	r1, [r0]
	mov.w	r1, #115200
	str	r1, [r0, #4]
	movs	r1, #0
	str	r1, [r0, #8]
	str	r1, [r0, #12]
	str	r1, [r0, #16]
	movs	r2, #12
	str	r2, [r0, #20]
	str	r1, [r0, #24]
	str	r1, [r0, #28]
	bl	HAL_UART_Init
	str	r0, [sp, #4]                    @ 4-byte Spill
	b	.LBB9_2
.LBB9_2:                                @ %"label_MX_USART2_UART_Init36_RETURN:\22, \22\22()"
	ldr	r0, [sp, #4]                    @ 4-byte Reload
	cbz	r0, .LBB9_5
	b	.LBB9_3
.LBB9_3:
	movw	r1, :lower16:function_return
	movt	r1, :upper16:function_return
	ldr	r0, .LCPI9_1
	str	r0, [r1]
	bl	Error_Handler
	b	.LBB9_4
.Ltmp40:                                @ Block address taken
.LBB9_4:                                @ %"label_MX_USART2_UART_Init37_RETURN:\22, \22\22()"
	b	.LBB9_5
.LBB9_5:
	add	sp, #8
	pop	{r7, pc}
	.p2align	2
@ %bb.6:
.LCPI9_0:
	.long	.Ltmp39
.LCPI9_1:
	.long	.Ltmp40
.Lfunc_end9:
	.size	MX_USART2_UART_Init, .Lfunc_end9-MX_USART2_UART_Init
	.cantunwind
	.fnend
                                        @ -- End function
	.globl	Error_Handler                   @ -- Begin function Error_Handler
	.p2align	2
	.type	Error_Handler,%function
	.code	16                              @ @Error_Handler
	.thumb_func
Error_Handler:
	.fnstart
@ %bb.0:
	movw	r1, :lower16:function_loc
	movt	r1, :upper16:function_loc
	ldr	r0, .LCPI10_0
	str	r0, [r1]
	b	.LBB10_1
.Ltmp41:                                @ Block address taken
.LBB10_1:                               @ %"label_Error_Handler_Entry:\22, \22\22(), !dbg !10"
	@APP
	cpsid i
	@NO_APP
	b	.LBB10_2
.LBB10_2:                               @ =>This Inner Loop Header: Depth=1
	b	.LBB10_2
	.p2align	2
@ %bb.3:
.LCPI10_0:
	.long	.Ltmp41
.Lfunc_end10:
	.size	Error_Handler, .Lfunc_end10-Error_Handler
	.cantunwind
	.fnend
                                        @ -- End function
	.globl	master_                         @ -- Begin function master_
	.p2align	1
	.type	master_,%function
	.code	16                              @ @master_
	.thumb_func
master_:
	.fnstart
@ %bb.0:                                @ %"LABEL_MASTERFUNC:"
	movw	r3, :lower16:sp
	movt	r3, :upper16:sp
	ldr	r2, [r3]
	movw	r1, :lower16:ret_table
	movt	r1, :upper16:ret_table
	adds	r0, r2, #1
	str	r0, [r3]
	movw	r0, :lower16:function_return
	movt	r0, :upper16:function_return
	str.w	r0, [r1, r2, lsl #2]
	movw	r0, :lower16:function_loc
	movt	r0, :upper16:function_loc
	ldr	r0, [r0]
	adds	r0, #1
	@APP
	bx	r0

	@NO_APP
	bx	lr
.Lfunc_end11:
	.size	master_, .Lfunc_end11-master_
	.fnend
                                        @ -- End function
	.globl	master_retn                     @ -- Begin function master_retn
	.p2align	1
	.type	master_retn,%function
	.code	16                              @ @master_retn
	.thumb_func
master_retn:
	.fnstart
@ %bb.0:                                @ %"LABEL_MASTERFUNC_RETN:"
	movw	r0, :lower16:sp
	movt	r0, :upper16:sp
	ldr	r1, [r0]
	subs	r1, #1
	str	r1, [r0]
	ldr	r1, [r0]
	movw	r0, :lower16:ret_table
	movt	r0, :upper16:ret_table
	ldr.w	r0, [r0, r1, lsl #2]
	adds	r0, #1
	@APP
	bx	r0

	@NO_APP
	bx	lr
.Lfunc_end12:
	.size	master_retn, .Lfunc_end12-master_retn
	.fnend
                                        @ -- End function
	.type	huart2,%object                  @ @huart2
	.bss
	.globl	huart2
	.p2align	2, 0x0
huart2:
	.zero	76
	.size	huart2, 76

	.type	.L.str,%object                  @ @.str
	.section	.rodata.str1.1,"aMS",%progbits,1
.L.str:
	.asciz	"%d\r\n"
	.size	.L.str, 5

	.type	hi2c1,%object                   @ @hi2c1
	.bss
	.globl	hi2c1
	.p2align	2, 0x0
hi2c1:
	.zero	92
	.size	hi2c1, 92

	.type	hi2s3,%object                   @ @hi2s3
	.globl	hi2s3
	.p2align	2, 0x0
hi2s3:
	.zero	76
	.size	hi2s3, 76

	.type	hspi1,%object                   @ @hspi1
	.globl	hspi1
	.p2align	2, 0x0
hspi1:
	.zero	92
	.size	hspi1, 92

	.type	ret_table,%object               @ @ret_table
	.globl	ret_table
	.p2align	4, 0x0
ret_table:
	.zero	120
	.size	ret_table, 120

	.type	sp,%object                      @ @sp
	.globl	sp
	.p2align	2, 0x0
sp:
	.long	0                               @ 0x0
	.size	sp, 4

	.type	return_address_table,%object    @ @return_address_table
	.globl	return_address_table
	.p2align	4, 0x0
return_address_table:
	.zero	400
	.size	return_address_table, 400

	.ident	"clang version 18.0.0 (https://github.com/llvm/llvm-project.git 0b17e9d2859acfec2cf757472f3822f6b5aad020)"
	.section	".note.GNU-stack","",%progbits
