
freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b584  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800b714  0800b714  0001b714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000018  0800b860  0800b860  0001b860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000c8  0800b878  0800b878  0001b878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b940  0800b940  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b940  0800b940  0001b940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b944  0800b944  0001b944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800b948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004f04  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00004400  20004f78  20004f78  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000034  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .comment      0000009e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_line   000240ac  00000000  00000000  00020146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0003498b  00000000  00000000  000441f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00008154  00000000  00000000  00078b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002268  00000000  00000000  00080cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e164f  00000000  00000000  00082f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00002260  00000000  00000000  00164590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000231c1  00000000  00000000  001667f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008d74  00000000  00000000  001899b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00007b53  00000000  00000000  00192728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <deregister_tm_clones>:
 8000190:	4803      	ldr	r0, [pc, #12]	; (80001a0 <deregister_tm_clones+0x10>)
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <deregister_tm_clones+0x14>)
 8000194:	4283      	cmp	r3, r0
 8000196:	d002      	beq.n	800019e <deregister_tm_clones+0xe>
 8000198:	4b03      	ldr	r3, [pc, #12]	; (80001a8 <deregister_tm_clones+0x18>)
 800019a:	b103      	cbz	r3, 800019e <deregister_tm_clones+0xe>
 800019c:	4718      	bx	r3
 800019e:	4770      	bx	lr
 80001a0:	20000074 	.word	0x20000074
 80001a4:	20000074 	.word	0x20000074
 80001a8:	00000000 	.word	0x00000000

080001ac <register_tm_clones>:
 80001ac:	4805      	ldr	r0, [pc, #20]	; (80001c4 <register_tm_clones+0x18>)
 80001ae:	4906      	ldr	r1, [pc, #24]	; (80001c8 <register_tm_clones+0x1c>)
 80001b0:	1a0b      	subs	r3, r1, r0
 80001b2:	0fd9      	lsrs	r1, r3, #31
 80001b4:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001b8:	1049      	asrs	r1, r1, #1
 80001ba:	d002      	beq.n	80001c2 <register_tm_clones+0x16>
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <register_tm_clones+0x20>)
 80001be:	b103      	cbz	r3, 80001c2 <register_tm_clones+0x16>
 80001c0:	4718      	bx	r3
 80001c2:	4770      	bx	lr
 80001c4:	20000074 	.word	0x20000074
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c06      	ldr	r4, [pc, #24]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b943      	cbnz	r3, 80001ea <__do_global_dtors_aux+0x1a>
 80001d8:	f7ff ffda 	bl	8000190 <deregister_tm_clones>
 80001dc:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	b113      	cbz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001e0:	4804      	ldr	r0, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x24>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	2301      	movs	r3, #1
 80001e8:	7023      	strb	r3, [r4, #0]
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000074 	.word	0x20000074
 80001f0:	00000000 	.word	0x00000000
 80001f4:	0800b6fc 	.word	0x0800b6fc

080001f8 <frame_dummy>:
 80001f8:	b508      	push	{r3, lr}
 80001fa:	4b04      	ldr	r3, [pc, #16]	; (800020c <frame_dummy+0x14>)
 80001fc:	b11b      	cbz	r3, 8000206 <frame_dummy+0xe>
 80001fe:	4904      	ldr	r1, [pc, #16]	; (8000210 <frame_dummy+0x18>)
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <frame_dummy+0x1c>)
 8000202:	f3af 8000 	nop.w
 8000206:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800020a:	e7cf      	b.n	80001ac <register_tm_clones>
 800020c:	00000000 	.word	0x00000000
 8000210:	20000078 	.word	0x20000078
 8000214:	0800b6fc 	.word	0x0800b6fc

08000218 <forward>:
 8000218:	b084      	sub	sp, #16
 800021a:	9003      	str	r0, [sp, #12]
 800021c:	9102      	str	r1, [sp, #8]
 800021e:	9802      	ldr	r0, [sp, #8]
 8000220:	212c      	movs	r1, #44	; 0x2c
 8000222:	f2c2 0101 	movt	r1, #8193	; 0x2001
 8000226:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800022a:	9001      	str	r0, [sp, #4]
 800022c:	9801      	ldr	r0, [sp, #4]
 800022e:	6800      	ldr	r0, [r0, #0]
 8000230:	9000      	str	r0, [sp, #0]
 8000232:	9803      	ldr	r0, [sp, #12]
 8000234:	9900      	ldr	r1, [sp, #0]
 8000236:	6008      	str	r0, [r1, #0]
 8000238:	9800      	ldr	r0, [sp, #0]
 800023a:	3004      	adds	r0, #4
 800023c:	9000      	str	r0, [sp, #0]
 800023e:	9800      	ldr	r0, [sp, #0]
 8000240:	9901      	ldr	r1, [sp, #4]
 8000242:	6008      	str	r0, [r1, #0]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <backward>:
 8000248:	b086      	sub	sp, #24
 800024a:	9004      	str	r0, [sp, #16]
 800024c:	9103      	str	r1, [sp, #12]
 800024e:	9803      	ldr	r0, [sp, #12]
 8000250:	212c      	movs	r1, #44	; 0x2c
 8000252:	f2c2 0101 	movt	r1, #8193	; 0x2001
 8000256:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800025a:	9001      	str	r0, [sp, #4]
 800025c:	9801      	ldr	r0, [sp, #4]
 800025e:	6800      	ldr	r0, [r0, #0]
 8000260:	9000      	str	r0, [sp, #0]
 8000262:	9800      	ldr	r0, [sp, #0]
 8000264:	3804      	subs	r0, #4
 8000266:	9000      	str	r0, [sp, #0]
 8000268:	9800      	ldr	r0, [sp, #0]
 800026a:	6800      	ldr	r0, [r0, #0]
 800026c:	3008      	adds	r0, #8
 800026e:	9002      	str	r0, [sp, #8]
 8000270:	9802      	ldr	r0, [sp, #8]
 8000272:	6800      	ldr	r0, [r0, #0]
 8000274:	9002      	str	r0, [sp, #8]
 8000276:	9802      	ldr	r0, [sp, #8]
 8000278:	9904      	ldr	r1, [sp, #16]
 800027a:	4288      	cmp	r0, r1
 800027c:	d106      	bne.n	800028c <backward+0x44>
 800027e:	e7ff      	b.n	8000280 <backward+0x38>
 8000280:	9800      	ldr	r0, [sp, #0]
 8000282:	9901      	ldr	r1, [sp, #4]
 8000284:	6008      	str	r0, [r1, #0]
 8000286:	9802      	ldr	r0, [sp, #8]
 8000288:	9005      	str	r0, [sp, #20]
 800028a:	e001      	b.n	8000290 <backward+0x48>
 800028c:	4708      	bx	r1
 800028e:	e7ff      	b.n	8000290 <backward+0x48>
 8000290:	9805      	ldr	r0, [sp, #20]
 8000292:	b006      	add	sp, #24
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop

08000298 <getidx>:
 8000298:	b088      	sub	sp, #32
 800029a:	f640 2020 	movw	r0, #2592	; 0xa20
 800029e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80002a2:	6800      	ldr	r0, [r0, #0]
 80002a4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80002a6:	9006      	str	r0, [sp, #24]
 80002a8:	2000      	movs	r0, #0
 80002aa:	f2c2 0001 	movt	r0, #8193	; 0x2001
 80002ae:	9005      	str	r0, [sp, #20]
 80002b0:	2004      	movs	r0, #4
 80002b2:	f2c2 0001 	movt	r0, #8193	; 0x2001
 80002b6:	9004      	str	r0, [sp, #16]
 80002b8:	2000      	movs	r0, #0
 80002ba:	9003      	str	r0, [sp, #12]
 80002bc:	e7ff      	b.n	80002be <getidx+0x26>
 80002be:	9803      	ldr	r0, [sp, #12]
 80002c0:	2809      	cmp	r0, #9
 80002c2:	dc11      	bgt.n	80002e8 <getidx+0x50>
 80002c4:	e7ff      	b.n	80002c6 <getidx+0x2e>
 80002c6:	9804      	ldr	r0, [sp, #16]
 80002c8:	6800      	ldr	r0, [r0, #0]
 80002ca:	9906      	ldr	r1, [sp, #24]
 80002cc:	4288      	cmp	r0, r1
 80002ce:	d103      	bne.n	80002d8 <getidx+0x40>
 80002d0:	e7ff      	b.n	80002d2 <getidx+0x3a>
 80002d2:	9803      	ldr	r0, [sp, #12]
 80002d4:	9007      	str	r0, [sp, #28]
 80002d6:	e02c      	b.n	8000332 <getidx+0x9a>
 80002d8:	9804      	ldr	r0, [sp, #16]
 80002da:	3004      	adds	r0, #4
 80002dc:	9004      	str	r0, [sp, #16]
 80002de:	e7ff      	b.n	80002e0 <getidx+0x48>
 80002e0:	9803      	ldr	r0, [sp, #12]
 80002e2:	3001      	adds	r0, #1
 80002e4:	9003      	str	r0, [sp, #12]
 80002e6:	e7ea      	b.n	80002be <getidx+0x26>
 80002e8:	9805      	ldr	r0, [sp, #20]
 80002ea:	7800      	ldrb	r0, [r0, #0]
 80002ec:	9002      	str	r0, [sp, #8]
 80002ee:	9802      	ldr	r0, [sp, #8]
 80002f0:	2104      	movs	r1, #4
 80002f2:	f2c2 0101 	movt	r1, #8193	; 0x2001
 80002f6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80002fa:	9001      	str	r0, [sp, #4]
 80002fc:	9802      	ldr	r0, [sp, #8]
 80002fe:	212c      	movs	r1, #44	; 0x2c
 8000300:	f2c2 0101 	movt	r1, #8193	; 0x2001
 8000304:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8000308:	9000      	str	r0, [sp, #0]
 800030a:	9806      	ldr	r0, [sp, #24]
 800030c:	9901      	ldr	r1, [sp, #4]
 800030e:	6008      	str	r0, [r1, #0]
 8000310:	9802      	ldr	r0, [sp, #8]
 8000312:	2154      	movs	r1, #84	; 0x54
 8000314:	f2c2 0101 	movt	r1, #8193	; 0x2001
 8000318:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800031c:	fb00 1002 	mla	r0, r0, r2, r1
 8000320:	9900      	ldr	r1, [sp, #0]
 8000322:	6008      	str	r0, [r1, #0]
 8000324:	9802      	ldr	r0, [sp, #8]
 8000326:	3001      	adds	r0, #1
 8000328:	9905      	ldr	r1, [sp, #20]
 800032a:	7008      	strb	r0, [r1, #0]
 800032c:	9802      	ldr	r0, [sp, #8]
 800032e:	9007      	str	r0, [sp, #28]
 8000330:	e7ff      	b.n	8000332 <getidx+0x9a>
 8000332:	9807      	ldr	r0, [sp, #28]
 8000334:	b008      	add	sp, #32
 8000336:	4770      	bx	lr

08000338 <__io_putchar>:
 8000338:	b580      	push	{r7, lr}
 800033a:	466f      	mov	r7, sp
 800033c:	b082      	sub	sp, #8
 800033e:	9001      	str	r0, [sp, #4]
 8000340:	f240 0090 	movw	r0, #144	; 0x90
 8000344:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000348:	a901      	add	r1, sp, #4
 800034a:	2201      	movs	r2, #1
 800034c:	2364      	movs	r3, #100	; 0x64
 800034e:	f007 fbf0 	bl	8007b32 <HAL_UART_Transmit>
 8000352:	9801      	ldr	r0, [sp, #4]
 8000354:	b002      	add	sp, #8
 8000356:	bd80      	pop	{r7, pc}

08000358 <main>:
 8000358:	b580      	push	{r7, lr}
 800035a:	466f      	mov	r7, sp
 800035c:	b082      	sub	sp, #8
 800035e:	2000      	movs	r0, #0
 8000360:	9001      	str	r0, [sp, #4]
 8000362:	f003 ff75 	bl	8004250 <HAL_Init>
 8000366:	f000 f845 	bl	80003f4 <SystemClock_Config>
 800036a:	f000 f8a3 	bl	80004b4 <MX_GPIO_Init>
 800036e:	f000 f9a5 	bl	80006bc <MX_I2C1_Init>
 8000372:	f000 f9c5 	bl	8000700 <MX_I2S3_Init>
 8000376:	f000 f9e5 	bl	8000744 <MX_SPI1_Init>
 800037a:	f000 fa07 	bl	800078c <MX_USART2_UART_Init>
 800037e:	f008 fb45 	bl	8008a0c <osKernelInitialize>
 8000382:	2000      	movs	r0, #0
 8000384:	f2c2 0001 	movt	r0, #8193	; 0x2001
 8000388:	9000      	str	r0, [sp, #0]
 800038a:	e7ff      	b.n	800038c <main+0x34>
 800038c:	9800      	ldr	r0, [sp, #0]
 800038e:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000392:	f2c2 0101 	movt	r1, #8193	; 0x2001
 8000396:	4288      	cmp	r0, r1
 8000398:	dc08      	bgt.n	80003ac <main+0x54>
 800039a:	e7ff      	b.n	800039c <main+0x44>
 800039c:	9800      	ldr	r0, [sp, #0]
 800039e:	2100      	movs	r1, #0
 80003a0:	7001      	strb	r1, [r0, #0]
 80003a2:	e7ff      	b.n	80003a4 <main+0x4c>
 80003a4:	9800      	ldr	r0, [sp, #0]
 80003a6:	3001      	adds	r0, #1
 80003a8:	9000      	str	r0, [sp, #0]
 80003aa:	e7ef      	b.n	800038c <main+0x34>
 80003ac:	f240 70c9 	movw	r0, #1993	; 0x7c9
 80003b0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80003b4:	f24b 7238 	movw	r2, #46904	; 0xb738
 80003b8:	f6c0 0200 	movt	r2, #2048	; 0x800
 80003bc:	2100      	movs	r1, #0
 80003be:	f008 fb6f 	bl	8008aa0 <osThreadNew>
 80003c2:	f240 01dc 	movw	r1, #220	; 0xdc
 80003c6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80003ca:	6008      	str	r0, [r1, #0]
 80003cc:	f640 0009 	movw	r0, #2057	; 0x809
 80003d0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80003d4:	f24b 7214 	movw	r2, #46868	; 0xb714
 80003d8:	f6c0 0200 	movt	r2, #2048	; 0x800
 80003dc:	2100      	movs	r1, #0
 80003de:	f008 fb5f 	bl	8008aa0 <osThreadNew>
 80003e2:	f240 01e0 	movw	r1, #224	; 0xe0
 80003e6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80003ea:	6008      	str	r0, [r1, #0]
 80003ec:	f008 fb32 	bl	8008a54 <osKernelStart>
 80003f0:	e7ff      	b.n	80003f2 <main+0x9a>
 80003f2:	e7fe      	b.n	80003f2 <main+0x9a>

080003f4 <SystemClock_Config>:
 80003f4:	b580      	push	{r7, lr}
 80003f6:	466f      	mov	r7, sp
 80003f8:	b094      	sub	sp, #80	; 0x50
 80003fa:	a808      	add	r0, sp, #32
 80003fc:	2130      	movs	r1, #48	; 0x30
 80003fe:	f000 ff41 	bl	8001284 <__aeabi_memclr>
 8000402:	2000      	movs	r0, #0
 8000404:	9007      	str	r0, [sp, #28]
 8000406:	9006      	str	r0, [sp, #24]
 8000408:	9005      	str	r0, [sp, #20]
 800040a:	9004      	str	r0, [sp, #16]
 800040c:	9003      	str	r0, [sp, #12]
 800040e:	e7ff      	b.n	8000410 <SystemClock_Config+0x1c>
 8000410:	2000      	movs	r0, #0
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	f643 0040 	movw	r0, #14400	; 0x3840
 8000418:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800041c:	6801      	ldr	r1, [r0, #0]
 800041e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000422:	6001      	str	r1, [r0, #0]
 8000424:	6800      	ldr	r0, [r0, #0]
 8000426:	f000 5080 	and.w	r0, r0, #268435456	; 0x10000000
 800042a:	9002      	str	r0, [sp, #8]
 800042c:	9802      	ldr	r0, [sp, #8]
 800042e:	e7ff      	b.n	8000430 <SystemClock_Config+0x3c>
 8000430:	e7ff      	b.n	8000432 <SystemClock_Config+0x3e>
 8000432:	2000      	movs	r0, #0
 8000434:	9001      	str	r0, [sp, #4]
 8000436:	f247 0000 	movw	r0, #28672	; 0x7000
 800043a:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800043e:	6801      	ldr	r1, [r0, #0]
 8000440:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000444:	6001      	str	r1, [r0, #0]
 8000446:	6800      	ldr	r0, [r0, #0]
 8000448:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
 800044c:	9001      	str	r0, [sp, #4]
 800044e:	9801      	ldr	r0, [sp, #4]
 8000450:	e7ff      	b.n	8000452 <SystemClock_Config+0x5e>
 8000452:	2001      	movs	r0, #1
 8000454:	9008      	str	r0, [sp, #32]
 8000456:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800045a:	9009      	str	r0, [sp, #36]	; 0x24
 800045c:	2002      	movs	r0, #2
 800045e:	900e      	str	r0, [sp, #56]	; 0x38
 8000460:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8000464:	910f      	str	r1, [sp, #60]	; 0x3c
 8000466:	2108      	movs	r1, #8
 8000468:	9110      	str	r1, [sp, #64]	; 0x40
 800046a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800046e:	9111      	str	r1, [sp, #68]	; 0x44
 8000470:	9012      	str	r0, [sp, #72]	; 0x48
 8000472:	2007      	movs	r0, #7
 8000474:	9013      	str	r0, [sp, #76]	; 0x4c
 8000476:	a808      	add	r0, sp, #32
 8000478:	f006 f9ce 	bl	8006818 <HAL_RCC_OscConfig>
 800047c:	b118      	cbz	r0, 8000486 <SystemClock_Config+0x92>
 800047e:	e7ff      	b.n	8000480 <SystemClock_Config+0x8c>
 8000480:	f000 f9e6 	bl	8000850 <Error_Handler>
 8000484:	e7ff      	b.n	8000486 <SystemClock_Config+0x92>
 8000486:	200f      	movs	r0, #15
 8000488:	9003      	str	r0, [sp, #12]
 800048a:	2002      	movs	r0, #2
 800048c:	9004      	str	r0, [sp, #16]
 800048e:	2000      	movs	r0, #0
 8000490:	9005      	str	r0, [sp, #20]
 8000492:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000496:	9006      	str	r0, [sp, #24]
 8000498:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800049c:	9007      	str	r0, [sp, #28]
 800049e:	a803      	add	r0, sp, #12
 80004a0:	2105      	movs	r1, #5
 80004a2:	f006 fc31 	bl	8006d08 <HAL_RCC_ClockConfig>
 80004a6:	b118      	cbz	r0, 80004b0 <SystemClock_Config+0xbc>
 80004a8:	e7ff      	b.n	80004aa <SystemClock_Config+0xb6>
 80004aa:	f000 f9d1 	bl	8000850 <Error_Handler>
 80004ae:	e7ff      	b.n	80004b0 <SystemClock_Config+0xbc>
 80004b0:	b014      	add	sp, #80	; 0x50
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <MX_GPIO_Init>:
 80004b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b6:	af03      	add	r7, sp, #12
 80004b8:	e92d 0f00 	stmdb	sp!, {r8, r9, sl, fp}
 80004bc:	b08b      	sub	sp, #44	; 0x2c
 80004be:	2000      	movs	r0, #0
 80004c0:	900a      	str	r0, [sp, #40]	; 0x28
 80004c2:	9009      	str	r0, [sp, #36]	; 0x24
 80004c4:	9008      	str	r0, [sp, #32]
 80004c6:	9007      	str	r0, [sp, #28]
 80004c8:	9006      	str	r0, [sp, #24]
 80004ca:	e7ff      	b.n	80004cc <MX_GPIO_Init+0x18>
 80004cc:	2000      	movs	r0, #0
 80004ce:	9005      	str	r0, [sp, #20]
 80004d0:	f643 0030 	movw	r0, #14384	; 0x3830
 80004d4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80004d8:	6801      	ldr	r1, [r0, #0]
 80004da:	f041 0110 	orr.w	r1, r1, #16
 80004de:	6001      	str	r1, [r0, #0]
 80004e0:	6800      	ldr	r0, [r0, #0]
 80004e2:	f000 0010 	and.w	r0, r0, #16
 80004e6:	9005      	str	r0, [sp, #20]
 80004e8:	9805      	ldr	r0, [sp, #20]
 80004ea:	e7ff      	b.n	80004ec <MX_GPIO_Init+0x38>
 80004ec:	e7ff      	b.n	80004ee <MX_GPIO_Init+0x3a>
 80004ee:	2000      	movs	r0, #0
 80004f0:	9004      	str	r0, [sp, #16]
 80004f2:	f643 0030 	movw	r0, #14384	; 0x3830
 80004f6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80004fa:	6801      	ldr	r1, [r0, #0]
 80004fc:	f041 0104 	orr.w	r1, r1, #4
 8000500:	6001      	str	r1, [r0, #0]
 8000502:	6800      	ldr	r0, [r0, #0]
 8000504:	f000 0004 	and.w	r0, r0, #4
 8000508:	9004      	str	r0, [sp, #16]
 800050a:	9804      	ldr	r0, [sp, #16]
 800050c:	e7ff      	b.n	800050e <MX_GPIO_Init+0x5a>
 800050e:	e7ff      	b.n	8000510 <MX_GPIO_Init+0x5c>
 8000510:	2000      	movs	r0, #0
 8000512:	9003      	str	r0, [sp, #12]
 8000514:	f643 0030 	movw	r0, #14384	; 0x3830
 8000518:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800051c:	6801      	ldr	r1, [r0, #0]
 800051e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8000522:	6001      	str	r1, [r0, #0]
 8000524:	6800      	ldr	r0, [r0, #0]
 8000526:	f000 0080 	and.w	r0, r0, #128	; 0x80
 800052a:	9003      	str	r0, [sp, #12]
 800052c:	9803      	ldr	r0, [sp, #12]
 800052e:	e7ff      	b.n	8000530 <MX_GPIO_Init+0x7c>
 8000530:	e7ff      	b.n	8000532 <MX_GPIO_Init+0x7e>
 8000532:	2000      	movs	r0, #0
 8000534:	9002      	str	r0, [sp, #8]
 8000536:	f643 0030 	movw	r0, #14384	; 0x3830
 800053a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800053e:	6801      	ldr	r1, [r0, #0]
 8000540:	f041 0101 	orr.w	r1, r1, #1
 8000544:	6001      	str	r1, [r0, #0]
 8000546:	6800      	ldr	r0, [r0, #0]
 8000548:	f000 0001 	and.w	r0, r0, #1
 800054c:	9002      	str	r0, [sp, #8]
 800054e:	9802      	ldr	r0, [sp, #8]
 8000550:	e7ff      	b.n	8000552 <MX_GPIO_Init+0x9e>
 8000552:	e7ff      	b.n	8000554 <MX_GPIO_Init+0xa0>
 8000554:	2000      	movs	r0, #0
 8000556:	9001      	str	r0, [sp, #4]
 8000558:	f643 0030 	movw	r0, #14384	; 0x3830
 800055c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000560:	6801      	ldr	r1, [r0, #0]
 8000562:	f041 0102 	orr.w	r1, r1, #2
 8000566:	6001      	str	r1, [r0, #0]
 8000568:	6800      	ldr	r0, [r0, #0]
 800056a:	f000 0002 	and.w	r0, r0, #2
 800056e:	9001      	str	r0, [sp, #4]
 8000570:	9801      	ldr	r0, [sp, #4]
 8000572:	e7ff      	b.n	8000574 <MX_GPIO_Init+0xc0>
 8000574:	e7ff      	b.n	8000576 <MX_GPIO_Init+0xc2>
 8000576:	2000      	movs	r0, #0
 8000578:	9000      	str	r0, [sp, #0]
 800057a:	f643 0030 	movw	r0, #14384	; 0x3830
 800057e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000582:	6801      	ldr	r1, [r0, #0]
 8000584:	f041 0108 	orr.w	r1, r1, #8
 8000588:	6001      	str	r1, [r0, #0]
 800058a:	6800      	ldr	r0, [r0, #0]
 800058c:	f000 0008 	and.w	r0, r0, #8
 8000590:	9000      	str	r0, [sp, #0]
 8000592:	9800      	ldr	r0, [sp, #0]
 8000594:	e7ff      	b.n	8000596 <MX_GPIO_Init+0xe2>
 8000596:	f241 0900 	movw	r9, #4096	; 0x1000
 800059a:	f2c4 0902 	movt	r9, #16386	; 0x4002
 800059e:	f04f 0808 	mov.w	r8, #8
 80005a2:	2500      	movs	r5, #0
 80005a4:	4648      	mov	r0, r9
 80005a6:	2108      	movs	r1, #8
 80005a8:	2200      	movs	r2, #0
 80005aa:	f004 fa0d 	bl	80049c8 <HAL_GPIO_WritePin>
 80005ae:	f640 0400 	movw	r4, #2048	; 0x800
 80005b2:	f2c4 0402 	movt	r4, #16386	; 0x4002
 80005b6:	f04f 0a01 	mov.w	sl, #1
 80005ba:	4620      	mov	r0, r4
 80005bc:	2101      	movs	r1, #1
 80005be:	2201      	movs	r2, #1
 80005c0:	f004 fa02 	bl	80049c8 <HAL_GPIO_WritePin>
 80005c4:	f640 4000 	movw	r0, #3072	; 0xc00
 80005c8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80005cc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005d0:	2200      	movs	r2, #0
 80005d2:	f004 f9f9 	bl	80049c8 <HAL_GPIO_WritePin>
 80005d6:	f8cd 8018 	str.w	r8, [sp, #24]
 80005da:	f8cd a01c 	str.w	sl, [sp, #28]
 80005de:	9508      	str	r5, [sp, #32]
 80005e0:	9509      	str	r5, [sp, #36]	; 0x24
 80005e2:	ae06      	add	r6, sp, #24
 80005e4:	4648      	mov	r0, r9
 80005e6:	4631      	mov	r1, r6
 80005e8:	f003 ff56 	bl	8004498 <HAL_GPIO_Init>
 80005ec:	f8cd a018 	str.w	sl, [sp, #24]
 80005f0:	f8cd a01c 	str.w	sl, [sp, #28]
 80005f4:	9508      	str	r5, [sp, #32]
 80005f6:	9509      	str	r5, [sp, #36]	; 0x24
 80005f8:	4620      	mov	r0, r4
 80005fa:	4631      	mov	r1, r6
 80005fc:	f003 ff4c 	bl	8004498 <HAL_GPIO_Init>
 8000600:	f8cd 8018 	str.w	r8, [sp, #24]
 8000604:	f04f 0b02 	mov.w	fp, #2
 8000608:	f8cd b01c 	str.w	fp, [sp, #28]
 800060c:	9508      	str	r5, [sp, #32]
 800060e:	9509      	str	r5, [sp, #36]	; 0x24
 8000610:	f04f 0905 	mov.w	r9, #5
 8000614:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8000618:	4620      	mov	r0, r4
 800061a:	4631      	mov	r1, r6
 800061c:	f003 ff3c 	bl	8004498 <HAL_GPIO_Init>
 8000620:	f8cd a018 	str.w	sl, [sp, #24]
 8000624:	f44f 1890 	mov.w	r8, #1179648	; 0x120000
 8000628:	f8cd 801c 	str.w	r8, [sp, #28]
 800062c:	9508      	str	r5, [sp, #32]
 800062e:	2000      	movs	r0, #0
 8000630:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000634:	4631      	mov	r1, r6
 8000636:	f003 ff2f 	bl	8004498 <HAL_GPIO_Init>
 800063a:	2004      	movs	r0, #4
 800063c:	9006      	str	r0, [sp, #24]
 800063e:	9507      	str	r5, [sp, #28]
 8000640:	9508      	str	r5, [sp, #32]
 8000642:	f240 4400 	movw	r4, #1024	; 0x400
 8000646:	f2c4 0402 	movt	r4, #16386	; 0x4002
 800064a:	4620      	mov	r0, r4
 800064c:	4631      	mov	r1, r6
 800064e:	f003 ff23 	bl	8004498 <HAL_GPIO_Init>
 8000652:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000656:	9006      	str	r0, [sp, #24]
 8000658:	f8cd b01c 	str.w	fp, [sp, #28]
 800065c:	9508      	str	r5, [sp, #32]
 800065e:	9509      	str	r5, [sp, #36]	; 0x24
 8000660:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8000664:	4620      	mov	r0, r4
 8000666:	4631      	mov	r1, r6
 8000668:	f003 ff16 	bl	8004498 <HAL_GPIO_Init>
 800066c:	f24f 0010 	movw	r0, #61456	; 0xf010
 8000670:	9006      	str	r0, [sp, #24]
 8000672:	f8cd a01c 	str.w	sl, [sp, #28]
 8000676:	9508      	str	r5, [sp, #32]
 8000678:	9509      	str	r5, [sp, #36]	; 0x24
 800067a:	f640 4400 	movw	r4, #3072	; 0xc00
 800067e:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8000682:	4620      	mov	r0, r4
 8000684:	4631      	mov	r1, r6
 8000686:	f003 ff07 	bl	8004498 <HAL_GPIO_Init>
 800068a:	2020      	movs	r0, #32
 800068c:	9006      	str	r0, [sp, #24]
 800068e:	9507      	str	r5, [sp, #28]
 8000690:	9508      	str	r5, [sp, #32]
 8000692:	4620      	mov	r0, r4
 8000694:	4631      	mov	r1, r6
 8000696:	f003 feff 	bl	8004498 <HAL_GPIO_Init>
 800069a:	f8cd b018 	str.w	fp, [sp, #24]
 800069e:	f8cd 801c 	str.w	r8, [sp, #28]
 80006a2:	9508      	str	r5, [sp, #32]
 80006a4:	f241 0000 	movw	r0, #4096	; 0x1000
 80006a8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80006ac:	4631      	mov	r1, r6
 80006ae:	f003 fef3 	bl	8004498 <HAL_GPIO_Init>
 80006b2:	b00b      	add	sp, #44	; 0x2c
 80006b4:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
 80006b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ba:	bf00      	nop

080006bc <MX_I2C1_Init>:
 80006bc:	b580      	push	{r7, lr}
 80006be:	466f      	mov	r7, sp
 80006c0:	f240 00e4 	movw	r0, #228	; 0xe4
 80006c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80006c8:	f245 4100 	movw	r1, #21504	; 0x5400
 80006cc:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80006d0:	6001      	str	r1, [r0, #0]
 80006d2:	f248 61a0 	movw	r1, #34464	; 0x86a0
 80006d6:	f2c0 0101 	movt	r1, #1
 80006da:	6041      	str	r1, [r0, #4]
 80006dc:	2100      	movs	r1, #0
 80006de:	6081      	str	r1, [r0, #8]
 80006e0:	60c1      	str	r1, [r0, #12]
 80006e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006e6:	6102      	str	r2, [r0, #16]
 80006e8:	6141      	str	r1, [r0, #20]
 80006ea:	6181      	str	r1, [r0, #24]
 80006ec:	61c1      	str	r1, [r0, #28]
 80006ee:	6201      	str	r1, [r0, #32]
 80006f0:	f005 faae 	bl	8005c50 <HAL_I2C_Init>
 80006f4:	b118      	cbz	r0, 80006fe <MX_I2C1_Init+0x42>
 80006f6:	e7ff      	b.n	80006f8 <MX_I2C1_Init+0x3c>
 80006f8:	f000 f8aa 	bl	8000850 <Error_Handler>
 80006fc:	e7ff      	b.n	80006fe <MX_I2C1_Init+0x42>
 80006fe:	bd80      	pop	{r7, pc}

08000700 <MX_I2S3_Init>:
 8000700:	b580      	push	{r7, lr}
 8000702:	466f      	mov	r7, sp
 8000704:	f240 1040 	movw	r0, #320	; 0x140
 8000708:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800070c:	f643 4100 	movw	r1, #15360	; 0x3c00
 8000710:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000714:	6001      	str	r1, [r0, #0]
 8000716:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071a:	6041      	str	r1, [r0, #4]
 800071c:	2200      	movs	r2, #0
 800071e:	6082      	str	r2, [r0, #8]
 8000720:	60c2      	str	r2, [r0, #12]
 8000722:	6101      	str	r1, [r0, #16]
 8000724:	f247 7100 	movw	r1, #30464	; 0x7700
 8000728:	f2c0 0101 	movt	r1, #1
 800072c:	6141      	str	r1, [r0, #20]
 800072e:	6182      	str	r2, [r0, #24]
 8000730:	61c2      	str	r2, [r0, #28]
 8000732:	6202      	str	r2, [r0, #32]
 8000734:	f005 fbd0 	bl	8005ed8 <HAL_I2S_Init>
 8000738:	b118      	cbz	r0, 8000742 <MX_I2S3_Init+0x42>
 800073a:	e7ff      	b.n	800073c <MX_I2S3_Init+0x3c>
 800073c:	f000 f888 	bl	8000850 <Error_Handler>
 8000740:	e7ff      	b.n	8000742 <MX_I2S3_Init+0x42>
 8000742:	bd80      	pop	{r7, pc}

08000744 <MX_SPI1_Init>:
 8000744:	b580      	push	{r7, lr}
 8000746:	466f      	mov	r7, sp
 8000748:	f240 108c 	movw	r0, #396	; 0x18c
 800074c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000750:	f243 0100 	movw	r1, #12288	; 0x3000
 8000754:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8000758:	6001      	str	r1, [r0, #0]
 800075a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800075e:	6041      	str	r1, [r0, #4]
 8000760:	2100      	movs	r1, #0
 8000762:	6081      	str	r1, [r0, #8]
 8000764:	60c1      	str	r1, [r0, #12]
 8000766:	6101      	str	r1, [r0, #16]
 8000768:	6141      	str	r1, [r0, #20]
 800076a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800076e:	6182      	str	r2, [r0, #24]
 8000770:	61c1      	str	r1, [r0, #28]
 8000772:	6201      	str	r1, [r0, #32]
 8000774:	6241      	str	r1, [r0, #36]	; 0x24
 8000776:	6281      	str	r1, [r0, #40]	; 0x28
 8000778:	210a      	movs	r1, #10
 800077a:	62c1      	str	r1, [r0, #44]	; 0x2c
 800077c:	f006 fe56 	bl	800742c <HAL_SPI_Init>
 8000780:	b118      	cbz	r0, 800078a <MX_SPI1_Init+0x46>
 8000782:	e7ff      	b.n	8000784 <MX_SPI1_Init+0x40>
 8000784:	f000 f864 	bl	8000850 <Error_Handler>
 8000788:	e7ff      	b.n	800078a <MX_SPI1_Init+0x46>
 800078a:	bd80      	pop	{r7, pc}

0800078c <MX_USART2_UART_Init>:
 800078c:	b580      	push	{r7, lr}
 800078e:	466f      	mov	r7, sp
 8000790:	f240 0090 	movw	r0, #144	; 0x90
 8000794:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000798:	f244 4100 	movw	r1, #17408	; 0x4400
 800079c:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80007a0:	6001      	str	r1, [r0, #0]
 80007a2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80007a6:	6041      	str	r1, [r0, #4]
 80007a8:	2100      	movs	r1, #0
 80007aa:	6081      	str	r1, [r0, #8]
 80007ac:	60c1      	str	r1, [r0, #12]
 80007ae:	6101      	str	r1, [r0, #16]
 80007b0:	220c      	movs	r2, #12
 80007b2:	6142      	str	r2, [r0, #20]
 80007b4:	6181      	str	r1, [r0, #24]
 80007b6:	61c1      	str	r1, [r0, #28]
 80007b8:	f007 f96e 	bl	8007a98 <HAL_UART_Init>
 80007bc:	b118      	cbz	r0, 80007c6 <MX_USART2_UART_Init+0x3a>
 80007be:	e7ff      	b.n	80007c0 <MX_USART2_UART_Init+0x34>
 80007c0:	f000 f846 	bl	8000850 <Error_Handler>
 80007c4:	e7ff      	b.n	80007c6 <MX_USART2_UART_Init+0x3a>
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <StartTask02>:
 80007c8:	b580      	push	{r7, lr}
 80007ca:	466f      	mov	r7, sp
 80007cc:	b082      	sub	sp, #8
 80007ce:	9001      	str	r0, [sp, #4]
 80007d0:	e7ff      	b.n	80007d2 <StartTask02+0xa>
 80007d2:	f7ff fd61 	bl	8000298 <getidx>
 80007d6:	9000      	str	r0, [sp, #0]
 80007d8:	9a00      	ldr	r2, [sp, #0]
 80007da:	f64b 000e 	movw	r0, #47118	; 0xb80e
 80007de:	f6c0 0000 	movt	r0, #2048	; 0x800
 80007e2:	f240 71c9 	movw	r1, #1993	; 0x7c9
 80007e6:	f6c0 0100 	movt	r1, #2048	; 0x800
 80007ea:	f001 f8e5 	bl	80019b8 <iprintf>

080007ee <StartTask02_0_FORPUSH>:
 80007ee:	b673      	cpsid	if
 80007f0:	f240 0e00 	movw	lr, #0
 80007f4:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 80007f8:	b500      	push	{lr}
 80007fa:	f000 f8b1 	bl	8000960 <MasterForward>
 80007fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000802:	f008 f9df 	bl	8008bc4 <osDelay>
 8000806:	e7e4      	b.n	80007d2 <StartTask02+0xa>

08000808 <StartTask01>:
 8000808:	b580      	push	{r7, lr}
 800080a:	466f      	mov	r7, sp
 800080c:	b084      	sub	sp, #16
 800080e:	9003      	str	r0, [sp, #12]
 8000810:	f003 fd54 	bl	80042bc <HAL_GetTick>
 8000814:	9002      	str	r0, [sp, #8]
 8000816:	e7ff      	b.n	8000818 <StartTask01+0x10>
 8000818:	f7ff fd3e 	bl	8000298 <getidx>
 800081c:	9001      	str	r0, [sp, #4]
 800081e:	9a01      	ldr	r2, [sp, #4]
 8000820:	f64b 000e 	movw	r0, #47118	; 0xb80e
 8000824:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000828:	f240 71c9 	movw	r1, #1993	; 0x7c9
 800082c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000830:	f001 f8c2 	bl	80019b8 <iprintf>

08000834 <StartTask01_4_FORPUSH>:
 8000834:	b673      	cpsid	if
 8000836:	f240 0e0c 	movw	lr, #12
 800083a:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 800083e:	b500      	push	{lr}
 8000840:	f000 f88e 	bl	8000960 <MasterForward>
 8000844:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000848:	f008 f9bc 	bl	8008bc4 <osDelay>
 800084c:	e7e4      	b.n	8000818 <StartTask01+0x10>
 800084e:	bf00      	nop

08000850 <Error_Handler>:
 8000850:	b672      	cpsid	i
 8000852:	e7ff      	b.n	8000854 <Error_Handler+0x4>
 8000854:	e7fe      	b.n	8000854 <Error_Handler+0x4>
 8000856:	bf00      	nop

08000858 <c>:
 8000858:	b580      	push	{r7, lr}
 800085a:	466f      	mov	r7, sp
 800085c:	b086      	sub	sp, #24
 800085e:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8000862:	9005      	str	r0, [sp, #20]
 8000864:	9104      	str	r1, [sp, #16]
 8000866:	9203      	str	r2, [sp, #12]
 8000868:	9302      	str	r3, [sp, #8]
 800086a:	f7ff fd15 	bl	8000298 <getidx>
 800086e:	9001      	str	r0, [sp, #4]
 8000870:	9901      	ldr	r1, [sp, #4]
 8000872:	f64b 0016 	movw	r0, #47126	; 0xb816
 8000876:	f6c0 0000 	movt	r0, #2048	; 0x800
 800087a:	f001 f89d 	bl	80019b8 <iprintf>
 800087e:	f64b 0002 	movw	r0, #47106	; 0xb802
 8000882:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000886:	f001 f897 	bl	80019b8 <iprintf>
 800088a:	9805      	ldr	r0, [sp, #20]
 800088c:	9904      	ldr	r1, [sp, #16]
 800088e:	4408      	add	r0, r1
 8000890:	9903      	ldr	r1, [sp, #12]
 8000892:	4408      	add	r0, r1
 8000894:	9902      	ldr	r1, [sp, #8]
 8000896:	4408      	add	r0, r1
 8000898:	68b9      	ldr	r1, [r7, #8]
 800089a:	4408      	add	r0, r1
 800089c:	b006      	add	sp, #24
 800089e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008a2:	f000 f876 	bl	8000992 <MasterBackward>
 80008a6:	bf00      	nop

080008a8 <b>:
 80008a8:	b580      	push	{r7, lr}
 80008aa:	466f      	mov	r7, sp
 80008ac:	b084      	sub	sp, #16
 80008ae:	9003      	str	r0, [sp, #12]
 80008b0:	f7ff fcf2 	bl	8000298 <getidx>
 80008b4:	9002      	str	r0, [sp, #8]
 80008b6:	9902      	ldr	r1, [sp, #8]
 80008b8:	f64b 0016 	movw	r0, #47126	; 0xb816
 80008bc:	f6c0 0000 	movt	r0, #2048	; 0x800
 80008c0:	f001 f87a 	bl	80019b8 <iprintf>
 80008c4:	f64b 0006 	movw	r0, #47110	; 0xb806
 80008c8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80008cc:	f001 f874 	bl	80019b8 <iprintf>
 80008d0:	9803      	ldr	r0, [sp, #12]
 80008d2:	307b      	adds	r0, #123	; 0x7b

080008d4 <b_8_FORPUSH>:
 80008d4:	b673      	cpsid	if
 80008d6:	2104      	movs	r1, #4
 80008d8:	9100      	str	r1, [sp, #0]
 80008da:	2101      	movs	r1, #1
 80008dc:	2202      	movs	r2, #2
 80008de:	2303      	movs	r3, #3
 80008e0:	f240 0e18 	movw	lr, #24
 80008e4:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 80008e8:	b500      	push	{lr}
 80008ea:	f000 f839 	bl	8000960 <MasterForward>
 80008ee:	b004      	add	sp, #16
 80008f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008f4:	f000 f84d 	bl	8000992 <MasterBackward>

080008f8 <a>:
 80008f8:	b580      	push	{r7, lr}
 80008fa:	466f      	mov	r7, sp
 80008fc:	b082      	sub	sp, #8
 80008fe:	f7ff fccb 	bl	8000298 <getidx>
 8000902:	9001      	str	r0, [sp, #4]
 8000904:	9901      	ldr	r1, [sp, #4]
 8000906:	f64b 0016 	movw	r0, #47126	; 0xb816
 800090a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800090e:	f001 f853 	bl	80019b8 <iprintf>
 8000912:	f64b 000a 	movw	r0, #47114	; 0xb80a
 8000916:	f6c0 0000 	movt	r0, #2048	; 0x800
 800091a:	f001 f84d 	bl	80019b8 <iprintf>

0800091e <a_12_FORPUSH>:
 800091e:	b673      	cpsid	if
 8000920:	2001      	movs	r0, #1
 8000922:	f240 0e24 	movw	lr, #36	; 0x24
 8000926:	f6c0 0e0c 	movt	lr, #2060	; 0x80c
 800092a:	b500      	push	{lr}
 800092c:	f000 f818 	bl	8000960 <MasterForward>
 8000930:	b002      	add	sp, #8
 8000932:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000936:	f000 f82c 	bl	8000992 <MasterBackward>
 800093a:	bf00      	nop

0800093c <HAL_TIM_PeriodElapsedCallback>:
 800093c:	b580      	push	{r7, lr}
 800093e:	466f      	mov	r7, sp
 8000940:	b082      	sub	sp, #8
 8000942:	9001      	str	r0, [sp, #4]
 8000944:	9801      	ldr	r0, [sp, #4]
 8000946:	6800      	ldr	r0, [r0, #0]
 8000948:	f241 0100 	movw	r1, #4096	; 0x1000
 800094c:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000950:	4288      	cmp	r0, r1
 8000952:	d103      	bne.n	800095c <HAL_TIM_PeriodElapsedCallback+0x20>
 8000954:	e7ff      	b.n	8000956 <HAL_TIM_PeriodElapsedCallback+0x1a>
 8000956:	f003 fc9d 	bl	8004294 <HAL_IncTick>
 800095a:	e7ff      	b.n	800095c <HAL_TIM_PeriodElapsedCallback+0x20>
 800095c:	b002      	add	sp, #8
 800095e:	bd80      	pop	{r7, pc}

08000960 <MasterForward>:
 8000960:	b580      	push	{r7, lr}
 8000962:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000966:	b40f      	push	{r0, r1, r2, r3}
 8000968:	9804      	ldr	r0, [sp, #16]
 800096a:	6801      	ldr	r1, [r0, #0]
 800096c:	b401      	push	{r0}
 800096e:	4571      	cmp	r1, lr
 8000970:	d10e      	bne.n	8000990 <fail>
 8000972:	f7ff fc91 	bl	8000298 <getidx>
 8000976:	4601      	mov	r1, r0
 8000978:	bc04      	pop	{r2}
 800097a:	4610      	mov	r0, r2
 800097c:	f7ff fc4c 	bl	8000218 <forward>
 8000980:	e8bd 400f 	ldmia.w	sp!, {r0, r1, r2, r3, lr}
 8000984:	f10e 0e04 	add.w	lr, lr, #4
 8000988:	f8de e000 	ldr.w	lr, [lr]
 800098c:	b663      	cpsie	if
 800098e:	4770      	bx	lr

08000990 <fail>:
 8000990:	bd80      	pop	{r7, pc}

08000992 <MasterBackward>:
 8000992:	b580      	push	{r7, lr}
 8000994:	b673      	cpsid	if
 8000996:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800099a:	b401      	push	{r0}
 800099c:	b500      	push	{lr}
 800099e:	f7ff fc7b 	bl	8000298 <getidx>
 80009a2:	4601      	mov	r1, r0
 80009a4:	bc04      	pop	{r2}
 80009a6:	4610      	mov	r0, r2
 80009a8:	f7ff fc4e 	bl	8000248 <backward>
 80009ac:	4686      	mov	lr, r0
 80009ae:	bc01      	pop	{r0}
 80009b0:	b663      	cpsie	if
 80009b2:	4770      	bx	lr

080009b4 <fail_back>:
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop

080009b8 <HAL_MspInit>:
 80009b8:	b580      	push	{r7, lr}
 80009ba:	466f      	mov	r7, sp
 80009bc:	b082      	sub	sp, #8
 80009be:	e7ff      	b.n	80009c0 <HAL_MspInit+0x8>
 80009c0:	2000      	movs	r0, #0
 80009c2:	9001      	str	r0, [sp, #4]
 80009c4:	f643 0044 	movw	r0, #14404	; 0x3844
 80009c8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80009cc:	6801      	ldr	r1, [r0, #0]
 80009ce:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80009d2:	6001      	str	r1, [r0, #0]
 80009d4:	6800      	ldr	r0, [r0, #0]
 80009d6:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
 80009da:	9001      	str	r0, [sp, #4]
 80009dc:	9801      	ldr	r0, [sp, #4]
 80009de:	e7ff      	b.n	80009e0 <HAL_MspInit+0x28>
 80009e0:	e7ff      	b.n	80009e2 <HAL_MspInit+0x2a>
 80009e2:	2000      	movs	r0, #0
 80009e4:	9000      	str	r0, [sp, #0]
 80009e6:	f643 0040 	movw	r0, #14400	; 0x3840
 80009ea:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80009ee:	6801      	ldr	r1, [r0, #0]
 80009f0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80009f4:	6001      	str	r1, [r0, #0]
 80009f6:	6800      	ldr	r0, [r0, #0]
 80009f8:	f000 5080 	and.w	r0, r0, #268435456	; 0x10000000
 80009fc:	9000      	str	r0, [sp, #0]
 80009fe:	9800      	ldr	r0, [sp, #0]
 8000a00:	e7ff      	b.n	8000a02 <HAL_MspInit+0x4a>
 8000a02:	f06f 0001 	mvn.w	r0, #1
 8000a06:	210f      	movs	r1, #15
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f003 fd1b 	bl	8004444 <HAL_NVIC_SetPriority>
 8000a0e:	b002      	add	sp, #8
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop

08000a14 <HAL_I2C_MspInit>:
 8000a14:	b580      	push	{r7, lr}
 8000a16:	466f      	mov	r7, sp
 8000a18:	b088      	sub	sp, #32
 8000a1a:	9007      	str	r0, [sp, #28]
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	9006      	str	r0, [sp, #24]
 8000a20:	9005      	str	r0, [sp, #20]
 8000a22:	9004      	str	r0, [sp, #16]
 8000a24:	9003      	str	r0, [sp, #12]
 8000a26:	9002      	str	r0, [sp, #8]
 8000a28:	9807      	ldr	r0, [sp, #28]
 8000a2a:	6800      	ldr	r0, [r0, #0]
 8000a2c:	f245 4100 	movw	r1, #21504	; 0x5400
 8000a30:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000a34:	4288      	cmp	r0, r1
 8000a36:	d135      	bne.n	8000aa4 <HAL_I2C_MspInit+0x90>
 8000a38:	e7ff      	b.n	8000a3a <HAL_I2C_MspInit+0x26>
 8000a3a:	e7ff      	b.n	8000a3c <HAL_I2C_MspInit+0x28>
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	9001      	str	r0, [sp, #4]
 8000a40:	f643 0030 	movw	r0, #14384	; 0x3830
 8000a44:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000a48:	6801      	ldr	r1, [r0, #0]
 8000a4a:	f041 0102 	orr.w	r1, r1, #2
 8000a4e:	6001      	str	r1, [r0, #0]
 8000a50:	6800      	ldr	r0, [r0, #0]
 8000a52:	f000 0002 	and.w	r0, r0, #2
 8000a56:	9001      	str	r0, [sp, #4]
 8000a58:	9801      	ldr	r0, [sp, #4]
 8000a5a:	e7ff      	b.n	8000a5c <HAL_I2C_MspInit+0x48>
 8000a5c:	f44f 7010 	mov.w	r0, #576	; 0x240
 8000a60:	9002      	str	r0, [sp, #8]
 8000a62:	2012      	movs	r0, #18
 8000a64:	9003      	str	r0, [sp, #12]
 8000a66:	2001      	movs	r0, #1
 8000a68:	9004      	str	r0, [sp, #16]
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	9005      	str	r0, [sp, #20]
 8000a6e:	2004      	movs	r0, #4
 8000a70:	9006      	str	r0, [sp, #24]
 8000a72:	f240 4000 	movw	r0, #1024	; 0x400
 8000a76:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000a7a:	a902      	add	r1, sp, #8
 8000a7c:	f003 fd0c 	bl	8004498 <HAL_GPIO_Init>
 8000a80:	e7ff      	b.n	8000a82 <HAL_I2C_MspInit+0x6e>
 8000a82:	2000      	movs	r0, #0
 8000a84:	9000      	str	r0, [sp, #0]
 8000a86:	f643 0040 	movw	r0, #14400	; 0x3840
 8000a8a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000a8e:	6801      	ldr	r1, [r0, #0]
 8000a90:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8000a94:	6001      	str	r1, [r0, #0]
 8000a96:	6800      	ldr	r0, [r0, #0]
 8000a98:	f400 1000 	and.w	r0, r0, #2097152	; 0x200000
 8000a9c:	9000      	str	r0, [sp, #0]
 8000a9e:	9800      	ldr	r0, [sp, #0]
 8000aa0:	e7ff      	b.n	8000aa2 <HAL_I2C_MspInit+0x8e>
 8000aa2:	e7ff      	b.n	8000aa4 <HAL_I2C_MspInit+0x90>
 8000aa4:	b008      	add	sp, #32
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <HAL_I2C_MspDeInit>:
 8000aa8:	b5d0      	push	{r4, r6, r7, lr}
 8000aaa:	af02      	add	r7, sp, #8
 8000aac:	b082      	sub	sp, #8
 8000aae:	9001      	str	r0, [sp, #4]
 8000ab0:	9801      	ldr	r0, [sp, #4]
 8000ab2:	6800      	ldr	r0, [r0, #0]
 8000ab4:	f245 4100 	movw	r1, #21504	; 0x5400
 8000ab8:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000abc:	4288      	cmp	r0, r1
 8000abe:	d116      	bne.n	8000aee <HAL_I2C_MspDeInit+0x46>
 8000ac0:	e7ff      	b.n	8000ac2 <HAL_I2C_MspDeInit+0x1a>
 8000ac2:	f643 0040 	movw	r0, #14400	; 0x3840
 8000ac6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000aca:	6801      	ldr	r1, [r0, #0]
 8000acc:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
 8000ad0:	6001      	str	r1, [r0, #0]
 8000ad2:	f240 4400 	movw	r4, #1024	; 0x400
 8000ad6:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8000ada:	4620      	mov	r0, r4
 8000adc:	2140      	movs	r1, #64	; 0x40
 8000ade:	f003 fe77 	bl	80047d0 <HAL_GPIO_DeInit>
 8000ae2:	4620      	mov	r0, r4
 8000ae4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae8:	f003 fe72 	bl	80047d0 <HAL_GPIO_DeInit>
 8000aec:	e7ff      	b.n	8000aee <HAL_I2C_MspDeInit+0x46>
 8000aee:	b002      	add	sp, #8
 8000af0:	bdd0      	pop	{r4, r6, r7, pc}
 8000af2:	bf00      	nop

08000af4 <HAL_I2S_MspInit>:
 8000af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000af6:	af03      	add	r7, sp, #12
 8000af8:	f84d 8d04 	str.w	r8, [sp, #-4]!
 8000afc:	b08e      	sub	sp, #56	; 0x38
 8000afe:	900d      	str	r0, [sp, #52]	; 0x34
 8000b00:	2000      	movs	r0, #0
 8000b02:	900c      	str	r0, [sp, #48]	; 0x30
 8000b04:	900b      	str	r0, [sp, #44]	; 0x2c
 8000b06:	900a      	str	r0, [sp, #40]	; 0x28
 8000b08:	9009      	str	r0, [sp, #36]	; 0x24
 8000b0a:	9008      	str	r0, [sp, #32]
 8000b0c:	9007      	str	r0, [sp, #28]
 8000b0e:	9006      	str	r0, [sp, #24]
 8000b10:	9005      	str	r0, [sp, #20]
 8000b12:	9004      	str	r0, [sp, #16]
 8000b14:	980d      	ldr	r0, [sp, #52]	; 0x34
 8000b16:	6800      	ldr	r0, [r0, #0]
 8000b18:	f643 4100 	movw	r1, #15360	; 0x3c00
 8000b1c:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000b20:	4288      	cmp	r0, r1
 8000b22:	d163      	bne.n	8000bec <HAL_I2S_MspInit+0xf8>
 8000b24:	e7ff      	b.n	8000b26 <HAL_I2S_MspInit+0x32>
 8000b26:	2001      	movs	r0, #1
 8000b28:	9004      	str	r0, [sp, #16]
 8000b2a:	20c0      	movs	r0, #192	; 0xc0
 8000b2c:	9005      	str	r0, [sp, #20]
 8000b2e:	2002      	movs	r0, #2
 8000b30:	9006      	str	r0, [sp, #24]
 8000b32:	a804      	add	r0, sp, #16
 8000b34:	f006 fb3a 	bl	80071ac <HAL_RCCEx_PeriphCLKConfig>
 8000b38:	b118      	cbz	r0, 8000b42 <HAL_I2S_MspInit+0x4e>
 8000b3a:	e7ff      	b.n	8000b3c <HAL_I2S_MspInit+0x48>
 8000b3c:	f7ff fe88 	bl	8000850 <Error_Handler>
 8000b40:	e7ff      	b.n	8000b42 <HAL_I2S_MspInit+0x4e>
 8000b42:	e7ff      	b.n	8000b44 <HAL_I2S_MspInit+0x50>
 8000b44:	2000      	movs	r0, #0
 8000b46:	9003      	str	r0, [sp, #12]
 8000b48:	f643 0040 	movw	r0, #14400	; 0x3840
 8000b4c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000b50:	6801      	ldr	r1, [r0, #0]
 8000b52:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8000b56:	6001      	str	r1, [r0, #0]
 8000b58:	6800      	ldr	r0, [r0, #0]
 8000b5a:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
 8000b5e:	9003      	str	r0, [sp, #12]
 8000b60:	9803      	ldr	r0, [sp, #12]
 8000b62:	e7ff      	b.n	8000b64 <HAL_I2S_MspInit+0x70>
 8000b64:	e7ff      	b.n	8000b66 <HAL_I2S_MspInit+0x72>
 8000b66:	2000      	movs	r0, #0
 8000b68:	9002      	str	r0, [sp, #8]
 8000b6a:	f643 0030 	movw	r0, #14384	; 0x3830
 8000b6e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000b72:	6801      	ldr	r1, [r0, #0]
 8000b74:	f041 0101 	orr.w	r1, r1, #1
 8000b78:	6001      	str	r1, [r0, #0]
 8000b7a:	6800      	ldr	r0, [r0, #0]
 8000b7c:	f000 0001 	and.w	r0, r0, #1
 8000b80:	9002      	str	r0, [sp, #8]
 8000b82:	9802      	ldr	r0, [sp, #8]
 8000b84:	e7ff      	b.n	8000b86 <HAL_I2S_MspInit+0x92>
 8000b86:	e7ff      	b.n	8000b88 <HAL_I2S_MspInit+0x94>
 8000b88:	2000      	movs	r0, #0
 8000b8a:	9001      	str	r0, [sp, #4]
 8000b8c:	f643 0030 	movw	r0, #14384	; 0x3830
 8000b90:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000b94:	6801      	ldr	r1, [r0, #0]
 8000b96:	f041 0104 	orr.w	r1, r1, #4
 8000b9a:	6001      	str	r1, [r0, #0]
 8000b9c:	6800      	ldr	r0, [r0, #0]
 8000b9e:	f000 0004 	and.w	r0, r0, #4
 8000ba2:	9001      	str	r0, [sp, #4]
 8000ba4:	9801      	ldr	r0, [sp, #4]
 8000ba6:	e7ff      	b.n	8000ba8 <HAL_I2S_MspInit+0xb4>
 8000ba8:	2010      	movs	r0, #16
 8000baa:	9008      	str	r0, [sp, #32]
 8000bac:	f04f 0802 	mov.w	r8, #2
 8000bb0:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8000bb4:	2600      	movs	r6, #0
 8000bb6:	960a      	str	r6, [sp, #40]	; 0x28
 8000bb8:	960b      	str	r6, [sp, #44]	; 0x2c
 8000bba:	2506      	movs	r5, #6
 8000bbc:	950c      	str	r5, [sp, #48]	; 0x30
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000bc4:	ac08      	add	r4, sp, #32
 8000bc6:	4621      	mov	r1, r4
 8000bc8:	f003 fc66 	bl	8004498 <HAL_GPIO_Init>
 8000bcc:	f44f 50a4 	mov.w	r0, #5248	; 0x1480
 8000bd0:	9008      	str	r0, [sp, #32]
 8000bd2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8000bd6:	960a      	str	r6, [sp, #40]	; 0x28
 8000bd8:	960b      	str	r6, [sp, #44]	; 0x2c
 8000bda:	950c      	str	r5, [sp, #48]	; 0x30
 8000bdc:	f640 0000 	movw	r0, #2048	; 0x800
 8000be0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000be4:	4621      	mov	r1, r4
 8000be6:	f003 fc57 	bl	8004498 <HAL_GPIO_Init>
 8000bea:	e7ff      	b.n	8000bec <HAL_I2S_MspInit+0xf8>
 8000bec:	b00e      	add	sp, #56	; 0x38
 8000bee:	f85d 8b04 	ldr.w	r8, [sp], #4
 8000bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000bf4 <HAL_I2S_MspDeInit>:
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	466f      	mov	r7, sp
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	9001      	str	r0, [sp, #4]
 8000bfc:	9801      	ldr	r0, [sp, #4]
 8000bfe:	6800      	ldr	r0, [r0, #0]
 8000c00:	f643 4100 	movw	r1, #15360	; 0x3c00
 8000c04:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000c08:	4288      	cmp	r0, r1
 8000c0a:	d117      	bne.n	8000c3c <HAL_I2S_MspDeInit+0x48>
 8000c0c:	e7ff      	b.n	8000c0e <HAL_I2S_MspDeInit+0x1a>
 8000c0e:	f643 0040 	movw	r0, #14400	; 0x3840
 8000c12:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000c16:	6801      	ldr	r1, [r0, #0]
 8000c18:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8000c1c:	6001      	str	r1, [r0, #0]
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000c24:	2110      	movs	r1, #16
 8000c26:	f003 fdd3 	bl	80047d0 <HAL_GPIO_DeInit>
 8000c2a:	f640 0000 	movw	r0, #2048	; 0x800
 8000c2e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000c32:	f44f 51a4 	mov.w	r1, #5248	; 0x1480
 8000c36:	f003 fdcb 	bl	80047d0 <HAL_GPIO_DeInit>
 8000c3a:	e7ff      	b.n	8000c3c <HAL_I2S_MspDeInit+0x48>
 8000c3c:	b002      	add	sp, #8
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <HAL_SPI_MspInit>:
 8000c40:	b580      	push	{r7, lr}
 8000c42:	466f      	mov	r7, sp
 8000c44:	b088      	sub	sp, #32
 8000c46:	9007      	str	r0, [sp, #28]
 8000c48:	2000      	movs	r0, #0
 8000c4a:	9006      	str	r0, [sp, #24]
 8000c4c:	9005      	str	r0, [sp, #20]
 8000c4e:	9004      	str	r0, [sp, #16]
 8000c50:	9003      	str	r0, [sp, #12]
 8000c52:	9002      	str	r0, [sp, #8]
 8000c54:	9807      	ldr	r0, [sp, #28]
 8000c56:	6800      	ldr	r0, [r0, #0]
 8000c58:	f243 0100 	movw	r1, #12288	; 0x3000
 8000c5c:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8000c60:	4288      	cmp	r0, r1
 8000c62:	d132      	bne.n	8000cca <HAL_SPI_MspInit+0x8a>
 8000c64:	e7ff      	b.n	8000c66 <HAL_SPI_MspInit+0x26>
 8000c66:	e7ff      	b.n	8000c68 <HAL_SPI_MspInit+0x28>
 8000c68:	2000      	movs	r0, #0
 8000c6a:	9001      	str	r0, [sp, #4]
 8000c6c:	f643 0044 	movw	r0, #14404	; 0x3844
 8000c70:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000c74:	6801      	ldr	r1, [r0, #0]
 8000c76:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8000c7a:	6001      	str	r1, [r0, #0]
 8000c7c:	6800      	ldr	r0, [r0, #0]
 8000c7e:	f400 5080 	and.w	r0, r0, #4096	; 0x1000
 8000c82:	9001      	str	r0, [sp, #4]
 8000c84:	9801      	ldr	r0, [sp, #4]
 8000c86:	e7ff      	b.n	8000c88 <HAL_SPI_MspInit+0x48>
 8000c88:	e7ff      	b.n	8000c8a <HAL_SPI_MspInit+0x4a>
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	9000      	str	r0, [sp, #0]
 8000c8e:	f643 0030 	movw	r0, #14384	; 0x3830
 8000c92:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000c96:	6801      	ldr	r1, [r0, #0]
 8000c98:	f041 0101 	orr.w	r1, r1, #1
 8000c9c:	6001      	str	r1, [r0, #0]
 8000c9e:	6800      	ldr	r0, [r0, #0]
 8000ca0:	f000 0001 	and.w	r0, r0, #1
 8000ca4:	9000      	str	r0, [sp, #0]
 8000ca6:	9800      	ldr	r0, [sp, #0]
 8000ca8:	e7ff      	b.n	8000caa <HAL_SPI_MspInit+0x6a>
 8000caa:	20e0      	movs	r0, #224	; 0xe0
 8000cac:	9002      	str	r0, [sp, #8]
 8000cae:	2002      	movs	r0, #2
 8000cb0:	9003      	str	r0, [sp, #12]
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	9004      	str	r0, [sp, #16]
 8000cb6:	9005      	str	r0, [sp, #20]
 8000cb8:	2005      	movs	r0, #5
 8000cba:	9006      	str	r0, [sp, #24]
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000cc2:	a902      	add	r1, sp, #8
 8000cc4:	f003 fbe8 	bl	8004498 <HAL_GPIO_Init>
 8000cc8:	e7ff      	b.n	8000cca <HAL_SPI_MspInit+0x8a>
 8000cca:	b008      	add	sp, #32
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop

08000cd0 <HAL_SPI_MspDeInit>:
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	466f      	mov	r7, sp
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	9001      	str	r0, [sp, #4]
 8000cd8:	9801      	ldr	r0, [sp, #4]
 8000cda:	6800      	ldr	r0, [r0, #0]
 8000cdc:	f243 0100 	movw	r1, #12288	; 0x3000
 8000ce0:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	d10f      	bne.n	8000d08 <HAL_SPI_MspDeInit+0x38>
 8000ce8:	e7ff      	b.n	8000cea <HAL_SPI_MspDeInit+0x1a>
 8000cea:	f643 0044 	movw	r0, #14404	; 0x3844
 8000cee:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000cf2:	6801      	ldr	r1, [r0, #0]
 8000cf4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8000cf8:	6001      	str	r1, [r0, #0]
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000d00:	21e0      	movs	r1, #224	; 0xe0
 8000d02:	f003 fd65 	bl	80047d0 <HAL_GPIO_DeInit>
 8000d06:	e7ff      	b.n	8000d08 <HAL_SPI_MspDeInit+0x38>
 8000d08:	b002      	add	sp, #8
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <HAL_UART_MspInit>:
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	466f      	mov	r7, sp
 8000d10:	b088      	sub	sp, #32
 8000d12:	9007      	str	r0, [sp, #28]
 8000d14:	2000      	movs	r0, #0
 8000d16:	9006      	str	r0, [sp, #24]
 8000d18:	9005      	str	r0, [sp, #20]
 8000d1a:	9004      	str	r0, [sp, #16]
 8000d1c:	9003      	str	r0, [sp, #12]
 8000d1e:	9002      	str	r0, [sp, #8]
 8000d20:	9807      	ldr	r0, [sp, #28]
 8000d22:	6800      	ldr	r0, [r0, #0]
 8000d24:	f244 4100 	movw	r1, #17408	; 0x4400
 8000d28:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	d133      	bne.n	8000d98 <HAL_UART_MspInit+0x8c>
 8000d30:	e7ff      	b.n	8000d32 <HAL_UART_MspInit+0x26>
 8000d32:	e7ff      	b.n	8000d34 <HAL_UART_MspInit+0x28>
 8000d34:	2000      	movs	r0, #0
 8000d36:	9001      	str	r0, [sp, #4]
 8000d38:	f643 0040 	movw	r0, #14400	; 0x3840
 8000d3c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000d40:	6801      	ldr	r1, [r0, #0]
 8000d42:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8000d46:	6001      	str	r1, [r0, #0]
 8000d48:	6800      	ldr	r0, [r0, #0]
 8000d4a:	f400 3000 	and.w	r0, r0, #131072	; 0x20000
 8000d4e:	9001      	str	r0, [sp, #4]
 8000d50:	9801      	ldr	r0, [sp, #4]
 8000d52:	e7ff      	b.n	8000d54 <HAL_UART_MspInit+0x48>
 8000d54:	e7ff      	b.n	8000d56 <HAL_UART_MspInit+0x4a>
 8000d56:	2000      	movs	r0, #0
 8000d58:	9000      	str	r0, [sp, #0]
 8000d5a:	f643 0030 	movw	r0, #14384	; 0x3830
 8000d5e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000d62:	6801      	ldr	r1, [r0, #0]
 8000d64:	f041 0101 	orr.w	r1, r1, #1
 8000d68:	6001      	str	r1, [r0, #0]
 8000d6a:	6800      	ldr	r0, [r0, #0]
 8000d6c:	f000 0001 	and.w	r0, r0, #1
 8000d70:	9000      	str	r0, [sp, #0]
 8000d72:	9800      	ldr	r0, [sp, #0]
 8000d74:	e7ff      	b.n	8000d76 <HAL_UART_MspInit+0x6a>
 8000d76:	200c      	movs	r0, #12
 8000d78:	9002      	str	r0, [sp, #8]
 8000d7a:	2002      	movs	r0, #2
 8000d7c:	9003      	str	r0, [sp, #12]
 8000d7e:	2000      	movs	r0, #0
 8000d80:	9004      	str	r0, [sp, #16]
 8000d82:	2003      	movs	r0, #3
 8000d84:	9005      	str	r0, [sp, #20]
 8000d86:	2007      	movs	r0, #7
 8000d88:	9006      	str	r0, [sp, #24]
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000d90:	a902      	add	r1, sp, #8
 8000d92:	f003 fb81 	bl	8004498 <HAL_GPIO_Init>
 8000d96:	e7ff      	b.n	8000d98 <HAL_UART_MspInit+0x8c>
 8000d98:	b008      	add	sp, #32
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_UART_MspDeInit>:
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	466f      	mov	r7, sp
 8000da0:	b082      	sub	sp, #8
 8000da2:	9001      	str	r0, [sp, #4]
 8000da4:	9801      	ldr	r0, [sp, #4]
 8000da6:	6800      	ldr	r0, [r0, #0]
 8000da8:	f244 4100 	movw	r1, #17408	; 0x4400
 8000dac:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000db0:	4288      	cmp	r0, r1
 8000db2:	d10f      	bne.n	8000dd4 <HAL_UART_MspDeInit+0x38>
 8000db4:	e7ff      	b.n	8000db6 <HAL_UART_MspDeInit+0x1a>
 8000db6:	f643 0040 	movw	r0, #14400	; 0x3840
 8000dba:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000dbe:	6801      	ldr	r1, [r0, #0]
 8000dc0:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
 8000dc4:	6001      	str	r1, [r0, #0]
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000dcc:	210c      	movs	r1, #12
 8000dce:	f003 fcff 	bl	80047d0 <HAL_GPIO_DeInit>
 8000dd2:	e7ff      	b.n	8000dd4 <HAL_UART_MspDeInit+0x38>
 8000dd4:	b002      	add	sp, #8
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_InitTick>:
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	466f      	mov	r7, sp
 8000ddc:	b08c      	sub	sp, #48	; 0x30
 8000dde:	900b      	str	r0, [sp, #44]	; 0x2c
 8000de0:	2000      	movs	r0, #0
 8000de2:	9004      	str	r0, [sp, #16]
 8000de4:	9003      	str	r0, [sp, #12]
 8000de6:	e7ff      	b.n	8000de8 <HAL_InitTick+0x10>
 8000de8:	2000      	movs	r0, #0
 8000dea:	9000      	str	r0, [sp, #0]
 8000dec:	f643 0040 	movw	r0, #14400	; 0x3840
 8000df0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000df4:	6801      	ldr	r1, [r0, #0]
 8000df6:	f041 0110 	orr.w	r1, r1, #16
 8000dfa:	6001      	str	r1, [r0, #0]
 8000dfc:	6800      	ldr	r0, [r0, #0]
 8000dfe:	f000 0010 	and.w	r0, r0, #16
 8000e02:	9000      	str	r0, [sp, #0]
 8000e04:	9800      	ldr	r0, [sp, #0]
 8000e06:	e7ff      	b.n	8000e08 <HAL_InitTick+0x30>
 8000e08:	a806      	add	r0, sp, #24
 8000e0a:	a902      	add	r1, sp, #8
 8000e0c:	f006 f99c 	bl	8007148 <HAL_RCC_GetClockConfig>
 8000e10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000e12:	9004      	str	r0, [sp, #16]
 8000e14:	9804      	ldr	r0, [sp, #16]
 8000e16:	b920      	cbnz	r0, 8000e22 <HAL_InitTick+0x4a>
 8000e18:	e7ff      	b.n	8000e1a <HAL_InitTick+0x42>
 8000e1a:	f006 f96d 	bl	80070f8 <HAL_RCC_GetPCLK1Freq>
 8000e1e:	9005      	str	r0, [sp, #20]
 8000e20:	e004      	b.n	8000e2c <HAL_InitTick+0x54>
 8000e22:	f006 f969 	bl	80070f8 <HAL_RCC_GetPCLK1Freq>
 8000e26:	0040      	lsls	r0, r0, #1
 8000e28:	9005      	str	r0, [sp, #20]
 8000e2a:	e7ff      	b.n	8000e2c <HAL_InitTick+0x54>
 8000e2c:	9805      	ldr	r0, [sp, #20]
 8000e2e:	f64d 6183 	movw	r1, #56963	; 0xde83
 8000e32:	f2c4 311b 	movt	r1, #17179	; 0x431b
 8000e36:	fba0 0101 	umull	r0, r1, r0, r1
 8000e3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e3e:	eb00 4091 	add.w	r0, r0, r1, lsr #18
 8000e42:	9003      	str	r0, [sp, #12]
 8000e44:	f240 10e8 	movw	r0, #488	; 0x1e8
 8000e48:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000e4c:	f241 0100 	movw	r1, #4096	; 0x1000
 8000e50:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8000e54:	6001      	str	r1, [r0, #0]
 8000e56:	f240 31e7 	movw	r1, #999	; 0x3e7
 8000e5a:	60c1      	str	r1, [r0, #12]
 8000e5c:	9903      	ldr	r1, [sp, #12]
 8000e5e:	6041      	str	r1, [r0, #4]
 8000e60:	2100      	movs	r1, #0
 8000e62:	6101      	str	r1, [r0, #16]
 8000e64:	6081      	str	r1, [r0, #8]
 8000e66:	6181      	str	r1, [r0, #24]
 8000e68:	f006 fb69 	bl	800753e <HAL_TIM_Base_Init>
 8000e6c:	9001      	str	r0, [sp, #4]
 8000e6e:	9801      	ldr	r0, [sp, #4]
 8000e70:	bb10      	cbnz	r0, 8000eb8 <HAL_InitTick+0xe0>
 8000e72:	e7ff      	b.n	8000e74 <HAL_InitTick+0x9c>
 8000e74:	f240 10e8 	movw	r0, #488	; 0x1e8
 8000e78:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000e7c:	f006 fbb8 	bl	80075f0 <HAL_TIM_Base_Start_IT>
 8000e80:	9001      	str	r0, [sp, #4]
 8000e82:	9801      	ldr	r0, [sp, #4]
 8000e84:	b9b8      	cbnz	r0, 8000eb6 <HAL_InitTick+0xde>
 8000e86:	e7ff      	b.n	8000e88 <HAL_InitTick+0xb0>
 8000e88:	2036      	movs	r0, #54	; 0x36
 8000e8a:	f003 faf7 	bl	800447c <HAL_NVIC_EnableIRQ>
 8000e8e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000e90:	280f      	cmp	r0, #15
 8000e92:	d80c      	bhi.n	8000eae <HAL_InitTick+0xd6>
 8000e94:	e7ff      	b.n	8000e96 <HAL_InitTick+0xbe>
 8000e96:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000e98:	2036      	movs	r0, #54	; 0x36
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f003 fad2 	bl	8004444 <HAL_NVIC_SetPriority>
 8000ea0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000ea2:	f240 0168 	movw	r1, #104	; 0x68
 8000ea6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000eaa:	6008      	str	r0, [r1, #0]
 8000eac:	e002      	b.n	8000eb4 <HAL_InitTick+0xdc>
 8000eae:	2001      	movs	r0, #1
 8000eb0:	9001      	str	r0, [sp, #4]
 8000eb2:	e7ff      	b.n	8000eb4 <HAL_InitTick+0xdc>
 8000eb4:	e7ff      	b.n	8000eb6 <HAL_InitTick+0xde>
 8000eb6:	e7ff      	b.n	8000eb8 <HAL_InitTick+0xe0>
 8000eb8:	9801      	ldr	r0, [sp, #4]
 8000eba:	b00c      	add	sp, #48	; 0x30
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop

08000ec0 <HAL_SuspendTick>:
 8000ec0:	f240 10e8 	movw	r0, #488	; 0x1e8
 8000ec4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000ec8:	6800      	ldr	r0, [r0, #0]
 8000eca:	68c1      	ldr	r1, [r0, #12]
 8000ecc:	f021 0101 	bic.w	r1, r1, #1
 8000ed0:	60c1      	str	r1, [r0, #12]
 8000ed2:	4770      	bx	lr

08000ed4 <HAL_ResumeTick>:
 8000ed4:	f240 10e8 	movw	r0, #488	; 0x1e8
 8000ed8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000edc:	6800      	ldr	r0, [r0, #0]
 8000ede:	68c1      	ldr	r1, [r0, #12]
 8000ee0:	f041 0101 	orr.w	r1, r1, #1
 8000ee4:	60c1      	str	r1, [r0, #12]
 8000ee6:	4770      	bx	lr

08000ee8 <NMI_Handler>:
 8000ee8:	e7ff      	b.n	8000eea <NMI_Handler+0x2>
 8000eea:	e7fe      	b.n	8000eea <NMI_Handler+0x2>

08000eec <HardFault_Handler>:
 8000eec:	e7ff      	b.n	8000eee <HardFault_Handler+0x2>
 8000eee:	e7fe      	b.n	8000eee <HardFault_Handler+0x2>

08000ef0 <MemManage_Handler>:
 8000ef0:	e7ff      	b.n	8000ef2 <MemManage_Handler+0x2>
 8000ef2:	e7fe      	b.n	8000ef2 <MemManage_Handler+0x2>

08000ef4 <BusFault_Handler>:
 8000ef4:	e7ff      	b.n	8000ef6 <BusFault_Handler+0x2>
 8000ef6:	e7fe      	b.n	8000ef6 <BusFault_Handler+0x2>

08000ef8 <UsageFault_Handler>:
 8000ef8:	e7ff      	b.n	8000efa <UsageFault_Handler+0x2>
 8000efa:	e7fe      	b.n	8000efa <UsageFault_Handler+0x2>

08000efc <DebugMon_Handler>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <TIM6_DAC_IRQHandler>:
 8000f00:	b580      	push	{r7, lr}
 8000f02:	466f      	mov	r7, sp
 8000f04:	f240 10e8 	movw	r0, #488	; 0x1e8
 8000f08:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000f0c:	f006 fbe0 	bl	80076d0 <HAL_TIM_IRQHandler>
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop

08000f14 <OTG_FS_IRQHandler>:
 8000f14:	b580      	push	{r7, lr}
 8000f16:	466f      	mov	r7, sp
 8000f18:	f644 4074 	movw	r0, #19572	; 0x4c74
 8000f1c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000f20:	f003 fd6b 	bl	80049fa <HAL_HCD_IRQHandler>
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop

08000f28 <initialise_monitor_handles>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <_getpid>:
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	4770      	bx	lr

08000f30 <_kill>:
 8000f30:	b580      	push	{r7, lr}
 8000f32:	466f      	mov	r7, sp
 8000f34:	b082      	sub	sp, #8
 8000f36:	9001      	str	r0, [sp, #4]
 8000f38:	9100      	str	r1, [sp, #0]
 8000f3a:	f000 f9f5 	bl	8001328 <__errno>
 8000f3e:	2116      	movs	r1, #22
 8000f40:	6001      	str	r1, [r0, #0]
 8000f42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f46:	b002      	add	sp, #8
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop

08000f4c <_exit>:
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	466f      	mov	r7, sp
 8000f50:	b082      	sub	sp, #8
 8000f52:	9001      	str	r0, [sp, #4]
 8000f54:	9801      	ldr	r0, [sp, #4]
 8000f56:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f5a:	f7ff ffe9 	bl	8000f30 <_kill>
 8000f5e:	e7ff      	b.n	8000f60 <_exit+0x14>
 8000f60:	e7fe      	b.n	8000f60 <_exit+0x14>
 8000f62:	bf00      	nop

08000f64 <_read>:
 8000f64:	b580      	push	{r7, lr}
 8000f66:	466f      	mov	r7, sp
 8000f68:	b084      	sub	sp, #16
 8000f6a:	9003      	str	r0, [sp, #12]
 8000f6c:	9102      	str	r1, [sp, #8]
 8000f6e:	9201      	str	r2, [sp, #4]
 8000f70:	2000      	movs	r0, #0
 8000f72:	9000      	str	r0, [sp, #0]
 8000f74:	e7ff      	b.n	8000f76 <_read+0x12>
 8000f76:	9800      	ldr	r0, [sp, #0]
 8000f78:	9901      	ldr	r1, [sp, #4]
 8000f7a:	4288      	cmp	r0, r1
 8000f7c:	da0b      	bge.n	8000f96 <_read+0x32>
 8000f7e:	e7ff      	b.n	8000f80 <_read+0x1c>
 8000f80:	f3af 8000 	nop.w
 8000f84:	9902      	ldr	r1, [sp, #8]
 8000f86:	1c4a      	adds	r2, r1, #1
 8000f88:	9202      	str	r2, [sp, #8]
 8000f8a:	7008      	strb	r0, [r1, #0]
 8000f8c:	e7ff      	b.n	8000f8e <_read+0x2a>
 8000f8e:	9800      	ldr	r0, [sp, #0]
 8000f90:	3001      	adds	r0, #1
 8000f92:	9000      	str	r0, [sp, #0]
 8000f94:	e7ef      	b.n	8000f76 <_read+0x12>
 8000f96:	9801      	ldr	r0, [sp, #4]
 8000f98:	b004      	add	sp, #16
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <_write>:
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	466f      	mov	r7, sp
 8000fa0:	b084      	sub	sp, #16
 8000fa2:	9003      	str	r0, [sp, #12]
 8000fa4:	9102      	str	r1, [sp, #8]
 8000fa6:	9201      	str	r2, [sp, #4]
 8000fa8:	2000      	movs	r0, #0
 8000faa:	9000      	str	r0, [sp, #0]
 8000fac:	e7ff      	b.n	8000fae <_write+0x12>
 8000fae:	9800      	ldr	r0, [sp, #0]
 8000fb0:	9901      	ldr	r1, [sp, #4]
 8000fb2:	4288      	cmp	r0, r1
 8000fb4:	da0b      	bge.n	8000fce <_write+0x32>
 8000fb6:	e7ff      	b.n	8000fb8 <_write+0x1c>
 8000fb8:	9802      	ldr	r0, [sp, #8]
 8000fba:	1c41      	adds	r1, r0, #1
 8000fbc:	9102      	str	r1, [sp, #8]
 8000fbe:	7800      	ldrb	r0, [r0, #0]
 8000fc0:	f7ff f9ba 	bl	8000338 <__io_putchar>
 8000fc4:	e7ff      	b.n	8000fc6 <_write+0x2a>
 8000fc6:	9800      	ldr	r0, [sp, #0]
 8000fc8:	3001      	adds	r0, #1
 8000fca:	9000      	str	r0, [sp, #0]
 8000fcc:	e7ef      	b.n	8000fae <_write+0x12>
 8000fce:	9801      	ldr	r0, [sp, #4]
 8000fd0:	b004      	add	sp, #16
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <_close>:
 8000fd4:	b081      	sub	sp, #4
 8000fd6:	9000      	str	r0, [sp, #0]
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fdc:	b001      	add	sp, #4
 8000fde:	4770      	bx	lr

08000fe0 <_fstat>:
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	9001      	str	r0, [sp, #4]
 8000fe4:	9100      	str	r1, [sp, #0]
 8000fe6:	9800      	ldr	r0, [sp, #0]
 8000fe8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fec:	6041      	str	r1, [r0, #4]
 8000fee:	2000      	movs	r0, #0
 8000ff0:	b002      	add	sp, #8
 8000ff2:	4770      	bx	lr

08000ff4 <_isatty>:
 8000ff4:	b081      	sub	sp, #4
 8000ff6:	9000      	str	r0, [sp, #0]
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	b001      	add	sp, #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <_lseek>:
 8001000:	b083      	sub	sp, #12
 8001002:	9002      	str	r0, [sp, #8]
 8001004:	9101      	str	r1, [sp, #4]
 8001006:	9200      	str	r2, [sp, #0]
 8001008:	2000      	movs	r0, #0
 800100a:	b003      	add	sp, #12
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <_open>:
 8001010:	b082      	sub	sp, #8
 8001012:	9001      	str	r0, [sp, #4]
 8001014:	9100      	str	r1, [sp, #0]
 8001016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800101a:	b002      	add	sp, #8
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <_wait>:
 8001020:	b580      	push	{r7, lr}
 8001022:	466f      	mov	r7, sp
 8001024:	b082      	sub	sp, #8
 8001026:	9001      	str	r0, [sp, #4]
 8001028:	f000 f97e 	bl	8001328 <__errno>
 800102c:	210a      	movs	r1, #10
 800102e:	6001      	str	r1, [r0, #0]
 8001030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001034:	b002      	add	sp, #8
 8001036:	bd80      	pop	{r7, pc}

08001038 <_unlink>:
 8001038:	b580      	push	{r7, lr}
 800103a:	466f      	mov	r7, sp
 800103c:	b082      	sub	sp, #8
 800103e:	9001      	str	r0, [sp, #4]
 8001040:	f000 f972 	bl	8001328 <__errno>
 8001044:	2102      	movs	r1, #2
 8001046:	6001      	str	r1, [r0, #0]
 8001048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800104c:	b002      	add	sp, #8
 800104e:	bd80      	pop	{r7, pc}

08001050 <_times>:
 8001050:	b081      	sub	sp, #4
 8001052:	9000      	str	r0, [sp, #0]
 8001054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001058:	b001      	add	sp, #4
 800105a:	4770      	bx	lr

0800105c <_stat>:
 800105c:	b082      	sub	sp, #8
 800105e:	9001      	str	r0, [sp, #4]
 8001060:	9100      	str	r1, [sp, #0]
 8001062:	9800      	ldr	r0, [sp, #0]
 8001064:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001068:	6041      	str	r1, [r0, #4]
 800106a:	2000      	movs	r0, #0
 800106c:	b002      	add	sp, #8
 800106e:	4770      	bx	lr

08001070 <_link>:
 8001070:	b580      	push	{r7, lr}
 8001072:	466f      	mov	r7, sp
 8001074:	b082      	sub	sp, #8
 8001076:	9001      	str	r0, [sp, #4]
 8001078:	9100      	str	r1, [sp, #0]
 800107a:	f000 f955 	bl	8001328 <__errno>
 800107e:	211f      	movs	r1, #31
 8001080:	6001      	str	r1, [r0, #0]
 8001082:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001086:	b002      	add	sp, #8
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop

0800108c <_fork>:
 800108c:	b580      	push	{r7, lr}
 800108e:	466f      	mov	r7, sp
 8001090:	f000 f94a 	bl	8001328 <__errno>
 8001094:	210b      	movs	r1, #11
 8001096:	6001      	str	r1, [r0, #0]
 8001098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop

080010a0 <_execve>:
 80010a0:	b580      	push	{r7, lr}
 80010a2:	466f      	mov	r7, sp
 80010a4:	b084      	sub	sp, #16
 80010a6:	9003      	str	r0, [sp, #12]
 80010a8:	9102      	str	r1, [sp, #8]
 80010aa:	9201      	str	r2, [sp, #4]
 80010ac:	f000 f93c 	bl	8001328 <__errno>
 80010b0:	210c      	movs	r1, #12
 80010b2:	6001      	str	r1, [r0, #0]
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010b8:	b004      	add	sp, #16
 80010ba:	bd80      	pop	{r7, pc}

080010bc <_sbrk>:
 80010bc:	b580      	push	{r7, lr}
 80010be:	466f      	mov	r7, sp
 80010c0:	b086      	sub	sp, #24
 80010c2:	9004      	str	r0, [sp, #16]
 80010c4:	f240 4000 	movw	r0, #1024	; 0x400
 80010c8:	f2c0 0000 	movt	r0, #0
 80010cc:	f240 0100 	movw	r1, #0
 80010d0:	f2c2 0102 	movt	r1, #8194	; 0x2002
 80010d4:	1a08      	subs	r0, r1, r0
 80010d6:	9003      	str	r0, [sp, #12]
 80010d8:	9803      	ldr	r0, [sp, #12]
 80010da:	9002      	str	r0, [sp, #8]
 80010dc:	f240 2050 	movw	r0, #592	; 0x250
 80010e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80010e4:	6800      	ldr	r0, [r0, #0]
 80010e6:	b950      	cbnz	r0, 80010fe <_sbrk+0x42>
 80010e8:	e7ff      	b.n	80010ea <_sbrk+0x2e>
 80010ea:	f240 2050 	movw	r0, #592	; 0x250
 80010ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80010f2:	f644 7178 	movw	r1, #20344	; 0x4f78
 80010f6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80010fa:	6001      	str	r1, [r0, #0]
 80010fc:	e7ff      	b.n	80010fe <_sbrk+0x42>
 80010fe:	f240 2050 	movw	r0, #592	; 0x250
 8001102:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001106:	6800      	ldr	r0, [r0, #0]
 8001108:	9904      	ldr	r1, [sp, #16]
 800110a:	4408      	add	r0, r1
 800110c:	9902      	ldr	r1, [sp, #8]
 800110e:	4288      	cmp	r0, r1
 8001110:	d908      	bls.n	8001124 <_sbrk+0x68>
 8001112:	e7ff      	b.n	8001114 <_sbrk+0x58>
 8001114:	f000 f908 	bl	8001328 <__errno>
 8001118:	210c      	movs	r1, #12
 800111a:	6001      	str	r1, [r0, #0]
 800111c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001120:	9005      	str	r0, [sp, #20]
 8001122:	e00c      	b.n	800113e <_sbrk+0x82>
 8001124:	f240 2050 	movw	r0, #592	; 0x250
 8001128:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800112c:	6801      	ldr	r1, [r0, #0]
 800112e:	9101      	str	r1, [sp, #4]
 8001130:	9904      	ldr	r1, [sp, #16]
 8001132:	6802      	ldr	r2, [r0, #0]
 8001134:	4411      	add	r1, r2
 8001136:	6001      	str	r1, [r0, #0]
 8001138:	9801      	ldr	r0, [sp, #4]
 800113a:	9005      	str	r0, [sp, #20]
 800113c:	e7ff      	b.n	800113e <_sbrk+0x82>
 800113e:	9805      	ldr	r0, [sp, #20]
 8001140:	b006      	add	sp, #24
 8001142:	bd80      	pop	{r7, pc}

08001144 <SystemInit>:
 8001144:	f64e 5088 	movw	r0, #60808	; 0xed88
 8001148:	f2ce 0000 	movt	r0, #57344	; 0xe000
 800114c:	6801      	ldr	r1, [r0, #0]
 800114e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001152:	6001      	str	r1, [r0, #0]
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop

08001158 <SystemCoreClockUpdate>:
 8001158:	b085      	sub	sp, #20
 800115a:	2000      	movs	r0, #0
 800115c:	9004      	str	r0, [sp, #16]
 800115e:	9003      	str	r0, [sp, #12]
 8001160:	2102      	movs	r1, #2
 8001162:	9102      	str	r1, [sp, #8]
 8001164:	9001      	str	r0, [sp, #4]
 8001166:	9100      	str	r1, [sp, #0]
 8001168:	f643 0008 	movw	r0, #14344	; 0x3808
 800116c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001170:	6800      	ldr	r0, [r0, #0]
 8001172:	f000 000c 	and.w	r0, r0, #12
 8001176:	9004      	str	r0, [sp, #16]
 8001178:	9804      	ldr	r0, [sp, #16]
 800117a:	b130      	cbz	r0, 800118a <SystemCoreClockUpdate+0x32>
 800117c:	e7ff      	b.n	800117e <SystemCoreClockUpdate+0x26>
 800117e:	2804      	cmp	r0, #4
 8001180:	d00d      	beq.n	800119e <SystemCoreClockUpdate+0x46>
 8001182:	e7ff      	b.n	8001184 <SystemCoreClockUpdate+0x2c>
 8001184:	2808      	cmp	r0, #8
 8001186:	d014      	beq.n	80011b2 <SystemCoreClockUpdate+0x5a>
 8001188:	e059      	b.n	800123e <SystemCoreClockUpdate+0xe6>
 800118a:	f240 0000 	movw	r0, #0
 800118e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001192:	f242 4100 	movw	r1, #9216	; 0x2400
 8001196:	f2c0 01f4 	movt	r1, #244	; 0xf4
 800119a:	6001      	str	r1, [r0, #0]
 800119c:	e059      	b.n	8001252 <SystemCoreClockUpdate+0xfa>
 800119e:	f240 0000 	movw	r0, #0
 80011a2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80011a6:	f241 2100 	movw	r1, #4608	; 0x1200
 80011aa:	f2c0 017a 	movt	r1, #122	; 0x7a
 80011ae:	6001      	str	r1, [r0, #0]
 80011b0:	e04f      	b.n	8001252 <SystemCoreClockUpdate+0xfa>
 80011b2:	f643 0004 	movw	r0, #14340	; 0x3804
 80011b6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80011ba:	6801      	ldr	r1, [r0, #0]
 80011bc:	f3c1 5180 	ubfx	r1, r1, #22, #1
 80011c0:	9101      	str	r1, [sp, #4]
 80011c2:	6800      	ldr	r0, [r0, #0]
 80011c4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80011c8:	9000      	str	r0, [sp, #0]
 80011ca:	9801      	ldr	r0, [sp, #4]
 80011cc:	b188      	cbz	r0, 80011f2 <SystemCoreClockUpdate+0x9a>
 80011ce:	e7ff      	b.n	80011d0 <SystemCoreClockUpdate+0x78>
 80011d0:	9800      	ldr	r0, [sp, #0]
 80011d2:	f241 2100 	movw	r1, #4608	; 0x1200
 80011d6:	f2c0 017a 	movt	r1, #122	; 0x7a
 80011da:	fbb1 f0f0 	udiv	r0, r1, r0
 80011de:	f643 0104 	movw	r1, #14340	; 0x3804
 80011e2:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80011e6:	6809      	ldr	r1, [r1, #0]
 80011e8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80011ec:	4348      	muls	r0, r1
 80011ee:	9003      	str	r0, [sp, #12]
 80011f0:	e010      	b.n	8001214 <SystemCoreClockUpdate+0xbc>
 80011f2:	9800      	ldr	r0, [sp, #0]
 80011f4:	f242 4100 	movw	r1, #9216	; 0x2400
 80011f8:	f2c0 01f4 	movt	r1, #244	; 0xf4
 80011fc:	fbb1 f0f0 	udiv	r0, r1, r0
 8001200:	f643 0104 	movw	r1, #14340	; 0x3804
 8001204:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8001208:	6809      	ldr	r1, [r1, #0]
 800120a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800120e:	4348      	muls	r0, r1
 8001210:	9003      	str	r0, [sp, #12]
 8001212:	e7ff      	b.n	8001214 <SystemCoreClockUpdate+0xbc>
 8001214:	f643 0004 	movw	r0, #14340	; 0x3804
 8001218:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800121c:	6800      	ldr	r0, [r0, #0]
 800121e:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8001222:	2102      	movs	r1, #2
 8001224:	eb01 30d0 	add.w	r0, r1, r0, lsr #15
 8001228:	9002      	str	r0, [sp, #8]
 800122a:	9803      	ldr	r0, [sp, #12]
 800122c:	9902      	ldr	r1, [sp, #8]
 800122e:	fbb0 f0f1 	udiv	r0, r0, r1
 8001232:	f240 0100 	movw	r1, #0
 8001236:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800123a:	6008      	str	r0, [r1, #0]
 800123c:	e009      	b.n	8001252 <SystemCoreClockUpdate+0xfa>
 800123e:	f240 0000 	movw	r0, #0
 8001242:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001246:	f242 4100 	movw	r1, #9216	; 0x2400
 800124a:	f2c0 01f4 	movt	r1, #244	; 0xf4
 800124e:	6001      	str	r1, [r0, #0]
 8001250:	e7ff      	b.n	8001252 <SystemCoreClockUpdate+0xfa>
 8001252:	f643 0008 	movw	r0, #14344	; 0x3808
 8001256:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800125a:	6800      	ldr	r0, [r0, #0]
 800125c:	b2c0      	uxtb	r0, r0
 800125e:	0900      	lsrs	r0, r0, #4
 8001260:	f24b 715c 	movw	r1, #46940	; 0xb75c
 8001264:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001268:	5c08      	ldrb	r0, [r1, r0]
 800126a:	9004      	str	r0, [sp, #16]
 800126c:	9804      	ldr	r0, [sp, #16]
 800126e:	f240 0100 	movw	r1, #0
 8001272:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8001276:	680a      	ldr	r2, [r1, #0]
 8001278:	fa22 f000 	lsr.w	r0, r2, r0
 800127c:	6008      	str	r0, [r1, #0]
 800127e:	b005      	add	sp, #20
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop

08001284 <__aeabi_memclr>:
 8001284:	2200      	movs	r2, #0
 8001286:	f000 b801 	b.w	800128c <__aeabi_memset>
 800128a:	bf00      	nop

0800128c <__aeabi_memset>:
 800128c:	b470      	push	{r4, r5, r6}
 800128e:	0784      	lsls	r4, r0, #30
 8001290:	d046      	beq.n	8001320 <__aeabi_memset+0x94>
 8001292:	1e4c      	subs	r4, r1, #1
 8001294:	2900      	cmp	r1, #0
 8001296:	d041      	beq.n	800131c <__aeabi_memset+0x90>
 8001298:	b2d5      	uxtb	r5, r2
 800129a:	4603      	mov	r3, r0
 800129c:	e002      	b.n	80012a4 <__aeabi_memset+0x18>
 800129e:	1e61      	subs	r1, r4, #1
 80012a0:	b3e4      	cbz	r4, 800131c <__aeabi_memset+0x90>
 80012a2:	460c      	mov	r4, r1
 80012a4:	f803 5b01 	strb.w	r5, [r3], #1
 80012a8:	0799      	lsls	r1, r3, #30
 80012aa:	d1f8      	bne.n	800129e <__aeabi_memset+0x12>
 80012ac:	2c03      	cmp	r4, #3
 80012ae:	d92e      	bls.n	800130e <__aeabi_memset+0x82>
 80012b0:	b2d5      	uxtb	r5, r2
 80012b2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80012b6:	2c0f      	cmp	r4, #15
 80012b8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80012bc:	d919      	bls.n	80012f2 <__aeabi_memset+0x66>
 80012be:	4626      	mov	r6, r4
 80012c0:	f103 0110 	add.w	r1, r3, #16
 80012c4:	3e10      	subs	r6, #16
 80012c6:	2e0f      	cmp	r6, #15
 80012c8:	f841 5c10 	str.w	r5, [r1, #-16]
 80012cc:	f841 5c0c 	str.w	r5, [r1, #-12]
 80012d0:	f841 5c08 	str.w	r5, [r1, #-8]
 80012d4:	f841 5c04 	str.w	r5, [r1, #-4]
 80012d8:	f101 0110 	add.w	r1, r1, #16
 80012dc:	d8f2      	bhi.n	80012c4 <__aeabi_memset+0x38>
 80012de:	f1a4 0110 	sub.w	r1, r4, #16
 80012e2:	f021 010f 	bic.w	r1, r1, #15
 80012e6:	f004 040f 	and.w	r4, r4, #15
 80012ea:	3110      	adds	r1, #16
 80012ec:	2c03      	cmp	r4, #3
 80012ee:	440b      	add	r3, r1
 80012f0:	d90d      	bls.n	800130e <__aeabi_memset+0x82>
 80012f2:	461e      	mov	r6, r3
 80012f4:	4621      	mov	r1, r4
 80012f6:	3904      	subs	r1, #4
 80012f8:	2903      	cmp	r1, #3
 80012fa:	f846 5b04 	str.w	r5, [r6], #4
 80012fe:	d8fa      	bhi.n	80012f6 <__aeabi_memset+0x6a>
 8001300:	1f21      	subs	r1, r4, #4
 8001302:	f021 0103 	bic.w	r1, r1, #3
 8001306:	3104      	adds	r1, #4
 8001308:	440b      	add	r3, r1
 800130a:	f004 0403 	and.w	r4, r4, #3
 800130e:	b12c      	cbz	r4, 800131c <__aeabi_memset+0x90>
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	441c      	add	r4, r3
 8001314:	f803 2b01 	strb.w	r2, [r3], #1
 8001318:	42a3      	cmp	r3, r4
 800131a:	d1fb      	bne.n	8001314 <__aeabi_memset+0x88>
 800131c:	bc70      	pop	{r4, r5, r6}
 800131e:	4770      	bx	lr
 8001320:	460c      	mov	r4, r1
 8001322:	4603      	mov	r3, r0
 8001324:	e7c2      	b.n	80012ac <__aeabi_memset+0x20>
	...

08001328 <__errno>:
 8001328:	4b01      	ldr	r3, [pc, #4]	; (8001330 <__errno+0x8>)
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000004 	.word	0x20000004

08001334 <__fp_lock>:
 8001334:	2000      	movs	r0, #0
 8001336:	4770      	bx	lr

08001338 <_cleanup_r>:
 8001338:	4901      	ldr	r1, [pc, #4]	; (8001340 <_cleanup_r+0x8>)
 800133a:	f000 b937 	b.w	80015ac <_fwalk_reent>
 800133e:	bf00      	nop
 8001340:	08001d19 	.word	0x08001d19

08001344 <__fp_unlock>:
 8001344:	2000      	movs	r0, #0
 8001346:	4770      	bx	lr

08001348 <__sfmoreglue>:
 8001348:	b570      	push	{r4, r5, r6, lr}
 800134a:	2268      	movs	r2, #104	; 0x68
 800134c:	1e4d      	subs	r5, r1, #1
 800134e:	fb02 f505 	mul.w	r5, r2, r5
 8001352:	460e      	mov	r6, r1
 8001354:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001358:	f000 fabe 	bl	80018d8 <_malloc_r>
 800135c:	4604      	mov	r4, r0
 800135e:	b140      	cbz	r0, 8001372 <__sfmoreglue+0x2a>
 8001360:	2100      	movs	r1, #0
 8001362:	300c      	adds	r0, #12
 8001364:	e9c4 1600 	strd	r1, r6, [r4]
 8001368:	60a0      	str	r0, [r4, #8]
 800136a:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800136e:	f000 f9ff 	bl	8001770 <memset>
 8001372:	4620      	mov	r0, r4
 8001374:	bd70      	pop	{r4, r5, r6, pc}
 8001376:	bf00      	nop

08001378 <__sfp>:
 8001378:	4b27      	ldr	r3, [pc, #156]	; (8001418 <__sfp+0xa0>)
 800137a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800137e:	681e      	ldr	r6, [r3, #0]
 8001380:	69b3      	ldr	r3, [r6, #24]
 8001382:	4607      	mov	r7, r0
 8001384:	b353      	cbz	r3, 80013dc <__sfp+0x64>
 8001386:	3648      	adds	r6, #72	; 0x48
 8001388:	f04f 0804 	mov.w	r8, #4
 800138c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001390:	3b01      	subs	r3, #1
 8001392:	d504      	bpl.n	800139e <__sfp+0x26>
 8001394:	e01e      	b.n	80013d4 <__sfp+0x5c>
 8001396:	1c5a      	adds	r2, r3, #1
 8001398:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800139c:	d01a      	beq.n	80013d4 <__sfp+0x5c>
 800139e:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	2d00      	cmp	r5, #0
 80013a6:	d1f6      	bne.n	8001396 <__sfp+0x1e>
 80013a8:	4b1c      	ldr	r3, [pc, #112]	; (800141c <__sfp+0xa4>)
 80013aa:	6665      	str	r5, [r4, #100]	; 0x64
 80013ac:	e9c4 5500 	strd	r5, r5, [r4]
 80013b0:	e9c4 5302 	strd	r5, r3, [r4, #8]
 80013b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80013b8:	61a5      	str	r5, [r4, #24]
 80013ba:	2208      	movs	r2, #8
 80013bc:	4629      	mov	r1, r5
 80013be:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80013c2:	f000 f9d5 	bl	8001770 <memset>
 80013c6:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80013ca:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80013ce:	4620      	mov	r0, r4
 80013d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013d4:	6835      	ldr	r5, [r6, #0]
 80013d6:	b12d      	cbz	r5, 80013e4 <__sfp+0x6c>
 80013d8:	462e      	mov	r6, r5
 80013da:	e7d7      	b.n	800138c <__sfp+0x14>
 80013dc:	4630      	mov	r0, r6
 80013de:	f000 f81f 	bl	8001420 <__sinit.part.0>
 80013e2:	e7d0      	b.n	8001386 <__sfp+0xe>
 80013e4:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80013e8:	4638      	mov	r0, r7
 80013ea:	f000 fa75 	bl	80018d8 <_malloc_r>
 80013ee:	4604      	mov	r4, r0
 80013f0:	b168      	cbz	r0, 800140e <__sfp+0x96>
 80013f2:	6005      	str	r5, [r0, #0]
 80013f4:	f8c0 8004 	str.w	r8, [r0, #4]
 80013f8:	300c      	adds	r0, #12
 80013fa:	4629      	mov	r1, r5
 80013fc:	60a0      	str	r0, [r4, #8]
 80013fe:	4625      	mov	r5, r4
 8001400:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001404:	f000 f9b4 	bl	8001770 <memset>
 8001408:	6034      	str	r4, [r6, #0]
 800140a:	462e      	mov	r6, r5
 800140c:	e7be      	b.n	800138c <__sfp+0x14>
 800140e:	230c      	movs	r3, #12
 8001410:	6030      	str	r0, [r6, #0]
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	e7db      	b.n	80013ce <__sfp+0x56>
 8001416:	bf00      	nop
 8001418:	0800b7ec 	.word	0x0800b7ec
 800141c:	ffff0001 	.word	0xffff0001

08001420 <__sinit.part.0>:
 8001420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001424:	4b34      	ldr	r3, [pc, #208]	; (80014f8 <__sinit.part.0+0xd8>)
 8001426:	4935      	ldr	r1, [pc, #212]	; (80014fc <__sinit.part.0+0xdc>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	6281      	str	r1, [r0, #40]	; 0x28
 800142c:	4290      	cmp	r0, r2
 800142e:	f04f 0300 	mov.w	r3, #0
 8001432:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001436:	6503      	str	r3, [r0, #80]	; 0x50
 8001438:	bf04      	itt	eq
 800143a:	2301      	moveq	r3, #1
 800143c:	6183      	streq	r3, [r0, #24]
 800143e:	4605      	mov	r5, r0
 8001440:	f7ff ff9a 	bl	8001378 <__sfp>
 8001444:	6068      	str	r0, [r5, #4]
 8001446:	4628      	mov	r0, r5
 8001448:	f7ff ff96 	bl	8001378 <__sfp>
 800144c:	60a8      	str	r0, [r5, #8]
 800144e:	4628      	mov	r0, r5
 8001450:	f7ff ff92 	bl	8001378 <__sfp>
 8001454:	686f      	ldr	r7, [r5, #4]
 8001456:	60e8      	str	r0, [r5, #12]
 8001458:	2400      	movs	r4, #0
 800145a:	2304      	movs	r3, #4
 800145c:	e9c7 4302 	strd	r4, r3, [r7, #8]
 8001460:	2208      	movs	r2, #8
 8001462:	4621      	mov	r1, r4
 8001464:	e9c7 4400 	strd	r4, r4, [r7]
 8001468:	e9c7 4404 	strd	r4, r4, [r7, #16]
 800146c:	667c      	str	r4, [r7, #100]	; 0x64
 800146e:	61bc      	str	r4, [r7, #24]
 8001470:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8001474:	f000 f97c 	bl	8001770 <memset>
 8001478:	f8df b08c 	ldr.w	fp, [pc, #140]	; 8001508 <__sinit.part.0+0xe8>
 800147c:	68ae      	ldr	r6, [r5, #8]
 800147e:	f8df a08c 	ldr.w	sl, [pc, #140]	; 800150c <__sinit.part.0+0xec>
 8001482:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8001510 <__sinit.part.0+0xf0>
 8001486:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8001514 <__sinit.part.0+0xf4>
 800148a:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <__sinit.part.0+0xe0>)
 800148c:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
 8001490:	e9c7 7b08 	strd	r7, fp, [r7, #32]
 8001494:	f8c7 902c 	str.w	r9, [r7, #44]	; 0x2c
 8001498:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
 800149c:	2208      	movs	r2, #8
 800149e:	60f3      	str	r3, [r6, #12]
 80014a0:	e9c6 4400 	strd	r4, r4, [r6]
 80014a4:	e9c6 4404 	strd	r4, r4, [r6, #16]
 80014a8:	6674      	str	r4, [r6, #100]	; 0x64
 80014aa:	60b4      	str	r4, [r6, #8]
 80014ac:	61b4      	str	r4, [r6, #24]
 80014ae:	4621      	mov	r1, r4
 80014b0:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 80014b4:	f000 f95c 	bl	8001770 <memset>
 80014b8:	e9c6 6b08 	strd	r6, fp, [r6, #32]
 80014bc:	e9c6 a90a 	strd	sl, r9, [r6, #40]	; 0x28
 80014c0:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
 80014c4:	68ee      	ldr	r6, [r5, #12]
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <__sinit.part.0+0xe4>)
 80014c8:	60f3      	str	r3, [r6, #12]
 80014ca:	e9c6 4400 	strd	r4, r4, [r6]
 80014ce:	e9c6 4404 	strd	r4, r4, [r6, #16]
 80014d2:	6674      	str	r4, [r6, #100]	; 0x64
 80014d4:	60b4      	str	r4, [r6, #8]
 80014d6:	61b4      	str	r4, [r6, #24]
 80014d8:	4621      	mov	r1, r4
 80014da:	2208      	movs	r2, #8
 80014dc:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 80014e0:	f000 f946 	bl	8001770 <memset>
 80014e4:	2301      	movs	r3, #1
 80014e6:	e9c6 6b08 	strd	r6, fp, [r6, #32]
 80014ea:	e9c6 980b 	strd	r9, r8, [r6, #44]	; 0x2c
 80014ee:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
 80014f2:	61ab      	str	r3, [r5, #24]
 80014f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014f8:	0800b7ec 	.word	0x0800b7ec
 80014fc:	08001339 	.word	0x08001339
 8001500:	00010009 	.word	0x00010009
 8001504:	00020012 	.word	0x00020012
 8001508:	08001b25 	.word	0x08001b25
 800150c:	08001b4d 	.word	0x08001b4d
 8001510:	08001b8d 	.word	0x08001b8d
 8001514:	08001bad 	.word	0x08001bad

08001518 <_cleanup>:
 8001518:	4b02      	ldr	r3, [pc, #8]	; (8001524 <_cleanup+0xc>)
 800151a:	4903      	ldr	r1, [pc, #12]	; (8001528 <_cleanup+0x10>)
 800151c:	6818      	ldr	r0, [r3, #0]
 800151e:	f000 b845 	b.w	80015ac <_fwalk_reent>
 8001522:	bf00      	nop
 8001524:	0800b7ec 	.word	0x0800b7ec
 8001528:	08001d19 	.word	0x08001d19

0800152c <__sinit>:
 800152c:	6983      	ldr	r3, [r0, #24]
 800152e:	b903      	cbnz	r3, 8001532 <__sinit+0x6>
 8001530:	e776      	b.n	8001420 <__sinit.part.0>
 8001532:	4770      	bx	lr

08001534 <__sfp_lock_acquire>:
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop

08001538 <__sfp_lock_release>:
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop

0800153c <__sinit_lock_acquire>:
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop

08001540 <__sinit_lock_release>:
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop

08001544 <__fp_lock_all>:
 8001544:	4b02      	ldr	r3, [pc, #8]	; (8001550 <__fp_lock_all+0xc>)
 8001546:	4903      	ldr	r1, [pc, #12]	; (8001554 <__fp_lock_all+0x10>)
 8001548:	6818      	ldr	r0, [r3, #0]
 800154a:	f000 b80f 	b.w	800156c <_fwalk>
 800154e:	bf00      	nop
 8001550:	20000004 	.word	0x20000004
 8001554:	08001335 	.word	0x08001335

08001558 <__fp_unlock_all>:
 8001558:	4b02      	ldr	r3, [pc, #8]	; (8001564 <__fp_unlock_all+0xc>)
 800155a:	4903      	ldr	r1, [pc, #12]	; (8001568 <__fp_unlock_all+0x10>)
 800155c:	6818      	ldr	r0, [r3, #0]
 800155e:	f000 b805 	b.w	800156c <_fwalk>
 8001562:	bf00      	nop
 8001564:	20000004 	.word	0x20000004
 8001568:	08001345 	.word	0x08001345

0800156c <_fwalk>:
 800156c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001570:	4688      	mov	r8, r1
 8001572:	f100 0748 	add.w	r7, r0, #72	; 0x48
 8001576:	2600      	movs	r6, #0
 8001578:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 800157c:	3d01      	subs	r5, #1
 800157e:	d40f      	bmi.n	80015a0 <_fwalk+0x34>
 8001580:	89a3      	ldrh	r3, [r4, #12]
 8001582:	2b01      	cmp	r3, #1
 8001584:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8001588:	d906      	bls.n	8001598 <_fwalk+0x2c>
 800158a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800158e:	3301      	adds	r3, #1
 8001590:	4620      	mov	r0, r4
 8001592:	d001      	beq.n	8001598 <_fwalk+0x2c>
 8001594:	47c0      	blx	r8
 8001596:	4306      	orrs	r6, r0
 8001598:	1c6b      	adds	r3, r5, #1
 800159a:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800159e:	d1ef      	bne.n	8001580 <_fwalk+0x14>
 80015a0:	683f      	ldr	r7, [r7, #0]
 80015a2:	2f00      	cmp	r7, #0
 80015a4:	d1e8      	bne.n	8001578 <_fwalk+0xc>
 80015a6:	4630      	mov	r0, r6
 80015a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080015ac <_fwalk_reent>:
 80015ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015b0:	4607      	mov	r7, r0
 80015b2:	4688      	mov	r8, r1
 80015b4:	f100 0648 	add.w	r6, r0, #72	; 0x48
 80015b8:	f04f 0900 	mov.w	r9, #0
 80015bc:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 80015c0:	3d01      	subs	r5, #1
 80015c2:	d411      	bmi.n	80015e8 <_fwalk_reent+0x3c>
 80015c4:	89a3      	ldrh	r3, [r4, #12]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80015cc:	d908      	bls.n	80015e0 <_fwalk_reent+0x34>
 80015ce:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80015d2:	3301      	adds	r3, #1
 80015d4:	4621      	mov	r1, r4
 80015d6:	d003      	beq.n	80015e0 <_fwalk_reent+0x34>
 80015d8:	4638      	mov	r0, r7
 80015da:	47c0      	blx	r8
 80015dc:	ea49 0900 	orr.w	r9, r9, r0
 80015e0:	1c6b      	adds	r3, r5, #1
 80015e2:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80015e6:	d1ed      	bne.n	80015c4 <_fwalk_reent+0x18>
 80015e8:	6836      	ldr	r6, [r6, #0]
 80015ea:	2e00      	cmp	r6, #0
 80015ec:	d1e6      	bne.n	80015bc <_fwalk_reent+0x10>
 80015ee:	4648      	mov	r0, r9
 80015f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080015f4 <__libc_init_array>:
 80015f4:	b570      	push	{r4, r5, r6, lr}
 80015f6:	4e0d      	ldr	r6, [pc, #52]	; (800162c <__libc_init_array+0x38>)
 80015f8:	4d0d      	ldr	r5, [pc, #52]	; (8001630 <__libc_init_array+0x3c>)
 80015fa:	1b76      	subs	r6, r6, r5
 80015fc:	10b6      	asrs	r6, r6, #2
 80015fe:	d006      	beq.n	800160e <__libc_init_array+0x1a>
 8001600:	2400      	movs	r4, #0
 8001602:	f855 3b04 	ldr.w	r3, [r5], #4
 8001606:	3401      	adds	r4, #1
 8001608:	4798      	blx	r3
 800160a:	42a6      	cmp	r6, r4
 800160c:	d1f9      	bne.n	8001602 <__libc_init_array+0xe>
 800160e:	4e09      	ldr	r6, [pc, #36]	; (8001634 <__libc_init_array+0x40>)
 8001610:	4d09      	ldr	r5, [pc, #36]	; (8001638 <__libc_init_array+0x44>)
 8001612:	1b76      	subs	r6, r6, r5
 8001614:	f00a f872 	bl	800b6fc <_init>
 8001618:	10b6      	asrs	r6, r6, #2
 800161a:	d006      	beq.n	800162a <__libc_init_array+0x36>
 800161c:	2400      	movs	r4, #0
 800161e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001622:	3401      	adds	r4, #1
 8001624:	4798      	blx	r3
 8001626:	42a6      	cmp	r6, r4
 8001628:	d1f9      	bne.n	800161e <__libc_init_array+0x2a>
 800162a:	bd70      	pop	{r4, r5, r6, pc}
 800162c:	0800b940 	.word	0x0800b940
 8001630:	0800b940 	.word	0x0800b940
 8001634:	0800b944 	.word	0x0800b944
 8001638:	0800b940 	.word	0x0800b940

0800163c <memcpy>:
 800163c:	4684      	mov	ip, r0
 800163e:	ea41 0300 	orr.w	r3, r1, r0
 8001642:	f013 0303 	ands.w	r3, r3, #3
 8001646:	d16d      	bne.n	8001724 <memcpy+0xe8>
 8001648:	3a40      	subs	r2, #64	; 0x40
 800164a:	d341      	bcc.n	80016d0 <memcpy+0x94>
 800164c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001650:	f840 3b04 	str.w	r3, [r0], #4
 8001654:	f851 3b04 	ldr.w	r3, [r1], #4
 8001658:	f840 3b04 	str.w	r3, [r0], #4
 800165c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001660:	f840 3b04 	str.w	r3, [r0], #4
 8001664:	f851 3b04 	ldr.w	r3, [r1], #4
 8001668:	f840 3b04 	str.w	r3, [r0], #4
 800166c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001670:	f840 3b04 	str.w	r3, [r0], #4
 8001674:	f851 3b04 	ldr.w	r3, [r1], #4
 8001678:	f840 3b04 	str.w	r3, [r0], #4
 800167c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001680:	f840 3b04 	str.w	r3, [r0], #4
 8001684:	f851 3b04 	ldr.w	r3, [r1], #4
 8001688:	f840 3b04 	str.w	r3, [r0], #4
 800168c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001690:	f840 3b04 	str.w	r3, [r0], #4
 8001694:	f851 3b04 	ldr.w	r3, [r1], #4
 8001698:	f840 3b04 	str.w	r3, [r0], #4
 800169c:	f851 3b04 	ldr.w	r3, [r1], #4
 80016a0:	f840 3b04 	str.w	r3, [r0], #4
 80016a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80016a8:	f840 3b04 	str.w	r3, [r0], #4
 80016ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80016b0:	f840 3b04 	str.w	r3, [r0], #4
 80016b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80016b8:	f840 3b04 	str.w	r3, [r0], #4
 80016bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80016c0:	f840 3b04 	str.w	r3, [r0], #4
 80016c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80016c8:	f840 3b04 	str.w	r3, [r0], #4
 80016cc:	3a40      	subs	r2, #64	; 0x40
 80016ce:	d2bd      	bcs.n	800164c <memcpy+0x10>
 80016d0:	3230      	adds	r2, #48	; 0x30
 80016d2:	d311      	bcc.n	80016f8 <memcpy+0xbc>
 80016d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80016d8:	f840 3b04 	str.w	r3, [r0], #4
 80016dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80016e0:	f840 3b04 	str.w	r3, [r0], #4
 80016e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80016e8:	f840 3b04 	str.w	r3, [r0], #4
 80016ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80016f0:	f840 3b04 	str.w	r3, [r0], #4
 80016f4:	3a10      	subs	r2, #16
 80016f6:	d2ed      	bcs.n	80016d4 <memcpy+0x98>
 80016f8:	320c      	adds	r2, #12
 80016fa:	d305      	bcc.n	8001708 <memcpy+0xcc>
 80016fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8001700:	f840 3b04 	str.w	r3, [r0], #4
 8001704:	3a04      	subs	r2, #4
 8001706:	d2f9      	bcs.n	80016fc <memcpy+0xc0>
 8001708:	3204      	adds	r2, #4
 800170a:	d008      	beq.n	800171e <memcpy+0xe2>
 800170c:	07d2      	lsls	r2, r2, #31
 800170e:	bf1c      	itt	ne
 8001710:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001714:	f800 3b01 	strbne.w	r3, [r0], #1
 8001718:	d301      	bcc.n	800171e <memcpy+0xe2>
 800171a:	880b      	ldrh	r3, [r1, #0]
 800171c:	8003      	strh	r3, [r0, #0]
 800171e:	4660      	mov	r0, ip
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	2a08      	cmp	r2, #8
 8001726:	d313      	bcc.n	8001750 <memcpy+0x114>
 8001728:	078b      	lsls	r3, r1, #30
 800172a:	d08d      	beq.n	8001648 <memcpy+0xc>
 800172c:	f010 0303 	ands.w	r3, r0, #3
 8001730:	d08a      	beq.n	8001648 <memcpy+0xc>
 8001732:	f1c3 0304 	rsb	r3, r3, #4
 8001736:	1ad2      	subs	r2, r2, r3
 8001738:	07db      	lsls	r3, r3, #31
 800173a:	bf1c      	itt	ne
 800173c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001740:	f800 3b01 	strbne.w	r3, [r0], #1
 8001744:	d380      	bcc.n	8001648 <memcpy+0xc>
 8001746:	f831 3b02 	ldrh.w	r3, [r1], #2
 800174a:	f820 3b02 	strh.w	r3, [r0], #2
 800174e:	e77b      	b.n	8001648 <memcpy+0xc>
 8001750:	3a04      	subs	r2, #4
 8001752:	d3d9      	bcc.n	8001708 <memcpy+0xcc>
 8001754:	3a01      	subs	r2, #1
 8001756:	f811 3b01 	ldrb.w	r3, [r1], #1
 800175a:	f800 3b01 	strb.w	r3, [r0], #1
 800175e:	d2f9      	bcs.n	8001754 <memcpy+0x118>
 8001760:	780b      	ldrb	r3, [r1, #0]
 8001762:	7003      	strb	r3, [r0, #0]
 8001764:	784b      	ldrb	r3, [r1, #1]
 8001766:	7043      	strb	r3, [r0, #1]
 8001768:	788b      	ldrb	r3, [r1, #2]
 800176a:	7083      	strb	r3, [r0, #2]
 800176c:	4660      	mov	r0, ip
 800176e:	4770      	bx	lr

08001770 <memset>:
 8001770:	0783      	lsls	r3, r0, #30
 8001772:	b530      	push	{r4, r5, lr}
 8001774:	d048      	beq.n	8001808 <memset+0x98>
 8001776:	1e54      	subs	r4, r2, #1
 8001778:	2a00      	cmp	r2, #0
 800177a:	d03f      	beq.n	80017fc <memset+0x8c>
 800177c:	b2ca      	uxtb	r2, r1
 800177e:	4603      	mov	r3, r0
 8001780:	e001      	b.n	8001786 <memset+0x16>
 8001782:	3c01      	subs	r4, #1
 8001784:	d33a      	bcc.n	80017fc <memset+0x8c>
 8001786:	f803 2b01 	strb.w	r2, [r3], #1
 800178a:	079d      	lsls	r5, r3, #30
 800178c:	d1f9      	bne.n	8001782 <memset+0x12>
 800178e:	2c03      	cmp	r4, #3
 8001790:	d92d      	bls.n	80017ee <memset+0x7e>
 8001792:	b2cd      	uxtb	r5, r1
 8001794:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8001798:	2c0f      	cmp	r4, #15
 800179a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800179e:	d936      	bls.n	800180e <memset+0x9e>
 80017a0:	f1a4 0210 	sub.w	r2, r4, #16
 80017a4:	f022 0c0f 	bic.w	ip, r2, #15
 80017a8:	f103 0e20 	add.w	lr, r3, #32
 80017ac:	44e6      	add	lr, ip
 80017ae:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 80017b2:	f103 0210 	add.w	r2, r3, #16
 80017b6:	e942 5504 	strd	r5, r5, [r2, #-16]
 80017ba:	e942 5502 	strd	r5, r5, [r2, #-8]
 80017be:	3210      	adds	r2, #16
 80017c0:	4572      	cmp	r2, lr
 80017c2:	d1f8      	bne.n	80017b6 <memset+0x46>
 80017c4:	f10c 0201 	add.w	r2, ip, #1
 80017c8:	f014 0f0c 	tst.w	r4, #12
 80017cc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80017d0:	f004 0c0f 	and.w	ip, r4, #15
 80017d4:	d013      	beq.n	80017fe <memset+0x8e>
 80017d6:	f1ac 0304 	sub.w	r3, ip, #4
 80017da:	f023 0303 	bic.w	r3, r3, #3
 80017de:	3304      	adds	r3, #4
 80017e0:	4413      	add	r3, r2
 80017e2:	f842 5b04 	str.w	r5, [r2], #4
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d1fb      	bne.n	80017e2 <memset+0x72>
 80017ea:	f00c 0403 	and.w	r4, ip, #3
 80017ee:	b12c      	cbz	r4, 80017fc <memset+0x8c>
 80017f0:	b2ca      	uxtb	r2, r1
 80017f2:	441c      	add	r4, r3
 80017f4:	f803 2b01 	strb.w	r2, [r3], #1
 80017f8:	429c      	cmp	r4, r3
 80017fa:	d1fb      	bne.n	80017f4 <memset+0x84>
 80017fc:	bd30      	pop	{r4, r5, pc}
 80017fe:	4664      	mov	r4, ip
 8001800:	4613      	mov	r3, r2
 8001802:	2c00      	cmp	r4, #0
 8001804:	d1f4      	bne.n	80017f0 <memset+0x80>
 8001806:	e7f9      	b.n	80017fc <memset+0x8c>
 8001808:	4603      	mov	r3, r0
 800180a:	4614      	mov	r4, r2
 800180c:	e7bf      	b.n	800178e <memset+0x1e>
 800180e:	461a      	mov	r2, r3
 8001810:	46a4      	mov	ip, r4
 8001812:	e7e0      	b.n	80017d6 <memset+0x66>

08001814 <_free_r>:
 8001814:	2900      	cmp	r1, #0
 8001816:	d058      	beq.n	80018ca <_free_r+0xb6>
 8001818:	b530      	push	{r4, r5, lr}
 800181a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800181e:	b083      	sub	sp, #12
 8001820:	2b00      	cmp	r3, #0
 8001822:	f1a1 0404 	sub.w	r4, r1, #4
 8001826:	bfb8      	it	lt
 8001828:	18e4      	addlt	r4, r4, r3
 800182a:	9001      	str	r0, [sp, #4]
 800182c:	f000 faf4 	bl	8001e18 <__malloc_lock>
 8001830:	4a28      	ldr	r2, [pc, #160]	; (80018d4 <_free_r+0xc0>)
 8001832:	9801      	ldr	r0, [sp, #4]
 8001834:	6813      	ldr	r3, [r2, #0]
 8001836:	b133      	cbz	r3, 8001846 <_free_r+0x32>
 8001838:	42a3      	cmp	r3, r4
 800183a:	d90d      	bls.n	8001858 <_free_r+0x44>
 800183c:	6821      	ldr	r1, [r4, #0]
 800183e:	eb04 0c01 	add.w	ip, r4, r1
 8001842:	4563      	cmp	r3, ip
 8001844:	d02f      	beq.n	80018a6 <_free_r+0x92>
 8001846:	6063      	str	r3, [r4, #4]
 8001848:	6014      	str	r4, [r2, #0]
 800184a:	b003      	add	sp, #12
 800184c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001850:	f000 bae4 	b.w	8001e1c <__malloc_unlock>
 8001854:	42a3      	cmp	r3, r4
 8001856:	d810      	bhi.n	800187a <_free_r+0x66>
 8001858:	461a      	mov	r2, r3
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f9      	bne.n	8001854 <_free_r+0x40>
 8001860:	6811      	ldr	r1, [r2, #0]
 8001862:	eb02 0c01 	add.w	ip, r2, r1
 8001866:	4564      	cmp	r4, ip
 8001868:	d019      	beq.n	800189e <_free_r+0x8a>
 800186a:	d32f      	bcc.n	80018cc <_free_r+0xb8>
 800186c:	6063      	str	r3, [r4, #4]
 800186e:	6054      	str	r4, [r2, #4]
 8001870:	b003      	add	sp, #12
 8001872:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001876:	f000 bad1 	b.w	8001e1c <__malloc_unlock>
 800187a:	6811      	ldr	r1, [r2, #0]
 800187c:	eb02 0c01 	add.w	ip, r2, r1
 8001880:	45a4      	cmp	ip, r4
 8001882:	d016      	beq.n	80018b2 <_free_r+0x9e>
 8001884:	d822      	bhi.n	80018cc <_free_r+0xb8>
 8001886:	6821      	ldr	r1, [r4, #0]
 8001888:	eb04 0c01 	add.w	ip, r4, r1
 800188c:	4563      	cmp	r3, ip
 800188e:	d1ed      	bne.n	800186c <_free_r+0x58>
 8001890:	681d      	ldr	r5, [r3, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	4429      	add	r1, r5
 8001896:	e9c4 1300 	strd	r1, r3, [r4]
 800189a:	6054      	str	r4, [r2, #4]
 800189c:	e7d5      	b.n	800184a <_free_r+0x36>
 800189e:	6823      	ldr	r3, [r4, #0]
 80018a0:	4419      	add	r1, r3
 80018a2:	6011      	str	r1, [r2, #0]
 80018a4:	e7d1      	b.n	800184a <_free_r+0x36>
 80018a6:	681d      	ldr	r5, [r3, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	4429      	add	r1, r5
 80018ac:	e9c4 1300 	strd	r1, r3, [r4]
 80018b0:	e7ca      	b.n	8001848 <_free_r+0x34>
 80018b2:	6824      	ldr	r4, [r4, #0]
 80018b4:	4421      	add	r1, r4
 80018b6:	1854      	adds	r4, r2, r1
 80018b8:	42a3      	cmp	r3, r4
 80018ba:	6011      	str	r1, [r2, #0]
 80018bc:	d1c5      	bne.n	800184a <_free_r+0x36>
 80018be:	e9d3 4300 	ldrd	r4, r3, [r3]
 80018c2:	4421      	add	r1, r4
 80018c4:	e9c2 1300 	strd	r1, r3, [r2]
 80018c8:	e7bf      	b.n	800184a <_free_r+0x36>
 80018ca:	4770      	bx	lr
 80018cc:	230c      	movs	r3, #12
 80018ce:	6003      	str	r3, [r0, #0]
 80018d0:	e7bb      	b.n	800184a <_free_r+0x36>
 80018d2:	bf00      	nop
 80018d4:	20000254 	.word	0x20000254

080018d8 <_malloc_r>:
 80018d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018da:	1ccd      	adds	r5, r1, #3
 80018dc:	f025 0503 	bic.w	r5, r5, #3
 80018e0:	3508      	adds	r5, #8
 80018e2:	2d0c      	cmp	r5, #12
 80018e4:	bf38      	it	cc
 80018e6:	250c      	movcc	r5, #12
 80018e8:	2d00      	cmp	r5, #0
 80018ea:	4606      	mov	r6, r0
 80018ec:	db23      	blt.n	8001936 <_malloc_r+0x5e>
 80018ee:	42a9      	cmp	r1, r5
 80018f0:	d821      	bhi.n	8001936 <_malloc_r+0x5e>
 80018f2:	4f25      	ldr	r7, [pc, #148]	; (8001988 <_malloc_r+0xb0>)
 80018f4:	f000 fa90 	bl	8001e18 <__malloc_lock>
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	b322      	cbz	r2, 8001946 <_malloc_r+0x6e>
 80018fc:	4614      	mov	r4, r2
 80018fe:	e003      	b.n	8001908 <_malloc_r+0x30>
 8001900:	6863      	ldr	r3, [r4, #4]
 8001902:	4622      	mov	r2, r4
 8001904:	b1fb      	cbz	r3, 8001946 <_malloc_r+0x6e>
 8001906:	461c      	mov	r4, r3
 8001908:	6823      	ldr	r3, [r4, #0]
 800190a:	1b5b      	subs	r3, r3, r5
 800190c:	d4f8      	bmi.n	8001900 <_malloc_r+0x28>
 800190e:	2b0b      	cmp	r3, #11
 8001910:	d815      	bhi.n	800193e <_malloc_r+0x66>
 8001912:	6863      	ldr	r3, [r4, #4]
 8001914:	4294      	cmp	r4, r2
 8001916:	bf0c      	ite	eq
 8001918:	603b      	streq	r3, [r7, #0]
 800191a:	6053      	strne	r3, [r2, #4]
 800191c:	4630      	mov	r0, r6
 800191e:	f000 fa7d 	bl	8001e1c <__malloc_unlock>
 8001922:	f104 000b 	add.w	r0, r4, #11
 8001926:	1d23      	adds	r3, r4, #4
 8001928:	f020 0007 	bic.w	r0, r0, #7
 800192c:	1ac2      	subs	r2, r0, r3
 800192e:	d001      	beq.n	8001934 <_malloc_r+0x5c>
 8001930:	1a1b      	subs	r3, r3, r0
 8001932:	50a3      	str	r3, [r4, r2]
 8001934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001936:	230c      	movs	r3, #12
 8001938:	6033      	str	r3, [r6, #0]
 800193a:	2000      	movs	r0, #0
 800193c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800193e:	6023      	str	r3, [r4, #0]
 8001940:	441c      	add	r4, r3
 8001942:	6025      	str	r5, [r4, #0]
 8001944:	e7ea      	b.n	800191c <_malloc_r+0x44>
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	b1c9      	cbz	r1, 800197e <_malloc_r+0xa6>
 800194a:	4629      	mov	r1, r5
 800194c:	4630      	mov	r0, r6
 800194e:	f000 f8d7 	bl	8001b00 <_sbrk_r>
 8001952:	1c43      	adds	r3, r0, #1
 8001954:	d00c      	beq.n	8001970 <_malloc_r+0x98>
 8001956:	1cc4      	adds	r4, r0, #3
 8001958:	f024 0403 	bic.w	r4, r4, #3
 800195c:	42a0      	cmp	r0, r4
 800195e:	d005      	beq.n	800196c <_malloc_r+0x94>
 8001960:	1a21      	subs	r1, r4, r0
 8001962:	4630      	mov	r0, r6
 8001964:	f000 f8cc 	bl	8001b00 <_sbrk_r>
 8001968:	3001      	adds	r0, #1
 800196a:	d001      	beq.n	8001970 <_malloc_r+0x98>
 800196c:	6025      	str	r5, [r4, #0]
 800196e:	e7d5      	b.n	800191c <_malloc_r+0x44>
 8001970:	230c      	movs	r3, #12
 8001972:	4630      	mov	r0, r6
 8001974:	6033      	str	r3, [r6, #0]
 8001976:	f000 fa51 	bl	8001e1c <__malloc_unlock>
 800197a:	2000      	movs	r0, #0
 800197c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800197e:	4630      	mov	r0, r6
 8001980:	f000 f8be 	bl	8001b00 <_sbrk_r>
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	e7e0      	b.n	800194a <_malloc_r+0x72>
 8001988:	20000254 	.word	0x20000254

0800198c <_iprintf_r>:
 800198c:	b40e      	push	{r1, r2, r3}
 800198e:	b510      	push	{r4, lr}
 8001990:	4604      	mov	r4, r0
 8001992:	b083      	sub	sp, #12
 8001994:	b108      	cbz	r0, 800199a <_iprintf_r+0xe>
 8001996:	6983      	ldr	r3, [r0, #24]
 8001998:	b15b      	cbz	r3, 80019b2 <_iprintf_r+0x26>
 800199a:	ab06      	add	r3, sp, #24
 800199c:	68a1      	ldr	r1, [r4, #8]
 800199e:	9a05      	ldr	r2, [sp, #20]
 80019a0:	9301      	str	r3, [sp, #4]
 80019a2:	4620      	mov	r0, r4
 80019a4:	f000 fa80 	bl	8001ea8 <_vfiprintf_r>
 80019a8:	b003      	add	sp, #12
 80019aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019ae:	b003      	add	sp, #12
 80019b0:	4770      	bx	lr
 80019b2:	f7ff fdbb 	bl	800152c <__sinit>
 80019b6:	e7f0      	b.n	800199a <_iprintf_r+0xe>

080019b8 <iprintf>:
 80019b8:	b40f      	push	{r0, r1, r2, r3}
 80019ba:	b510      	push	{r4, lr}
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <iprintf+0x30>)
 80019be:	681c      	ldr	r4, [r3, #0]
 80019c0:	b082      	sub	sp, #8
 80019c2:	b10c      	cbz	r4, 80019c8 <iprintf+0x10>
 80019c4:	69a3      	ldr	r3, [r4, #24]
 80019c6:	b15b      	cbz	r3, 80019e0 <iprintf+0x28>
 80019c8:	ab05      	add	r3, sp, #20
 80019ca:	68a1      	ldr	r1, [r4, #8]
 80019cc:	9a04      	ldr	r2, [sp, #16]
 80019ce:	9301      	str	r3, [sp, #4]
 80019d0:	4620      	mov	r0, r4
 80019d2:	f000 fa69 	bl	8001ea8 <_vfiprintf_r>
 80019d6:	b002      	add	sp, #8
 80019d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019dc:	b004      	add	sp, #16
 80019de:	4770      	bx	lr
 80019e0:	4620      	mov	r0, r4
 80019e2:	f7ff fda3 	bl	800152c <__sinit>
 80019e6:	e7ef      	b.n	80019c8 <iprintf+0x10>
 80019e8:	20000004 	.word	0x20000004

080019ec <cleanup_glue>:
 80019ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019f0:	680e      	ldr	r6, [r1, #0]
 80019f2:	460c      	mov	r4, r1
 80019f4:	4605      	mov	r5, r0
 80019f6:	b1be      	cbz	r6, 8001a28 <cleanup_glue+0x3c>
 80019f8:	6837      	ldr	r7, [r6, #0]
 80019fa:	b18f      	cbz	r7, 8001a20 <cleanup_glue+0x34>
 80019fc:	f8d7 8000 	ldr.w	r8, [r7]
 8001a00:	f1b8 0f00 	cmp.w	r8, #0
 8001a04:	d008      	beq.n	8001a18 <cleanup_glue+0x2c>
 8001a06:	f8d8 1000 	ldr.w	r1, [r8]
 8001a0a:	b109      	cbz	r1, 8001a10 <cleanup_glue+0x24>
 8001a0c:	f7ff ffee 	bl	80019ec <cleanup_glue>
 8001a10:	4641      	mov	r1, r8
 8001a12:	4628      	mov	r0, r5
 8001a14:	f7ff fefe 	bl	8001814 <_free_r>
 8001a18:	4639      	mov	r1, r7
 8001a1a:	4628      	mov	r0, r5
 8001a1c:	f7ff fefa 	bl	8001814 <_free_r>
 8001a20:	4631      	mov	r1, r6
 8001a22:	4628      	mov	r0, r5
 8001a24:	f7ff fef6 	bl	8001814 <_free_r>
 8001a28:	4621      	mov	r1, r4
 8001a2a:	4628      	mov	r0, r5
 8001a2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a30:	f7ff bef0 	b.w	8001814 <_free_r>

08001a34 <_reclaim_reent>:
 8001a34:	4b31      	ldr	r3, [pc, #196]	; (8001afc <_reclaim_reent+0xc8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4283      	cmp	r3, r0
 8001a3a:	d059      	beq.n	8001af0 <_reclaim_reent+0xbc>
 8001a3c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001a3e:	b570      	push	{r4, r5, r6, lr}
 8001a40:	4605      	mov	r5, r0
 8001a42:	2a00      	cmp	r2, #0
 8001a44:	d04f      	beq.n	8001ae6 <_reclaim_reent+0xb2>
 8001a46:	68d1      	ldr	r1, [r2, #12]
 8001a48:	b191      	cbz	r1, 8001a70 <_reclaim_reent+0x3c>
 8001a4a:	2600      	movs	r6, #0
 8001a4c:	598c      	ldr	r4, [r1, r6]
 8001a4e:	b144      	cbz	r4, 8001a62 <_reclaim_reent+0x2e>
 8001a50:	4621      	mov	r1, r4
 8001a52:	6824      	ldr	r4, [r4, #0]
 8001a54:	4628      	mov	r0, r5
 8001a56:	f7ff fedd 	bl	8001814 <_free_r>
 8001a5a:	2c00      	cmp	r4, #0
 8001a5c:	d1f8      	bne.n	8001a50 <_reclaim_reent+0x1c>
 8001a5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001a60:	68d9      	ldr	r1, [r3, #12]
 8001a62:	3604      	adds	r6, #4
 8001a64:	2e80      	cmp	r6, #128	; 0x80
 8001a66:	d1f1      	bne.n	8001a4c <_reclaim_reent+0x18>
 8001a68:	4628      	mov	r0, r5
 8001a6a:	f7ff fed3 	bl	8001814 <_free_r>
 8001a6e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001a70:	6811      	ldr	r1, [r2, #0]
 8001a72:	2900      	cmp	r1, #0
 8001a74:	d03d      	beq.n	8001af2 <_reclaim_reent+0xbe>
 8001a76:	4628      	mov	r0, r5
 8001a78:	f7ff fecc 	bl	8001814 <_free_r>
 8001a7c:	6969      	ldr	r1, [r5, #20]
 8001a7e:	b111      	cbz	r1, 8001a86 <_reclaim_reent+0x52>
 8001a80:	4628      	mov	r0, r5
 8001a82:	f7ff fec7 	bl	8001814 <_free_r>
 8001a86:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001a88:	b11a      	cbz	r2, 8001a92 <_reclaim_reent+0x5e>
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	4628      	mov	r0, r5
 8001a8e:	f7ff fec1 	bl	8001814 <_free_r>
 8001a92:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8001a94:	b111      	cbz	r1, 8001a9c <_reclaim_reent+0x68>
 8001a96:	4628      	mov	r0, r5
 8001a98:	f7ff febc 	bl	8001814 <_free_r>
 8001a9c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8001a9e:	b111      	cbz	r1, 8001aa6 <_reclaim_reent+0x72>
 8001aa0:	4628      	mov	r0, r5
 8001aa2:	f7ff feb7 	bl	8001814 <_free_r>
 8001aa6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8001aa8:	b111      	cbz	r1, 8001ab0 <_reclaim_reent+0x7c>
 8001aaa:	4628      	mov	r0, r5
 8001aac:	f7ff feb2 	bl	8001814 <_free_r>
 8001ab0:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8001ab2:	b111      	cbz	r1, 8001aba <_reclaim_reent+0x86>
 8001ab4:	4628      	mov	r0, r5
 8001ab6:	f7ff fead 	bl	8001814 <_free_r>
 8001aba:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8001abc:	b111      	cbz	r1, 8001ac4 <_reclaim_reent+0x90>
 8001abe:	4628      	mov	r0, r5
 8001ac0:	f7ff fea8 	bl	8001814 <_free_r>
 8001ac4:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8001ac6:	b111      	cbz	r1, 8001ace <_reclaim_reent+0x9a>
 8001ac8:	4628      	mov	r0, r5
 8001aca:	f7ff fea3 	bl	8001814 <_free_r>
 8001ace:	69ab      	ldr	r3, [r5, #24]
 8001ad0:	b16b      	cbz	r3, 8001aee <_reclaim_reent+0xba>
 8001ad2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001ad4:	4628      	mov	r0, r5
 8001ad6:	4798      	blx	r3
 8001ad8:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8001ada:	b141      	cbz	r1, 8001aee <_reclaim_reent+0xba>
 8001adc:	4628      	mov	r0, r5
 8001ade:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001ae2:	f7ff bf83 	b.w	80019ec <cleanup_glue>
 8001ae6:	6941      	ldr	r1, [r0, #20]
 8001ae8:	2900      	cmp	r1, #0
 8001aea:	d1c9      	bne.n	8001a80 <_reclaim_reent+0x4c>
 8001aec:	e7d1      	b.n	8001a92 <_reclaim_reent+0x5e>
 8001aee:	bd70      	pop	{r4, r5, r6, pc}
 8001af0:	4770      	bx	lr
 8001af2:	6969      	ldr	r1, [r5, #20]
 8001af4:	2900      	cmp	r1, #0
 8001af6:	d1c3      	bne.n	8001a80 <_reclaim_reent+0x4c>
 8001af8:	e7c7      	b.n	8001a8a <_reclaim_reent+0x56>
 8001afa:	bf00      	nop
 8001afc:	20000004 	.word	0x20000004

08001b00 <_sbrk_r>:
 8001b00:	b538      	push	{r3, r4, r5, lr}
 8001b02:	4d07      	ldr	r5, [pc, #28]	; (8001b20 <_sbrk_r+0x20>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	4604      	mov	r4, r0
 8001b08:	4608      	mov	r0, r1
 8001b0a:	602a      	str	r2, [r5, #0]
 8001b0c:	f7ff fad6 	bl	80010bc <_sbrk>
 8001b10:	1c43      	adds	r3, r0, #1
 8001b12:	d000      	beq.n	8001b16 <_sbrk_r+0x16>
 8001b14:	bd38      	pop	{r3, r4, r5, pc}
 8001b16:	682b      	ldr	r3, [r5, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0fb      	beq.n	8001b14 <_sbrk_r+0x14>
 8001b1c:	6023      	str	r3, [r4, #0]
 8001b1e:	bd38      	pop	{r3, r4, r5, pc}
 8001b20:	2000025c 	.word	0x2000025c

08001b24 <__sread>:
 8001b24:	b510      	push	{r4, lr}
 8001b26:	460c      	mov	r4, r1
 8001b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b2c:	f000 fcfa 	bl	8002524 <_read_r>
 8001b30:	2800      	cmp	r0, #0
 8001b32:	db03      	blt.n	8001b3c <__sread+0x18>
 8001b34:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b36:	4403      	add	r3, r0
 8001b38:	6563      	str	r3, [r4, #84]	; 0x54
 8001b3a:	bd10      	pop	{r4, pc}
 8001b3c:	89a3      	ldrh	r3, [r4, #12]
 8001b3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b42:	81a3      	strh	r3, [r4, #12]
 8001b44:	bd10      	pop	{r4, pc}
 8001b46:	bf00      	nop

08001b48 <__seofread>:
 8001b48:	2000      	movs	r0, #0
 8001b4a:	4770      	bx	lr

08001b4c <__swrite>:
 8001b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b50:	460c      	mov	r4, r1
 8001b52:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 8001b56:	461f      	mov	r7, r3
 8001b58:	05cb      	lsls	r3, r1, #23
 8001b5a:	4605      	mov	r5, r0
 8001b5c:	4616      	mov	r6, r2
 8001b5e:	d40b      	bmi.n	8001b78 <__swrite+0x2c>
 8001b60:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8001b64:	81a1      	strh	r1, [r4, #12]
 8001b66:	463b      	mov	r3, r7
 8001b68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b6c:	4632      	mov	r2, r6
 8001b6e:	4628      	mov	r0, r5
 8001b70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b74:	f000 b81e 	b.w	8001bb4 <_write_r>
 8001b78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f000 f934 	bl	8001dec <_lseek_r>
 8001b84:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8001b88:	e7ea      	b.n	8001b60 <__swrite+0x14>
 8001b8a:	bf00      	nop

08001b8c <__sseek>:
 8001b8c:	b510      	push	{r4, lr}
 8001b8e:	460c      	mov	r4, r1
 8001b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b94:	f000 f92a 	bl	8001dec <_lseek_r>
 8001b98:	89a3      	ldrh	r3, [r4, #12]
 8001b9a:	1c42      	adds	r2, r0, #1
 8001b9c:	bf0e      	itee	eq
 8001b9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001ba2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001ba6:	6560      	strne	r0, [r4, #84]	; 0x54
 8001ba8:	81a3      	strh	r3, [r4, #12]
 8001baa:	bd10      	pop	{r4, pc}

08001bac <__sclose>:
 8001bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bb0:	f000 b816 	b.w	8001be0 <_close_r>

08001bb4 <_write_r>:
 8001bb4:	b538      	push	{r3, r4, r5, lr}
 8001bb6:	460c      	mov	r4, r1
 8001bb8:	4d08      	ldr	r5, [pc, #32]	; (8001bdc <_write_r+0x28>)
 8001bba:	4684      	mov	ip, r0
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	602b      	str	r3, [r5, #0]
 8001bc6:	4664      	mov	r4, ip
 8001bc8:	f7ff f9e8 	bl	8000f9c <_write>
 8001bcc:	1c43      	adds	r3, r0, #1
 8001bce:	d000      	beq.n	8001bd2 <_write_r+0x1e>
 8001bd0:	bd38      	pop	{r3, r4, r5, pc}
 8001bd2:	682b      	ldr	r3, [r5, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0fb      	beq.n	8001bd0 <_write_r+0x1c>
 8001bd8:	6023      	str	r3, [r4, #0]
 8001bda:	bd38      	pop	{r3, r4, r5, pc}
 8001bdc:	2000025c 	.word	0x2000025c

08001be0 <_close_r>:
 8001be0:	b538      	push	{r3, r4, r5, lr}
 8001be2:	4d07      	ldr	r5, [pc, #28]	; (8001c00 <_close_r+0x20>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	4604      	mov	r4, r0
 8001be8:	4608      	mov	r0, r1
 8001bea:	602a      	str	r2, [r5, #0]
 8001bec:	f7ff f9f2 	bl	8000fd4 <_close>
 8001bf0:	1c43      	adds	r3, r0, #1
 8001bf2:	d000      	beq.n	8001bf6 <_close_r+0x16>
 8001bf4:	bd38      	pop	{r3, r4, r5, pc}
 8001bf6:	682b      	ldr	r3, [r5, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0fb      	beq.n	8001bf4 <_close_r+0x14>
 8001bfc:	6023      	str	r3, [r4, #0]
 8001bfe:	bd38      	pop	{r3, r4, r5, pc}
 8001c00:	2000025c 	.word	0x2000025c

08001c04 <__sflush_r>:
 8001c04:	898b      	ldrh	r3, [r1, #12]
 8001c06:	071a      	lsls	r2, r3, #28
 8001c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c0c:	460c      	mov	r4, r1
 8001c0e:	4680      	mov	r8, r0
 8001c10:	d43f      	bmi.n	8001c92 <__sflush_r+0x8e>
 8001c12:	684a      	ldr	r2, [r1, #4]
 8001c14:	2a00      	cmp	r2, #0
 8001c16:	dd58      	ble.n	8001cca <__sflush_r+0xc6>
 8001c18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c1a:	2e00      	cmp	r6, #0
 8001c1c:	d052      	beq.n	8001cc4 <__sflush_r+0xc0>
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f8d8 5000 	ldr.w	r5, [r8]
 8001c24:	f8c8 2000 	str.w	r2, [r8]
 8001c28:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
 8001c2c:	d151      	bne.n	8001cd2 <__sflush_r+0xce>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	6a21      	ldr	r1, [r4, #32]
 8001c32:	4640      	mov	r0, r8
 8001c34:	47b0      	blx	r6
 8001c36:	1c43      	adds	r3, r0, #1
 8001c38:	d05e      	beq.n	8001cf8 <__sflush_r+0xf4>
 8001c3a:	89a3      	ldrh	r3, [r4, #12]
 8001c3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c3e:	075f      	lsls	r7, r3, #29
 8001c40:	d505      	bpl.n	8001c4e <__sflush_r+0x4a>
 8001c42:	6863      	ldr	r3, [r4, #4]
 8001c44:	1ac0      	subs	r0, r0, r3
 8001c46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c48:	b10b      	cbz	r3, 8001c4e <__sflush_r+0x4a>
 8001c4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c4c:	1ac0      	subs	r0, r0, r3
 8001c4e:	6a21      	ldr	r1, [r4, #32]
 8001c50:	4602      	mov	r2, r0
 8001c52:	2300      	movs	r3, #0
 8001c54:	4640      	mov	r0, r8
 8001c56:	47b0      	blx	r6
 8001c58:	1c41      	adds	r1, r0, #1
 8001c5a:	d13c      	bne.n	8001cd6 <__sflush_r+0xd2>
 8001c5c:	f8d8 3000 	ldr.w	r3, [r8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d038      	beq.n	8001cd6 <__sflush_r+0xd2>
 8001c64:	2b1d      	cmp	r3, #29
 8001c66:	d001      	beq.n	8001c6c <__sflush_r+0x68>
 8001c68:	2b16      	cmp	r3, #22
 8001c6a:	d14d      	bne.n	8001d08 <__sflush_r+0x104>
 8001c6c:	6923      	ldr	r3, [r4, #16]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	e9c4 3200 	strd	r3, r2, [r4]
 8001c74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c76:	f8c8 5000 	str.w	r5, [r8]
 8001c7a:	b319      	cbz	r1, 8001cc4 <__sflush_r+0xc0>
 8001c7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c80:	4299      	cmp	r1, r3
 8001c82:	d002      	beq.n	8001c8a <__sflush_r+0x86>
 8001c84:	4640      	mov	r0, r8
 8001c86:	f7ff fdc5 	bl	8001814 <_free_r>
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	6360      	str	r0, [r4, #52]	; 0x34
 8001c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c92:	690e      	ldr	r6, [r1, #16]
 8001c94:	b1b6      	cbz	r6, 8001cc4 <__sflush_r+0xc0>
 8001c96:	680d      	ldr	r5, [r1, #0]
 8001c98:	600e      	str	r6, [r1, #0]
 8001c9a:	079a      	lsls	r2, r3, #30
 8001c9c:	bf0c      	ite	eq
 8001c9e:	694b      	ldreq	r3, [r1, #20]
 8001ca0:	2300      	movne	r3, #0
 8001ca2:	1bad      	subs	r5, r5, r6
 8001ca4:	608b      	str	r3, [r1, #8]
 8001ca6:	e00b      	b.n	8001cc0 <__sflush_r+0xbc>
 8001ca8:	462b      	mov	r3, r5
 8001caa:	4632      	mov	r2, r6
 8001cac:	6a21      	ldr	r1, [r4, #32]
 8001cae:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8001cb0:	4640      	mov	r0, r8
 8001cb2:	47b8      	blx	r7
 8001cb4:	f1b0 0c00 	subs.w	ip, r0, #0
 8001cb8:	eba5 050c 	sub.w	r5, r5, ip
 8001cbc:	4466      	add	r6, ip
 8001cbe:	dd13      	ble.n	8001ce8 <__sflush_r+0xe4>
 8001cc0:	2d00      	cmp	r5, #0
 8001cc2:	dcf1      	bgt.n	8001ca8 <__sflush_r+0xa4>
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cca:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8001ccc:	2a00      	cmp	r2, #0
 8001cce:	dca3      	bgt.n	8001c18 <__sflush_r+0x14>
 8001cd0:	e7f8      	b.n	8001cc4 <__sflush_r+0xc0>
 8001cd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001cd4:	e7b3      	b.n	8001c3e <__sflush_r+0x3a>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	6063      	str	r3, [r4, #4]
 8001cda:	6923      	ldr	r3, [r4, #16]
 8001cdc:	6023      	str	r3, [r4, #0]
 8001cde:	89a3      	ldrh	r3, [r4, #12]
 8001ce0:	04db      	lsls	r3, r3, #19
 8001ce2:	d5c7      	bpl.n	8001c74 <__sflush_r+0x70>
 8001ce4:	6560      	str	r0, [r4, #84]	; 0x54
 8001ce6:	e7c5      	b.n	8001c74 <__sflush_r+0x70>
 8001ce8:	89a3      	ldrh	r3, [r4, #12]
 8001cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cf2:	81a3      	strh	r3, [r4, #12]
 8001cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cf8:	f8d8 3000 	ldr.w	r3, [r8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d09c      	beq.n	8001c3a <__sflush_r+0x36>
 8001d00:	2b1d      	cmp	r3, #29
 8001d02:	d006      	beq.n	8001d12 <__sflush_r+0x10e>
 8001d04:	2b16      	cmp	r3, #22
 8001d06:	d004      	beq.n	8001d12 <__sflush_r+0x10e>
 8001d08:	89a3      	ldrh	r3, [r4, #12]
 8001d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d0e:	81a3      	strh	r3, [r4, #12]
 8001d10:	e7d9      	b.n	8001cc6 <__sflush_r+0xc2>
 8001d12:	f8c8 5000 	str.w	r5, [r8]
 8001d16:	e7d5      	b.n	8001cc4 <__sflush_r+0xc0>

08001d18 <_fflush_r>:
 8001d18:	b538      	push	{r3, r4, r5, lr}
 8001d1a:	690b      	ldr	r3, [r1, #16]
 8001d1c:	b1bb      	cbz	r3, 8001d4e <_fflush_r+0x36>
 8001d1e:	460d      	mov	r5, r1
 8001d20:	4604      	mov	r4, r0
 8001d22:	b108      	cbz	r0, 8001d28 <_fflush_r+0x10>
 8001d24:	6983      	ldr	r3, [r0, #24]
 8001d26:	b1b3      	cbz	r3, 8001d56 <_fflush_r+0x3e>
 8001d28:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <_fflush_r+0x48>)
 8001d2a:	429d      	cmp	r5, r3
 8001d2c:	d011      	beq.n	8001d52 <_fflush_r+0x3a>
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <_fflush_r+0x4c>)
 8001d30:	429d      	cmp	r5, r3
 8001d32:	d013      	beq.n	8001d5c <_fflush_r+0x44>
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <_fflush_r+0x50>)
 8001d36:	429d      	cmp	r5, r3
 8001d38:	bf08      	it	eq
 8001d3a:	68e5      	ldreq	r5, [r4, #12]
 8001d3c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8001d40:	b12b      	cbz	r3, 8001d4e <_fflush_r+0x36>
 8001d42:	4629      	mov	r1, r5
 8001d44:	4620      	mov	r0, r4
 8001d46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d4a:	f7ff bf5b 	b.w	8001c04 <__sflush_r>
 8001d4e:	2000      	movs	r0, #0
 8001d50:	bd38      	pop	{r3, r4, r5, pc}
 8001d52:	6865      	ldr	r5, [r4, #4]
 8001d54:	e7f2      	b.n	8001d3c <_fflush_r+0x24>
 8001d56:	f7ff fbe9 	bl	800152c <__sinit>
 8001d5a:	e7e5      	b.n	8001d28 <_fflush_r+0x10>
 8001d5c:	68a5      	ldr	r5, [r4, #8]
 8001d5e:	e7ed      	b.n	8001d3c <_fflush_r+0x24>
 8001d60:	0800b7cc 	.word	0x0800b7cc
 8001d64:	0800b7ac 	.word	0x0800b7ac
 8001d68:	0800b78c 	.word	0x0800b78c

08001d6c <fflush>:
 8001d6c:	b538      	push	{r3, r4, r5, lr}
 8001d6e:	b340      	cbz	r0, 8001dc2 <fflush+0x56>
 8001d70:	6903      	ldr	r3, [r0, #16]
 8001d72:	4604      	mov	r4, r0
 8001d74:	b1e3      	cbz	r3, 8001db0 <fflush+0x44>
 8001d76:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <fflush+0x68>)
 8001d78:	681d      	ldr	r5, [r3, #0]
 8001d7a:	b10d      	cbz	r5, 8001d80 <fflush+0x14>
 8001d7c:	69ab      	ldr	r3, [r5, #24]
 8001d7e:	b1cb      	cbz	r3, 8001db4 <fflush+0x48>
 8001d80:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <fflush+0x6c>)
 8001d82:	429c      	cmp	r4, r3
 8001d84:	d00f      	beq.n	8001da6 <fflush+0x3a>
 8001d86:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <fflush+0x70>)
 8001d88:	429c      	cmp	r4, r3
 8001d8a:	d021      	beq.n	8001dd0 <fflush+0x64>
 8001d8c:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <fflush+0x74>)
 8001d8e:	429c      	cmp	r4, r3
 8001d90:	bf08      	it	eq
 8001d92:	68ec      	ldreq	r4, [r5, #12]
 8001d94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d98:	b153      	cbz	r3, 8001db0 <fflush+0x44>
 8001d9a:	4621      	mov	r1, r4
 8001d9c:	4628      	mov	r0, r5
 8001d9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001da2:	f7ff bf2f 	b.w	8001c04 <__sflush_r>
 8001da6:	686c      	ldr	r4, [r5, #4]
 8001da8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1f4      	bne.n	8001d9a <fflush+0x2e>
 8001db0:	2000      	movs	r0, #0
 8001db2:	bd38      	pop	{r3, r4, r5, pc}
 8001db4:	4628      	mov	r0, r5
 8001db6:	f7ff fbb9 	bl	800152c <__sinit>
 8001dba:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <fflush+0x6c>)
 8001dbc:	429c      	cmp	r4, r3
 8001dbe:	d1e2      	bne.n	8001d86 <fflush+0x1a>
 8001dc0:	e7f1      	b.n	8001da6 <fflush+0x3a>
 8001dc2:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <fflush+0x78>)
 8001dc4:	4908      	ldr	r1, [pc, #32]	; (8001de8 <fflush+0x7c>)
 8001dc6:	6818      	ldr	r0, [r3, #0]
 8001dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001dcc:	f7ff bbee 	b.w	80015ac <_fwalk_reent>
 8001dd0:	68ac      	ldr	r4, [r5, #8]
 8001dd2:	e7df      	b.n	8001d94 <fflush+0x28>
 8001dd4:	20000004 	.word	0x20000004
 8001dd8:	0800b7cc 	.word	0x0800b7cc
 8001ddc:	0800b7ac 	.word	0x0800b7ac
 8001de0:	0800b78c 	.word	0x0800b78c
 8001de4:	0800b7ec 	.word	0x0800b7ec
 8001de8:	08001d19 	.word	0x08001d19

08001dec <_lseek_r>:
 8001dec:	b538      	push	{r3, r4, r5, lr}
 8001dee:	460c      	mov	r4, r1
 8001df0:	4d08      	ldr	r5, [pc, #32]	; (8001e14 <_lseek_r+0x28>)
 8001df2:	4684      	mov	ip, r0
 8001df4:	4611      	mov	r1, r2
 8001df6:	4620      	mov	r0, r4
 8001df8:	461a      	mov	r2, r3
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	602b      	str	r3, [r5, #0]
 8001dfe:	4664      	mov	r4, ip
 8001e00:	f7ff f8fe 	bl	8001000 <_lseek>
 8001e04:	1c43      	adds	r3, r0, #1
 8001e06:	d000      	beq.n	8001e0a <_lseek_r+0x1e>
 8001e08:	bd38      	pop	{r3, r4, r5, pc}
 8001e0a:	682b      	ldr	r3, [r5, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0fb      	beq.n	8001e08 <_lseek_r+0x1c>
 8001e10:	6023      	str	r3, [r4, #0]
 8001e12:	bd38      	pop	{r3, r4, r5, pc}
 8001e14:	2000025c 	.word	0x2000025c

08001e18 <__malloc_lock>:
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop

08001e1c <__malloc_unlock>:
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop

08001e20 <__sfputc_r>:
 8001e20:	6893      	ldr	r3, [r2, #8]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	6093      	str	r3, [r2, #8]
 8001e28:	da11      	bge.n	8001e4e <__sfputc_r+0x2e>
 8001e2a:	b410      	push	{r4}
 8001e2c:	6994      	ldr	r4, [r2, #24]
 8001e2e:	42a3      	cmp	r3, r4
 8001e30:	db09      	blt.n	8001e46 <__sfputc_r+0x26>
 8001e32:	290a      	cmp	r1, #10
 8001e34:	d007      	beq.n	8001e46 <__sfputc_r+0x26>
 8001e36:	6813      	ldr	r3, [r2, #0]
 8001e38:	1c58      	adds	r0, r3, #1
 8001e3a:	6010      	str	r0, [r2, #0]
 8001e3c:	7019      	strb	r1, [r3, #0]
 8001e3e:	4608      	mov	r0, r1
 8001e40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e4a:	f000 bb81 	b.w	8002550 <__swbuf_r>
 8001e4e:	6813      	ldr	r3, [r2, #0]
 8001e50:	1c58      	adds	r0, r3, #1
 8001e52:	6010      	str	r0, [r2, #0]
 8001e54:	7019      	strb	r1, [r3, #0]
 8001e56:	4608      	mov	r0, r1
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop

08001e5c <__sfputs_r>:
 8001e5c:	b19b      	cbz	r3, 8001e86 <__sfputs_r+0x2a>
 8001e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e60:	4413      	add	r3, r2
 8001e62:	4606      	mov	r6, r0
 8001e64:	460f      	mov	r7, r1
 8001e66:	1e54      	subs	r4, r2, #1
 8001e68:	1e5d      	subs	r5, r3, #1
 8001e6a:	e001      	b.n	8001e70 <__sfputs_r+0x14>
 8001e6c:	42ac      	cmp	r4, r5
 8001e6e:	d008      	beq.n	8001e82 <__sfputs_r+0x26>
 8001e70:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8001e74:	463a      	mov	r2, r7
 8001e76:	4630      	mov	r0, r6
 8001e78:	f7ff ffd2 	bl	8001e20 <__sfputc_r>
 8001e7c:	1c43      	adds	r3, r0, #1
 8001e7e:	d1f5      	bne.n	8001e6c <__sfputs_r+0x10>
 8001e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e82:	2000      	movs	r0, #0
 8001e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e86:	2000      	movs	r0, #0
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop

08001e8c <__sprint_r>:
 8001e8c:	6893      	ldr	r3, [r2, #8]
 8001e8e:	b510      	push	{r4, lr}
 8001e90:	4614      	mov	r4, r2
 8001e92:	b913      	cbnz	r3, 8001e9a <__sprint_r+0xe>
 8001e94:	6053      	str	r3, [r2, #4]
 8001e96:	4618      	mov	r0, r3
 8001e98:	bd10      	pop	{r4, pc}
 8001e9a:	f000 fc3f 	bl	800271c <__sfvwrite_r>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8001ea4:	bd10      	pop	{r4, pc}
 8001ea6:	bf00      	nop

08001ea8 <_vfiprintf_r>:
 8001ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001eac:	4688      	mov	r8, r1
 8001eae:	b09f      	sub	sp, #124	; 0x7c
 8001eb0:	4615      	mov	r5, r2
 8001eb2:	461c      	mov	r4, r3
 8001eb4:	4681      	mov	r9, r0
 8001eb6:	b118      	cbz	r0, 8001ec0 <_vfiprintf_r+0x18>
 8001eb8:	6983      	ldr	r3, [r0, #24]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 80a2 	beq.w	8002004 <_vfiprintf_r+0x15c>
 8001ec0:	4b92      	ldr	r3, [pc, #584]	; (800210c <_vfiprintf_r+0x264>)
 8001ec2:	4598      	cmp	r8, r3
 8001ec4:	f000 80a4 	beq.w	8002010 <_vfiprintf_r+0x168>
 8001ec8:	4b91      	ldr	r3, [pc, #580]	; (8002110 <_vfiprintf_r+0x268>)
 8001eca:	4598      	cmp	r8, r3
 8001ecc:	f000 80b1 	beq.w	8002032 <_vfiprintf_r+0x18a>
 8001ed0:	4b90      	ldr	r3, [pc, #576]	; (8002114 <_vfiprintf_r+0x26c>)
 8001ed2:	4598      	cmp	r8, r3
 8001ed4:	bf08      	it	eq
 8001ed6:	f8d9 800c 	ldreq.w	r8, [r9, #12]
 8001eda:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8001ede:	0718      	lsls	r0, r3, #28
 8001ee0:	f140 809d 	bpl.w	800201e <_vfiprintf_r+0x176>
 8001ee4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 8098 	beq.w	800201e <_vfiprintf_r+0x176>
 8001eee:	2300      	movs	r3, #0
 8001ef0:	930b      	str	r3, [sp, #44]	; 0x2c
 8001ef2:	7829      	ldrb	r1, [r5, #0]
 8001ef4:	4e88      	ldr	r6, [pc, #544]	; (8002118 <_vfiprintf_r+0x270>)
 8001ef6:	9405      	str	r4, [sp, #20]
 8001ef8:	2320      	movs	r3, #32
 8001efa:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8001efe:	2330      	movs	r3, #48	; 0x30
 8001f00:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 8001f04:	2701      	movs	r7, #1
 8001f06:	2900      	cmp	r1, #0
 8001f08:	d074      	beq.n	8001ff4 <_vfiprintf_r+0x14c>
 8001f0a:	462c      	mov	r4, r5
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	e004      	b.n	8001f1a <_vfiprintf_r+0x72>
 8001f10:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 808f 	beq.w	8002038 <_vfiprintf_r+0x190>
 8001f1a:	2b25      	cmp	r3, #37	; 0x25
 8001f1c:	d1f8      	bne.n	8001f10 <_vfiprintf_r+0x68>
 8001f1e:	ebb4 0b05 	subs.w	fp, r4, r5
 8001f22:	f040 808c 	bne.w	800203e <_vfiprintf_r+0x196>
 8001f26:	7823      	ldrb	r3, [r4, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d063      	beq.n	8001ff4 <_vfiprintf_r+0x14c>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f32:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8001f36:	9306      	str	r3, [sp, #24]
 8001f38:	9309      	str	r3, [sp, #36]	; 0x24
 8001f3a:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8001f3e:	931c      	str	r3, [sp, #112]	; 0x70
 8001f40:	3401      	adds	r4, #1
 8001f42:	e004      	b.n	8001f4e <_vfiprintf_r+0xa6>
 8001f44:	9a06      	ldr	r2, [sp, #24]
 8001f46:	fa07 f303 	lsl.w	r3, r7, r3
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	9306      	str	r3, [sp, #24]
 8001f4e:	4625      	mov	r5, r4
 8001f50:	2205      	movs	r2, #5
 8001f52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f56:	4630      	mov	r0, r6
 8001f58:	f000 fdea 	bl	8002b30 <memchr>
 8001f5c:	1b83      	subs	r3, r0, r6
 8001f5e:	2800      	cmp	r0, #0
 8001f60:	d1f0      	bne.n	8001f44 <_vfiprintf_r+0x9c>
 8001f62:	9b06      	ldr	r3, [sp, #24]
 8001f64:	06d9      	lsls	r1, r3, #27
 8001f66:	bf44      	itt	mi
 8001f68:	2220      	movmi	r2, #32
 8001f6a:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 8001f6e:	7829      	ldrb	r1, [r5, #0]
 8001f70:	071a      	lsls	r2, r3, #28
 8001f72:	bf44      	itt	mi
 8001f74:	222b      	movmi	r2, #43	; 0x2b
 8001f76:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 8001f7a:	292a      	cmp	r1, #42	; 0x2a
 8001f7c:	d170      	bne.n	8002060 <_vfiprintf_r+0x1b8>
 8001f7e:	9a05      	ldr	r2, [sp, #20]
 8001f80:	6811      	ldr	r1, [r2, #0]
 8001f82:	3204      	adds	r2, #4
 8001f84:	2900      	cmp	r1, #0
 8001f86:	9205      	str	r2, [sp, #20]
 8001f88:	f2c0 809b 	blt.w	80020c2 <_vfiprintf_r+0x21a>
 8001f8c:	9109      	str	r1, [sp, #36]	; 0x24
 8001f8e:	7869      	ldrb	r1, [r5, #1]
 8001f90:	3501      	adds	r5, #1
 8001f92:	292e      	cmp	r1, #46	; 0x2e
 8001f94:	d076      	beq.n	8002084 <_vfiprintf_r+0x1dc>
 8001f96:	4c61      	ldr	r4, [pc, #388]	; (800211c <_vfiprintf_r+0x274>)
 8001f98:	2203      	movs	r2, #3
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	f000 fdc8 	bl	8002b30 <memchr>
 8001fa0:	b138      	cbz	r0, 8001fb2 <_vfiprintf_r+0x10a>
 8001fa2:	9b06      	ldr	r3, [sp, #24]
 8001fa4:	1b00      	subs	r0, r0, r4
 8001fa6:	2440      	movs	r4, #64	; 0x40
 8001fa8:	fa04 f000 	lsl.w	r0, r4, r0
 8001fac:	4303      	orrs	r3, r0
 8001fae:	9306      	str	r3, [sp, #24]
 8001fb0:	3501      	adds	r5, #1
 8001fb2:	f815 1b01 	ldrb.w	r1, [r5], #1
 8001fb6:	485a      	ldr	r0, [pc, #360]	; (8002120 <_vfiprintf_r+0x278>)
 8001fb8:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 8001fbc:	2206      	movs	r2, #6
 8001fbe:	f000 fdb7 	bl	8002b30 <memchr>
 8001fc2:	2800      	cmp	r0, #0
 8001fc4:	f000 8083 	beq.w	80020ce <_vfiprintf_r+0x226>
 8001fc8:	4b56      	ldr	r3, [pc, #344]	; (8002124 <_vfiprintf_r+0x27c>)
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d06d      	beq.n	80020aa <_vfiprintf_r+0x202>
 8001fce:	aa05      	add	r2, sp, #20
 8001fd0:	9200      	str	r2, [sp, #0]
 8001fd2:	4b55      	ldr	r3, [pc, #340]	; (8002128 <_vfiprintf_r+0x280>)
 8001fd4:	4642      	mov	r2, r8
 8001fd6:	a906      	add	r1, sp, #24
 8001fd8:	4648      	mov	r0, r9
 8001fda:	f3af 8000 	nop.w
 8001fde:	9003      	str	r0, [sp, #12]
 8001fe0:	9b03      	ldr	r3, [sp, #12]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	d006      	beq.n	8001ff4 <_vfiprintf_r+0x14c>
 8001fe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001fe8:	9a03      	ldr	r2, [sp, #12]
 8001fea:	7829      	ldrb	r1, [r5, #0]
 8001fec:	4413      	add	r3, r2
 8001fee:	930b      	str	r3, [sp, #44]	; 0x2c
 8001ff0:	2900      	cmp	r1, #0
 8001ff2:	d18a      	bne.n	8001f0a <_vfiprintf_r+0x62>
 8001ff4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8001ff8:	065b      	lsls	r3, r3, #25
 8001ffa:	d417      	bmi.n	800202c <_vfiprintf_r+0x184>
 8001ffc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001ffe:	b01f      	add	sp, #124	; 0x7c
 8002000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002004:	f7ff fa92 	bl	800152c <__sinit>
 8002008:	4b40      	ldr	r3, [pc, #256]	; (800210c <_vfiprintf_r+0x264>)
 800200a:	4598      	cmp	r8, r3
 800200c:	f47f af5c 	bne.w	8001ec8 <_vfiprintf_r+0x20>
 8002010:	f8d9 8004 	ldr.w	r8, [r9, #4]
 8002014:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8002018:	0718      	lsls	r0, r3, #28
 800201a:	f53f af63 	bmi.w	8001ee4 <_vfiprintf_r+0x3c>
 800201e:	4641      	mov	r1, r8
 8002020:	4648      	mov	r0, r9
 8002022:	f000 faf9 	bl	8002618 <__swsetup_r>
 8002026:	2800      	cmp	r0, #0
 8002028:	f43f af61 	beq.w	8001eee <_vfiprintf_r+0x46>
 800202c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002030:	e7e5      	b.n	8001ffe <_vfiprintf_r+0x156>
 8002032:	f8d9 8008 	ldr.w	r8, [r9, #8]
 8002036:	e750      	b.n	8001eda <_vfiprintf_r+0x32>
 8002038:	ebb4 0b05 	subs.w	fp, r4, r5
 800203c:	d0da      	beq.n	8001ff4 <_vfiprintf_r+0x14c>
 800203e:	46aa      	mov	sl, r5
 8002040:	f1c5 0501 	rsb	r5, r5, #1
 8002044:	e003      	b.n	800204e <_vfiprintf_r+0x1a6>
 8002046:	4593      	cmp	fp, r2
 8002048:	d936      	bls.n	80020b8 <_vfiprintf_r+0x210>
 800204a:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 800204e:	4642      	mov	r2, r8
 8002050:	4648      	mov	r0, r9
 8002052:	f7ff fee5 	bl	8001e20 <__sfputc_r>
 8002056:	3001      	adds	r0, #1
 8002058:	eb05 020a 	add.w	r2, r5, sl
 800205c:	d1f3      	bne.n	8002046 <_vfiprintf_r+0x19e>
 800205e:	e7c9      	b.n	8001ff4 <_vfiprintf_r+0x14c>
 8002060:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8002064:	2a09      	cmp	r2, #9
 8002066:	d894      	bhi.n	8001f92 <_vfiprintf_r+0xea>
 8002068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800206a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800206e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002072:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002076:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800207a:	2a09      	cmp	r2, #9
 800207c:	d9f5      	bls.n	800206a <_vfiprintf_r+0x1c2>
 800207e:	292e      	cmp	r1, #46	; 0x2e
 8002080:	9309      	str	r3, [sp, #36]	; 0x24
 8002082:	d188      	bne.n	8001f96 <_vfiprintf_r+0xee>
 8002084:	7869      	ldrb	r1, [r5, #1]
 8002086:	292a      	cmp	r1, #42	; 0x2a
 8002088:	d12b      	bne.n	80020e2 <_vfiprintf_r+0x23a>
 800208a:	9b05      	ldr	r3, [sp, #20]
 800208c:	78a9      	ldrb	r1, [r5, #2]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	9207      	str	r2, [sp, #28]
 8002092:	3304      	adds	r3, #4
 8002094:	2a00      	cmp	r2, #0
 8002096:	f105 0002 	add.w	r0, r5, #2
 800209a:	9305      	str	r3, [sp, #20]
 800209c:	bfb8      	it	lt
 800209e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80020a2:	4605      	mov	r5, r0
 80020a4:	bfb8      	it	lt
 80020a6:	9307      	strlt	r3, [sp, #28]
 80020a8:	e775      	b.n	8001f96 <_vfiprintf_r+0xee>
 80020aa:	9b05      	ldr	r3, [sp, #20]
 80020ac:	3307      	adds	r3, #7
 80020ae:	f023 0307 	bic.w	r3, r3, #7
 80020b2:	3308      	adds	r3, #8
 80020b4:	9305      	str	r3, [sp, #20]
 80020b6:	e796      	b.n	8001fe6 <_vfiprintf_r+0x13e>
 80020b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80020ba:	7823      	ldrb	r3, [r4, #0]
 80020bc:	445a      	add	r2, fp
 80020be:	920b      	str	r2, [sp, #44]	; 0x2c
 80020c0:	e732      	b.n	8001f28 <_vfiprintf_r+0x80>
 80020c2:	4249      	negs	r1, r1
 80020c4:	f043 0302 	orr.w	r3, r3, #2
 80020c8:	9109      	str	r1, [sp, #36]	; 0x24
 80020ca:	9306      	str	r3, [sp, #24]
 80020cc:	e75f      	b.n	8001f8e <_vfiprintf_r+0xe6>
 80020ce:	aa05      	add	r2, sp, #20
 80020d0:	9200      	str	r2, [sp, #0]
 80020d2:	4b15      	ldr	r3, [pc, #84]	; (8002128 <_vfiprintf_r+0x280>)
 80020d4:	4642      	mov	r2, r8
 80020d6:	a906      	add	r1, sp, #24
 80020d8:	4648      	mov	r0, r9
 80020da:	f000 f8cb 	bl	8002274 <_printf_i>
 80020de:	9003      	str	r0, [sp, #12]
 80020e0:	e77e      	b.n	8001fe0 <_vfiprintf_r+0x138>
 80020e2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80020e6:	2300      	movs	r3, #0
 80020e8:	2a09      	cmp	r2, #9
 80020ea:	9307      	str	r3, [sp, #28]
 80020ec:	f105 0501 	add.w	r5, r5, #1
 80020f0:	f63f af51 	bhi.w	8001f96 <_vfiprintf_r+0xee>
 80020f4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80020f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80020fc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002100:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8002104:	2a09      	cmp	r2, #9
 8002106:	d9f5      	bls.n	80020f4 <_vfiprintf_r+0x24c>
 8002108:	9307      	str	r3, [sp, #28]
 800210a:	e744      	b.n	8001f96 <_vfiprintf_r+0xee>
 800210c:	0800b7cc 	.word	0x0800b7cc
 8002110:	0800b7ac 	.word	0x0800b7ac
 8002114:	0800b78c 	.word	0x0800b78c
 8002118:	0800b824 	.word	0x0800b824
 800211c:	0800b82c 	.word	0x0800b82c
 8002120:	0800b830 	.word	0x0800b830
 8002124:	00000000 	.word	0x00000000
 8002128:	08001e5d 	.word	0x08001e5d

0800212c <vfiprintf>:
 800212c:	b410      	push	{r4}
 800212e:	4c05      	ldr	r4, [pc, #20]	; (8002144 <vfiprintf+0x18>)
 8002130:	4684      	mov	ip, r0
 8002132:	4613      	mov	r3, r2
 8002134:	6820      	ldr	r0, [r4, #0]
 8002136:	f85d 4b04 	ldr.w	r4, [sp], #4
 800213a:	460a      	mov	r2, r1
 800213c:	4661      	mov	r1, ip
 800213e:	f7ff beb3 	b.w	8001ea8 <_vfiprintf_r>
 8002142:	bf00      	nop
 8002144:	20000004 	.word	0x20000004

08002148 <_printf_common>:
 8002148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800214c:	4692      	mov	sl, r2
 800214e:	461f      	mov	r7, r3
 8002150:	690a      	ldr	r2, [r1, #16]
 8002152:	688b      	ldr	r3, [r1, #8]
 8002154:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8002158:	429a      	cmp	r2, r3
 800215a:	bfb8      	it	lt
 800215c:	461a      	movlt	r2, r3
 800215e:	f8ca 2000 	str.w	r2, [sl]
 8002162:	f891 3043 	ldrb.w	r3, [r1, #67]	; 0x43
 8002166:	460c      	mov	r4, r1
 8002168:	4606      	mov	r6, r0
 800216a:	b113      	cbz	r3, 8002172 <_printf_common+0x2a>
 800216c:	3201      	adds	r2, #1
 800216e:	f8ca 2000 	str.w	r2, [sl]
 8002172:	6822      	ldr	r2, [r4, #0]
 8002174:	0691      	lsls	r1, r2, #26
 8002176:	d55d      	bpl.n	8002234 <_printf_common+0xec>
 8002178:	f8da 3000 	ldr.w	r3, [sl]
 800217c:	3302      	adds	r3, #2
 800217e:	f8ca 3000 	str.w	r3, [sl]
 8002182:	6822      	ldr	r2, [r4, #0]
 8002184:	f012 0f06 	tst.w	r2, #6
 8002188:	4611      	mov	r1, r2
 800218a:	d11e      	bne.n	80021ca <_printf_common+0x82>
 800218c:	68e1      	ldr	r1, [r4, #12]
 800218e:	1acb      	subs	r3, r1, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	bfd8      	it	le
 8002194:	4611      	movle	r1, r2
 8002196:	dd18      	ble.n	80021ca <_printf_common+0x82>
 8002198:	f104 0b19 	add.w	fp, r4, #25
 800219c:	f04f 0800 	mov.w	r8, #0
 80021a0:	e005      	b.n	80021ae <_printf_common+0x66>
 80021a2:	68e5      	ldr	r5, [r4, #12]
 80021a4:	f8da 3000 	ldr.w	r3, [sl]
 80021a8:	1aed      	subs	r5, r5, r3
 80021aa:	4545      	cmp	r5, r8
 80021ac:	dd0c      	ble.n	80021c8 <_printf_common+0x80>
 80021ae:	2301      	movs	r3, #1
 80021b0:	465a      	mov	r2, fp
 80021b2:	4639      	mov	r1, r7
 80021b4:	4630      	mov	r0, r6
 80021b6:	47c8      	blx	r9
 80021b8:	3001      	adds	r0, #1
 80021ba:	f108 0801 	add.w	r8, r8, #1
 80021be:	d1f0      	bne.n	80021a2 <_printf_common+0x5a>
 80021c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021c8:	6821      	ldr	r1, [r4, #0]
 80021ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80021ce:	3b00      	subs	r3, #0
 80021d0:	bf18      	it	ne
 80021d2:	2301      	movne	r3, #1
 80021d4:	068a      	lsls	r2, r1, #26
 80021d6:	d50a      	bpl.n	80021ee <_printf_common+0xa6>
 80021d8:	18e1      	adds	r1, r4, r3
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	2030      	movs	r0, #48	; 0x30
 80021de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80021e2:	4422      	add	r2, r4
 80021e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80021e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80021ec:	3302      	adds	r3, #2
 80021ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80021f2:	4639      	mov	r1, r7
 80021f4:	4630      	mov	r0, r6
 80021f6:	47c8      	blx	r9
 80021f8:	3001      	adds	r0, #1
 80021fa:	d0e1      	beq.n	80021c0 <_printf_common+0x78>
 80021fc:	6823      	ldr	r3, [r4, #0]
 80021fe:	f003 0306 	and.w	r3, r3, #6
 8002202:	2b04      	cmp	r3, #4
 8002204:	d01d      	beq.n	8002242 <_printf_common+0xfa>
 8002206:	68a3      	ldr	r3, [r4, #8]
 8002208:	6922      	ldr	r2, [r4, #16]
 800220a:	4293      	cmp	r3, r2
 800220c:	dd25      	ble.n	800225a <_printf_common+0x112>
 800220e:	f04f 0800 	mov.w	r8, #0
 8002212:	1a9b      	subs	r3, r3, r2
 8002214:	4498      	add	r8, r3
 8002216:	341a      	adds	r4, #26
 8002218:	2500      	movs	r5, #0
 800221a:	e001      	b.n	8002220 <_printf_common+0xd8>
 800221c:	4545      	cmp	r5, r8
 800221e:	da1c      	bge.n	800225a <_printf_common+0x112>
 8002220:	2301      	movs	r3, #1
 8002222:	4622      	mov	r2, r4
 8002224:	4639      	mov	r1, r7
 8002226:	4630      	mov	r0, r6
 8002228:	47c8      	blx	r9
 800222a:	3001      	adds	r0, #1
 800222c:	f105 0501 	add.w	r5, r5, #1
 8002230:	d1f4      	bne.n	800221c <_printf_common+0xd4>
 8002232:	e7c5      	b.n	80021c0 <_printf_common+0x78>
 8002234:	f012 0f06 	tst.w	r2, #6
 8002238:	d012      	beq.n	8002260 <_printf_common+0x118>
 800223a:	3b00      	subs	r3, #0
 800223c:	bf18      	it	ne
 800223e:	2301      	movne	r3, #1
 8002240:	e7d5      	b.n	80021ee <_printf_common+0xa6>
 8002242:	f8da 3000 	ldr.w	r3, [sl]
 8002246:	68e1      	ldr	r1, [r4, #12]
 8002248:	6922      	ldr	r2, [r4, #16]
 800224a:	1ac9      	subs	r1, r1, r3
 800224c:	68a3      	ldr	r3, [r4, #8]
 800224e:	4293      	cmp	r3, r2
 8002250:	ea21 78e1 	bic.w	r8, r1, r1, asr #31
 8002254:	dcdd      	bgt.n	8002212 <_printf_common+0xca>
 8002256:	2900      	cmp	r1, #0
 8002258:	dcdd      	bgt.n	8002216 <_printf_common+0xce>
 800225a:	2000      	movs	r0, #0
 800225c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002260:	68e1      	ldr	r1, [r4, #12]
 8002262:	f8da 3000 	ldr.w	r3, [sl]
 8002266:	1acb      	subs	r3, r1, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	bfd8      	it	le
 800226c:	4611      	movle	r1, r2
 800226e:	dc93      	bgt.n	8002198 <_printf_common+0x50>
 8002270:	e7ab      	b.n	80021ca <_printf_common+0x82>
 8002272:	bf00      	nop

08002274 <_printf_i>:
 8002274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002278:	460c      	mov	r4, r1
 800227a:	b084      	sub	sp, #16
 800227c:	4690      	mov	r8, r2
 800227e:	7e22      	ldrb	r2, [r4, #24]
 8002280:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002282:	4607      	mov	r7, r0
 8002284:	4699      	mov	r9, r3
 8002286:	f104 0043 	add.w	r0, r4, #67	; 0x43
 800228a:	2a00      	cmp	r2, #0
 800228c:	d033      	beq.n	80022f6 <_printf_i+0x82>
 800228e:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8002292:	b2dd      	uxtb	r5, r3
 8002294:	2d20      	cmp	r5, #32
 8002296:	d867      	bhi.n	8002368 <_printf_i+0xf4>
 8002298:	2b20      	cmp	r3, #32
 800229a:	d865      	bhi.n	8002368 <_printf_i+0xf4>
 800229c:	e8df f013 	tbh	[pc, r3, lsl #1]
 80022a0:	006400de 	.word	0x006400de
 80022a4:	00640064 	.word	0x00640064
 80022a8:	00640064 	.word	0x00640064
 80022ac:	00640064 	.word	0x00640064
 80022b0:	00640064 	.word	0x00640064
 80022b4:	00a30064 	.word	0x00a30064
 80022b8:	0064006e 	.word	0x0064006e
 80022bc:	00640064 	.word	0x00640064
 80022c0:	006e0064 	.word	0x006e0064
 80022c4:	00640064 	.word	0x00640064
 80022c8:	00640064 	.word	0x00640064
 80022cc:	007f0021 	.word	0x007f0021
 80022d0:	006400c0 	.word	0x006400c0
 80022d4:	00ae0064 	.word	0x00ae0064
 80022d8:	007f0064 	.word	0x007f0064
 80022dc:	00640064 	.word	0x00640064
 80022e0:	00e5      	.short	0x00e5
 80022e2:	6823      	ldr	r3, [r4, #0]
 80022e4:	061a      	lsls	r2, r3, #24
 80022e6:	f140 8104 	bpl.w	80024f2 <_printf_i+0x27e>
 80022ea:	680b      	ldr	r3, [r1, #0]
 80022ec:	6962      	ldr	r2, [r4, #20]
 80022ee:	1d1d      	adds	r5, r3, #4
 80022f0:	600d      	str	r5, [r1, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	2300      	movs	r3, #0
 80022f8:	4682      	mov	sl, r0
 80022fa:	6123      	str	r3, [r4, #16]
 80022fc:	f8cd 9000 	str.w	r9, [sp]
 8002300:	4643      	mov	r3, r8
 8002302:	aa03      	add	r2, sp, #12
 8002304:	4621      	mov	r1, r4
 8002306:	4638      	mov	r0, r7
 8002308:	f7ff ff1e 	bl	8002148 <_printf_common>
 800230c:	3001      	adds	r0, #1
 800230e:	d020      	beq.n	8002352 <_printf_i+0xde>
 8002310:	6923      	ldr	r3, [r4, #16]
 8002312:	4652      	mov	r2, sl
 8002314:	4641      	mov	r1, r8
 8002316:	4638      	mov	r0, r7
 8002318:	47c8      	blx	r9
 800231a:	3001      	adds	r0, #1
 800231c:	d019      	beq.n	8002352 <_printf_i+0xde>
 800231e:	6823      	ldr	r3, [r4, #0]
 8002320:	68e0      	ldr	r0, [r4, #12]
 8002322:	9e03      	ldr	r6, [sp, #12]
 8002324:	079b      	lsls	r3, r3, #30
 8002326:	d519      	bpl.n	800235c <_printf_i+0xe8>
 8002328:	1b83      	subs	r3, r0, r6
 800232a:	2b00      	cmp	r3, #0
 800232c:	dd16      	ble.n	800235c <_printf_i+0xe8>
 800232e:	f104 0a19 	add.w	sl, r4, #25
 8002332:	2500      	movs	r5, #0
 8002334:	e004      	b.n	8002340 <_printf_i+0xcc>
 8002336:	68e0      	ldr	r0, [r4, #12]
 8002338:	9e03      	ldr	r6, [sp, #12]
 800233a:	1b83      	subs	r3, r0, r6
 800233c:	42ab      	cmp	r3, r5
 800233e:	dd0d      	ble.n	800235c <_printf_i+0xe8>
 8002340:	2301      	movs	r3, #1
 8002342:	4652      	mov	r2, sl
 8002344:	4641      	mov	r1, r8
 8002346:	4638      	mov	r0, r7
 8002348:	47c8      	blx	r9
 800234a:	3001      	adds	r0, #1
 800234c:	f105 0501 	add.w	r5, r5, #1
 8002350:	d1f1      	bne.n	8002336 <_printf_i+0xc2>
 8002352:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002356:	b004      	add	sp, #16
 8002358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800235c:	42b0      	cmp	r0, r6
 800235e:	bfb8      	it	lt
 8002360:	4630      	movlt	r0, r6
 8002362:	b004      	add	sp, #16
 8002364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002368:	2301      	movs	r3, #1
 800236a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800236e:	6123      	str	r3, [r4, #16]
 8002370:	f104 0a42 	add.w	sl, r4, #66	; 0x42
 8002374:	2300      	movs	r3, #0
 8002376:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800237a:	e7bf      	b.n	80022fc <_printf_i+0x88>
 800237c:	6823      	ldr	r3, [r4, #0]
 800237e:	061a      	lsls	r2, r3, #24
 8002380:	d402      	bmi.n	8002388 <_printf_i+0x114>
 8002382:	065e      	lsls	r6, r3, #25
 8002384:	f100 80c1 	bmi.w	800250a <_printf_i+0x296>
 8002388:	680d      	ldr	r5, [r1, #0]
 800238a:	682a      	ldr	r2, [r5, #0]
 800238c:	3504      	adds	r5, #4
 800238e:	600d      	str	r5, [r1, #0]
 8002390:	4615      	mov	r5, r2
 8002392:	2a00      	cmp	r2, #0
 8002394:	db6b      	blt.n	800246e <_printf_i+0x1fa>
 8002396:	f8df c184 	ldr.w	ip, [pc, #388]	; 800251c <_printf_i+0x2a8>
 800239a:	260a      	movs	r6, #10
 800239c:	e010      	b.n	80023c0 <_printf_i+0x14c>
 800239e:	6823      	ldr	r3, [r4, #0]
 80023a0:	061d      	lsls	r5, r3, #24
 80023a2:	f140 809c 	bpl.w	80024de <_printf_i+0x26a>
 80023a6:	680b      	ldr	r3, [r1, #0]
 80023a8:	1d1d      	adds	r5, r3, #4
 80023aa:	600d      	str	r5, [r1, #0]
 80023ac:	681d      	ldr	r5, [r3, #0]
 80023ae:	f8df c16c 	ldr.w	ip, [pc, #364]	; 800251c <_printf_i+0x2a8>
 80023b2:	2a6f      	cmp	r2, #111	; 0x6f
 80023b4:	bf0c      	ite	eq
 80023b6:	2608      	moveq	r6, #8
 80023b8:	260a      	movne	r6, #10
 80023ba:	2300      	movs	r3, #0
 80023bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023c0:	6862      	ldr	r2, [r4, #4]
 80023c2:	60a2      	str	r2, [r4, #8]
 80023c4:	2a00      	cmp	r2, #0
 80023c6:	db7f      	blt.n	80024c8 <_printf_i+0x254>
 80023c8:	6823      	ldr	r3, [r4, #0]
 80023ca:	f023 0304 	bic.w	r3, r3, #4
 80023ce:	6023      	str	r3, [r4, #0]
 80023d0:	2d00      	cmp	r5, #0
 80023d2:	d15b      	bne.n	800248c <_printf_i+0x218>
 80023d4:	2a00      	cmp	r2, #0
 80023d6:	d179      	bne.n	80024cc <_printf_i+0x258>
 80023d8:	4682      	mov	sl, r0
 80023da:	2e08      	cmp	r6, #8
 80023dc:	d065      	beq.n	80024aa <_printf_i+0x236>
 80023de:	eba0 000a 	sub.w	r0, r0, sl
 80023e2:	6120      	str	r0, [r4, #16]
 80023e4:	e78a      	b.n	80022fc <_printf_i+0x88>
 80023e6:	680b      	ldr	r3, [r1, #0]
 80023e8:	2201      	movs	r2, #1
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	3304      	adds	r3, #4
 80023ee:	600b      	str	r3, [r1, #0]
 80023f0:	f104 0a42 	add.w	sl, r4, #66	; 0x42
 80023f4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
 80023f8:	6122      	str	r2, [r4, #16]
 80023fa:	e7bb      	b.n	8002374 <_printf_i+0x100>
 80023fc:	680b      	ldr	r3, [r1, #0]
 80023fe:	6862      	ldr	r2, [r4, #4]
 8002400:	1d18      	adds	r0, r3, #4
 8002402:	6008      	str	r0, [r1, #0]
 8002404:	f8d3 a000 	ldr.w	sl, [r3]
 8002408:	2100      	movs	r1, #0
 800240a:	4650      	mov	r0, sl
 800240c:	f000 fb90 	bl	8002b30 <memchr>
 8002410:	2800      	cmp	r0, #0
 8002412:	f000 8081 	beq.w	8002518 <_printf_i+0x2a4>
 8002416:	eba0 000a 	sub.w	r0, r0, sl
 800241a:	6060      	str	r0, [r4, #4]
 800241c:	6120      	str	r0, [r4, #16]
 800241e:	e7a9      	b.n	8002374 <_printf_i+0x100>
 8002420:	6823      	ldr	r3, [r4, #0]
 8002422:	f043 0320 	orr.w	r3, r3, #32
 8002426:	6023      	str	r3, [r4, #0]
 8002428:	2278      	movs	r2, #120	; 0x78
 800242a:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8002520 <_printf_i+0x2ac>
 800242e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002432:	680a      	ldr	r2, [r1, #0]
 8002434:	1d15      	adds	r5, r2, #4
 8002436:	600d      	str	r5, [r1, #0]
 8002438:	061d      	lsls	r5, r3, #24
 800243a:	d443      	bmi.n	80024c4 <_printf_i+0x250>
 800243c:	0659      	lsls	r1, r3, #25
 800243e:	d541      	bpl.n	80024c4 <_printf_i+0x250>
 8002440:	8815      	ldrh	r5, [r2, #0]
 8002442:	07de      	lsls	r6, r3, #31
 8002444:	bf44      	itt	mi
 8002446:	f043 0320 	orrmi.w	r3, r3, #32
 800244a:	6023      	strmi	r3, [r4, #0]
 800244c:	2d00      	cmp	r5, #0
 800244e:	d144      	bne.n	80024da <_printf_i+0x266>
 8002450:	6823      	ldr	r3, [r4, #0]
 8002452:	f023 0320 	bic.w	r3, r3, #32
 8002456:	6023      	str	r3, [r4, #0]
 8002458:	2610      	movs	r6, #16
 800245a:	e7ae      	b.n	80023ba <_printf_i+0x146>
 800245c:	2358      	movs	r3, #88	; 0x58
 800245e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002462:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 800251c <_printf_i+0x2a8>
 8002466:	6823      	ldr	r3, [r4, #0]
 8002468:	e7e3      	b.n	8002432 <_printf_i+0x1be>
 800246a:	6823      	ldr	r3, [r4, #0]
 800246c:	e7dc      	b.n	8002428 <_printf_i+0x1b4>
 800246e:	6862      	ldr	r2, [r4, #4]
 8002470:	60a2      	str	r2, [r4, #8]
 8002472:	212d      	movs	r1, #45	; 0x2d
 8002474:	2a00      	cmp	r2, #0
 8002476:	f1c5 0500 	rsb	r5, r5, #0
 800247a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800247e:	db02      	blt.n	8002486 <_printf_i+0x212>
 8002480:	f023 0304 	bic.w	r3, r3, #4
 8002484:	6023      	str	r3, [r4, #0]
 8002486:	f8df c094 	ldr.w	ip, [pc, #148]	; 800251c <_printf_i+0x2a8>
 800248a:	260a      	movs	r6, #10
 800248c:	4682      	mov	sl, r0
 800248e:	fbb5 f3f6 	udiv	r3, r5, r6
 8002492:	fb06 5113 	mls	r1, r6, r3, r5
 8002496:	462a      	mov	r2, r5
 8002498:	f81c 1001 	ldrb.w	r1, [ip, r1]
 800249c:	f80a 1d01 	strb.w	r1, [sl, #-1]!
 80024a0:	42b2      	cmp	r2, r6
 80024a2:	461d      	mov	r5, r3
 80024a4:	d2f3      	bcs.n	800248e <_printf_i+0x21a>
 80024a6:	2e08      	cmp	r6, #8
 80024a8:	d199      	bne.n	80023de <_printf_i+0x16a>
 80024aa:	6823      	ldr	r3, [r4, #0]
 80024ac:	07d9      	lsls	r1, r3, #31
 80024ae:	d596      	bpl.n	80023de <_printf_i+0x16a>
 80024b0:	6862      	ldr	r2, [r4, #4]
 80024b2:	6923      	ldr	r3, [r4, #16]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	dc92      	bgt.n	80023de <_printf_i+0x16a>
 80024b8:	2330      	movs	r3, #48	; 0x30
 80024ba:	f80a 3c01 	strb.w	r3, [sl, #-1]
 80024be:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80024c2:	e78c      	b.n	80023de <_printf_i+0x16a>
 80024c4:	6815      	ldr	r5, [r2, #0]
 80024c6:	e7bc      	b.n	8002442 <_printf_i+0x1ce>
 80024c8:	2d00      	cmp	r5, #0
 80024ca:	d1df      	bne.n	800248c <_printf_i+0x218>
 80024cc:	f89c 3000 	ldrb.w	r3, [ip]
 80024d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80024d4:	f104 0a42 	add.w	sl, r4, #66	; 0x42
 80024d8:	e77f      	b.n	80023da <_printf_i+0x166>
 80024da:	2610      	movs	r6, #16
 80024dc:	e76d      	b.n	80023ba <_printf_i+0x146>
 80024de:	f013 0f40 	tst.w	r3, #64	; 0x40
 80024e2:	680b      	ldr	r3, [r1, #0]
 80024e4:	f103 0504 	add.w	r5, r3, #4
 80024e8:	600d      	str	r5, [r1, #0]
 80024ea:	bf0c      	ite	eq
 80024ec:	681d      	ldreq	r5, [r3, #0]
 80024ee:	881d      	ldrhne	r5, [r3, #0]
 80024f0:	e75d      	b.n	80023ae <_printf_i+0x13a>
 80024f2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80024f6:	680b      	ldr	r3, [r1, #0]
 80024f8:	6962      	ldr	r2, [r4, #20]
 80024fa:	f103 0504 	add.w	r5, r3, #4
 80024fe:	600d      	str	r5, [r1, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	bf14      	ite	ne
 8002504:	801a      	strhne	r2, [r3, #0]
 8002506:	601a      	streq	r2, [r3, #0]
 8002508:	e6f5      	b.n	80022f6 <_printf_i+0x82>
 800250a:	680a      	ldr	r2, [r1, #0]
 800250c:	f9b2 5000 	ldrsh.w	r5, [r2]
 8002510:	3204      	adds	r2, #4
 8002512:	600a      	str	r2, [r1, #0]
 8002514:	462a      	mov	r2, r5
 8002516:	e73c      	b.n	8002392 <_printf_i+0x11e>
 8002518:	6860      	ldr	r0, [r4, #4]
 800251a:	e77f      	b.n	800241c <_printf_i+0x1a8>
 800251c:	0800b838 	.word	0x0800b838
 8002520:	0800b84c 	.word	0x0800b84c

08002524 <_read_r>:
 8002524:	b538      	push	{r3, r4, r5, lr}
 8002526:	460c      	mov	r4, r1
 8002528:	4d08      	ldr	r5, [pc, #32]	; (800254c <_read_r+0x28>)
 800252a:	4684      	mov	ip, r0
 800252c:	4611      	mov	r1, r2
 800252e:	4620      	mov	r0, r4
 8002530:	461a      	mov	r2, r3
 8002532:	2300      	movs	r3, #0
 8002534:	602b      	str	r3, [r5, #0]
 8002536:	4664      	mov	r4, ip
 8002538:	f7fe fd14 	bl	8000f64 <_read>
 800253c:	1c43      	adds	r3, r0, #1
 800253e:	d000      	beq.n	8002542 <_read_r+0x1e>
 8002540:	bd38      	pop	{r3, r4, r5, pc}
 8002542:	682b      	ldr	r3, [r5, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0fb      	beq.n	8002540 <_read_r+0x1c>
 8002548:	6023      	str	r3, [r4, #0]
 800254a:	bd38      	pop	{r3, r4, r5, pc}
 800254c:	2000025c 	.word	0x2000025c

08002550 <__swbuf_r>:
 8002550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002552:	460d      	mov	r5, r1
 8002554:	4614      	mov	r4, r2
 8002556:	4606      	mov	r6, r0
 8002558:	b108      	cbz	r0, 800255e <__swbuf_r+0xe>
 800255a:	6983      	ldr	r3, [r0, #24]
 800255c:	b343      	cbz	r3, 80025b0 <__swbuf_r+0x60>
 800255e:	4b25      	ldr	r3, [pc, #148]	; (80025f4 <__swbuf_r+0xa4>)
 8002560:	429c      	cmp	r4, r3
 8002562:	d02a      	beq.n	80025ba <__swbuf_r+0x6a>
 8002564:	4b24      	ldr	r3, [pc, #144]	; (80025f8 <__swbuf_r+0xa8>)
 8002566:	429c      	cmp	r4, r3
 8002568:	d029      	beq.n	80025be <__swbuf_r+0x6e>
 800256a:	4b24      	ldr	r3, [pc, #144]	; (80025fc <__swbuf_r+0xac>)
 800256c:	429c      	cmp	r4, r3
 800256e:	bf08      	it	eq
 8002570:	68f4      	ldreq	r4, [r6, #12]
 8002572:	89a3      	ldrh	r3, [r4, #12]
 8002574:	69a2      	ldr	r2, [r4, #24]
 8002576:	60a2      	str	r2, [r4, #8]
 8002578:	071a      	lsls	r2, r3, #28
 800257a:	d522      	bpl.n	80025c2 <__swbuf_r+0x72>
 800257c:	6923      	ldr	r3, [r4, #16]
 800257e:	b303      	cbz	r3, 80025c2 <__swbuf_r+0x72>
 8002580:	6822      	ldr	r2, [r4, #0]
 8002582:	6961      	ldr	r1, [r4, #20]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	b2ed      	uxtb	r5, r5
 8002588:	4299      	cmp	r1, r3
 800258a:	462f      	mov	r7, r5
 800258c:	dd29      	ble.n	80025e2 <__swbuf_r+0x92>
 800258e:	3301      	adds	r3, #1
 8002590:	68a1      	ldr	r1, [r4, #8]
 8002592:	3901      	subs	r1, #1
 8002594:	60a1      	str	r1, [r4, #8]
 8002596:	1c51      	adds	r1, r2, #1
 8002598:	6021      	str	r1, [r4, #0]
 800259a:	7015      	strb	r5, [r2, #0]
 800259c:	6962      	ldr	r2, [r4, #20]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d016      	beq.n	80025d0 <__swbuf_r+0x80>
 80025a2:	89a3      	ldrh	r3, [r4, #12]
 80025a4:	07db      	lsls	r3, r3, #31
 80025a6:	d501      	bpl.n	80025ac <__swbuf_r+0x5c>
 80025a8:	2d0a      	cmp	r5, #10
 80025aa:	d011      	beq.n	80025d0 <__swbuf_r+0x80>
 80025ac:	4638      	mov	r0, r7
 80025ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025b0:	f7fe ffbc 	bl	800152c <__sinit>
 80025b4:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <__swbuf_r+0xa4>)
 80025b6:	429c      	cmp	r4, r3
 80025b8:	d1d4      	bne.n	8002564 <__swbuf_r+0x14>
 80025ba:	6874      	ldr	r4, [r6, #4]
 80025bc:	e7d9      	b.n	8002572 <__swbuf_r+0x22>
 80025be:	68b4      	ldr	r4, [r6, #8]
 80025c0:	e7d7      	b.n	8002572 <__swbuf_r+0x22>
 80025c2:	4621      	mov	r1, r4
 80025c4:	4630      	mov	r0, r6
 80025c6:	f000 f827 	bl	8002618 <__swsetup_r>
 80025ca:	b938      	cbnz	r0, 80025dc <__swbuf_r+0x8c>
 80025cc:	6923      	ldr	r3, [r4, #16]
 80025ce:	e7d7      	b.n	8002580 <__swbuf_r+0x30>
 80025d0:	4621      	mov	r1, r4
 80025d2:	4630      	mov	r0, r6
 80025d4:	f7ff fba0 	bl	8001d18 <_fflush_r>
 80025d8:	2800      	cmp	r0, #0
 80025da:	d0e7      	beq.n	80025ac <__swbuf_r+0x5c>
 80025dc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80025e0:	e7e4      	b.n	80025ac <__swbuf_r+0x5c>
 80025e2:	4621      	mov	r1, r4
 80025e4:	4630      	mov	r0, r6
 80025e6:	f7ff fb97 	bl	8001d18 <_fflush_r>
 80025ea:	2800      	cmp	r0, #0
 80025ec:	d1f6      	bne.n	80025dc <__swbuf_r+0x8c>
 80025ee:	6822      	ldr	r2, [r4, #0]
 80025f0:	2301      	movs	r3, #1
 80025f2:	e7cd      	b.n	8002590 <__swbuf_r+0x40>
 80025f4:	0800b7cc 	.word	0x0800b7cc
 80025f8:	0800b7ac 	.word	0x0800b7ac
 80025fc:	0800b78c 	.word	0x0800b78c

08002600 <__swbuf>:
 8002600:	b410      	push	{r4}
 8002602:	4c04      	ldr	r4, [pc, #16]	; (8002614 <__swbuf+0x14>)
 8002604:	4603      	mov	r3, r0
 8002606:	460a      	mov	r2, r1
 8002608:	6820      	ldr	r0, [r4, #0]
 800260a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800260e:	4619      	mov	r1, r3
 8002610:	f7ff bf9e 	b.w	8002550 <__swbuf_r>
 8002614:	20000004 	.word	0x20000004

08002618 <__swsetup_r>:
 8002618:	4b3c      	ldr	r3, [pc, #240]	; (800270c <__swsetup_r+0xf4>)
 800261a:	b570      	push	{r4, r5, r6, lr}
 800261c:	681d      	ldr	r5, [r3, #0]
 800261e:	4606      	mov	r6, r0
 8002620:	460c      	mov	r4, r1
 8002622:	b10d      	cbz	r5, 8002628 <__swsetup_r+0x10>
 8002624:	69ab      	ldr	r3, [r5, #24]
 8002626:	b1e3      	cbz	r3, 8002662 <__swsetup_r+0x4a>
 8002628:	4b39      	ldr	r3, [pc, #228]	; (8002710 <__swsetup_r+0xf8>)
 800262a:	429c      	cmp	r4, r3
 800262c:	d01f      	beq.n	800266e <__swsetup_r+0x56>
 800262e:	4b39      	ldr	r3, [pc, #228]	; (8002714 <__swsetup_r+0xfc>)
 8002630:	429c      	cmp	r4, r3
 8002632:	d04d      	beq.n	80026d0 <__swsetup_r+0xb8>
 8002634:	4b38      	ldr	r3, [pc, #224]	; (8002718 <__swsetup_r+0x100>)
 8002636:	429c      	cmp	r4, r3
 8002638:	bf08      	it	eq
 800263a:	68ec      	ldreq	r4, [r5, #12]
 800263c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002640:	0718      	lsls	r0, r3, #28
 8002642:	b29a      	uxth	r2, r3
 8002644:	d519      	bpl.n	800267a <__swsetup_r+0x62>
 8002646:	6921      	ldr	r1, [r4, #16]
 8002648:	b311      	cbz	r1, 8002690 <__swsetup_r+0x78>
 800264a:	f012 0001 	ands.w	r0, r2, #1
 800264e:	d02f      	beq.n	80026b0 <__swsetup_r+0x98>
 8002650:	2000      	movs	r0, #0
 8002652:	60a0      	str	r0, [r4, #8]
 8002654:	6960      	ldr	r0, [r4, #20]
 8002656:	4240      	negs	r0, r0
 8002658:	61a0      	str	r0, [r4, #24]
 800265a:	2900      	cmp	r1, #0
 800265c:	d02e      	beq.n	80026bc <__swsetup_r+0xa4>
 800265e:	2000      	movs	r0, #0
 8002660:	bd70      	pop	{r4, r5, r6, pc}
 8002662:	4628      	mov	r0, r5
 8002664:	f7fe ff62 	bl	800152c <__sinit>
 8002668:	4b29      	ldr	r3, [pc, #164]	; (8002710 <__swsetup_r+0xf8>)
 800266a:	429c      	cmp	r4, r3
 800266c:	d1df      	bne.n	800262e <__swsetup_r+0x16>
 800266e:	686c      	ldr	r4, [r5, #4]
 8002670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002674:	0718      	lsls	r0, r3, #28
 8002676:	b29a      	uxth	r2, r3
 8002678:	d4e5      	bmi.n	8002646 <__swsetup_r+0x2e>
 800267a:	06d1      	lsls	r1, r2, #27
 800267c:	d53e      	bpl.n	80026fc <__swsetup_r+0xe4>
 800267e:	0752      	lsls	r2, r2, #29
 8002680:	d428      	bmi.n	80026d4 <__swsetup_r+0xbc>
 8002682:	6921      	ldr	r1, [r4, #16]
 8002684:	f043 0308 	orr.w	r3, r3, #8
 8002688:	81a3      	strh	r3, [r4, #12]
 800268a:	b29a      	uxth	r2, r3
 800268c:	2900      	cmp	r1, #0
 800268e:	d1dc      	bne.n	800264a <__swsetup_r+0x32>
 8002690:	f402 7020 	and.w	r0, r2, #640	; 0x280
 8002694:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002698:	d0d7      	beq.n	800264a <__swsetup_r+0x32>
 800269a:	4621      	mov	r1, r4
 800269c:	4630      	mov	r0, r6
 800269e:	f000 f9b5 	bl	8002a0c <__smakebuf_r>
 80026a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026a6:	6921      	ldr	r1, [r4, #16]
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	f012 0001 	ands.w	r0, r2, #1
 80026ae:	d1cf      	bne.n	8002650 <__swsetup_r+0x38>
 80026b0:	0795      	lsls	r5, r2, #30
 80026b2:	bf58      	it	pl
 80026b4:	6960      	ldrpl	r0, [r4, #20]
 80026b6:	60a0      	str	r0, [r4, #8]
 80026b8:	2900      	cmp	r1, #0
 80026ba:	d1d0      	bne.n	800265e <__swsetup_r+0x46>
 80026bc:	0612      	lsls	r2, r2, #24
 80026be:	bf58      	it	pl
 80026c0:	4608      	movpl	r0, r1
 80026c2:	d5cd      	bpl.n	8002660 <__swsetup_r+0x48>
 80026c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026c8:	81a3      	strh	r3, [r4, #12]
 80026ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026ce:	bd70      	pop	{r4, r5, r6, pc}
 80026d0:	68ac      	ldr	r4, [r5, #8]
 80026d2:	e7b3      	b.n	800263c <__swsetup_r+0x24>
 80026d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026d6:	b151      	cbz	r1, 80026ee <__swsetup_r+0xd6>
 80026d8:	f104 0244 	add.w	r2, r4, #68	; 0x44
 80026dc:	4291      	cmp	r1, r2
 80026de:	d004      	beq.n	80026ea <__swsetup_r+0xd2>
 80026e0:	4630      	mov	r0, r6
 80026e2:	f7ff f897 	bl	8001814 <_free_r>
 80026e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	6362      	str	r2, [r4, #52]	; 0x34
 80026ee:	6921      	ldr	r1, [r4, #16]
 80026f0:	2200      	movs	r2, #0
 80026f2:	e9c4 1200 	strd	r1, r2, [r4]
 80026f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80026fa:	e7c3      	b.n	8002684 <__swsetup_r+0x6c>
 80026fc:	2209      	movs	r2, #9
 80026fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002702:	6032      	str	r2, [r6, #0]
 8002704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002708:	81a3      	strh	r3, [r4, #12]
 800270a:	bd70      	pop	{r4, r5, r6, pc}
 800270c:	20000004 	.word	0x20000004
 8002710:	0800b7cc 	.word	0x0800b7cc
 8002714:	0800b7ac 	.word	0x0800b7ac
 8002718:	0800b78c 	.word	0x0800b78c

0800271c <__sfvwrite_r>:
 800271c:	6893      	ldr	r3, [r2, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 8085 	beq.w	800282e <__sfvwrite_r+0x112>
 8002724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002728:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800272c:	460c      	mov	r4, r1
 800272e:	0719      	lsls	r1, r3, #28
 8002730:	4680      	mov	r8, r0
 8002732:	b083      	sub	sp, #12
 8002734:	4617      	mov	r7, r2
 8002736:	b298      	uxth	r0, r3
 8002738:	d525      	bpl.n	8002786 <__sfvwrite_r+0x6a>
 800273a:	6923      	ldr	r3, [r4, #16]
 800273c:	b31b      	cbz	r3, 8002786 <__sfvwrite_r+0x6a>
 800273e:	f010 0302 	ands.w	r3, r0, #2
 8002742:	683d      	ldr	r5, [r7, #0]
 8002744:	d02d      	beq.n	80027a2 <__sfvwrite_r+0x86>
 8002746:	f04f 0a00 	mov.w	sl, #0
 800274a:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 8002a08 <__sfvwrite_r+0x2ec>
 800274e:	4656      	mov	r6, sl
 8002750:	46b9      	mov	r9, r7
 8002752:	455e      	cmp	r6, fp
 8002754:	4633      	mov	r3, r6
 8002756:	4652      	mov	r2, sl
 8002758:	bf28      	it	cs
 800275a:	465b      	movcs	r3, fp
 800275c:	4640      	mov	r0, r8
 800275e:	2e00      	cmp	r6, #0
 8002760:	d052      	beq.n	8002808 <__sfvwrite_r+0xec>
 8002762:	6a21      	ldr	r1, [r4, #32]
 8002764:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8002766:	47b8      	blx	r7
 8002768:	2800      	cmp	r0, #0
 800276a:	dd56      	ble.n	800281a <__sfvwrite_r+0xfe>
 800276c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8002770:	1a1b      	subs	r3, r3, r0
 8002772:	4482      	add	sl, r0
 8002774:	1a36      	subs	r6, r6, r0
 8002776:	f8c9 3008 	str.w	r3, [r9, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1e9      	bne.n	8002752 <__sfvwrite_r+0x36>
 800277e:	2000      	movs	r0, #0
 8002780:	b003      	add	sp, #12
 8002782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002786:	4621      	mov	r1, r4
 8002788:	4640      	mov	r0, r8
 800278a:	f7ff ff45 	bl	8002618 <__swsetup_r>
 800278e:	2800      	cmp	r0, #0
 8002790:	f040 8136 	bne.w	8002a00 <__sfvwrite_r+0x2e4>
 8002794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002798:	683d      	ldr	r5, [r7, #0]
 800279a:	b298      	uxth	r0, r3
 800279c:	f010 0302 	ands.w	r3, r0, #2
 80027a0:	d1d1      	bne.n	8002746 <__sfvwrite_r+0x2a>
 80027a2:	f010 0901 	ands.w	r9, r0, #1
 80027a6:	d144      	bne.n	8002832 <__sfvwrite_r+0x116>
 80027a8:	464e      	mov	r6, r9
 80027aa:	9700      	str	r7, [sp, #0]
 80027ac:	b346      	cbz	r6, 8002800 <__sfvwrite_r+0xe4>
 80027ae:	0582      	lsls	r2, r0, #22
 80027b0:	f8d4 b008 	ldr.w	fp, [r4, #8]
 80027b4:	f140 8083 	bpl.w	80028be <__sfvwrite_r+0x1a2>
 80027b8:	45b3      	cmp	fp, r6
 80027ba:	465a      	mov	r2, fp
 80027bc:	f200 80b2 	bhi.w	8002924 <__sfvwrite_r+0x208>
 80027c0:	f410 6f90 	tst.w	r0, #1152	; 0x480
 80027c4:	f040 80bf 	bne.w	8002946 <__sfvwrite_r+0x22a>
 80027c8:	6820      	ldr	r0, [r4, #0]
 80027ca:	9201      	str	r2, [sp, #4]
 80027cc:	4649      	mov	r1, r9
 80027ce:	f000 f9ff 	bl	8002bd0 <memmove>
 80027d2:	68a3      	ldr	r3, [r4, #8]
 80027d4:	9a01      	ldr	r2, [sp, #4]
 80027d6:	eba3 010b 	sub.w	r1, r3, fp
 80027da:	6823      	ldr	r3, [r4, #0]
 80027dc:	60a1      	str	r1, [r4, #8]
 80027de:	4413      	add	r3, r2
 80027e0:	46b2      	mov	sl, r6
 80027e2:	6023      	str	r3, [r4, #0]
 80027e4:	2600      	movs	r6, #0
 80027e6:	9b00      	ldr	r3, [sp, #0]
 80027e8:	6898      	ldr	r0, [r3, #8]
 80027ea:	eba0 000a 	sub.w	r0, r0, sl
 80027ee:	44d1      	add	r9, sl
 80027f0:	6098      	str	r0, [r3, #8]
 80027f2:	2800      	cmp	r0, #0
 80027f4:	d0c3      	beq.n	800277e <__sfvwrite_r+0x62>
 80027f6:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80027fa:	b280      	uxth	r0, r0
 80027fc:	2e00      	cmp	r6, #0
 80027fe:	d1d6      	bne.n	80027ae <__sfvwrite_r+0x92>
 8002800:	e9d5 9600 	ldrd	r9, r6, [r5]
 8002804:	3508      	adds	r5, #8
 8002806:	e7d1      	b.n	80027ac <__sfvwrite_r+0x90>
 8002808:	e9d5 a600 	ldrd	sl, r6, [r5]
 800280c:	3508      	adds	r5, #8
 800280e:	e7a0      	b.n	8002752 <__sfvwrite_r+0x36>
 8002810:	4621      	mov	r1, r4
 8002812:	4640      	mov	r0, r8
 8002814:	f7ff fa80 	bl	8001d18 <_fflush_r>
 8002818:	b380      	cbz	r0, 800287c <__sfvwrite_r+0x160>
 800281a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800281e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002822:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002826:	81a3      	strh	r3, [r4, #12]
 8002828:	b003      	add	sp, #12
 800282a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800282e:	2000      	movs	r0, #0
 8002830:	4770      	bx	lr
 8002832:	461e      	mov	r6, r3
 8002834:	46aa      	mov	sl, r5
 8002836:	4699      	mov	r9, r3
 8002838:	4618      	mov	r0, r3
 800283a:	461d      	mov	r5, r3
 800283c:	9700      	str	r7, [sp, #0]
 800283e:	b356      	cbz	r6, 8002896 <__sfvwrite_r+0x17a>
 8002840:	b388      	cbz	r0, 80028a6 <__sfvwrite_r+0x18a>
 8002842:	464a      	mov	r2, r9
 8002844:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
 8002848:	6820      	ldr	r0, [r4, #0]
 800284a:	42b2      	cmp	r2, r6
 800284c:	bf28      	it	cs
 800284e:	4632      	movcs	r2, r6
 8002850:	4288      	cmp	r0, r1
 8002852:	d905      	bls.n	8002860 <__sfvwrite_r+0x144>
 8002854:	68a1      	ldr	r1, [r4, #8]
 8002856:	eb03 0b01 	add.w	fp, r3, r1
 800285a:	455a      	cmp	r2, fp
 800285c:	f300 80a6 	bgt.w	80029ac <__sfvwrite_r+0x290>
 8002860:	4293      	cmp	r3, r2
 8002862:	dc63      	bgt.n	800292c <__sfvwrite_r+0x210>
 8002864:	6a21      	ldr	r1, [r4, #32]
 8002866:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8002868:	462a      	mov	r2, r5
 800286a:	4640      	mov	r0, r8
 800286c:	47b8      	blx	r7
 800286e:	f1b0 0b00 	subs.w	fp, r0, #0
 8002872:	ddd2      	ble.n	800281a <__sfvwrite_r+0xfe>
 8002874:	ebb9 090b 	subs.w	r9, r9, fp
 8002878:	d0ca      	beq.n	8002810 <__sfvwrite_r+0xf4>
 800287a:	2001      	movs	r0, #1
 800287c:	9a00      	ldr	r2, [sp, #0]
 800287e:	6893      	ldr	r3, [r2, #8]
 8002880:	eba3 030b 	sub.w	r3, r3, fp
 8002884:	445d      	add	r5, fp
 8002886:	eba6 060b 	sub.w	r6, r6, fp
 800288a:	6093      	str	r3, [r2, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	f43f af76 	beq.w	800277e <__sfvwrite_r+0x62>
 8002892:	2e00      	cmp	r6, #0
 8002894:	d1d4      	bne.n	8002840 <__sfvwrite_r+0x124>
 8002896:	f10a 0308 	add.w	r3, sl, #8
 800289a:	e953 5602 	ldrd	r5, r6, [r3, #-8]
 800289e:	469a      	mov	sl, r3
 80028a0:	3308      	adds	r3, #8
 80028a2:	2e00      	cmp	r6, #0
 80028a4:	d0f9      	beq.n	800289a <__sfvwrite_r+0x17e>
 80028a6:	4632      	mov	r2, r6
 80028a8:	210a      	movs	r1, #10
 80028aa:	4628      	mov	r0, r5
 80028ac:	f000 f940 	bl	8002b30 <memchr>
 80028b0:	2800      	cmp	r0, #0
 80028b2:	f000 809c 	beq.w	80029ee <__sfvwrite_r+0x2d2>
 80028b6:	3001      	adds	r0, #1
 80028b8:	eba0 0905 	sub.w	r9, r0, r5
 80028bc:	e7c1      	b.n	8002842 <__sfvwrite_r+0x126>
 80028be:	6820      	ldr	r0, [r4, #0]
 80028c0:	6923      	ldr	r3, [r4, #16]
 80028c2:	4298      	cmp	r0, r3
 80028c4:	d816      	bhi.n	80028f4 <__sfvwrite_r+0x1d8>
 80028c6:	6963      	ldr	r3, [r4, #20]
 80028c8:	42b3      	cmp	r3, r6
 80028ca:	d813      	bhi.n	80028f4 <__sfvwrite_r+0x1d8>
 80028cc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80028d0:	42b2      	cmp	r2, r6
 80028d2:	bf28      	it	cs
 80028d4:	4632      	movcs	r2, r6
 80028d6:	6a21      	ldr	r1, [r4, #32]
 80028d8:	fb92 f2f3 	sdiv	r2, r2, r3
 80028dc:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80028de:	fb02 f303 	mul.w	r3, r2, r3
 80028e2:	4640      	mov	r0, r8
 80028e4:	464a      	mov	r2, r9
 80028e6:	47b8      	blx	r7
 80028e8:	f1b0 0a00 	subs.w	sl, r0, #0
 80028ec:	dd95      	ble.n	800281a <__sfvwrite_r+0xfe>
 80028ee:	eba6 060a 	sub.w	r6, r6, sl
 80028f2:	e778      	b.n	80027e6 <__sfvwrite_r+0xca>
 80028f4:	45b3      	cmp	fp, r6
 80028f6:	46da      	mov	sl, fp
 80028f8:	bf28      	it	cs
 80028fa:	46b2      	movcs	sl, r6
 80028fc:	4652      	mov	r2, sl
 80028fe:	4649      	mov	r1, r9
 8002900:	f000 f966 	bl	8002bd0 <memmove>
 8002904:	68a3      	ldr	r3, [r4, #8]
 8002906:	6822      	ldr	r2, [r4, #0]
 8002908:	eba3 030a 	sub.w	r3, r3, sl
 800290c:	4452      	add	r2, sl
 800290e:	60a3      	str	r3, [r4, #8]
 8002910:	6022      	str	r2, [r4, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1eb      	bne.n	80028ee <__sfvwrite_r+0x1d2>
 8002916:	4621      	mov	r1, r4
 8002918:	4640      	mov	r0, r8
 800291a:	f7ff f9fd 	bl	8001d18 <_fflush_r>
 800291e:	2800      	cmp	r0, #0
 8002920:	d0e5      	beq.n	80028ee <__sfvwrite_r+0x1d2>
 8002922:	e77a      	b.n	800281a <__sfvwrite_r+0xfe>
 8002924:	6820      	ldr	r0, [r4, #0]
 8002926:	46b3      	mov	fp, r6
 8002928:	4632      	mov	r2, r6
 800292a:	e74e      	b.n	80027ca <__sfvwrite_r+0xae>
 800292c:	4629      	mov	r1, r5
 800292e:	9201      	str	r2, [sp, #4]
 8002930:	f000 f94e 	bl	8002bd0 <memmove>
 8002934:	9a01      	ldr	r2, [sp, #4]
 8002936:	68a3      	ldr	r3, [r4, #8]
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	60a3      	str	r3, [r4, #8]
 800293c:	6823      	ldr	r3, [r4, #0]
 800293e:	4413      	add	r3, r2
 8002940:	6023      	str	r3, [r4, #0]
 8002942:	4693      	mov	fp, r2
 8002944:	e796      	b.n	8002874 <__sfvwrite_r+0x158>
 8002946:	6823      	ldr	r3, [r4, #0]
 8002948:	6921      	ldr	r1, [r4, #16]
 800294a:	eba3 0b01 	sub.w	fp, r3, r1
 800294e:	6963      	ldr	r3, [r4, #20]
 8002950:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 8002954:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 8002958:	f10b 0301 	add.w	r3, fp, #1
 800295c:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 8002960:	4433      	add	r3, r6
 8002962:	4553      	cmp	r3, sl
 8002964:	4652      	mov	r2, sl
 8002966:	bf84      	itt	hi
 8002968:	469a      	movhi	sl, r3
 800296a:	4652      	movhi	r2, sl
 800296c:	0543      	lsls	r3, r0, #21
 800296e:	d52c      	bpl.n	80029ca <__sfvwrite_r+0x2ae>
 8002970:	4611      	mov	r1, r2
 8002972:	4640      	mov	r0, r8
 8002974:	f7fe ffb0 	bl	80018d8 <_malloc_r>
 8002978:	2800      	cmp	r0, #0
 800297a:	d03b      	beq.n	80029f4 <__sfvwrite_r+0x2d8>
 800297c:	465a      	mov	r2, fp
 800297e:	6921      	ldr	r1, [r4, #16]
 8002980:	9001      	str	r0, [sp, #4]
 8002982:	f7fe fe5b 	bl	800163c <memcpy>
 8002986:	89a2      	ldrh	r2, [r4, #12]
 8002988:	9b01      	ldr	r3, [sp, #4]
 800298a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800298e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002992:	81a2      	strh	r2, [r4, #12]
 8002994:	eb03 000b 	add.w	r0, r3, fp
 8002998:	6123      	str	r3, [r4, #16]
 800299a:	ebaa 030b 	sub.w	r3, sl, fp
 800299e:	f8c4 a014 	str.w	sl, [r4, #20]
 80029a2:	60a3      	str	r3, [r4, #8]
 80029a4:	6020      	str	r0, [r4, #0]
 80029a6:	46b3      	mov	fp, r6
 80029a8:	4632      	mov	r2, r6
 80029aa:	e70e      	b.n	80027ca <__sfvwrite_r+0xae>
 80029ac:	4629      	mov	r1, r5
 80029ae:	465a      	mov	r2, fp
 80029b0:	f000 f90e 	bl	8002bd0 <memmove>
 80029b4:	6823      	ldr	r3, [r4, #0]
 80029b6:	445b      	add	r3, fp
 80029b8:	6023      	str	r3, [r4, #0]
 80029ba:	4621      	mov	r1, r4
 80029bc:	4640      	mov	r0, r8
 80029be:	f7ff f9ab 	bl	8001d18 <_fflush_r>
 80029c2:	2800      	cmp	r0, #0
 80029c4:	f43f af56 	beq.w	8002874 <__sfvwrite_r+0x158>
 80029c8:	e727      	b.n	800281a <__sfvwrite_r+0xfe>
 80029ca:	4640      	mov	r0, r8
 80029cc:	f000 f97c 	bl	8002cc8 <_realloc_r>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2800      	cmp	r0, #0
 80029d4:	d1de      	bne.n	8002994 <__sfvwrite_r+0x278>
 80029d6:	6921      	ldr	r1, [r4, #16]
 80029d8:	4640      	mov	r0, r8
 80029da:	f7fe ff1b 	bl	8001814 <_free_r>
 80029de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029e2:	220c      	movs	r2, #12
 80029e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029e8:	f8c8 2000 	str.w	r2, [r8]
 80029ec:	e717      	b.n	800281e <__sfvwrite_r+0x102>
 80029ee:	1c72      	adds	r2, r6, #1
 80029f0:	4691      	mov	r9, r2
 80029f2:	e727      	b.n	8002844 <__sfvwrite_r+0x128>
 80029f4:	220c      	movs	r2, #12
 80029f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029fa:	f8c8 2000 	str.w	r2, [r8]
 80029fe:	e70e      	b.n	800281e <__sfvwrite_r+0x102>
 8002a00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a04:	e6bc      	b.n	8002780 <__sfvwrite_r+0x64>
 8002a06:	bf00      	nop
 8002a08:	7ffffc00 	.word	0x7ffffc00

08002a0c <__smakebuf_r>:
 8002a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a0e:	898b      	ldrh	r3, [r1, #12]
 8002a10:	460c      	mov	r4, r1
 8002a12:	0799      	lsls	r1, r3, #30
 8002a14:	b097      	sub	sp, #92	; 0x5c
 8002a16:	d507      	bpl.n	8002a28 <__smakebuf_r+0x1c>
 8002a18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8002a22:	6023      	str	r3, [r4, #0]
 8002a24:	b017      	add	sp, #92	; 0x5c
 8002a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a2c:	2900      	cmp	r1, #0
 8002a2e:	4605      	mov	r5, r0
 8002a30:	db2d      	blt.n	8002a8e <__smakebuf_r+0x82>
 8002a32:	466a      	mov	r2, sp
 8002a34:	f000 f970 	bl	8002d18 <_fstat_r>
 8002a38:	2800      	cmp	r0, #0
 8002a3a:	db27      	blt.n	8002a8c <__smakebuf_r+0x80>
 8002a3c:	9e01      	ldr	r6, [sp, #4]
 8002a3e:	f406 4670 	and.w	r6, r6, #61440	; 0xf000
 8002a42:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8002a46:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
 8002a4a:	fab6 f686 	clz	r6, r6
 8002a4e:	4639      	mov	r1, r7
 8002a50:	4628      	mov	r0, r5
 8002a52:	0976      	lsrs	r6, r6, #5
 8002a54:	f7fe ff40 	bl	80018d8 <_malloc_r>
 8002a58:	b330      	cbz	r0, 8002aa8 <__smakebuf_r+0x9c>
 8002a5a:	89a3      	ldrh	r3, [r4, #12]
 8002a5c:	4a1a      	ldr	r2, [pc, #104]	; (8002ac8 <__smakebuf_r+0xbc>)
 8002a5e:	62aa      	str	r2, [r5, #40]	; 0x28
 8002a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a64:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002a68:	81a3      	strh	r3, [r4, #12]
 8002a6a:	6020      	str	r0, [r4, #0]
 8002a6c:	2e00      	cmp	r6, #0
 8002a6e:	d0d9      	beq.n	8002a24 <__smakebuf_r+0x18>
 8002a70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a74:	4628      	mov	r0, r5
 8002a76:	f000 f965 	bl	8002d44 <_isatty_r>
 8002a7a:	2800      	cmp	r0, #0
 8002a7c:	d0d2      	beq.n	8002a24 <__smakebuf_r+0x18>
 8002a7e:	89a3      	ldrh	r3, [r4, #12]
 8002a80:	f023 0303 	bic.w	r3, r3, #3
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	81a3      	strh	r3, [r4, #12]
 8002a8a:	e7cb      	b.n	8002a24 <__smakebuf_r+0x18>
 8002a8c:	89a3      	ldrh	r3, [r4, #12]
 8002a8e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002a92:	bf14      	ite	ne
 8002a94:	2740      	movne	r7, #64	; 0x40
 8002a96:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 8002a9a:	4639      	mov	r1, r7
 8002a9c:	4628      	mov	r0, r5
 8002a9e:	2600      	movs	r6, #0
 8002aa0:	f7fe ff1a 	bl	80018d8 <_malloc_r>
 8002aa4:	2800      	cmp	r0, #0
 8002aa6:	d1d8      	bne.n	8002a5a <__smakebuf_r+0x4e>
 8002aa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002aac:	059a      	lsls	r2, r3, #22
 8002aae:	d4b9      	bmi.n	8002a24 <__smakebuf_r+0x18>
 8002ab0:	f023 0303 	bic.w	r3, r3, #3
 8002ab4:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8002ab8:	f043 0302 	orr.w	r3, r3, #2
 8002abc:	2101      	movs	r1, #1
 8002abe:	e9c4 2104 	strd	r2, r1, [r4, #16]
 8002ac2:	81a3      	strh	r3, [r4, #12]
 8002ac4:	6022      	str	r2, [r4, #0]
 8002ac6:	e7ad      	b.n	8002a24 <__smakebuf_r+0x18>
 8002ac8:	08001339 	.word	0x08001339

08002acc <__swhatbuf_r>:
 8002acc:	b570      	push	{r4, r5, r6, lr}
 8002ace:	460c      	mov	r4, r1
 8002ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ad4:	2900      	cmp	r1, #0
 8002ad6:	b096      	sub	sp, #88	; 0x58
 8002ad8:	4616      	mov	r6, r2
 8002ada:	461d      	mov	r5, r3
 8002adc:	db13      	blt.n	8002b06 <__swhatbuf_r+0x3a>
 8002ade:	466a      	mov	r2, sp
 8002ae0:	f000 f91a 	bl	8002d18 <_fstat_r>
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	db0e      	blt.n	8002b06 <__swhatbuf_r+0x3a>
 8002ae8:	9901      	ldr	r1, [sp, #4]
 8002aea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002aee:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
 8002af2:	fab1 f181 	clz	r1, r1
 8002af6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002afa:	0949      	lsrs	r1, r1, #5
 8002afc:	2000      	movs	r0, #0
 8002afe:	6029      	str	r1, [r5, #0]
 8002b00:	6033      	str	r3, [r6, #0]
 8002b02:	b016      	add	sp, #88	; 0x58
 8002b04:	bd70      	pop	{r4, r5, r6, pc}
 8002b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	061b      	lsls	r3, r3, #24
 8002b0e:	602a      	str	r2, [r5, #0]
 8002b10:	d504      	bpl.n	8002b1c <__swhatbuf_r+0x50>
 8002b12:	2340      	movs	r3, #64	; 0x40
 8002b14:	2000      	movs	r0, #0
 8002b16:	6033      	str	r3, [r6, #0]
 8002b18:	b016      	add	sp, #88	; 0x58
 8002b1a:	bd70      	pop	{r4, r5, r6, pc}
 8002b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b20:	2000      	movs	r0, #0
 8002b22:	6033      	str	r3, [r6, #0]
 8002b24:	b016      	add	sp, #88	; 0x58
 8002b26:	bd70      	pop	{r4, r5, r6, pc}
	...

08002b30 <memchr>:
 8002b30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8002b34:	2a10      	cmp	r2, #16
 8002b36:	db2b      	blt.n	8002b90 <memchr+0x60>
 8002b38:	f010 0f07 	tst.w	r0, #7
 8002b3c:	d008      	beq.n	8002b50 <memchr+0x20>
 8002b3e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002b42:	3a01      	subs	r2, #1
 8002b44:	428b      	cmp	r3, r1
 8002b46:	d02d      	beq.n	8002ba4 <memchr+0x74>
 8002b48:	f010 0f07 	tst.w	r0, #7
 8002b4c:	b342      	cbz	r2, 8002ba0 <memchr+0x70>
 8002b4e:	d1f6      	bne.n	8002b3e <memchr+0xe>
 8002b50:	b4f0      	push	{r4, r5, r6, r7}
 8002b52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8002b56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8002b5a:	f022 0407 	bic.w	r4, r2, #7
 8002b5e:	f07f 0700 	mvns.w	r7, #0
 8002b62:	2300      	movs	r3, #0
 8002b64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8002b68:	3c08      	subs	r4, #8
 8002b6a:	ea85 0501 	eor.w	r5, r5, r1
 8002b6e:	ea86 0601 	eor.w	r6, r6, r1
 8002b72:	fa85 f547 	uadd8	r5, r5, r7
 8002b76:	faa3 f587 	sel	r5, r3, r7
 8002b7a:	fa86 f647 	uadd8	r6, r6, r7
 8002b7e:	faa5 f687 	sel	r6, r5, r7
 8002b82:	b98e      	cbnz	r6, 8002ba8 <memchr+0x78>
 8002b84:	d1ee      	bne.n	8002b64 <memchr+0x34>
 8002b86:	bcf0      	pop	{r4, r5, r6, r7}
 8002b88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8002b8c:	f002 0207 	and.w	r2, r2, #7
 8002b90:	b132      	cbz	r2, 8002ba0 <memchr+0x70>
 8002b92:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002b96:	3a01      	subs	r2, #1
 8002b98:	ea83 0301 	eor.w	r3, r3, r1
 8002b9c:	b113      	cbz	r3, 8002ba4 <memchr+0x74>
 8002b9e:	d1f8      	bne.n	8002b92 <memchr+0x62>
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	4770      	bx	lr
 8002ba4:	3801      	subs	r0, #1
 8002ba6:	4770      	bx	lr
 8002ba8:	2d00      	cmp	r5, #0
 8002baa:	bf06      	itte	eq
 8002bac:	4635      	moveq	r5, r6
 8002bae:	3803      	subeq	r0, #3
 8002bb0:	3807      	subne	r0, #7
 8002bb2:	f015 0f01 	tst.w	r5, #1
 8002bb6:	d107      	bne.n	8002bc8 <memchr+0x98>
 8002bb8:	3001      	adds	r0, #1
 8002bba:	f415 7f80 	tst.w	r5, #256	; 0x100
 8002bbe:	bf02      	ittt	eq
 8002bc0:	3001      	addeq	r0, #1
 8002bc2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8002bc6:	3001      	addeq	r0, #1
 8002bc8:	bcf0      	pop	{r4, r5, r6, r7}
 8002bca:	3801      	subs	r0, #1
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop

08002bd0 <memmove>:
 8002bd0:	4288      	cmp	r0, r1
 8002bd2:	d90d      	bls.n	8002bf0 <memmove+0x20>
 8002bd4:	188b      	adds	r3, r1, r2
 8002bd6:	4283      	cmp	r3, r0
 8002bd8:	d90a      	bls.n	8002bf0 <memmove+0x20>
 8002bda:	eb00 0c02 	add.w	ip, r0, r2
 8002bde:	b1ba      	cbz	r2, 8002c10 <memmove+0x40>
 8002be0:	4662      	mov	r2, ip
 8002be2:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 8002be6:	f802 cd01 	strb.w	ip, [r2, #-1]!
 8002bea:	4299      	cmp	r1, r3
 8002bec:	d1f9      	bne.n	8002be2 <memmove+0x12>
 8002bee:	4770      	bx	lr
 8002bf0:	2a0f      	cmp	r2, #15
 8002bf2:	d80e      	bhi.n	8002c12 <memmove+0x42>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8002bfa:	b14a      	cbz	r2, 8002c10 <memmove+0x40>
 8002bfc:	f10c 0c01 	add.w	ip, ip, #1
 8002c00:	3b01      	subs	r3, #1
 8002c02:	448c      	add	ip, r1
 8002c04:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c08:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002c0c:	4561      	cmp	r1, ip
 8002c0e:	d1f9      	bne.n	8002c04 <memmove+0x34>
 8002c10:	4770      	bx	lr
 8002c12:	ea40 0301 	orr.w	r3, r0, r1
 8002c16:	079b      	lsls	r3, r3, #30
 8002c18:	d150      	bne.n	8002cbc <memmove+0xec>
 8002c1a:	f1a2 0310 	sub.w	r3, r2, #16
 8002c1e:	b570      	push	{r4, r5, r6, lr}
 8002c20:	f101 0c20 	add.w	ip, r1, #32
 8002c24:	f023 050f 	bic.w	r5, r3, #15
 8002c28:	f101 0e10 	add.w	lr, r1, #16
 8002c2c:	f100 0410 	add.w	r4, r0, #16
 8002c30:	44ac      	add	ip, r5
 8002c32:	091b      	lsrs	r3, r3, #4
 8002c34:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 8002c38:	f844 5c10 	str.w	r5, [r4, #-16]
 8002c3c:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
 8002c40:	f844 5c0c 	str.w	r5, [r4, #-12]
 8002c44:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 8002c48:	f844 5c08 	str.w	r5, [r4, #-8]
 8002c4c:	f85e 5c04 	ldr.w	r5, [lr, #-4]
 8002c50:	f844 5c04 	str.w	r5, [r4, #-4]
 8002c54:	f10e 0e10 	add.w	lr, lr, #16
 8002c58:	45e6      	cmp	lr, ip
 8002c5a:	f104 0410 	add.w	r4, r4, #16
 8002c5e:	d1e9      	bne.n	8002c34 <memmove+0x64>
 8002c60:	3301      	adds	r3, #1
 8002c62:	f012 0f0c 	tst.w	r2, #12
 8002c66:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8002c6a:	f002 040f 	and.w	r4, r2, #15
 8002c6e:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8002c72:	d027      	beq.n	8002cc4 <memmove+0xf4>
 8002c74:	3c04      	subs	r4, #4
 8002c76:	f024 0603 	bic.w	r6, r4, #3
 8002c7a:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 8002c7e:	441e      	add	r6, r3
 8002c80:	1f1c      	subs	r4, r3, #4
 8002c82:	468e      	mov	lr, r1
 8002c84:	f85e 5b04 	ldr.w	r5, [lr], #4
 8002c88:	f844 5f04 	str.w	r5, [r4, #4]!
 8002c8c:	42b4      	cmp	r4, r6
 8002c8e:	d1f9      	bne.n	8002c84 <memmove+0xb4>
 8002c90:	f10c 0401 	add.w	r4, ip, #1
 8002c94:	f002 0203 	and.w	r2, r2, #3
 8002c98:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002c9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8002ca0:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8002ca4:	b14a      	cbz	r2, 8002cba <memmove+0xea>
 8002ca6:	f10c 0c01 	add.w	ip, ip, #1
 8002caa:	3b01      	subs	r3, #1
 8002cac:	448c      	add	ip, r1
 8002cae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002cb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002cb6:	4561      	cmp	r1, ip
 8002cb8:	d1f9      	bne.n	8002cae <memmove+0xde>
 8002cba:	bd70      	pop	{r4, r5, r6, pc}
 8002cbc:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	e79b      	b.n	8002bfc <memmove+0x2c>
 8002cc4:	4622      	mov	r2, r4
 8002cc6:	e7eb      	b.n	8002ca0 <memmove+0xd0>

08002cc8 <_realloc_r>:
 8002cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cca:	4614      	mov	r4, r2
 8002ccc:	b1f9      	cbz	r1, 8002d0e <_realloc_r+0x46>
 8002cce:	b1ca      	cbz	r2, 8002d04 <_realloc_r+0x3c>
 8002cd0:	4606      	mov	r6, r0
 8002cd2:	460d      	mov	r5, r1
 8002cd4:	f000 f848 	bl	8002d68 <_malloc_usable_size_r>
 8002cd8:	42a0      	cmp	r0, r4
 8002cda:	d302      	bcc.n	8002ce2 <_realloc_r+0x1a>
 8002cdc:	462f      	mov	r7, r5
 8002cde:	4638      	mov	r0, r7
 8002ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ce2:	4621      	mov	r1, r4
 8002ce4:	4630      	mov	r0, r6
 8002ce6:	f7fe fdf7 	bl	80018d8 <_malloc_r>
 8002cea:	4607      	mov	r7, r0
 8002cec:	2800      	cmp	r0, #0
 8002cee:	d0f6      	beq.n	8002cde <_realloc_r+0x16>
 8002cf0:	4622      	mov	r2, r4
 8002cf2:	4629      	mov	r1, r5
 8002cf4:	f7fe fca2 	bl	800163c <memcpy>
 8002cf8:	4630      	mov	r0, r6
 8002cfa:	4629      	mov	r1, r5
 8002cfc:	f7fe fd8a 	bl	8001814 <_free_r>
 8002d00:	4638      	mov	r0, r7
 8002d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d04:	4627      	mov	r7, r4
 8002d06:	f7fe fd85 	bl	8001814 <_free_r>
 8002d0a:	4638      	mov	r0, r7
 8002d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002d12:	4611      	mov	r1, r2
 8002d14:	f7fe bde0 	b.w	80018d8 <_malloc_r>

08002d18 <_fstat_r>:
 8002d18:	b570      	push	{r4, r5, r6, lr}
 8002d1a:	460c      	mov	r4, r1
 8002d1c:	4d08      	ldr	r5, [pc, #32]	; (8002d40 <_fstat_r+0x28>)
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2600      	movs	r6, #0
 8002d22:	4620      	mov	r0, r4
 8002d24:	4611      	mov	r1, r2
 8002d26:	461c      	mov	r4, r3
 8002d28:	602e      	str	r6, [r5, #0]
 8002d2a:	f7fe f959 	bl	8000fe0 <_fstat>
 8002d2e:	1c43      	adds	r3, r0, #1
 8002d30:	d000      	beq.n	8002d34 <_fstat_r+0x1c>
 8002d32:	bd70      	pop	{r4, r5, r6, pc}
 8002d34:	682b      	ldr	r3, [r5, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0fb      	beq.n	8002d32 <_fstat_r+0x1a>
 8002d3a:	6023      	str	r3, [r4, #0]
 8002d3c:	bd70      	pop	{r4, r5, r6, pc}
 8002d3e:	bf00      	nop
 8002d40:	2000025c 	.word	0x2000025c

08002d44 <_isatty_r>:
 8002d44:	b538      	push	{r3, r4, r5, lr}
 8002d46:	4d07      	ldr	r5, [pc, #28]	; (8002d64 <_isatty_r+0x20>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	4604      	mov	r4, r0
 8002d4c:	4608      	mov	r0, r1
 8002d4e:	602a      	str	r2, [r5, #0]
 8002d50:	f7fe f950 	bl	8000ff4 <_isatty>
 8002d54:	1c43      	adds	r3, r0, #1
 8002d56:	d000      	beq.n	8002d5a <_isatty_r+0x16>
 8002d58:	bd38      	pop	{r3, r4, r5, pc}
 8002d5a:	682b      	ldr	r3, [r5, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0fb      	beq.n	8002d58 <_isatty_r+0x14>
 8002d60:	6023      	str	r3, [r4, #0]
 8002d62:	bd38      	pop	{r3, r4, r5, pc}
 8002d64:	2000025c 	.word	0x2000025c

08002d68 <_malloc_usable_size_r>:
 8002d68:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002d6c:	2800      	cmp	r0, #0
 8002d6e:	f1a0 0004 	sub.w	r0, r0, #4
 8002d72:	bfbc      	itt	lt
 8002d74:	580b      	ldrlt	r3, [r1, r0]
 8002d76:	18c0      	addlt	r0, r0, r3
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop

08002d7c <__aeabi_uldivmod>:
 8002d7c:	b953      	cbnz	r3, 8002d94 <__aeabi_uldivmod+0x18>
 8002d7e:	b94a      	cbnz	r2, 8002d94 <__aeabi_uldivmod+0x18>
 8002d80:	2900      	cmp	r1, #0
 8002d82:	bf08      	it	eq
 8002d84:	2800      	cmpeq	r0, #0
 8002d86:	bf1c      	itt	ne
 8002d88:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8002d8c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8002d90:	f001 b8de 	b.w	8003f50 <__aeabi_idiv0>
 8002d94:	f1ad 0c08 	sub.w	ip, sp, #8
 8002d98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8002d9c:	f000 f806 	bl	8002dac <__udivmoddi4>
 8002da0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8002da4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002da8:	b004      	add	sp, #16
 8002daa:	4770      	bx	lr

08002dac <__udivmoddi4>:
 8002dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002db0:	9d08      	ldr	r5, [sp, #32]
 8002db2:	4604      	mov	r4, r0
 8002db4:	468e      	mov	lr, r1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d14d      	bne.n	8002e56 <__udivmoddi4+0xaa>
 8002dba:	428a      	cmp	r2, r1
 8002dbc:	4694      	mov	ip, r2
 8002dbe:	d969      	bls.n	8002e94 <__udivmoddi4+0xe8>
 8002dc0:	fab2 f282 	clz	r2, r2
 8002dc4:	b152      	cbz	r2, 8002ddc <__udivmoddi4+0x30>
 8002dc6:	fa01 f302 	lsl.w	r3, r1, r2
 8002dca:	f1c2 0120 	rsb	r1, r2, #32
 8002dce:	fa20 f101 	lsr.w	r1, r0, r1
 8002dd2:	fa0c fc02 	lsl.w	ip, ip, r2
 8002dd6:	ea41 0e03 	orr.w	lr, r1, r3
 8002dda:	4094      	lsls	r4, r2
 8002ddc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8002de0:	0c21      	lsrs	r1, r4, #16
 8002de2:	fbbe f6f8 	udiv	r6, lr, r8
 8002de6:	fa1f f78c 	uxth.w	r7, ip
 8002dea:	fb08 e316 	mls	r3, r8, r6, lr
 8002dee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8002df2:	fb06 f107 	mul.w	r1, r6, r7
 8002df6:	4299      	cmp	r1, r3
 8002df8:	d90a      	bls.n	8002e10 <__udivmoddi4+0x64>
 8002dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8002dfe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8002e02:	f080 811f 	bcs.w	8003044 <__udivmoddi4+0x298>
 8002e06:	4299      	cmp	r1, r3
 8002e08:	f240 811c 	bls.w	8003044 <__udivmoddi4+0x298>
 8002e0c:	3e02      	subs	r6, #2
 8002e0e:	4463      	add	r3, ip
 8002e10:	1a5b      	subs	r3, r3, r1
 8002e12:	b2a4      	uxth	r4, r4
 8002e14:	fbb3 f0f8 	udiv	r0, r3, r8
 8002e18:	fb08 3310 	mls	r3, r8, r0, r3
 8002e1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8002e20:	fb00 f707 	mul.w	r7, r0, r7
 8002e24:	42a7      	cmp	r7, r4
 8002e26:	d90a      	bls.n	8002e3e <__udivmoddi4+0x92>
 8002e28:	eb1c 0404 	adds.w	r4, ip, r4
 8002e2c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002e30:	f080 810a 	bcs.w	8003048 <__udivmoddi4+0x29c>
 8002e34:	42a7      	cmp	r7, r4
 8002e36:	f240 8107 	bls.w	8003048 <__udivmoddi4+0x29c>
 8002e3a:	4464      	add	r4, ip
 8002e3c:	3802      	subs	r0, #2
 8002e3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8002e42:	1be4      	subs	r4, r4, r7
 8002e44:	2600      	movs	r6, #0
 8002e46:	b11d      	cbz	r5, 8002e50 <__udivmoddi4+0xa4>
 8002e48:	40d4      	lsrs	r4, r2
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e9c5 4300 	strd	r4, r3, [r5]
 8002e50:	4631      	mov	r1, r6
 8002e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e56:	428b      	cmp	r3, r1
 8002e58:	d909      	bls.n	8002e6e <__udivmoddi4+0xc2>
 8002e5a:	2d00      	cmp	r5, #0
 8002e5c:	f000 80ef 	beq.w	800303e <__udivmoddi4+0x292>
 8002e60:	2600      	movs	r6, #0
 8002e62:	e9c5 0100 	strd	r0, r1, [r5]
 8002e66:	4630      	mov	r0, r6
 8002e68:	4631      	mov	r1, r6
 8002e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e6e:	fab3 f683 	clz	r6, r3
 8002e72:	2e00      	cmp	r6, #0
 8002e74:	d14a      	bne.n	8002f0c <__udivmoddi4+0x160>
 8002e76:	428b      	cmp	r3, r1
 8002e78:	d302      	bcc.n	8002e80 <__udivmoddi4+0xd4>
 8002e7a:	4282      	cmp	r2, r0
 8002e7c:	f200 80f9 	bhi.w	8003072 <__udivmoddi4+0x2c6>
 8002e80:	1a84      	subs	r4, r0, r2
 8002e82:	eb61 0303 	sbc.w	r3, r1, r3
 8002e86:	2001      	movs	r0, #1
 8002e88:	469e      	mov	lr, r3
 8002e8a:	2d00      	cmp	r5, #0
 8002e8c:	d0e0      	beq.n	8002e50 <__udivmoddi4+0xa4>
 8002e8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8002e92:	e7dd      	b.n	8002e50 <__udivmoddi4+0xa4>
 8002e94:	b902      	cbnz	r2, 8002e98 <__udivmoddi4+0xec>
 8002e96:	deff      	udf	#255	; 0xff
 8002e98:	fab2 f282 	clz	r2, r2
 8002e9c:	2a00      	cmp	r2, #0
 8002e9e:	f040 8092 	bne.w	8002fc6 <__udivmoddi4+0x21a>
 8002ea2:	eba1 010c 	sub.w	r1, r1, ip
 8002ea6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8002eaa:	fa1f fe8c 	uxth.w	lr, ip
 8002eae:	2601      	movs	r6, #1
 8002eb0:	0c20      	lsrs	r0, r4, #16
 8002eb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8002eb6:	fb07 1113 	mls	r1, r7, r3, r1
 8002eba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8002ebe:	fb0e f003 	mul.w	r0, lr, r3
 8002ec2:	4288      	cmp	r0, r1
 8002ec4:	d908      	bls.n	8002ed8 <__udivmoddi4+0x12c>
 8002ec6:	eb1c 0101 	adds.w	r1, ip, r1
 8002eca:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8002ece:	d202      	bcs.n	8002ed6 <__udivmoddi4+0x12a>
 8002ed0:	4288      	cmp	r0, r1
 8002ed2:	f200 80cb 	bhi.w	800306c <__udivmoddi4+0x2c0>
 8002ed6:	4643      	mov	r3, r8
 8002ed8:	1a09      	subs	r1, r1, r0
 8002eda:	b2a4      	uxth	r4, r4
 8002edc:	fbb1 f0f7 	udiv	r0, r1, r7
 8002ee0:	fb07 1110 	mls	r1, r7, r0, r1
 8002ee4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8002ee8:	fb0e fe00 	mul.w	lr, lr, r0
 8002eec:	45a6      	cmp	lr, r4
 8002eee:	d908      	bls.n	8002f02 <__udivmoddi4+0x156>
 8002ef0:	eb1c 0404 	adds.w	r4, ip, r4
 8002ef4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8002ef8:	d202      	bcs.n	8002f00 <__udivmoddi4+0x154>
 8002efa:	45a6      	cmp	lr, r4
 8002efc:	f200 80bb 	bhi.w	8003076 <__udivmoddi4+0x2ca>
 8002f00:	4608      	mov	r0, r1
 8002f02:	eba4 040e 	sub.w	r4, r4, lr
 8002f06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002f0a:	e79c      	b.n	8002e46 <__udivmoddi4+0x9a>
 8002f0c:	f1c6 0720 	rsb	r7, r6, #32
 8002f10:	40b3      	lsls	r3, r6
 8002f12:	fa22 fc07 	lsr.w	ip, r2, r7
 8002f16:	ea4c 0c03 	orr.w	ip, ip, r3
 8002f1a:	fa20 f407 	lsr.w	r4, r0, r7
 8002f1e:	fa01 f306 	lsl.w	r3, r1, r6
 8002f22:	431c      	orrs	r4, r3
 8002f24:	40f9      	lsrs	r1, r7
 8002f26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8002f2a:	fa00 f306 	lsl.w	r3, r0, r6
 8002f2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8002f32:	0c20      	lsrs	r0, r4, #16
 8002f34:	fa1f fe8c 	uxth.w	lr, ip
 8002f38:	fb09 1118 	mls	r1, r9, r8, r1
 8002f3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8002f40:	fb08 f00e 	mul.w	r0, r8, lr
 8002f44:	4288      	cmp	r0, r1
 8002f46:	fa02 f206 	lsl.w	r2, r2, r6
 8002f4a:	d90b      	bls.n	8002f64 <__udivmoddi4+0x1b8>
 8002f4c:	eb1c 0101 	adds.w	r1, ip, r1
 8002f50:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8002f54:	f080 8088 	bcs.w	8003068 <__udivmoddi4+0x2bc>
 8002f58:	4288      	cmp	r0, r1
 8002f5a:	f240 8085 	bls.w	8003068 <__udivmoddi4+0x2bc>
 8002f5e:	f1a8 0802 	sub.w	r8, r8, #2
 8002f62:	4461      	add	r1, ip
 8002f64:	1a09      	subs	r1, r1, r0
 8002f66:	b2a4      	uxth	r4, r4
 8002f68:	fbb1 f0f9 	udiv	r0, r1, r9
 8002f6c:	fb09 1110 	mls	r1, r9, r0, r1
 8002f70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8002f74:	fb00 fe0e 	mul.w	lr, r0, lr
 8002f78:	458e      	cmp	lr, r1
 8002f7a:	d908      	bls.n	8002f8e <__udivmoddi4+0x1e2>
 8002f7c:	eb1c 0101 	adds.w	r1, ip, r1
 8002f80:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8002f84:	d26c      	bcs.n	8003060 <__udivmoddi4+0x2b4>
 8002f86:	458e      	cmp	lr, r1
 8002f88:	d96a      	bls.n	8003060 <__udivmoddi4+0x2b4>
 8002f8a:	3802      	subs	r0, #2
 8002f8c:	4461      	add	r1, ip
 8002f8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8002f92:	fba0 9402 	umull	r9, r4, r0, r2
 8002f96:	eba1 010e 	sub.w	r1, r1, lr
 8002f9a:	42a1      	cmp	r1, r4
 8002f9c:	46c8      	mov	r8, r9
 8002f9e:	46a6      	mov	lr, r4
 8002fa0:	d356      	bcc.n	8003050 <__udivmoddi4+0x2a4>
 8002fa2:	d053      	beq.n	800304c <__udivmoddi4+0x2a0>
 8002fa4:	b15d      	cbz	r5, 8002fbe <__udivmoddi4+0x212>
 8002fa6:	ebb3 0208 	subs.w	r2, r3, r8
 8002faa:	eb61 010e 	sbc.w	r1, r1, lr
 8002fae:	fa01 f707 	lsl.w	r7, r1, r7
 8002fb2:	fa22 f306 	lsr.w	r3, r2, r6
 8002fb6:	40f1      	lsrs	r1, r6
 8002fb8:	431f      	orrs	r7, r3
 8002fba:	e9c5 7100 	strd	r7, r1, [r5]
 8002fbe:	2600      	movs	r6, #0
 8002fc0:	4631      	mov	r1, r6
 8002fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fc6:	f1c2 0320 	rsb	r3, r2, #32
 8002fca:	40d8      	lsrs	r0, r3
 8002fcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8002fd0:	fa21 f303 	lsr.w	r3, r1, r3
 8002fd4:	4091      	lsls	r1, r2
 8002fd6:	4301      	orrs	r1, r0
 8002fd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8002fdc:	fa1f fe8c 	uxth.w	lr, ip
 8002fe0:	fbb3 f0f7 	udiv	r0, r3, r7
 8002fe4:	fb07 3610 	mls	r6, r7, r0, r3
 8002fe8:	0c0b      	lsrs	r3, r1, #16
 8002fea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8002fee:	fb00 f60e 	mul.w	r6, r0, lr
 8002ff2:	429e      	cmp	r6, r3
 8002ff4:	fa04 f402 	lsl.w	r4, r4, r2
 8002ff8:	d908      	bls.n	800300c <__udivmoddi4+0x260>
 8002ffa:	eb1c 0303 	adds.w	r3, ip, r3
 8002ffe:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8003002:	d22f      	bcs.n	8003064 <__udivmoddi4+0x2b8>
 8003004:	429e      	cmp	r6, r3
 8003006:	d92d      	bls.n	8003064 <__udivmoddi4+0x2b8>
 8003008:	3802      	subs	r0, #2
 800300a:	4463      	add	r3, ip
 800300c:	1b9b      	subs	r3, r3, r6
 800300e:	b289      	uxth	r1, r1
 8003010:	fbb3 f6f7 	udiv	r6, r3, r7
 8003014:	fb07 3316 	mls	r3, r7, r6, r3
 8003018:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800301c:	fb06 f30e 	mul.w	r3, r6, lr
 8003020:	428b      	cmp	r3, r1
 8003022:	d908      	bls.n	8003036 <__udivmoddi4+0x28a>
 8003024:	eb1c 0101 	adds.w	r1, ip, r1
 8003028:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800302c:	d216      	bcs.n	800305c <__udivmoddi4+0x2b0>
 800302e:	428b      	cmp	r3, r1
 8003030:	d914      	bls.n	800305c <__udivmoddi4+0x2b0>
 8003032:	3e02      	subs	r6, #2
 8003034:	4461      	add	r1, ip
 8003036:	1ac9      	subs	r1, r1, r3
 8003038:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800303c:	e738      	b.n	8002eb0 <__udivmoddi4+0x104>
 800303e:	462e      	mov	r6, r5
 8003040:	4628      	mov	r0, r5
 8003042:	e705      	b.n	8002e50 <__udivmoddi4+0xa4>
 8003044:	4606      	mov	r6, r0
 8003046:	e6e3      	b.n	8002e10 <__udivmoddi4+0x64>
 8003048:	4618      	mov	r0, r3
 800304a:	e6f8      	b.n	8002e3e <__udivmoddi4+0x92>
 800304c:	454b      	cmp	r3, r9
 800304e:	d2a9      	bcs.n	8002fa4 <__udivmoddi4+0x1f8>
 8003050:	ebb9 0802 	subs.w	r8, r9, r2
 8003054:	eb64 0e0c 	sbc.w	lr, r4, ip
 8003058:	3801      	subs	r0, #1
 800305a:	e7a3      	b.n	8002fa4 <__udivmoddi4+0x1f8>
 800305c:	4646      	mov	r6, r8
 800305e:	e7ea      	b.n	8003036 <__udivmoddi4+0x28a>
 8003060:	4620      	mov	r0, r4
 8003062:	e794      	b.n	8002f8e <__udivmoddi4+0x1e2>
 8003064:	4640      	mov	r0, r8
 8003066:	e7d1      	b.n	800300c <__udivmoddi4+0x260>
 8003068:	46d0      	mov	r8, sl
 800306a:	e77b      	b.n	8002f64 <__udivmoddi4+0x1b8>
 800306c:	3b02      	subs	r3, #2
 800306e:	4461      	add	r1, ip
 8003070:	e732      	b.n	8002ed8 <__udivmoddi4+0x12c>
 8003072:	4630      	mov	r0, r6
 8003074:	e709      	b.n	8002e8a <__udivmoddi4+0xde>
 8003076:	4464      	add	r4, ip
 8003078:	3802      	subs	r0, #2
 800307a:	e742      	b.n	8002f02 <__udivmoddi4+0x156>

0800307c <selfrel_offset31>:
 800307c:	6803      	ldr	r3, [r0, #0]
 800307e:	005a      	lsls	r2, r3, #1
 8003080:	bf4c      	ite	mi
 8003082:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8003086:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800308a:	4418      	add	r0, r3
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop

08003090 <search_EIT_table>:
 8003090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003094:	b329      	cbz	r1, 80030e2 <search_EIT_table+0x52>
 8003096:	1e4f      	subs	r7, r1, #1
 8003098:	4604      	mov	r4, r0
 800309a:	4615      	mov	r5, r2
 800309c:	463e      	mov	r6, r7
 800309e:	f04f 0800 	mov.w	r8, #0
 80030a2:	eb08 0106 	add.w	r1, r8, r6
 80030a6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80030aa:	1049      	asrs	r1, r1, #1
 80030ac:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 80030b0:	4648      	mov	r0, r9
 80030b2:	f7ff ffe3 	bl	800307c <selfrel_offset31>
 80030b6:	4603      	mov	r3, r0
 80030b8:	00c8      	lsls	r0, r1, #3
 80030ba:	3008      	adds	r0, #8
 80030bc:	428f      	cmp	r7, r1
 80030be:	4420      	add	r0, r4
 80030c0:	d009      	beq.n	80030d6 <search_EIT_table+0x46>
 80030c2:	42ab      	cmp	r3, r5
 80030c4:	d809      	bhi.n	80030da <search_EIT_table+0x4a>
 80030c6:	f7ff ffd9 	bl	800307c <selfrel_offset31>
 80030ca:	3801      	subs	r0, #1
 80030cc:	42a8      	cmp	r0, r5
 80030ce:	d20a      	bcs.n	80030e6 <search_EIT_table+0x56>
 80030d0:	f101 0801 	add.w	r8, r1, #1
 80030d4:	e7e5      	b.n	80030a2 <search_EIT_table+0x12>
 80030d6:	42ab      	cmp	r3, r5
 80030d8:	d905      	bls.n	80030e6 <search_EIT_table+0x56>
 80030da:	4588      	cmp	r8, r1
 80030dc:	d001      	beq.n	80030e2 <search_EIT_table+0x52>
 80030de:	1e4e      	subs	r6, r1, #1
 80030e0:	e7df      	b.n	80030a2 <search_EIT_table+0x12>
 80030e2:	f04f 0900 	mov.w	r9, #0
 80030e6:	4648      	mov	r0, r9
 80030e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080030ec <__gnu_unwind_get_pr_addr>:
 80030ec:	2801      	cmp	r0, #1
 80030ee:	d007      	beq.n	8003100 <__gnu_unwind_get_pr_addr+0x14>
 80030f0:	2802      	cmp	r0, #2
 80030f2:	d007      	beq.n	8003104 <__gnu_unwind_get_pr_addr+0x18>
 80030f4:	4b04      	ldr	r3, [pc, #16]	; (8003108 <__gnu_unwind_get_pr_addr+0x1c>)
 80030f6:	2800      	cmp	r0, #0
 80030f8:	bf0c      	ite	eq
 80030fa:	4618      	moveq	r0, r3
 80030fc:	2000      	movne	r0, #0
 80030fe:	4770      	bx	lr
 8003100:	4802      	ldr	r0, [pc, #8]	; (800310c <__gnu_unwind_get_pr_addr+0x20>)
 8003102:	4770      	bx	lr
 8003104:	4802      	ldr	r0, [pc, #8]	; (8003110 <__gnu_unwind_get_pr_addr+0x24>)
 8003106:	4770      	bx	lr
 8003108:	080037c5 	.word	0x080037c5
 800310c:	080037c9 	.word	0x080037c9
 8003110:	080037cd 	.word	0x080037cd

08003114 <get_eit_entry>:
 8003114:	b530      	push	{r4, r5, lr}
 8003116:	4b23      	ldr	r3, [pc, #140]	; (80031a4 <get_eit_entry+0x90>)
 8003118:	b083      	sub	sp, #12
 800311a:	4604      	mov	r4, r0
 800311c:	1e8d      	subs	r5, r1, #2
 800311e:	b33b      	cbz	r3, 8003170 <get_eit_entry+0x5c>
 8003120:	a901      	add	r1, sp, #4
 8003122:	4628      	mov	r0, r5
 8003124:	f3af 8000 	nop.w
 8003128:	b1e8      	cbz	r0, 8003166 <get_eit_entry+0x52>
 800312a:	9901      	ldr	r1, [sp, #4]
 800312c:	462a      	mov	r2, r5
 800312e:	f7ff ffaf 	bl	8003090 <search_EIT_table>
 8003132:	4601      	mov	r1, r0
 8003134:	b1b8      	cbz	r0, 8003166 <get_eit_entry+0x52>
 8003136:	f7ff ffa1 	bl	800307c <selfrel_offset31>
 800313a:	684b      	ldr	r3, [r1, #4]
 800313c:	64a0      	str	r0, [r4, #72]	; 0x48
 800313e:	2b01      	cmp	r3, #1
 8003140:	d02c      	beq.n	800319c <get_eit_entry+0x88>
 8003142:	2b00      	cmp	r3, #0
 8003144:	f101 0004 	add.w	r0, r1, #4
 8003148:	db24      	blt.n	8003194 <get_eit_entry+0x80>
 800314a:	f7ff ff97 	bl	800307c <selfrel_offset31>
 800314e:	2300      	movs	r3, #0
 8003150:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8003154:	6803      	ldr	r3, [r0, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	db11      	blt.n	800317e <get_eit_entry+0x6a>
 800315a:	f7ff ff8f 	bl	800307c <selfrel_offset31>
 800315e:	6120      	str	r0, [r4, #16]
 8003160:	2000      	movs	r0, #0
 8003162:	b003      	add	sp, #12
 8003164:	bd30      	pop	{r4, r5, pc}
 8003166:	2300      	movs	r3, #0
 8003168:	2009      	movs	r0, #9
 800316a:	6123      	str	r3, [r4, #16]
 800316c:	b003      	add	sp, #12
 800316e:	bd30      	pop	{r4, r5, pc}
 8003170:	4b0d      	ldr	r3, [pc, #52]	; (80031a8 <get_eit_entry+0x94>)
 8003172:	490e      	ldr	r1, [pc, #56]	; (80031ac <get_eit_entry+0x98>)
 8003174:	1ac9      	subs	r1, r1, r3
 8003176:	10c9      	asrs	r1, r1, #3
 8003178:	4618      	mov	r0, r3
 800317a:	9101      	str	r1, [sp, #4]
 800317c:	e7d6      	b.n	800312c <get_eit_entry+0x18>
 800317e:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8003182:	f7ff ffb3 	bl	80030ec <__gnu_unwind_get_pr_addr>
 8003186:	2800      	cmp	r0, #0
 8003188:	6120      	str	r0, [r4, #16]
 800318a:	bf14      	ite	ne
 800318c:	2000      	movne	r0, #0
 800318e:	2009      	moveq	r0, #9
 8003190:	b003      	add	sp, #12
 8003192:	bd30      	pop	{r4, r5, pc}
 8003194:	2301      	movs	r3, #1
 8003196:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 800319a:	e7db      	b.n	8003154 <get_eit_entry+0x40>
 800319c:	2300      	movs	r3, #0
 800319e:	6123      	str	r3, [r4, #16]
 80031a0:	2005      	movs	r0, #5
 80031a2:	e7de      	b.n	8003162 <get_eit_entry+0x4e>
 80031a4:	00000000 	.word	0x00000000
 80031a8:	0800b878 	.word	0x0800b878
 80031ac:	0800b940 	.word	0x0800b940

080031b0 <restore_non_core_regs>:
 80031b0:	6803      	ldr	r3, [r0, #0]
 80031b2:	07da      	lsls	r2, r3, #31
 80031b4:	b510      	push	{r4, lr}
 80031b6:	4604      	mov	r4, r0
 80031b8:	d406      	bmi.n	80031c8 <restore_non_core_regs+0x18>
 80031ba:	079b      	lsls	r3, r3, #30
 80031bc:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80031c0:	d509      	bpl.n	80031d6 <restore_non_core_regs+0x26>
 80031c2:	f000 fc5b 	bl	8003a7c <__gnu_Unwind_Restore_VFP_D>
 80031c6:	6823      	ldr	r3, [r4, #0]
 80031c8:	0759      	lsls	r1, r3, #29
 80031ca:	d509      	bpl.n	80031e0 <restore_non_core_regs+0x30>
 80031cc:	071a      	lsls	r2, r3, #28
 80031ce:	d50e      	bpl.n	80031ee <restore_non_core_regs+0x3e>
 80031d0:	06db      	lsls	r3, r3, #27
 80031d2:	d513      	bpl.n	80031fc <restore_non_core_regs+0x4c>
 80031d4:	bd10      	pop	{r4, pc}
 80031d6:	f000 fc49 	bl	8003a6c <__gnu_Unwind_Restore_VFP>
 80031da:	6823      	ldr	r3, [r4, #0]
 80031dc:	0759      	lsls	r1, r3, #29
 80031de:	d4f5      	bmi.n	80031cc <restore_non_core_regs+0x1c>
 80031e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80031e4:	f000 fc52 	bl	8003a8c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80031e8:	6823      	ldr	r3, [r4, #0]
 80031ea:	071a      	lsls	r2, r3, #28
 80031ec:	d4f0      	bmi.n	80031d0 <restore_non_core_regs+0x20>
 80031ee:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80031f2:	f000 fc53 	bl	8003a9c <__gnu_Unwind_Restore_WMMXD>
 80031f6:	6823      	ldr	r3, [r4, #0]
 80031f8:	06db      	lsls	r3, r3, #27
 80031fa:	d4eb      	bmi.n	80031d4 <restore_non_core_regs+0x24>
 80031fc:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8003200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003204:	f000 bc8e 	b.w	8003b24 <__gnu_Unwind_Restore_WMMXC>

08003208 <__gnu_unwind_24bit.constprop.0>:
 8003208:	2009      	movs	r0, #9
 800320a:	4770      	bx	lr

0800320c <_Unwind_decode_typeinfo_ptr.constprop.0>:
 800320c:	4603      	mov	r3, r0
 800320e:	6800      	ldr	r0, [r0, #0]
 8003210:	b100      	cbz	r0, 8003214 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 8003212:	4418      	add	r0, r3
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop

08003218 <_Unwind_DebugHook>:
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop

0800321c <unwind_phase2>:
 800321c:	b570      	push	{r4, r5, r6, lr}
 800321e:	4604      	mov	r4, r0
 8003220:	460e      	mov	r6, r1
 8003222:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8003224:	4620      	mov	r0, r4
 8003226:	f7ff ff75 	bl	8003114 <get_eit_entry>
 800322a:	4605      	mov	r5, r0
 800322c:	b988      	cbnz	r0, 8003252 <unwind_phase2+0x36>
 800322e:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8003230:	6162      	str	r2, [r4, #20]
 8003232:	6923      	ldr	r3, [r4, #16]
 8003234:	4632      	mov	r2, r6
 8003236:	4621      	mov	r1, r4
 8003238:	2001      	movs	r0, #1
 800323a:	4798      	blx	r3
 800323c:	2808      	cmp	r0, #8
 800323e:	d0f0      	beq.n	8003222 <unwind_phase2+0x6>
 8003240:	2807      	cmp	r0, #7
 8003242:	d106      	bne.n	8003252 <unwind_phase2+0x36>
 8003244:	4628      	mov	r0, r5
 8003246:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8003248:	f7ff ffe6 	bl	8003218 <_Unwind_DebugHook>
 800324c:	1d30      	adds	r0, r6, #4
 800324e:	f000 fc01 	bl	8003a54 <__restore_core_regs>
 8003252:	f000 fe7f 	bl	8003f54 <abort>
 8003256:	bf00      	nop

08003258 <unwind_phase2_forced>:
 8003258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800325c:	1d0d      	adds	r5, r1, #4
 800325e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8003262:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8003266:	4607      	mov	r7, r0
 8003268:	4614      	mov	r4, r2
 800326a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800326c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8003270:	f10d 0c0c 	add.w	ip, sp, #12
 8003274:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800327a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800327e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003280:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003284:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003288:	ae02      	add	r6, sp, #8
 800328a:	f04f 0e00 	mov.w	lr, #0
 800328e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8003292:	f8c6 e000 	str.w	lr, [r6]
 8003296:	e020      	b.n	80032da <unwind_phase2_forced+0x82>
 8003298:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80032a0:	4631      	mov	r1, r6
 80032a2:	a87a      	add	r0, sp, #488	; 0x1e8
 80032a4:	f7fe f9ca 	bl	800163c <memcpy>
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	aa7a      	add	r2, sp, #488	; 0x1e8
 80032ac:	4639      	mov	r1, r7
 80032ae:	4650      	mov	r0, sl
 80032b0:	4798      	blx	r3
 80032b2:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80032b4:	6473      	str	r3, [r6, #68]	; 0x44
 80032b6:	4621      	mov	r1, r4
 80032b8:	e9cd 6900 	strd	r6, r9, [sp]
 80032bc:	4605      	mov	r5, r0
 80032be:	463b      	mov	r3, r7
 80032c0:	463a      	mov	r2, r7
 80032c2:	2001      	movs	r0, #1
 80032c4:	47c0      	blx	r8
 80032c6:	4604      	mov	r4, r0
 80032c8:	b9e0      	cbnz	r0, 8003304 <unwind_phase2_forced+0xac>
 80032ca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80032ce:	a97a      	add	r1, sp, #488	; 0x1e8
 80032d0:	4630      	mov	r0, r6
 80032d2:	f7fe f9b3 	bl	800163c <memcpy>
 80032d6:	2d08      	cmp	r5, #8
 80032d8:	d11a      	bne.n	8003310 <unwind_phase2_forced+0xb8>
 80032da:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80032dc:	4638      	mov	r0, r7
 80032de:	f7ff ff19 	bl	8003114 <get_eit_entry>
 80032e2:	3409      	adds	r4, #9
 80032e4:	fa5f fa84 	uxtb.w	sl, r4
 80032e8:	4605      	mov	r5, r0
 80032ea:	2800      	cmp	r0, #0
 80032ec:	d0d4      	beq.n	8003298 <unwind_phase2_forced+0x40>
 80032ee:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80032f0:	6473      	str	r3, [r6, #68]	; 0x44
 80032f2:	463a      	mov	r2, r7
 80032f4:	e9cd 6900 	strd	r6, r9, [sp]
 80032f8:	463b      	mov	r3, r7
 80032fa:	f04a 0110 	orr.w	r1, sl, #16
 80032fe:	2001      	movs	r0, #1
 8003300:	47c0      	blx	r8
 8003302:	b100      	cbz	r0, 8003306 <unwind_phase2_forced+0xae>
 8003304:	2509      	movs	r5, #9
 8003306:	4628      	mov	r0, r5
 8003308:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800330c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003310:	2d07      	cmp	r5, #7
 8003312:	d1f7      	bne.n	8003304 <unwind_phase2_forced+0xac>
 8003314:	4620      	mov	r0, r4
 8003316:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8003318:	f7ff ff7e 	bl	8003218 <_Unwind_DebugHook>
 800331c:	a803      	add	r0, sp, #12
 800331e:	f000 fb99 	bl	8003a54 <__restore_core_regs>
 8003322:	bf00      	nop

08003324 <_Unwind_GetCFA>:
 8003324:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8003326:	4770      	bx	lr

08003328 <__gnu_Unwind_RaiseException>:
 8003328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800332a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800332c:	640b      	str	r3, [r1, #64]	; 0x40
 800332e:	f101 0c04 	add.w	ip, r1, #4
 8003332:	460e      	mov	r6, r1
 8003334:	4605      	mov	r5, r0
 8003336:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800333a:	b0f9      	sub	sp, #484	; 0x1e4
 800333c:	ac01      	add	r4, sp, #4
 800333e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003340:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003344:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003346:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800334a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800334c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8003350:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003354:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003358:	9700      	str	r7, [sp, #0]
 800335a:	e006      	b.n	800336a <__gnu_Unwind_RaiseException+0x42>
 800335c:	692b      	ldr	r3, [r5, #16]
 800335e:	466a      	mov	r2, sp
 8003360:	4629      	mov	r1, r5
 8003362:	4798      	blx	r3
 8003364:	2808      	cmp	r0, #8
 8003366:	4604      	mov	r4, r0
 8003368:	d108      	bne.n	800337c <__gnu_Unwind_RaiseException+0x54>
 800336a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800336c:	4628      	mov	r0, r5
 800336e:	f7ff fed1 	bl	8003114 <get_eit_entry>
 8003372:	2800      	cmp	r0, #0
 8003374:	d0f2      	beq.n	800335c <__gnu_Unwind_RaiseException+0x34>
 8003376:	2009      	movs	r0, #9
 8003378:	b079      	add	sp, #484	; 0x1e4
 800337a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800337c:	4668      	mov	r0, sp
 800337e:	f7ff ff17 	bl	80031b0 <restore_non_core_regs>
 8003382:	2c06      	cmp	r4, #6
 8003384:	d1f7      	bne.n	8003376 <__gnu_Unwind_RaiseException+0x4e>
 8003386:	4631      	mov	r1, r6
 8003388:	4628      	mov	r0, r5
 800338a:	f7ff ff47 	bl	800321c <unwind_phase2>
 800338e:	bf00      	nop

08003390 <__gnu_Unwind_ForcedUnwind>:
 8003390:	60c1      	str	r1, [r0, #12]
 8003392:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003394:	6182      	str	r2, [r0, #24]
 8003396:	6419      	str	r1, [r3, #64]	; 0x40
 8003398:	2200      	movs	r2, #0
 800339a:	4619      	mov	r1, r3
 800339c:	e75c      	b.n	8003258 <unwind_phase2_forced>
 800339e:	bf00      	nop

080033a0 <__gnu_Unwind_Resume>:
 80033a0:	b570      	push	{r4, r5, r6, lr}
 80033a2:	68c6      	ldr	r6, [r0, #12]
 80033a4:	6943      	ldr	r3, [r0, #20]
 80033a6:	640b      	str	r3, [r1, #64]	; 0x40
 80033a8:	b9ae      	cbnz	r6, 80033d6 <__gnu_Unwind_Resume+0x36>
 80033aa:	6903      	ldr	r3, [r0, #16]
 80033ac:	460a      	mov	r2, r1
 80033ae:	4604      	mov	r4, r0
 80033b0:	460d      	mov	r5, r1
 80033b2:	4601      	mov	r1, r0
 80033b4:	2002      	movs	r0, #2
 80033b6:	4798      	blx	r3
 80033b8:	2807      	cmp	r0, #7
 80033ba:	d005      	beq.n	80033c8 <__gnu_Unwind_Resume+0x28>
 80033bc:	2808      	cmp	r0, #8
 80033be:	d10f      	bne.n	80033e0 <__gnu_Unwind_Resume+0x40>
 80033c0:	4629      	mov	r1, r5
 80033c2:	4620      	mov	r0, r4
 80033c4:	f7ff ff2a 	bl	800321c <unwind_phase2>
 80033c8:	4630      	mov	r0, r6
 80033ca:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80033cc:	f7ff ff24 	bl	8003218 <_Unwind_DebugHook>
 80033d0:	1d28      	adds	r0, r5, #4
 80033d2:	f000 fb3f 	bl	8003a54 <__restore_core_regs>
 80033d6:	2201      	movs	r2, #1
 80033d8:	f7ff ff3e 	bl	8003258 <unwind_phase2_forced>
 80033dc:	f000 fdba 	bl	8003f54 <abort>
 80033e0:	f000 fdb8 	bl	8003f54 <abort>

080033e4 <__gnu_Unwind_Resume_or_Rethrow>:
 80033e4:	68c2      	ldr	r2, [r0, #12]
 80033e6:	b11a      	cbz	r2, 80033f0 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 80033e8:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80033ea:	640a      	str	r2, [r1, #64]	; 0x40
 80033ec:	2200      	movs	r2, #0
 80033ee:	e733      	b.n	8003258 <unwind_phase2_forced>
 80033f0:	e79a      	b.n	8003328 <__gnu_Unwind_RaiseException>
 80033f2:	bf00      	nop

080033f4 <_Unwind_Complete>:
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop

080033f8 <_Unwind_DeleteException>:
 80033f8:	6883      	ldr	r3, [r0, #8]
 80033fa:	4601      	mov	r1, r0
 80033fc:	b10b      	cbz	r3, 8003402 <_Unwind_DeleteException+0xa>
 80033fe:	2001      	movs	r0, #1
 8003400:	4718      	bx	r3
 8003402:	4770      	bx	lr

08003404 <_Unwind_VRS_Get>:
 8003404:	2901      	cmp	r1, #1
 8003406:	d012      	beq.n	800342e <_Unwind_VRS_Get+0x2a>
 8003408:	d809      	bhi.n	800341e <_Unwind_VRS_Get+0x1a>
 800340a:	b973      	cbnz	r3, 800342a <_Unwind_VRS_Get+0x26>
 800340c:	2a0f      	cmp	r2, #15
 800340e:	d80c      	bhi.n	800342a <_Unwind_VRS_Get+0x26>
 8003410:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003414:	4618      	mov	r0, r3
 8003416:	6853      	ldr	r3, [r2, #4]
 8003418:	9a00      	ldr	r2, [sp, #0]
 800341a:	6013      	str	r3, [r2, #0]
 800341c:	4770      	bx	lr
 800341e:	3903      	subs	r1, #3
 8003420:	2901      	cmp	r1, #1
 8003422:	bf94      	ite	ls
 8003424:	2001      	movls	r0, #1
 8003426:	2002      	movhi	r0, #2
 8003428:	4770      	bx	lr
 800342a:	2002      	movs	r0, #2
 800342c:	4770      	bx	lr
 800342e:	4608      	mov	r0, r1
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop

08003434 <_Unwind_GetGR>:
 8003434:	b500      	push	{lr}
 8003436:	b085      	sub	sp, #20
 8003438:	460a      	mov	r2, r1
 800343a:	2300      	movs	r3, #0
 800343c:	a903      	add	r1, sp, #12
 800343e:	9100      	str	r1, [sp, #0]
 8003440:	4619      	mov	r1, r3
 8003442:	f7ff ffdf 	bl	8003404 <_Unwind_VRS_Get>
 8003446:	9803      	ldr	r0, [sp, #12]
 8003448:	b005      	add	sp, #20
 800344a:	f85d fb04 	ldr.w	pc, [sp], #4
 800344e:	bf00      	nop

08003450 <_Unwind_VRS_Set>:
 8003450:	2901      	cmp	r1, #1
 8003452:	d012      	beq.n	800347a <_Unwind_VRS_Set+0x2a>
 8003454:	d809      	bhi.n	800346a <_Unwind_VRS_Set+0x1a>
 8003456:	b973      	cbnz	r3, 8003476 <_Unwind_VRS_Set+0x26>
 8003458:	2a0f      	cmp	r2, #15
 800345a:	d80c      	bhi.n	8003476 <_Unwind_VRS_Set+0x26>
 800345c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003460:	9a00      	ldr	r2, [sp, #0]
 8003462:	6812      	ldr	r2, [r2, #0]
 8003464:	6042      	str	r2, [r0, #4]
 8003466:	4618      	mov	r0, r3
 8003468:	4770      	bx	lr
 800346a:	3903      	subs	r1, #3
 800346c:	2901      	cmp	r1, #1
 800346e:	bf94      	ite	ls
 8003470:	2001      	movls	r0, #1
 8003472:	2002      	movhi	r0, #2
 8003474:	4770      	bx	lr
 8003476:	2002      	movs	r0, #2
 8003478:	4770      	bx	lr
 800347a:	4608      	mov	r0, r1
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop

08003480 <_Unwind_SetGR>:
 8003480:	b510      	push	{r4, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	2300      	movs	r3, #0
 8003486:	ac03      	add	r4, sp, #12
 8003488:	9203      	str	r2, [sp, #12]
 800348a:	9400      	str	r4, [sp, #0]
 800348c:	460a      	mov	r2, r1
 800348e:	4619      	mov	r1, r3
 8003490:	f7ff ffde 	bl	8003450 <_Unwind_VRS_Set>
 8003494:	b004      	add	sp, #16
 8003496:	bd10      	pop	{r4, pc}

08003498 <__gnu_Unwind_Backtrace>:
 8003498:	b570      	push	{r4, r5, r6, lr}
 800349a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800349c:	6413      	str	r3, [r2, #64]	; 0x40
 800349e:	f102 0c04 	add.w	ip, r2, #4
 80034a2:	4605      	mov	r5, r0
 80034a4:	460c      	mov	r4, r1
 80034a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80034aa:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 80034ae:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 80034b2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80034b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80034ba:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80034be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80034c2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80034c6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80034ca:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80034ce:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80034d2:	9616      	str	r6, [sp, #88]	; 0x58
 80034d4:	e010      	b.n	80034f8 <__gnu_Unwind_Backtrace+0x60>
 80034d6:	f7ff ffd3 	bl	8003480 <_Unwind_SetGR>
 80034da:	4621      	mov	r1, r4
 80034dc:	a816      	add	r0, sp, #88	; 0x58
 80034de:	47a8      	blx	r5
 80034e0:	4603      	mov	r3, r0
 80034e2:	aa16      	add	r2, sp, #88	; 0x58
 80034e4:	4669      	mov	r1, sp
 80034e6:	2008      	movs	r0, #8
 80034e8:	b983      	cbnz	r3, 800350c <__gnu_Unwind_Backtrace+0x74>
 80034ea:	9b04      	ldr	r3, [sp, #16]
 80034ec:	4798      	blx	r3
 80034ee:	2805      	cmp	r0, #5
 80034f0:	4606      	mov	r6, r0
 80034f2:	d00c      	beq.n	800350e <__gnu_Unwind_Backtrace+0x76>
 80034f4:	2809      	cmp	r0, #9
 80034f6:	d009      	beq.n	800350c <__gnu_Unwind_Backtrace+0x74>
 80034f8:	9926      	ldr	r1, [sp, #152]	; 0x98
 80034fa:	4668      	mov	r0, sp
 80034fc:	f7ff fe0a 	bl	8003114 <get_eit_entry>
 8003500:	4603      	mov	r3, r0
 8003502:	466a      	mov	r2, sp
 8003504:	210c      	movs	r1, #12
 8003506:	a816      	add	r0, sp, #88	; 0x58
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0e4      	beq.n	80034d6 <__gnu_Unwind_Backtrace+0x3e>
 800350c:	2609      	movs	r6, #9
 800350e:	a816      	add	r0, sp, #88	; 0x58
 8003510:	f7ff fe4e 	bl	80031b0 <restore_non_core_regs>
 8003514:	4630      	mov	r0, r6
 8003516:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 800351a:	bd70      	pop	{r4, r5, r6, pc}

0800351c <__gnu_unwind_pr_common>:
 800351c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003520:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8003522:	b089      	sub	sp, #36	; 0x24
 8003524:	461e      	mov	r6, r3
 8003526:	f854 3b04 	ldr.w	r3, [r4], #4
 800352a:	9406      	str	r4, [sp, #24]
 800352c:	460d      	mov	r5, r1
 800352e:	4617      	mov	r7, r2
 8003530:	f000 0803 	and.w	r8, r0, #3
 8003534:	2e00      	cmp	r6, #0
 8003536:	d079      	beq.n	800362c <__gnu_unwind_pr_common+0x110>
 8003538:	0c1a      	lsrs	r2, r3, #16
 800353a:	041b      	lsls	r3, r3, #16
 800353c:	9305      	str	r3, [sp, #20]
 800353e:	f88d 201d 	strb.w	r2, [sp, #29]
 8003542:	2302      	movs	r3, #2
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800354a:	f88d 301c 	strb.w	r3, [sp, #28]
 800354e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8003550:	f1b8 0f02 	cmp.w	r8, #2
 8003554:	bf08      	it	eq
 8003556:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8003558:	f013 0301 	ands.w	r3, r3, #1
 800355c:	d00c      	beq.n	8003578 <__gnu_unwind_pr_common+0x5c>
 800355e:	a905      	add	r1, sp, #20
 8003560:	4638      	mov	r0, r7
 8003562:	f000 fb79 	bl	8003c58 <__gnu_unwind_execute>
 8003566:	b918      	cbnz	r0, 8003570 <__gnu_unwind_pr_common+0x54>
 8003568:	2008      	movs	r0, #8
 800356a:	b009      	add	sp, #36	; 0x24
 800356c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003570:	2009      	movs	r0, #9
 8003572:	b009      	add	sp, #36	; 0x24
 8003574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003578:	f8d4 a000 	ldr.w	sl, [r4]
 800357c:	f1ba 0f00 	cmp.w	sl, #0
 8003580:	d0ed      	beq.n	800355e <__gnu_unwind_pr_common+0x42>
 8003582:	9301      	str	r3, [sp, #4]
 8003584:	f000 0308 	and.w	r3, r0, #8
 8003588:	9302      	str	r3, [sp, #8]
 800358a:	2e02      	cmp	r6, #2
 800358c:	d04a      	beq.n	8003624 <__gnu_unwind_pr_common+0x108>
 800358e:	f8b4 a000 	ldrh.w	sl, [r4]
 8003592:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8003596:	3404      	adds	r4, #4
 8003598:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800359a:	f029 0b01 	bic.w	fp, r9, #1
 800359e:	210f      	movs	r1, #15
 80035a0:	4638      	mov	r0, r7
 80035a2:	449b      	add	fp, r3
 80035a4:	f7ff ff46 	bl	8003434 <_Unwind_GetGR>
 80035a8:	4583      	cmp	fp, r0
 80035aa:	d839      	bhi.n	8003620 <__gnu_unwind_pr_common+0x104>
 80035ac:	f02a 0301 	bic.w	r3, sl, #1
 80035b0:	449b      	add	fp, r3
 80035b2:	4583      	cmp	fp, r0
 80035b4:	bf94      	ite	ls
 80035b6:	2000      	movls	r0, #0
 80035b8:	2001      	movhi	r0, #1
 80035ba:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	f00a 0a01 	and.w	sl, sl, #1
 80035c6:	ea43 030a 	orr.w	r3, r3, sl
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d049      	beq.n	8003662 <__gnu_unwind_pr_common+0x146>
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d032      	beq.n	8003638 <__gnu_unwind_pr_common+0x11c>
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1cc      	bne.n	8003570 <__gnu_unwind_pr_common+0x54>
 80035d6:	f1b8 0f00 	cmp.w	r8, #0
 80035da:	d002      	beq.n	80035e2 <__gnu_unwind_pr_common+0xc6>
 80035dc:	2800      	cmp	r0, #0
 80035de:	f040 80cd 	bne.w	800377c <__gnu_unwind_pr_common+0x260>
 80035e2:	3404      	adds	r4, #4
 80035e4:	f8d4 a000 	ldr.w	sl, [r4]
 80035e8:	f1ba 0f00 	cmp.w	sl, #0
 80035ec:	d1cd      	bne.n	800358a <__gnu_unwind_pr_common+0x6e>
 80035ee:	a905      	add	r1, sp, #20
 80035f0:	4638      	mov	r0, r7
 80035f2:	f000 fb31 	bl	8003c58 <__gnu_unwind_execute>
 80035f6:	2800      	cmp	r0, #0
 80035f8:	d1ba      	bne.n	8003570 <__gnu_unwind_pr_common+0x54>
 80035fa:	9b01      	ldr	r3, [sp, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0b3      	beq.n	8003568 <__gnu_unwind_pr_common+0x4c>
 8003600:	210f      	movs	r1, #15
 8003602:	4638      	mov	r0, r7
 8003604:	f7ff ff16 	bl	8003434 <_Unwind_GetGR>
 8003608:	210e      	movs	r1, #14
 800360a:	4602      	mov	r2, r0
 800360c:	4638      	mov	r0, r7
 800360e:	f7ff ff37 	bl	8003480 <_Unwind_SetGR>
 8003612:	4638      	mov	r0, r7
 8003614:	4a6a      	ldr	r2, [pc, #424]	; (80037c0 <__gnu_unwind_pr_common+0x2a4>)
 8003616:	210f      	movs	r1, #15
 8003618:	f7ff ff32 	bl	8003480 <_Unwind_SetGR>
 800361c:	2007      	movs	r0, #7
 800361e:	e7a8      	b.n	8003572 <__gnu_unwind_pr_common+0x56>
 8003620:	2000      	movs	r0, #0
 8003622:	e7ca      	b.n	80035ba <__gnu_unwind_pr_common+0x9e>
 8003624:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8003628:	3408      	adds	r4, #8
 800362a:	e7b5      	b.n	8003598 <__gnu_unwind_pr_common+0x7c>
 800362c:	021b      	lsls	r3, r3, #8
 800362e:	9305      	str	r3, [sp, #20]
 8003630:	2303      	movs	r3, #3
 8003632:	f8ad 301c 	strh.w	r3, [sp, #28]
 8003636:	e78a      	b.n	800354e <__gnu_unwind_pr_common+0x32>
 8003638:	6823      	ldr	r3, [r4, #0]
 800363a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800363e:	f1b8 0f00 	cmp.w	r8, #0
 8003642:	d145      	bne.n	80036d0 <__gnu_unwind_pr_common+0x1b4>
 8003644:	b128      	cbz	r0, 8003652 <__gnu_unwind_pr_common+0x136>
 8003646:	9a02      	ldr	r2, [sp, #8]
 8003648:	2a00      	cmp	r2, #0
 800364a:	d05c      	beq.n	8003706 <__gnu_unwind_pr_common+0x1ea>
 800364c:	f1bb 0f00 	cmp.w	fp, #0
 8003650:	d074      	beq.n	800373c <__gnu_unwind_pr_common+0x220>
 8003652:	2b00      	cmp	r3, #0
 8003654:	da00      	bge.n	8003658 <__gnu_unwind_pr_common+0x13c>
 8003656:	3404      	adds	r4, #4
 8003658:	f10b 0b01 	add.w	fp, fp, #1
 800365c:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8003660:	e7c0      	b.n	80035e4 <__gnu_unwind_pr_common+0xc8>
 8003662:	f1b8 0f00 	cmp.w	r8, #0
 8003666:	d119      	bne.n	800369c <__gnu_unwind_pr_common+0x180>
 8003668:	b1b0      	cbz	r0, 8003698 <__gnu_unwind_pr_common+0x17c>
 800366a:	6863      	ldr	r3, [r4, #4]
 800366c:	6822      	ldr	r2, [r4, #0]
 800366e:	1c99      	adds	r1, r3, #2
 8003670:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8003674:	f43f af7c 	beq.w	8003570 <__gnu_unwind_pr_common+0x54>
 8003678:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800367c:	3301      	adds	r3, #1
 800367e:	9104      	str	r1, [sp, #16]
 8003680:	f000 8090 	beq.w	80037a4 <__gnu_unwind_pr_common+0x288>
 8003684:	1d20      	adds	r0, r4, #4
 8003686:	f7ff fdc1 	bl	800320c <_Unwind_decode_typeinfo_ptr.constprop.0>
 800368a:	ab04      	add	r3, sp, #16
 800368c:	4601      	mov	r1, r0
 800368e:	4628      	mov	r0, r5
 8003690:	f3af 8000 	nop.w
 8003694:	2800      	cmp	r0, #0
 8003696:	d15b      	bne.n	8003750 <__gnu_unwind_pr_common+0x234>
 8003698:	3408      	adds	r4, #8
 800369a:	e7a3      	b.n	80035e4 <__gnu_unwind_pr_common+0xc8>
 800369c:	210d      	movs	r1, #13
 800369e:	4638      	mov	r0, r7
 80036a0:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80036a4:	f7ff fec6 	bl	8003434 <_Unwind_GetGR>
 80036a8:	4581      	cmp	r9, r0
 80036aa:	d1f5      	bne.n	8003698 <__gnu_unwind_pr_common+0x17c>
 80036ac:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80036ae:	429c      	cmp	r4, r3
 80036b0:	d1f2      	bne.n	8003698 <__gnu_unwind_pr_common+0x17c>
 80036b2:	4620      	mov	r0, r4
 80036b4:	f7ff fce2 	bl	800307c <selfrel_offset31>
 80036b8:	210f      	movs	r1, #15
 80036ba:	4602      	mov	r2, r0
 80036bc:	4638      	mov	r0, r7
 80036be:	f7ff fedf 	bl	8003480 <_Unwind_SetGR>
 80036c2:	4638      	mov	r0, r7
 80036c4:	462a      	mov	r2, r5
 80036c6:	2100      	movs	r1, #0
 80036c8:	f7ff feda 	bl	8003480 <_Unwind_SetGR>
 80036cc:	2007      	movs	r0, #7
 80036ce:	e750      	b.n	8003572 <__gnu_unwind_pr_common+0x56>
 80036d0:	210d      	movs	r1, #13
 80036d2:	4638      	mov	r0, r7
 80036d4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80036d8:	f7ff feac 	bl	8003434 <_Unwind_GetGR>
 80036dc:	4581      	cmp	r9, r0
 80036de:	d001      	beq.n	80036e4 <__gnu_unwind_pr_common+0x1c8>
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	e7b6      	b.n	8003652 <__gnu_unwind_pr_common+0x136>
 80036e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80036e6:	429c      	cmp	r4, r3
 80036e8:	d1fa      	bne.n	80036e0 <__gnu_unwind_pr_common+0x1c4>
 80036ea:	2304      	movs	r3, #4
 80036ec:	2200      	movs	r2, #0
 80036ee:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 80036f2:	18e3      	adds	r3, r4, r3
 80036f4:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 80036f8:	636b      	str	r3, [r5, #52]	; 0x34
 80036fa:	6823      	ldr	r3, [r4, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	db59      	blt.n	80037b4 <__gnu_unwind_pr_common+0x298>
 8003700:	2301      	movs	r3, #1
 8003702:	9301      	str	r3, [sp, #4]
 8003704:	e7a8      	b.n	8003658 <__gnu_unwind_pr_common+0x13c>
 8003706:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800370a:	f8cd 800c 	str.w	r8, [sp, #12]
 800370e:	f104 0a04 	add.w	sl, r4, #4
 8003712:	46b0      	mov	r8, r6
 8003714:	4691      	mov	r9, r2
 8003716:	461e      	mov	r6, r3
 8003718:	e00e      	b.n	8003738 <__gnu_unwind_pr_common+0x21c>
 800371a:	4650      	mov	r0, sl
 800371c:	9604      	str	r6, [sp, #16]
 800371e:	f7ff fd75 	bl	800320c <_Unwind_decode_typeinfo_ptr.constprop.0>
 8003722:	2200      	movs	r2, #0
 8003724:	4601      	mov	r1, r0
 8003726:	ab04      	add	r3, sp, #16
 8003728:	4628      	mov	r0, r5
 800372a:	f109 0901 	add.w	r9, r9, #1
 800372e:	f10a 0a04 	add.w	sl, sl, #4
 8003732:	f3af 8000 	nop.w
 8003736:	b9e0      	cbnz	r0, 8003772 <__gnu_unwind_pr_common+0x256>
 8003738:	45d9      	cmp	r9, fp
 800373a:	d1ee      	bne.n	800371a <__gnu_unwind_pr_common+0x1fe>
 800373c:	210d      	movs	r1, #13
 800373e:	4638      	mov	r0, r7
 8003740:	f7ff fe78 	bl	8003434 <_Unwind_GetGR>
 8003744:	9b04      	ldr	r3, [sp, #16]
 8003746:	62ac      	str	r4, [r5, #40]	; 0x28
 8003748:	e9c5 0308 	strd	r0, r3, [r5, #32]
 800374c:	2006      	movs	r0, #6
 800374e:	e710      	b.n	8003572 <__gnu_unwind_pr_common+0x56>
 8003750:	4681      	mov	r9, r0
 8003752:	210d      	movs	r1, #13
 8003754:	4638      	mov	r0, r7
 8003756:	f7ff fe6d 	bl	8003434 <_Unwind_GetGR>
 800375a:	f1b9 0f02 	cmp.w	r9, #2
 800375e:	6228      	str	r0, [r5, #32]
 8003760:	d125      	bne.n	80037ae <__gnu_unwind_pr_common+0x292>
 8003762:	462b      	mov	r3, r5
 8003764:	9a04      	ldr	r2, [sp, #16]
 8003766:	f843 2f2c 	str.w	r2, [r3, #44]!
 800376a:	626b      	str	r3, [r5, #36]	; 0x24
 800376c:	62ac      	str	r4, [r5, #40]	; 0x28
 800376e:	2006      	movs	r0, #6
 8003770:	e6ff      	b.n	8003572 <__gnu_unwind_pr_common+0x56>
 8003772:	4646      	mov	r6, r8
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800377a:	e76a      	b.n	8003652 <__gnu_unwind_pr_common+0x136>
 800377c:	4620      	mov	r0, r4
 800377e:	f7ff fc7d 	bl	800307c <selfrel_offset31>
 8003782:	3404      	adds	r4, #4
 8003784:	4602      	mov	r2, r0
 8003786:	63ac      	str	r4, [r5, #56]	; 0x38
 8003788:	4628      	mov	r0, r5
 800378a:	4614      	mov	r4, r2
 800378c:	f3af 8000 	nop.w
 8003790:	2800      	cmp	r0, #0
 8003792:	f43f aeed 	beq.w	8003570 <__gnu_unwind_pr_common+0x54>
 8003796:	4638      	mov	r0, r7
 8003798:	4622      	mov	r2, r4
 800379a:	210f      	movs	r1, #15
 800379c:	f7ff fe70 	bl	8003480 <_Unwind_SetGR>
 80037a0:	2007      	movs	r0, #7
 80037a2:	e6e6      	b.n	8003572 <__gnu_unwind_pr_common+0x56>
 80037a4:	210d      	movs	r1, #13
 80037a6:	4638      	mov	r0, r7
 80037a8:	f7ff fe44 	bl	8003434 <_Unwind_GetGR>
 80037ac:	6228      	str	r0, [r5, #32]
 80037ae:	9b04      	ldr	r3, [sp, #16]
 80037b0:	626b      	str	r3, [r5, #36]	; 0x24
 80037b2:	e7db      	b.n	800376c <__gnu_unwind_pr_common+0x250>
 80037b4:	f10b 0001 	add.w	r0, fp, #1
 80037b8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80037bc:	e77a      	b.n	80036b4 <__gnu_unwind_pr_common+0x198>
 80037be:	bf00      	nop
 80037c0:	00000000 	.word	0x00000000

080037c4 <__aeabi_unwind_cpp_pr0>:
 80037c4:	2300      	movs	r3, #0
 80037c6:	e6a9      	b.n	800351c <__gnu_unwind_pr_common>

080037c8 <__aeabi_unwind_cpp_pr1>:
 80037c8:	2301      	movs	r3, #1
 80037ca:	e6a7      	b.n	800351c <__gnu_unwind_pr_common>

080037cc <__aeabi_unwind_cpp_pr2>:
 80037cc:	2302      	movs	r3, #2
 80037ce:	e6a5      	b.n	800351c <__gnu_unwind_pr_common>

080037d0 <_Unwind_VRS_Pop>:
 80037d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037d4:	4606      	mov	r6, r0
 80037d6:	b0c3      	sub	sp, #268	; 0x10c
 80037d8:	4615      	mov	r5, r2
 80037da:	461c      	mov	r4, r3
 80037dc:	2904      	cmp	r1, #4
 80037de:	f200 80bf 	bhi.w	8003960 <_Unwind_VRS_Pop+0x190>
 80037e2:	e8df f001 	tbb	[pc, r1]
 80037e6:	579e      	.short	0x579e
 80037e8:	2dbd      	.short	0x2dbd
 80037ea:	03          	.byte	0x03
 80037eb:	00          	.byte	0x00
 80037ec:	2c00      	cmp	r4, #0
 80037ee:	f040 80b7 	bne.w	8003960 <_Unwind_VRS_Pop+0x190>
 80037f2:	2a10      	cmp	r2, #16
 80037f4:	f200 80b4 	bhi.w	8003960 <_Unwind_VRS_Pop+0x190>
 80037f8:	6803      	ldr	r3, [r0, #0]
 80037fa:	06d8      	lsls	r0, r3, #27
 80037fc:	f100 80f9 	bmi.w	80039f2 <_Unwind_VRS_Pop+0x222>
 8003800:	af20      	add	r7, sp, #128	; 0x80
 8003802:	4638      	mov	r0, r7
 8003804:	f000 f998 	bl	8003b38 <__gnu_Unwind_Save_WMMXC>
 8003808:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 800380a:	4639      	mov	r1, r7
 800380c:	2300      	movs	r3, #0
 800380e:	f04f 0c01 	mov.w	ip, #1
 8003812:	fa0c f203 	lsl.w	r2, ip, r3
 8003816:	422a      	tst	r2, r5
 8003818:	4620      	mov	r0, r4
 800381a:	f103 0301 	add.w	r3, r3, #1
 800381e:	d003      	beq.n	8003828 <_Unwind_VRS_Pop+0x58>
 8003820:	f850 2b04 	ldr.w	r2, [r0], #4
 8003824:	600a      	str	r2, [r1, #0]
 8003826:	4604      	mov	r4, r0
 8003828:	2b04      	cmp	r3, #4
 800382a:	f101 0104 	add.w	r1, r1, #4
 800382e:	d1f0      	bne.n	8003812 <_Unwind_VRS_Pop+0x42>
 8003830:	4638      	mov	r0, r7
 8003832:	63b4      	str	r4, [r6, #56]	; 0x38
 8003834:	f000 f976 	bl	8003b24 <__gnu_Unwind_Restore_WMMXC>
 8003838:	2000      	movs	r0, #0
 800383a:	b043      	add	sp, #268	; 0x10c
 800383c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003840:	2c03      	cmp	r4, #3
 8003842:	f040 808d 	bne.w	8003960 <_Unwind_VRS_Pop+0x190>
 8003846:	b294      	uxth	r4, r2
 8003848:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 800384c:	2b10      	cmp	r3, #16
 800384e:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8003852:	f200 8085 	bhi.w	8003960 <_Unwind_VRS_Pop+0x190>
 8003856:	6803      	ldr	r3, [r0, #0]
 8003858:	071f      	lsls	r7, r3, #28
 800385a:	f100 80d2 	bmi.w	8003a02 <_Unwind_VRS_Pop+0x232>
 800385e:	af20      	add	r7, sp, #128	; 0x80
 8003860:	4638      	mov	r0, r7
 8003862:	f000 f93d 	bl	8003ae0 <__gnu_Unwind_Save_WMMXD>
 8003866:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8003868:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 800386c:	b154      	cbz	r4, 8003884 <_Unwind_VRS_Pop+0xb4>
 800386e:	460b      	mov	r3, r1
 8003870:	1ad0      	subs	r0, r2, r3
 8003872:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8003876:	00e4      	lsls	r4, r4, #3
 8003878:	581d      	ldr	r5, [r3, r0]
 800387a:	f843 5b04 	str.w	r5, [r3], #4
 800387e:	428b      	cmp	r3, r1
 8003880:	d1fa      	bne.n	8003878 <_Unwind_VRS_Pop+0xa8>
 8003882:	4422      	add	r2, r4
 8003884:	4638      	mov	r0, r7
 8003886:	63b2      	str	r2, [r6, #56]	; 0x38
 8003888:	f000 f908 	bl	8003a9c <__gnu_Unwind_Restore_WMMXD>
 800388c:	2000      	movs	r0, #0
 800388e:	b043      	add	sp, #268	; 0x10c
 8003890:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003894:	2c01      	cmp	r4, #1
 8003896:	ea4f 4812 	mov.w	r8, r2, lsr #16
 800389a:	b295      	uxth	r5, r2
 800389c:	d05c      	beq.n	8003958 <_Unwind_VRS_Pop+0x188>
 800389e:	2c05      	cmp	r4, #5
 80038a0:	d15e      	bne.n	8003960 <_Unwind_VRS_Pop+0x190>
 80038a2:	eb08 0905 	add.w	r9, r8, r5
 80038a6:	f1b9 0f20 	cmp.w	r9, #32
 80038aa:	d859      	bhi.n	8003960 <_Unwind_VRS_Pop+0x190>
 80038ac:	f1b8 0f0f 	cmp.w	r8, #15
 80038b0:	d979      	bls.n	80039a6 <_Unwind_VRS_Pop+0x1d6>
 80038b2:	46a9      	mov	r9, r5
 80038b4:	2d00      	cmp	r5, #0
 80038b6:	f040 808a 	bne.w	80039ce <_Unwind_VRS_Pop+0x1fe>
 80038ba:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80038bc:	b36d      	cbz	r5, 800391a <_Unwind_VRS_Pop+0x14a>
 80038be:	af20      	add	r7, sp, #128	; 0x80
 80038c0:	f04f 0900 	mov.w	r9, #0
 80038c4:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 80038c8:	3f04      	subs	r7, #4
 80038ca:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80038ce:	f853 1b04 	ldr.w	r1, [r3], #4
 80038d2:	f847 1f04 	str.w	r1, [r7, #4]!
 80038d6:	42ab      	cmp	r3, r5
 80038d8:	d1f9      	bne.n	80038ce <_Unwind_VRS_Pop+0xfe>
 80038da:	f1b9 0f00 	cmp.w	r9, #0
 80038de:	d00f      	beq.n	8003900 <_Unwind_VRS_Pop+0x130>
 80038e0:	466f      	mov	r7, sp
 80038e2:	4641      	mov	r1, r8
 80038e4:	2910      	cmp	r1, #16
 80038e6:	bf38      	it	cc
 80038e8:	2110      	movcc	r1, #16
 80038ea:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80038ee:	3984      	subs	r1, #132	; 0x84
 80038f0:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 80038f4:	f853 0b04 	ldr.w	r0, [r3], #4
 80038f8:	f841 0f04 	str.w	r0, [r1, #4]!
 80038fc:	42ab      	cmp	r3, r5
 80038fe:	d1f9      	bne.n	80038f4 <_Unwind_VRS_Pop+0x124>
 8003900:	2c01      	cmp	r4, #1
 8003902:	f000 8086 	beq.w	8003a12 <_Unwind_VRS_Pop+0x242>
 8003906:	f1b8 0f0f 	cmp.w	r8, #15
 800390a:	63b5      	str	r5, [r6, #56]	; 0x38
 800390c:	d947      	bls.n	800399e <_Unwind_VRS_Pop+0x1ce>
 800390e:	f1b9 0f00 	cmp.w	r9, #0
 8003912:	d002      	beq.n	800391a <_Unwind_VRS_Pop+0x14a>
 8003914:	4668      	mov	r0, sp
 8003916:	f000 f8b9 	bl	8003a8c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800391a:	2000      	movs	r0, #0
 800391c:	b043      	add	sp, #268	; 0x10c
 800391e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003922:	b9ec      	cbnz	r4, 8003960 <_Unwind_VRS_Pop+0x190>
 8003924:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003926:	4623      	mov	r3, r4
 8003928:	fa1f fc82 	uxth.w	ip, r2
 800392c:	2401      	movs	r4, #1
 800392e:	1d37      	adds	r7, r6, #4
 8003930:	fa04 f203 	lsl.w	r2, r4, r3
 8003934:	ea12 0f0c 	tst.w	r2, ip
 8003938:	4601      	mov	r1, r0
 800393a:	d004      	beq.n	8003946 <_Unwind_VRS_Pop+0x176>
 800393c:	f851 2b04 	ldr.w	r2, [r1], #4
 8003940:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8003944:	4608      	mov	r0, r1
 8003946:	3301      	adds	r3, #1
 8003948:	2b10      	cmp	r3, #16
 800394a:	d1f1      	bne.n	8003930 <_Unwind_VRS_Pop+0x160>
 800394c:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
 8003950:	d1e3      	bne.n	800391a <_Unwind_VRS_Pop+0x14a>
 8003952:	63b0      	str	r0, [r6, #56]	; 0x38
 8003954:	4628      	mov	r0, r5
 8003956:	e004      	b.n	8003962 <_Unwind_VRS_Pop+0x192>
 8003958:	eb08 0305 	add.w	r3, r8, r5
 800395c:	2b10      	cmp	r3, #16
 800395e:	d903      	bls.n	8003968 <_Unwind_VRS_Pop+0x198>
 8003960:	2002      	movs	r0, #2
 8003962:	b043      	add	sp, #268	; 0x10c
 8003964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003968:	f1b8 0f0f 	cmp.w	r8, #15
 800396c:	d8f8      	bhi.n	8003960 <_Unwind_VRS_Pop+0x190>
 800396e:	6833      	ldr	r3, [r6, #0]
 8003970:	07da      	lsls	r2, r3, #31
 8003972:	d506      	bpl.n	8003982 <_Unwind_VRS_Pop+0x1b2>
 8003974:	4630      	mov	r0, r6
 8003976:	f023 0303 	bic.w	r3, r3, #3
 800397a:	f840 3b48 	str.w	r3, [r0], #72
 800397e:	f000 f879 	bl	8003a74 <__gnu_Unwind_Save_VFP>
 8003982:	af20      	add	r7, sp, #128	; 0x80
 8003984:	4638      	mov	r0, r7
 8003986:	f000 f875 	bl	8003a74 <__gnu_Unwind_Save_VFP>
 800398a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800398c:	2d00      	cmp	r5, #0
 800398e:	d197      	bne.n	80038c0 <_Unwind_VRS_Pop+0xf0>
 8003990:	461d      	mov	r5, r3
 8003992:	3504      	adds	r5, #4
 8003994:	63b5      	str	r5, [r6, #56]	; 0x38
 8003996:	4638      	mov	r0, r7
 8003998:	f000 f868 	bl	8003a6c <__gnu_Unwind_Restore_VFP>
 800399c:	e7bd      	b.n	800391a <_Unwind_VRS_Pop+0x14a>
 800399e:	a820      	add	r0, sp, #128	; 0x80
 80039a0:	f000 f86c 	bl	8003a7c <__gnu_Unwind_Restore_VFP_D>
 80039a4:	e7b3      	b.n	800390e <_Unwind_VRS_Pop+0x13e>
 80039a6:	f1b9 0f10 	cmp.w	r9, #16
 80039aa:	d940      	bls.n	8003a2e <_Unwind_VRS_Pop+0x25e>
 80039ac:	f1a9 0910 	sub.w	r9, r9, #16
 80039b0:	6833      	ldr	r3, [r6, #0]
 80039b2:	07d9      	lsls	r1, r3, #31
 80039b4:	d508      	bpl.n	80039c8 <_Unwind_VRS_Pop+0x1f8>
 80039b6:	f023 0301 	bic.w	r3, r3, #1
 80039ba:	4630      	mov	r0, r6
 80039bc:	f043 0302 	orr.w	r3, r3, #2
 80039c0:	f840 3b48 	str.w	r3, [r0], #72
 80039c4:	f000 f85e 	bl	8003a84 <__gnu_Unwind_Save_VFP_D>
 80039c8:	f1b9 0f00 	cmp.w	r9, #0
 80039cc:	d032      	beq.n	8003a34 <_Unwind_VRS_Pop+0x264>
 80039ce:	6833      	ldr	r3, [r6, #0]
 80039d0:	075a      	lsls	r2, r3, #29
 80039d2:	d420      	bmi.n	8003a16 <_Unwind_VRS_Pop+0x246>
 80039d4:	f1b8 0f0f 	cmp.w	r8, #15
 80039d8:	d925      	bls.n	8003a26 <_Unwind_VRS_Pop+0x256>
 80039da:	466f      	mov	r7, sp
 80039dc:	4638      	mov	r0, r7
 80039de:	f1c8 0510 	rsb	r5, r8, #16
 80039e2:	f000 f857 	bl	8003a94 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80039e6:	2d00      	cmp	r5, #0
 80039e8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80039ea:	f77f af7a 	ble.w	80038e2 <_Unwind_VRS_Pop+0x112>
 80039ee:	af20      	add	r7, sp, #128	; 0x80
 80039f0:	e768      	b.n	80038c4 <_Unwind_VRS_Pop+0xf4>
 80039f2:	f023 0310 	bic.w	r3, r3, #16
 80039f6:	6033      	str	r3, [r6, #0]
 80039f8:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 80039fc:	f000 f89c 	bl	8003b38 <__gnu_Unwind_Save_WMMXC>
 8003a00:	e6fe      	b.n	8003800 <_Unwind_VRS_Pop+0x30>
 8003a02:	f023 0308 	bic.w	r3, r3, #8
 8003a06:	6003      	str	r3, [r0, #0]
 8003a08:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8003a0c:	f000 f868 	bl	8003ae0 <__gnu_Unwind_Save_WMMXD>
 8003a10:	e725      	b.n	800385e <_Unwind_VRS_Pop+0x8e>
 8003a12:	af20      	add	r7, sp, #128	; 0x80
 8003a14:	e7bd      	b.n	8003992 <_Unwind_VRS_Pop+0x1c2>
 8003a16:	4630      	mov	r0, r6
 8003a18:	f023 0304 	bic.w	r3, r3, #4
 8003a1c:	f840 3bd0 	str.w	r3, [r0], #208
 8003a20:	f000 f838 	bl	8003a94 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8003a24:	e7d6      	b.n	80039d4 <_Unwind_VRS_Pop+0x204>
 8003a26:	a820      	add	r0, sp, #128	; 0x80
 8003a28:	f000 f82c 	bl	8003a84 <__gnu_Unwind_Save_VFP_D>
 8003a2c:	e7d5      	b.n	80039da <_Unwind_VRS_Pop+0x20a>
 8003a2e:	f04f 0900 	mov.w	r9, #0
 8003a32:	e7bd      	b.n	80039b0 <_Unwind_VRS_Pop+0x1e0>
 8003a34:	f1b8 0f0f 	cmp.w	r8, #15
 8003a38:	f63f af3f 	bhi.w	80038ba <_Unwind_VRS_Pop+0xea>
 8003a3c:	af20      	add	r7, sp, #128	; 0x80
 8003a3e:	4638      	mov	r0, r7
 8003a40:	f000 f820 	bl	8003a84 <__gnu_Unwind_Save_VFP_D>
 8003a44:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8003a46:	2d00      	cmp	r5, #0
 8003a48:	f47f af3a 	bne.w	80038c0 <_Unwind_VRS_Pop+0xf0>
 8003a4c:	4638      	mov	r0, r7
 8003a4e:	f000 f815 	bl	8003a7c <__gnu_Unwind_Restore_VFP_D>
 8003a52:	e762      	b.n	800391a <_Unwind_VRS_Pop+0x14a>

08003a54 <__restore_core_regs>:
 8003a54:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8003a58:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8003a5c:	469c      	mov	ip, r3
 8003a5e:	46a6      	mov	lr, r4
 8003a60:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8003a64:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8003a68:	46e5      	mov	sp, ip
 8003a6a:	bd00      	pop	{pc}

08003a6c <__gnu_Unwind_Restore_VFP>:
 8003a6c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop

08003a74 <__gnu_Unwind_Save_VFP>:
 8003a74:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop

08003a7c <__gnu_Unwind_Restore_VFP_D>:
 8003a7c:	ec90 0b20 	vldmia	r0, {d0-d15}
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop

08003a84 <__gnu_Unwind_Save_VFP_D>:
 8003a84:	ec80 0b20 	vstmia	r0, {d0-d15}
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop

08003a8c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8003a8c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop

08003a94 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8003a94:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop

08003a9c <__gnu_Unwind_Restore_WMMXD>:
 8003a9c:	ecf0 0102 	ldfe	f0, [r0], #8
 8003aa0:	ecf0 1102 	ldfe	f1, [r0], #8
 8003aa4:	ecf0 2102 	ldfe	f2, [r0], #8
 8003aa8:	ecf0 3102 	ldfe	f3, [r0], #8
 8003aac:	ecf0 4102 	ldfe	f4, [r0], #8
 8003ab0:	ecf0 5102 	ldfe	f5, [r0], #8
 8003ab4:	ecf0 6102 	ldfe	f6, [r0], #8
 8003ab8:	ecf0 7102 	ldfe	f7, [r0], #8
 8003abc:	ecf0 8102 	ldfp	f0, [r0], #8
 8003ac0:	ecf0 9102 	ldfp	f1, [r0], #8
 8003ac4:	ecf0 a102 	ldfp	f2, [r0], #8
 8003ac8:	ecf0 b102 	ldfp	f3, [r0], #8
 8003acc:	ecf0 c102 	ldfp	f4, [r0], #8
 8003ad0:	ecf0 d102 	ldfp	f5, [r0], #8
 8003ad4:	ecf0 e102 	ldfp	f6, [r0], #8
 8003ad8:	ecf0 f102 	ldfp	f7, [r0], #8
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop

08003ae0 <__gnu_Unwind_Save_WMMXD>:
 8003ae0:	ece0 0102 	stfe	f0, [r0], #8
 8003ae4:	ece0 1102 	stfe	f1, [r0], #8
 8003ae8:	ece0 2102 	stfe	f2, [r0], #8
 8003aec:	ece0 3102 	stfe	f3, [r0], #8
 8003af0:	ece0 4102 	stfe	f4, [r0], #8
 8003af4:	ece0 5102 	stfe	f5, [r0], #8
 8003af8:	ece0 6102 	stfe	f6, [r0], #8
 8003afc:	ece0 7102 	stfe	f7, [r0], #8
 8003b00:	ece0 8102 	stfp	f0, [r0], #8
 8003b04:	ece0 9102 	stfp	f1, [r0], #8
 8003b08:	ece0 a102 	stfp	f2, [r0], #8
 8003b0c:	ece0 b102 	stfp	f3, [r0], #8
 8003b10:	ece0 c102 	stfp	f4, [r0], #8
 8003b14:	ece0 d102 	stfp	f5, [r0], #8
 8003b18:	ece0 e102 	stfp	f6, [r0], #8
 8003b1c:	ece0 f102 	stfp	f7, [r0], #8
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop

08003b24 <__gnu_Unwind_Restore_WMMXC>:
 8003b24:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8003b28:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8003b2c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8003b30:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop

08003b38 <__gnu_Unwind_Save_WMMXC>:
 8003b38:	fca0 8101 	stc2	1, cr8, [r0], #4
 8003b3c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8003b40:	fca0 a101 	stc2	1, cr10, [r0], #4
 8003b44:	fca0 b101 	stc2	1, cr11, [r0], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop

08003b4c <_Unwind_RaiseException>:
 8003b4c:	46ec      	mov	ip, sp
 8003b4e:	b500      	push	{lr}
 8003b50:	e92d 5000 	stmdb	sp!, {ip, lr}
 8003b54:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8003b60:	a901      	add	r1, sp, #4
 8003b62:	f7ff fbe1 	bl	8003328 <__gnu_Unwind_RaiseException>
 8003b66:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8003b6a:	b012      	add	sp, #72	; 0x48
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop

08003b70 <_Unwind_Resume>:
 8003b70:	46ec      	mov	ip, sp
 8003b72:	b500      	push	{lr}
 8003b74:	e92d 5000 	stmdb	sp!, {ip, lr}
 8003b78:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	e92d 000c 	stmdb	sp!, {r2, r3}
 8003b84:	a901      	add	r1, sp, #4
 8003b86:	f7ff fc0b 	bl	80033a0 <__gnu_Unwind_Resume>
 8003b8a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8003b8e:	b012      	add	sp, #72	; 0x48
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop

08003b94 <_Unwind_Resume_or_Rethrow>:
 8003b94:	46ec      	mov	ip, sp
 8003b96:	b500      	push	{lr}
 8003b98:	e92d 5000 	stmdb	sp!, {ip, lr}
 8003b9c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8003ba0:	f04f 0300 	mov.w	r3, #0
 8003ba4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8003ba8:	a901      	add	r1, sp, #4
 8003baa:	f7ff fc1b 	bl	80033e4 <__gnu_Unwind_Resume_or_Rethrow>
 8003bae:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8003bb2:	b012      	add	sp, #72	; 0x48
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop

08003bb8 <_Unwind_ForcedUnwind>:
 8003bb8:	46ec      	mov	ip, sp
 8003bba:	b500      	push	{lr}
 8003bbc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8003bc0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8003bcc:	ab01      	add	r3, sp, #4
 8003bce:	f7ff fbdf 	bl	8003390 <__gnu_Unwind_ForcedUnwind>
 8003bd2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8003bd6:	b012      	add	sp, #72	; 0x48
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop

08003bdc <_Unwind_Backtrace>:
 8003bdc:	46ec      	mov	ip, sp
 8003bde:	b500      	push	{lr}
 8003be0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8003be4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8003be8:	f04f 0300 	mov.w	r3, #0
 8003bec:	e92d 000c 	stmdb	sp!, {r2, r3}
 8003bf0:	aa01      	add	r2, sp, #4
 8003bf2:	f7ff fc51 	bl	8003498 <__gnu_Unwind_Backtrace>
 8003bf6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8003bfa:	b012      	add	sp, #72	; 0x48
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop

08003c00 <next_unwind_byte>:
 8003c00:	7a02      	ldrb	r2, [r0, #8]
 8003c02:	4603      	mov	r3, r0
 8003c04:	b97a      	cbnz	r2, 8003c26 <next_unwind_byte+0x26>
 8003c06:	7a42      	ldrb	r2, [r0, #9]
 8003c08:	b1a2      	cbz	r2, 8003c34 <next_unwind_byte+0x34>
 8003c0a:	6841      	ldr	r1, [r0, #4]
 8003c0c:	3a01      	subs	r2, #1
 8003c0e:	b410      	push	{r4}
 8003c10:	7242      	strb	r2, [r0, #9]
 8003c12:	6808      	ldr	r0, [r1, #0]
 8003c14:	2203      	movs	r2, #3
 8003c16:	1d0c      	adds	r4, r1, #4
 8003c18:	721a      	strb	r2, [r3, #8]
 8003c1a:	0202      	lsls	r2, r0, #8
 8003c1c:	605c      	str	r4, [r3, #4]
 8003c1e:	0e00      	lsrs	r0, r0, #24
 8003c20:	bc10      	pop	{r4}
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	4770      	bx	lr
 8003c26:	6800      	ldr	r0, [r0, #0]
 8003c28:	3a01      	subs	r2, #1
 8003c2a:	721a      	strb	r2, [r3, #8]
 8003c2c:	0202      	lsls	r2, r0, #8
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	0e00      	lsrs	r0, r0, #24
 8003c32:	4770      	bx	lr
 8003c34:	20b0      	movs	r0, #176	; 0xb0
 8003c36:	4770      	bx	lr

08003c38 <_Unwind_GetGR.constprop.0>:
 8003c38:	b500      	push	{lr}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	aa03      	add	r2, sp, #12
 8003c40:	9200      	str	r2, [sp, #0]
 8003c42:	4619      	mov	r1, r3
 8003c44:	220c      	movs	r2, #12
 8003c46:	f7ff fbdd 	bl	8003404 <_Unwind_VRS_Get>
 8003c4a:	9803      	ldr	r0, [sp, #12]
 8003c4c:	b005      	add	sp, #20
 8003c4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c52:	bf00      	nop

08003c54 <unwind_UCB_from_context>:
 8003c54:	e7f0      	b.n	8003c38 <_Unwind_GetGR.constprop.0>
 8003c56:	bf00      	nop

08003c58 <__gnu_unwind_execute>:
 8003c58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c5c:	4605      	mov	r5, r0
 8003c5e:	b085      	sub	sp, #20
 8003c60:	460e      	mov	r6, r1
 8003c62:	f04f 0800 	mov.w	r8, #0
 8003c66:	4630      	mov	r0, r6
 8003c68:	f7ff ffca 	bl	8003c00 <next_unwind_byte>
 8003c6c:	28b0      	cmp	r0, #176	; 0xb0
 8003c6e:	4604      	mov	r4, r0
 8003c70:	f000 80ba 	beq.w	8003de8 <__gnu_unwind_execute+0x190>
 8003c74:	0607      	lsls	r7, r0, #24
 8003c76:	d520      	bpl.n	8003cba <__gnu_unwind_execute+0x62>
 8003c78:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8003c7c:	2b80      	cmp	r3, #128	; 0x80
 8003c7e:	d04d      	beq.n	8003d1c <__gnu_unwind_execute+0xc4>
 8003c80:	2b90      	cmp	r3, #144	; 0x90
 8003c82:	d036      	beq.n	8003cf2 <__gnu_unwind_execute+0x9a>
 8003c84:	2ba0      	cmp	r3, #160	; 0xa0
 8003c86:	d060      	beq.n	8003d4a <__gnu_unwind_execute+0xf2>
 8003c88:	2bb0      	cmp	r3, #176	; 0xb0
 8003c8a:	d074      	beq.n	8003d76 <__gnu_unwind_execute+0x11e>
 8003c8c:	2bc0      	cmp	r3, #192	; 0xc0
 8003c8e:	f000 808b 	beq.w	8003da8 <__gnu_unwind_execute+0x150>
 8003c92:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8003c96:	2bd0      	cmp	r3, #208	; 0xd0
 8003c98:	d10b      	bne.n	8003cb2 <__gnu_unwind_execute+0x5a>
 8003c9a:	f000 0207 	and.w	r2, r0, #7
 8003c9e:	3201      	adds	r2, #1
 8003ca0:	2305      	movs	r3, #5
 8003ca2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	4628      	mov	r0, r5
 8003caa:	f7ff fd91 	bl	80037d0 <_Unwind_VRS_Pop>
 8003cae:	2800      	cmp	r0, #0
 8003cb0:	d0d9      	beq.n	8003c66 <__gnu_unwind_execute+0xe>
 8003cb2:	2009      	movs	r0, #9
 8003cb4:	b005      	add	sp, #20
 8003cb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003cba:	0083      	lsls	r3, r0, #2
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	1d1f      	adds	r7, r3, #4
 8003cc0:	f10d 090c 	add.w	r9, sp, #12
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	f8cd 9000 	str.w	r9, [sp]
 8003ccc:	220d      	movs	r2, #13
 8003cce:	4628      	mov	r0, r5
 8003cd0:	f7ff fb98 	bl	8003404 <_Unwind_VRS_Get>
 8003cd4:	9b03      	ldr	r3, [sp, #12]
 8003cd6:	f8cd 9000 	str.w	r9, [sp]
 8003cda:	0660      	lsls	r0, r4, #25
 8003cdc:	bf4c      	ite	mi
 8003cde:	1bdf      	submi	r7, r3, r7
 8003ce0:	18ff      	addpl	r7, r7, r3
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	220d      	movs	r2, #13
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4628      	mov	r0, r5
 8003cea:	9703      	str	r7, [sp, #12]
 8003cec:	f7ff fbb0 	bl	8003450 <_Unwind_VRS_Set>
 8003cf0:	e7b9      	b.n	8003c66 <__gnu_unwind_execute+0xe>
 8003cf2:	f000 030d 	and.w	r3, r0, #13
 8003cf6:	2b0d      	cmp	r3, #13
 8003cf8:	d0db      	beq.n	8003cb2 <__gnu_unwind_execute+0x5a>
 8003cfa:	af03      	add	r7, sp, #12
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f000 020f 	and.w	r2, r0, #15
 8003d02:	4619      	mov	r1, r3
 8003d04:	9700      	str	r7, [sp, #0]
 8003d06:	4628      	mov	r0, r5
 8003d08:	f7ff fb7c 	bl	8003404 <_Unwind_VRS_Get>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	9700      	str	r7, [sp, #0]
 8003d10:	220d      	movs	r2, #13
 8003d12:	4619      	mov	r1, r3
 8003d14:	4628      	mov	r0, r5
 8003d16:	f7ff fb9b 	bl	8003450 <_Unwind_VRS_Set>
 8003d1a:	e7a4      	b.n	8003c66 <__gnu_unwind_execute+0xe>
 8003d1c:	4630      	mov	r0, r6
 8003d1e:	f7ff ff6f 	bl	8003c00 <next_unwind_byte>
 8003d22:	0224      	lsls	r4, r4, #8
 8003d24:	4320      	orrs	r0, r4
 8003d26:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003d2a:	d0c2      	beq.n	8003cb2 <__gnu_unwind_execute+0x5a>
 8003d2c:	0104      	lsls	r4, r0, #4
 8003d2e:	2300      	movs	r3, #0
 8003d30:	b2a2      	uxth	r2, r4
 8003d32:	4619      	mov	r1, r3
 8003d34:	4628      	mov	r0, r5
 8003d36:	f7ff fd4b 	bl	80037d0 <_Unwind_VRS_Pop>
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	d1b9      	bne.n	8003cb2 <__gnu_unwind_execute+0x5a>
 8003d3e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8003d42:	bf18      	it	ne
 8003d44:	f04f 0801 	movne.w	r8, #1
 8003d48:	e78d      	b.n	8003c66 <__gnu_unwind_execute+0xe>
 8003d4a:	43c2      	mvns	r2, r0
 8003d4c:	f002 0307 	and.w	r3, r2, #7
 8003d50:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8003d54:	411a      	asrs	r2, r3
 8003d56:	0701      	lsls	r1, r0, #28
 8003d58:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	bf48      	it	mi
 8003d62:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8003d66:	4619      	mov	r1, r3
 8003d68:	4628      	mov	r0, r5
 8003d6a:	f7ff fd31 	bl	80037d0 <_Unwind_VRS_Pop>
 8003d6e:	2800      	cmp	r0, #0
 8003d70:	f43f af79 	beq.w	8003c66 <__gnu_unwind_execute+0xe>
 8003d74:	e79d      	b.n	8003cb2 <__gnu_unwind_execute+0x5a>
 8003d76:	28b1      	cmp	r0, #177	; 0xb1
 8003d78:	d03b      	beq.n	8003df2 <__gnu_unwind_execute+0x19a>
 8003d7a:	28b2      	cmp	r0, #178	; 0xb2
 8003d7c:	f000 8093 	beq.w	8003ea6 <__gnu_unwind_execute+0x24e>
 8003d80:	28b3      	cmp	r0, #179	; 0xb3
 8003d82:	d041      	beq.n	8003e08 <__gnu_unwind_execute+0x1b0>
 8003d84:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8003d88:	2bb4      	cmp	r3, #180	; 0xb4
 8003d8a:	d092      	beq.n	8003cb2 <__gnu_unwind_execute+0x5a>
 8003d8c:	f000 0207 	and.w	r2, r0, #7
 8003d90:	3201      	adds	r2, #1
 8003d92:	2301      	movs	r3, #1
 8003d94:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003d98:	4619      	mov	r1, r3
 8003d9a:	4628      	mov	r0, r5
 8003d9c:	f7ff fd18 	bl	80037d0 <_Unwind_VRS_Pop>
 8003da0:	2800      	cmp	r0, #0
 8003da2:	f43f af60 	beq.w	8003c66 <__gnu_unwind_execute+0xe>
 8003da6:	e784      	b.n	8003cb2 <__gnu_unwind_execute+0x5a>
 8003da8:	28c6      	cmp	r0, #198	; 0xc6
 8003daa:	d04a      	beq.n	8003e42 <__gnu_unwind_execute+0x1ea>
 8003dac:	28c7      	cmp	r0, #199	; 0xc7
 8003dae:	d054      	beq.n	8003e5a <__gnu_unwind_execute+0x202>
 8003db0:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8003db4:	2bc0      	cmp	r3, #192	; 0xc0
 8003db6:	d063      	beq.n	8003e80 <__gnu_unwind_execute+0x228>
 8003db8:	28c8      	cmp	r0, #200	; 0xc8
 8003dba:	d068      	beq.n	8003e8e <__gnu_unwind_execute+0x236>
 8003dbc:	28c9      	cmp	r0, #201	; 0xc9
 8003dbe:	f47f af78 	bne.w	8003cb2 <__gnu_unwind_execute+0x5a>
 8003dc2:	4630      	mov	r0, r6
 8003dc4:	f7ff ff1c 	bl	8003c00 <next_unwind_byte>
 8003dc8:	0302      	lsls	r2, r0, #12
 8003dca:	f000 000f 	and.w	r0, r0, #15
 8003dce:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8003dd2:	3001      	adds	r0, #1
 8003dd4:	4302      	orrs	r2, r0
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	2305      	movs	r3, #5
 8003dda:	4628      	mov	r0, r5
 8003ddc:	f7ff fcf8 	bl	80037d0 <_Unwind_VRS_Pop>
 8003de0:	2800      	cmp	r0, #0
 8003de2:	f43f af40 	beq.w	8003c66 <__gnu_unwind_execute+0xe>
 8003de6:	e764      	b.n	8003cb2 <__gnu_unwind_execute+0x5a>
 8003de8:	f1b8 0f00 	cmp.w	r8, #0
 8003dec:	d018      	beq.n	8003e20 <__gnu_unwind_execute+0x1c8>
 8003dee:	2000      	movs	r0, #0
 8003df0:	e760      	b.n	8003cb4 <__gnu_unwind_execute+0x5c>
 8003df2:	4630      	mov	r0, r6
 8003df4:	f7ff ff04 	bl	8003c00 <next_unwind_byte>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	2800      	cmp	r0, #0
 8003dfc:	f43f af59 	beq.w	8003cb2 <__gnu_unwind_execute+0x5a>
 8003e00:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8003e04:	d0c8      	beq.n	8003d98 <__gnu_unwind_execute+0x140>
 8003e06:	e754      	b.n	8003cb2 <__gnu_unwind_execute+0x5a>
 8003e08:	4630      	mov	r0, r6
 8003e0a:	f7ff fef9 	bl	8003c00 <next_unwind_byte>
 8003e0e:	0302      	lsls	r2, r0, #12
 8003e10:	f000 030f 	and.w	r3, r0, #15
 8003e14:	3301      	adds	r3, #1
 8003e16:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e7bb      	b.n	8003d98 <__gnu_unwind_execute+0x140>
 8003e20:	ac03      	add	r4, sp, #12
 8003e22:	4643      	mov	r3, r8
 8003e24:	220e      	movs	r2, #14
 8003e26:	4641      	mov	r1, r8
 8003e28:	9400      	str	r4, [sp, #0]
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	f7ff faea 	bl	8003404 <_Unwind_VRS_Get>
 8003e30:	9400      	str	r4, [sp, #0]
 8003e32:	4643      	mov	r3, r8
 8003e34:	220f      	movs	r2, #15
 8003e36:	4641      	mov	r1, r8
 8003e38:	4628      	mov	r0, r5
 8003e3a:	f7ff fb09 	bl	8003450 <_Unwind_VRS_Set>
 8003e3e:	4640      	mov	r0, r8
 8003e40:	e738      	b.n	8003cb4 <__gnu_unwind_execute+0x5c>
 8003e42:	4630      	mov	r0, r6
 8003e44:	f7ff fedc 	bl	8003c00 <next_unwind_byte>
 8003e48:	0302      	lsls	r2, r0, #12
 8003e4a:	f000 030f 	and.w	r3, r0, #15
 8003e4e:	3301      	adds	r3, #1
 8003e50:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8003e54:	431a      	orrs	r2, r3
 8003e56:	2303      	movs	r3, #3
 8003e58:	e79e      	b.n	8003d98 <__gnu_unwind_execute+0x140>
 8003e5a:	4630      	mov	r0, r6
 8003e5c:	f7ff fed0 	bl	8003c00 <next_unwind_byte>
 8003e60:	4602      	mov	r2, r0
 8003e62:	2800      	cmp	r0, #0
 8003e64:	f43f af25 	beq.w	8003cb2 <__gnu_unwind_execute+0x5a>
 8003e68:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8003e6c:	f47f af21 	bne.w	8003cb2 <__gnu_unwind_execute+0x5a>
 8003e70:	2104      	movs	r1, #4
 8003e72:	4628      	mov	r0, r5
 8003e74:	f7ff fcac 	bl	80037d0 <_Unwind_VRS_Pop>
 8003e78:	2800      	cmp	r0, #0
 8003e7a:	f43f aef4 	beq.w	8003c66 <__gnu_unwind_execute+0xe>
 8003e7e:	e718      	b.n	8003cb2 <__gnu_unwind_execute+0x5a>
 8003e80:	f000 020f 	and.w	r2, r0, #15
 8003e84:	3201      	adds	r2, #1
 8003e86:	2303      	movs	r3, #3
 8003e88:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8003e8c:	e784      	b.n	8003d98 <__gnu_unwind_execute+0x140>
 8003e8e:	4630      	mov	r0, r6
 8003e90:	f7ff feb6 	bl	8003c00 <next_unwind_byte>
 8003e94:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8003e98:	f000 030f 	and.w	r3, r0, #15
 8003e9c:	3210      	adds	r2, #16
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8003ea4:	e797      	b.n	8003dd6 <__gnu_unwind_execute+0x17e>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f10d 090c 	add.w	r9, sp, #12
 8003eac:	220d      	movs	r2, #13
 8003eae:	4619      	mov	r1, r3
 8003eb0:	f8cd 9000 	str.w	r9, [sp]
 8003eb4:	4628      	mov	r0, r5
 8003eb6:	f7ff faa5 	bl	8003404 <_Unwind_VRS_Get>
 8003eba:	4630      	mov	r0, r6
 8003ebc:	f7ff fea0 	bl	8003c00 <next_unwind_byte>
 8003ec0:	0602      	lsls	r2, r0, #24
 8003ec2:	f04f 0402 	mov.w	r4, #2
 8003ec6:	d50c      	bpl.n	8003ee2 <__gnu_unwind_execute+0x28a>
 8003ec8:	9b03      	ldr	r3, [sp, #12]
 8003eca:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8003ece:	40a0      	lsls	r0, r4
 8003ed0:	4418      	add	r0, r3
 8003ed2:	9003      	str	r0, [sp, #12]
 8003ed4:	4630      	mov	r0, r6
 8003ed6:	f7ff fe93 	bl	8003c00 <next_unwind_byte>
 8003eda:	0603      	lsls	r3, r0, #24
 8003edc:	f104 0407 	add.w	r4, r4, #7
 8003ee0:	d4f2      	bmi.n	8003ec8 <__gnu_unwind_execute+0x270>
 8003ee2:	9b03      	ldr	r3, [sp, #12]
 8003ee4:	f8cd 9000 	str.w	r9, [sp]
 8003ee8:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8003eec:	40a2      	lsls	r2, r4
 8003eee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003ef2:	441a      	add	r2, r3
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	9203      	str	r2, [sp, #12]
 8003ef8:	4619      	mov	r1, r3
 8003efa:	220d      	movs	r2, #13
 8003efc:	4628      	mov	r0, r5
 8003efe:	f7ff faa7 	bl	8003450 <_Unwind_VRS_Set>
 8003f02:	e6b0      	b.n	8003c66 <__gnu_unwind_execute+0xe>

08003f04 <__gnu_unwind_frame>:
 8003f04:	b510      	push	{r4, lr}
 8003f06:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8003f08:	6853      	ldr	r3, [r2, #4]
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	f04f 0c03 	mov.w	ip, #3
 8003f10:	3208      	adds	r2, #8
 8003f12:	021c      	lsls	r4, r3, #8
 8003f14:	4608      	mov	r0, r1
 8003f16:	0e1b      	lsrs	r3, r3, #24
 8003f18:	a901      	add	r1, sp, #4
 8003f1a:	9401      	str	r4, [sp, #4]
 8003f1c:	9202      	str	r2, [sp, #8]
 8003f1e:	f88d c00c 	strb.w	ip, [sp, #12]
 8003f22:	f88d 300d 	strb.w	r3, [sp, #13]
 8003f26:	f7ff fe97 	bl	8003c58 <__gnu_unwind_execute>
 8003f2a:	b004      	add	sp, #16
 8003f2c:	bd10      	pop	{r4, pc}
 8003f2e:	bf00      	nop

08003f30 <_Unwind_GetRegionStart>:
 8003f30:	b508      	push	{r3, lr}
 8003f32:	f7ff fe8f 	bl	8003c54 <unwind_UCB_from_context>
 8003f36:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8003f38:	bd08      	pop	{r3, pc}
 8003f3a:	bf00      	nop

08003f3c <_Unwind_GetLanguageSpecificData>:
 8003f3c:	b508      	push	{r3, lr}
 8003f3e:	f7ff fe89 	bl	8003c54 <unwind_UCB_from_context>
 8003f42:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8003f44:	79c3      	ldrb	r3, [r0, #7]
 8003f46:	3302      	adds	r3, #2
 8003f48:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003f4c:	bd08      	pop	{r3, pc}
 8003f4e:	bf00      	nop

08003f50 <__aeabi_idiv0>:
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop

08003f54 <abort>:
 8003f54:	b508      	push	{r3, lr}
 8003f56:	2006      	movs	r0, #6
 8003f58:	f000 f898 	bl	800408c <raise>
 8003f5c:	2001      	movs	r0, #1
 8003f5e:	f7fc fff5 	bl	8000f4c <_exit>
 8003f62:	bf00      	nop

08003f64 <_init_signal_r>:
 8003f64:	b538      	push	{r3, r4, r5, lr}
 8003f66:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003f68:	b10c      	cbz	r4, 8003f6e <_init_signal_r+0xa>
 8003f6a:	2000      	movs	r0, #0
 8003f6c:	bd38      	pop	{r3, r4, r5, pc}
 8003f6e:	2180      	movs	r1, #128	; 0x80
 8003f70:	4605      	mov	r5, r0
 8003f72:	f7fd fcb1 	bl	80018d8 <_malloc_r>
 8003f76:	4602      	mov	r2, r0
 8003f78:	6468      	str	r0, [r5, #68]	; 0x44
 8003f7a:	b130      	cbz	r0, 8003f8a <_init_signal_r+0x26>
 8003f7c:	1f03      	subs	r3, r0, #4
 8003f7e:	327c      	adds	r2, #124	; 0x7c
 8003f80:	f843 4f04 	str.w	r4, [r3, #4]!
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d1fb      	bne.n	8003f80 <_init_signal_r+0x1c>
 8003f88:	e7ef      	b.n	8003f6a <_init_signal_r+0x6>
 8003f8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f8e:	bd38      	pop	{r3, r4, r5, pc}

08003f90 <_signal_r>:
 8003f90:	291f      	cmp	r1, #31
 8003f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f94:	4605      	mov	r5, r0
 8003f96:	d808      	bhi.n	8003faa <_signal_r+0x1a>
 8003f98:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8003f9a:	460c      	mov	r4, r1
 8003f9c:	4617      	mov	r7, r2
 8003f9e:	b14e      	cbz	r6, 8003fb4 <_signal_r+0x24>
 8003fa0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003fa4:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 8003fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003faa:	2316      	movs	r3, #22
 8003fac:	6003      	str	r3, [r0, #0]
 8003fae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fb4:	2180      	movs	r1, #128	; 0x80
 8003fb6:	f7fd fc8f 	bl	80018d8 <_malloc_r>
 8003fba:	4606      	mov	r6, r0
 8003fbc:	6468      	str	r0, [r5, #68]	; 0x44
 8003fbe:	b140      	cbz	r0, 8003fd2 <_signal_r+0x42>
 8003fc0:	1f03      	subs	r3, r0, #4
 8003fc2:	f100 057c 	add.w	r5, r0, #124	; 0x7c
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	f843 1f04 	str.w	r1, [r3, #4]!
 8003fcc:	429d      	cmp	r5, r3
 8003fce:	d1fb      	bne.n	8003fc8 <_signal_r+0x38>
 8003fd0:	e7e6      	b.n	8003fa0 <_signal_r+0x10>
 8003fd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003fd8 <_raise_r>:
 8003fd8:	291f      	cmp	r1, #31
 8003fda:	b538      	push	{r3, r4, r5, lr}
 8003fdc:	4605      	mov	r5, r0
 8003fde:	d820      	bhi.n	8004022 <_raise_r+0x4a>
 8003fe0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003fe2:	460c      	mov	r4, r1
 8003fe4:	b16a      	cbz	r2, 8004002 <_raise_r+0x2a>
 8003fe6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003fea:	b153      	cbz	r3, 8004002 <_raise_r+0x2a>
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d016      	beq.n	800401e <_raise_r+0x46>
 8003ff0:	1c59      	adds	r1, r3, #1
 8003ff2:	d010      	beq.n	8004016 <_raise_r+0x3e>
 8003ff4:	2500      	movs	r5, #0
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 8003ffc:	4798      	blx	r3
 8003ffe:	4628      	mov	r0, r5
 8004000:	bd38      	pop	{r3, r4, r5, pc}
 8004002:	4628      	mov	r0, r5
 8004004:	f000 f8f8 	bl	80041f8 <_getpid_r>
 8004008:	4622      	mov	r2, r4
 800400a:	4601      	mov	r1, r0
 800400c:	4628      	mov	r0, r5
 800400e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004012:	f000 b8db 	b.w	80041cc <_kill_r>
 8004016:	2316      	movs	r3, #22
 8004018:	6003      	str	r3, [r0, #0]
 800401a:	2001      	movs	r0, #1
 800401c:	bd38      	pop	{r3, r4, r5, pc}
 800401e:	2000      	movs	r0, #0
 8004020:	bd38      	pop	{r3, r4, r5, pc}
 8004022:	2316      	movs	r3, #22
 8004024:	6003      	str	r3, [r0, #0]
 8004026:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800402a:	bd38      	pop	{r3, r4, r5, pc}

0800402c <__sigtramp_r>:
 800402c:	291f      	cmp	r1, #31
 800402e:	d82a      	bhi.n	8004086 <__sigtramp_r+0x5a>
 8004030:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004032:	b538      	push	{r3, r4, r5, lr}
 8004034:	460c      	mov	r4, r1
 8004036:	4605      	mov	r5, r0
 8004038:	b182      	cbz	r2, 800405c <__sigtramp_r+0x30>
 800403a:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 800403e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8004042:	b14b      	cbz	r3, 8004058 <__sigtramp_r+0x2c>
 8004044:	1c59      	adds	r1, r3, #1
 8004046:	d019      	beq.n	800407c <__sigtramp_r+0x50>
 8004048:	2b01      	cmp	r3, #1
 800404a:	d015      	beq.n	8004078 <__sigtramp_r+0x4c>
 800404c:	2500      	movs	r5, #0
 800404e:	4620      	mov	r0, r4
 8004050:	6015      	str	r5, [r2, #0]
 8004052:	4798      	blx	r3
 8004054:	4628      	mov	r0, r5
 8004056:	bd38      	pop	{r3, r4, r5, pc}
 8004058:	2001      	movs	r0, #1
 800405a:	bd38      	pop	{r3, r4, r5, pc}
 800405c:	2180      	movs	r1, #128	; 0x80
 800405e:	f7fd fc3b 	bl	80018d8 <_malloc_r>
 8004062:	4602      	mov	r2, r0
 8004064:	6468      	str	r0, [r5, #68]	; 0x44
 8004066:	b158      	cbz	r0, 8004080 <__sigtramp_r+0x54>
 8004068:	1f03      	subs	r3, r0, #4
 800406a:	2100      	movs	r1, #0
 800406c:	307c      	adds	r0, #124	; 0x7c
 800406e:	f843 1f04 	str.w	r1, [r3, #4]!
 8004072:	4298      	cmp	r0, r3
 8004074:	d1fb      	bne.n	800406e <__sigtramp_r+0x42>
 8004076:	e7e0      	b.n	800403a <__sigtramp_r+0xe>
 8004078:	2003      	movs	r0, #3
 800407a:	bd38      	pop	{r3, r4, r5, pc}
 800407c:	2002      	movs	r0, #2
 800407e:	bd38      	pop	{r3, r4, r5, pc}
 8004080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004084:	bd38      	pop	{r3, r4, r5, pc}
 8004086:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800408a:	4770      	bx	lr

0800408c <raise>:
 800408c:	b538      	push	{r3, r4, r5, lr}
 800408e:	4b14      	ldr	r3, [pc, #80]	; (80040e0 <raise+0x54>)
 8004090:	281f      	cmp	r0, #31
 8004092:	681d      	ldr	r5, [r3, #0]
 8004094:	d81f      	bhi.n	80040d6 <raise+0x4a>
 8004096:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8004098:	4604      	mov	r4, r0
 800409a:	b162      	cbz	r2, 80040b6 <raise+0x2a>
 800409c:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 80040a0:	b14b      	cbz	r3, 80040b6 <raise+0x2a>
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d015      	beq.n	80040d2 <raise+0x46>
 80040a6:	1c59      	adds	r1, r3, #1
 80040a8:	d00f      	beq.n	80040ca <raise+0x3e>
 80040aa:	2500      	movs	r5, #0
 80040ac:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 80040b0:	4798      	blx	r3
 80040b2:	4628      	mov	r0, r5
 80040b4:	bd38      	pop	{r3, r4, r5, pc}
 80040b6:	4628      	mov	r0, r5
 80040b8:	f000 f89e 	bl	80041f8 <_getpid_r>
 80040bc:	4622      	mov	r2, r4
 80040be:	4601      	mov	r1, r0
 80040c0:	4628      	mov	r0, r5
 80040c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040c6:	f000 b881 	b.w	80041cc <_kill_r>
 80040ca:	2316      	movs	r3, #22
 80040cc:	602b      	str	r3, [r5, #0]
 80040ce:	2001      	movs	r0, #1
 80040d0:	bd38      	pop	{r3, r4, r5, pc}
 80040d2:	2000      	movs	r0, #0
 80040d4:	bd38      	pop	{r3, r4, r5, pc}
 80040d6:	2316      	movs	r3, #22
 80040d8:	602b      	str	r3, [r5, #0]
 80040da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040de:	bd38      	pop	{r3, r4, r5, pc}
 80040e0:	20000004 	.word	0x20000004

080040e4 <signal>:
 80040e4:	4b12      	ldr	r3, [pc, #72]	; (8004130 <signal+0x4c>)
 80040e6:	281f      	cmp	r0, #31
 80040e8:	b570      	push	{r4, r5, r6, lr}
 80040ea:	681e      	ldr	r6, [r3, #0]
 80040ec:	d808      	bhi.n	8004100 <signal+0x1c>
 80040ee:	460d      	mov	r5, r1
 80040f0:	6c71      	ldr	r1, [r6, #68]	; 0x44
 80040f2:	4604      	mov	r4, r0
 80040f4:	b149      	cbz	r1, 800410a <signal+0x26>
 80040f6:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 80040fa:	f841 5024 	str.w	r5, [r1, r4, lsl #2]
 80040fe:	bd70      	pop	{r4, r5, r6, pc}
 8004100:	2316      	movs	r3, #22
 8004102:	6033      	str	r3, [r6, #0]
 8004104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004108:	bd70      	pop	{r4, r5, r6, pc}
 800410a:	2180      	movs	r1, #128	; 0x80
 800410c:	4630      	mov	r0, r6
 800410e:	f7fd fbe3 	bl	80018d8 <_malloc_r>
 8004112:	4601      	mov	r1, r0
 8004114:	6470      	str	r0, [r6, #68]	; 0x44
 8004116:	b140      	cbz	r0, 800412a <signal+0x46>
 8004118:	1f03      	subs	r3, r0, #4
 800411a:	f100 0c7c 	add.w	ip, r0, #124	; 0x7c
 800411e:	2200      	movs	r2, #0
 8004120:	f843 2f04 	str.w	r2, [r3, #4]!
 8004124:	4563      	cmp	r3, ip
 8004126:	d1fb      	bne.n	8004120 <signal+0x3c>
 8004128:	e7e5      	b.n	80040f6 <signal+0x12>
 800412a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800412e:	bd70      	pop	{r4, r5, r6, pc}
 8004130:	20000004 	.word	0x20000004

08004134 <_init_signal>:
 8004134:	b538      	push	{r3, r4, r5, lr}
 8004136:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <_init_signal+0x30>)
 8004138:	681d      	ldr	r5, [r3, #0]
 800413a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 800413c:	b10c      	cbz	r4, 8004142 <_init_signal+0xe>
 800413e:	2000      	movs	r0, #0
 8004140:	bd38      	pop	{r3, r4, r5, pc}
 8004142:	2180      	movs	r1, #128	; 0x80
 8004144:	4628      	mov	r0, r5
 8004146:	f7fd fbc7 	bl	80018d8 <_malloc_r>
 800414a:	6468      	str	r0, [r5, #68]	; 0x44
 800414c:	b138      	cbz	r0, 800415e <_init_signal+0x2a>
 800414e:	1f03      	subs	r3, r0, #4
 8004150:	f100 027c 	add.w	r2, r0, #124	; 0x7c
 8004154:	f843 4f04 	str.w	r4, [r3, #4]!
 8004158:	4293      	cmp	r3, r2
 800415a:	d1fb      	bne.n	8004154 <_init_signal+0x20>
 800415c:	e7ef      	b.n	800413e <_init_signal+0xa>
 800415e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004162:	bd38      	pop	{r3, r4, r5, pc}
 8004164:	20000004 	.word	0x20000004

08004168 <__sigtramp>:
 8004168:	b538      	push	{r3, r4, r5, lr}
 800416a:	4b17      	ldr	r3, [pc, #92]	; (80041c8 <__sigtramp+0x60>)
 800416c:	281f      	cmp	r0, #31
 800416e:	681d      	ldr	r5, [r3, #0]
 8004170:	d826      	bhi.n	80041c0 <__sigtramp+0x58>
 8004172:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8004174:	4604      	mov	r4, r0
 8004176:	b182      	cbz	r2, 800419a <__sigtramp+0x32>
 8004178:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 800417c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8004180:	b14b      	cbz	r3, 8004196 <__sigtramp+0x2e>
 8004182:	1c59      	adds	r1, r3, #1
 8004184:	d01a      	beq.n	80041bc <__sigtramp+0x54>
 8004186:	2b01      	cmp	r3, #1
 8004188:	d016      	beq.n	80041b8 <__sigtramp+0x50>
 800418a:	2500      	movs	r5, #0
 800418c:	4620      	mov	r0, r4
 800418e:	6015      	str	r5, [r2, #0]
 8004190:	4798      	blx	r3
 8004192:	4628      	mov	r0, r5
 8004194:	bd38      	pop	{r3, r4, r5, pc}
 8004196:	2001      	movs	r0, #1
 8004198:	bd38      	pop	{r3, r4, r5, pc}
 800419a:	2180      	movs	r1, #128	; 0x80
 800419c:	4628      	mov	r0, r5
 800419e:	f7fd fb9b 	bl	80018d8 <_malloc_r>
 80041a2:	4602      	mov	r2, r0
 80041a4:	6468      	str	r0, [r5, #68]	; 0x44
 80041a6:	b158      	cbz	r0, 80041c0 <__sigtramp+0x58>
 80041a8:	1f03      	subs	r3, r0, #4
 80041aa:	2100      	movs	r1, #0
 80041ac:	307c      	adds	r0, #124	; 0x7c
 80041ae:	f843 1f04 	str.w	r1, [r3, #4]!
 80041b2:	4283      	cmp	r3, r0
 80041b4:	d1fb      	bne.n	80041ae <__sigtramp+0x46>
 80041b6:	e7df      	b.n	8004178 <__sigtramp+0x10>
 80041b8:	2003      	movs	r0, #3
 80041ba:	bd38      	pop	{r3, r4, r5, pc}
 80041bc:	2002      	movs	r0, #2
 80041be:	bd38      	pop	{r3, r4, r5, pc}
 80041c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041c4:	bd38      	pop	{r3, r4, r5, pc}
 80041c6:	bf00      	nop
 80041c8:	20000004 	.word	0x20000004

080041cc <_kill_r>:
 80041cc:	b570      	push	{r4, r5, r6, lr}
 80041ce:	460c      	mov	r4, r1
 80041d0:	4d08      	ldr	r5, [pc, #32]	; (80041f4 <_kill_r+0x28>)
 80041d2:	4603      	mov	r3, r0
 80041d4:	2600      	movs	r6, #0
 80041d6:	4620      	mov	r0, r4
 80041d8:	4611      	mov	r1, r2
 80041da:	461c      	mov	r4, r3
 80041dc:	602e      	str	r6, [r5, #0]
 80041de:	f7fc fea7 	bl	8000f30 <_kill>
 80041e2:	1c43      	adds	r3, r0, #1
 80041e4:	d000      	beq.n	80041e8 <_kill_r+0x1c>
 80041e6:	bd70      	pop	{r4, r5, r6, pc}
 80041e8:	682b      	ldr	r3, [r5, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0fb      	beq.n	80041e6 <_kill_r+0x1a>
 80041ee:	6023      	str	r3, [r4, #0]
 80041f0:	bd70      	pop	{r4, r5, r6, pc}
 80041f2:	bf00      	nop
 80041f4:	2000025c 	.word	0x2000025c

080041f8 <_getpid_r>:
 80041f8:	f7fc be98 	b.w	8000f2c <_getpid>

080041fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80041fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004234 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004200:	480d      	ldr	r0, [pc, #52]	; (8004238 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004202:	490e      	ldr	r1, [pc, #56]	; (800423c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004204:	4a0e      	ldr	r2, [pc, #56]	; (8004240 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004208:	e002      	b.n	8004210 <LoopCopyDataInit>

0800420a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800420a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800420c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800420e:	3304      	adds	r3, #4

08004210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004214:	d3f9      	bcc.n	800420a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004216:	4a0b      	ldr	r2, [pc, #44]	; (8004244 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004218:	4c0b      	ldr	r4, [pc, #44]	; (8004248 <LoopFillZerobss+0x26>)
  movs r3, #0
 800421a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800421c:	e001      	b.n	8004222 <LoopFillZerobss>

0800421e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800421e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004220:	3204      	adds	r2, #4

08004222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004224:	d3fb      	bcc.n	800421e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004226:	f7fc ff8d 	bl	8001144 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800422a:	f7fd f9e3 	bl	80015f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800422e:	f7fc f893 	bl	8000358 <main>
  bx  lr    
 8004232:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004234:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800423c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8004240:	0800b948 	.word	0x0800b948
  ldr r2, =_sbss
 8004244:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8004248:	20004f78 	.word	0x20004f78

0800424c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800424c:	e7fe      	b.n	800424c <ADC_IRQHandler>
	...

08004250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004254:	4b0e      	ldr	r3, [pc, #56]	; (8004290 <HAL_Init+0x40>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a0d      	ldr	r2, [pc, #52]	; (8004290 <HAL_Init+0x40>)
 800425a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800425e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004260:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <HAL_Init+0x40>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a0a      	ldr	r2, [pc, #40]	; (8004290 <HAL_Init+0x40>)
 8004266:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800426a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800426c:	4b08      	ldr	r3, [pc, #32]	; (8004290 <HAL_Init+0x40>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a07      	ldr	r2, [pc, #28]	; (8004290 <HAL_Init+0x40>)
 8004272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004276:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004278:	2003      	movs	r0, #3
 800427a:	f000 f8d8 	bl	800442e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800427e:	200f      	movs	r0, #15
 8004280:	f7fc fdaa 	bl	8000dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004284:	f7fc fb98 	bl	80009b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40023c00 	.word	0x40023c00

08004294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004298:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <HAL_IncTick+0x20>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	461a      	mov	r2, r3
 800429e:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <HAL_IncTick+0x24>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4413      	add	r3, r2
 80042a4:	4a04      	ldr	r2, [pc, #16]	; (80042b8 <HAL_IncTick+0x24>)
 80042a6:	6013      	str	r3, [r2, #0]
}
 80042a8:	bf00      	nop
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	2000006c 	.word	0x2000006c
 80042b8:	20000260 	.word	0x20000260

080042bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  return uwTick;
 80042c0:	4b03      	ldr	r3, [pc, #12]	; (80042d0 <HAL_GetTick+0x14>)
 80042c2:	681b      	ldr	r3, [r3, #0]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	20000260 	.word	0x20000260

080042d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042e4:	4b0c      	ldr	r3, [pc, #48]	; (8004318 <__NVIC_SetPriorityGrouping+0x44>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042f0:	4013      	ands	r3, r2
 80042f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004306:	4a04      	ldr	r2, [pc, #16]	; (8004318 <__NVIC_SetPriorityGrouping+0x44>)
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	60d3      	str	r3, [r2, #12]
}
 800430c:	bf00      	nop
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	e000ed00 	.word	0xe000ed00

0800431c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004320:	4b04      	ldr	r3, [pc, #16]	; (8004334 <__NVIC_GetPriorityGrouping+0x18>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	0a1b      	lsrs	r3, r3, #8
 8004326:	f003 0307 	and.w	r3, r3, #7
}
 800432a:	4618      	mov	r0, r3
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	e000ed00 	.word	0xe000ed00

08004338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	4603      	mov	r3, r0
 8004340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004346:	2b00      	cmp	r3, #0
 8004348:	db0b      	blt.n	8004362 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800434a:	79fb      	ldrb	r3, [r7, #7]
 800434c:	f003 021f 	and.w	r2, r3, #31
 8004350:	4907      	ldr	r1, [pc, #28]	; (8004370 <__NVIC_EnableIRQ+0x38>)
 8004352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004356:	095b      	lsrs	r3, r3, #5
 8004358:	2001      	movs	r0, #1
 800435a:	fa00 f202 	lsl.w	r2, r0, r2
 800435e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004362:	bf00      	nop
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	e000e100 	.word	0xe000e100

08004374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	4603      	mov	r3, r0
 800437c:	6039      	str	r1, [r7, #0]
 800437e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004384:	2b00      	cmp	r3, #0
 8004386:	db0a      	blt.n	800439e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	b2da      	uxtb	r2, r3
 800438c:	490c      	ldr	r1, [pc, #48]	; (80043c0 <__NVIC_SetPriority+0x4c>)
 800438e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004392:	0112      	lsls	r2, r2, #4
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	440b      	add	r3, r1
 8004398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800439c:	e00a      	b.n	80043b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	4908      	ldr	r1, [pc, #32]	; (80043c4 <__NVIC_SetPriority+0x50>)
 80043a4:	79fb      	ldrb	r3, [r7, #7]
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	3b04      	subs	r3, #4
 80043ac:	0112      	lsls	r2, r2, #4
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	440b      	add	r3, r1
 80043b2:	761a      	strb	r2, [r3, #24]
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	e000e100 	.word	0xe000e100
 80043c4:	e000ed00 	.word	0xe000ed00

080043c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b089      	sub	sp, #36	; 0x24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	f1c3 0307 	rsb	r3, r3, #7
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	bf28      	it	cs
 80043e6:	2304      	movcs	r3, #4
 80043e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	3304      	adds	r3, #4
 80043ee:	2b06      	cmp	r3, #6
 80043f0:	d902      	bls.n	80043f8 <NVIC_EncodePriority+0x30>
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	3b03      	subs	r3, #3
 80043f6:	e000      	b.n	80043fa <NVIC_EncodePriority+0x32>
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	43da      	mvns	r2, r3
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	401a      	ands	r2, r3
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004410:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	fa01 f303 	lsl.w	r3, r1, r3
 800441a:	43d9      	mvns	r1, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004420:	4313      	orrs	r3, r2
         );
}
 8004422:	4618      	mov	r0, r3
 8004424:	3724      	adds	r7, #36	; 0x24
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b082      	sub	sp, #8
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7ff ff4c 	bl	80042d4 <__NVIC_SetPriorityGrouping>
}
 800443c:	bf00      	nop
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	4603      	mov	r3, r0
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004456:	f7ff ff61 	bl	800431c <__NVIC_GetPriorityGrouping>
 800445a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	68b9      	ldr	r1, [r7, #8]
 8004460:	6978      	ldr	r0, [r7, #20]
 8004462:	f7ff ffb1 	bl	80043c8 <NVIC_EncodePriority>
 8004466:	4602      	mov	r2, r0
 8004468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800446c:	4611      	mov	r1, r2
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff ff80 	bl	8004374 <__NVIC_SetPriority>
}
 8004474:	bf00      	nop
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	4603      	mov	r3, r0
 8004484:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448a:	4618      	mov	r0, r3
 800448c:	f7ff ff54 	bl	8004338 <__NVIC_EnableIRQ>
}
 8004490:	bf00      	nop
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004498:	b480      	push	{r7}
 800449a:	b089      	sub	sp, #36	; 0x24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ae:	2300      	movs	r3, #0
 80044b0:	61fb      	str	r3, [r7, #28]
 80044b2:	e16b      	b.n	800478c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044b4:	2201      	movs	r2, #1
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4013      	ands	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	f040 815a 	bne.w	8004786 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d005      	beq.n	80044ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d130      	bne.n	800454c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	005b      	lsls	r3, r3, #1
 80044f4:	2203      	movs	r2, #3
 80044f6:	fa02 f303 	lsl.w	r3, r2, r3
 80044fa:	43db      	mvns	r3, r3
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	4013      	ands	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	4313      	orrs	r3, r2
 8004512:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004520:	2201      	movs	r2, #1
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	43db      	mvns	r3, r3
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	4013      	ands	r3, r2
 800452e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	091b      	lsrs	r3, r3, #4
 8004536:	f003 0201 	and.w	r2, r3, #1
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	fa02 f303 	lsl.w	r3, r2, r3
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	4313      	orrs	r3, r2
 8004544:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 0303 	and.w	r3, r3, #3
 8004554:	2b03      	cmp	r3, #3
 8004556:	d017      	beq.n	8004588 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	2203      	movs	r2, #3
 8004564:	fa02 f303 	lsl.w	r3, r2, r3
 8004568:	43db      	mvns	r3, r3
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	4013      	ands	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	4313      	orrs	r3, r2
 8004580:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f003 0303 	and.w	r3, r3, #3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d123      	bne.n	80045dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	08da      	lsrs	r2, r3, #3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3208      	adds	r2, #8
 800459c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	220f      	movs	r2, #15
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	43db      	mvns	r3, r3
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	4013      	ands	r3, r2
 80045b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	08da      	lsrs	r2, r3, #3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3208      	adds	r2, #8
 80045d6:	69b9      	ldr	r1, [r7, #24]
 80045d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	2203      	movs	r2, #3
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	43db      	mvns	r3, r3
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	4013      	ands	r3, r2
 80045f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f003 0203 	and.w	r2, r3, #3
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	4313      	orrs	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 80b4 	beq.w	8004786 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800461e:	2300      	movs	r3, #0
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	4b60      	ldr	r3, [pc, #384]	; (80047a4 <HAL_GPIO_Init+0x30c>)
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	4a5f      	ldr	r2, [pc, #380]	; (80047a4 <HAL_GPIO_Init+0x30c>)
 8004628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800462c:	6453      	str	r3, [r2, #68]	; 0x44
 800462e:	4b5d      	ldr	r3, [pc, #372]	; (80047a4 <HAL_GPIO_Init+0x30c>)
 8004630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800463a:	4a5b      	ldr	r2, [pc, #364]	; (80047a8 <HAL_GPIO_Init+0x310>)
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	089b      	lsrs	r3, r3, #2
 8004640:	3302      	adds	r3, #2
 8004642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004646:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	220f      	movs	r2, #15
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	43db      	mvns	r3, r3
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	4013      	ands	r3, r2
 800465c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a52      	ldr	r2, [pc, #328]	; (80047ac <HAL_GPIO_Init+0x314>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d02b      	beq.n	80046be <HAL_GPIO_Init+0x226>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a51      	ldr	r2, [pc, #324]	; (80047b0 <HAL_GPIO_Init+0x318>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d025      	beq.n	80046ba <HAL_GPIO_Init+0x222>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a50      	ldr	r2, [pc, #320]	; (80047b4 <HAL_GPIO_Init+0x31c>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d01f      	beq.n	80046b6 <HAL_GPIO_Init+0x21e>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a4f      	ldr	r2, [pc, #316]	; (80047b8 <HAL_GPIO_Init+0x320>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d019      	beq.n	80046b2 <HAL_GPIO_Init+0x21a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a4e      	ldr	r2, [pc, #312]	; (80047bc <HAL_GPIO_Init+0x324>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d013      	beq.n	80046ae <HAL_GPIO_Init+0x216>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a4d      	ldr	r2, [pc, #308]	; (80047c0 <HAL_GPIO_Init+0x328>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00d      	beq.n	80046aa <HAL_GPIO_Init+0x212>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a4c      	ldr	r2, [pc, #304]	; (80047c4 <HAL_GPIO_Init+0x32c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d007      	beq.n	80046a6 <HAL_GPIO_Init+0x20e>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a4b      	ldr	r2, [pc, #300]	; (80047c8 <HAL_GPIO_Init+0x330>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d101      	bne.n	80046a2 <HAL_GPIO_Init+0x20a>
 800469e:	2307      	movs	r3, #7
 80046a0:	e00e      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046a2:	2308      	movs	r3, #8
 80046a4:	e00c      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046a6:	2306      	movs	r3, #6
 80046a8:	e00a      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046aa:	2305      	movs	r3, #5
 80046ac:	e008      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046ae:	2304      	movs	r3, #4
 80046b0:	e006      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046b2:	2303      	movs	r3, #3
 80046b4:	e004      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046b6:	2302      	movs	r3, #2
 80046b8:	e002      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <HAL_GPIO_Init+0x228>
 80046be:	2300      	movs	r3, #0
 80046c0:	69fa      	ldr	r2, [r7, #28]
 80046c2:	f002 0203 	and.w	r2, r2, #3
 80046c6:	0092      	lsls	r2, r2, #2
 80046c8:	4093      	lsls	r3, r2
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046d0:	4935      	ldr	r1, [pc, #212]	; (80047a8 <HAL_GPIO_Init+0x310>)
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	089b      	lsrs	r3, r3, #2
 80046d6:	3302      	adds	r3, #2
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046de:	4b3b      	ldr	r3, [pc, #236]	; (80047cc <HAL_GPIO_Init+0x334>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	43db      	mvns	r3, r3
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	4013      	ands	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004702:	4a32      	ldr	r2, [pc, #200]	; (80047cc <HAL_GPIO_Init+0x334>)
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004708:	4b30      	ldr	r3, [pc, #192]	; (80047cc <HAL_GPIO_Init+0x334>)
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	43db      	mvns	r3, r3
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	4013      	ands	r3, r2
 8004716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	4313      	orrs	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800472c:	4a27      	ldr	r2, [pc, #156]	; (80047cc <HAL_GPIO_Init+0x334>)
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004732:	4b26      	ldr	r3, [pc, #152]	; (80047cc <HAL_GPIO_Init+0x334>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	43db      	mvns	r3, r3
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4013      	ands	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	4313      	orrs	r3, r2
 8004754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004756:	4a1d      	ldr	r2, [pc, #116]	; (80047cc <HAL_GPIO_Init+0x334>)
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800475c:	4b1b      	ldr	r3, [pc, #108]	; (80047cc <HAL_GPIO_Init+0x334>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	43db      	mvns	r3, r3
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	4013      	ands	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004780:	4a12      	ldr	r2, [pc, #72]	; (80047cc <HAL_GPIO_Init+0x334>)
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	3301      	adds	r3, #1
 800478a:	61fb      	str	r3, [r7, #28]
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	2b0f      	cmp	r3, #15
 8004790:	f67f ae90 	bls.w	80044b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004794:	bf00      	nop
 8004796:	bf00      	nop
 8004798:	3724      	adds	r7, #36	; 0x24
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	40023800 	.word	0x40023800
 80047a8:	40013800 	.word	0x40013800
 80047ac:	40020000 	.word	0x40020000
 80047b0:	40020400 	.word	0x40020400
 80047b4:	40020800 	.word	0x40020800
 80047b8:	40020c00 	.word	0x40020c00
 80047bc:	40021000 	.word	0x40021000
 80047c0:	40021400 	.word	0x40021400
 80047c4:	40021800 	.word	0x40021800
 80047c8:	40021c00 	.word	0x40021c00
 80047cc:	40013c00 	.word	0x40013c00

080047d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047da:	2300      	movs	r3, #0
 80047dc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80047de:	2300      	movs	r3, #0
 80047e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047e6:	2300      	movs	r3, #0
 80047e8:	617b      	str	r3, [r7, #20]
 80047ea:	e0cd      	b.n	8004988 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047ec:	2201      	movs	r2, #1
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	4013      	ands	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	429a      	cmp	r2, r3
 8004804:	f040 80bd 	bne.w	8004982 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004808:	4a65      	ldr	r2, [pc, #404]	; (80049a0 <HAL_GPIO_DeInit+0x1d0>)
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	089b      	lsrs	r3, r3, #2
 800480e:	3302      	adds	r3, #2
 8004810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004814:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f003 0303 	and.w	r3, r3, #3
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	220f      	movs	r2, #15
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	4013      	ands	r3, r2
 8004828:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a5d      	ldr	r2, [pc, #372]	; (80049a4 <HAL_GPIO_DeInit+0x1d4>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d02b      	beq.n	800488a <HAL_GPIO_DeInit+0xba>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a5c      	ldr	r2, [pc, #368]	; (80049a8 <HAL_GPIO_DeInit+0x1d8>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d025      	beq.n	8004886 <HAL_GPIO_DeInit+0xb6>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a5b      	ldr	r2, [pc, #364]	; (80049ac <HAL_GPIO_DeInit+0x1dc>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d01f      	beq.n	8004882 <HAL_GPIO_DeInit+0xb2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a5a      	ldr	r2, [pc, #360]	; (80049b0 <HAL_GPIO_DeInit+0x1e0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d019      	beq.n	800487e <HAL_GPIO_DeInit+0xae>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a59      	ldr	r2, [pc, #356]	; (80049b4 <HAL_GPIO_DeInit+0x1e4>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d013      	beq.n	800487a <HAL_GPIO_DeInit+0xaa>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a58      	ldr	r2, [pc, #352]	; (80049b8 <HAL_GPIO_DeInit+0x1e8>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00d      	beq.n	8004876 <HAL_GPIO_DeInit+0xa6>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a57      	ldr	r2, [pc, #348]	; (80049bc <HAL_GPIO_DeInit+0x1ec>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d007      	beq.n	8004872 <HAL_GPIO_DeInit+0xa2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a56      	ldr	r2, [pc, #344]	; (80049c0 <HAL_GPIO_DeInit+0x1f0>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d101      	bne.n	800486e <HAL_GPIO_DeInit+0x9e>
 800486a:	2307      	movs	r3, #7
 800486c:	e00e      	b.n	800488c <HAL_GPIO_DeInit+0xbc>
 800486e:	2308      	movs	r3, #8
 8004870:	e00c      	b.n	800488c <HAL_GPIO_DeInit+0xbc>
 8004872:	2306      	movs	r3, #6
 8004874:	e00a      	b.n	800488c <HAL_GPIO_DeInit+0xbc>
 8004876:	2305      	movs	r3, #5
 8004878:	e008      	b.n	800488c <HAL_GPIO_DeInit+0xbc>
 800487a:	2304      	movs	r3, #4
 800487c:	e006      	b.n	800488c <HAL_GPIO_DeInit+0xbc>
 800487e:	2303      	movs	r3, #3
 8004880:	e004      	b.n	800488c <HAL_GPIO_DeInit+0xbc>
 8004882:	2302      	movs	r3, #2
 8004884:	e002      	b.n	800488c <HAL_GPIO_DeInit+0xbc>
 8004886:	2301      	movs	r3, #1
 8004888:	e000      	b.n	800488c <HAL_GPIO_DeInit+0xbc>
 800488a:	2300      	movs	r3, #0
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	f002 0203 	and.w	r2, r2, #3
 8004892:	0092      	lsls	r2, r2, #2
 8004894:	4093      	lsls	r3, r2
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	429a      	cmp	r2, r3
 800489a:	d132      	bne.n	8004902 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800489c:	4b49      	ldr	r3, [pc, #292]	; (80049c4 <HAL_GPIO_DeInit+0x1f4>)
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	43db      	mvns	r3, r3
 80048a4:	4947      	ldr	r1, [pc, #284]	; (80049c4 <HAL_GPIO_DeInit+0x1f4>)
 80048a6:	4013      	ands	r3, r2
 80048a8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80048aa:	4b46      	ldr	r3, [pc, #280]	; (80049c4 <HAL_GPIO_DeInit+0x1f4>)
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	43db      	mvns	r3, r3
 80048b2:	4944      	ldr	r1, [pc, #272]	; (80049c4 <HAL_GPIO_DeInit+0x1f4>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80048b8:	4b42      	ldr	r3, [pc, #264]	; (80049c4 <HAL_GPIO_DeInit+0x1f4>)
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	43db      	mvns	r3, r3
 80048c0:	4940      	ldr	r1, [pc, #256]	; (80049c4 <HAL_GPIO_DeInit+0x1f4>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80048c6:	4b3f      	ldr	r3, [pc, #252]	; (80049c4 <HAL_GPIO_DeInit+0x1f4>)
 80048c8:	689a      	ldr	r2, [r3, #8]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	43db      	mvns	r3, r3
 80048ce:	493d      	ldr	r1, [pc, #244]	; (80049c4 <HAL_GPIO_DeInit+0x1f4>)
 80048d0:	4013      	ands	r3, r2
 80048d2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	220f      	movs	r2, #15
 80048de:	fa02 f303 	lsl.w	r3, r2, r3
 80048e2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80048e4:	4a2e      	ldr	r2, [pc, #184]	; (80049a0 <HAL_GPIO_DeInit+0x1d0>)
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	089b      	lsrs	r3, r3, #2
 80048ea:	3302      	adds	r3, #2
 80048ec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	43da      	mvns	r2, r3
 80048f4:	482a      	ldr	r0, [pc, #168]	; (80049a0 <HAL_GPIO_DeInit+0x1d0>)
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	089b      	lsrs	r3, r3, #2
 80048fa:	400a      	ands	r2, r1
 80048fc:	3302      	adds	r3, #2
 80048fe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	2103      	movs	r1, #3
 800490c:	fa01 f303 	lsl.w	r3, r1, r3
 8004910:	43db      	mvns	r3, r3
 8004912:	401a      	ands	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	08da      	lsrs	r2, r3, #3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3208      	adds	r2, #8
 8004920:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	f003 0307 	and.w	r3, r3, #7
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	220f      	movs	r2, #15
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	43db      	mvns	r3, r3
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	08d2      	lsrs	r2, r2, #3
 8004938:	4019      	ands	r1, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	3208      	adds	r2, #8
 800493e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	2103      	movs	r1, #3
 800494c:	fa01 f303 	lsl.w	r3, r1, r3
 8004950:	43db      	mvns	r3, r3
 8004952:	401a      	ands	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	2101      	movs	r1, #1
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	fa01 f303 	lsl.w	r3, r1, r3
 8004964:	43db      	mvns	r3, r3
 8004966:	401a      	ands	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	2103      	movs	r1, #3
 8004976:	fa01 f303 	lsl.w	r3, r1, r3
 800497a:	43db      	mvns	r3, r3
 800497c:	401a      	ands	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	3301      	adds	r3, #1
 8004986:	617b      	str	r3, [r7, #20]
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	2b0f      	cmp	r3, #15
 800498c:	f67f af2e 	bls.w	80047ec <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004990:	bf00      	nop
 8004992:	bf00      	nop
 8004994:	371c      	adds	r7, #28
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40013800 	.word	0x40013800
 80049a4:	40020000 	.word	0x40020000
 80049a8:	40020400 	.word	0x40020400
 80049ac:	40020800 	.word	0x40020800
 80049b0:	40020c00 	.word	0x40020c00
 80049b4:	40021000 	.word	0x40021000
 80049b8:	40021400 	.word	0x40021400
 80049bc:	40021800 	.word	0x40021800
 80049c0:	40021c00 	.word	0x40021c00
 80049c4:	40013c00 	.word	0x40013c00

080049c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	807b      	strh	r3, [r7, #2]
 80049d4:	4613      	mov	r3, r2
 80049d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049d8:	787b      	ldrb	r3, [r7, #1]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049de:	887a      	ldrh	r2, [r7, #2]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049e4:	e003      	b.n	80049ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049e6:	887b      	ldrh	r3, [r7, #2]
 80049e8:	041a      	lsls	r2, r3, #16
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	619a      	str	r2, [r3, #24]
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b086      	sub	sp, #24
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f003 fcf4 	bl	80083fe <USB_GetMode>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	f040 80f6 	bne.w	8004c0a <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f003 fcd8 	bl	80083d8 <USB_ReadInterrupts>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 80ec 	beq.w	8004c08 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f003 fccf 	bl	80083d8 <USB_ReadInterrupts>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a44:	d104      	bne.n	8004a50 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004a4e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f003 fcbf 	bl	80083d8 <USB_ReadInterrupts>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a64:	d104      	bne.n	8004a70 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a6e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f003 fcaf 	bl	80083d8 <USB_ReadInterrupts>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a84:	d104      	bne.n	8004a90 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004a8e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f003 fc9f 	bl	80083d8 <USB_ReadInterrupts>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d103      	bne.n	8004aac <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f003 fc91 	bl	80083d8 <USB_ReadInterrupts>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004abc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ac0:	d11c      	bne.n	8004afc <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004aca:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10f      	bne.n	8004afc <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004adc:	2110      	movs	r1, #16
 8004ade:	6938      	ldr	r0, [r7, #16]
 8004ae0:	f003 fbbe 	bl	8008260 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004ae4:	6938      	ldr	r0, [r7, #16]
 8004ae6:	f003 fbef 	bl	80082c8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2101      	movs	r1, #1
 8004af0:	4618      	mov	r0, r3
 8004af2:	f003 fc92 	bl	800841a <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f006 fd7c 	bl	800b5f4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f003 fc69 	bl	80083d8 <USB_ReadInterrupts>
 8004b06:	4603      	mov	r3, r0
 8004b08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b10:	d102      	bne.n	8004b18 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f001 f829 	bl	8005b6a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f003 fc5b 	bl	80083d8 <USB_ReadInterrupts>
 8004b22:	4603      	mov	r3, r0
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	d106      	bne.n	8004b3a <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f006 fd45 	bl	800b5bc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2208      	movs	r2, #8
 8004b38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f003 fc4a 	bl	80083d8 <USB_ReadInterrupts>
 8004b44:	4603      	mov	r3, r0
 8004b46:	f003 0310 	and.w	r3, r3, #16
 8004b4a:	2b10      	cmp	r3, #16
 8004b4c:	d101      	bne.n	8004b52 <HAL_HCD_IRQHandler+0x158>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e000      	b.n	8004b54 <HAL_HCD_IRQHandler+0x15a>
 8004b52:	2300      	movs	r3, #0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d012      	beq.n	8004b7e <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699a      	ldr	r2, [r3, #24]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0210 	bic.w	r2, r2, #16
 8004b66:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 ff2c 	bl	80059c6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	699a      	ldr	r2, [r3, #24]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f042 0210 	orr.w	r2, r2, #16
 8004b7c:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f003 fc28 	bl	80083d8 <USB_ReadInterrupts>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b92:	d13a      	bne.n	8004c0a <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f003 fc78 	bl	800848e <USB_HC_ReadInterrupt>
 8004b9e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	617b      	str	r3, [r7, #20]
 8004ba4:	e025      	b.n	8004bf2 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f003 030f 	and.w	r3, r3, #15
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d018      	beq.n	8004bec <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bd0:	d106      	bne.n	8004be0 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f836 	bl	8004c4a <HCD_HC_IN_IRQHandler>
 8004bde:	e005      	b.n	8004bec <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	4619      	mov	r1, r3
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fb84 	bl	80052f4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	617b      	str	r3, [r7, #20]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d3d4      	bcc.n	8004ba6 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c04:	615a      	str	r2, [r3, #20]
 8004c06:	e000      	b.n	8004c0a <HAL_HCD_IRQHandler+0x210>
      return;
 8004c08:	bf00      	nop
    }
  }
}
 8004c0a:	3718      	adds	r7, #24
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d101      	bne.n	8004c26 <HAL_HCD_Stop+0x16>
 8004c22:	2302      	movs	r3, #2
 8004c24:	e00d      	b.n	8004c42 <HAL_HCD_Stop+0x32>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f003 fd38 	bl	80086a8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b086      	sub	sp, #24
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
 8004c52:	460b      	mov	r3, r1
 8004c54:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004c60:	78fb      	ldrb	r3, [r7, #3]
 8004c62:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 0304 	and.w	r3, r3, #4
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d11a      	bne.n	8004cb0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c86:	461a      	mov	r2, r3
 8004c88:	2304      	movs	r3, #4
 8004c8a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	212c      	movs	r1, #44	; 0x2c
 8004c92:	fb01 f303 	mul.w	r3, r1, r3
 8004c96:	4413      	add	r3, r2
 8004c98:	3361      	adds	r3, #97	; 0x61
 8004c9a:	2206      	movs	r2, #6
 8004c9c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	b2d2      	uxtb	r2, r2
 8004ca6:	4611      	mov	r1, r2
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f003 fc01 	bl	80084b0 <USB_HC_Halt>
 8004cae:	e0af      	b.n	8004e10 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cc6:	d11b      	bne.n	8004d00 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cda:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	212c      	movs	r1, #44	; 0x2c
 8004ce2:	fb01 f303 	mul.w	r3, r1, r3
 8004ce6:	4413      	add	r3, r2
 8004ce8:	3361      	adds	r3, #97	; 0x61
 8004cea:	2207      	movs	r2, #7
 8004cec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	b2d2      	uxtb	r2, r2
 8004cf6:	4611      	mov	r1, r2
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f003 fbd9 	bl	80084b0 <USB_HC_Halt>
 8004cfe:	e087      	b.n	8004e10 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 0320 	and.w	r3, r3, #32
 8004d12:	2b20      	cmp	r3, #32
 8004d14:	d109      	bne.n	8004d2a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d22:	461a      	mov	r2, r3
 8004d24:	2320      	movs	r3, #32
 8004d26:	6093      	str	r3, [r2, #8]
 8004d28:	e072      	b.n	8004e10 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d11a      	bne.n	8004d76 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	2308      	movs	r3, #8
 8004d50:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	212c      	movs	r1, #44	; 0x2c
 8004d58:	fb01 f303 	mul.w	r3, r1, r3
 8004d5c:	4413      	add	r3, r2
 8004d5e:	3361      	adds	r3, #97	; 0x61
 8004d60:	2205      	movs	r2, #5
 8004d62:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	4611      	mov	r1, r2
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f003 fb9e 	bl	80084b0 <USB_HC_Halt>
 8004d74:	e04c      	b.n	8004e10 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d8c:	d11b      	bne.n	8004dc6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004da0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	212c      	movs	r1, #44	; 0x2c
 8004da8:	fb01 f303 	mul.w	r3, r1, r3
 8004dac:	4413      	add	r3, r2
 8004dae:	3361      	adds	r3, #97	; 0x61
 8004db0:	2208      	movs	r2, #8
 8004db2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	b2d2      	uxtb	r2, r2
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f003 fb76 	bl	80084b0 <USB_HC_Halt>
 8004dc4:	e024      	b.n	8004e10 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd8:	2b80      	cmp	r3, #128	; 0x80
 8004dda:	d119      	bne.n	8004e10 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de8:	461a      	mov	r2, r3
 8004dea:	2380      	movs	r3, #128	; 0x80
 8004dec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	212c      	movs	r1, #44	; 0x2c
 8004df4:	fb01 f303 	mul.w	r3, r1, r3
 8004df8:	4413      	add	r3, r2
 8004dfa:	3361      	adds	r3, #97	; 0x61
 8004dfc:	2206      	movs	r2, #6
 8004dfe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	b2d2      	uxtb	r2, r2
 8004e08:	4611      	mov	r1, r2
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f003 fb50 	bl	80084b0 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e26:	d112      	bne.n	8004e4e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	4611      	mov	r1, r2
 8004e32:	4618      	mov	r0, r3
 8004e34:	f003 fb3c 	bl	80084b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e44:	461a      	mov	r2, r3
 8004e46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e4a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004e4c:	e24e      	b.n	80052ec <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	f040 80df 	bne.w	8005024 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d019      	beq.n	8004ea2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	212c      	movs	r1, #44	; 0x2c
 8004e74:	fb01 f303 	mul.w	r3, r1, r3
 8004e78:	4413      	add	r3, r2
 8004e7a:	3348      	adds	r3, #72	; 0x48
 8004e7c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	0159      	lsls	r1, r3, #5
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	440b      	add	r3, r1
 8004e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004e90:	1ad2      	subs	r2, r2, r3
 8004e92:	6879      	ldr	r1, [r7, #4]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	202c      	movs	r0, #44	; 0x2c
 8004e98:	fb00 f303 	mul.w	r3, r0, r3
 8004e9c:	440b      	add	r3, r1
 8004e9e:	3350      	adds	r3, #80	; 0x50
 8004ea0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	212c      	movs	r1, #44	; 0x2c
 8004ea8:	fb01 f303 	mul.w	r3, r1, r3
 8004eac:	4413      	add	r3, r2
 8004eae:	3361      	adds	r3, #97	; 0x61
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	212c      	movs	r1, #44	; 0x2c
 8004eba:	fb01 f303 	mul.w	r3, r1, r3
 8004ebe:	4413      	add	r3, r2
 8004ec0:	335c      	adds	r3, #92	; 0x5c
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	212c      	movs	r1, #44	; 0x2c
 8004ede:	fb01 f303 	mul.w	r3, r1, r3
 8004ee2:	4413      	add	r3, r2
 8004ee4:	333f      	adds	r3, #63	; 0x3f
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d009      	beq.n	8004f00 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	212c      	movs	r1, #44	; 0x2c
 8004ef2:	fb01 f303 	mul.w	r3, r1, r3
 8004ef6:	4413      	add	r3, r2
 8004ef8:	333f      	adds	r3, #63	; 0x3f
 8004efa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d111      	bne.n	8004f24 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	b2d2      	uxtb	r2, r2
 8004f08:	4611      	mov	r1, r2
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f003 fad0 	bl	80084b0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	015a      	lsls	r2, r3, #5
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	2310      	movs	r3, #16
 8004f20:	6093      	str	r3, [r2, #8]
 8004f22:	e03a      	b.n	8004f9a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	212c      	movs	r1, #44	; 0x2c
 8004f2a:	fb01 f303 	mul.w	r3, r1, r3
 8004f2e:	4413      	add	r3, r2
 8004f30:	333f      	adds	r3, #63	; 0x3f
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	2b03      	cmp	r3, #3
 8004f36:	d009      	beq.n	8004f4c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	212c      	movs	r1, #44	; 0x2c
 8004f3e:	fb01 f303 	mul.w	r3, r1, r3
 8004f42:	4413      	add	r3, r2
 8004f44:	333f      	adds	r3, #63	; 0x3f
 8004f46:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d126      	bne.n	8004f9a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	0151      	lsls	r1, r2, #5
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	440a      	add	r2, r1
 8004f62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f6a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	212c      	movs	r1, #44	; 0x2c
 8004f72:	fb01 f303 	mul.w	r3, r1, r3
 8004f76:	4413      	add	r3, r2
 8004f78:	3360      	adds	r3, #96	; 0x60
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	b2d9      	uxtb	r1, r3
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	202c      	movs	r0, #44	; 0x2c
 8004f88:	fb00 f303 	mul.w	r3, r0, r3
 8004f8c:	4413      	add	r3, r2
 8004f8e:	3360      	adds	r3, #96	; 0x60
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f006 fb3b 	bl	800b610 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d12b      	bne.n	8004ffa <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	212c      	movs	r1, #44	; 0x2c
 8004fa8:	fb01 f303 	mul.w	r3, r1, r3
 8004fac:	4413      	add	r3, r2
 8004fae:	3348      	adds	r3, #72	; 0x48
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	202c      	movs	r0, #44	; 0x2c
 8004fb8:	fb00 f202 	mul.w	r2, r0, r2
 8004fbc:	440a      	add	r2, r1
 8004fbe:	3240      	adds	r2, #64	; 0x40
 8004fc0:	8812      	ldrh	r2, [r2, #0]
 8004fc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 818e 	beq.w	80052ec <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	212c      	movs	r1, #44	; 0x2c
 8004fd6:	fb01 f303 	mul.w	r3, r1, r3
 8004fda:	4413      	add	r3, r2
 8004fdc:	3354      	adds	r3, #84	; 0x54
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	f083 0301 	eor.w	r3, r3, #1
 8004fe4:	b2d8      	uxtb	r0, r3
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	212c      	movs	r1, #44	; 0x2c
 8004fec:	fb01 f303 	mul.w	r3, r1, r3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	3354      	adds	r3, #84	; 0x54
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	701a      	strb	r2, [r3, #0]
}
 8004ff8:	e178      	b.n	80052ec <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	212c      	movs	r1, #44	; 0x2c
 8005000:	fb01 f303 	mul.w	r3, r1, r3
 8005004:	4413      	add	r3, r2
 8005006:	3354      	adds	r3, #84	; 0x54
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	f083 0301 	eor.w	r3, r3, #1
 800500e:	b2d8      	uxtb	r0, r3
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	212c      	movs	r1, #44	; 0x2c
 8005016:	fb01 f303 	mul.w	r3, r1, r3
 800501a:	4413      	add	r3, r2
 800501c:	3354      	adds	r3, #84	; 0x54
 800501e:	4602      	mov	r2, r0
 8005020:	701a      	strb	r2, [r3, #0]
}
 8005022:	e163      	b.n	80052ec <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	4413      	add	r3, r2
 800502c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b02      	cmp	r3, #2
 8005038:	f040 80f6 	bne.w	8005228 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	212c      	movs	r1, #44	; 0x2c
 8005042:	fb01 f303 	mul.w	r3, r1, r3
 8005046:	4413      	add	r3, r2
 8005048:	3361      	adds	r3, #97	; 0x61
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d109      	bne.n	8005064 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	212c      	movs	r1, #44	; 0x2c
 8005056:	fb01 f303 	mul.w	r3, r1, r3
 800505a:	4413      	add	r3, r2
 800505c:	3360      	adds	r3, #96	; 0x60
 800505e:	2201      	movs	r2, #1
 8005060:	701a      	strb	r2, [r3, #0]
 8005062:	e0c9      	b.n	80051f8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	212c      	movs	r1, #44	; 0x2c
 800506a:	fb01 f303 	mul.w	r3, r1, r3
 800506e:	4413      	add	r3, r2
 8005070:	3361      	adds	r3, #97	; 0x61
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	2b05      	cmp	r3, #5
 8005076:	d109      	bne.n	800508c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	212c      	movs	r1, #44	; 0x2c
 800507e:	fb01 f303 	mul.w	r3, r1, r3
 8005082:	4413      	add	r3, r2
 8005084:	3360      	adds	r3, #96	; 0x60
 8005086:	2205      	movs	r2, #5
 8005088:	701a      	strb	r2, [r3, #0]
 800508a:	e0b5      	b.n	80051f8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	212c      	movs	r1, #44	; 0x2c
 8005092:	fb01 f303 	mul.w	r3, r1, r3
 8005096:	4413      	add	r3, r2
 8005098:	3361      	adds	r3, #97	; 0x61
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	2b06      	cmp	r3, #6
 800509e:	d009      	beq.n	80050b4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	212c      	movs	r1, #44	; 0x2c
 80050a6:	fb01 f303 	mul.w	r3, r1, r3
 80050aa:	4413      	add	r3, r2
 80050ac:	3361      	adds	r3, #97	; 0x61
 80050ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d150      	bne.n	8005156 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	212c      	movs	r1, #44	; 0x2c
 80050ba:	fb01 f303 	mul.w	r3, r1, r3
 80050be:	4413      	add	r3, r2
 80050c0:	335c      	adds	r3, #92	; 0x5c
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	6879      	ldr	r1, [r7, #4]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	202c      	movs	r0, #44	; 0x2c
 80050cc:	fb00 f303 	mul.w	r3, r0, r3
 80050d0:	440b      	add	r3, r1
 80050d2:	335c      	adds	r3, #92	; 0x5c
 80050d4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	212c      	movs	r1, #44	; 0x2c
 80050dc:	fb01 f303 	mul.w	r3, r1, r3
 80050e0:	4413      	add	r3, r2
 80050e2:	335c      	adds	r3, #92	; 0x5c
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d912      	bls.n	8005110 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	212c      	movs	r1, #44	; 0x2c
 80050f0:	fb01 f303 	mul.w	r3, r1, r3
 80050f4:	4413      	add	r3, r2
 80050f6:	335c      	adds	r3, #92	; 0x5c
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	212c      	movs	r1, #44	; 0x2c
 8005102:	fb01 f303 	mul.w	r3, r1, r3
 8005106:	4413      	add	r3, r2
 8005108:	3360      	adds	r3, #96	; 0x60
 800510a:	2204      	movs	r2, #4
 800510c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800510e:	e073      	b.n	80051f8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	212c      	movs	r1, #44	; 0x2c
 8005116:	fb01 f303 	mul.w	r3, r1, r3
 800511a:	4413      	add	r3, r2
 800511c:	3360      	adds	r3, #96	; 0x60
 800511e:	2202      	movs	r2, #2
 8005120:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	4413      	add	r3, r2
 800512a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005138:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005140:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	4413      	add	r3, r2
 800514a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800514e:	461a      	mov	r2, r3
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005154:	e050      	b.n	80051f8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	212c      	movs	r1, #44	; 0x2c
 800515c:	fb01 f303 	mul.w	r3, r1, r3
 8005160:	4413      	add	r3, r2
 8005162:	3361      	adds	r3, #97	; 0x61
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	2b03      	cmp	r3, #3
 8005168:	d122      	bne.n	80051b0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	212c      	movs	r1, #44	; 0x2c
 8005170:	fb01 f303 	mul.w	r3, r1, r3
 8005174:	4413      	add	r3, r2
 8005176:	3360      	adds	r3, #96	; 0x60
 8005178:	2202      	movs	r2, #2
 800517a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	4413      	add	r3, r2
 8005184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005192:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800519a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a8:	461a      	mov	r2, r3
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	e023      	b.n	80051f8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	212c      	movs	r1, #44	; 0x2c
 80051b6:	fb01 f303 	mul.w	r3, r1, r3
 80051ba:	4413      	add	r3, r2
 80051bc:	3361      	adds	r3, #97	; 0x61
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2b07      	cmp	r3, #7
 80051c2:	d119      	bne.n	80051f8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	212c      	movs	r1, #44	; 0x2c
 80051ca:	fb01 f303 	mul.w	r3, r1, r3
 80051ce:	4413      	add	r3, r2
 80051d0:	335c      	adds	r3, #92	; 0x5c
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	6879      	ldr	r1, [r7, #4]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	202c      	movs	r0, #44	; 0x2c
 80051dc:	fb00 f303 	mul.w	r3, r0, r3
 80051e0:	440b      	add	r3, r1
 80051e2:	335c      	adds	r3, #92	; 0x5c
 80051e4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	212c      	movs	r1, #44	; 0x2c
 80051ec:	fb01 f303 	mul.w	r3, r1, r3
 80051f0:	4413      	add	r3, r2
 80051f2:	3360      	adds	r3, #96	; 0x60
 80051f4:	2204      	movs	r2, #4
 80051f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005204:	461a      	mov	r2, r3
 8005206:	2302      	movs	r3, #2
 8005208:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	b2d9      	uxtb	r1, r3
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	202c      	movs	r0, #44	; 0x2c
 8005214:	fb00 f303 	mul.w	r3, r0, r3
 8005218:	4413      	add	r3, r2
 800521a:	3360      	adds	r3, #96	; 0x60
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	461a      	mov	r2, r3
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f006 f9f5 	bl	800b610 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005226:	e061      	b.n	80052ec <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	4413      	add	r3, r2
 8005230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f003 0310 	and.w	r3, r3, #16
 800523a:	2b10      	cmp	r3, #16
 800523c:	d156      	bne.n	80052ec <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	212c      	movs	r1, #44	; 0x2c
 8005244:	fb01 f303 	mul.w	r3, r1, r3
 8005248:	4413      	add	r3, r2
 800524a:	333f      	adds	r3, #63	; 0x3f
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	2b03      	cmp	r3, #3
 8005250:	d111      	bne.n	8005276 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	212c      	movs	r1, #44	; 0x2c
 8005258:	fb01 f303 	mul.w	r3, r1, r3
 800525c:	4413      	add	r3, r2
 800525e:	335c      	adds	r3, #92	; 0x5c
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	4611      	mov	r1, r2
 800526e:	4618      	mov	r0, r3
 8005270:	f003 f91e 	bl	80084b0 <USB_HC_Halt>
 8005274:	e031      	b.n	80052da <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	212c      	movs	r1, #44	; 0x2c
 800527c:	fb01 f303 	mul.w	r3, r1, r3
 8005280:	4413      	add	r3, r2
 8005282:	333f      	adds	r3, #63	; 0x3f
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d009      	beq.n	800529e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	212c      	movs	r1, #44	; 0x2c
 8005290:	fb01 f303 	mul.w	r3, r1, r3
 8005294:	4413      	add	r3, r2
 8005296:	333f      	adds	r3, #63	; 0x3f
 8005298:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800529a:	2b02      	cmp	r3, #2
 800529c:	d11d      	bne.n	80052da <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	212c      	movs	r1, #44	; 0x2c
 80052a4:	fb01 f303 	mul.w	r3, r1, r3
 80052a8:	4413      	add	r3, r2
 80052aa:	335c      	adds	r3, #92	; 0x5c
 80052ac:	2200      	movs	r2, #0
 80052ae:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d110      	bne.n	80052da <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	212c      	movs	r1, #44	; 0x2c
 80052be:	fb01 f303 	mul.w	r3, r1, r3
 80052c2:	4413      	add	r3, r2
 80052c4:	3361      	adds	r3, #97	; 0x61
 80052c6:	2203      	movs	r2, #3
 80052c8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	4611      	mov	r1, r2
 80052d4:	4618      	mov	r0, r3
 80052d6:	f003 f8eb 	bl	80084b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e6:	461a      	mov	r2, r3
 80052e8:	2310      	movs	r3, #16
 80052ea:	6093      	str	r3, [r2, #8]
}
 80052ec:	bf00      	nop
 80052ee:	3718      	adds	r7, #24
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b088      	sub	sp, #32
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800530a:	78fb      	ldrb	r3, [r7, #3]
 800530c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	4413      	add	r3, r2
 8005316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f003 0304 	and.w	r3, r3, #4
 8005320:	2b04      	cmp	r3, #4
 8005322:	d11a      	bne.n	800535a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	4413      	add	r3, r2
 800532c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005330:	461a      	mov	r2, r3
 8005332:	2304      	movs	r3, #4
 8005334:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	212c      	movs	r1, #44	; 0x2c
 800533c:	fb01 f303 	mul.w	r3, r1, r3
 8005340:	4413      	add	r3, r2
 8005342:	3361      	adds	r3, #97	; 0x61
 8005344:	2206      	movs	r2, #6
 8005346:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	4611      	mov	r1, r2
 8005352:	4618      	mov	r0, r3
 8005354:	f003 f8ac 	bl	80084b0 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8005358:	e331      	b.n	80059be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	4413      	add	r3, r2
 8005362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f003 0320 	and.w	r3, r3, #32
 800536c:	2b20      	cmp	r3, #32
 800536e:	d12e      	bne.n	80053ce <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	4413      	add	r3, r2
 8005378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537c:	461a      	mov	r2, r3
 800537e:	2320      	movs	r3, #32
 8005380:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	212c      	movs	r1, #44	; 0x2c
 8005388:	fb01 f303 	mul.w	r3, r1, r3
 800538c:	4413      	add	r3, r2
 800538e:	333d      	adds	r3, #61	; 0x3d
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b01      	cmp	r3, #1
 8005394:	f040 8313 	bne.w	80059be <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	212c      	movs	r1, #44	; 0x2c
 800539e:	fb01 f303 	mul.w	r3, r1, r3
 80053a2:	4413      	add	r3, r2
 80053a4:	333d      	adds	r3, #61	; 0x3d
 80053a6:	2200      	movs	r2, #0
 80053a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	212c      	movs	r1, #44	; 0x2c
 80053b0:	fb01 f303 	mul.w	r3, r1, r3
 80053b4:	4413      	add	r3, r2
 80053b6:	3360      	adds	r3, #96	; 0x60
 80053b8:	2202      	movs	r2, #2
 80053ba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	b2d2      	uxtb	r2, r2
 80053c4:	4611      	mov	r1, r2
 80053c6:	4618      	mov	r0, r3
 80053c8:	f003 f872 	bl	80084b0 <USB_HC_Halt>
}
 80053cc:	e2f7      	b.n	80059be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053e4:	d112      	bne.n	800540c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f2:	461a      	mov	r2, r3
 80053f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053f8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	b2d2      	uxtb	r2, r2
 8005402:	4611      	mov	r1, r2
 8005404:	4618      	mov	r0, r3
 8005406:	f003 f853 	bl	80084b0 <USB_HC_Halt>
}
 800540a:	e2d8      	b.n	80059be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	4413      	add	r3, r2
 8005414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b01      	cmp	r3, #1
 8005420:	d140      	bne.n	80054a4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	212c      	movs	r1, #44	; 0x2c
 8005428:	fb01 f303 	mul.w	r3, r1, r3
 800542c:	4413      	add	r3, r2
 800542e:	335c      	adds	r3, #92	; 0x5c
 8005430:	2200      	movs	r2, #0
 8005432:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	4413      	add	r3, r2
 800543c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005446:	2b40      	cmp	r3, #64	; 0x40
 8005448:	d111      	bne.n	800546e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	212c      	movs	r1, #44	; 0x2c
 8005450:	fb01 f303 	mul.w	r3, r1, r3
 8005454:	4413      	add	r3, r2
 8005456:	333d      	adds	r3, #61	; 0x3d
 8005458:	2201      	movs	r2, #1
 800545a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	4413      	add	r3, r2
 8005464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005468:	461a      	mov	r2, r3
 800546a:	2340      	movs	r3, #64	; 0x40
 800546c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	015a      	lsls	r2, r3, #5
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	4413      	add	r3, r2
 8005476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800547a:	461a      	mov	r2, r3
 800547c:	2301      	movs	r3, #1
 800547e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	212c      	movs	r1, #44	; 0x2c
 8005486:	fb01 f303 	mul.w	r3, r1, r3
 800548a:	4413      	add	r3, r2
 800548c:	3361      	adds	r3, #97	; 0x61
 800548e:	2201      	movs	r2, #1
 8005490:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	b2d2      	uxtb	r2, r2
 800549a:	4611      	mov	r1, r2
 800549c:	4618      	mov	r0, r3
 800549e:	f003 f807 	bl	80084b0 <USB_HC_Halt>
}
 80054a2:	e28c      	b.n	80059be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b6:	2b40      	cmp	r3, #64	; 0x40
 80054b8:	d12c      	bne.n	8005514 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	212c      	movs	r1, #44	; 0x2c
 80054c0:	fb01 f303 	mul.w	r3, r1, r3
 80054c4:	4413      	add	r3, r2
 80054c6:	3361      	adds	r3, #97	; 0x61
 80054c8:	2204      	movs	r2, #4
 80054ca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	212c      	movs	r1, #44	; 0x2c
 80054d2:	fb01 f303 	mul.w	r3, r1, r3
 80054d6:	4413      	add	r3, r2
 80054d8:	333d      	adds	r3, #61	; 0x3d
 80054da:	2201      	movs	r2, #1
 80054dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	212c      	movs	r1, #44	; 0x2c
 80054e4:	fb01 f303 	mul.w	r3, r1, r3
 80054e8:	4413      	add	r3, r2
 80054ea:	335c      	adds	r3, #92	; 0x5c
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	4611      	mov	r1, r2
 80054fa:	4618      	mov	r0, r3
 80054fc:	f002 ffd8 	bl	80084b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	4413      	add	r3, r2
 8005508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800550c:	461a      	mov	r2, r3
 800550e:	2340      	movs	r3, #64	; 0x40
 8005510:	6093      	str	r3, [r2, #8]
}
 8005512:	e254      	b.n	80059be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	4413      	add	r3, r2
 800551c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	2b08      	cmp	r3, #8
 8005528:	d11a      	bne.n	8005560 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	4413      	add	r3, r2
 8005532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005536:	461a      	mov	r2, r3
 8005538:	2308      	movs	r3, #8
 800553a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	212c      	movs	r1, #44	; 0x2c
 8005542:	fb01 f303 	mul.w	r3, r1, r3
 8005546:	4413      	add	r3, r2
 8005548:	3361      	adds	r3, #97	; 0x61
 800554a:	2205      	movs	r2, #5
 800554c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	b2d2      	uxtb	r2, r2
 8005556:	4611      	mov	r1, r2
 8005558:	4618      	mov	r0, r3
 800555a:	f002 ffa9 	bl	80084b0 <USB_HC_Halt>
}
 800555e:	e22e      	b.n	80059be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	4413      	add	r3, r2
 8005568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	f003 0310 	and.w	r3, r3, #16
 8005572:	2b10      	cmp	r3, #16
 8005574:	d140      	bne.n	80055f8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	212c      	movs	r1, #44	; 0x2c
 800557c:	fb01 f303 	mul.w	r3, r1, r3
 8005580:	4413      	add	r3, r2
 8005582:	335c      	adds	r3, #92	; 0x5c
 8005584:	2200      	movs	r2, #0
 8005586:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	212c      	movs	r1, #44	; 0x2c
 800558e:	fb01 f303 	mul.w	r3, r1, r3
 8005592:	4413      	add	r3, r2
 8005594:	3361      	adds	r3, #97	; 0x61
 8005596:	2203      	movs	r2, #3
 8005598:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	212c      	movs	r1, #44	; 0x2c
 80055a0:	fb01 f303 	mul.w	r3, r1, r3
 80055a4:	4413      	add	r3, r2
 80055a6:	333d      	adds	r3, #61	; 0x3d
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d112      	bne.n	80055d4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	212c      	movs	r1, #44	; 0x2c
 80055b4:	fb01 f303 	mul.w	r3, r1, r3
 80055b8:	4413      	add	r3, r2
 80055ba:	333c      	adds	r3, #60	; 0x3c
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d108      	bne.n	80055d4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	212c      	movs	r1, #44	; 0x2c
 80055c8:	fb01 f303 	mul.w	r3, r1, r3
 80055cc:	4413      	add	r3, r2
 80055ce:	333d      	adds	r3, #61	; 0x3d
 80055d0:	2201      	movs	r2, #1
 80055d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	b2d2      	uxtb	r2, r2
 80055dc:	4611      	mov	r1, r2
 80055de:	4618      	mov	r0, r3
 80055e0:	f002 ff66 	bl	80084b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f0:	461a      	mov	r2, r3
 80055f2:	2310      	movs	r3, #16
 80055f4:	6093      	str	r3, [r2, #8]
}
 80055f6:	e1e2      	b.n	80059be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800560a:	2b80      	cmp	r3, #128	; 0x80
 800560c:	d164      	bne.n	80056d8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d111      	bne.n	800563a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	212c      	movs	r1, #44	; 0x2c
 800561c:	fb01 f303 	mul.w	r3, r1, r3
 8005620:	4413      	add	r3, r2
 8005622:	3361      	adds	r3, #97	; 0x61
 8005624:	2206      	movs	r2, #6
 8005626:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	4611      	mov	r1, r2
 8005632:	4618      	mov	r0, r3
 8005634:	f002 ff3c 	bl	80084b0 <USB_HC_Halt>
 8005638:	e044      	b.n	80056c4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	212c      	movs	r1, #44	; 0x2c
 8005640:	fb01 f303 	mul.w	r3, r1, r3
 8005644:	4413      	add	r3, r2
 8005646:	335c      	adds	r3, #92	; 0x5c
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	1c5a      	adds	r2, r3, #1
 800564c:	6879      	ldr	r1, [r7, #4]
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	202c      	movs	r0, #44	; 0x2c
 8005652:	fb00 f303 	mul.w	r3, r0, r3
 8005656:	440b      	add	r3, r1
 8005658:	335c      	adds	r3, #92	; 0x5c
 800565a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	212c      	movs	r1, #44	; 0x2c
 8005662:	fb01 f303 	mul.w	r3, r1, r3
 8005666:	4413      	add	r3, r2
 8005668:	335c      	adds	r3, #92	; 0x5c
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2b02      	cmp	r3, #2
 800566e:	d920      	bls.n	80056b2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	212c      	movs	r1, #44	; 0x2c
 8005676:	fb01 f303 	mul.w	r3, r1, r3
 800567a:	4413      	add	r3, r2
 800567c:	335c      	adds	r3, #92	; 0x5c
 800567e:	2200      	movs	r2, #0
 8005680:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	212c      	movs	r1, #44	; 0x2c
 8005688:	fb01 f303 	mul.w	r3, r1, r3
 800568c:	4413      	add	r3, r2
 800568e:	3360      	adds	r3, #96	; 0x60
 8005690:	2204      	movs	r2, #4
 8005692:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	b2d9      	uxtb	r1, r3
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	202c      	movs	r0, #44	; 0x2c
 800569e:	fb00 f303 	mul.w	r3, r0, r3
 80056a2:	4413      	add	r3, r2
 80056a4:	3360      	adds	r3, #96	; 0x60
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	461a      	mov	r2, r3
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f005 ffb0 	bl	800b610 <HAL_HCD_HC_NotifyURBChange_Callback>
 80056b0:	e008      	b.n	80056c4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	212c      	movs	r1, #44	; 0x2c
 80056b8:	fb01 f303 	mul.w	r3, r1, r3
 80056bc:	4413      	add	r3, r2
 80056be:	3360      	adds	r3, #96	; 0x60
 80056c0:	2202      	movs	r2, #2
 80056c2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d0:	461a      	mov	r2, r3
 80056d2:	2380      	movs	r3, #128	; 0x80
 80056d4:	6093      	str	r3, [r2, #8]
}
 80056d6:	e172      	b.n	80059be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ee:	d11b      	bne.n	8005728 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	212c      	movs	r1, #44	; 0x2c
 80056f6:	fb01 f303 	mul.w	r3, r1, r3
 80056fa:	4413      	add	r3, r2
 80056fc:	3361      	adds	r3, #97	; 0x61
 80056fe:	2208      	movs	r2, #8
 8005700:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	b2d2      	uxtb	r2, r2
 800570a:	4611      	mov	r1, r2
 800570c:	4618      	mov	r0, r3
 800570e:	f002 fecf 	bl	80084b0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	4413      	add	r3, r2
 800571a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800571e:	461a      	mov	r2, r3
 8005720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005724:	6093      	str	r3, [r2, #8]
}
 8005726:	e14a      	b.n	80059be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	4413      	add	r3, r2
 8005730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b02      	cmp	r3, #2
 800573c:	f040 813f 	bne.w	80059be <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	212c      	movs	r1, #44	; 0x2c
 8005746:	fb01 f303 	mul.w	r3, r1, r3
 800574a:	4413      	add	r3, r2
 800574c:	3361      	adds	r3, #97	; 0x61
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d17d      	bne.n	8005850 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	212c      	movs	r1, #44	; 0x2c
 800575a:	fb01 f303 	mul.w	r3, r1, r3
 800575e:	4413      	add	r3, r2
 8005760:	3360      	adds	r3, #96	; 0x60
 8005762:	2201      	movs	r2, #1
 8005764:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	212c      	movs	r1, #44	; 0x2c
 800576c:	fb01 f303 	mul.w	r3, r1, r3
 8005770:	4413      	add	r3, r2
 8005772:	333f      	adds	r3, #63	; 0x3f
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	2b02      	cmp	r3, #2
 8005778:	d00a      	beq.n	8005790 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	212c      	movs	r1, #44	; 0x2c
 8005780:	fb01 f303 	mul.w	r3, r1, r3
 8005784:	4413      	add	r3, r2
 8005786:	333f      	adds	r3, #63	; 0x3f
 8005788:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800578a:	2b03      	cmp	r3, #3
 800578c:	f040 8100 	bne.w	8005990 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d113      	bne.n	80057c0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	212c      	movs	r1, #44	; 0x2c
 800579e:	fb01 f303 	mul.w	r3, r1, r3
 80057a2:	4413      	add	r3, r2
 80057a4:	3355      	adds	r3, #85	; 0x55
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	f083 0301 	eor.w	r3, r3, #1
 80057ac:	b2d8      	uxtb	r0, r3
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	212c      	movs	r1, #44	; 0x2c
 80057b4:	fb01 f303 	mul.w	r3, r1, r3
 80057b8:	4413      	add	r3, r2
 80057ba:	3355      	adds	r3, #85	; 0x55
 80057bc:	4602      	mov	r2, r0
 80057be:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	f040 80e3 	bne.w	8005990 <HCD_HC_OUT_IRQHandler+0x69c>
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	212c      	movs	r1, #44	; 0x2c
 80057d0:	fb01 f303 	mul.w	r3, r1, r3
 80057d4:	4413      	add	r3, r2
 80057d6:	334c      	adds	r3, #76	; 0x4c
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f000 80d8 	beq.w	8005990 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	212c      	movs	r1, #44	; 0x2c
 80057e6:	fb01 f303 	mul.w	r3, r1, r3
 80057ea:	4413      	add	r3, r2
 80057ec:	334c      	adds	r3, #76	; 0x4c
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6879      	ldr	r1, [r7, #4]
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	202c      	movs	r0, #44	; 0x2c
 80057f6:	fb00 f202 	mul.w	r2, r0, r2
 80057fa:	440a      	add	r2, r1
 80057fc:	3240      	adds	r2, #64	; 0x40
 80057fe:	8812      	ldrh	r2, [r2, #0]
 8005800:	4413      	add	r3, r2
 8005802:	3b01      	subs	r3, #1
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	202c      	movs	r0, #44	; 0x2c
 800580a:	fb00 f202 	mul.w	r2, r0, r2
 800580e:	440a      	add	r2, r1
 8005810:	3240      	adds	r2, #64	; 0x40
 8005812:	8812      	ldrh	r2, [r2, #0]
 8005814:	fbb3 f3f2 	udiv	r3, r3, r2
 8005818:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 80b5 	beq.w	8005990 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	212c      	movs	r1, #44	; 0x2c
 800582c:	fb01 f303 	mul.w	r3, r1, r3
 8005830:	4413      	add	r3, r2
 8005832:	3355      	adds	r3, #85	; 0x55
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	f083 0301 	eor.w	r3, r3, #1
 800583a:	b2d8      	uxtb	r0, r3
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	212c      	movs	r1, #44	; 0x2c
 8005842:	fb01 f303 	mul.w	r3, r1, r3
 8005846:	4413      	add	r3, r2
 8005848:	3355      	adds	r3, #85	; 0x55
 800584a:	4602      	mov	r2, r0
 800584c:	701a      	strb	r2, [r3, #0]
 800584e:	e09f      	b.n	8005990 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	212c      	movs	r1, #44	; 0x2c
 8005856:	fb01 f303 	mul.w	r3, r1, r3
 800585a:	4413      	add	r3, r2
 800585c:	3361      	adds	r3, #97	; 0x61
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b03      	cmp	r3, #3
 8005862:	d109      	bne.n	8005878 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	212c      	movs	r1, #44	; 0x2c
 800586a:	fb01 f303 	mul.w	r3, r1, r3
 800586e:	4413      	add	r3, r2
 8005870:	3360      	adds	r3, #96	; 0x60
 8005872:	2202      	movs	r2, #2
 8005874:	701a      	strb	r2, [r3, #0]
 8005876:	e08b      	b.n	8005990 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	212c      	movs	r1, #44	; 0x2c
 800587e:	fb01 f303 	mul.w	r3, r1, r3
 8005882:	4413      	add	r3, r2
 8005884:	3361      	adds	r3, #97	; 0x61
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	2b04      	cmp	r3, #4
 800588a:	d109      	bne.n	80058a0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	212c      	movs	r1, #44	; 0x2c
 8005892:	fb01 f303 	mul.w	r3, r1, r3
 8005896:	4413      	add	r3, r2
 8005898:	3360      	adds	r3, #96	; 0x60
 800589a:	2202      	movs	r2, #2
 800589c:	701a      	strb	r2, [r3, #0]
 800589e:	e077      	b.n	8005990 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	212c      	movs	r1, #44	; 0x2c
 80058a6:	fb01 f303 	mul.w	r3, r1, r3
 80058aa:	4413      	add	r3, r2
 80058ac:	3361      	adds	r3, #97	; 0x61
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2b05      	cmp	r3, #5
 80058b2:	d109      	bne.n	80058c8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	212c      	movs	r1, #44	; 0x2c
 80058ba:	fb01 f303 	mul.w	r3, r1, r3
 80058be:	4413      	add	r3, r2
 80058c0:	3360      	adds	r3, #96	; 0x60
 80058c2:	2205      	movs	r2, #5
 80058c4:	701a      	strb	r2, [r3, #0]
 80058c6:	e063      	b.n	8005990 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	212c      	movs	r1, #44	; 0x2c
 80058ce:	fb01 f303 	mul.w	r3, r1, r3
 80058d2:	4413      	add	r3, r2
 80058d4:	3361      	adds	r3, #97	; 0x61
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	2b06      	cmp	r3, #6
 80058da:	d009      	beq.n	80058f0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	212c      	movs	r1, #44	; 0x2c
 80058e2:	fb01 f303 	mul.w	r3, r1, r3
 80058e6:	4413      	add	r3, r2
 80058e8:	3361      	adds	r3, #97	; 0x61
 80058ea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d14f      	bne.n	8005990 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	212c      	movs	r1, #44	; 0x2c
 80058f6:	fb01 f303 	mul.w	r3, r1, r3
 80058fa:	4413      	add	r3, r2
 80058fc:	335c      	adds	r3, #92	; 0x5c
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	1c5a      	adds	r2, r3, #1
 8005902:	6879      	ldr	r1, [r7, #4]
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	202c      	movs	r0, #44	; 0x2c
 8005908:	fb00 f303 	mul.w	r3, r0, r3
 800590c:	440b      	add	r3, r1
 800590e:	335c      	adds	r3, #92	; 0x5c
 8005910:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	212c      	movs	r1, #44	; 0x2c
 8005918:	fb01 f303 	mul.w	r3, r1, r3
 800591c:	4413      	add	r3, r2
 800591e:	335c      	adds	r3, #92	; 0x5c
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b02      	cmp	r3, #2
 8005924:	d912      	bls.n	800594c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	212c      	movs	r1, #44	; 0x2c
 800592c:	fb01 f303 	mul.w	r3, r1, r3
 8005930:	4413      	add	r3, r2
 8005932:	335c      	adds	r3, #92	; 0x5c
 8005934:	2200      	movs	r2, #0
 8005936:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	212c      	movs	r1, #44	; 0x2c
 800593e:	fb01 f303 	mul.w	r3, r1, r3
 8005942:	4413      	add	r3, r2
 8005944:	3360      	adds	r3, #96	; 0x60
 8005946:	2204      	movs	r2, #4
 8005948:	701a      	strb	r2, [r3, #0]
 800594a:	e021      	b.n	8005990 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	212c      	movs	r1, #44	; 0x2c
 8005952:	fb01 f303 	mul.w	r3, r1, r3
 8005956:	4413      	add	r3, r2
 8005958:	3360      	adds	r3, #96	; 0x60
 800595a:	2202      	movs	r2, #2
 800595c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	015a      	lsls	r2, r3, #5
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	4413      	add	r3, r2
 8005966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005974:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800597c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	4413      	add	r3, r2
 8005986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598a:	461a      	mov	r2, r3
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	4413      	add	r3, r2
 8005998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599c:	461a      	mov	r2, r3
 800599e:	2302      	movs	r3, #2
 80059a0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	b2d9      	uxtb	r1, r3
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	202c      	movs	r0, #44	; 0x2c
 80059ac:	fb00 f303 	mul.w	r3, r0, r3
 80059b0:	4413      	add	r3, r2
 80059b2:	3360      	adds	r3, #96	; 0x60
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	461a      	mov	r2, r3
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f005 fe29 	bl	800b610 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80059be:	bf00      	nop
 80059c0:	3720      	adds	r7, #32
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b08a      	sub	sp, #40	; 0x28
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	f003 030f 	and.w	r3, r3, #15
 80059e6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	0c5b      	lsrs	r3, r3, #17
 80059ec:	f003 030f 	and.w	r3, r3, #15
 80059f0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	091b      	lsrs	r3, r3, #4
 80059f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059fa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d004      	beq.n	8005a0c <HCD_RXQLVL_IRQHandler+0x46>
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	2b05      	cmp	r3, #5
 8005a06:	f000 80a9 	beq.w	8005b5c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005a0a:	e0aa      	b.n	8005b62 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 80a6 	beq.w	8005b60 <HCD_RXQLVL_IRQHandler+0x19a>
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	212c      	movs	r1, #44	; 0x2c
 8005a1a:	fb01 f303 	mul.w	r3, r1, r3
 8005a1e:	4413      	add	r3, r2
 8005a20:	3344      	adds	r3, #68	; 0x44
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 809b 	beq.w	8005b60 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	212c      	movs	r1, #44	; 0x2c
 8005a30:	fb01 f303 	mul.w	r3, r1, r3
 8005a34:	4413      	add	r3, r2
 8005a36:	3350      	adds	r3, #80	; 0x50
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	441a      	add	r2, r3
 8005a3e:	6879      	ldr	r1, [r7, #4]
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	202c      	movs	r0, #44	; 0x2c
 8005a44:	fb00 f303 	mul.w	r3, r0, r3
 8005a48:	440b      	add	r3, r1
 8005a4a:	334c      	adds	r3, #76	; 0x4c
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d87a      	bhi.n	8005b48 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6818      	ldr	r0, [r3, #0]
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	212c      	movs	r1, #44	; 0x2c
 8005a5c:	fb01 f303 	mul.w	r3, r1, r3
 8005a60:	4413      	add	r3, r2
 8005a62:	3344      	adds	r3, #68	; 0x44
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	b292      	uxth	r2, r2
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	f002 fc5c 	bl	8008328 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	212c      	movs	r1, #44	; 0x2c
 8005a76:	fb01 f303 	mul.w	r3, r1, r3
 8005a7a:	4413      	add	r3, r2
 8005a7c:	3344      	adds	r3, #68	; 0x44
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	441a      	add	r2, r3
 8005a84:	6879      	ldr	r1, [r7, #4]
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	202c      	movs	r0, #44	; 0x2c
 8005a8a:	fb00 f303 	mul.w	r3, r0, r3
 8005a8e:	440b      	add	r3, r1
 8005a90:	3344      	adds	r3, #68	; 0x44
 8005a92:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	212c      	movs	r1, #44	; 0x2c
 8005a9a:	fb01 f303 	mul.w	r3, r1, r3
 8005a9e:	4413      	add	r3, r2
 8005aa0:	3350      	adds	r3, #80	; 0x50
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	441a      	add	r2, r3
 8005aa8:	6879      	ldr	r1, [r7, #4]
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	202c      	movs	r0, #44	; 0x2c
 8005aae:	fb00 f303 	mul.w	r3, r0, r3
 8005ab2:	440b      	add	r3, r1
 8005ab4:	3350      	adds	r3, #80	; 0x50
 8005ab6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	0cdb      	lsrs	r3, r3, #19
 8005ac8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005acc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	212c      	movs	r1, #44	; 0x2c
 8005ad4:	fb01 f303 	mul.w	r3, r1, r3
 8005ad8:	4413      	add	r3, r2
 8005ada:	3340      	adds	r3, #64	; 0x40
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d13c      	bne.n	8005b60 <HCD_RXQLVL_IRQHandler+0x19a>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d039      	beq.n	8005b60 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b02:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b0a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b18:	461a      	mov	r2, r3
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	212c      	movs	r1, #44	; 0x2c
 8005b24:	fb01 f303 	mul.w	r3, r1, r3
 8005b28:	4413      	add	r3, r2
 8005b2a:	3354      	adds	r3, #84	; 0x54
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	f083 0301 	eor.w	r3, r3, #1
 8005b32:	b2d8      	uxtb	r0, r3
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	212c      	movs	r1, #44	; 0x2c
 8005b3a:	fb01 f303 	mul.w	r3, r1, r3
 8005b3e:	4413      	add	r3, r2
 8005b40:	3354      	adds	r3, #84	; 0x54
 8005b42:	4602      	mov	r2, r0
 8005b44:	701a      	strb	r2, [r3, #0]
      break;
 8005b46:	e00b      	b.n	8005b60 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	212c      	movs	r1, #44	; 0x2c
 8005b4e:	fb01 f303 	mul.w	r3, r1, r3
 8005b52:	4413      	add	r3, r2
 8005b54:	3360      	adds	r3, #96	; 0x60
 8005b56:	2204      	movs	r2, #4
 8005b58:	701a      	strb	r2, [r3, #0]
      break;
 8005b5a:	e001      	b.n	8005b60 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005b5c:	bf00      	nop
 8005b5e:	e000      	b.n	8005b62 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005b60:	bf00      	nop
  }
}
 8005b62:	bf00      	nop
 8005b64:	3728      	adds	r7, #40	; 0x28
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b086      	sub	sp, #24
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b96:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d10b      	bne.n	8005bba <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d102      	bne.n	8005bb2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f005 fd13 	bl	800b5d8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f043 0302 	orr.w	r3, r3, #2
 8005bb8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f003 0308 	and.w	r3, r3, #8
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	d132      	bne.n	8005c2a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	f043 0308 	orr.w	r3, r3, #8
 8005bca:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f003 0304 	and.w	r3, r3, #4
 8005bd2:	2b04      	cmp	r3, #4
 8005bd4:	d126      	bne.n	8005c24 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d113      	bne.n	8005c06 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005be4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005be8:	d106      	bne.n	8005bf8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2102      	movs	r1, #2
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f002 fc12 	bl	800841a <USB_InitFSLSPClkSel>
 8005bf6:	e011      	b.n	8005c1c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f002 fc0b 	bl	800841a <USB_InitFSLSPClkSel>
 8005c04:	e00a      	b.n	8005c1c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d106      	bne.n	8005c1c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c14:	461a      	mov	r2, r3
 8005c16:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005c1a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f005 fd09 	bl	800b634 <HAL_HCD_PortEnabled_Callback>
 8005c22:	e002      	b.n	8005c2a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f005 fd13 	bl	800b650 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f003 0320 	and.w	r3, r3, #32
 8005c30:	2b20      	cmp	r3, #32
 8005c32:	d103      	bne.n	8005c3c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f043 0320 	orr.w	r3, r3, #32
 8005c3a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c42:	461a      	mov	r2, r3
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	6013      	str	r3, [r2, #0]
}
 8005c48:	bf00      	nop
 8005c4a:	3718      	adds	r7, #24
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e12b      	b.n	8005eba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d106      	bne.n	8005c7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f7fa fecc 	bl	8000a14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2224      	movs	r2, #36	; 0x24
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f022 0201 	bic.w	r2, r2, #1
 8005c92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ca2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005cb4:	f001 fa20 	bl	80070f8 <HAL_RCC_GetPCLK1Freq>
 8005cb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	4a81      	ldr	r2, [pc, #516]	; (8005ec4 <HAL_I2C_Init+0x274>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d807      	bhi.n	8005cd4 <HAL_I2C_Init+0x84>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4a80      	ldr	r2, [pc, #512]	; (8005ec8 <HAL_I2C_Init+0x278>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	bf94      	ite	ls
 8005ccc:	2301      	movls	r3, #1
 8005cce:	2300      	movhi	r3, #0
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	e006      	b.n	8005ce2 <HAL_I2C_Init+0x92>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	4a7d      	ldr	r2, [pc, #500]	; (8005ecc <HAL_I2C_Init+0x27c>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	bf94      	ite	ls
 8005cdc:	2301      	movls	r3, #1
 8005cde:	2300      	movhi	r3, #0
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e0e7      	b.n	8005eba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	4a78      	ldr	r2, [pc, #480]	; (8005ed0 <HAL_I2C_Init+0x280>)
 8005cee:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf2:	0c9b      	lsrs	r3, r3, #18
 8005cf4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6a1b      	ldr	r3, [r3, #32]
 8005d10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	4a6a      	ldr	r2, [pc, #424]	; (8005ec4 <HAL_I2C_Init+0x274>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d802      	bhi.n	8005d24 <HAL_I2C_Init+0xd4>
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	3301      	adds	r3, #1
 8005d22:	e009      	b.n	8005d38 <HAL_I2C_Init+0xe8>
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005d2a:	fb02 f303 	mul.w	r3, r2, r3
 8005d2e:	4a69      	ldr	r2, [pc, #420]	; (8005ed4 <HAL_I2C_Init+0x284>)
 8005d30:	fba2 2303 	umull	r2, r3, r2, r3
 8005d34:	099b      	lsrs	r3, r3, #6
 8005d36:	3301      	adds	r3, #1
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	6812      	ldr	r2, [r2, #0]
 8005d3c:	430b      	orrs	r3, r1
 8005d3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005d4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	495c      	ldr	r1, [pc, #368]	; (8005ec4 <HAL_I2C_Init+0x274>)
 8005d54:	428b      	cmp	r3, r1
 8005d56:	d819      	bhi.n	8005d8c <HAL_I2C_Init+0x13c>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	1e59      	subs	r1, r3, #1
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d66:	1c59      	adds	r1, r3, #1
 8005d68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005d6c:	400b      	ands	r3, r1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00a      	beq.n	8005d88 <HAL_I2C_Init+0x138>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	1e59      	subs	r1, r3, #1
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	005b      	lsls	r3, r3, #1
 8005d7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d80:	3301      	adds	r3, #1
 8005d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d86:	e051      	b.n	8005e2c <HAL_I2C_Init+0x1dc>
 8005d88:	2304      	movs	r3, #4
 8005d8a:	e04f      	b.n	8005e2c <HAL_I2C_Init+0x1dc>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d111      	bne.n	8005db8 <HAL_I2C_Init+0x168>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	1e58      	subs	r0, r3, #1
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6859      	ldr	r1, [r3, #4]
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	440b      	add	r3, r1
 8005da2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005da6:	3301      	adds	r3, #1
 8005da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	bf0c      	ite	eq
 8005db0:	2301      	moveq	r3, #1
 8005db2:	2300      	movne	r3, #0
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	e012      	b.n	8005dde <HAL_I2C_Init+0x18e>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	1e58      	subs	r0, r3, #1
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6859      	ldr	r1, [r3, #4]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	440b      	add	r3, r1
 8005dc6:	0099      	lsls	r1, r3, #2
 8005dc8:	440b      	add	r3, r1
 8005dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dce:	3301      	adds	r3, #1
 8005dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	bf0c      	ite	eq
 8005dd8:	2301      	moveq	r3, #1
 8005dda:	2300      	movne	r3, #0
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <HAL_I2C_Init+0x196>
 8005de2:	2301      	movs	r3, #1
 8005de4:	e022      	b.n	8005e2c <HAL_I2C_Init+0x1dc>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10e      	bne.n	8005e0c <HAL_I2C_Init+0x1bc>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	1e58      	subs	r0, r3, #1
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6859      	ldr	r1, [r3, #4]
 8005df6:	460b      	mov	r3, r1
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	440b      	add	r3, r1
 8005dfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e00:	3301      	adds	r3, #1
 8005e02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e0a:	e00f      	b.n	8005e2c <HAL_I2C_Init+0x1dc>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	1e58      	subs	r0, r3, #1
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6859      	ldr	r1, [r3, #4]
 8005e14:	460b      	mov	r3, r1
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	440b      	add	r3, r1
 8005e1a:	0099      	lsls	r1, r3, #2
 8005e1c:	440b      	add	r3, r1
 8005e1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e22:	3301      	adds	r3, #1
 8005e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e2c:	6879      	ldr	r1, [r7, #4]
 8005e2e:	6809      	ldr	r1, [r1, #0]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	69da      	ldr	r2, [r3, #28]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	431a      	orrs	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005e5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	6911      	ldr	r1, [r2, #16]
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	68d2      	ldr	r2, [r2, #12]
 8005e66:	4311      	orrs	r1, r2
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	6812      	ldr	r2, [r2, #0]
 8005e6c:	430b      	orrs	r3, r1
 8005e6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	695a      	ldr	r2, [r3, #20]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	431a      	orrs	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f042 0201 	orr.w	r2, r2, #1
 8005e9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	000186a0 	.word	0x000186a0
 8005ec8:	001e847f 	.word	0x001e847f
 8005ecc:	003d08ff 	.word	0x003d08ff
 8005ed0:	431bde83 	.word	0x431bde83
 8005ed4:	10624dd3 	.word	0x10624dd3

08005ed8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b088      	sub	sp, #32
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e128      	b.n	800613c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d109      	bne.n	8005f0a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a90      	ldr	r2, [pc, #576]	; (8006144 <HAL_I2S_Init+0x26c>)
 8005f02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f7fa fdf5 	bl	8000af4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	6812      	ldr	r2, [r2, #0]
 8005f1c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005f20:	f023 030f 	bic.w	r3, r3, #15
 8005f24:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d060      	beq.n	8005ff8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d102      	bne.n	8005f44 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005f3e:	2310      	movs	r3, #16
 8005f40:	617b      	str	r3, [r7, #20]
 8005f42:	e001      	b.n	8005f48 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005f44:	2320      	movs	r3, #32
 8005f46:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	2b20      	cmp	r3, #32
 8005f4e:	d802      	bhi.n	8005f56 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	005b      	lsls	r3, r3, #1
 8005f54:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005f56:	2001      	movs	r0, #1
 8005f58:	f001 fa0a 	bl	8007370 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f5c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f66:	d125      	bne.n	8005fb4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d010      	beq.n	8005f92 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	005b      	lsls	r3, r3, #1
 8005f82:	461a      	mov	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f8c:	3305      	adds	r3, #5
 8005f8e:	613b      	str	r3, [r7, #16]
 8005f90:	e01f      	b.n	8005fd2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	00db      	lsls	r3, r3, #3
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	005b      	lsls	r3, r3, #1
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fae:	3305      	adds	r3, #5
 8005fb0:	613b      	str	r3, [r7, #16]
 8005fb2:	e00e      	b.n	8005fd2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fce:	3305      	adds	r3, #5
 8005fd0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	4a5c      	ldr	r2, [pc, #368]	; (8006148 <HAL_I2S_Init+0x270>)
 8005fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fda:	08db      	lsrs	r3, r3, #3
 8005fdc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	085b      	lsrs	r3, r3, #1
 8005fee:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	021b      	lsls	r3, r3, #8
 8005ff4:	61bb      	str	r3, [r7, #24]
 8005ff6:	e003      	b.n	8006000 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d902      	bls.n	800600c <HAL_I2S_Init+0x134>
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	2bff      	cmp	r3, #255	; 0xff
 800600a:	d907      	bls.n	800601c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006010:	f043 0210 	orr.w	r2, r3, #16
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e08f      	b.n	800613c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	691a      	ldr	r2, [r3, #16]
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	ea42 0103 	orr.w	r1, r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	69fa      	ldr	r2, [r7, #28]
 800602c:	430a      	orrs	r2, r1
 800602e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800603a:	f023 030f 	bic.w	r3, r3, #15
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6851      	ldr	r1, [r2, #4]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	6892      	ldr	r2, [r2, #8]
 8006046:	4311      	orrs	r1, r2
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	68d2      	ldr	r2, [r2, #12]
 800604c:	4311      	orrs	r1, r2
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	6992      	ldr	r2, [r2, #24]
 8006052:	430a      	orrs	r2, r1
 8006054:	431a      	orrs	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800605e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d161      	bne.n	800612c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a38      	ldr	r2, [pc, #224]	; (800614c <HAL_I2S_Init+0x274>)
 800606c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a37      	ldr	r2, [pc, #220]	; (8006150 <HAL_I2S_Init+0x278>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d101      	bne.n	800607c <HAL_I2S_Init+0x1a4>
 8006078:	4b36      	ldr	r3, [pc, #216]	; (8006154 <HAL_I2S_Init+0x27c>)
 800607a:	e001      	b.n	8006080 <HAL_I2S_Init+0x1a8>
 800607c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	6812      	ldr	r2, [r2, #0]
 8006086:	4932      	ldr	r1, [pc, #200]	; (8006150 <HAL_I2S_Init+0x278>)
 8006088:	428a      	cmp	r2, r1
 800608a:	d101      	bne.n	8006090 <HAL_I2S_Init+0x1b8>
 800608c:	4a31      	ldr	r2, [pc, #196]	; (8006154 <HAL_I2S_Init+0x27c>)
 800608e:	e001      	b.n	8006094 <HAL_I2S_Init+0x1bc>
 8006090:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006094:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006098:	f023 030f 	bic.w	r3, r3, #15
 800609c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a2b      	ldr	r2, [pc, #172]	; (8006150 <HAL_I2S_Init+0x278>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d101      	bne.n	80060ac <HAL_I2S_Init+0x1d4>
 80060a8:	4b2a      	ldr	r3, [pc, #168]	; (8006154 <HAL_I2S_Init+0x27c>)
 80060aa:	e001      	b.n	80060b0 <HAL_I2S_Init+0x1d8>
 80060ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060b0:	2202      	movs	r2, #2
 80060b2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a25      	ldr	r2, [pc, #148]	; (8006150 <HAL_I2S_Init+0x278>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d101      	bne.n	80060c2 <HAL_I2S_Init+0x1ea>
 80060be:	4b25      	ldr	r3, [pc, #148]	; (8006154 <HAL_I2S_Init+0x27c>)
 80060c0:	e001      	b.n	80060c6 <HAL_I2S_Init+0x1ee>
 80060c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060d2:	d003      	beq.n	80060dc <HAL_I2S_Init+0x204>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d103      	bne.n	80060e4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80060dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060e0:	613b      	str	r3, [r7, #16]
 80060e2:	e001      	b.n	80060e8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80060e4:	2300      	movs	r3, #0
 80060e6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80060f2:	4313      	orrs	r3, r2
 80060f4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80060fc:	4313      	orrs	r3, r2
 80060fe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006106:	4313      	orrs	r3, r2
 8006108:	b29a      	uxth	r2, r3
 800610a:	897b      	ldrh	r3, [r7, #10]
 800610c:	4313      	orrs	r3, r2
 800610e:	b29b      	uxth	r3, r3
 8006110:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006114:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a0d      	ldr	r2, [pc, #52]	; (8006150 <HAL_I2S_Init+0x278>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d101      	bne.n	8006124 <HAL_I2S_Init+0x24c>
 8006120:	4b0c      	ldr	r3, [pc, #48]	; (8006154 <HAL_I2S_Init+0x27c>)
 8006122:	e001      	b.n	8006128 <HAL_I2S_Init+0x250>
 8006124:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006128:	897a      	ldrh	r2, [r7, #10]
 800612a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3720      	adds	r7, #32
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	0800624f 	.word	0x0800624f
 8006148:	cccccccd 	.word	0xcccccccd
 800614c:	08006365 	.word	0x08006365
 8006150:	40003800 	.word	0x40003800
 8006154:	40003400 	.word	0x40003400

08006158 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	881a      	ldrh	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	1c9a      	adds	r2, r3, #2
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	3b01      	subs	r3, #1
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10e      	bne.n	80061e8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061d8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7ff ffb8 	bl	8006158 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80061e8:	bf00      	nop
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68da      	ldr	r2, [r3, #12]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006202:	b292      	uxth	r2, r2
 8006204:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	1c9a      	adds	r2, r3, #2
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006214:	b29b      	uxth	r3, r3
 8006216:	3b01      	subs	r3, #1
 8006218:	b29a      	uxth	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006222:	b29b      	uxth	r3, r3
 8006224:	2b00      	cmp	r3, #0
 8006226:	d10e      	bne.n	8006246 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006236:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f7ff ff93 	bl	800616c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006246:	bf00      	nop
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b086      	sub	sp, #24
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b04      	cmp	r3, #4
 8006268:	d13a      	bne.n	80062e0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b01      	cmp	r3, #1
 8006272:	d109      	bne.n	8006288 <I2S_IRQHandler+0x3a>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627e:	2b40      	cmp	r3, #64	; 0x40
 8006280:	d102      	bne.n	8006288 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7ff ffb4 	bl	80061f0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628e:	2b40      	cmp	r3, #64	; 0x40
 8006290:	d126      	bne.n	80062e0 <I2S_IRQHandler+0x92>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f003 0320 	and.w	r3, r3, #32
 800629c:	2b20      	cmp	r3, #32
 800629e:	d11f      	bne.n	80062e0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80062ae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80062b0:	2300      	movs	r3, #0
 80062b2:	613b      	str	r3, [r7, #16]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	613b      	str	r3, [r7, #16]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	613b      	str	r3, [r7, #16]
 80062c4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d2:	f043 0202 	orr.w	r2, r3, #2
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7ff ff50 	bl	8006180 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b03      	cmp	r3, #3
 80062ea:	d136      	bne.n	800635a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d109      	bne.n	800630a <I2S_IRQHandler+0xbc>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006300:	2b80      	cmp	r3, #128	; 0x80
 8006302:	d102      	bne.n	800630a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7ff ff45 	bl	8006194 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	f003 0308 	and.w	r3, r3, #8
 8006310:	2b08      	cmp	r3, #8
 8006312:	d122      	bne.n	800635a <I2S_IRQHandler+0x10c>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f003 0320 	and.w	r3, r3, #32
 800631e:	2b20      	cmp	r3, #32
 8006320:	d11b      	bne.n	800635a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006330:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006332:	2300      	movs	r3, #0
 8006334:	60fb      	str	r3, [r7, #12]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	60fb      	str	r3, [r7, #12]
 800633e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800634c:	f043 0204 	orr.w	r2, r3, #4
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f7ff ff13 	bl	8006180 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800635a:	bf00      	nop
 800635c:	3718      	adds	r7, #24
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
	...

08006364 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b088      	sub	sp, #32
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a92      	ldr	r2, [pc, #584]	; (80065c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d101      	bne.n	8006382 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800637e:	4b92      	ldr	r3, [pc, #584]	; (80065c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006380:	e001      	b.n	8006386 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006382:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a8b      	ldr	r2, [pc, #556]	; (80065c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d101      	bne.n	80063a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800639c:	4b8a      	ldr	r3, [pc, #552]	; (80065c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800639e:	e001      	b.n	80063a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80063a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063b0:	d004      	beq.n	80063bc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f040 8099 	bne.w	80064ee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d107      	bne.n	80063d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d002      	beq.n	80063d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 f925 	bl	8006620 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d107      	bne.n	80063f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d002      	beq.n	80063f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f9c8 	bl	8006780 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f6:	2b40      	cmp	r3, #64	; 0x40
 80063f8:	d13a      	bne.n	8006470 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f003 0320 	and.w	r3, r3, #32
 8006400:	2b00      	cmp	r3, #0
 8006402:	d035      	beq.n	8006470 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a6e      	ldr	r2, [pc, #440]	; (80065c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d101      	bne.n	8006412 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800640e:	4b6e      	ldr	r3, [pc, #440]	; (80065c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006410:	e001      	b.n	8006416 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006412:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4969      	ldr	r1, [pc, #420]	; (80065c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800641e:	428b      	cmp	r3, r1
 8006420:	d101      	bne.n	8006426 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006422:	4b69      	ldr	r3, [pc, #420]	; (80065c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006424:	e001      	b.n	800642a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006426:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800642a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800642e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800643e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006440:	2300      	movs	r3, #0
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006462:	f043 0202 	orr.w	r2, r3, #2
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7ff fe88 	bl	8006180 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	f003 0308 	and.w	r3, r3, #8
 8006476:	2b08      	cmp	r3, #8
 8006478:	f040 80c3 	bne.w	8006602 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f003 0320 	and.w	r3, r3, #32
 8006482:	2b00      	cmp	r3, #0
 8006484:	f000 80bd 	beq.w	8006602 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006496:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a49      	ldr	r2, [pc, #292]	; (80065c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d101      	bne.n	80064a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80064a2:	4b49      	ldr	r3, [pc, #292]	; (80065c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80064a4:	e001      	b.n	80064aa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80064a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4944      	ldr	r1, [pc, #272]	; (80065c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80064b2:	428b      	cmp	r3, r1
 80064b4:	d101      	bne.n	80064ba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80064b6:	4b44      	ldr	r3, [pc, #272]	; (80065c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80064b8:	e001      	b.n	80064be <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80064ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80064c2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80064c4:	2300      	movs	r3, #0
 80064c6:	60bb      	str	r3, [r7, #8]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	60bb      	str	r3, [r7, #8]
 80064d0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064de:	f043 0204 	orr.w	r2, r3, #4
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7ff fe4a 	bl	8006180 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80064ec:	e089      	b.n	8006602 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	f003 0302 	and.w	r3, r3, #2
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d107      	bne.n	8006508 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d002      	beq.n	8006508 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f8be 	bl	8006684 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b01      	cmp	r3, #1
 8006510:	d107      	bne.n	8006522 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006518:	2b00      	cmp	r3, #0
 800651a:	d002      	beq.n	8006522 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f8fd 	bl	800671c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006528:	2b40      	cmp	r3, #64	; 0x40
 800652a:	d12f      	bne.n	800658c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f003 0320 	and.w	r3, r3, #32
 8006532:	2b00      	cmp	r3, #0
 8006534:	d02a      	beq.n	800658c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006544:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a1e      	ldr	r2, [pc, #120]	; (80065c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d101      	bne.n	8006554 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006550:	4b1d      	ldr	r3, [pc, #116]	; (80065c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006552:	e001      	b.n	8006558 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006554:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4919      	ldr	r1, [pc, #100]	; (80065c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006560:	428b      	cmp	r3, r1
 8006562:	d101      	bne.n	8006568 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006564:	4b18      	ldr	r3, [pc, #96]	; (80065c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006566:	e001      	b.n	800656c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006568:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800656c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006570:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800657e:	f043 0202 	orr.w	r2, r3, #2
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7ff fdfa 	bl	8006180 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	f003 0308 	and.w	r3, r3, #8
 8006592:	2b08      	cmp	r3, #8
 8006594:	d136      	bne.n	8006604 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	f003 0320 	and.w	r3, r3, #32
 800659c:	2b00      	cmp	r3, #0
 800659e:	d031      	beq.n	8006604 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a07      	ldr	r2, [pc, #28]	; (80065c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d101      	bne.n	80065ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80065aa:	4b07      	ldr	r3, [pc, #28]	; (80065c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80065ac:	e001      	b.n	80065b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80065ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4902      	ldr	r1, [pc, #8]	; (80065c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80065ba:	428b      	cmp	r3, r1
 80065bc:	d106      	bne.n	80065cc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80065be:	4b02      	ldr	r3, [pc, #8]	; (80065c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80065c0:	e006      	b.n	80065d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80065c2:	bf00      	nop
 80065c4:	40003800 	.word	0x40003800
 80065c8:	40003400 	.word	0x40003400
 80065cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065d4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065e4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f2:	f043 0204 	orr.w	r2, r3, #4
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff fdc0 	bl	8006180 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006600:	e000      	b.n	8006604 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006602:	bf00      	nop
}
 8006604:	bf00      	nop
 8006606:	3720      	adds	r7, #32
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662c:	1c99      	adds	r1, r3, #2
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	6251      	str	r1, [r2, #36]	; 0x24
 8006632:	881a      	ldrh	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663e:	b29b      	uxth	r3, r3
 8006640:	3b01      	subs	r3, #1
 8006642:	b29a      	uxth	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664c:	b29b      	uxth	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d113      	bne.n	800667a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006660:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006666:	b29b      	uxth	r3, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	d106      	bne.n	800667a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f7ff ffc9 	bl	800660c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800667a:	bf00      	nop
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
	...

08006684 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006690:	1c99      	adds	r1, r3, #2
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	6251      	str	r1, [r2, #36]	; 0x24
 8006696:	8819      	ldrh	r1, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a1d      	ldr	r2, [pc, #116]	; (8006714 <I2SEx_TxISR_I2SExt+0x90>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d101      	bne.n	80066a6 <I2SEx_TxISR_I2SExt+0x22>
 80066a2:	4b1d      	ldr	r3, [pc, #116]	; (8006718 <I2SEx_TxISR_I2SExt+0x94>)
 80066a4:	e001      	b.n	80066aa <I2SEx_TxISR_I2SExt+0x26>
 80066a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066aa:	460a      	mov	r2, r1
 80066ac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	3b01      	subs	r3, #1
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d121      	bne.n	800670a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a12      	ldr	r2, [pc, #72]	; (8006714 <I2SEx_TxISR_I2SExt+0x90>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d101      	bne.n	80066d4 <I2SEx_TxISR_I2SExt+0x50>
 80066d0:	4b11      	ldr	r3, [pc, #68]	; (8006718 <I2SEx_TxISR_I2SExt+0x94>)
 80066d2:	e001      	b.n	80066d8 <I2SEx_TxISR_I2SExt+0x54>
 80066d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	490d      	ldr	r1, [pc, #52]	; (8006714 <I2SEx_TxISR_I2SExt+0x90>)
 80066e0:	428b      	cmp	r3, r1
 80066e2:	d101      	bne.n	80066e8 <I2SEx_TxISR_I2SExt+0x64>
 80066e4:	4b0c      	ldr	r3, [pc, #48]	; (8006718 <I2SEx_TxISR_I2SExt+0x94>)
 80066e6:	e001      	b.n	80066ec <I2SEx_TxISR_I2SExt+0x68>
 80066e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d106      	bne.n	800670a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f7ff ff81 	bl	800660c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800670a:	bf00      	nop
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	40003800 	.word	0x40003800
 8006718:	40003400 	.word	0x40003400

0800671c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68d8      	ldr	r0, [r3, #12]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672e:	1c99      	adds	r1, r3, #2
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006734:	b282      	uxth	r2, r0
 8006736:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800673c:	b29b      	uxth	r3, r3
 800673e:	3b01      	subs	r3, #1
 8006740:	b29a      	uxth	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800674a:	b29b      	uxth	r3, r3
 800674c:	2b00      	cmp	r3, #0
 800674e:	d113      	bne.n	8006778 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800675e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006764:	b29b      	uxth	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d106      	bne.n	8006778 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7ff ff4a 	bl	800660c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006778:	bf00      	nop
 800677a:	3708      	adds	r7, #8
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a20      	ldr	r2, [pc, #128]	; (8006810 <I2SEx_RxISR_I2SExt+0x90>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d101      	bne.n	8006796 <I2SEx_RxISR_I2SExt+0x16>
 8006792:	4b20      	ldr	r3, [pc, #128]	; (8006814 <I2SEx_RxISR_I2SExt+0x94>)
 8006794:	e001      	b.n	800679a <I2SEx_RxISR_I2SExt+0x1a>
 8006796:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800679a:	68d8      	ldr	r0, [r3, #12]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a0:	1c99      	adds	r1, r3, #2
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80067a6:	b282      	uxth	r2, r0
 80067a8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	3b01      	subs	r3, #1
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067bc:	b29b      	uxth	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d121      	bne.n	8006806 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a12      	ldr	r2, [pc, #72]	; (8006810 <I2SEx_RxISR_I2SExt+0x90>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d101      	bne.n	80067d0 <I2SEx_RxISR_I2SExt+0x50>
 80067cc:	4b11      	ldr	r3, [pc, #68]	; (8006814 <I2SEx_RxISR_I2SExt+0x94>)
 80067ce:	e001      	b.n	80067d4 <I2SEx_RxISR_I2SExt+0x54>
 80067d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	490d      	ldr	r1, [pc, #52]	; (8006810 <I2SEx_RxISR_I2SExt+0x90>)
 80067dc:	428b      	cmp	r3, r1
 80067de:	d101      	bne.n	80067e4 <I2SEx_RxISR_I2SExt+0x64>
 80067e0:	4b0c      	ldr	r3, [pc, #48]	; (8006814 <I2SEx_RxISR_I2SExt+0x94>)
 80067e2:	e001      	b.n	80067e8 <I2SEx_RxISR_I2SExt+0x68>
 80067e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80067ec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d106      	bne.n	8006806 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f7ff ff03 	bl	800660c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006806:	bf00      	nop
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	40003800 	.word	0x40003800
 8006814:	40003400 	.word	0x40003400

08006818 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e267      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	d075      	beq.n	8006922 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006836:	4b88      	ldr	r3, [pc, #544]	; (8006a58 <HAL_RCC_OscConfig+0x240>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f003 030c 	and.w	r3, r3, #12
 800683e:	2b04      	cmp	r3, #4
 8006840:	d00c      	beq.n	800685c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006842:	4b85      	ldr	r3, [pc, #532]	; (8006a58 <HAL_RCC_OscConfig+0x240>)
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800684a:	2b08      	cmp	r3, #8
 800684c:	d112      	bne.n	8006874 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800684e:	4b82      	ldr	r3, [pc, #520]	; (8006a58 <HAL_RCC_OscConfig+0x240>)
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006856:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800685a:	d10b      	bne.n	8006874 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800685c:	4b7e      	ldr	r3, [pc, #504]	; (8006a58 <HAL_RCC_OscConfig+0x240>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d05b      	beq.n	8006920 <HAL_RCC_OscConfig+0x108>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d157      	bne.n	8006920 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e242      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800687c:	d106      	bne.n	800688c <HAL_RCC_OscConfig+0x74>
 800687e:	4b76      	ldr	r3, [pc, #472]	; (8006a58 <HAL_RCC_OscConfig+0x240>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a75      	ldr	r2, [pc, #468]	; (8006a58 <HAL_RCC_OscConfig+0x240>)
 8006884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006888:	6013      	str	r3, [r2, #0]
 800688a:	e01d      	b.n	80068c8 <HAL_RCC_OscConfig+0xb0>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006894:	d10c      	bne.n	80068b0 <HAL_RCC_OscConfig+0x98>
 8006896:	4b70      	ldr	r3, [pc, #448]	; (8006a58 <HAL_RCC_OscConfig+0x240>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a6f      	ldr	r2, [pc, #444]	; (8006a58 <HAL_RCC_OscConfig+0x240>)
 800689c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068a0:	6013      	str	r3, [r2, #0]
 80068a2:	4b6d      	ldr	r3, [pc, #436]	; (8006a58 <HAL_RCC_OscConfig+0x240>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a6c      	ldr	r2, [pc, #432]	; (8006a58 <HAL_RCC_OscConfig+0x240>)
 80068a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068ac:	6013      	str	r3, [r2, #0]
 80068ae:	e00b      	b.n	80068c8 <HAL_RCC_OscConfig+0xb0>
 80068b0:	4b69      	ldr	r3, [pc, #420]	; (8006a58 <HAL_RCC_OscConfig+0x240>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a68      	ldr	r2, [pc, #416]	; (8006a58 <HAL_RCC_OscConfig+0x240>)
 80068b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068ba:	6013      	str	r3, [r2, #0]
 80068bc:	4b66      	ldr	r3, [pc, #408]	; (8006a58 <HAL_RCC_OscConfig+0x240>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a65      	ldr	r2, [pc, #404]	; (8006a58 <HAL_RCC_OscConfig+0x240>)
 80068c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d013      	beq.n	80068f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068d0:	f7fd fcf4 	bl	80042bc <HAL_GetTick>
 80068d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068d6:	e008      	b.n	80068ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068d8:	f7fd fcf0 	bl	80042bc <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	2b64      	cmp	r3, #100	; 0x64
 80068e4:	d901      	bls.n	80068ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e207      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068ea:	4b5b      	ldr	r3, [pc, #364]	; (8006a58 <HAL_RCC_OscConfig+0x240>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d0f0      	beq.n	80068d8 <HAL_RCC_OscConfig+0xc0>
 80068f6:	e014      	b.n	8006922 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068f8:	f7fd fce0 	bl	80042bc <HAL_GetTick>
 80068fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068fe:	e008      	b.n	8006912 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006900:	f7fd fcdc 	bl	80042bc <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	2b64      	cmp	r3, #100	; 0x64
 800690c:	d901      	bls.n	8006912 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e1f3      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006912:	4b51      	ldr	r3, [pc, #324]	; (8006a58 <HAL_RCC_OscConfig+0x240>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1f0      	bne.n	8006900 <HAL_RCC_OscConfig+0xe8>
 800691e:	e000      	b.n	8006922 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d063      	beq.n	80069f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800692e:	4b4a      	ldr	r3, [pc, #296]	; (8006a58 <HAL_RCC_OscConfig+0x240>)
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f003 030c 	and.w	r3, r3, #12
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00b      	beq.n	8006952 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800693a:	4b47      	ldr	r3, [pc, #284]	; (8006a58 <HAL_RCC_OscConfig+0x240>)
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006942:	2b08      	cmp	r3, #8
 8006944:	d11c      	bne.n	8006980 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006946:	4b44      	ldr	r3, [pc, #272]	; (8006a58 <HAL_RCC_OscConfig+0x240>)
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d116      	bne.n	8006980 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006952:	4b41      	ldr	r3, [pc, #260]	; (8006a58 <HAL_RCC_OscConfig+0x240>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d005      	beq.n	800696a <HAL_RCC_OscConfig+0x152>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d001      	beq.n	800696a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e1c7      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800696a:	4b3b      	ldr	r3, [pc, #236]	; (8006a58 <HAL_RCC_OscConfig+0x240>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	00db      	lsls	r3, r3, #3
 8006978:	4937      	ldr	r1, [pc, #220]	; (8006a58 <HAL_RCC_OscConfig+0x240>)
 800697a:	4313      	orrs	r3, r2
 800697c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800697e:	e03a      	b.n	80069f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d020      	beq.n	80069ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006988:	4b34      	ldr	r3, [pc, #208]	; (8006a5c <HAL_RCC_OscConfig+0x244>)
 800698a:	2201      	movs	r2, #1
 800698c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800698e:	f7fd fc95 	bl	80042bc <HAL_GetTick>
 8006992:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006994:	e008      	b.n	80069a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006996:	f7fd fc91 	bl	80042bc <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d901      	bls.n	80069a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e1a8      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069a8:	4b2b      	ldr	r3, [pc, #172]	; (8006a58 <HAL_RCC_OscConfig+0x240>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0302 	and.w	r3, r3, #2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d0f0      	beq.n	8006996 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069b4:	4b28      	ldr	r3, [pc, #160]	; (8006a58 <HAL_RCC_OscConfig+0x240>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	00db      	lsls	r3, r3, #3
 80069c2:	4925      	ldr	r1, [pc, #148]	; (8006a58 <HAL_RCC_OscConfig+0x240>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	600b      	str	r3, [r1, #0]
 80069c8:	e015      	b.n	80069f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069ca:	4b24      	ldr	r3, [pc, #144]	; (8006a5c <HAL_RCC_OscConfig+0x244>)
 80069cc:	2200      	movs	r2, #0
 80069ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d0:	f7fd fc74 	bl	80042bc <HAL_GetTick>
 80069d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069d6:	e008      	b.n	80069ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069d8:	f7fd fc70 	bl	80042bc <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d901      	bls.n	80069ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e187      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069ea:	4b1b      	ldr	r3, [pc, #108]	; (8006a58 <HAL_RCC_OscConfig+0x240>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1f0      	bne.n	80069d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0308 	and.w	r3, r3, #8
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d036      	beq.n	8006a70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d016      	beq.n	8006a38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a0a:	4b15      	ldr	r3, [pc, #84]	; (8006a60 <HAL_RCC_OscConfig+0x248>)
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a10:	f7fd fc54 	bl	80042bc <HAL_GetTick>
 8006a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a16:	e008      	b.n	8006a2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a18:	f7fd fc50 	bl	80042bc <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d901      	bls.n	8006a2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e167      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a2a:	4b0b      	ldr	r3, [pc, #44]	; (8006a58 <HAL_RCC_OscConfig+0x240>)
 8006a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d0f0      	beq.n	8006a18 <HAL_RCC_OscConfig+0x200>
 8006a36:	e01b      	b.n	8006a70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a38:	4b09      	ldr	r3, [pc, #36]	; (8006a60 <HAL_RCC_OscConfig+0x248>)
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a3e:	f7fd fc3d 	bl	80042bc <HAL_GetTick>
 8006a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a44:	e00e      	b.n	8006a64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a46:	f7fd fc39 	bl	80042bc <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d907      	bls.n	8006a64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e150      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
 8006a58:	40023800 	.word	0x40023800
 8006a5c:	42470000 	.word	0x42470000
 8006a60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a64:	4b88      	ldr	r3, [pc, #544]	; (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a68:	f003 0302 	and.w	r3, r3, #2
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1ea      	bne.n	8006a46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0304 	and.w	r3, r3, #4
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f000 8097 	beq.w	8006bac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a82:	4b81      	ldr	r3, [pc, #516]	; (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10f      	bne.n	8006aae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a8e:	2300      	movs	r3, #0
 8006a90:	60bb      	str	r3, [r7, #8]
 8006a92:	4b7d      	ldr	r3, [pc, #500]	; (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a96:	4a7c      	ldr	r2, [pc, #496]	; (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8006a9e:	4b7a      	ldr	r3, [pc, #488]	; (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aa6:	60bb      	str	r3, [r7, #8]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aae:	4b77      	ldr	r3, [pc, #476]	; (8006c8c <HAL_RCC_OscConfig+0x474>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d118      	bne.n	8006aec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006aba:	4b74      	ldr	r3, [pc, #464]	; (8006c8c <HAL_RCC_OscConfig+0x474>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a73      	ldr	r2, [pc, #460]	; (8006c8c <HAL_RCC_OscConfig+0x474>)
 8006ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ac4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ac6:	f7fd fbf9 	bl	80042bc <HAL_GetTick>
 8006aca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006acc:	e008      	b.n	8006ae0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ace:	f7fd fbf5 	bl	80042bc <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d901      	bls.n	8006ae0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e10c      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ae0:	4b6a      	ldr	r3, [pc, #424]	; (8006c8c <HAL_RCC_OscConfig+0x474>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d0f0      	beq.n	8006ace <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d106      	bne.n	8006b02 <HAL_RCC_OscConfig+0x2ea>
 8006af4:	4b64      	ldr	r3, [pc, #400]	; (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af8:	4a63      	ldr	r2, [pc, #396]	; (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006afa:	f043 0301 	orr.w	r3, r3, #1
 8006afe:	6713      	str	r3, [r2, #112]	; 0x70
 8006b00:	e01c      	b.n	8006b3c <HAL_RCC_OscConfig+0x324>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	2b05      	cmp	r3, #5
 8006b08:	d10c      	bne.n	8006b24 <HAL_RCC_OscConfig+0x30c>
 8006b0a:	4b5f      	ldr	r3, [pc, #380]	; (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0e:	4a5e      	ldr	r2, [pc, #376]	; (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006b10:	f043 0304 	orr.w	r3, r3, #4
 8006b14:	6713      	str	r3, [r2, #112]	; 0x70
 8006b16:	4b5c      	ldr	r3, [pc, #368]	; (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b1a:	4a5b      	ldr	r2, [pc, #364]	; (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006b1c:	f043 0301 	orr.w	r3, r3, #1
 8006b20:	6713      	str	r3, [r2, #112]	; 0x70
 8006b22:	e00b      	b.n	8006b3c <HAL_RCC_OscConfig+0x324>
 8006b24:	4b58      	ldr	r3, [pc, #352]	; (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b28:	4a57      	ldr	r2, [pc, #348]	; (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006b2a:	f023 0301 	bic.w	r3, r3, #1
 8006b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8006b30:	4b55      	ldr	r3, [pc, #340]	; (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b34:	4a54      	ldr	r2, [pc, #336]	; (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006b36:	f023 0304 	bic.w	r3, r3, #4
 8006b3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d015      	beq.n	8006b70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b44:	f7fd fbba 	bl	80042bc <HAL_GetTick>
 8006b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b4a:	e00a      	b.n	8006b62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b4c:	f7fd fbb6 	bl	80042bc <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d901      	bls.n	8006b62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e0cb      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b62:	4b49      	ldr	r3, [pc, #292]	; (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d0ee      	beq.n	8006b4c <HAL_RCC_OscConfig+0x334>
 8006b6e:	e014      	b.n	8006b9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b70:	f7fd fba4 	bl	80042bc <HAL_GetTick>
 8006b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b76:	e00a      	b.n	8006b8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b78:	f7fd fba0 	bl	80042bc <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d901      	bls.n	8006b8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e0b5      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b8e:	4b3e      	ldr	r3, [pc, #248]	; (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1ee      	bne.n	8006b78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b9a:	7dfb      	ldrb	r3, [r7, #23]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d105      	bne.n	8006bac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ba0:	4b39      	ldr	r3, [pc, #228]	; (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba4:	4a38      	ldr	r2, [pc, #224]	; (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006ba6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006baa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 80a1 	beq.w	8006cf8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006bb6:	4b34      	ldr	r3, [pc, #208]	; (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f003 030c 	and.w	r3, r3, #12
 8006bbe:	2b08      	cmp	r3, #8
 8006bc0:	d05c      	beq.n	8006c7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d141      	bne.n	8006c4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bca:	4b31      	ldr	r3, [pc, #196]	; (8006c90 <HAL_RCC_OscConfig+0x478>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bd0:	f7fd fb74 	bl	80042bc <HAL_GetTick>
 8006bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bd6:	e008      	b.n	8006bea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bd8:	f7fd fb70 	bl	80042bc <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d901      	bls.n	8006bea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e087      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bea:	4b27      	ldr	r3, [pc, #156]	; (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1f0      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	69da      	ldr	r2, [r3, #28]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c04:	019b      	lsls	r3, r3, #6
 8006c06:	431a      	orrs	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0c:	085b      	lsrs	r3, r3, #1
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	041b      	lsls	r3, r3, #16
 8006c12:	431a      	orrs	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c18:	061b      	lsls	r3, r3, #24
 8006c1a:	491b      	ldr	r1, [pc, #108]	; (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c20:	4b1b      	ldr	r3, [pc, #108]	; (8006c90 <HAL_RCC_OscConfig+0x478>)
 8006c22:	2201      	movs	r2, #1
 8006c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c26:	f7fd fb49 	bl	80042bc <HAL_GetTick>
 8006c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c2c:	e008      	b.n	8006c40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c2e:	f7fd fb45 	bl	80042bc <HAL_GetTick>
 8006c32:	4602      	mov	r2, r0
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d901      	bls.n	8006c40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e05c      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c40:	4b11      	ldr	r3, [pc, #68]	; (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d0f0      	beq.n	8006c2e <HAL_RCC_OscConfig+0x416>
 8006c4c:	e054      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c4e:	4b10      	ldr	r3, [pc, #64]	; (8006c90 <HAL_RCC_OscConfig+0x478>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c54:	f7fd fb32 	bl	80042bc <HAL_GetTick>
 8006c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c5a:	e008      	b.n	8006c6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c5c:	f7fd fb2e 	bl	80042bc <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d901      	bls.n	8006c6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e045      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c6e:	4b06      	ldr	r3, [pc, #24]	; (8006c88 <HAL_RCC_OscConfig+0x470>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1f0      	bne.n	8006c5c <HAL_RCC_OscConfig+0x444>
 8006c7a:	e03d      	b.n	8006cf8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d107      	bne.n	8006c94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e038      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
 8006c88:	40023800 	.word	0x40023800
 8006c8c:	40007000 	.word	0x40007000
 8006c90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c94:	4b1b      	ldr	r3, [pc, #108]	; (8006d04 <HAL_RCC_OscConfig+0x4ec>)
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d028      	beq.n	8006cf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d121      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d11a      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006cca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d111      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cda:	085b      	lsrs	r3, r3, #1
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d107      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d001      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e000      	b.n	8006cfa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3718      	adds	r7, #24
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	40023800 	.word	0x40023800

08006d08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e0cc      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d1c:	4b68      	ldr	r3, [pc, #416]	; (8006ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0307 	and.w	r3, r3, #7
 8006d24:	683a      	ldr	r2, [r7, #0]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d90c      	bls.n	8006d44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d2a:	4b65      	ldr	r3, [pc, #404]	; (8006ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d2c:	683a      	ldr	r2, [r7, #0]
 8006d2e:	b2d2      	uxtb	r2, r2
 8006d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d32:	4b63      	ldr	r3, [pc, #396]	; (8006ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0307 	and.w	r3, r3, #7
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d001      	beq.n	8006d44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e0b8      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0302 	and.w	r3, r3, #2
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d020      	beq.n	8006d92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0304 	and.w	r3, r3, #4
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d005      	beq.n	8006d68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d5c:	4b59      	ldr	r3, [pc, #356]	; (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	4a58      	ldr	r2, [pc, #352]	; (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0308 	and.w	r3, r3, #8
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d005      	beq.n	8006d80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d74:	4b53      	ldr	r3, [pc, #332]	; (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	4a52      	ldr	r2, [pc, #328]	; (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d80:	4b50      	ldr	r3, [pc, #320]	; (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	494d      	ldr	r1, [pc, #308]	; (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d044      	beq.n	8006e28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d107      	bne.n	8006db6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006da6:	4b47      	ldr	r3, [pc, #284]	; (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d119      	bne.n	8006de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e07f      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d003      	beq.n	8006dc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006dc2:	2b03      	cmp	r3, #3
 8006dc4:	d107      	bne.n	8006dd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dc6:	4b3f      	ldr	r3, [pc, #252]	; (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d109      	bne.n	8006de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e06f      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dd6:	4b3b      	ldr	r3, [pc, #236]	; (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0302 	and.w	r3, r3, #2
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d101      	bne.n	8006de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e067      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006de6:	4b37      	ldr	r3, [pc, #220]	; (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f023 0203 	bic.w	r2, r3, #3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	4934      	ldr	r1, [pc, #208]	; (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006df8:	f7fd fa60 	bl	80042bc <HAL_GetTick>
 8006dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dfe:	e00a      	b.n	8006e16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e00:	f7fd fa5c 	bl	80042bc <HAL_GetTick>
 8006e04:	4602      	mov	r2, r0
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d901      	bls.n	8006e16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e04f      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e16:	4b2b      	ldr	r3, [pc, #172]	; (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f003 020c 	and.w	r2, r3, #12
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d1eb      	bne.n	8006e00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e28:	4b25      	ldr	r3, [pc, #148]	; (8006ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0307 	and.w	r3, r3, #7
 8006e30:	683a      	ldr	r2, [r7, #0]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d20c      	bcs.n	8006e50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e36:	4b22      	ldr	r3, [pc, #136]	; (8006ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e38:	683a      	ldr	r2, [r7, #0]
 8006e3a:	b2d2      	uxtb	r2, r2
 8006e3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e3e:	4b20      	ldr	r3, [pc, #128]	; (8006ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0307 	and.w	r3, r3, #7
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d001      	beq.n	8006e50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e032      	b.n	8006eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0304 	and.w	r3, r3, #4
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d008      	beq.n	8006e6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e5c:	4b19      	ldr	r3, [pc, #100]	; (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	4916      	ldr	r1, [pc, #88]	; (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0308 	and.w	r3, r3, #8
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d009      	beq.n	8006e8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e7a:	4b12      	ldr	r3, [pc, #72]	; (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	00db      	lsls	r3, r3, #3
 8006e88:	490e      	ldr	r1, [pc, #56]	; (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e8e:	f000 f821 	bl	8006ed4 <HAL_RCC_GetSysClockFreq>
 8006e92:	4602      	mov	r2, r0
 8006e94:	4b0b      	ldr	r3, [pc, #44]	; (8006ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	091b      	lsrs	r3, r3, #4
 8006e9a:	f003 030f 	and.w	r3, r3, #15
 8006e9e:	490a      	ldr	r1, [pc, #40]	; (8006ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8006ea0:	5ccb      	ldrb	r3, [r1, r3]
 8006ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea6:	4a09      	ldr	r2, [pc, #36]	; (8006ecc <HAL_RCC_ClockConfig+0x1c4>)
 8006ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006eaa:	4b09      	ldr	r3, [pc, #36]	; (8006ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7f9 ff92 	bl	8000dd8 <HAL_InitTick>

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	40023c00 	.word	0x40023c00
 8006ec4:	40023800 	.word	0x40023800
 8006ec8:	0800b75c 	.word	0x0800b75c
 8006ecc:	20000000 	.word	0x20000000
 8006ed0:	20000068 	.word	0x20000068

08006ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ed8:	b094      	sub	sp, #80	; 0x50
 8006eda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006edc:	2300      	movs	r3, #0
 8006ede:	647b      	str	r3, [r7, #68]	; 0x44
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006eec:	4b79      	ldr	r3, [pc, #484]	; (80070d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f003 030c 	and.w	r3, r3, #12
 8006ef4:	2b08      	cmp	r3, #8
 8006ef6:	d00d      	beq.n	8006f14 <HAL_RCC_GetSysClockFreq+0x40>
 8006ef8:	2b08      	cmp	r3, #8
 8006efa:	f200 80e1 	bhi.w	80070c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d002      	beq.n	8006f08 <HAL_RCC_GetSysClockFreq+0x34>
 8006f02:	2b04      	cmp	r3, #4
 8006f04:	d003      	beq.n	8006f0e <HAL_RCC_GetSysClockFreq+0x3a>
 8006f06:	e0db      	b.n	80070c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f08:	4b73      	ldr	r3, [pc, #460]	; (80070d8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f0a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006f0c:	e0db      	b.n	80070c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f0e:	4b73      	ldr	r3, [pc, #460]	; (80070dc <HAL_RCC_GetSysClockFreq+0x208>)
 8006f10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f12:	e0d8      	b.n	80070c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f14:	4b6f      	ldr	r3, [pc, #444]	; (80070d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f1c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f1e:	4b6d      	ldr	r3, [pc, #436]	; (80070d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d063      	beq.n	8006ff2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f2a:	4b6a      	ldr	r3, [pc, #424]	; (80070d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	099b      	lsrs	r3, r3, #6
 8006f30:	2200      	movs	r2, #0
 8006f32:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f3c:	633b      	str	r3, [r7, #48]	; 0x30
 8006f3e:	2300      	movs	r3, #0
 8006f40:	637b      	str	r3, [r7, #52]	; 0x34
 8006f42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006f46:	4622      	mov	r2, r4
 8006f48:	462b      	mov	r3, r5
 8006f4a:	f04f 0000 	mov.w	r0, #0
 8006f4e:	f04f 0100 	mov.w	r1, #0
 8006f52:	0159      	lsls	r1, r3, #5
 8006f54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f58:	0150      	lsls	r0, r2, #5
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	4621      	mov	r1, r4
 8006f60:	1a51      	subs	r1, r2, r1
 8006f62:	6139      	str	r1, [r7, #16]
 8006f64:	4629      	mov	r1, r5
 8006f66:	eb63 0301 	sbc.w	r3, r3, r1
 8006f6a:	617b      	str	r3, [r7, #20]
 8006f6c:	f04f 0200 	mov.w	r2, #0
 8006f70:	f04f 0300 	mov.w	r3, #0
 8006f74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f78:	4659      	mov	r1, fp
 8006f7a:	018b      	lsls	r3, r1, #6
 8006f7c:	4651      	mov	r1, sl
 8006f7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f82:	4651      	mov	r1, sl
 8006f84:	018a      	lsls	r2, r1, #6
 8006f86:	4651      	mov	r1, sl
 8006f88:	ebb2 0801 	subs.w	r8, r2, r1
 8006f8c:	4659      	mov	r1, fp
 8006f8e:	eb63 0901 	sbc.w	r9, r3, r1
 8006f92:	f04f 0200 	mov.w	r2, #0
 8006f96:	f04f 0300 	mov.w	r3, #0
 8006f9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fa6:	4690      	mov	r8, r2
 8006fa8:	4699      	mov	r9, r3
 8006faa:	4623      	mov	r3, r4
 8006fac:	eb18 0303 	adds.w	r3, r8, r3
 8006fb0:	60bb      	str	r3, [r7, #8]
 8006fb2:	462b      	mov	r3, r5
 8006fb4:	eb49 0303 	adc.w	r3, r9, r3
 8006fb8:	60fb      	str	r3, [r7, #12]
 8006fba:	f04f 0200 	mov.w	r2, #0
 8006fbe:	f04f 0300 	mov.w	r3, #0
 8006fc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006fc6:	4629      	mov	r1, r5
 8006fc8:	024b      	lsls	r3, r1, #9
 8006fca:	4621      	mov	r1, r4
 8006fcc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	024a      	lsls	r2, r1, #9
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fda:	2200      	movs	r2, #0
 8006fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fe0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fe4:	f7fb feca 	bl	8002d7c <__aeabi_uldivmod>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	460b      	mov	r3, r1
 8006fec:	4613      	mov	r3, r2
 8006fee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ff0:	e058      	b.n	80070a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ff2:	4b38      	ldr	r3, [pc, #224]	; (80070d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	099b      	lsrs	r3, r3, #6
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	4611      	mov	r1, r2
 8006ffe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007002:	623b      	str	r3, [r7, #32]
 8007004:	2300      	movs	r3, #0
 8007006:	627b      	str	r3, [r7, #36]	; 0x24
 8007008:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800700c:	4642      	mov	r2, r8
 800700e:	464b      	mov	r3, r9
 8007010:	f04f 0000 	mov.w	r0, #0
 8007014:	f04f 0100 	mov.w	r1, #0
 8007018:	0159      	lsls	r1, r3, #5
 800701a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800701e:	0150      	lsls	r0, r2, #5
 8007020:	4602      	mov	r2, r0
 8007022:	460b      	mov	r3, r1
 8007024:	4641      	mov	r1, r8
 8007026:	ebb2 0a01 	subs.w	sl, r2, r1
 800702a:	4649      	mov	r1, r9
 800702c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007030:	f04f 0200 	mov.w	r2, #0
 8007034:	f04f 0300 	mov.w	r3, #0
 8007038:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800703c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007040:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007044:	ebb2 040a 	subs.w	r4, r2, sl
 8007048:	eb63 050b 	sbc.w	r5, r3, fp
 800704c:	f04f 0200 	mov.w	r2, #0
 8007050:	f04f 0300 	mov.w	r3, #0
 8007054:	00eb      	lsls	r3, r5, #3
 8007056:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800705a:	00e2      	lsls	r2, r4, #3
 800705c:	4614      	mov	r4, r2
 800705e:	461d      	mov	r5, r3
 8007060:	4643      	mov	r3, r8
 8007062:	18e3      	adds	r3, r4, r3
 8007064:	603b      	str	r3, [r7, #0]
 8007066:	464b      	mov	r3, r9
 8007068:	eb45 0303 	adc.w	r3, r5, r3
 800706c:	607b      	str	r3, [r7, #4]
 800706e:	f04f 0200 	mov.w	r2, #0
 8007072:	f04f 0300 	mov.w	r3, #0
 8007076:	e9d7 4500 	ldrd	r4, r5, [r7]
 800707a:	4629      	mov	r1, r5
 800707c:	028b      	lsls	r3, r1, #10
 800707e:	4621      	mov	r1, r4
 8007080:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007084:	4621      	mov	r1, r4
 8007086:	028a      	lsls	r2, r1, #10
 8007088:	4610      	mov	r0, r2
 800708a:	4619      	mov	r1, r3
 800708c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800708e:	2200      	movs	r2, #0
 8007090:	61bb      	str	r3, [r7, #24]
 8007092:	61fa      	str	r2, [r7, #28]
 8007094:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007098:	f7fb fe70 	bl	8002d7c <__aeabi_uldivmod>
 800709c:	4602      	mov	r2, r0
 800709e:	460b      	mov	r3, r1
 80070a0:	4613      	mov	r3, r2
 80070a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80070a4:	4b0b      	ldr	r3, [pc, #44]	; (80070d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	0c1b      	lsrs	r3, r3, #16
 80070aa:	f003 0303 	and.w	r3, r3, #3
 80070ae:	3301      	adds	r3, #1
 80070b0:	005b      	lsls	r3, r3, #1
 80070b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80070b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80070b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80070be:	e002      	b.n	80070c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070c0:	4b05      	ldr	r3, [pc, #20]	; (80070d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80070c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80070c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3750      	adds	r7, #80	; 0x50
 80070cc:	46bd      	mov	sp, r7
 80070ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070d2:	bf00      	nop
 80070d4:	40023800 	.word	0x40023800
 80070d8:	00f42400 	.word	0x00f42400
 80070dc:	007a1200 	.word	0x007a1200

080070e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070e0:	b480      	push	{r7}
 80070e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070e4:	4b03      	ldr	r3, [pc, #12]	; (80070f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80070e6:	681b      	ldr	r3, [r3, #0]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	20000000 	.word	0x20000000

080070f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80070fc:	f7ff fff0 	bl	80070e0 <HAL_RCC_GetHCLKFreq>
 8007100:	4602      	mov	r2, r0
 8007102:	4b05      	ldr	r3, [pc, #20]	; (8007118 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	0a9b      	lsrs	r3, r3, #10
 8007108:	f003 0307 	and.w	r3, r3, #7
 800710c:	4903      	ldr	r1, [pc, #12]	; (800711c <HAL_RCC_GetPCLK1Freq+0x24>)
 800710e:	5ccb      	ldrb	r3, [r1, r3]
 8007110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007114:	4618      	mov	r0, r3
 8007116:	bd80      	pop	{r7, pc}
 8007118:	40023800 	.word	0x40023800
 800711c:	0800b76c 	.word	0x0800b76c

08007120 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007124:	f7ff ffdc 	bl	80070e0 <HAL_RCC_GetHCLKFreq>
 8007128:	4602      	mov	r2, r0
 800712a:	4b05      	ldr	r3, [pc, #20]	; (8007140 <HAL_RCC_GetPCLK2Freq+0x20>)
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	0b5b      	lsrs	r3, r3, #13
 8007130:	f003 0307 	and.w	r3, r3, #7
 8007134:	4903      	ldr	r1, [pc, #12]	; (8007144 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007136:	5ccb      	ldrb	r3, [r1, r3]
 8007138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800713c:	4618      	mov	r0, r3
 800713e:	bd80      	pop	{r7, pc}
 8007140:	40023800 	.word	0x40023800
 8007144:	0800b76c 	.word	0x0800b76c

08007148 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	220f      	movs	r2, #15
 8007156:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007158:	4b12      	ldr	r3, [pc, #72]	; (80071a4 <HAL_RCC_GetClockConfig+0x5c>)
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f003 0203 	and.w	r2, r3, #3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007164:	4b0f      	ldr	r3, [pc, #60]	; (80071a4 <HAL_RCC_GetClockConfig+0x5c>)
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007170:	4b0c      	ldr	r3, [pc, #48]	; (80071a4 <HAL_RCC_GetClockConfig+0x5c>)
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800717c:	4b09      	ldr	r3, [pc, #36]	; (80071a4 <HAL_RCC_GetClockConfig+0x5c>)
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	08db      	lsrs	r3, r3, #3
 8007182:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800718a:	4b07      	ldr	r3, [pc, #28]	; (80071a8 <HAL_RCC_GetClockConfig+0x60>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0207 	and.w	r2, r3, #7
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	601a      	str	r2, [r3, #0]
}
 8007196:	bf00      	nop
 8007198:	370c      	adds	r7, #12
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	40023800 	.word	0x40023800
 80071a8:	40023c00 	.word	0x40023c00

080071ac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80071b4:	2300      	movs	r3, #0
 80071b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80071b8:	2300      	movs	r3, #0
 80071ba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0301 	and.w	r3, r3, #1
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d105      	bne.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d035      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80071d4:	4b62      	ldr	r3, [pc, #392]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80071d6:	2200      	movs	r2, #0
 80071d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071da:	f7fd f86f 	bl	80042bc <HAL_GetTick>
 80071de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80071e0:	e008      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80071e2:	f7fd f86b 	bl	80042bc <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d901      	bls.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e0b0      	b.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80071f4:	4b5b      	ldr	r3, [pc, #364]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1f0      	bne.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	019a      	lsls	r2, r3, #6
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	071b      	lsls	r3, r3, #28
 800720c:	4955      	ldr	r1, [pc, #340]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800720e:	4313      	orrs	r3, r2
 8007210:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007214:	4b52      	ldr	r3, [pc, #328]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007216:	2201      	movs	r2, #1
 8007218:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800721a:	f7fd f84f 	bl	80042bc <HAL_GetTick>
 800721e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007220:	e008      	b.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007222:	f7fd f84b 	bl	80042bc <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	2b02      	cmp	r3, #2
 800722e:	d901      	bls.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e090      	b.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007234:	4b4b      	ldr	r3, [pc, #300]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d0f0      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0302 	and.w	r3, r3, #2
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 8083 	beq.w	8007354 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800724e:	2300      	movs	r3, #0
 8007250:	60fb      	str	r3, [r7, #12]
 8007252:	4b44      	ldr	r3, [pc, #272]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007256:	4a43      	ldr	r2, [pc, #268]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800725c:	6413      	str	r3, [r2, #64]	; 0x40
 800725e:	4b41      	ldr	r3, [pc, #260]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800726a:	4b3f      	ldr	r3, [pc, #252]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a3e      	ldr	r2, [pc, #248]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007274:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007276:	f7fd f821 	bl	80042bc <HAL_GetTick>
 800727a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800727c:	e008      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800727e:	f7fd f81d 	bl	80042bc <HAL_GetTick>
 8007282:	4602      	mov	r2, r0
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	2b02      	cmp	r3, #2
 800728a:	d901      	bls.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e062      	b.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007290:	4b35      	ldr	r3, [pc, #212]	; (8007368 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007298:	2b00      	cmp	r3, #0
 800729a:	d0f0      	beq.n	800727e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800729c:	4b31      	ldr	r3, [pc, #196]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800729e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072a4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d02f      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d028      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072ba:	4b2a      	ldr	r3, [pc, #168]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072c2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80072c4:	4b29      	ldr	r3, [pc, #164]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80072c6:	2201      	movs	r2, #1
 80072c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80072ca:	4b28      	ldr	r3, [pc, #160]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80072d0:	4a24      	ldr	r2, [pc, #144]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80072d6:	4b23      	ldr	r3, [pc, #140]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072da:	f003 0301 	and.w	r3, r3, #1
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d114      	bne.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80072e2:	f7fc ffeb 	bl	80042bc <HAL_GetTick>
 80072e6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072e8:	e00a      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072ea:	f7fc ffe7 	bl	80042bc <HAL_GetTick>
 80072ee:	4602      	mov	r2, r0
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d901      	bls.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e02a      	b.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007300:	4b18      	ldr	r3, [pc, #96]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007304:	f003 0302 	and.w	r3, r3, #2
 8007308:	2b00      	cmp	r3, #0
 800730a:	d0ee      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007314:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007318:	d10d      	bne.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800731a:	4b12      	ldr	r3, [pc, #72]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800732a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800732e:	490d      	ldr	r1, [pc, #52]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007330:	4313      	orrs	r3, r2
 8007332:	608b      	str	r3, [r1, #8]
 8007334:	e005      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007336:	4b0b      	ldr	r3, [pc, #44]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	4a0a      	ldr	r2, [pc, #40]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800733c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007340:	6093      	str	r3, [r2, #8]
 8007342:	4b08      	ldr	r3, [pc, #32]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007344:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800734e:	4905      	ldr	r1, [pc, #20]	; (8007364 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007350:	4313      	orrs	r3, r2
 8007352:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3718      	adds	r7, #24
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	42470068 	.word	0x42470068
 8007364:	40023800 	.word	0x40023800
 8007368:	40007000 	.word	0x40007000
 800736c:	42470e40 	.word	0x42470e40

08007370 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007370:	b480      	push	{r7}
 8007372:	b087      	sub	sp, #28
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007378:	2300      	movs	r3, #0
 800737a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800737c:	2300      	movs	r3, #0
 800737e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007380:	2300      	movs	r3, #0
 8007382:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007384:	2300      	movs	r3, #0
 8007386:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d13e      	bne.n	800740c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800738e:	4b23      	ldr	r3, [pc, #140]	; (800741c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007396:	60fb      	str	r3, [r7, #12]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d005      	beq.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d12f      	bne.n	8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80073a4:	4b1e      	ldr	r3, [pc, #120]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80073a6:	617b      	str	r3, [r7, #20]
          break;
 80073a8:	e02f      	b.n	800740a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80073aa:	4b1c      	ldr	r3, [pc, #112]	; (800741c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073b6:	d108      	bne.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80073b8:	4b18      	ldr	r3, [pc, #96]	; (800741c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073c0:	4a18      	ldr	r2, [pc, #96]	; (8007424 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80073c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c6:	613b      	str	r3, [r7, #16]
 80073c8:	e007      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80073ca:	4b14      	ldr	r3, [pc, #80]	; (800741c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073d2:	4a15      	ldr	r2, [pc, #84]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80073d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80073da:	4b10      	ldr	r3, [pc, #64]	; (800741c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80073dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073e0:	099b      	lsrs	r3, r3, #6
 80073e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	fb02 f303 	mul.w	r3, r2, r3
 80073ec:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80073ee:	4b0b      	ldr	r3, [pc, #44]	; (800741c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80073f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073f4:	0f1b      	lsrs	r3, r3, #28
 80073f6:	f003 0307 	and.w	r3, r3, #7
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007400:	617b      	str	r3, [r7, #20]
          break;
 8007402:	e002      	b.n	800740a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007404:	2300      	movs	r3, #0
 8007406:	617b      	str	r3, [r7, #20]
          break;
 8007408:	bf00      	nop
        }
      }
      break;
 800740a:	bf00      	nop
    }
  }
  return frequency;
 800740c:	697b      	ldr	r3, [r7, #20]
}
 800740e:	4618      	mov	r0, r3
 8007410:	371c      	adds	r7, #28
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	40023800 	.word	0x40023800
 8007420:	00bb8000 	.word	0x00bb8000
 8007424:	007a1200 	.word	0x007a1200
 8007428:	00f42400 	.word	0x00f42400

0800742c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e07b      	b.n	8007536 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007442:	2b00      	cmp	r3, #0
 8007444:	d108      	bne.n	8007458 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800744e:	d009      	beq.n	8007464 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	61da      	str	r2, [r3, #28]
 8007456:	e005      	b.n	8007464 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007470:	b2db      	uxtb	r3, r3
 8007472:	2b00      	cmp	r3, #0
 8007474:	d106      	bne.n	8007484 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f7f9 fbde 	bl	8000c40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2202      	movs	r2, #2
 8007488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800749a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80074ac:	431a      	orrs	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074b6:	431a      	orrs	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	f003 0302 	and.w	r3, r3, #2
 80074c0:	431a      	orrs	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	431a      	orrs	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074d4:	431a      	orrs	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	69db      	ldr	r3, [r3, #28]
 80074da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074de:	431a      	orrs	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a1b      	ldr	r3, [r3, #32]
 80074e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074e8:	ea42 0103 	orr.w	r1, r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	430a      	orrs	r2, r1
 80074fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	0c1b      	lsrs	r3, r3, #16
 8007502:	f003 0104 	and.w	r1, r3, #4
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750a:	f003 0210 	and.w	r2, r3, #16
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	430a      	orrs	r2, r1
 8007514:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	69da      	ldr	r2, [r3, #28]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007524:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b082      	sub	sp, #8
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d101      	bne.n	8007550 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e041      	b.n	80075d4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007556:	b2db      	uxtb	r3, r3
 8007558:	2b00      	cmp	r3, #0
 800755a:	d106      	bne.n	800756a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f839 	bl	80075dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2202      	movs	r2, #2
 800756e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	3304      	adds	r3, #4
 800757a:	4619      	mov	r1, r3
 800757c:	4610      	mov	r0, r2
 800757e:	f000 f9d7 	bl	8007930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3708      	adds	r7, #8
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b01      	cmp	r3, #1
 8007602:	d001      	beq.n	8007608 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e04e      	b.n	80076a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2202      	movs	r2, #2
 800760c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68da      	ldr	r2, [r3, #12]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f042 0201 	orr.w	r2, r2, #1
 800761e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a23      	ldr	r2, [pc, #140]	; (80076b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d022      	beq.n	8007670 <HAL_TIM_Base_Start_IT+0x80>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007632:	d01d      	beq.n	8007670 <HAL_TIM_Base_Start_IT+0x80>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a1f      	ldr	r2, [pc, #124]	; (80076b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d018      	beq.n	8007670 <HAL_TIM_Base_Start_IT+0x80>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a1e      	ldr	r2, [pc, #120]	; (80076bc <HAL_TIM_Base_Start_IT+0xcc>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d013      	beq.n	8007670 <HAL_TIM_Base_Start_IT+0x80>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a1c      	ldr	r2, [pc, #112]	; (80076c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d00e      	beq.n	8007670 <HAL_TIM_Base_Start_IT+0x80>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a1b      	ldr	r2, [pc, #108]	; (80076c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d009      	beq.n	8007670 <HAL_TIM_Base_Start_IT+0x80>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a19      	ldr	r2, [pc, #100]	; (80076c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d004      	beq.n	8007670 <HAL_TIM_Base_Start_IT+0x80>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a18      	ldr	r2, [pc, #96]	; (80076cc <HAL_TIM_Base_Start_IT+0xdc>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d111      	bne.n	8007694 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f003 0307 	and.w	r3, r3, #7
 800767a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2b06      	cmp	r3, #6
 8007680:	d010      	beq.n	80076a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f042 0201 	orr.w	r2, r2, #1
 8007690:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007692:	e007      	b.n	80076a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f042 0201 	orr.w	r2, r2, #1
 80076a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3714      	adds	r7, #20
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	40010000 	.word	0x40010000
 80076b8:	40000400 	.word	0x40000400
 80076bc:	40000800 	.word	0x40000800
 80076c0:	40000c00 	.word	0x40000c00
 80076c4:	40010400 	.word	0x40010400
 80076c8:	40014000 	.word	0x40014000
 80076cc:	40001800 	.word	0x40001800

080076d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	f003 0302 	and.w	r3, r3, #2
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d122      	bne.n	800772c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	f003 0302 	and.w	r3, r3, #2
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d11b      	bne.n	800772c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f06f 0202 	mvn.w	r2, #2
 80076fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	f003 0303 	and.w	r3, r3, #3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d003      	beq.n	800771a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f8ee 	bl	80078f4 <HAL_TIM_IC_CaptureCallback>
 8007718:	e005      	b.n	8007726 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f8e0 	bl	80078e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 f8f1 	bl	8007908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	f003 0304 	and.w	r3, r3, #4
 8007736:	2b04      	cmp	r3, #4
 8007738:	d122      	bne.n	8007780 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	f003 0304 	and.w	r3, r3, #4
 8007744:	2b04      	cmp	r3, #4
 8007746:	d11b      	bne.n	8007780 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f06f 0204 	mvn.w	r2, #4
 8007750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2202      	movs	r2, #2
 8007756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f8c4 	bl	80078f4 <HAL_TIM_IC_CaptureCallback>
 800776c:	e005      	b.n	800777a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f8b6 	bl	80078e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f8c7 	bl	8007908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	f003 0308 	and.w	r3, r3, #8
 800778a:	2b08      	cmp	r3, #8
 800778c:	d122      	bne.n	80077d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	f003 0308 	and.w	r3, r3, #8
 8007798:	2b08      	cmp	r3, #8
 800779a:	d11b      	bne.n	80077d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f06f 0208 	mvn.w	r2, #8
 80077a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2204      	movs	r2, #4
 80077aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	69db      	ldr	r3, [r3, #28]
 80077b2:	f003 0303 	and.w	r3, r3, #3
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d003      	beq.n	80077c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f89a 	bl	80078f4 <HAL_TIM_IC_CaptureCallback>
 80077c0:	e005      	b.n	80077ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f88c 	bl	80078e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 f89d 	bl	8007908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	f003 0310 	and.w	r3, r3, #16
 80077de:	2b10      	cmp	r3, #16
 80077e0:	d122      	bne.n	8007828 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	f003 0310 	and.w	r3, r3, #16
 80077ec:	2b10      	cmp	r3, #16
 80077ee:	d11b      	bne.n	8007828 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f06f 0210 	mvn.w	r2, #16
 80077f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2208      	movs	r2, #8
 80077fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800780a:	2b00      	cmp	r3, #0
 800780c:	d003      	beq.n	8007816 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f870 	bl	80078f4 <HAL_TIM_IC_CaptureCallback>
 8007814:	e005      	b.n	8007822 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f862 	bl	80078e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f873 	bl	8007908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	f003 0301 	and.w	r3, r3, #1
 8007832:	2b01      	cmp	r3, #1
 8007834:	d10e      	bne.n	8007854 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	2b01      	cmp	r3, #1
 8007842:	d107      	bne.n	8007854 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f06f 0201 	mvn.w	r2, #1
 800784c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f7f9 f874 	bl	800093c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800785e:	2b80      	cmp	r3, #128	; 0x80
 8007860:	d10e      	bne.n	8007880 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800786c:	2b80      	cmp	r3, #128	; 0x80
 800786e:	d107      	bne.n	8007880 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f902 	bl	8007a84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800788a:	2b40      	cmp	r3, #64	; 0x40
 800788c:	d10e      	bne.n	80078ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007898:	2b40      	cmp	r3, #64	; 0x40
 800789a:	d107      	bne.n	80078ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f838 	bl	800791c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	f003 0320 	and.w	r3, r3, #32
 80078b6:	2b20      	cmp	r3, #32
 80078b8:	d10e      	bne.n	80078d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	f003 0320 	and.w	r3, r3, #32
 80078c4:	2b20      	cmp	r3, #32
 80078c6:	d107      	bne.n	80078d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f06f 0220 	mvn.w	r2, #32
 80078d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f8cc 	bl	8007a70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078d8:	bf00      	nop
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a40      	ldr	r2, [pc, #256]	; (8007a44 <TIM_Base_SetConfig+0x114>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d013      	beq.n	8007970 <TIM_Base_SetConfig+0x40>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800794e:	d00f      	beq.n	8007970 <TIM_Base_SetConfig+0x40>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a3d      	ldr	r2, [pc, #244]	; (8007a48 <TIM_Base_SetConfig+0x118>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d00b      	beq.n	8007970 <TIM_Base_SetConfig+0x40>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a3c      	ldr	r2, [pc, #240]	; (8007a4c <TIM_Base_SetConfig+0x11c>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d007      	beq.n	8007970 <TIM_Base_SetConfig+0x40>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a3b      	ldr	r2, [pc, #236]	; (8007a50 <TIM_Base_SetConfig+0x120>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d003      	beq.n	8007970 <TIM_Base_SetConfig+0x40>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a3a      	ldr	r2, [pc, #232]	; (8007a54 <TIM_Base_SetConfig+0x124>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d108      	bne.n	8007982 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	4313      	orrs	r3, r2
 8007980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a2f      	ldr	r2, [pc, #188]	; (8007a44 <TIM_Base_SetConfig+0x114>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d02b      	beq.n	80079e2 <TIM_Base_SetConfig+0xb2>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007990:	d027      	beq.n	80079e2 <TIM_Base_SetConfig+0xb2>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a2c      	ldr	r2, [pc, #176]	; (8007a48 <TIM_Base_SetConfig+0x118>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d023      	beq.n	80079e2 <TIM_Base_SetConfig+0xb2>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a2b      	ldr	r2, [pc, #172]	; (8007a4c <TIM_Base_SetConfig+0x11c>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d01f      	beq.n	80079e2 <TIM_Base_SetConfig+0xb2>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a2a      	ldr	r2, [pc, #168]	; (8007a50 <TIM_Base_SetConfig+0x120>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d01b      	beq.n	80079e2 <TIM_Base_SetConfig+0xb2>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a29      	ldr	r2, [pc, #164]	; (8007a54 <TIM_Base_SetConfig+0x124>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d017      	beq.n	80079e2 <TIM_Base_SetConfig+0xb2>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a28      	ldr	r2, [pc, #160]	; (8007a58 <TIM_Base_SetConfig+0x128>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d013      	beq.n	80079e2 <TIM_Base_SetConfig+0xb2>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a27      	ldr	r2, [pc, #156]	; (8007a5c <TIM_Base_SetConfig+0x12c>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d00f      	beq.n	80079e2 <TIM_Base_SetConfig+0xb2>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a26      	ldr	r2, [pc, #152]	; (8007a60 <TIM_Base_SetConfig+0x130>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d00b      	beq.n	80079e2 <TIM_Base_SetConfig+0xb2>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a25      	ldr	r2, [pc, #148]	; (8007a64 <TIM_Base_SetConfig+0x134>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d007      	beq.n	80079e2 <TIM_Base_SetConfig+0xb2>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a24      	ldr	r2, [pc, #144]	; (8007a68 <TIM_Base_SetConfig+0x138>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d003      	beq.n	80079e2 <TIM_Base_SetConfig+0xb2>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a23      	ldr	r2, [pc, #140]	; (8007a6c <TIM_Base_SetConfig+0x13c>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d108      	bne.n	80079f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	689a      	ldr	r2, [r3, #8]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a0a      	ldr	r2, [pc, #40]	; (8007a44 <TIM_Base_SetConfig+0x114>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d003      	beq.n	8007a28 <TIM_Base_SetConfig+0xf8>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a0c      	ldr	r2, [pc, #48]	; (8007a54 <TIM_Base_SetConfig+0x124>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d103      	bne.n	8007a30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	691a      	ldr	r2, [r3, #16]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	615a      	str	r2, [r3, #20]
}
 8007a36:	bf00      	nop
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	40010000 	.word	0x40010000
 8007a48:	40000400 	.word	0x40000400
 8007a4c:	40000800 	.word	0x40000800
 8007a50:	40000c00 	.word	0x40000c00
 8007a54:	40010400 	.word	0x40010400
 8007a58:	40014000 	.word	0x40014000
 8007a5c:	40014400 	.word	0x40014400
 8007a60:	40014800 	.word	0x40014800
 8007a64:	40001800 	.word	0x40001800
 8007a68:	40001c00 	.word	0x40001c00
 8007a6c:	40002000 	.word	0x40002000

08007a70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d101      	bne.n	8007aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e03f      	b.n	8007b2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d106      	bne.n	8007ac4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7f9 f924 	bl	8000d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2224      	movs	r2, #36	; 0x24
 8007ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68da      	ldr	r2, [r3, #12]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ada:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f929 	bl	8007d34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	691a      	ldr	r2, [r3, #16]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007af0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	695a      	ldr	r2, [r3, #20]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68da      	ldr	r2, [r3, #12]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2220      	movs	r2, #32
 8007b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2220      	movs	r2, #32
 8007b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3708      	adds	r7, #8
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b08a      	sub	sp, #40	; 0x28
 8007b36:	af02      	add	r7, sp, #8
 8007b38:	60f8      	str	r0, [r7, #12]
 8007b3a:	60b9      	str	r1, [r7, #8]
 8007b3c:	603b      	str	r3, [r7, #0]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007b42:	2300      	movs	r3, #0
 8007b44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b20      	cmp	r3, #32
 8007b50:	d17c      	bne.n	8007c4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d002      	beq.n	8007b5e <HAL_UART_Transmit+0x2c>
 8007b58:	88fb      	ldrh	r3, [r7, #6]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d101      	bne.n	8007b62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e075      	b.n	8007c4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d101      	bne.n	8007b70 <HAL_UART_Transmit+0x3e>
 8007b6c:	2302      	movs	r3, #2
 8007b6e:	e06e      	b.n	8007c4e <HAL_UART_Transmit+0x11c>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2221      	movs	r2, #33	; 0x21
 8007b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b86:	f7fc fb99 	bl	80042bc <HAL_GetTick>
 8007b8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	88fa      	ldrh	r2, [r7, #6]
 8007b90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	88fa      	ldrh	r2, [r7, #6]
 8007b96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ba0:	d108      	bne.n	8007bb4 <HAL_UART_Transmit+0x82>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d104      	bne.n	8007bb4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007baa:	2300      	movs	r3, #0
 8007bac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	61bb      	str	r3, [r7, #24]
 8007bb2:	e003      	b.n	8007bbc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007bc4:	e02a      	b.n	8007c1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	9300      	str	r3, [sp, #0]
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	2180      	movs	r1, #128	; 0x80
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f000 f840 	bl	8007c56 <UART_WaitOnFlagUntilTimeout>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d001      	beq.n	8007be0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	e036      	b.n	8007c4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10b      	bne.n	8007bfe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	881b      	ldrh	r3, [r3, #0]
 8007bea:	461a      	mov	r2, r3
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bf4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	3302      	adds	r3, #2
 8007bfa:	61bb      	str	r3, [r7, #24]
 8007bfc:	e007      	b.n	8007c0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	781a      	ldrb	r2, [r3, #0]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	3b01      	subs	r3, #1
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1cf      	bne.n	8007bc6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	2140      	movs	r1, #64	; 0x40
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f000 f810 	bl	8007c56 <UART_WaitOnFlagUntilTimeout>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d001      	beq.n	8007c40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	e006      	b.n	8007c4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2220      	movs	r2, #32
 8007c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	e000      	b.n	8007c4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007c4c:	2302      	movs	r3, #2
  }
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3720      	adds	r7, #32
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b090      	sub	sp, #64	; 0x40
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	60f8      	str	r0, [r7, #12]
 8007c5e:	60b9      	str	r1, [r7, #8]
 8007c60:	603b      	str	r3, [r7, #0]
 8007c62:	4613      	mov	r3, r2
 8007c64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c66:	e050      	b.n	8007d0a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c6e:	d04c      	beq.n	8007d0a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d007      	beq.n	8007c86 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c76:	f7fc fb21 	bl	80042bc <HAL_GetTick>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d241      	bcs.n	8007d0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	330c      	adds	r3, #12
 8007c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	330c      	adds	r3, #12
 8007ca4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007ca6:	637a      	str	r2, [r7, #52]	; 0x34
 8007ca8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007caa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007cac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cae:	e841 2300 	strex	r3, r2, [r1]
 8007cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1e5      	bne.n	8007c86 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	3314      	adds	r3, #20
 8007cc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	e853 3f00 	ldrex	r3, [r3]
 8007cc8:	613b      	str	r3, [r7, #16]
   return(result);
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	f023 0301 	bic.w	r3, r3, #1
 8007cd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	3314      	adds	r3, #20
 8007cd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cda:	623a      	str	r2, [r7, #32]
 8007cdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cde:	69f9      	ldr	r1, [r7, #28]
 8007ce0:	6a3a      	ldr	r2, [r7, #32]
 8007ce2:	e841 2300 	strex	r3, r2, [r1]
 8007ce6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1e5      	bne.n	8007cba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2220      	movs	r2, #32
 8007cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2220      	movs	r2, #32
 8007cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e00f      	b.n	8007d2a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	4013      	ands	r3, r2
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	bf0c      	ite	eq
 8007d1a:	2301      	moveq	r3, #1
 8007d1c:	2300      	movne	r3, #0
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	461a      	mov	r2, r3
 8007d22:	79fb      	ldrb	r3, [r7, #7]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d09f      	beq.n	8007c68 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3740      	adds	r7, #64	; 0x40
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
	...

08007d34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d38:	b0c0      	sub	sp, #256	; 0x100
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d50:	68d9      	ldr	r1, [r3, #12]
 8007d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	ea40 0301 	orr.w	r3, r0, r1
 8007d5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d62:	689a      	ldr	r2, [r3, #8]
 8007d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	431a      	orrs	r2, r3
 8007d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	431a      	orrs	r2, r3
 8007d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d78:	69db      	ldr	r3, [r3, #28]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007d8c:	f021 010c 	bic.w	r1, r1, #12
 8007d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d9a:	430b      	orrs	r3, r1
 8007d9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	695b      	ldr	r3, [r3, #20]
 8007da6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dae:	6999      	ldr	r1, [r3, #24]
 8007db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	ea40 0301 	orr.w	r3, r0, r1
 8007dba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	4b8f      	ldr	r3, [pc, #572]	; (8008000 <UART_SetConfig+0x2cc>)
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d005      	beq.n	8007dd4 <UART_SetConfig+0xa0>
 8007dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	4b8d      	ldr	r3, [pc, #564]	; (8008004 <UART_SetConfig+0x2d0>)
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d104      	bne.n	8007dde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007dd4:	f7ff f9a4 	bl	8007120 <HAL_RCC_GetPCLK2Freq>
 8007dd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007ddc:	e003      	b.n	8007de6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007dde:	f7ff f98b 	bl	80070f8 <HAL_RCC_GetPCLK1Freq>
 8007de2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dea:	69db      	ldr	r3, [r3, #28]
 8007dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007df0:	f040 810c 	bne.w	800800c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007dfe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007e02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007e06:	4622      	mov	r2, r4
 8007e08:	462b      	mov	r3, r5
 8007e0a:	1891      	adds	r1, r2, r2
 8007e0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8007e0e:	415b      	adcs	r3, r3
 8007e10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007e16:	4621      	mov	r1, r4
 8007e18:	eb12 0801 	adds.w	r8, r2, r1
 8007e1c:	4629      	mov	r1, r5
 8007e1e:	eb43 0901 	adc.w	r9, r3, r1
 8007e22:	f04f 0200 	mov.w	r2, #0
 8007e26:	f04f 0300 	mov.w	r3, #0
 8007e2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e36:	4690      	mov	r8, r2
 8007e38:	4699      	mov	r9, r3
 8007e3a:	4623      	mov	r3, r4
 8007e3c:	eb18 0303 	adds.w	r3, r8, r3
 8007e40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e44:	462b      	mov	r3, r5
 8007e46:	eb49 0303 	adc.w	r3, r9, r3
 8007e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007e5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007e62:	460b      	mov	r3, r1
 8007e64:	18db      	adds	r3, r3, r3
 8007e66:	653b      	str	r3, [r7, #80]	; 0x50
 8007e68:	4613      	mov	r3, r2
 8007e6a:	eb42 0303 	adc.w	r3, r2, r3
 8007e6e:	657b      	str	r3, [r7, #84]	; 0x54
 8007e70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007e74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007e78:	f7fa ff80 	bl	8002d7c <__aeabi_uldivmod>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	460b      	mov	r3, r1
 8007e80:	4b61      	ldr	r3, [pc, #388]	; (8008008 <UART_SetConfig+0x2d4>)
 8007e82:	fba3 2302 	umull	r2, r3, r3, r2
 8007e86:	095b      	lsrs	r3, r3, #5
 8007e88:	011c      	lsls	r4, r3, #4
 8007e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007e98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007e9c:	4642      	mov	r2, r8
 8007e9e:	464b      	mov	r3, r9
 8007ea0:	1891      	adds	r1, r2, r2
 8007ea2:	64b9      	str	r1, [r7, #72]	; 0x48
 8007ea4:	415b      	adcs	r3, r3
 8007ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ea8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007eac:	4641      	mov	r1, r8
 8007eae:	eb12 0a01 	adds.w	sl, r2, r1
 8007eb2:	4649      	mov	r1, r9
 8007eb4:	eb43 0b01 	adc.w	fp, r3, r1
 8007eb8:	f04f 0200 	mov.w	r2, #0
 8007ebc:	f04f 0300 	mov.w	r3, #0
 8007ec0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ec4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ec8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ecc:	4692      	mov	sl, r2
 8007ece:	469b      	mov	fp, r3
 8007ed0:	4643      	mov	r3, r8
 8007ed2:	eb1a 0303 	adds.w	r3, sl, r3
 8007ed6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007eda:	464b      	mov	r3, r9
 8007edc:	eb4b 0303 	adc.w	r3, fp, r3
 8007ee0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ef0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007ef4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007ef8:	460b      	mov	r3, r1
 8007efa:	18db      	adds	r3, r3, r3
 8007efc:	643b      	str	r3, [r7, #64]	; 0x40
 8007efe:	4613      	mov	r3, r2
 8007f00:	eb42 0303 	adc.w	r3, r2, r3
 8007f04:	647b      	str	r3, [r7, #68]	; 0x44
 8007f06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007f0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007f0e:	f7fa ff35 	bl	8002d7c <__aeabi_uldivmod>
 8007f12:	4602      	mov	r2, r0
 8007f14:	460b      	mov	r3, r1
 8007f16:	4611      	mov	r1, r2
 8007f18:	4b3b      	ldr	r3, [pc, #236]	; (8008008 <UART_SetConfig+0x2d4>)
 8007f1a:	fba3 2301 	umull	r2, r3, r3, r1
 8007f1e:	095b      	lsrs	r3, r3, #5
 8007f20:	2264      	movs	r2, #100	; 0x64
 8007f22:	fb02 f303 	mul.w	r3, r2, r3
 8007f26:	1acb      	subs	r3, r1, r3
 8007f28:	00db      	lsls	r3, r3, #3
 8007f2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007f2e:	4b36      	ldr	r3, [pc, #216]	; (8008008 <UART_SetConfig+0x2d4>)
 8007f30:	fba3 2302 	umull	r2, r3, r3, r2
 8007f34:	095b      	lsrs	r3, r3, #5
 8007f36:	005b      	lsls	r3, r3, #1
 8007f38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007f3c:	441c      	add	r4, r3
 8007f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f42:	2200      	movs	r2, #0
 8007f44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007f4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007f50:	4642      	mov	r2, r8
 8007f52:	464b      	mov	r3, r9
 8007f54:	1891      	adds	r1, r2, r2
 8007f56:	63b9      	str	r1, [r7, #56]	; 0x38
 8007f58:	415b      	adcs	r3, r3
 8007f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f60:	4641      	mov	r1, r8
 8007f62:	1851      	adds	r1, r2, r1
 8007f64:	6339      	str	r1, [r7, #48]	; 0x30
 8007f66:	4649      	mov	r1, r9
 8007f68:	414b      	adcs	r3, r1
 8007f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8007f6c:	f04f 0200 	mov.w	r2, #0
 8007f70:	f04f 0300 	mov.w	r3, #0
 8007f74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007f78:	4659      	mov	r1, fp
 8007f7a:	00cb      	lsls	r3, r1, #3
 8007f7c:	4651      	mov	r1, sl
 8007f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f82:	4651      	mov	r1, sl
 8007f84:	00ca      	lsls	r2, r1, #3
 8007f86:	4610      	mov	r0, r2
 8007f88:	4619      	mov	r1, r3
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	4642      	mov	r2, r8
 8007f8e:	189b      	adds	r3, r3, r2
 8007f90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f94:	464b      	mov	r3, r9
 8007f96:	460a      	mov	r2, r1
 8007f98:	eb42 0303 	adc.w	r3, r2, r3
 8007f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007fac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007fb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	18db      	adds	r3, r3, r3
 8007fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fba:	4613      	mov	r3, r2
 8007fbc:	eb42 0303 	adc.w	r3, r2, r3
 8007fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007fc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007fca:	f7fa fed7 	bl	8002d7c <__aeabi_uldivmod>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	4b0d      	ldr	r3, [pc, #52]	; (8008008 <UART_SetConfig+0x2d4>)
 8007fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8007fd8:	095b      	lsrs	r3, r3, #5
 8007fda:	2164      	movs	r1, #100	; 0x64
 8007fdc:	fb01 f303 	mul.w	r3, r1, r3
 8007fe0:	1ad3      	subs	r3, r2, r3
 8007fe2:	00db      	lsls	r3, r3, #3
 8007fe4:	3332      	adds	r3, #50	; 0x32
 8007fe6:	4a08      	ldr	r2, [pc, #32]	; (8008008 <UART_SetConfig+0x2d4>)
 8007fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8007fec:	095b      	lsrs	r3, r3, #5
 8007fee:	f003 0207 	and.w	r2, r3, #7
 8007ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4422      	add	r2, r4
 8007ffa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ffc:	e105      	b.n	800820a <UART_SetConfig+0x4d6>
 8007ffe:	bf00      	nop
 8008000:	40011000 	.word	0x40011000
 8008004:	40011400 	.word	0x40011400
 8008008:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800800c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008010:	2200      	movs	r2, #0
 8008012:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008016:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800801a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800801e:	4642      	mov	r2, r8
 8008020:	464b      	mov	r3, r9
 8008022:	1891      	adds	r1, r2, r2
 8008024:	6239      	str	r1, [r7, #32]
 8008026:	415b      	adcs	r3, r3
 8008028:	627b      	str	r3, [r7, #36]	; 0x24
 800802a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800802e:	4641      	mov	r1, r8
 8008030:	1854      	adds	r4, r2, r1
 8008032:	4649      	mov	r1, r9
 8008034:	eb43 0501 	adc.w	r5, r3, r1
 8008038:	f04f 0200 	mov.w	r2, #0
 800803c:	f04f 0300 	mov.w	r3, #0
 8008040:	00eb      	lsls	r3, r5, #3
 8008042:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008046:	00e2      	lsls	r2, r4, #3
 8008048:	4614      	mov	r4, r2
 800804a:	461d      	mov	r5, r3
 800804c:	4643      	mov	r3, r8
 800804e:	18e3      	adds	r3, r4, r3
 8008050:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008054:	464b      	mov	r3, r9
 8008056:	eb45 0303 	adc.w	r3, r5, r3
 800805a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800805e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800806a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800806e:	f04f 0200 	mov.w	r2, #0
 8008072:	f04f 0300 	mov.w	r3, #0
 8008076:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800807a:	4629      	mov	r1, r5
 800807c:	008b      	lsls	r3, r1, #2
 800807e:	4621      	mov	r1, r4
 8008080:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008084:	4621      	mov	r1, r4
 8008086:	008a      	lsls	r2, r1, #2
 8008088:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800808c:	f7fa fe76 	bl	8002d7c <__aeabi_uldivmod>
 8008090:	4602      	mov	r2, r0
 8008092:	460b      	mov	r3, r1
 8008094:	4b60      	ldr	r3, [pc, #384]	; (8008218 <UART_SetConfig+0x4e4>)
 8008096:	fba3 2302 	umull	r2, r3, r3, r2
 800809a:	095b      	lsrs	r3, r3, #5
 800809c:	011c      	lsls	r4, r3, #4
 800809e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080a2:	2200      	movs	r2, #0
 80080a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80080a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80080ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80080b0:	4642      	mov	r2, r8
 80080b2:	464b      	mov	r3, r9
 80080b4:	1891      	adds	r1, r2, r2
 80080b6:	61b9      	str	r1, [r7, #24]
 80080b8:	415b      	adcs	r3, r3
 80080ba:	61fb      	str	r3, [r7, #28]
 80080bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080c0:	4641      	mov	r1, r8
 80080c2:	1851      	adds	r1, r2, r1
 80080c4:	6139      	str	r1, [r7, #16]
 80080c6:	4649      	mov	r1, r9
 80080c8:	414b      	adcs	r3, r1
 80080ca:	617b      	str	r3, [r7, #20]
 80080cc:	f04f 0200 	mov.w	r2, #0
 80080d0:	f04f 0300 	mov.w	r3, #0
 80080d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80080d8:	4659      	mov	r1, fp
 80080da:	00cb      	lsls	r3, r1, #3
 80080dc:	4651      	mov	r1, sl
 80080de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080e2:	4651      	mov	r1, sl
 80080e4:	00ca      	lsls	r2, r1, #3
 80080e6:	4610      	mov	r0, r2
 80080e8:	4619      	mov	r1, r3
 80080ea:	4603      	mov	r3, r0
 80080ec:	4642      	mov	r2, r8
 80080ee:	189b      	adds	r3, r3, r2
 80080f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80080f4:	464b      	mov	r3, r9
 80080f6:	460a      	mov	r2, r1
 80080f8:	eb42 0303 	adc.w	r3, r2, r3
 80080fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	67bb      	str	r3, [r7, #120]	; 0x78
 800810a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800810c:	f04f 0200 	mov.w	r2, #0
 8008110:	f04f 0300 	mov.w	r3, #0
 8008114:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008118:	4649      	mov	r1, r9
 800811a:	008b      	lsls	r3, r1, #2
 800811c:	4641      	mov	r1, r8
 800811e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008122:	4641      	mov	r1, r8
 8008124:	008a      	lsls	r2, r1, #2
 8008126:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800812a:	f7fa fe27 	bl	8002d7c <__aeabi_uldivmod>
 800812e:	4602      	mov	r2, r0
 8008130:	460b      	mov	r3, r1
 8008132:	4b39      	ldr	r3, [pc, #228]	; (8008218 <UART_SetConfig+0x4e4>)
 8008134:	fba3 1302 	umull	r1, r3, r3, r2
 8008138:	095b      	lsrs	r3, r3, #5
 800813a:	2164      	movs	r1, #100	; 0x64
 800813c:	fb01 f303 	mul.w	r3, r1, r3
 8008140:	1ad3      	subs	r3, r2, r3
 8008142:	011b      	lsls	r3, r3, #4
 8008144:	3332      	adds	r3, #50	; 0x32
 8008146:	4a34      	ldr	r2, [pc, #208]	; (8008218 <UART_SetConfig+0x4e4>)
 8008148:	fba2 2303 	umull	r2, r3, r2, r3
 800814c:	095b      	lsrs	r3, r3, #5
 800814e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008152:	441c      	add	r4, r3
 8008154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008158:	2200      	movs	r2, #0
 800815a:	673b      	str	r3, [r7, #112]	; 0x70
 800815c:	677a      	str	r2, [r7, #116]	; 0x74
 800815e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008162:	4642      	mov	r2, r8
 8008164:	464b      	mov	r3, r9
 8008166:	1891      	adds	r1, r2, r2
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	415b      	adcs	r3, r3
 800816c:	60fb      	str	r3, [r7, #12]
 800816e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008172:	4641      	mov	r1, r8
 8008174:	1851      	adds	r1, r2, r1
 8008176:	6039      	str	r1, [r7, #0]
 8008178:	4649      	mov	r1, r9
 800817a:	414b      	adcs	r3, r1
 800817c:	607b      	str	r3, [r7, #4]
 800817e:	f04f 0200 	mov.w	r2, #0
 8008182:	f04f 0300 	mov.w	r3, #0
 8008186:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800818a:	4659      	mov	r1, fp
 800818c:	00cb      	lsls	r3, r1, #3
 800818e:	4651      	mov	r1, sl
 8008190:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008194:	4651      	mov	r1, sl
 8008196:	00ca      	lsls	r2, r1, #3
 8008198:	4610      	mov	r0, r2
 800819a:	4619      	mov	r1, r3
 800819c:	4603      	mov	r3, r0
 800819e:	4642      	mov	r2, r8
 80081a0:	189b      	adds	r3, r3, r2
 80081a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80081a4:	464b      	mov	r3, r9
 80081a6:	460a      	mov	r2, r1
 80081a8:	eb42 0303 	adc.w	r3, r2, r3
 80081ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80081ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	663b      	str	r3, [r7, #96]	; 0x60
 80081b8:	667a      	str	r2, [r7, #100]	; 0x64
 80081ba:	f04f 0200 	mov.w	r2, #0
 80081be:	f04f 0300 	mov.w	r3, #0
 80081c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80081c6:	4649      	mov	r1, r9
 80081c8:	008b      	lsls	r3, r1, #2
 80081ca:	4641      	mov	r1, r8
 80081cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081d0:	4641      	mov	r1, r8
 80081d2:	008a      	lsls	r2, r1, #2
 80081d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80081d8:	f7fa fdd0 	bl	8002d7c <__aeabi_uldivmod>
 80081dc:	4602      	mov	r2, r0
 80081de:	460b      	mov	r3, r1
 80081e0:	4b0d      	ldr	r3, [pc, #52]	; (8008218 <UART_SetConfig+0x4e4>)
 80081e2:	fba3 1302 	umull	r1, r3, r3, r2
 80081e6:	095b      	lsrs	r3, r3, #5
 80081e8:	2164      	movs	r1, #100	; 0x64
 80081ea:	fb01 f303 	mul.w	r3, r1, r3
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	011b      	lsls	r3, r3, #4
 80081f2:	3332      	adds	r3, #50	; 0x32
 80081f4:	4a08      	ldr	r2, [pc, #32]	; (8008218 <UART_SetConfig+0x4e4>)
 80081f6:	fba2 2303 	umull	r2, r3, r2, r3
 80081fa:	095b      	lsrs	r3, r3, #5
 80081fc:	f003 020f 	and.w	r2, r3, #15
 8008200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4422      	add	r2, r4
 8008208:	609a      	str	r2, [r3, #8]
}
 800820a:	bf00      	nop
 800820c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008210:	46bd      	mov	sp, r7
 8008212:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008216:	bf00      	nop
 8008218:	51eb851f 	.word	0x51eb851f

0800821c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	f043 0201 	orr.w	r2, r3, #1
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	370c      	adds	r7, #12
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr

0800823e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800823e:	b480      	push	{r7}
 8008240:	b083      	sub	sp, #12
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f023 0201 	bic.w	r2, r3, #1
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800826a:	2300      	movs	r3, #0
 800826c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	3301      	adds	r3, #1
 8008272:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	4a13      	ldr	r2, [pc, #76]	; (80082c4 <USB_FlushTxFifo+0x64>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d901      	bls.n	8008280 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800827c:	2303      	movs	r3, #3
 800827e:	e01b      	b.n	80082b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	2b00      	cmp	r3, #0
 8008286:	daf2      	bge.n	800826e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008288:	2300      	movs	r3, #0
 800828a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	019b      	lsls	r3, r3, #6
 8008290:	f043 0220 	orr.w	r2, r3, #32
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	3301      	adds	r3, #1
 800829c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	4a08      	ldr	r2, [pc, #32]	; (80082c4 <USB_FlushTxFifo+0x64>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d901      	bls.n	80082aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80082a6:	2303      	movs	r3, #3
 80082a8:	e006      	b.n	80082b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	f003 0320 	and.w	r3, r3, #32
 80082b2:	2b20      	cmp	r3, #32
 80082b4:	d0f0      	beq.n	8008298 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3714      	adds	r7, #20
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr
 80082c4:	00030d40 	.word	0x00030d40

080082c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082d0:	2300      	movs	r3, #0
 80082d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	3301      	adds	r3, #1
 80082d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	4a11      	ldr	r2, [pc, #68]	; (8008324 <USB_FlushRxFifo+0x5c>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d901      	bls.n	80082e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	e018      	b.n	8008318 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	daf2      	bge.n	80082d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80082ee:	2300      	movs	r3, #0
 80082f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2210      	movs	r2, #16
 80082f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	3301      	adds	r3, #1
 80082fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	4a08      	ldr	r2, [pc, #32]	; (8008324 <USB_FlushRxFifo+0x5c>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d901      	bls.n	800830a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008306:	2303      	movs	r3, #3
 8008308:	e006      	b.n	8008318 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	f003 0310 	and.w	r3, r3, #16
 8008312:	2b10      	cmp	r3, #16
 8008314:	d0f0      	beq.n	80082f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3714      	adds	r7, #20
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr
 8008324:	00030d40 	.word	0x00030d40

08008328 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008328:	b480      	push	{r7}
 800832a:	b08b      	sub	sp, #44	; 0x2c
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	4613      	mov	r3, r2
 8008334:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800833e:	88fb      	ldrh	r3, [r7, #6]
 8008340:	089b      	lsrs	r3, r3, #2
 8008342:	b29b      	uxth	r3, r3
 8008344:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008346:	88fb      	ldrh	r3, [r7, #6]
 8008348:	f003 0303 	and.w	r3, r3, #3
 800834c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800834e:	2300      	movs	r3, #0
 8008350:	623b      	str	r3, [r7, #32]
 8008352:	e014      	b.n	800837e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	3301      	adds	r3, #1
 8008364:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008368:	3301      	adds	r3, #1
 800836a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800836c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836e:	3301      	adds	r3, #1
 8008370:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008374:	3301      	adds	r3, #1
 8008376:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008378:	6a3b      	ldr	r3, [r7, #32]
 800837a:	3301      	adds	r3, #1
 800837c:	623b      	str	r3, [r7, #32]
 800837e:	6a3a      	ldr	r2, [r7, #32]
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	429a      	cmp	r2, r3
 8008384:	d3e6      	bcc.n	8008354 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008386:	8bfb      	ldrh	r3, [r7, #30]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d01e      	beq.n	80083ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800838c:	2300      	movs	r3, #0
 800838e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008396:	461a      	mov	r2, r3
 8008398:	f107 0310 	add.w	r3, r7, #16
 800839c:	6812      	ldr	r2, [r2, #0]
 800839e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80083a0:	693a      	ldr	r2, [r7, #16]
 80083a2:	6a3b      	ldr	r3, [r7, #32]
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	00db      	lsls	r3, r3, #3
 80083a8:	fa22 f303 	lsr.w	r3, r2, r3
 80083ac:	b2da      	uxtb	r2, r3
 80083ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b0:	701a      	strb	r2, [r3, #0]
      i++;
 80083b2:	6a3b      	ldr	r3, [r7, #32]
 80083b4:	3301      	adds	r3, #1
 80083b6:	623b      	str	r3, [r7, #32]
      pDest++;
 80083b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ba:	3301      	adds	r3, #1
 80083bc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80083be:	8bfb      	ldrh	r3, [r7, #30]
 80083c0:	3b01      	subs	r3, #1
 80083c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80083c4:	8bfb      	ldrh	r3, [r7, #30]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1ea      	bne.n	80083a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80083ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	372c      	adds	r7, #44	; 0x2c
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	695b      	ldr	r3, [r3, #20]
 80083e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	699b      	ldr	r3, [r3, #24]
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	4013      	ands	r3, r2
 80083ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80083f0:	68fb      	ldr	r3, [r7, #12]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3714      	adds	r7, #20
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr

080083fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80083fe:	b480      	push	{r7}
 8008400:	b083      	sub	sp, #12
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	695b      	ldr	r3, [r3, #20]
 800840a:	f003 0301 	and.w	r3, r3, #1
}
 800840e:	4618      	mov	r0, r3
 8008410:	370c      	adds	r7, #12
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800841a:	b480      	push	{r7}
 800841c:	b085      	sub	sp, #20
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	460b      	mov	r3, r1
 8008424:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008438:	f023 0303 	bic.w	r3, r3, #3
 800843c:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	78fb      	ldrb	r3, [r7, #3]
 8008448:	f003 0303 	and.w	r3, r3, #3
 800844c:	68f9      	ldr	r1, [r7, #12]
 800844e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008452:	4313      	orrs	r3, r2
 8008454:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008456:	78fb      	ldrb	r3, [r7, #3]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d107      	bne.n	800846c <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008462:	461a      	mov	r2, r3
 8008464:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008468:	6053      	str	r3, [r2, #4]
 800846a:	e009      	b.n	8008480 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800846c:	78fb      	ldrb	r3, [r7, #3]
 800846e:	2b02      	cmp	r3, #2
 8008470:	d106      	bne.n	8008480 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008478:	461a      	mov	r2, r3
 800847a:	f241 7370 	movw	r3, #6000	; 0x1770
 800847e:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3714      	adds	r7, #20
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800848e:	b480      	push	{r7}
 8008490:	b085      	sub	sp, #20
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	b29b      	uxth	r3, r3
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3714      	adds	r7, #20
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b089      	sub	sp, #36	; 0x24
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	460b      	mov	r3, r1
 80084ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80084c0:	78fb      	ldrb	r3, [r7, #3]
 80084c2:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80084c4:	2300      	movs	r3, #0
 80084c6:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	015a      	lsls	r2, r3, #5
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	4413      	add	r3, r2
 80084d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	0c9b      	lsrs	r3, r3, #18
 80084d8:	f003 0303 	and.w	r3, r3, #3
 80084dc:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	015a      	lsls	r2, r3, #5
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	4413      	add	r3, r2
 80084e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	0fdb      	lsrs	r3, r3, #31
 80084ee:	f003 0301 	and.w	r3, r3, #1
 80084f2:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	f003 0320 	and.w	r3, r3, #32
 80084fc:	2b20      	cmp	r3, #32
 80084fe:	d104      	bne.n	800850a <USB_HC_Halt+0x5a>
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d101      	bne.n	800850a <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008506:	2300      	movs	r3, #0
 8008508:	e0c8      	b.n	800869c <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d002      	beq.n	8008516 <USB_HC_Halt+0x66>
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	2b02      	cmp	r3, #2
 8008514:	d163      	bne.n	80085de <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	015a      	lsls	r2, r3, #5
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	4413      	add	r3, r2
 800851e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	69ba      	ldr	r2, [r7, #24]
 8008526:	0151      	lsls	r1, r2, #5
 8008528:	69fa      	ldr	r2, [r7, #28]
 800852a:	440a      	add	r2, r1
 800852c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008530:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008534:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	f003 0320 	and.w	r3, r3, #32
 800853e:	2b00      	cmp	r3, #0
 8008540:	f040 80ab 	bne.w	800869a <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008548:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800854c:	2b00      	cmp	r3, #0
 800854e:	d133      	bne.n	80085b8 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008550:	69bb      	ldr	r3, [r7, #24]
 8008552:	015a      	lsls	r2, r3, #5
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	4413      	add	r3, r2
 8008558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	69ba      	ldr	r2, [r7, #24]
 8008560:	0151      	lsls	r1, r2, #5
 8008562:	69fa      	ldr	r2, [r7, #28]
 8008564:	440a      	add	r2, r1
 8008566:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800856a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800856e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	015a      	lsls	r2, r3, #5
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	4413      	add	r3, r2
 8008578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	69ba      	ldr	r2, [r7, #24]
 8008580:	0151      	lsls	r1, r2, #5
 8008582:	69fa      	ldr	r2, [r7, #28]
 8008584:	440a      	add	r2, r1
 8008586:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800858a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800858e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	3301      	adds	r3, #1
 8008594:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800859c:	d81d      	bhi.n	80085da <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	015a      	lsls	r2, r3, #5
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	4413      	add	r3, r2
 80085a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085b4:	d0ec      	beq.n	8008590 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80085b6:	e070      	b.n	800869a <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	015a      	lsls	r2, r3, #5
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	4413      	add	r3, r2
 80085c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	69ba      	ldr	r2, [r7, #24]
 80085c8:	0151      	lsls	r1, r2, #5
 80085ca:	69fa      	ldr	r2, [r7, #28]
 80085cc:	440a      	add	r2, r1
 80085ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085d6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80085d8:	e05f      	b.n	800869a <USB_HC_Halt+0x1ea>
            break;
 80085da:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80085dc:	e05d      	b.n	800869a <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	015a      	lsls	r2, r3, #5
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	4413      	add	r3, r2
 80085e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	69ba      	ldr	r2, [r7, #24]
 80085ee:	0151      	lsls	r1, r2, #5
 80085f0:	69fa      	ldr	r2, [r7, #28]
 80085f2:	440a      	add	r2, r1
 80085f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085fc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800860a:	2b00      	cmp	r3, #0
 800860c:	d133      	bne.n	8008676 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	015a      	lsls	r2, r3, #5
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	4413      	add	r3, r2
 8008616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	69ba      	ldr	r2, [r7, #24]
 800861e:	0151      	lsls	r1, r2, #5
 8008620:	69fa      	ldr	r2, [r7, #28]
 8008622:	440a      	add	r2, r1
 8008624:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008628:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800862c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	015a      	lsls	r2, r3, #5
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	4413      	add	r3, r2
 8008636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	69ba      	ldr	r2, [r7, #24]
 800863e:	0151      	lsls	r1, r2, #5
 8008640:	69fa      	ldr	r2, [r7, #28]
 8008642:	440a      	add	r2, r1
 8008644:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008648:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800864c:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	3301      	adds	r3, #1
 8008652:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800865a:	d81d      	bhi.n	8008698 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800865c:	69bb      	ldr	r3, [r7, #24]
 800865e:	015a      	lsls	r2, r3, #5
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	4413      	add	r3, r2
 8008664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800866e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008672:	d0ec      	beq.n	800864e <USB_HC_Halt+0x19e>
 8008674:	e011      	b.n	800869a <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	015a      	lsls	r2, r3, #5
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	4413      	add	r3, r2
 800867e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	69ba      	ldr	r2, [r7, #24]
 8008686:	0151      	lsls	r1, r2, #5
 8008688:	69fa      	ldr	r2, [r7, #28]
 800868a:	440a      	add	r2, r1
 800868c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008690:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008694:	6013      	str	r3, [r2, #0]
 8008696:	e000      	b.n	800869a <USB_HC_Halt+0x1ea>
          break;
 8008698:	bf00      	nop
    }
  }

  return HAL_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3724      	adds	r7, #36	; 0x24
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b088      	sub	sp, #32
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80086b0:	2300      	movs	r3, #0
 80086b2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80086b8:	2300      	movs	r3, #0
 80086ba:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f7ff fdbe 	bl	800823e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80086c2:	2110      	movs	r1, #16
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f7ff fdcb 	bl	8008260 <USB_FlushTxFifo>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d001      	beq.n	80086d4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f7ff fdf7 	bl	80082c8 <USB_FlushRxFifo>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d001      	beq.n	80086e4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80086e4:	2300      	movs	r3, #0
 80086e6:	61bb      	str	r3, [r7, #24]
 80086e8:	e01f      	b.n	800872a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	015a      	lsls	r2, r3, #5
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	4413      	add	r3, r2
 80086f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008700:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008708:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008710:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	015a      	lsls	r2, r3, #5
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	4413      	add	r3, r2
 800871a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800871e:	461a      	mov	r2, r3
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	3301      	adds	r3, #1
 8008728:	61bb      	str	r3, [r7, #24]
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	2b0f      	cmp	r3, #15
 800872e:	d9dc      	bls.n	80086ea <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008730:	2300      	movs	r3, #0
 8008732:	61bb      	str	r3, [r7, #24]
 8008734:	e034      	b.n	80087a0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	015a      	lsls	r2, r3, #5
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	4413      	add	r3, r2
 800873e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800874c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008754:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800875c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	015a      	lsls	r2, r3, #5
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	4413      	add	r3, r2
 8008766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800876a:	461a      	mov	r2, r3
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	3301      	adds	r3, #1
 8008774:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800877c:	d80c      	bhi.n	8008798 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	015a      	lsls	r2, r3, #5
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	4413      	add	r3, r2
 8008786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008790:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008794:	d0ec      	beq.n	8008770 <USB_StopHost+0xc8>
 8008796:	e000      	b.n	800879a <USB_StopHost+0xf2>
        break;
 8008798:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	3301      	adds	r3, #1
 800879e:	61bb      	str	r3, [r7, #24]
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	2b0f      	cmp	r3, #15
 80087a4:	d9c7      	bls.n	8008736 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087ac:	461a      	mov	r2, r3
 80087ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087b2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087ba:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f7ff fd2d 	bl	800821c <USB_EnableGlobalInt>

  return ret;
 80087c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3720      	adds	r7, #32
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087da:	1c5a      	adds	r2, r3, #1
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f804 	bl	80087f0 <USBH_HandleSof>
}
 80087e8:	bf00      	nop
 80087ea:	3708      	adds	r7, #8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b0b      	cmp	r3, #11
 8008800:	d10a      	bne.n	8008818 <USBH_HandleSof+0x28>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008808:	2b00      	cmp	r3, #0
 800880a:	d005      	beq.n	8008818 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008812:	699b      	ldr	r3, [r3, #24]
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	4798      	blx	r3
  }
}
 8008818:	bf00      	nop
 800881a:	3708      	adds	r7, #8
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008844:	2300      	movs	r3, #0
 8008846:	2200      	movs	r2, #0
 8008848:	f000 f9d8 	bl	8008bfc <osMessageQueuePut>
#endif
#endif

  return;
 800884c:	bf00      	nop
}
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008864:	bf00      	nop
}
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80088a4:	2300      	movs	r3, #0
 80088a6:	2200      	movs	r2, #0
 80088a8:	f000 f9a8 	bl	8008bfc <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b082      	sub	sp, #8
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f002 fec8 	bl	800b66c <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	791b      	ldrb	r3, [r3, #4]
 80088e0:	4619      	mov	r1, r3
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 f830 	bl	8008948 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	795b      	ldrb	r3, [r3, #5]
 80088ec:	4619      	mov	r1, r3
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f82a 	bl	8008948 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008908:	2300      	movs	r3, #0
 800890a:	2200      	movs	r2, #0
 800890c:	f000 f976 	bl	8008bfc <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3708      	adds	r7, #8
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b082      	sub	sp, #8
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2201      	movs	r2, #1
 8008926:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8008936:	2300      	movs	r3, #0
 8008938:	2200      	movs	r2, #0
 800893a:	f000 f95f 	bl	8008bfc <osMessageQueuePut>
#endif

  return USBH_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	460b      	mov	r3, r1
 8008952:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008954:	78fb      	ldrb	r3, [r7, #3]
 8008956:	2b0f      	cmp	r3, #15
 8008958:	d80d      	bhi.n	8008976 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800895a:	78fb      	ldrb	r3, [r7, #3]
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	33e0      	adds	r3, #224	; 0xe0
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4413      	add	r3, r2
 8008964:	685a      	ldr	r2, [r3, #4]
 8008966:	78fb      	ldrb	r3, [r7, #3]
 8008968:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800896c:	6879      	ldr	r1, [r7, #4]
 800896e:	33e0      	adds	r3, #224	; 0xe0
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	440b      	add	r3, r1
 8008974:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <__NVIC_SetPriority>:
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	4603      	mov	r3, r0
 800898c:	6039      	str	r1, [r7, #0]
 800898e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008994:	2b00      	cmp	r3, #0
 8008996:	db0a      	blt.n	80089ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	b2da      	uxtb	r2, r3
 800899c:	490c      	ldr	r1, [pc, #48]	; (80089d0 <__NVIC_SetPriority+0x4c>)
 800899e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089a2:	0112      	lsls	r2, r2, #4
 80089a4:	b2d2      	uxtb	r2, r2
 80089a6:	440b      	add	r3, r1
 80089a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80089ac:	e00a      	b.n	80089c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	4908      	ldr	r1, [pc, #32]	; (80089d4 <__NVIC_SetPriority+0x50>)
 80089b4:	79fb      	ldrb	r3, [r7, #7]
 80089b6:	f003 030f 	and.w	r3, r3, #15
 80089ba:	3b04      	subs	r3, #4
 80089bc:	0112      	lsls	r2, r2, #4
 80089be:	b2d2      	uxtb	r2, r2
 80089c0:	440b      	add	r3, r1
 80089c2:	761a      	strb	r2, [r3, #24]
}
 80089c4:	bf00      	nop
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr
 80089d0:	e000e100 	.word	0xe000e100
 80089d4:	e000ed00 	.word	0xe000ed00

080089d8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80089d8:	b580      	push	{r7, lr}
 80089da:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80089dc:	4b05      	ldr	r3, [pc, #20]	; (80089f4 <SysTick_Handler+0x1c>)
 80089de:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80089e0:	f001 fd88 	bl	800a4f4 <xTaskGetSchedulerState>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d001      	beq.n	80089ee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80089ea:	f002 fb6d 	bl	800b0c8 <xPortSysTickHandler>
  }
}
 80089ee:	bf00      	nop
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	e000e010 	.word	0xe000e010

080089f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80089f8:	b580      	push	{r7, lr}
 80089fa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80089fc:	2100      	movs	r1, #0
 80089fe:	f06f 0004 	mvn.w	r0, #4
 8008a02:	f7ff ffbf 	bl	8008984 <__NVIC_SetPriority>
#endif
}
 8008a06:	bf00      	nop
 8008a08:	bd80      	pop	{r7, pc}
	...

08008a0c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a12:	f3ef 8305 	mrs	r3, IPSR
 8008a16:	603b      	str	r3, [r7, #0]
  return(result);
 8008a18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d003      	beq.n	8008a26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008a1e:	f06f 0305 	mvn.w	r3, #5
 8008a22:	607b      	str	r3, [r7, #4]
 8008a24:	e00c      	b.n	8008a40 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008a26:	4b0a      	ldr	r3, [pc, #40]	; (8008a50 <osKernelInitialize+0x44>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d105      	bne.n	8008a3a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008a2e:	4b08      	ldr	r3, [pc, #32]	; (8008a50 <osKernelInitialize+0x44>)
 8008a30:	2201      	movs	r2, #1
 8008a32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008a34:	2300      	movs	r3, #0
 8008a36:	607b      	str	r3, [r7, #4]
 8008a38:	e002      	b.n	8008a40 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008a3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008a40:	687b      	ldr	r3, [r7, #4]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	370c      	adds	r7, #12
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop
 8008a50:	20000264 	.word	0x20000264

08008a54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a5a:	f3ef 8305 	mrs	r3, IPSR
 8008a5e:	603b      	str	r3, [r7, #0]
  return(result);
 8008a60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d003      	beq.n	8008a6e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008a66:	f06f 0305 	mvn.w	r3, #5
 8008a6a:	607b      	str	r3, [r7, #4]
 8008a6c:	e010      	b.n	8008a90 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008a6e:	4b0b      	ldr	r3, [pc, #44]	; (8008a9c <osKernelStart+0x48>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d109      	bne.n	8008a8a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008a76:	f7ff ffbf 	bl	80089f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008a7a:	4b08      	ldr	r3, [pc, #32]	; (8008a9c <osKernelStart+0x48>)
 8008a7c:	2202      	movs	r2, #2
 8008a7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008a80:	f001 f8dc 	bl	8009c3c <vTaskStartScheduler>
      stat = osOK;
 8008a84:	2300      	movs	r3, #0
 8008a86:	607b      	str	r3, [r7, #4]
 8008a88:	e002      	b.n	8008a90 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008a90:	687b      	ldr	r3, [r7, #4]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3708      	adds	r7, #8
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	20000264 	.word	0x20000264

08008aa0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b08e      	sub	sp, #56	; 0x38
 8008aa4:	af04      	add	r7, sp, #16
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008aac:	2300      	movs	r3, #0
 8008aae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ab0:	f3ef 8305 	mrs	r3, IPSR
 8008ab4:	617b      	str	r3, [r7, #20]
  return(result);
 8008ab6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d17e      	bne.n	8008bba <osThreadNew+0x11a>
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d07b      	beq.n	8008bba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008ac2:	2380      	movs	r3, #128	; 0x80
 8008ac4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008ac6:	2318      	movs	r3, #24
 8008ac8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008aca:	2300      	movs	r3, #0
 8008acc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008ace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ad2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d045      	beq.n	8008b66 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d002      	beq.n	8008ae8 <osThreadNew+0x48>
        name = attr->name;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	699b      	ldr	r3, [r3, #24]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d002      	beq.n	8008af6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	699b      	ldr	r3, [r3, #24]
 8008af4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d008      	beq.n	8008b0e <osThreadNew+0x6e>
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	2b38      	cmp	r3, #56	; 0x38
 8008b00:	d805      	bhi.n	8008b0e <osThreadNew+0x6e>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	f003 0301 	and.w	r3, r3, #1
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d001      	beq.n	8008b12 <osThreadNew+0x72>
        return (NULL);
 8008b0e:	2300      	movs	r3, #0
 8008b10:	e054      	b.n	8008bbc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	695b      	ldr	r3, [r3, #20]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d003      	beq.n	8008b22 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	695b      	ldr	r3, [r3, #20]
 8008b1e:	089b      	lsrs	r3, r3, #2
 8008b20:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00e      	beq.n	8008b48 <osThreadNew+0xa8>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	2bbb      	cmp	r3, #187	; 0xbb
 8008b30:	d90a      	bls.n	8008b48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d006      	beq.n	8008b48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	695b      	ldr	r3, [r3, #20]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d002      	beq.n	8008b48 <osThreadNew+0xa8>
        mem = 1;
 8008b42:	2301      	movs	r3, #1
 8008b44:	61bb      	str	r3, [r7, #24]
 8008b46:	e010      	b.n	8008b6a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d10c      	bne.n	8008b6a <osThreadNew+0xca>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d108      	bne.n	8008b6a <osThreadNew+0xca>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	691b      	ldr	r3, [r3, #16]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d104      	bne.n	8008b6a <osThreadNew+0xca>
          mem = 0;
 8008b60:	2300      	movs	r3, #0
 8008b62:	61bb      	str	r3, [r7, #24]
 8008b64:	e001      	b.n	8008b6a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008b66:	2300      	movs	r3, #0
 8008b68:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d110      	bne.n	8008b92 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008b78:	9202      	str	r2, [sp, #8]
 8008b7a:	9301      	str	r3, [sp, #4]
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	6a3a      	ldr	r2, [r7, #32]
 8008b84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	f000 fe6c 	bl	8009864 <xTaskCreateStatic>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	613b      	str	r3, [r7, #16]
 8008b90:	e013      	b.n	8008bba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d110      	bne.n	8008bba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008b98:	6a3b      	ldr	r3, [r7, #32]
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	f107 0310 	add.w	r3, r7, #16
 8008ba0:	9301      	str	r3, [sp, #4]
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	9300      	str	r3, [sp, #0]
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f000 feb7 	bl	800991e <xTaskCreate>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d001      	beq.n	8008bba <osThreadNew+0x11a>
            hTask = NULL;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008bba:	693b      	ldr	r3, [r7, #16]
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3728      	adds	r7, #40	; 0x28
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bcc:	f3ef 8305 	mrs	r3, IPSR
 8008bd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8008bd2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d003      	beq.n	8008be0 <osDelay+0x1c>
    stat = osErrorISR;
 8008bd8:	f06f 0305 	mvn.w	r3, #5
 8008bdc:	60fb      	str	r3, [r7, #12]
 8008bde:	e007      	b.n	8008bf0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008be0:	2300      	movs	r3, #0
 8008be2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d002      	beq.n	8008bf0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 fff2 	bl	8009bd4 <vTaskDelay>
    }
  }

  return (stat);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
	...

08008bfc <osMessageQueuePut>:
  }

  return ((osMessageQueueId_t)hQueue);
}

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b088      	sub	sp, #32
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	603b      	str	r3, [r7, #0]
 8008c08:	4613      	mov	r3, r2
 8008c0a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c14:	f3ef 8305 	mrs	r3, IPSR
 8008c18:	617b      	str	r3, [r7, #20]
  return(result);
 8008c1a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d028      	beq.n	8008c72 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d005      	beq.n	8008c32 <osMessageQueuePut+0x36>
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d002      	beq.n	8008c32 <osMessageQueuePut+0x36>
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d003      	beq.n	8008c3a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008c32:	f06f 0303 	mvn.w	r3, #3
 8008c36:	61fb      	str	r3, [r7, #28]
 8008c38:	e038      	b.n	8008cac <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008c3e:	f107 0210 	add.w	r2, r7, #16
 8008c42:	2300      	movs	r3, #0
 8008c44:	68b9      	ldr	r1, [r7, #8]
 8008c46:	69b8      	ldr	r0, [r7, #24]
 8008c48:	f000 fb22 	bl	8009290 <xQueueGenericSendFromISR>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d003      	beq.n	8008c5a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008c52:	f06f 0302 	mvn.w	r3, #2
 8008c56:	61fb      	str	r3, [r7, #28]
 8008c58:	e028      	b.n	8008cac <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d025      	beq.n	8008cac <osMessageQueuePut+0xb0>
 8008c60:	4b15      	ldr	r3, [pc, #84]	; (8008cb8 <osMessageQueuePut+0xbc>)
 8008c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c66:	601a      	str	r2, [r3, #0]
 8008c68:	f3bf 8f4f 	dsb	sy
 8008c6c:	f3bf 8f6f 	isb	sy
 8008c70:	e01c      	b.n	8008cac <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d002      	beq.n	8008c7e <osMessageQueuePut+0x82>
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d103      	bne.n	8008c86 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008c7e:	f06f 0303 	mvn.w	r3, #3
 8008c82:	61fb      	str	r3, [r7, #28]
 8008c84:	e012      	b.n	8008cac <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008c86:	2300      	movs	r3, #0
 8008c88:	683a      	ldr	r2, [r7, #0]
 8008c8a:	68b9      	ldr	r1, [r7, #8]
 8008c8c:	69b8      	ldr	r0, [r7, #24]
 8008c8e:	f000 fa01 	bl	8009094 <xQueueGenericSend>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d009      	beq.n	8008cac <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d003      	beq.n	8008ca6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008c9e:	f06f 0301 	mvn.w	r3, #1
 8008ca2:	61fb      	str	r3, [r7, #28]
 8008ca4:	e002      	b.n	8008cac <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008ca6:	f06f 0302 	mvn.w	r3, #2
 8008caa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008cac:	69fb      	ldr	r3, [r7, #28]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3720      	adds	r7, #32
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	e000ed04 	.word	0xe000ed04

08008cbc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008cbc:	b480      	push	{r7}
 8008cbe:	b085      	sub	sp, #20
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	4a07      	ldr	r2, [pc, #28]	; (8008ce8 <vApplicationGetIdleTaskMemory+0x2c>)
 8008ccc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	4a06      	ldr	r2, [pc, #24]	; (8008cec <vApplicationGetIdleTaskMemory+0x30>)
 8008cd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2280      	movs	r2, #128	; 0x80
 8008cd8:	601a      	str	r2, [r3, #0]
}
 8008cda:	bf00      	nop
 8008cdc:	3714      	adds	r7, #20
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop
 8008ce8:	20000268 	.word	0x20000268
 8008cec:	20000324 	.word	0x20000324

08008cf0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008cf0:	b480      	push	{r7}
 8008cf2:	b085      	sub	sp, #20
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	4a07      	ldr	r2, [pc, #28]	; (8008d1c <vApplicationGetTimerTaskMemory+0x2c>)
 8008d00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	4a06      	ldr	r2, [pc, #24]	; (8008d20 <vApplicationGetTimerTaskMemory+0x30>)
 8008d06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d0e:	601a      	str	r2, [r3, #0]
}
 8008d10:	bf00      	nop
 8008d12:	3714      	adds	r7, #20
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr
 8008d1c:	20000524 	.word	0x20000524
 8008d20:	200005e0 	.word	0x200005e0

08008d24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f103 0208 	add.w	r2, r3, #8
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f103 0208 	add.w	r2, r3, #8
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f103 0208 	add.w	r2, r3, #8
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008d72:	bf00      	nop
 8008d74:	370c      	adds	r7, #12
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr

08008d7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d7e:	b480      	push	{r7}
 8008d80:	b085      	sub	sp, #20
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
 8008d86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	689a      	ldr	r2, [r3, #8]
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	683a      	ldr	r2, [r7, #0]
 8008da2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	683a      	ldr	r2, [r7, #0]
 8008da8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	1c5a      	adds	r2, r3, #1
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	601a      	str	r2, [r3, #0]
}
 8008dba:	bf00      	nop
 8008dbc:	3714      	adds	r7, #20
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr

08008dc6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	b085      	sub	sp, #20
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
 8008dce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ddc:	d103      	bne.n	8008de6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	691b      	ldr	r3, [r3, #16]
 8008de2:	60fb      	str	r3, [r7, #12]
 8008de4:	e00c      	b.n	8008e00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	3308      	adds	r3, #8
 8008dea:	60fb      	str	r3, [r7, #12]
 8008dec:	e002      	b.n	8008df4 <vListInsert+0x2e>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	60fb      	str	r3, [r7, #12]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	68ba      	ldr	r2, [r7, #8]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d2f6      	bcs.n	8008dee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	685a      	ldr	r2, [r3, #4]
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	683a      	ldr	r2, [r7, #0]
 8008e0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	683a      	ldr	r2, [r7, #0]
 8008e1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	1c5a      	adds	r2, r3, #1
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	601a      	str	r2, [r3, #0]
}
 8008e2c:	bf00      	nop
 8008e2e:	3714      	adds	r7, #20
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	6892      	ldr	r2, [r2, #8]
 8008e4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	6852      	ldr	r2, [r2, #4]
 8008e58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d103      	bne.n	8008e6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	689a      	ldr	r2, [r3, #8]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	1e5a      	subs	r2, r3, #1
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3714      	adds	r7, #20
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d10a      	bne.n	8008eb6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea4:	f383 8811 	msr	BASEPRI, r3
 8008ea8:	f3bf 8f6f 	isb	sy
 8008eac:	f3bf 8f4f 	dsb	sy
 8008eb0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008eb2:	bf00      	nop
 8008eb4:	e7fe      	b.n	8008eb4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008eb6:	f002 f875 	bl	800afa4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ec2:	68f9      	ldr	r1, [r7, #12]
 8008ec4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ec6:	fb01 f303 	mul.w	r3, r1, r3
 8008eca:	441a      	add	r2, r3
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	68f9      	ldr	r1, [r7, #12]
 8008eea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008eec:	fb01 f303 	mul.w	r3, r1, r3
 8008ef0:	441a      	add	r2, r3
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	22ff      	movs	r2, #255	; 0xff
 8008efa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	22ff      	movs	r2, #255	; 0xff
 8008f02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d114      	bne.n	8008f36 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	691b      	ldr	r3, [r3, #16]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d01a      	beq.n	8008f4a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	3310      	adds	r3, #16
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f001 f929 	bl	800a170 <xTaskRemoveFromEventList>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d012      	beq.n	8008f4a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008f24:	4b0c      	ldr	r3, [pc, #48]	; (8008f58 <xQueueGenericReset+0xcc>)
 8008f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f2a:	601a      	str	r2, [r3, #0]
 8008f2c:	f3bf 8f4f 	dsb	sy
 8008f30:	f3bf 8f6f 	isb	sy
 8008f34:	e009      	b.n	8008f4a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	3310      	adds	r3, #16
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7ff fef2 	bl	8008d24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	3324      	adds	r3, #36	; 0x24
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7ff feed 	bl	8008d24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008f4a:	f002 f85b 	bl	800b004 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008f4e:	2301      	movs	r3, #1
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	e000ed04 	.word	0xe000ed04

08008f5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b08e      	sub	sp, #56	; 0x38
 8008f60:	af02      	add	r7, sp, #8
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	60b9      	str	r1, [r7, #8]
 8008f66:	607a      	str	r2, [r7, #4]
 8008f68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d10a      	bne.n	8008f86 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f74:	f383 8811 	msr	BASEPRI, r3
 8008f78:	f3bf 8f6f 	isb	sy
 8008f7c:	f3bf 8f4f 	dsb	sy
 8008f80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f82:	bf00      	nop
 8008f84:	e7fe      	b.n	8008f84 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d10a      	bne.n	8008fa2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f90:	f383 8811 	msr	BASEPRI, r3
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f9e:	bf00      	nop
 8008fa0:	e7fe      	b.n	8008fa0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d002      	beq.n	8008fae <xQueueGenericCreateStatic+0x52>
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d001      	beq.n	8008fb2 <xQueueGenericCreateStatic+0x56>
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e000      	b.n	8008fb4 <xQueueGenericCreateStatic+0x58>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d10a      	bne.n	8008fce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fbc:	f383 8811 	msr	BASEPRI, r3
 8008fc0:	f3bf 8f6f 	isb	sy
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	623b      	str	r3, [r7, #32]
}
 8008fca:	bf00      	nop
 8008fcc:	e7fe      	b.n	8008fcc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d102      	bne.n	8008fda <xQueueGenericCreateStatic+0x7e>
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d101      	bne.n	8008fde <xQueueGenericCreateStatic+0x82>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e000      	b.n	8008fe0 <xQueueGenericCreateStatic+0x84>
 8008fde:	2300      	movs	r3, #0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d10a      	bne.n	8008ffa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe8:	f383 8811 	msr	BASEPRI, r3
 8008fec:	f3bf 8f6f 	isb	sy
 8008ff0:	f3bf 8f4f 	dsb	sy
 8008ff4:	61fb      	str	r3, [r7, #28]
}
 8008ff6:	bf00      	nop
 8008ff8:	e7fe      	b.n	8008ff8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008ffa:	2350      	movs	r3, #80	; 0x50
 8008ffc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	2b50      	cmp	r3, #80	; 0x50
 8009002:	d00a      	beq.n	800901a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009008:	f383 8811 	msr	BASEPRI, r3
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	61bb      	str	r3, [r7, #24]
}
 8009016:	bf00      	nop
 8009018:	e7fe      	b.n	8009018 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800901a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00d      	beq.n	8009042 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009028:	2201      	movs	r2, #1
 800902a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800902e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009034:	9300      	str	r3, [sp, #0]
 8009036:	4613      	mov	r3, r2
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	68b9      	ldr	r1, [r7, #8]
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f000 f805 	bl	800904c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009044:	4618      	mov	r0, r3
 8009046:	3730      	adds	r7, #48	; 0x30
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
 8009058:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d103      	bne.n	8009068 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	69ba      	ldr	r2, [r7, #24]
 8009064:	601a      	str	r2, [r3, #0]
 8009066:	e002      	b.n	800906e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800907a:	2101      	movs	r1, #1
 800907c:	69b8      	ldr	r0, [r7, #24]
 800907e:	f7ff ff05 	bl	8008e8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	78fa      	ldrb	r2, [r7, #3]
 8009086:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800908a:	bf00      	nop
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
	...

08009094 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b08e      	sub	sp, #56	; 0x38
 8009098:	af00      	add	r7, sp, #0
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	607a      	str	r2, [r7, #4]
 80090a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80090a2:	2300      	movs	r3, #0
 80090a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80090aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d10a      	bne.n	80090c6 <xQueueGenericSend+0x32>
	__asm volatile
 80090b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b4:	f383 8811 	msr	BASEPRI, r3
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80090c2:	bf00      	nop
 80090c4:	e7fe      	b.n	80090c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d103      	bne.n	80090d4 <xQueueGenericSend+0x40>
 80090cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d101      	bne.n	80090d8 <xQueueGenericSend+0x44>
 80090d4:	2301      	movs	r3, #1
 80090d6:	e000      	b.n	80090da <xQueueGenericSend+0x46>
 80090d8:	2300      	movs	r3, #0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d10a      	bne.n	80090f4 <xQueueGenericSend+0x60>
	__asm volatile
 80090de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e2:	f383 8811 	msr	BASEPRI, r3
 80090e6:	f3bf 8f6f 	isb	sy
 80090ea:	f3bf 8f4f 	dsb	sy
 80090ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80090f0:	bf00      	nop
 80090f2:	e7fe      	b.n	80090f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	d103      	bne.n	8009102 <xQueueGenericSend+0x6e>
 80090fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d101      	bne.n	8009106 <xQueueGenericSend+0x72>
 8009102:	2301      	movs	r3, #1
 8009104:	e000      	b.n	8009108 <xQueueGenericSend+0x74>
 8009106:	2300      	movs	r3, #0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d10a      	bne.n	8009122 <xQueueGenericSend+0x8e>
	__asm volatile
 800910c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009110:	f383 8811 	msr	BASEPRI, r3
 8009114:	f3bf 8f6f 	isb	sy
 8009118:	f3bf 8f4f 	dsb	sy
 800911c:	623b      	str	r3, [r7, #32]
}
 800911e:	bf00      	nop
 8009120:	e7fe      	b.n	8009120 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009122:	f001 f9e7 	bl	800a4f4 <xTaskGetSchedulerState>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d102      	bne.n	8009132 <xQueueGenericSend+0x9e>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d101      	bne.n	8009136 <xQueueGenericSend+0xa2>
 8009132:	2301      	movs	r3, #1
 8009134:	e000      	b.n	8009138 <xQueueGenericSend+0xa4>
 8009136:	2300      	movs	r3, #0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d10a      	bne.n	8009152 <xQueueGenericSend+0xbe>
	__asm volatile
 800913c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009140:	f383 8811 	msr	BASEPRI, r3
 8009144:	f3bf 8f6f 	isb	sy
 8009148:	f3bf 8f4f 	dsb	sy
 800914c:	61fb      	str	r3, [r7, #28]
}
 800914e:	bf00      	nop
 8009150:	e7fe      	b.n	8009150 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009152:	f001 ff27 	bl	800afa4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800915a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800915e:	429a      	cmp	r2, r3
 8009160:	d302      	bcc.n	8009168 <xQueueGenericSend+0xd4>
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	2b02      	cmp	r3, #2
 8009166:	d129      	bne.n	80091bc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009168:	683a      	ldr	r2, [r7, #0]
 800916a:	68b9      	ldr	r1, [r7, #8]
 800916c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800916e:	f000 fa0b 	bl	8009588 <prvCopyDataToQueue>
 8009172:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009178:	2b00      	cmp	r3, #0
 800917a:	d010      	beq.n	800919e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800917c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917e:	3324      	adds	r3, #36	; 0x24
 8009180:	4618      	mov	r0, r3
 8009182:	f000 fff5 	bl	800a170 <xTaskRemoveFromEventList>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d013      	beq.n	80091b4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800918c:	4b3f      	ldr	r3, [pc, #252]	; (800928c <xQueueGenericSend+0x1f8>)
 800918e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009192:	601a      	str	r2, [r3, #0]
 8009194:	f3bf 8f4f 	dsb	sy
 8009198:	f3bf 8f6f 	isb	sy
 800919c:	e00a      	b.n	80091b4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800919e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d007      	beq.n	80091b4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80091a4:	4b39      	ldr	r3, [pc, #228]	; (800928c <xQueueGenericSend+0x1f8>)
 80091a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091aa:	601a      	str	r2, [r3, #0]
 80091ac:	f3bf 8f4f 	dsb	sy
 80091b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80091b4:	f001 ff26 	bl	800b004 <vPortExitCritical>
				return pdPASS;
 80091b8:	2301      	movs	r3, #1
 80091ba:	e063      	b.n	8009284 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d103      	bne.n	80091ca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80091c2:	f001 ff1f 	bl	800b004 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80091c6:	2300      	movs	r3, #0
 80091c8:	e05c      	b.n	8009284 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d106      	bne.n	80091de <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091d0:	f107 0314 	add.w	r3, r7, #20
 80091d4:	4618      	mov	r0, r3
 80091d6:	f001 f82f 	bl	800a238 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091da:	2301      	movs	r3, #1
 80091dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80091de:	f001 ff11 	bl	800b004 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80091e2:	f000 fd9b 	bl	8009d1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091e6:	f001 fedd 	bl	800afa4 <vPortEnterCritical>
 80091ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091f0:	b25b      	sxtb	r3, r3
 80091f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091f6:	d103      	bne.n	8009200 <xQueueGenericSend+0x16c>
 80091f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fa:	2200      	movs	r2, #0
 80091fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009202:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009206:	b25b      	sxtb	r3, r3
 8009208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800920c:	d103      	bne.n	8009216 <xQueueGenericSend+0x182>
 800920e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009210:	2200      	movs	r2, #0
 8009212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009216:	f001 fef5 	bl	800b004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800921a:	1d3a      	adds	r2, r7, #4
 800921c:	f107 0314 	add.w	r3, r7, #20
 8009220:	4611      	mov	r1, r2
 8009222:	4618      	mov	r0, r3
 8009224:	f001 f81e 	bl	800a264 <xTaskCheckForTimeOut>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d124      	bne.n	8009278 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800922e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009230:	f000 faa2 	bl	8009778 <prvIsQueueFull>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d018      	beq.n	800926c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800923a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923c:	3310      	adds	r3, #16
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	4611      	mov	r1, r2
 8009242:	4618      	mov	r0, r3
 8009244:	f000 ff44 	bl	800a0d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800924a:	f000 fa2d 	bl	80096a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800924e:	f000 fd73 	bl	8009d38 <xTaskResumeAll>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	f47f af7c 	bne.w	8009152 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800925a:	4b0c      	ldr	r3, [pc, #48]	; (800928c <xQueueGenericSend+0x1f8>)
 800925c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009260:	601a      	str	r2, [r3, #0]
 8009262:	f3bf 8f4f 	dsb	sy
 8009266:	f3bf 8f6f 	isb	sy
 800926a:	e772      	b.n	8009152 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800926c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800926e:	f000 fa1b 	bl	80096a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009272:	f000 fd61 	bl	8009d38 <xTaskResumeAll>
 8009276:	e76c      	b.n	8009152 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800927a:	f000 fa15 	bl	80096a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800927e:	f000 fd5b 	bl	8009d38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009282:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009284:	4618      	mov	r0, r3
 8009286:	3738      	adds	r7, #56	; 0x38
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	e000ed04 	.word	0xe000ed04

08009290 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b090      	sub	sp, #64	; 0x40
 8009294:	af00      	add	r7, sp, #0
 8009296:	60f8      	str	r0, [r7, #12]
 8009298:	60b9      	str	r1, [r7, #8]
 800929a:	607a      	str	r2, [r7, #4]
 800929c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80092a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d10a      	bne.n	80092be <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80092a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ac:	f383 8811 	msr	BASEPRI, r3
 80092b0:	f3bf 8f6f 	isb	sy
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80092ba:	bf00      	nop
 80092bc:	e7fe      	b.n	80092bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d103      	bne.n	80092cc <xQueueGenericSendFromISR+0x3c>
 80092c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d101      	bne.n	80092d0 <xQueueGenericSendFromISR+0x40>
 80092cc:	2301      	movs	r3, #1
 80092ce:	e000      	b.n	80092d2 <xQueueGenericSendFromISR+0x42>
 80092d0:	2300      	movs	r3, #0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10a      	bne.n	80092ec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80092d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092da:	f383 8811 	msr	BASEPRI, r3
 80092de:	f3bf 8f6f 	isb	sy
 80092e2:	f3bf 8f4f 	dsb	sy
 80092e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80092e8:	bf00      	nop
 80092ea:	e7fe      	b.n	80092ea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	d103      	bne.n	80092fa <xQueueGenericSendFromISR+0x6a>
 80092f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d101      	bne.n	80092fe <xQueueGenericSendFromISR+0x6e>
 80092fa:	2301      	movs	r3, #1
 80092fc:	e000      	b.n	8009300 <xQueueGenericSendFromISR+0x70>
 80092fe:	2300      	movs	r3, #0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d10a      	bne.n	800931a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009308:	f383 8811 	msr	BASEPRI, r3
 800930c:	f3bf 8f6f 	isb	sy
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	623b      	str	r3, [r7, #32]
}
 8009316:	bf00      	nop
 8009318:	e7fe      	b.n	8009318 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800931a:	f001 ff25 	bl	800b168 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800931e:	f3ef 8211 	mrs	r2, BASEPRI
 8009322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009326:	f383 8811 	msr	BASEPRI, r3
 800932a:	f3bf 8f6f 	isb	sy
 800932e:	f3bf 8f4f 	dsb	sy
 8009332:	61fa      	str	r2, [r7, #28]
 8009334:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009336:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009338:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800933a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800933e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009342:	429a      	cmp	r2, r3
 8009344:	d302      	bcc.n	800934c <xQueueGenericSendFromISR+0xbc>
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	2b02      	cmp	r3, #2
 800934a:	d12f      	bne.n	80093ac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800934c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800935c:	683a      	ldr	r2, [r7, #0]
 800935e:	68b9      	ldr	r1, [r7, #8]
 8009360:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009362:	f000 f911 	bl	8009588 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009366:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800936a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800936e:	d112      	bne.n	8009396 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009374:	2b00      	cmp	r3, #0
 8009376:	d016      	beq.n	80093a6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937a:	3324      	adds	r3, #36	; 0x24
 800937c:	4618      	mov	r0, r3
 800937e:	f000 fef7 	bl	800a170 <xTaskRemoveFromEventList>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d00e      	beq.n	80093a6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00b      	beq.n	80093a6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2201      	movs	r2, #1
 8009392:	601a      	str	r2, [r3, #0]
 8009394:	e007      	b.n	80093a6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009396:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800939a:	3301      	adds	r3, #1
 800939c:	b2db      	uxtb	r3, r3
 800939e:	b25a      	sxtb	r2, r3
 80093a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80093a6:	2301      	movs	r3, #1
 80093a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80093aa:	e001      	b.n	80093b0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80093ac:	2300      	movs	r3, #0
 80093ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093b2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80093ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80093bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3740      	adds	r7, #64	; 0x40
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
	...

080093c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b08c      	sub	sp, #48	; 0x30
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80093d4:	2300      	movs	r3, #0
 80093d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80093dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d10a      	bne.n	80093f8 <xQueueReceive+0x30>
	__asm volatile
 80093e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e6:	f383 8811 	msr	BASEPRI, r3
 80093ea:	f3bf 8f6f 	isb	sy
 80093ee:	f3bf 8f4f 	dsb	sy
 80093f2:	623b      	str	r3, [r7, #32]
}
 80093f4:	bf00      	nop
 80093f6:	e7fe      	b.n	80093f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d103      	bne.n	8009406 <xQueueReceive+0x3e>
 80093fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009402:	2b00      	cmp	r3, #0
 8009404:	d101      	bne.n	800940a <xQueueReceive+0x42>
 8009406:	2301      	movs	r3, #1
 8009408:	e000      	b.n	800940c <xQueueReceive+0x44>
 800940a:	2300      	movs	r3, #0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d10a      	bne.n	8009426 <xQueueReceive+0x5e>
	__asm volatile
 8009410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009414:	f383 8811 	msr	BASEPRI, r3
 8009418:	f3bf 8f6f 	isb	sy
 800941c:	f3bf 8f4f 	dsb	sy
 8009420:	61fb      	str	r3, [r7, #28]
}
 8009422:	bf00      	nop
 8009424:	e7fe      	b.n	8009424 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009426:	f001 f865 	bl	800a4f4 <xTaskGetSchedulerState>
 800942a:	4603      	mov	r3, r0
 800942c:	2b00      	cmp	r3, #0
 800942e:	d102      	bne.n	8009436 <xQueueReceive+0x6e>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d101      	bne.n	800943a <xQueueReceive+0x72>
 8009436:	2301      	movs	r3, #1
 8009438:	e000      	b.n	800943c <xQueueReceive+0x74>
 800943a:	2300      	movs	r3, #0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d10a      	bne.n	8009456 <xQueueReceive+0x8e>
	__asm volatile
 8009440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009444:	f383 8811 	msr	BASEPRI, r3
 8009448:	f3bf 8f6f 	isb	sy
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	61bb      	str	r3, [r7, #24]
}
 8009452:	bf00      	nop
 8009454:	e7fe      	b.n	8009454 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009456:	f001 fda5 	bl	800afa4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800945a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800945e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009462:	2b00      	cmp	r3, #0
 8009464:	d01f      	beq.n	80094a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009466:	68b9      	ldr	r1, [r7, #8]
 8009468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800946a:	f000 f8f7 	bl	800965c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800946e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009470:	1e5a      	subs	r2, r3, #1
 8009472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009474:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009478:	691b      	ldr	r3, [r3, #16]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00f      	beq.n	800949e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800947e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009480:	3310      	adds	r3, #16
 8009482:	4618      	mov	r0, r3
 8009484:	f000 fe74 	bl	800a170 <xTaskRemoveFromEventList>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d007      	beq.n	800949e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800948e:	4b3d      	ldr	r3, [pc, #244]	; (8009584 <xQueueReceive+0x1bc>)
 8009490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009494:	601a      	str	r2, [r3, #0]
 8009496:	f3bf 8f4f 	dsb	sy
 800949a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800949e:	f001 fdb1 	bl	800b004 <vPortExitCritical>
				return pdPASS;
 80094a2:	2301      	movs	r3, #1
 80094a4:	e069      	b.n	800957a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d103      	bne.n	80094b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80094ac:	f001 fdaa 	bl	800b004 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80094b0:	2300      	movs	r3, #0
 80094b2:	e062      	b.n	800957a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80094b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d106      	bne.n	80094c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80094ba:	f107 0310 	add.w	r3, r7, #16
 80094be:	4618      	mov	r0, r3
 80094c0:	f000 feba 	bl	800a238 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80094c4:	2301      	movs	r3, #1
 80094c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80094c8:	f001 fd9c 	bl	800b004 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80094cc:	f000 fc26 	bl	8009d1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80094d0:	f001 fd68 	bl	800afa4 <vPortEnterCritical>
 80094d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094da:	b25b      	sxtb	r3, r3
 80094dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094e0:	d103      	bne.n	80094ea <xQueueReceive+0x122>
 80094e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e4:	2200      	movs	r2, #0
 80094e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094f0:	b25b      	sxtb	r3, r3
 80094f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094f6:	d103      	bne.n	8009500 <xQueueReceive+0x138>
 80094f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009500:	f001 fd80 	bl	800b004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009504:	1d3a      	adds	r2, r7, #4
 8009506:	f107 0310 	add.w	r3, r7, #16
 800950a:	4611      	mov	r1, r2
 800950c:	4618      	mov	r0, r3
 800950e:	f000 fea9 	bl	800a264 <xTaskCheckForTimeOut>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d123      	bne.n	8009560 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800951a:	f000 f917 	bl	800974c <prvIsQueueEmpty>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d017      	beq.n	8009554 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009526:	3324      	adds	r3, #36	; 0x24
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	4611      	mov	r1, r2
 800952c:	4618      	mov	r0, r3
 800952e:	f000 fdcf 	bl	800a0d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009534:	f000 f8b8 	bl	80096a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009538:	f000 fbfe 	bl	8009d38 <xTaskResumeAll>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	d189      	bne.n	8009456 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009542:	4b10      	ldr	r3, [pc, #64]	; (8009584 <xQueueReceive+0x1bc>)
 8009544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009548:	601a      	str	r2, [r3, #0]
 800954a:	f3bf 8f4f 	dsb	sy
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	e780      	b.n	8009456 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009556:	f000 f8a7 	bl	80096a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800955a:	f000 fbed 	bl	8009d38 <xTaskResumeAll>
 800955e:	e77a      	b.n	8009456 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009562:	f000 f8a1 	bl	80096a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009566:	f000 fbe7 	bl	8009d38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800956a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800956c:	f000 f8ee 	bl	800974c <prvIsQueueEmpty>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	f43f af6f 	beq.w	8009456 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009578:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800957a:	4618      	mov	r0, r3
 800957c:	3730      	adds	r7, #48	; 0x30
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	e000ed04 	.word	0xe000ed04

08009588 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b086      	sub	sp, #24
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009594:	2300      	movs	r3, #0
 8009596:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800959c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d10d      	bne.n	80095c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d14d      	bne.n	800964a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	4618      	mov	r0, r3
 80095b4:	f000 ffbc 	bl	800a530 <xTaskPriorityDisinherit>
 80095b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	609a      	str	r2, [r3, #8]
 80095c0:	e043      	b.n	800964a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d119      	bne.n	80095fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6858      	ldr	r0, [r3, #4]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d0:	461a      	mov	r2, r3
 80095d2:	68b9      	ldr	r1, [r7, #8]
 80095d4:	f7f8 f832 	bl	800163c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	685a      	ldr	r2, [r3, #4]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e0:	441a      	add	r2, r3
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	685a      	ldr	r2, [r3, #4]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d32b      	bcc.n	800964a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	605a      	str	r2, [r3, #4]
 80095fa:	e026      	b.n	800964a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	68d8      	ldr	r0, [r3, #12]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009604:	461a      	mov	r2, r3
 8009606:	68b9      	ldr	r1, [r7, #8]
 8009608:	f7f8 f818 	bl	800163c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	68da      	ldr	r2, [r3, #12]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009614:	425b      	negs	r3, r3
 8009616:	441a      	add	r2, r3
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	68da      	ldr	r2, [r3, #12]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	429a      	cmp	r2, r3
 8009626:	d207      	bcs.n	8009638 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	689a      	ldr	r2, [r3, #8]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009630:	425b      	negs	r3, r3
 8009632:	441a      	add	r2, r3
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2b02      	cmp	r3, #2
 800963c:	d105      	bne.n	800964a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d002      	beq.n	800964a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	3b01      	subs	r3, #1
 8009648:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	1c5a      	adds	r2, r3, #1
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009652:	697b      	ldr	r3, [r7, #20]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3718      	adds	r7, #24
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800966a:	2b00      	cmp	r3, #0
 800966c:	d018      	beq.n	80096a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	68da      	ldr	r2, [r3, #12]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009676:	441a      	add	r2, r3
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	68da      	ldr	r2, [r3, #12]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	429a      	cmp	r2, r3
 8009686:	d303      	bcc.n	8009690 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	68d9      	ldr	r1, [r3, #12]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009698:	461a      	mov	r2, r3
 800969a:	6838      	ldr	r0, [r7, #0]
 800969c:	f7f7 ffce 	bl	800163c <memcpy>
	}
}
 80096a0:	bf00      	nop
 80096a2:	3708      	adds	r7, #8
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80096b0:	f001 fc78 	bl	800afa4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80096bc:	e011      	b.n	80096e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d012      	beq.n	80096ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	3324      	adds	r3, #36	; 0x24
 80096ca:	4618      	mov	r0, r3
 80096cc:	f000 fd50 	bl	800a170 <xTaskRemoveFromEventList>
 80096d0:	4603      	mov	r3, r0
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d001      	beq.n	80096da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80096d6:	f000 fe27 	bl	800a328 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80096da:	7bfb      	ldrb	r3, [r7, #15]
 80096dc:	3b01      	subs	r3, #1
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80096e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	dce9      	bgt.n	80096be <prvUnlockQueue+0x16>
 80096ea:	e000      	b.n	80096ee <prvUnlockQueue+0x46>
					break;
 80096ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	22ff      	movs	r2, #255	; 0xff
 80096f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80096f6:	f001 fc85 	bl	800b004 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80096fa:	f001 fc53 	bl	800afa4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009704:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009706:	e011      	b.n	800972c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	691b      	ldr	r3, [r3, #16]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d012      	beq.n	8009736 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	3310      	adds	r3, #16
 8009714:	4618      	mov	r0, r3
 8009716:	f000 fd2b 	bl	800a170 <xTaskRemoveFromEventList>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d001      	beq.n	8009724 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009720:	f000 fe02 	bl	800a328 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009724:	7bbb      	ldrb	r3, [r7, #14]
 8009726:	3b01      	subs	r3, #1
 8009728:	b2db      	uxtb	r3, r3
 800972a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800972c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009730:	2b00      	cmp	r3, #0
 8009732:	dce9      	bgt.n	8009708 <prvUnlockQueue+0x60>
 8009734:	e000      	b.n	8009738 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009736:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	22ff      	movs	r2, #255	; 0xff
 800973c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009740:	f001 fc60 	bl	800b004 <vPortExitCritical>
}
 8009744:	bf00      	nop
 8009746:	3710      	adds	r7, #16
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009754:	f001 fc26 	bl	800afa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800975c:	2b00      	cmp	r3, #0
 800975e:	d102      	bne.n	8009766 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009760:	2301      	movs	r3, #1
 8009762:	60fb      	str	r3, [r7, #12]
 8009764:	e001      	b.n	800976a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009766:	2300      	movs	r3, #0
 8009768:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800976a:	f001 fc4b 	bl	800b004 <vPortExitCritical>

	return xReturn;
 800976e:	68fb      	ldr	r3, [r7, #12]
}
 8009770:	4618      	mov	r0, r3
 8009772:	3710      	adds	r7, #16
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009780:	f001 fc10 	bl	800afa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800978c:	429a      	cmp	r2, r3
 800978e:	d102      	bne.n	8009796 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009790:	2301      	movs	r3, #1
 8009792:	60fb      	str	r3, [r7, #12]
 8009794:	e001      	b.n	800979a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009796:	2300      	movs	r3, #0
 8009798:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800979a:	f001 fc33 	bl	800b004 <vPortExitCritical>

	return xReturn;
 800979e:	68fb      	ldr	r3, [r7, #12]
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80097b2:	2300      	movs	r3, #0
 80097b4:	60fb      	str	r3, [r7, #12]
 80097b6:	e014      	b.n	80097e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80097b8:	4a0f      	ldr	r2, [pc, #60]	; (80097f8 <vQueueAddToRegistry+0x50>)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d10b      	bne.n	80097dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80097c4:	490c      	ldr	r1, [pc, #48]	; (80097f8 <vQueueAddToRegistry+0x50>)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	683a      	ldr	r2, [r7, #0]
 80097ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80097ce:	4a0a      	ldr	r2, [pc, #40]	; (80097f8 <vQueueAddToRegistry+0x50>)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	00db      	lsls	r3, r3, #3
 80097d4:	4413      	add	r3, r2
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80097da:	e006      	b.n	80097ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	3301      	adds	r3, #1
 80097e0:	60fb      	str	r3, [r7, #12]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2b07      	cmp	r3, #7
 80097e6:	d9e7      	bls.n	80097b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80097e8:	bf00      	nop
 80097ea:	bf00      	nop
 80097ec:	3714      	adds	r7, #20
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr
 80097f6:	bf00      	nop
 80097f8:	200009e0 	.word	0x200009e0

080097fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b086      	sub	sp, #24
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800980c:	f001 fbca 	bl	800afa4 <vPortEnterCritical>
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009816:	b25b      	sxtb	r3, r3
 8009818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800981c:	d103      	bne.n	8009826 <vQueueWaitForMessageRestricted+0x2a>
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	2200      	movs	r2, #0
 8009822:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800982c:	b25b      	sxtb	r3, r3
 800982e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009832:	d103      	bne.n	800983c <vQueueWaitForMessageRestricted+0x40>
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	2200      	movs	r2, #0
 8009838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800983c:	f001 fbe2 	bl	800b004 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009844:	2b00      	cmp	r3, #0
 8009846:	d106      	bne.n	8009856 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	3324      	adds	r3, #36	; 0x24
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	68b9      	ldr	r1, [r7, #8]
 8009850:	4618      	mov	r0, r3
 8009852:	f000 fc61 	bl	800a118 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009856:	6978      	ldr	r0, [r7, #20]
 8009858:	f7ff ff26 	bl	80096a8 <prvUnlockQueue>
	}
 800985c:	bf00      	nop
 800985e:	3718      	adds	r7, #24
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009864:	b580      	push	{r7, lr}
 8009866:	b08e      	sub	sp, #56	; 0x38
 8009868:	af04      	add	r7, sp, #16
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	607a      	str	r2, [r7, #4]
 8009870:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009874:	2b00      	cmp	r3, #0
 8009876:	d10a      	bne.n	800988e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987c:	f383 8811 	msr	BASEPRI, r3
 8009880:	f3bf 8f6f 	isb	sy
 8009884:	f3bf 8f4f 	dsb	sy
 8009888:	623b      	str	r3, [r7, #32]
}
 800988a:	bf00      	nop
 800988c:	e7fe      	b.n	800988c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800988e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009890:	2b00      	cmp	r3, #0
 8009892:	d10a      	bne.n	80098aa <xTaskCreateStatic+0x46>
	__asm volatile
 8009894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009898:	f383 8811 	msr	BASEPRI, r3
 800989c:	f3bf 8f6f 	isb	sy
 80098a0:	f3bf 8f4f 	dsb	sy
 80098a4:	61fb      	str	r3, [r7, #28]
}
 80098a6:	bf00      	nop
 80098a8:	e7fe      	b.n	80098a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80098aa:	23bc      	movs	r3, #188	; 0xbc
 80098ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	2bbc      	cmp	r3, #188	; 0xbc
 80098b2:	d00a      	beq.n	80098ca <xTaskCreateStatic+0x66>
	__asm volatile
 80098b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b8:	f383 8811 	msr	BASEPRI, r3
 80098bc:	f3bf 8f6f 	isb	sy
 80098c0:	f3bf 8f4f 	dsb	sy
 80098c4:	61bb      	str	r3, [r7, #24]
}
 80098c6:	bf00      	nop
 80098c8:	e7fe      	b.n	80098c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80098ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80098cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d01e      	beq.n	8009910 <xTaskCreateStatic+0xac>
 80098d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d01b      	beq.n	8009910 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80098d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80098dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80098e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e4:	2202      	movs	r2, #2
 80098e6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80098ea:	2300      	movs	r3, #0
 80098ec:	9303      	str	r3, [sp, #12]
 80098ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f0:	9302      	str	r3, [sp, #8]
 80098f2:	f107 0314 	add.w	r3, r7, #20
 80098f6:	9301      	str	r3, [sp, #4]
 80098f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098fa:	9300      	str	r3, [sp, #0]
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	68b9      	ldr	r1, [r7, #8]
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	f000 f850 	bl	80099a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009908:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800990a:	f000 f8f3 	bl	8009af4 <prvAddNewTaskToReadyList>
 800990e:	e001      	b.n	8009914 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009910:	2300      	movs	r3, #0
 8009912:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009914:	697b      	ldr	r3, [r7, #20]
	}
 8009916:	4618      	mov	r0, r3
 8009918:	3728      	adds	r7, #40	; 0x28
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800991e:	b580      	push	{r7, lr}
 8009920:	b08c      	sub	sp, #48	; 0x30
 8009922:	af04      	add	r7, sp, #16
 8009924:	60f8      	str	r0, [r7, #12]
 8009926:	60b9      	str	r1, [r7, #8]
 8009928:	603b      	str	r3, [r7, #0]
 800992a:	4613      	mov	r3, r2
 800992c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800992e:	88fb      	ldrh	r3, [r7, #6]
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	4618      	mov	r0, r3
 8009934:	f001 fc58 	bl	800b1e8 <pvPortMalloc>
 8009938:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d00e      	beq.n	800995e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009940:	20bc      	movs	r0, #188	; 0xbc
 8009942:	f001 fc51 	bl	800b1e8 <pvPortMalloc>
 8009946:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d003      	beq.n	8009956 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	697a      	ldr	r2, [r7, #20]
 8009952:	631a      	str	r2, [r3, #48]	; 0x30
 8009954:	e005      	b.n	8009962 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009956:	6978      	ldr	r0, [r7, #20]
 8009958:	f001 fd12 	bl	800b380 <vPortFree>
 800995c:	e001      	b.n	8009962 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800995e:	2300      	movs	r3, #0
 8009960:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d017      	beq.n	8009998 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	2200      	movs	r2, #0
 800996c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009970:	88fa      	ldrh	r2, [r7, #6]
 8009972:	2300      	movs	r3, #0
 8009974:	9303      	str	r3, [sp, #12]
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	9302      	str	r3, [sp, #8]
 800997a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800997c:	9301      	str	r3, [sp, #4]
 800997e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009980:	9300      	str	r3, [sp, #0]
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	68b9      	ldr	r1, [r7, #8]
 8009986:	68f8      	ldr	r0, [r7, #12]
 8009988:	f000 f80e 	bl	80099a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800998c:	69f8      	ldr	r0, [r7, #28]
 800998e:	f000 f8b1 	bl	8009af4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009992:	2301      	movs	r3, #1
 8009994:	61bb      	str	r3, [r7, #24]
 8009996:	e002      	b.n	800999e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800999c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800999e:	69bb      	ldr	r3, [r7, #24]
	}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3720      	adds	r7, #32
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b088      	sub	sp, #32
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
 80099b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80099b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	461a      	mov	r2, r3
 80099c0:	21a5      	movs	r1, #165	; 0xa5
 80099c2:	f7f7 fed5 	bl	8001770 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80099c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80099d0:	3b01      	subs	r3, #1
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	4413      	add	r3, r2
 80099d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	f023 0307 	bic.w	r3, r3, #7
 80099de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	f003 0307 	and.w	r3, r3, #7
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d00a      	beq.n	8009a00 <prvInitialiseNewTask+0x58>
	__asm volatile
 80099ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ee:	f383 8811 	msr	BASEPRI, r3
 80099f2:	f3bf 8f6f 	isb	sy
 80099f6:	f3bf 8f4f 	dsb	sy
 80099fa:	617b      	str	r3, [r7, #20]
}
 80099fc:	bf00      	nop
 80099fe:	e7fe      	b.n	80099fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d01f      	beq.n	8009a46 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a06:	2300      	movs	r3, #0
 8009a08:	61fb      	str	r3, [r7, #28]
 8009a0a:	e012      	b.n	8009a32 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009a0c:	68ba      	ldr	r2, [r7, #8]
 8009a0e:	69fb      	ldr	r3, [r7, #28]
 8009a10:	4413      	add	r3, r2
 8009a12:	7819      	ldrb	r1, [r3, #0]
 8009a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a16:	69fb      	ldr	r3, [r7, #28]
 8009a18:	4413      	add	r3, r2
 8009a1a:	3334      	adds	r3, #52	; 0x34
 8009a1c:	460a      	mov	r2, r1
 8009a1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009a20:	68ba      	ldr	r2, [r7, #8]
 8009a22:	69fb      	ldr	r3, [r7, #28]
 8009a24:	4413      	add	r3, r2
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d006      	beq.n	8009a3a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a2c:	69fb      	ldr	r3, [r7, #28]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	61fb      	str	r3, [r7, #28]
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	2b0f      	cmp	r3, #15
 8009a36:	d9e9      	bls.n	8009a0c <prvInitialiseNewTask+0x64>
 8009a38:	e000      	b.n	8009a3c <prvInitialiseNewTask+0x94>
			{
				break;
 8009a3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a44:	e003      	b.n	8009a4e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a50:	2b37      	cmp	r3, #55	; 0x37
 8009a52:	d901      	bls.n	8009a58 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009a54:	2337      	movs	r3, #55	; 0x37
 8009a56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a62:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a66:	2200      	movs	r2, #0
 8009a68:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a6c:	3304      	adds	r3, #4
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7ff f978 	bl	8008d64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a76:	3318      	adds	r3, #24
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7ff f973 	bl	8008d64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a96:	2200      	movs	r2, #0
 8009a98:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa6:	3354      	adds	r3, #84	; 0x54
 8009aa8:	2260      	movs	r2, #96	; 0x60
 8009aaa:	2100      	movs	r1, #0
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7f7 fe5f 	bl	8001770 <memset>
 8009ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab4:	4a0c      	ldr	r2, [pc, #48]	; (8009ae8 <prvInitialiseNewTask+0x140>)
 8009ab6:	659a      	str	r2, [r3, #88]	; 0x58
 8009ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aba:	4a0c      	ldr	r2, [pc, #48]	; (8009aec <prvInitialiseNewTask+0x144>)
 8009abc:	65da      	str	r2, [r3, #92]	; 0x5c
 8009abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac0:	4a0b      	ldr	r2, [pc, #44]	; (8009af0 <prvInitialiseNewTask+0x148>)
 8009ac2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009ac4:	683a      	ldr	r2, [r7, #0]
 8009ac6:	68f9      	ldr	r1, [r7, #12]
 8009ac8:	69b8      	ldr	r0, [r7, #24]
 8009aca:	f001 f941 	bl	800ad50 <pxPortInitialiseStack>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d002      	beq.n	8009ae0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ade:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ae0:	bf00      	nop
 8009ae2:	3720      	adds	r7, #32
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	0800b7cc 	.word	0x0800b7cc
 8009aec:	0800b7ac 	.word	0x0800b7ac
 8009af0:	0800b78c 	.word	0x0800b78c

08009af4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009afc:	f001 fa52 	bl	800afa4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009b00:	4b2d      	ldr	r3, [pc, #180]	; (8009bb8 <prvAddNewTaskToReadyList+0xc4>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	3301      	adds	r3, #1
 8009b06:	4a2c      	ldr	r2, [pc, #176]	; (8009bb8 <prvAddNewTaskToReadyList+0xc4>)
 8009b08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009b0a:	4b2c      	ldr	r3, [pc, #176]	; (8009bbc <prvAddNewTaskToReadyList+0xc8>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d109      	bne.n	8009b26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009b12:	4a2a      	ldr	r2, [pc, #168]	; (8009bbc <prvAddNewTaskToReadyList+0xc8>)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009b18:	4b27      	ldr	r3, [pc, #156]	; (8009bb8 <prvAddNewTaskToReadyList+0xc4>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d110      	bne.n	8009b42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009b20:	f000 fc26 	bl	800a370 <prvInitialiseTaskLists>
 8009b24:	e00d      	b.n	8009b42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009b26:	4b26      	ldr	r3, [pc, #152]	; (8009bc0 <prvAddNewTaskToReadyList+0xcc>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d109      	bne.n	8009b42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009b2e:	4b23      	ldr	r3, [pc, #140]	; (8009bbc <prvAddNewTaskToReadyList+0xc8>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d802      	bhi.n	8009b42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009b3c:	4a1f      	ldr	r2, [pc, #124]	; (8009bbc <prvAddNewTaskToReadyList+0xc8>)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009b42:	4b20      	ldr	r3, [pc, #128]	; (8009bc4 <prvAddNewTaskToReadyList+0xd0>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	3301      	adds	r3, #1
 8009b48:	4a1e      	ldr	r2, [pc, #120]	; (8009bc4 <prvAddNewTaskToReadyList+0xd0>)
 8009b4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009b4c:	4b1d      	ldr	r3, [pc, #116]	; (8009bc4 <prvAddNewTaskToReadyList+0xd0>)
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b58:	4b1b      	ldr	r3, [pc, #108]	; (8009bc8 <prvAddNewTaskToReadyList+0xd4>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d903      	bls.n	8009b68 <prvAddNewTaskToReadyList+0x74>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b64:	4a18      	ldr	r2, [pc, #96]	; (8009bc8 <prvAddNewTaskToReadyList+0xd4>)
 8009b66:	6013      	str	r3, [r2, #0]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4413      	add	r3, r2
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	4a15      	ldr	r2, [pc, #84]	; (8009bcc <prvAddNewTaskToReadyList+0xd8>)
 8009b76:	441a      	add	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	3304      	adds	r3, #4
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	4610      	mov	r0, r2
 8009b80:	f7ff f8fd 	bl	8008d7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009b84:	f001 fa3e 	bl	800b004 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009b88:	4b0d      	ldr	r3, [pc, #52]	; (8009bc0 <prvAddNewTaskToReadyList+0xcc>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00e      	beq.n	8009bae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009b90:	4b0a      	ldr	r3, [pc, #40]	; (8009bbc <prvAddNewTaskToReadyList+0xc8>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d207      	bcs.n	8009bae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009b9e:	4b0c      	ldr	r3, [pc, #48]	; (8009bd0 <prvAddNewTaskToReadyList+0xdc>)
 8009ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ba4:	601a      	str	r2, [r3, #0]
 8009ba6:	f3bf 8f4f 	dsb	sy
 8009baa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009bae:	bf00      	nop
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	bf00      	nop
 8009bb8:	20000ef4 	.word	0x20000ef4
 8009bbc:	20000a20 	.word	0x20000a20
 8009bc0:	20000f00 	.word	0x20000f00
 8009bc4:	20000f10 	.word	0x20000f10
 8009bc8:	20000efc 	.word	0x20000efc
 8009bcc:	20000a24 	.word	0x20000a24
 8009bd0:	e000ed04 	.word	0xe000ed04

08009bd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d017      	beq.n	8009c16 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009be6:	4b13      	ldr	r3, [pc, #76]	; (8009c34 <vTaskDelay+0x60>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d00a      	beq.n	8009c04 <vTaskDelay+0x30>
	__asm volatile
 8009bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf2:	f383 8811 	msr	BASEPRI, r3
 8009bf6:	f3bf 8f6f 	isb	sy
 8009bfa:	f3bf 8f4f 	dsb	sy
 8009bfe:	60bb      	str	r3, [r7, #8]
}
 8009c00:	bf00      	nop
 8009c02:	e7fe      	b.n	8009c02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009c04:	f000 f88a 	bl	8009d1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009c08:	2100      	movs	r1, #0
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 fcfe 	bl	800a60c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009c10:	f000 f892 	bl	8009d38 <xTaskResumeAll>
 8009c14:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d107      	bne.n	8009c2c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009c1c:	4b06      	ldr	r3, [pc, #24]	; (8009c38 <vTaskDelay+0x64>)
 8009c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c22:	601a      	str	r2, [r3, #0]
 8009c24:	f3bf 8f4f 	dsb	sy
 8009c28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009c2c:	bf00      	nop
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	20000f1c 	.word	0x20000f1c
 8009c38:	e000ed04 	.word	0xe000ed04

08009c3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b08a      	sub	sp, #40	; 0x28
 8009c40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009c42:	2300      	movs	r3, #0
 8009c44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009c46:	2300      	movs	r3, #0
 8009c48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009c4a:	463a      	mov	r2, r7
 8009c4c:	1d39      	adds	r1, r7, #4
 8009c4e:	f107 0308 	add.w	r3, r7, #8
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7ff f832 	bl	8008cbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009c58:	6839      	ldr	r1, [r7, #0]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	9202      	str	r2, [sp, #8]
 8009c60:	9301      	str	r3, [sp, #4]
 8009c62:	2300      	movs	r3, #0
 8009c64:	9300      	str	r3, [sp, #0]
 8009c66:	2300      	movs	r3, #0
 8009c68:	460a      	mov	r2, r1
 8009c6a:	4924      	ldr	r1, [pc, #144]	; (8009cfc <vTaskStartScheduler+0xc0>)
 8009c6c:	4824      	ldr	r0, [pc, #144]	; (8009d00 <vTaskStartScheduler+0xc4>)
 8009c6e:	f7ff fdf9 	bl	8009864 <xTaskCreateStatic>
 8009c72:	4603      	mov	r3, r0
 8009c74:	4a23      	ldr	r2, [pc, #140]	; (8009d04 <vTaskStartScheduler+0xc8>)
 8009c76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009c78:	4b22      	ldr	r3, [pc, #136]	; (8009d04 <vTaskStartScheduler+0xc8>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d002      	beq.n	8009c86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009c80:	2301      	movs	r3, #1
 8009c82:	617b      	str	r3, [r7, #20]
 8009c84:	e001      	b.n	8009c8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009c86:	2300      	movs	r3, #0
 8009c88:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d102      	bne.n	8009c96 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009c90:	f000 fd10 	bl	800a6b4 <xTimerCreateTimerTask>
 8009c94:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d11b      	bne.n	8009cd4 <vTaskStartScheduler+0x98>
	__asm volatile
 8009c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca0:	f383 8811 	msr	BASEPRI, r3
 8009ca4:	f3bf 8f6f 	isb	sy
 8009ca8:	f3bf 8f4f 	dsb	sy
 8009cac:	613b      	str	r3, [r7, #16]
}
 8009cae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009cb0:	4b15      	ldr	r3, [pc, #84]	; (8009d08 <vTaskStartScheduler+0xcc>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	3354      	adds	r3, #84	; 0x54
 8009cb6:	4a15      	ldr	r2, [pc, #84]	; (8009d0c <vTaskStartScheduler+0xd0>)
 8009cb8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009cba:	4b15      	ldr	r3, [pc, #84]	; (8009d10 <vTaskStartScheduler+0xd4>)
 8009cbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009cc0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009cc2:	4b14      	ldr	r3, [pc, #80]	; (8009d14 <vTaskStartScheduler+0xd8>)
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009cc8:	4b13      	ldr	r3, [pc, #76]	; (8009d18 <vTaskStartScheduler+0xdc>)
 8009cca:	2200      	movs	r2, #0
 8009ccc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009cce:	f001 f8c7 	bl	800ae60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009cd2:	e00e      	b.n	8009cf2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cda:	d10a      	bne.n	8009cf2 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce0:	f383 8811 	msr	BASEPRI, r3
 8009ce4:	f3bf 8f6f 	isb	sy
 8009ce8:	f3bf 8f4f 	dsb	sy
 8009cec:	60fb      	str	r3, [r7, #12]
}
 8009cee:	bf00      	nop
 8009cf0:	e7fe      	b.n	8009cf0 <vTaskStartScheduler+0xb4>
}
 8009cf2:	bf00      	nop
 8009cf4:	3718      	adds	r7, #24
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	0800b774 	.word	0x0800b774
 8009d00:	0800a341 	.word	0x0800a341
 8009d04:	20000f18 	.word	0x20000f18
 8009d08:	20000a20 	.word	0x20000a20
 8009d0c:	20000004 	.word	0x20000004
 8009d10:	20000f14 	.word	0x20000f14
 8009d14:	20000f00 	.word	0x20000f00
 8009d18:	20000ef8 	.word	0x20000ef8

08009d1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009d20:	4b04      	ldr	r3, [pc, #16]	; (8009d34 <vTaskSuspendAll+0x18>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	3301      	adds	r3, #1
 8009d26:	4a03      	ldr	r2, [pc, #12]	; (8009d34 <vTaskSuspendAll+0x18>)
 8009d28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009d2a:	bf00      	nop
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr
 8009d34:	20000f1c 	.word	0x20000f1c

08009d38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009d42:	2300      	movs	r3, #0
 8009d44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009d46:	4b42      	ldr	r3, [pc, #264]	; (8009e50 <xTaskResumeAll+0x118>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d10a      	bne.n	8009d64 <xTaskResumeAll+0x2c>
	__asm volatile
 8009d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d52:	f383 8811 	msr	BASEPRI, r3
 8009d56:	f3bf 8f6f 	isb	sy
 8009d5a:	f3bf 8f4f 	dsb	sy
 8009d5e:	603b      	str	r3, [r7, #0]
}
 8009d60:	bf00      	nop
 8009d62:	e7fe      	b.n	8009d62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009d64:	f001 f91e 	bl	800afa4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009d68:	4b39      	ldr	r3, [pc, #228]	; (8009e50 <xTaskResumeAll+0x118>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	4a38      	ldr	r2, [pc, #224]	; (8009e50 <xTaskResumeAll+0x118>)
 8009d70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d72:	4b37      	ldr	r3, [pc, #220]	; (8009e50 <xTaskResumeAll+0x118>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d162      	bne.n	8009e40 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009d7a:	4b36      	ldr	r3, [pc, #216]	; (8009e54 <xTaskResumeAll+0x11c>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d05e      	beq.n	8009e40 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d82:	e02f      	b.n	8009de4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d84:	4b34      	ldr	r3, [pc, #208]	; (8009e58 <xTaskResumeAll+0x120>)
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	3318      	adds	r3, #24
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7ff f851 	bl	8008e38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	3304      	adds	r3, #4
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7ff f84c 	bl	8008e38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009da4:	4b2d      	ldr	r3, [pc, #180]	; (8009e5c <xTaskResumeAll+0x124>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d903      	bls.n	8009db4 <xTaskResumeAll+0x7c>
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db0:	4a2a      	ldr	r2, [pc, #168]	; (8009e5c <xTaskResumeAll+0x124>)
 8009db2:	6013      	str	r3, [r2, #0]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009db8:	4613      	mov	r3, r2
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	4413      	add	r3, r2
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	4a27      	ldr	r2, [pc, #156]	; (8009e60 <xTaskResumeAll+0x128>)
 8009dc2:	441a      	add	r2, r3
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	3304      	adds	r3, #4
 8009dc8:	4619      	mov	r1, r3
 8009dca:	4610      	mov	r0, r2
 8009dcc:	f7fe ffd7 	bl	8008d7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dd4:	4b23      	ldr	r3, [pc, #140]	; (8009e64 <xTaskResumeAll+0x12c>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d302      	bcc.n	8009de4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009dde:	4b22      	ldr	r3, [pc, #136]	; (8009e68 <xTaskResumeAll+0x130>)
 8009de0:	2201      	movs	r2, #1
 8009de2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009de4:	4b1c      	ldr	r3, [pc, #112]	; (8009e58 <xTaskResumeAll+0x120>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1cb      	bne.n	8009d84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d001      	beq.n	8009df6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009df2:	f000 fb5f 	bl	800a4b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009df6:	4b1d      	ldr	r3, [pc, #116]	; (8009e6c <xTaskResumeAll+0x134>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d010      	beq.n	8009e24 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009e02:	f000 f847 	bl	8009e94 <xTaskIncrementTick>
 8009e06:	4603      	mov	r3, r0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d002      	beq.n	8009e12 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009e0c:	4b16      	ldr	r3, [pc, #88]	; (8009e68 <xTaskResumeAll+0x130>)
 8009e0e:	2201      	movs	r2, #1
 8009e10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	3b01      	subs	r3, #1
 8009e16:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d1f1      	bne.n	8009e02 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009e1e:	4b13      	ldr	r3, [pc, #76]	; (8009e6c <xTaskResumeAll+0x134>)
 8009e20:	2200      	movs	r2, #0
 8009e22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009e24:	4b10      	ldr	r3, [pc, #64]	; (8009e68 <xTaskResumeAll+0x130>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d009      	beq.n	8009e40 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009e30:	4b0f      	ldr	r3, [pc, #60]	; (8009e70 <xTaskResumeAll+0x138>)
 8009e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e36:	601a      	str	r2, [r3, #0]
 8009e38:	f3bf 8f4f 	dsb	sy
 8009e3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e40:	f001 f8e0 	bl	800b004 <vPortExitCritical>

	return xAlreadyYielded;
 8009e44:	68bb      	ldr	r3, [r7, #8]
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3710      	adds	r7, #16
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	20000f1c 	.word	0x20000f1c
 8009e54:	20000ef4 	.word	0x20000ef4
 8009e58:	20000eb4 	.word	0x20000eb4
 8009e5c:	20000efc 	.word	0x20000efc
 8009e60:	20000a24 	.word	0x20000a24
 8009e64:	20000a20 	.word	0x20000a20
 8009e68:	20000f08 	.word	0x20000f08
 8009e6c:	20000f04 	.word	0x20000f04
 8009e70:	e000ed04 	.word	0xe000ed04

08009e74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009e7a:	4b05      	ldr	r3, [pc, #20]	; (8009e90 <xTaskGetTickCount+0x1c>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009e80:	687b      	ldr	r3, [r7, #4]
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	370c      	adds	r7, #12
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop
 8009e90:	20000ef8 	.word	0x20000ef8

08009e94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b086      	sub	sp, #24
 8009e98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e9e:	4b4f      	ldr	r3, [pc, #316]	; (8009fdc <xTaskIncrementTick+0x148>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	f040 808f 	bne.w	8009fc6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009ea8:	4b4d      	ldr	r3, [pc, #308]	; (8009fe0 <xTaskIncrementTick+0x14c>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	3301      	adds	r3, #1
 8009eae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009eb0:	4a4b      	ldr	r2, [pc, #300]	; (8009fe0 <xTaskIncrementTick+0x14c>)
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d120      	bne.n	8009efe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009ebc:	4b49      	ldr	r3, [pc, #292]	; (8009fe4 <xTaskIncrementTick+0x150>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d00a      	beq.n	8009edc <xTaskIncrementTick+0x48>
	__asm volatile
 8009ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eca:	f383 8811 	msr	BASEPRI, r3
 8009ece:	f3bf 8f6f 	isb	sy
 8009ed2:	f3bf 8f4f 	dsb	sy
 8009ed6:	603b      	str	r3, [r7, #0]
}
 8009ed8:	bf00      	nop
 8009eda:	e7fe      	b.n	8009eda <xTaskIncrementTick+0x46>
 8009edc:	4b41      	ldr	r3, [pc, #260]	; (8009fe4 <xTaskIncrementTick+0x150>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	60fb      	str	r3, [r7, #12]
 8009ee2:	4b41      	ldr	r3, [pc, #260]	; (8009fe8 <xTaskIncrementTick+0x154>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4a3f      	ldr	r2, [pc, #252]	; (8009fe4 <xTaskIncrementTick+0x150>)
 8009ee8:	6013      	str	r3, [r2, #0]
 8009eea:	4a3f      	ldr	r2, [pc, #252]	; (8009fe8 <xTaskIncrementTick+0x154>)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6013      	str	r3, [r2, #0]
 8009ef0:	4b3e      	ldr	r3, [pc, #248]	; (8009fec <xTaskIncrementTick+0x158>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	4a3d      	ldr	r2, [pc, #244]	; (8009fec <xTaskIncrementTick+0x158>)
 8009ef8:	6013      	str	r3, [r2, #0]
 8009efa:	f000 fadb 	bl	800a4b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009efe:	4b3c      	ldr	r3, [pc, #240]	; (8009ff0 <xTaskIncrementTick+0x15c>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	693a      	ldr	r2, [r7, #16]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d349      	bcc.n	8009f9c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f08:	4b36      	ldr	r3, [pc, #216]	; (8009fe4 <xTaskIncrementTick+0x150>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d104      	bne.n	8009f1c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f12:	4b37      	ldr	r3, [pc, #220]	; (8009ff0 <xTaskIncrementTick+0x15c>)
 8009f14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f18:	601a      	str	r2, [r3, #0]
					break;
 8009f1a:	e03f      	b.n	8009f9c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f1c:	4b31      	ldr	r3, [pc, #196]	; (8009fe4 <xTaskIncrementTick+0x150>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	68db      	ldr	r3, [r3, #12]
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009f2c:	693a      	ldr	r2, [r7, #16]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d203      	bcs.n	8009f3c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009f34:	4a2e      	ldr	r2, [pc, #184]	; (8009ff0 <xTaskIncrementTick+0x15c>)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009f3a:	e02f      	b.n	8009f9c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	3304      	adds	r3, #4
 8009f40:	4618      	mov	r0, r3
 8009f42:	f7fe ff79 	bl	8008e38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d004      	beq.n	8009f58 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	3318      	adds	r3, #24
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7fe ff70 	bl	8008e38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f5c:	4b25      	ldr	r3, [pc, #148]	; (8009ff4 <xTaskIncrementTick+0x160>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d903      	bls.n	8009f6c <xTaskIncrementTick+0xd8>
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f68:	4a22      	ldr	r2, [pc, #136]	; (8009ff4 <xTaskIncrementTick+0x160>)
 8009f6a:	6013      	str	r3, [r2, #0]
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f70:	4613      	mov	r3, r2
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	4413      	add	r3, r2
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	4a1f      	ldr	r2, [pc, #124]	; (8009ff8 <xTaskIncrementTick+0x164>)
 8009f7a:	441a      	add	r2, r3
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	3304      	adds	r3, #4
 8009f80:	4619      	mov	r1, r3
 8009f82:	4610      	mov	r0, r2
 8009f84:	f7fe fefb 	bl	8008d7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f8c:	4b1b      	ldr	r3, [pc, #108]	; (8009ffc <xTaskIncrementTick+0x168>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d3b8      	bcc.n	8009f08 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009f96:	2301      	movs	r3, #1
 8009f98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f9a:	e7b5      	b.n	8009f08 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009f9c:	4b17      	ldr	r3, [pc, #92]	; (8009ffc <xTaskIncrementTick+0x168>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fa2:	4915      	ldr	r1, [pc, #84]	; (8009ff8 <xTaskIncrementTick+0x164>)
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	4413      	add	r3, r2
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	440b      	add	r3, r1
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d901      	bls.n	8009fb8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009fb8:	4b11      	ldr	r3, [pc, #68]	; (800a000 <xTaskIncrementTick+0x16c>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d007      	beq.n	8009fd0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	617b      	str	r3, [r7, #20]
 8009fc4:	e004      	b.n	8009fd0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009fc6:	4b0f      	ldr	r3, [pc, #60]	; (800a004 <xTaskIncrementTick+0x170>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	4a0d      	ldr	r2, [pc, #52]	; (800a004 <xTaskIncrementTick+0x170>)
 8009fce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009fd0:	697b      	ldr	r3, [r7, #20]
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3718      	adds	r7, #24
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	20000f1c 	.word	0x20000f1c
 8009fe0:	20000ef8 	.word	0x20000ef8
 8009fe4:	20000eac 	.word	0x20000eac
 8009fe8:	20000eb0 	.word	0x20000eb0
 8009fec:	20000f0c 	.word	0x20000f0c
 8009ff0:	20000f14 	.word	0x20000f14
 8009ff4:	20000efc 	.word	0x20000efc
 8009ff8:	20000a24 	.word	0x20000a24
 8009ffc:	20000a20 	.word	0x20000a20
 800a000:	20000f08 	.word	0x20000f08
 800a004:	20000f04 	.word	0x20000f04

0800a008 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a008:	b480      	push	{r7}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a00e:	4b2a      	ldr	r3, [pc, #168]	; (800a0b8 <vTaskSwitchContext+0xb0>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d003      	beq.n	800a01e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a016:	4b29      	ldr	r3, [pc, #164]	; (800a0bc <vTaskSwitchContext+0xb4>)
 800a018:	2201      	movs	r2, #1
 800a01a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a01c:	e046      	b.n	800a0ac <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a01e:	4b27      	ldr	r3, [pc, #156]	; (800a0bc <vTaskSwitchContext+0xb4>)
 800a020:	2200      	movs	r2, #0
 800a022:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a024:	4b26      	ldr	r3, [pc, #152]	; (800a0c0 <vTaskSwitchContext+0xb8>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	60fb      	str	r3, [r7, #12]
 800a02a:	e010      	b.n	800a04e <vTaskSwitchContext+0x46>
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d10a      	bne.n	800a048 <vTaskSwitchContext+0x40>
	__asm volatile
 800a032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a036:	f383 8811 	msr	BASEPRI, r3
 800a03a:	f3bf 8f6f 	isb	sy
 800a03e:	f3bf 8f4f 	dsb	sy
 800a042:	607b      	str	r3, [r7, #4]
}
 800a044:	bf00      	nop
 800a046:	e7fe      	b.n	800a046 <vTaskSwitchContext+0x3e>
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	3b01      	subs	r3, #1
 800a04c:	60fb      	str	r3, [r7, #12]
 800a04e:	491d      	ldr	r1, [pc, #116]	; (800a0c4 <vTaskSwitchContext+0xbc>)
 800a050:	68fa      	ldr	r2, [r7, #12]
 800a052:	4613      	mov	r3, r2
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	4413      	add	r3, r2
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	440b      	add	r3, r1
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d0e4      	beq.n	800a02c <vTaskSwitchContext+0x24>
 800a062:	68fa      	ldr	r2, [r7, #12]
 800a064:	4613      	mov	r3, r2
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	4413      	add	r3, r2
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	4a15      	ldr	r2, [pc, #84]	; (800a0c4 <vTaskSwitchContext+0xbc>)
 800a06e:	4413      	add	r3, r2
 800a070:	60bb      	str	r3, [r7, #8]
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	685a      	ldr	r2, [r3, #4]
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	605a      	str	r2, [r3, #4]
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	685a      	ldr	r2, [r3, #4]
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	3308      	adds	r3, #8
 800a084:	429a      	cmp	r2, r3
 800a086:	d104      	bne.n	800a092 <vTaskSwitchContext+0x8a>
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	685a      	ldr	r2, [r3, #4]
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	605a      	str	r2, [r3, #4]
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	4a0b      	ldr	r2, [pc, #44]	; (800a0c8 <vTaskSwitchContext+0xc0>)
 800a09a:	6013      	str	r3, [r2, #0]
 800a09c:	4a08      	ldr	r2, [pc, #32]	; (800a0c0 <vTaskSwitchContext+0xb8>)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a0a2:	4b09      	ldr	r3, [pc, #36]	; (800a0c8 <vTaskSwitchContext+0xc0>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	3354      	adds	r3, #84	; 0x54
 800a0a8:	4a08      	ldr	r2, [pc, #32]	; (800a0cc <vTaskSwitchContext+0xc4>)
 800a0aa:	6013      	str	r3, [r2, #0]
}
 800a0ac:	bf00      	nop
 800a0ae:	3714      	adds	r7, #20
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr
 800a0b8:	20000f1c 	.word	0x20000f1c
 800a0bc:	20000f08 	.word	0x20000f08
 800a0c0:	20000efc 	.word	0x20000efc
 800a0c4:	20000a24 	.word	0x20000a24
 800a0c8:	20000a20 	.word	0x20000a20
 800a0cc:	20000004 	.word	0x20000004

0800a0d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d10a      	bne.n	800a0f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e4:	f383 8811 	msr	BASEPRI, r3
 800a0e8:	f3bf 8f6f 	isb	sy
 800a0ec:	f3bf 8f4f 	dsb	sy
 800a0f0:	60fb      	str	r3, [r7, #12]
}
 800a0f2:	bf00      	nop
 800a0f4:	e7fe      	b.n	800a0f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a0f6:	4b07      	ldr	r3, [pc, #28]	; (800a114 <vTaskPlaceOnEventList+0x44>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	3318      	adds	r3, #24
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f7fe fe61 	bl	8008dc6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a104:	2101      	movs	r1, #1
 800a106:	6838      	ldr	r0, [r7, #0]
 800a108:	f000 fa80 	bl	800a60c <prvAddCurrentTaskToDelayedList>
}
 800a10c:	bf00      	nop
 800a10e:	3710      	adds	r7, #16
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	20000a20 	.word	0x20000a20

0800a118 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b086      	sub	sp, #24
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d10a      	bne.n	800a140 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12e:	f383 8811 	msr	BASEPRI, r3
 800a132:	f3bf 8f6f 	isb	sy
 800a136:	f3bf 8f4f 	dsb	sy
 800a13a:	617b      	str	r3, [r7, #20]
}
 800a13c:	bf00      	nop
 800a13e:	e7fe      	b.n	800a13e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a140:	4b0a      	ldr	r3, [pc, #40]	; (800a16c <vTaskPlaceOnEventListRestricted+0x54>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	3318      	adds	r3, #24
 800a146:	4619      	mov	r1, r3
 800a148:	68f8      	ldr	r0, [r7, #12]
 800a14a:	f7fe fe18 	bl	8008d7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d002      	beq.n	800a15a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a154:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a158:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a15a:	6879      	ldr	r1, [r7, #4]
 800a15c:	68b8      	ldr	r0, [r7, #8]
 800a15e:	f000 fa55 	bl	800a60c <prvAddCurrentTaskToDelayedList>
	}
 800a162:	bf00      	nop
 800a164:	3718      	adds	r7, #24
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	20000a20 	.word	0x20000a20

0800a170 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b086      	sub	sp, #24
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d10a      	bne.n	800a19c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18a:	f383 8811 	msr	BASEPRI, r3
 800a18e:	f3bf 8f6f 	isb	sy
 800a192:	f3bf 8f4f 	dsb	sy
 800a196:	60fb      	str	r3, [r7, #12]
}
 800a198:	bf00      	nop
 800a19a:	e7fe      	b.n	800a19a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	3318      	adds	r3, #24
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f7fe fe49 	bl	8008e38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1a6:	4b1e      	ldr	r3, [pc, #120]	; (800a220 <xTaskRemoveFromEventList+0xb0>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d11d      	bne.n	800a1ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	3304      	adds	r3, #4
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7fe fe40 	bl	8008e38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1bc:	4b19      	ldr	r3, [pc, #100]	; (800a224 <xTaskRemoveFromEventList+0xb4>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d903      	bls.n	800a1cc <xTaskRemoveFromEventList+0x5c>
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c8:	4a16      	ldr	r2, [pc, #88]	; (800a224 <xTaskRemoveFromEventList+0xb4>)
 800a1ca:	6013      	str	r3, [r2, #0]
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	4413      	add	r3, r2
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	4a13      	ldr	r2, [pc, #76]	; (800a228 <xTaskRemoveFromEventList+0xb8>)
 800a1da:	441a      	add	r2, r3
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	3304      	adds	r3, #4
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	4610      	mov	r0, r2
 800a1e4:	f7fe fdcb 	bl	8008d7e <vListInsertEnd>
 800a1e8:	e005      	b.n	800a1f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	3318      	adds	r3, #24
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	480e      	ldr	r0, [pc, #56]	; (800a22c <xTaskRemoveFromEventList+0xbc>)
 800a1f2:	f7fe fdc4 	bl	8008d7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1fa:	4b0d      	ldr	r3, [pc, #52]	; (800a230 <xTaskRemoveFromEventList+0xc0>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a200:	429a      	cmp	r2, r3
 800a202:	d905      	bls.n	800a210 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a204:	2301      	movs	r3, #1
 800a206:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a208:	4b0a      	ldr	r3, [pc, #40]	; (800a234 <xTaskRemoveFromEventList+0xc4>)
 800a20a:	2201      	movs	r2, #1
 800a20c:	601a      	str	r2, [r3, #0]
 800a20e:	e001      	b.n	800a214 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a210:	2300      	movs	r3, #0
 800a212:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a214:	697b      	ldr	r3, [r7, #20]
}
 800a216:	4618      	mov	r0, r3
 800a218:	3718      	adds	r7, #24
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	20000f1c 	.word	0x20000f1c
 800a224:	20000efc 	.word	0x20000efc
 800a228:	20000a24 	.word	0x20000a24
 800a22c:	20000eb4 	.word	0x20000eb4
 800a230:	20000a20 	.word	0x20000a20
 800a234:	20000f08 	.word	0x20000f08

0800a238 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a240:	4b06      	ldr	r3, [pc, #24]	; (800a25c <vTaskInternalSetTimeOutState+0x24>)
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a248:	4b05      	ldr	r3, [pc, #20]	; (800a260 <vTaskInternalSetTimeOutState+0x28>)
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	605a      	str	r2, [r3, #4]
}
 800a250:	bf00      	nop
 800a252:	370c      	adds	r7, #12
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	20000f0c 	.word	0x20000f0c
 800a260:	20000ef8 	.word	0x20000ef8

0800a264 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b088      	sub	sp, #32
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d10a      	bne.n	800a28a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a278:	f383 8811 	msr	BASEPRI, r3
 800a27c:	f3bf 8f6f 	isb	sy
 800a280:	f3bf 8f4f 	dsb	sy
 800a284:	613b      	str	r3, [r7, #16]
}
 800a286:	bf00      	nop
 800a288:	e7fe      	b.n	800a288 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d10a      	bne.n	800a2a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a294:	f383 8811 	msr	BASEPRI, r3
 800a298:	f3bf 8f6f 	isb	sy
 800a29c:	f3bf 8f4f 	dsb	sy
 800a2a0:	60fb      	str	r3, [r7, #12]
}
 800a2a2:	bf00      	nop
 800a2a4:	e7fe      	b.n	800a2a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a2a6:	f000 fe7d 	bl	800afa4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a2aa:	4b1d      	ldr	r3, [pc, #116]	; (800a320 <xTaskCheckForTimeOut+0xbc>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	69ba      	ldr	r2, [r7, #24]
 800a2b6:	1ad3      	subs	r3, r2, r3
 800a2b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2c2:	d102      	bne.n	800a2ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	61fb      	str	r3, [r7, #28]
 800a2c8:	e023      	b.n	800a312 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	4b15      	ldr	r3, [pc, #84]	; (800a324 <xTaskCheckForTimeOut+0xc0>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d007      	beq.n	800a2e6 <xTaskCheckForTimeOut+0x82>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	69ba      	ldr	r2, [r7, #24]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d302      	bcc.n	800a2e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	61fb      	str	r3, [r7, #28]
 800a2e4:	e015      	b.n	800a312 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	697a      	ldr	r2, [r7, #20]
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d20b      	bcs.n	800a308 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	1ad2      	subs	r2, r2, r3
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f7ff ff9b 	bl	800a238 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a302:	2300      	movs	r3, #0
 800a304:	61fb      	str	r3, [r7, #28]
 800a306:	e004      	b.n	800a312 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	2200      	movs	r2, #0
 800a30c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a30e:	2301      	movs	r3, #1
 800a310:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a312:	f000 fe77 	bl	800b004 <vPortExitCritical>

	return xReturn;
 800a316:	69fb      	ldr	r3, [r7, #28]
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3720      	adds	r7, #32
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	20000ef8 	.word	0x20000ef8
 800a324:	20000f0c 	.word	0x20000f0c

0800a328 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a328:	b480      	push	{r7}
 800a32a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a32c:	4b03      	ldr	r3, [pc, #12]	; (800a33c <vTaskMissedYield+0x14>)
 800a32e:	2201      	movs	r2, #1
 800a330:	601a      	str	r2, [r3, #0]
}
 800a332:	bf00      	nop
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr
 800a33c:	20000f08 	.word	0x20000f08

0800a340 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a348:	f000 f852 	bl	800a3f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a34c:	4b06      	ldr	r3, [pc, #24]	; (800a368 <prvIdleTask+0x28>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2b01      	cmp	r3, #1
 800a352:	d9f9      	bls.n	800a348 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a354:	4b05      	ldr	r3, [pc, #20]	; (800a36c <prvIdleTask+0x2c>)
 800a356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a35a:	601a      	str	r2, [r3, #0]
 800a35c:	f3bf 8f4f 	dsb	sy
 800a360:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a364:	e7f0      	b.n	800a348 <prvIdleTask+0x8>
 800a366:	bf00      	nop
 800a368:	20000a24 	.word	0x20000a24
 800a36c:	e000ed04 	.word	0xe000ed04

0800a370 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a376:	2300      	movs	r3, #0
 800a378:	607b      	str	r3, [r7, #4]
 800a37a:	e00c      	b.n	800a396 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	4613      	mov	r3, r2
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	4413      	add	r3, r2
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	4a12      	ldr	r2, [pc, #72]	; (800a3d0 <prvInitialiseTaskLists+0x60>)
 800a388:	4413      	add	r3, r2
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7fe fcca 	bl	8008d24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	3301      	adds	r3, #1
 800a394:	607b      	str	r3, [r7, #4]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2b37      	cmp	r3, #55	; 0x37
 800a39a:	d9ef      	bls.n	800a37c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a39c:	480d      	ldr	r0, [pc, #52]	; (800a3d4 <prvInitialiseTaskLists+0x64>)
 800a39e:	f7fe fcc1 	bl	8008d24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a3a2:	480d      	ldr	r0, [pc, #52]	; (800a3d8 <prvInitialiseTaskLists+0x68>)
 800a3a4:	f7fe fcbe 	bl	8008d24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a3a8:	480c      	ldr	r0, [pc, #48]	; (800a3dc <prvInitialiseTaskLists+0x6c>)
 800a3aa:	f7fe fcbb 	bl	8008d24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a3ae:	480c      	ldr	r0, [pc, #48]	; (800a3e0 <prvInitialiseTaskLists+0x70>)
 800a3b0:	f7fe fcb8 	bl	8008d24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a3b4:	480b      	ldr	r0, [pc, #44]	; (800a3e4 <prvInitialiseTaskLists+0x74>)
 800a3b6:	f7fe fcb5 	bl	8008d24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a3ba:	4b0b      	ldr	r3, [pc, #44]	; (800a3e8 <prvInitialiseTaskLists+0x78>)
 800a3bc:	4a05      	ldr	r2, [pc, #20]	; (800a3d4 <prvInitialiseTaskLists+0x64>)
 800a3be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a3c0:	4b0a      	ldr	r3, [pc, #40]	; (800a3ec <prvInitialiseTaskLists+0x7c>)
 800a3c2:	4a05      	ldr	r2, [pc, #20]	; (800a3d8 <prvInitialiseTaskLists+0x68>)
 800a3c4:	601a      	str	r2, [r3, #0]
}
 800a3c6:	bf00      	nop
 800a3c8:	3708      	adds	r7, #8
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	20000a24 	.word	0x20000a24
 800a3d4:	20000e84 	.word	0x20000e84
 800a3d8:	20000e98 	.word	0x20000e98
 800a3dc:	20000eb4 	.word	0x20000eb4
 800a3e0:	20000ec8 	.word	0x20000ec8
 800a3e4:	20000ee0 	.word	0x20000ee0
 800a3e8:	20000eac 	.word	0x20000eac
 800a3ec:	20000eb0 	.word	0x20000eb0

0800a3f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a3f6:	e019      	b.n	800a42c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a3f8:	f000 fdd4 	bl	800afa4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3fc:	4b10      	ldr	r3, [pc, #64]	; (800a440 <prvCheckTasksWaitingTermination+0x50>)
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	3304      	adds	r3, #4
 800a408:	4618      	mov	r0, r3
 800a40a:	f7fe fd15 	bl	8008e38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a40e:	4b0d      	ldr	r3, [pc, #52]	; (800a444 <prvCheckTasksWaitingTermination+0x54>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	3b01      	subs	r3, #1
 800a414:	4a0b      	ldr	r2, [pc, #44]	; (800a444 <prvCheckTasksWaitingTermination+0x54>)
 800a416:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a418:	4b0b      	ldr	r3, [pc, #44]	; (800a448 <prvCheckTasksWaitingTermination+0x58>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	3b01      	subs	r3, #1
 800a41e:	4a0a      	ldr	r2, [pc, #40]	; (800a448 <prvCheckTasksWaitingTermination+0x58>)
 800a420:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a422:	f000 fdef 	bl	800b004 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 f810 	bl	800a44c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a42c:	4b06      	ldr	r3, [pc, #24]	; (800a448 <prvCheckTasksWaitingTermination+0x58>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d1e1      	bne.n	800a3f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a434:	bf00      	nop
 800a436:	bf00      	nop
 800a438:	3708      	adds	r7, #8
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	20000ec8 	.word	0x20000ec8
 800a444:	20000ef4 	.word	0x20000ef4
 800a448:	20000edc 	.word	0x20000edc

0800a44c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	3354      	adds	r3, #84	; 0x54
 800a458:	4618      	mov	r0, r3
 800a45a:	f7f7 faeb 	bl	8001a34 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a464:	2b00      	cmp	r3, #0
 800a466:	d108      	bne.n	800a47a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a46c:	4618      	mov	r0, r3
 800a46e:	f000 ff87 	bl	800b380 <vPortFree>
				vPortFree( pxTCB );
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 ff84 	bl	800b380 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a478:	e018      	b.n	800a4ac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a480:	2b01      	cmp	r3, #1
 800a482:	d103      	bne.n	800a48c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 ff7b 	bl	800b380 <vPortFree>
	}
 800a48a:	e00f      	b.n	800a4ac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a492:	2b02      	cmp	r3, #2
 800a494:	d00a      	beq.n	800a4ac <prvDeleteTCB+0x60>
	__asm volatile
 800a496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49a:	f383 8811 	msr	BASEPRI, r3
 800a49e:	f3bf 8f6f 	isb	sy
 800a4a2:	f3bf 8f4f 	dsb	sy
 800a4a6:	60fb      	str	r3, [r7, #12]
}
 800a4a8:	bf00      	nop
 800a4aa:	e7fe      	b.n	800a4aa <prvDeleteTCB+0x5e>
	}
 800a4ac:	bf00      	nop
 800a4ae:	3710      	adds	r7, #16
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4ba:	4b0c      	ldr	r3, [pc, #48]	; (800a4ec <prvResetNextTaskUnblockTime+0x38>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d104      	bne.n	800a4ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a4c4:	4b0a      	ldr	r3, [pc, #40]	; (800a4f0 <prvResetNextTaskUnblockTime+0x3c>)
 800a4c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a4cc:	e008      	b.n	800a4e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4ce:	4b07      	ldr	r3, [pc, #28]	; (800a4ec <prvResetNextTaskUnblockTime+0x38>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	4a04      	ldr	r2, [pc, #16]	; (800a4f0 <prvResetNextTaskUnblockTime+0x3c>)
 800a4de:	6013      	str	r3, [r2, #0]
}
 800a4e0:	bf00      	nop
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr
 800a4ec:	20000eac 	.word	0x20000eac
 800a4f0:	20000f14 	.word	0x20000f14

0800a4f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a4fa:	4b0b      	ldr	r3, [pc, #44]	; (800a528 <xTaskGetSchedulerState+0x34>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d102      	bne.n	800a508 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a502:	2301      	movs	r3, #1
 800a504:	607b      	str	r3, [r7, #4]
 800a506:	e008      	b.n	800a51a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a508:	4b08      	ldr	r3, [pc, #32]	; (800a52c <xTaskGetSchedulerState+0x38>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d102      	bne.n	800a516 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a510:	2302      	movs	r3, #2
 800a512:	607b      	str	r3, [r7, #4]
 800a514:	e001      	b.n	800a51a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a516:	2300      	movs	r3, #0
 800a518:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a51a:	687b      	ldr	r3, [r7, #4]
	}
 800a51c:	4618      	mov	r0, r3
 800a51e:	370c      	adds	r7, #12
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr
 800a528:	20000f00 	.word	0x20000f00
 800a52c:	20000f1c 	.word	0x20000f1c

0800a530 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a530:	b580      	push	{r7, lr}
 800a532:	b086      	sub	sp, #24
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a53c:	2300      	movs	r3, #0
 800a53e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d056      	beq.n	800a5f4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a546:	4b2e      	ldr	r3, [pc, #184]	; (800a600 <xTaskPriorityDisinherit+0xd0>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	693a      	ldr	r2, [r7, #16]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d00a      	beq.n	800a566 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a554:	f383 8811 	msr	BASEPRI, r3
 800a558:	f3bf 8f6f 	isb	sy
 800a55c:	f3bf 8f4f 	dsb	sy
 800a560:	60fb      	str	r3, [r7, #12]
}
 800a562:	bf00      	nop
 800a564:	e7fe      	b.n	800a564 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d10a      	bne.n	800a584 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a572:	f383 8811 	msr	BASEPRI, r3
 800a576:	f3bf 8f6f 	isb	sy
 800a57a:	f3bf 8f4f 	dsb	sy
 800a57e:	60bb      	str	r3, [r7, #8]
}
 800a580:	bf00      	nop
 800a582:	e7fe      	b.n	800a582 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a588:	1e5a      	subs	r2, r3, #1
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a596:	429a      	cmp	r2, r3
 800a598:	d02c      	beq.n	800a5f4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d128      	bne.n	800a5f4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	3304      	adds	r3, #4
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7fe fc46 	bl	8008e38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5c4:	4b0f      	ldr	r3, [pc, #60]	; (800a604 <xTaskPriorityDisinherit+0xd4>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d903      	bls.n	800a5d4 <xTaskPriorityDisinherit+0xa4>
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d0:	4a0c      	ldr	r2, [pc, #48]	; (800a604 <xTaskPriorityDisinherit+0xd4>)
 800a5d2:	6013      	str	r3, [r2, #0]
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5d8:	4613      	mov	r3, r2
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	4413      	add	r3, r2
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	4a09      	ldr	r2, [pc, #36]	; (800a608 <xTaskPriorityDisinherit+0xd8>)
 800a5e2:	441a      	add	r2, r3
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	3304      	adds	r3, #4
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	4610      	mov	r0, r2
 800a5ec:	f7fe fbc7 	bl	8008d7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a5f4:	697b      	ldr	r3, [r7, #20]
	}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3718      	adds	r7, #24
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop
 800a600:	20000a20 	.word	0x20000a20
 800a604:	20000efc 	.word	0x20000efc
 800a608:	20000a24 	.word	0x20000a24

0800a60c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a616:	4b21      	ldr	r3, [pc, #132]	; (800a69c <prvAddCurrentTaskToDelayedList+0x90>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a61c:	4b20      	ldr	r3, [pc, #128]	; (800a6a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	3304      	adds	r3, #4
 800a622:	4618      	mov	r0, r3
 800a624:	f7fe fc08 	bl	8008e38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a62e:	d10a      	bne.n	800a646 <prvAddCurrentTaskToDelayedList+0x3a>
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d007      	beq.n	800a646 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a636:	4b1a      	ldr	r3, [pc, #104]	; (800a6a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	3304      	adds	r3, #4
 800a63c:	4619      	mov	r1, r3
 800a63e:	4819      	ldr	r0, [pc, #100]	; (800a6a4 <prvAddCurrentTaskToDelayedList+0x98>)
 800a640:	f7fe fb9d 	bl	8008d7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a644:	e026      	b.n	800a694 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a646:	68fa      	ldr	r2, [r7, #12]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	4413      	add	r3, r2
 800a64c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a64e:	4b14      	ldr	r3, [pc, #80]	; (800a6a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	68ba      	ldr	r2, [r7, #8]
 800a654:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a656:	68ba      	ldr	r2, [r7, #8]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d209      	bcs.n	800a672 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a65e:	4b12      	ldr	r3, [pc, #72]	; (800a6a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	4b0f      	ldr	r3, [pc, #60]	; (800a6a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	3304      	adds	r3, #4
 800a668:	4619      	mov	r1, r3
 800a66a:	4610      	mov	r0, r2
 800a66c:	f7fe fbab 	bl	8008dc6 <vListInsert>
}
 800a670:	e010      	b.n	800a694 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a672:	4b0e      	ldr	r3, [pc, #56]	; (800a6ac <prvAddCurrentTaskToDelayedList+0xa0>)
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	4b0a      	ldr	r3, [pc, #40]	; (800a6a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	3304      	adds	r3, #4
 800a67c:	4619      	mov	r1, r3
 800a67e:	4610      	mov	r0, r2
 800a680:	f7fe fba1 	bl	8008dc6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a684:	4b0a      	ldr	r3, [pc, #40]	; (800a6b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	68ba      	ldr	r2, [r7, #8]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d202      	bcs.n	800a694 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a68e:	4a08      	ldr	r2, [pc, #32]	; (800a6b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	6013      	str	r3, [r2, #0]
}
 800a694:	bf00      	nop
 800a696:	3710      	adds	r7, #16
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	20000ef8 	.word	0x20000ef8
 800a6a0:	20000a20 	.word	0x20000a20
 800a6a4:	20000ee0 	.word	0x20000ee0
 800a6a8:	20000eb0 	.word	0x20000eb0
 800a6ac:	20000eac 	.word	0x20000eac
 800a6b0:	20000f14 	.word	0x20000f14

0800a6b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b08a      	sub	sp, #40	; 0x28
 800a6b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a6be:	f000 fb07 	bl	800acd0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a6c2:	4b1c      	ldr	r3, [pc, #112]	; (800a734 <xTimerCreateTimerTask+0x80>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d021      	beq.n	800a70e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a6d2:	1d3a      	adds	r2, r7, #4
 800a6d4:	f107 0108 	add.w	r1, r7, #8
 800a6d8:	f107 030c 	add.w	r3, r7, #12
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f7fe fb07 	bl	8008cf0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a6e2:	6879      	ldr	r1, [r7, #4]
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	68fa      	ldr	r2, [r7, #12]
 800a6e8:	9202      	str	r2, [sp, #8]
 800a6ea:	9301      	str	r3, [sp, #4]
 800a6ec:	2302      	movs	r3, #2
 800a6ee:	9300      	str	r3, [sp, #0]
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	460a      	mov	r2, r1
 800a6f4:	4910      	ldr	r1, [pc, #64]	; (800a738 <xTimerCreateTimerTask+0x84>)
 800a6f6:	4811      	ldr	r0, [pc, #68]	; (800a73c <xTimerCreateTimerTask+0x88>)
 800a6f8:	f7ff f8b4 	bl	8009864 <xTaskCreateStatic>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	4a10      	ldr	r2, [pc, #64]	; (800a740 <xTimerCreateTimerTask+0x8c>)
 800a700:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a702:	4b0f      	ldr	r3, [pc, #60]	; (800a740 <xTimerCreateTimerTask+0x8c>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d001      	beq.n	800a70e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a70a:	2301      	movs	r3, #1
 800a70c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d10a      	bne.n	800a72a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a718:	f383 8811 	msr	BASEPRI, r3
 800a71c:	f3bf 8f6f 	isb	sy
 800a720:	f3bf 8f4f 	dsb	sy
 800a724:	613b      	str	r3, [r7, #16]
}
 800a726:	bf00      	nop
 800a728:	e7fe      	b.n	800a728 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a72a:	697b      	ldr	r3, [r7, #20]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3718      	adds	r7, #24
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}
 800a734:	20000f50 	.word	0x20000f50
 800a738:	0800b77c 	.word	0x0800b77c
 800a73c:	0800a879 	.word	0x0800a879
 800a740:	20000f54 	.word	0x20000f54

0800a744 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b08a      	sub	sp, #40	; 0x28
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	607a      	str	r2, [r7, #4]
 800a750:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a752:	2300      	movs	r3, #0
 800a754:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d10a      	bne.n	800a772 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a760:	f383 8811 	msr	BASEPRI, r3
 800a764:	f3bf 8f6f 	isb	sy
 800a768:	f3bf 8f4f 	dsb	sy
 800a76c:	623b      	str	r3, [r7, #32]
}
 800a76e:	bf00      	nop
 800a770:	e7fe      	b.n	800a770 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a772:	4b1a      	ldr	r3, [pc, #104]	; (800a7dc <xTimerGenericCommand+0x98>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d02a      	beq.n	800a7d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	2b05      	cmp	r3, #5
 800a78a:	dc18      	bgt.n	800a7be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a78c:	f7ff feb2 	bl	800a4f4 <xTaskGetSchedulerState>
 800a790:	4603      	mov	r3, r0
 800a792:	2b02      	cmp	r3, #2
 800a794:	d109      	bne.n	800a7aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a796:	4b11      	ldr	r3, [pc, #68]	; (800a7dc <xTimerGenericCommand+0x98>)
 800a798:	6818      	ldr	r0, [r3, #0]
 800a79a:	f107 0110 	add.w	r1, r7, #16
 800a79e:	2300      	movs	r3, #0
 800a7a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7a2:	f7fe fc77 	bl	8009094 <xQueueGenericSend>
 800a7a6:	6278      	str	r0, [r7, #36]	; 0x24
 800a7a8:	e012      	b.n	800a7d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a7aa:	4b0c      	ldr	r3, [pc, #48]	; (800a7dc <xTimerGenericCommand+0x98>)
 800a7ac:	6818      	ldr	r0, [r3, #0]
 800a7ae:	f107 0110 	add.w	r1, r7, #16
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	f7fe fc6d 	bl	8009094 <xQueueGenericSend>
 800a7ba:	6278      	str	r0, [r7, #36]	; 0x24
 800a7bc:	e008      	b.n	800a7d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a7be:	4b07      	ldr	r3, [pc, #28]	; (800a7dc <xTimerGenericCommand+0x98>)
 800a7c0:	6818      	ldr	r0, [r3, #0]
 800a7c2:	f107 0110 	add.w	r1, r7, #16
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	683a      	ldr	r2, [r7, #0]
 800a7ca:	f7fe fd61 	bl	8009290 <xQueueGenericSendFromISR>
 800a7ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3728      	adds	r7, #40	; 0x28
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	20000f50 	.word	0x20000f50

0800a7e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b088      	sub	sp, #32
 800a7e4:	af02      	add	r7, sp, #8
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7ea:	4b22      	ldr	r3, [pc, #136]	; (800a874 <prvProcessExpiredTimer+0x94>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	68db      	ldr	r3, [r3, #12]
 800a7f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	3304      	adds	r3, #4
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7fe fb1d 	bl	8008e38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a804:	f003 0304 	and.w	r3, r3, #4
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d022      	beq.n	800a852 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	699a      	ldr	r2, [r3, #24]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	18d1      	adds	r1, r2, r3
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	683a      	ldr	r2, [r7, #0]
 800a818:	6978      	ldr	r0, [r7, #20]
 800a81a:	f000 f8d1 	bl	800a9c0 <prvInsertTimerInActiveList>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d01f      	beq.n	800a864 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a824:	2300      	movs	r3, #0
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	2300      	movs	r3, #0
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	2100      	movs	r1, #0
 800a82e:	6978      	ldr	r0, [r7, #20]
 800a830:	f7ff ff88 	bl	800a744 <xTimerGenericCommand>
 800a834:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d113      	bne.n	800a864 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a840:	f383 8811 	msr	BASEPRI, r3
 800a844:	f3bf 8f6f 	isb	sy
 800a848:	f3bf 8f4f 	dsb	sy
 800a84c:	60fb      	str	r3, [r7, #12]
}
 800a84e:	bf00      	nop
 800a850:	e7fe      	b.n	800a850 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a858:	f023 0301 	bic.w	r3, r3, #1
 800a85c:	b2da      	uxtb	r2, r3
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	6a1b      	ldr	r3, [r3, #32]
 800a868:	6978      	ldr	r0, [r7, #20]
 800a86a:	4798      	blx	r3
}
 800a86c:	bf00      	nop
 800a86e:	3718      	adds	r7, #24
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	20000f48 	.word	0x20000f48

0800a878 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a880:	f107 0308 	add.w	r3, r7, #8
 800a884:	4618      	mov	r0, r3
 800a886:	f000 f857 	bl	800a938 <prvGetNextExpireTime>
 800a88a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	4619      	mov	r1, r3
 800a890:	68f8      	ldr	r0, [r7, #12]
 800a892:	f000 f803 	bl	800a89c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a896:	f000 f8d5 	bl	800aa44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a89a:	e7f1      	b.n	800a880 <prvTimerTask+0x8>

0800a89c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a8a6:	f7ff fa39 	bl	8009d1c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a8aa:	f107 0308 	add.w	r3, r7, #8
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f000 f866 	bl	800a980 <prvSampleTimeNow>
 800a8b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d130      	bne.n	800a91e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d10a      	bne.n	800a8d8 <prvProcessTimerOrBlockTask+0x3c>
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d806      	bhi.n	800a8d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a8ca:	f7ff fa35 	bl	8009d38 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a8ce:	68f9      	ldr	r1, [r7, #12]
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f7ff ff85 	bl	800a7e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a8d6:	e024      	b.n	800a922 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d008      	beq.n	800a8f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a8de:	4b13      	ldr	r3, [pc, #76]	; (800a92c <prvProcessTimerOrBlockTask+0x90>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d101      	bne.n	800a8ec <prvProcessTimerOrBlockTask+0x50>
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e000      	b.n	800a8ee <prvProcessTimerOrBlockTask+0x52>
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a8f0:	4b0f      	ldr	r3, [pc, #60]	; (800a930 <prvProcessTimerOrBlockTask+0x94>)
 800a8f2:	6818      	ldr	r0, [r3, #0]
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	1ad3      	subs	r3, r2, r3
 800a8fa:	683a      	ldr	r2, [r7, #0]
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	f7fe ff7d 	bl	80097fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a902:	f7ff fa19 	bl	8009d38 <xTaskResumeAll>
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d10a      	bne.n	800a922 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a90c:	4b09      	ldr	r3, [pc, #36]	; (800a934 <prvProcessTimerOrBlockTask+0x98>)
 800a90e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a912:	601a      	str	r2, [r3, #0]
 800a914:	f3bf 8f4f 	dsb	sy
 800a918:	f3bf 8f6f 	isb	sy
}
 800a91c:	e001      	b.n	800a922 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a91e:	f7ff fa0b 	bl	8009d38 <xTaskResumeAll>
}
 800a922:	bf00      	nop
 800a924:	3710      	adds	r7, #16
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	bf00      	nop
 800a92c:	20000f4c 	.word	0x20000f4c
 800a930:	20000f50 	.word	0x20000f50
 800a934:	e000ed04 	.word	0xe000ed04

0800a938 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a940:	4b0e      	ldr	r3, [pc, #56]	; (800a97c <prvGetNextExpireTime+0x44>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d101      	bne.n	800a94e <prvGetNextExpireTime+0x16>
 800a94a:	2201      	movs	r2, #1
 800a94c:	e000      	b.n	800a950 <prvGetNextExpireTime+0x18>
 800a94e:	2200      	movs	r2, #0
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d105      	bne.n	800a968 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a95c:	4b07      	ldr	r3, [pc, #28]	; (800a97c <prvGetNextExpireTime+0x44>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	68db      	ldr	r3, [r3, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	60fb      	str	r3, [r7, #12]
 800a966:	e001      	b.n	800a96c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a968:	2300      	movs	r3, #0
 800a96a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a96c:	68fb      	ldr	r3, [r7, #12]
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3714      	adds	r7, #20
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr
 800a97a:	bf00      	nop
 800a97c:	20000f48 	.word	0x20000f48

0800a980 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a988:	f7ff fa74 	bl	8009e74 <xTaskGetTickCount>
 800a98c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a98e:	4b0b      	ldr	r3, [pc, #44]	; (800a9bc <prvSampleTimeNow+0x3c>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	68fa      	ldr	r2, [r7, #12]
 800a994:	429a      	cmp	r2, r3
 800a996:	d205      	bcs.n	800a9a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a998:	f000 f936 	bl	800ac08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	601a      	str	r2, [r3, #0]
 800a9a2:	e002      	b.n	800a9aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a9aa:	4a04      	ldr	r2, [pc, #16]	; (800a9bc <prvSampleTimeNow+0x3c>)
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3710      	adds	r7, #16
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	20000f58 	.word	0x20000f58

0800a9c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b086      	sub	sp, #24
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	607a      	str	r2, [r7, #4]
 800a9cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	68ba      	ldr	r2, [r7, #8]
 800a9d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	68fa      	ldr	r2, [r7, #12]
 800a9dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a9de:	68ba      	ldr	r2, [r7, #8]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d812      	bhi.n	800aa0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	1ad2      	subs	r2, r2, r3
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	699b      	ldr	r3, [r3, #24]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d302      	bcc.n	800a9fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	617b      	str	r3, [r7, #20]
 800a9f8:	e01b      	b.n	800aa32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a9fa:	4b10      	ldr	r3, [pc, #64]	; (800aa3c <prvInsertTimerInActiveList+0x7c>)
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	3304      	adds	r3, #4
 800aa02:	4619      	mov	r1, r3
 800aa04:	4610      	mov	r0, r2
 800aa06:	f7fe f9de 	bl	8008dc6 <vListInsert>
 800aa0a:	e012      	b.n	800aa32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d206      	bcs.n	800aa22 <prvInsertTimerInActiveList+0x62>
 800aa14:	68ba      	ldr	r2, [r7, #8]
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d302      	bcc.n	800aa22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	617b      	str	r3, [r7, #20]
 800aa20:	e007      	b.n	800aa32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa22:	4b07      	ldr	r3, [pc, #28]	; (800aa40 <prvInsertTimerInActiveList+0x80>)
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	3304      	adds	r3, #4
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	4610      	mov	r0, r2
 800aa2e:	f7fe f9ca 	bl	8008dc6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aa32:	697b      	ldr	r3, [r7, #20]
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3718      	adds	r7, #24
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	20000f4c 	.word	0x20000f4c
 800aa40:	20000f48 	.word	0x20000f48

0800aa44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b08e      	sub	sp, #56	; 0x38
 800aa48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa4a:	e0ca      	b.n	800abe2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	da18      	bge.n	800aa84 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800aa52:	1d3b      	adds	r3, r7, #4
 800aa54:	3304      	adds	r3, #4
 800aa56:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800aa58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d10a      	bne.n	800aa74 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800aa5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa62:	f383 8811 	msr	BASEPRI, r3
 800aa66:	f3bf 8f6f 	isb	sy
 800aa6a:	f3bf 8f4f 	dsb	sy
 800aa6e:	61fb      	str	r3, [r7, #28]
}
 800aa70:	bf00      	nop
 800aa72:	e7fe      	b.n	800aa72 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aa74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa7a:	6850      	ldr	r0, [r2, #4]
 800aa7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa7e:	6892      	ldr	r2, [r2, #8]
 800aa80:	4611      	mov	r1, r2
 800aa82:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	f2c0 80aa 	blt.w	800abe0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aa90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa92:	695b      	ldr	r3, [r3, #20]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d004      	beq.n	800aaa2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9a:	3304      	adds	r3, #4
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7fe f9cb 	bl	8008e38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aaa2:	463b      	mov	r3, r7
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f7ff ff6b 	bl	800a980 <prvSampleTimeNow>
 800aaaa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2b09      	cmp	r3, #9
 800aab0:	f200 8097 	bhi.w	800abe2 <prvProcessReceivedCommands+0x19e>
 800aab4:	a201      	add	r2, pc, #4	; (adr r2, 800aabc <prvProcessReceivedCommands+0x78>)
 800aab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaba:	bf00      	nop
 800aabc:	0800aae5 	.word	0x0800aae5
 800aac0:	0800aae5 	.word	0x0800aae5
 800aac4:	0800aae5 	.word	0x0800aae5
 800aac8:	0800ab59 	.word	0x0800ab59
 800aacc:	0800ab6d 	.word	0x0800ab6d
 800aad0:	0800abb7 	.word	0x0800abb7
 800aad4:	0800aae5 	.word	0x0800aae5
 800aad8:	0800aae5 	.word	0x0800aae5
 800aadc:	0800ab59 	.word	0x0800ab59
 800aae0:	0800ab6d 	.word	0x0800ab6d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aaea:	f043 0301 	orr.w	r3, r3, #1
 800aaee:	b2da      	uxtb	r2, r3
 800aaf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aaf6:	68ba      	ldr	r2, [r7, #8]
 800aaf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafa:	699b      	ldr	r3, [r3, #24]
 800aafc:	18d1      	adds	r1, r2, r3
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab04:	f7ff ff5c 	bl	800a9c0 <prvInsertTimerInActiveList>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d069      	beq.n	800abe2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab10:	6a1b      	ldr	r3, [r3, #32]
 800ab12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab14:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab1c:	f003 0304 	and.w	r3, r3, #4
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d05e      	beq.n	800abe2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ab24:	68ba      	ldr	r2, [r7, #8]
 800ab26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab28:	699b      	ldr	r3, [r3, #24]
 800ab2a:	441a      	add	r2, r3
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	9300      	str	r3, [sp, #0]
 800ab30:	2300      	movs	r3, #0
 800ab32:	2100      	movs	r1, #0
 800ab34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab36:	f7ff fe05 	bl	800a744 <xTimerGenericCommand>
 800ab3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ab3c:	6a3b      	ldr	r3, [r7, #32]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d14f      	bne.n	800abe2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ab42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab46:	f383 8811 	msr	BASEPRI, r3
 800ab4a:	f3bf 8f6f 	isb	sy
 800ab4e:	f3bf 8f4f 	dsb	sy
 800ab52:	61bb      	str	r3, [r7, #24]
}
 800ab54:	bf00      	nop
 800ab56:	e7fe      	b.n	800ab56 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab5e:	f023 0301 	bic.w	r3, r3, #1
 800ab62:	b2da      	uxtb	r2, r3
 800ab64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ab6a:	e03a      	b.n	800abe2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ab6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab72:	f043 0301 	orr.w	r3, r3, #1
 800ab76:	b2da      	uxtb	r2, r3
 800ab78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ab7e:	68ba      	ldr	r2, [r7, #8]
 800ab80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab82:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ab84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab86:	699b      	ldr	r3, [r3, #24]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d10a      	bne.n	800aba2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ab8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab90:	f383 8811 	msr	BASEPRI, r3
 800ab94:	f3bf 8f6f 	isb	sy
 800ab98:	f3bf 8f4f 	dsb	sy
 800ab9c:	617b      	str	r3, [r7, #20]
}
 800ab9e:	bf00      	nop
 800aba0:	e7fe      	b.n	800aba0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba4:	699a      	ldr	r2, [r3, #24]
 800aba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba8:	18d1      	adds	r1, r2, r3
 800abaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abb0:	f7ff ff06 	bl	800a9c0 <prvInsertTimerInActiveList>
					break;
 800abb4:	e015      	b.n	800abe2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800abb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abbc:	f003 0302 	and.w	r3, r3, #2
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d103      	bne.n	800abcc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800abc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abc6:	f000 fbdb 	bl	800b380 <vPortFree>
 800abca:	e00a      	b.n	800abe2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800abcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abd2:	f023 0301 	bic.w	r3, r3, #1
 800abd6:	b2da      	uxtb	r2, r3
 800abd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800abde:	e000      	b.n	800abe2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800abe0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800abe2:	4b08      	ldr	r3, [pc, #32]	; (800ac04 <prvProcessReceivedCommands+0x1c0>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	1d39      	adds	r1, r7, #4
 800abe8:	2200      	movs	r2, #0
 800abea:	4618      	mov	r0, r3
 800abec:	f7fe fbec 	bl	80093c8 <xQueueReceive>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	f47f af2a 	bne.w	800aa4c <prvProcessReceivedCommands+0x8>
	}
}
 800abf8:	bf00      	nop
 800abfa:	bf00      	nop
 800abfc:	3730      	adds	r7, #48	; 0x30
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	20000f50 	.word	0x20000f50

0800ac08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b088      	sub	sp, #32
 800ac0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ac0e:	e048      	b.n	800aca2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ac10:	4b2d      	ldr	r3, [pc, #180]	; (800acc8 <prvSwitchTimerLists+0xc0>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	68db      	ldr	r3, [r3, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac1a:	4b2b      	ldr	r3, [pc, #172]	; (800acc8 <prvSwitchTimerLists+0xc0>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	68db      	ldr	r3, [r3, #12]
 800ac22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	3304      	adds	r3, #4
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7fe f905 	bl	8008e38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	6a1b      	ldr	r3, [r3, #32]
 800ac32:	68f8      	ldr	r0, [r7, #12]
 800ac34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac3c:	f003 0304 	and.w	r3, r3, #4
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d02e      	beq.n	800aca2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	699b      	ldr	r3, [r3, #24]
 800ac48:	693a      	ldr	r2, [r7, #16]
 800ac4a:	4413      	add	r3, r2
 800ac4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ac4e:	68ba      	ldr	r2, [r7, #8]
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d90e      	bls.n	800ac74 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	68ba      	ldr	r2, [r7, #8]
 800ac5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	68fa      	ldr	r2, [r7, #12]
 800ac60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ac62:	4b19      	ldr	r3, [pc, #100]	; (800acc8 <prvSwitchTimerLists+0xc0>)
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	3304      	adds	r3, #4
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	4610      	mov	r0, r2
 800ac6e:	f7fe f8aa 	bl	8008dc6 <vListInsert>
 800ac72:	e016      	b.n	800aca2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac74:	2300      	movs	r3, #0
 800ac76:	9300      	str	r3, [sp, #0]
 800ac78:	2300      	movs	r3, #0
 800ac7a:	693a      	ldr	r2, [r7, #16]
 800ac7c:	2100      	movs	r1, #0
 800ac7e:	68f8      	ldr	r0, [r7, #12]
 800ac80:	f7ff fd60 	bl	800a744 <xTimerGenericCommand>
 800ac84:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d10a      	bne.n	800aca2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ac8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac90:	f383 8811 	msr	BASEPRI, r3
 800ac94:	f3bf 8f6f 	isb	sy
 800ac98:	f3bf 8f4f 	dsb	sy
 800ac9c:	603b      	str	r3, [r7, #0]
}
 800ac9e:	bf00      	nop
 800aca0:	e7fe      	b.n	800aca0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aca2:	4b09      	ldr	r3, [pc, #36]	; (800acc8 <prvSwitchTimerLists+0xc0>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d1b1      	bne.n	800ac10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800acac:	4b06      	ldr	r3, [pc, #24]	; (800acc8 <prvSwitchTimerLists+0xc0>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800acb2:	4b06      	ldr	r3, [pc, #24]	; (800accc <prvSwitchTimerLists+0xc4>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4a04      	ldr	r2, [pc, #16]	; (800acc8 <prvSwitchTimerLists+0xc0>)
 800acb8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800acba:	4a04      	ldr	r2, [pc, #16]	; (800accc <prvSwitchTimerLists+0xc4>)
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	6013      	str	r3, [r2, #0]
}
 800acc0:	bf00      	nop
 800acc2:	3718      	adds	r7, #24
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	20000f48 	.word	0x20000f48
 800accc:	20000f4c 	.word	0x20000f4c

0800acd0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800acd6:	f000 f965 	bl	800afa4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800acda:	4b15      	ldr	r3, [pc, #84]	; (800ad30 <prvCheckForValidListAndQueue+0x60>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d120      	bne.n	800ad24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ace2:	4814      	ldr	r0, [pc, #80]	; (800ad34 <prvCheckForValidListAndQueue+0x64>)
 800ace4:	f7fe f81e 	bl	8008d24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ace8:	4813      	ldr	r0, [pc, #76]	; (800ad38 <prvCheckForValidListAndQueue+0x68>)
 800acea:	f7fe f81b 	bl	8008d24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800acee:	4b13      	ldr	r3, [pc, #76]	; (800ad3c <prvCheckForValidListAndQueue+0x6c>)
 800acf0:	4a10      	ldr	r2, [pc, #64]	; (800ad34 <prvCheckForValidListAndQueue+0x64>)
 800acf2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800acf4:	4b12      	ldr	r3, [pc, #72]	; (800ad40 <prvCheckForValidListAndQueue+0x70>)
 800acf6:	4a10      	ldr	r2, [pc, #64]	; (800ad38 <prvCheckForValidListAndQueue+0x68>)
 800acf8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800acfa:	2300      	movs	r3, #0
 800acfc:	9300      	str	r3, [sp, #0]
 800acfe:	4b11      	ldr	r3, [pc, #68]	; (800ad44 <prvCheckForValidListAndQueue+0x74>)
 800ad00:	4a11      	ldr	r2, [pc, #68]	; (800ad48 <prvCheckForValidListAndQueue+0x78>)
 800ad02:	2110      	movs	r1, #16
 800ad04:	200a      	movs	r0, #10
 800ad06:	f7fe f929 	bl	8008f5c <xQueueGenericCreateStatic>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	4a08      	ldr	r2, [pc, #32]	; (800ad30 <prvCheckForValidListAndQueue+0x60>)
 800ad0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ad10:	4b07      	ldr	r3, [pc, #28]	; (800ad30 <prvCheckForValidListAndQueue+0x60>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d005      	beq.n	800ad24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ad18:	4b05      	ldr	r3, [pc, #20]	; (800ad30 <prvCheckForValidListAndQueue+0x60>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	490b      	ldr	r1, [pc, #44]	; (800ad4c <prvCheckForValidListAndQueue+0x7c>)
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7fe fd42 	bl	80097a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ad24:	f000 f96e 	bl	800b004 <vPortExitCritical>
}
 800ad28:	bf00      	nop
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	20000f50 	.word	0x20000f50
 800ad34:	20000f20 	.word	0x20000f20
 800ad38:	20000f34 	.word	0x20000f34
 800ad3c:	20000f48 	.word	0x20000f48
 800ad40:	20000f4c 	.word	0x20000f4c
 800ad44:	20000ffc 	.word	0x20000ffc
 800ad48:	20000f5c 	.word	0x20000f5c
 800ad4c:	0800b784 	.word	0x0800b784

0800ad50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ad50:	b480      	push	{r7}
 800ad52:	b085      	sub	sp, #20
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	3b04      	subs	r3, #4
 800ad60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ad68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	3b04      	subs	r3, #4
 800ad6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	f023 0201 	bic.w	r2, r3, #1
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	3b04      	subs	r3, #4
 800ad7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ad80:	4a0c      	ldr	r2, [pc, #48]	; (800adb4 <pxPortInitialiseStack+0x64>)
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	3b14      	subs	r3, #20
 800ad8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	3b04      	subs	r3, #4
 800ad96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f06f 0202 	mvn.w	r2, #2
 800ad9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	3b20      	subs	r3, #32
 800ada4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ada6:	68fb      	ldr	r3, [r7, #12]
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3714      	adds	r7, #20
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr
 800adb4:	0800adb9 	.word	0x0800adb9

0800adb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800adb8:	b480      	push	{r7}
 800adba:	b085      	sub	sp, #20
 800adbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800adbe:	2300      	movs	r3, #0
 800adc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800adc2:	4b12      	ldr	r3, [pc, #72]	; (800ae0c <prvTaskExitError+0x54>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adca:	d00a      	beq.n	800ade2 <prvTaskExitError+0x2a>
	__asm volatile
 800adcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add0:	f383 8811 	msr	BASEPRI, r3
 800add4:	f3bf 8f6f 	isb	sy
 800add8:	f3bf 8f4f 	dsb	sy
 800addc:	60fb      	str	r3, [r7, #12]
}
 800adde:	bf00      	nop
 800ade0:	e7fe      	b.n	800ade0 <prvTaskExitError+0x28>
	__asm volatile
 800ade2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade6:	f383 8811 	msr	BASEPRI, r3
 800adea:	f3bf 8f6f 	isb	sy
 800adee:	f3bf 8f4f 	dsb	sy
 800adf2:	60bb      	str	r3, [r7, #8]
}
 800adf4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800adf6:	bf00      	nop
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d0fc      	beq.n	800adf8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800adfe:	bf00      	nop
 800ae00:	bf00      	nop
 800ae02:	3714      	adds	r7, #20
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr
 800ae0c:	20000070 	.word	0x20000070

0800ae10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ae10:	4b07      	ldr	r3, [pc, #28]	; (800ae30 <pxCurrentTCBConst2>)
 800ae12:	6819      	ldr	r1, [r3, #0]
 800ae14:	6808      	ldr	r0, [r1, #0]
 800ae16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae1a:	f380 8809 	msr	PSP, r0
 800ae1e:	f3bf 8f6f 	isb	sy
 800ae22:	f04f 0000 	mov.w	r0, #0
 800ae26:	f380 8811 	msr	BASEPRI, r0
 800ae2a:	4770      	bx	lr
 800ae2c:	f3af 8000 	nop.w

0800ae30 <pxCurrentTCBConst2>:
 800ae30:	20000a20 	.word	0x20000a20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ae34:	bf00      	nop
 800ae36:	bf00      	nop

0800ae38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ae38:	4808      	ldr	r0, [pc, #32]	; (800ae5c <prvPortStartFirstTask+0x24>)
 800ae3a:	6800      	ldr	r0, [r0, #0]
 800ae3c:	6800      	ldr	r0, [r0, #0]
 800ae3e:	f380 8808 	msr	MSP, r0
 800ae42:	f04f 0000 	mov.w	r0, #0
 800ae46:	f380 8814 	msr	CONTROL, r0
 800ae4a:	b662      	cpsie	i
 800ae4c:	b661      	cpsie	f
 800ae4e:	f3bf 8f4f 	dsb	sy
 800ae52:	f3bf 8f6f 	isb	sy
 800ae56:	df00      	svc	0
 800ae58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ae5a:	bf00      	nop
 800ae5c:	e000ed08 	.word	0xe000ed08

0800ae60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b086      	sub	sp, #24
 800ae64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ae66:	4b46      	ldr	r3, [pc, #280]	; (800af80 <xPortStartScheduler+0x120>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4a46      	ldr	r2, [pc, #280]	; (800af84 <xPortStartScheduler+0x124>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d10a      	bne.n	800ae86 <xPortStartScheduler+0x26>
	__asm volatile
 800ae70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae74:	f383 8811 	msr	BASEPRI, r3
 800ae78:	f3bf 8f6f 	isb	sy
 800ae7c:	f3bf 8f4f 	dsb	sy
 800ae80:	613b      	str	r3, [r7, #16]
}
 800ae82:	bf00      	nop
 800ae84:	e7fe      	b.n	800ae84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ae86:	4b3e      	ldr	r3, [pc, #248]	; (800af80 <xPortStartScheduler+0x120>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4a3f      	ldr	r2, [pc, #252]	; (800af88 <xPortStartScheduler+0x128>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d10a      	bne.n	800aea6 <xPortStartScheduler+0x46>
	__asm volatile
 800ae90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae94:	f383 8811 	msr	BASEPRI, r3
 800ae98:	f3bf 8f6f 	isb	sy
 800ae9c:	f3bf 8f4f 	dsb	sy
 800aea0:	60fb      	str	r3, [r7, #12]
}
 800aea2:	bf00      	nop
 800aea4:	e7fe      	b.n	800aea4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aea6:	4b39      	ldr	r3, [pc, #228]	; (800af8c <xPortStartScheduler+0x12c>)
 800aea8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	22ff      	movs	r2, #255	; 0xff
 800aeb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aec0:	78fb      	ldrb	r3, [r7, #3]
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aec8:	b2da      	uxtb	r2, r3
 800aeca:	4b31      	ldr	r3, [pc, #196]	; (800af90 <xPortStartScheduler+0x130>)
 800aecc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aece:	4b31      	ldr	r3, [pc, #196]	; (800af94 <xPortStartScheduler+0x134>)
 800aed0:	2207      	movs	r2, #7
 800aed2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aed4:	e009      	b.n	800aeea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800aed6:	4b2f      	ldr	r3, [pc, #188]	; (800af94 <xPortStartScheduler+0x134>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	3b01      	subs	r3, #1
 800aedc:	4a2d      	ldr	r2, [pc, #180]	; (800af94 <xPortStartScheduler+0x134>)
 800aede:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aee0:	78fb      	ldrb	r3, [r7, #3]
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	005b      	lsls	r3, r3, #1
 800aee6:	b2db      	uxtb	r3, r3
 800aee8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aeea:	78fb      	ldrb	r3, [r7, #3]
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aef2:	2b80      	cmp	r3, #128	; 0x80
 800aef4:	d0ef      	beq.n	800aed6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aef6:	4b27      	ldr	r3, [pc, #156]	; (800af94 <xPortStartScheduler+0x134>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f1c3 0307 	rsb	r3, r3, #7
 800aefe:	2b04      	cmp	r3, #4
 800af00:	d00a      	beq.n	800af18 <xPortStartScheduler+0xb8>
	__asm volatile
 800af02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af06:	f383 8811 	msr	BASEPRI, r3
 800af0a:	f3bf 8f6f 	isb	sy
 800af0e:	f3bf 8f4f 	dsb	sy
 800af12:	60bb      	str	r3, [r7, #8]
}
 800af14:	bf00      	nop
 800af16:	e7fe      	b.n	800af16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800af18:	4b1e      	ldr	r3, [pc, #120]	; (800af94 <xPortStartScheduler+0x134>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	021b      	lsls	r3, r3, #8
 800af1e:	4a1d      	ldr	r2, [pc, #116]	; (800af94 <xPortStartScheduler+0x134>)
 800af20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800af22:	4b1c      	ldr	r3, [pc, #112]	; (800af94 <xPortStartScheduler+0x134>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800af2a:	4a1a      	ldr	r2, [pc, #104]	; (800af94 <xPortStartScheduler+0x134>)
 800af2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	b2da      	uxtb	r2, r3
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800af36:	4b18      	ldr	r3, [pc, #96]	; (800af98 <xPortStartScheduler+0x138>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a17      	ldr	r2, [pc, #92]	; (800af98 <xPortStartScheduler+0x138>)
 800af3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800af40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800af42:	4b15      	ldr	r3, [pc, #84]	; (800af98 <xPortStartScheduler+0x138>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a14      	ldr	r2, [pc, #80]	; (800af98 <xPortStartScheduler+0x138>)
 800af48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800af4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800af4e:	f000 f8dd 	bl	800b10c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800af52:	4b12      	ldr	r3, [pc, #72]	; (800af9c <xPortStartScheduler+0x13c>)
 800af54:	2200      	movs	r2, #0
 800af56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800af58:	f000 f8fc 	bl	800b154 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800af5c:	4b10      	ldr	r3, [pc, #64]	; (800afa0 <xPortStartScheduler+0x140>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4a0f      	ldr	r2, [pc, #60]	; (800afa0 <xPortStartScheduler+0x140>)
 800af62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800af66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800af68:	f7ff ff66 	bl	800ae38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800af6c:	f7ff f84c 	bl	800a008 <vTaskSwitchContext>
	prvTaskExitError();
 800af70:	f7ff ff22 	bl	800adb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800af74:	2300      	movs	r3, #0
}
 800af76:	4618      	mov	r0, r3
 800af78:	3718      	adds	r7, #24
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	e000ed00 	.word	0xe000ed00
 800af84:	410fc271 	.word	0x410fc271
 800af88:	410fc270 	.word	0x410fc270
 800af8c:	e000e400 	.word	0xe000e400
 800af90:	2000104c 	.word	0x2000104c
 800af94:	20001050 	.word	0x20001050
 800af98:	e000ed20 	.word	0xe000ed20
 800af9c:	20000070 	.word	0x20000070
 800afa0:	e000ef34 	.word	0xe000ef34

0800afa4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
	__asm volatile
 800afaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afae:	f383 8811 	msr	BASEPRI, r3
 800afb2:	f3bf 8f6f 	isb	sy
 800afb6:	f3bf 8f4f 	dsb	sy
 800afba:	607b      	str	r3, [r7, #4]
}
 800afbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800afbe:	4b0f      	ldr	r3, [pc, #60]	; (800affc <vPortEnterCritical+0x58>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	3301      	adds	r3, #1
 800afc4:	4a0d      	ldr	r2, [pc, #52]	; (800affc <vPortEnterCritical+0x58>)
 800afc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800afc8:	4b0c      	ldr	r3, [pc, #48]	; (800affc <vPortEnterCritical+0x58>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d10f      	bne.n	800aff0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800afd0:	4b0b      	ldr	r3, [pc, #44]	; (800b000 <vPortEnterCritical+0x5c>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	b2db      	uxtb	r3, r3
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d00a      	beq.n	800aff0 <vPortEnterCritical+0x4c>
	__asm volatile
 800afda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afde:	f383 8811 	msr	BASEPRI, r3
 800afe2:	f3bf 8f6f 	isb	sy
 800afe6:	f3bf 8f4f 	dsb	sy
 800afea:	603b      	str	r3, [r7, #0]
}
 800afec:	bf00      	nop
 800afee:	e7fe      	b.n	800afee <vPortEnterCritical+0x4a>
	}
}
 800aff0:	bf00      	nop
 800aff2:	370c      	adds	r7, #12
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr
 800affc:	20000070 	.word	0x20000070
 800b000:	e000ed04 	.word	0xe000ed04

0800b004 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b00a:	4b12      	ldr	r3, [pc, #72]	; (800b054 <vPortExitCritical+0x50>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d10a      	bne.n	800b028 <vPortExitCritical+0x24>
	__asm volatile
 800b012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b016:	f383 8811 	msr	BASEPRI, r3
 800b01a:	f3bf 8f6f 	isb	sy
 800b01e:	f3bf 8f4f 	dsb	sy
 800b022:	607b      	str	r3, [r7, #4]
}
 800b024:	bf00      	nop
 800b026:	e7fe      	b.n	800b026 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b028:	4b0a      	ldr	r3, [pc, #40]	; (800b054 <vPortExitCritical+0x50>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	3b01      	subs	r3, #1
 800b02e:	4a09      	ldr	r2, [pc, #36]	; (800b054 <vPortExitCritical+0x50>)
 800b030:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b032:	4b08      	ldr	r3, [pc, #32]	; (800b054 <vPortExitCritical+0x50>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d105      	bne.n	800b046 <vPortExitCritical+0x42>
 800b03a:	2300      	movs	r3, #0
 800b03c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	f383 8811 	msr	BASEPRI, r3
}
 800b044:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b046:	bf00      	nop
 800b048:	370c      	adds	r7, #12
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr
 800b052:	bf00      	nop
 800b054:	20000070 	.word	0x20000070
	...

0800b060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b060:	f3ef 8009 	mrs	r0, PSP
 800b064:	f3bf 8f6f 	isb	sy
 800b068:	4b15      	ldr	r3, [pc, #84]	; (800b0c0 <pxCurrentTCBConst>)
 800b06a:	681a      	ldr	r2, [r3, #0]
 800b06c:	f01e 0f10 	tst.w	lr, #16
 800b070:	bf08      	it	eq
 800b072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b07a:	6010      	str	r0, [r2, #0]
 800b07c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b080:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b084:	f380 8811 	msr	BASEPRI, r0
 800b088:	f3bf 8f4f 	dsb	sy
 800b08c:	f3bf 8f6f 	isb	sy
 800b090:	f7fe ffba 	bl	800a008 <vTaskSwitchContext>
 800b094:	f04f 0000 	mov.w	r0, #0
 800b098:	f380 8811 	msr	BASEPRI, r0
 800b09c:	bc09      	pop	{r0, r3}
 800b09e:	6819      	ldr	r1, [r3, #0]
 800b0a0:	6808      	ldr	r0, [r1, #0]
 800b0a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a6:	f01e 0f10 	tst.w	lr, #16
 800b0aa:	bf08      	it	eq
 800b0ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b0b0:	f380 8809 	msr	PSP, r0
 800b0b4:	f3bf 8f6f 	isb	sy
 800b0b8:	4770      	bx	lr
 800b0ba:	bf00      	nop
 800b0bc:	f3af 8000 	nop.w

0800b0c0 <pxCurrentTCBConst>:
 800b0c0:	20000a20 	.word	0x20000a20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b0c4:	bf00      	nop
 800b0c6:	bf00      	nop

0800b0c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
	__asm volatile
 800b0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d2:	f383 8811 	msr	BASEPRI, r3
 800b0d6:	f3bf 8f6f 	isb	sy
 800b0da:	f3bf 8f4f 	dsb	sy
 800b0de:	607b      	str	r3, [r7, #4]
}
 800b0e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b0e2:	f7fe fed7 	bl	8009e94 <xTaskIncrementTick>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d003      	beq.n	800b0f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b0ec:	4b06      	ldr	r3, [pc, #24]	; (800b108 <xPortSysTickHandler+0x40>)
 800b0ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0f2:	601a      	str	r2, [r3, #0]
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	f383 8811 	msr	BASEPRI, r3
}
 800b0fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b100:	bf00      	nop
 800b102:	3708      	adds	r7, #8
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}
 800b108:	e000ed04 	.word	0xe000ed04

0800b10c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b10c:	b480      	push	{r7}
 800b10e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b110:	4b0b      	ldr	r3, [pc, #44]	; (800b140 <vPortSetupTimerInterrupt+0x34>)
 800b112:	2200      	movs	r2, #0
 800b114:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b116:	4b0b      	ldr	r3, [pc, #44]	; (800b144 <vPortSetupTimerInterrupt+0x38>)
 800b118:	2200      	movs	r2, #0
 800b11a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b11c:	4b0a      	ldr	r3, [pc, #40]	; (800b148 <vPortSetupTimerInterrupt+0x3c>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4a0a      	ldr	r2, [pc, #40]	; (800b14c <vPortSetupTimerInterrupt+0x40>)
 800b122:	fba2 2303 	umull	r2, r3, r2, r3
 800b126:	099b      	lsrs	r3, r3, #6
 800b128:	4a09      	ldr	r2, [pc, #36]	; (800b150 <vPortSetupTimerInterrupt+0x44>)
 800b12a:	3b01      	subs	r3, #1
 800b12c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b12e:	4b04      	ldr	r3, [pc, #16]	; (800b140 <vPortSetupTimerInterrupt+0x34>)
 800b130:	2207      	movs	r2, #7
 800b132:	601a      	str	r2, [r3, #0]
}
 800b134:	bf00      	nop
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr
 800b13e:	bf00      	nop
 800b140:	e000e010 	.word	0xe000e010
 800b144:	e000e018 	.word	0xe000e018
 800b148:	20000000 	.word	0x20000000
 800b14c:	10624dd3 	.word	0x10624dd3
 800b150:	e000e014 	.word	0xe000e014

0800b154 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b154:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b164 <vPortEnableVFP+0x10>
 800b158:	6801      	ldr	r1, [r0, #0]
 800b15a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b15e:	6001      	str	r1, [r0, #0]
 800b160:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b162:	bf00      	nop
 800b164:	e000ed88 	.word	0xe000ed88

0800b168 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b168:	b480      	push	{r7}
 800b16a:	b085      	sub	sp, #20
 800b16c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b16e:	f3ef 8305 	mrs	r3, IPSR
 800b172:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2b0f      	cmp	r3, #15
 800b178:	d914      	bls.n	800b1a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b17a:	4a17      	ldr	r2, [pc, #92]	; (800b1d8 <vPortValidateInterruptPriority+0x70>)
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	4413      	add	r3, r2
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b184:	4b15      	ldr	r3, [pc, #84]	; (800b1dc <vPortValidateInterruptPriority+0x74>)
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	7afa      	ldrb	r2, [r7, #11]
 800b18a:	429a      	cmp	r2, r3
 800b18c:	d20a      	bcs.n	800b1a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b192:	f383 8811 	msr	BASEPRI, r3
 800b196:	f3bf 8f6f 	isb	sy
 800b19a:	f3bf 8f4f 	dsb	sy
 800b19e:	607b      	str	r3, [r7, #4]
}
 800b1a0:	bf00      	nop
 800b1a2:	e7fe      	b.n	800b1a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b1a4:	4b0e      	ldr	r3, [pc, #56]	; (800b1e0 <vPortValidateInterruptPriority+0x78>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b1ac:	4b0d      	ldr	r3, [pc, #52]	; (800b1e4 <vPortValidateInterruptPriority+0x7c>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d90a      	bls.n	800b1ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b8:	f383 8811 	msr	BASEPRI, r3
 800b1bc:	f3bf 8f6f 	isb	sy
 800b1c0:	f3bf 8f4f 	dsb	sy
 800b1c4:	603b      	str	r3, [r7, #0]
}
 800b1c6:	bf00      	nop
 800b1c8:	e7fe      	b.n	800b1c8 <vPortValidateInterruptPriority+0x60>
	}
 800b1ca:	bf00      	nop
 800b1cc:	3714      	adds	r7, #20
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr
 800b1d6:	bf00      	nop
 800b1d8:	e000e3f0 	.word	0xe000e3f0
 800b1dc:	2000104c 	.word	0x2000104c
 800b1e0:	e000ed0c 	.word	0xe000ed0c
 800b1e4:	20001050 	.word	0x20001050

0800b1e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b08a      	sub	sp, #40	; 0x28
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b1f4:	f7fe fd92 	bl	8009d1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b1f8:	4b5b      	ldr	r3, [pc, #364]	; (800b368 <pvPortMalloc+0x180>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d101      	bne.n	800b204 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b200:	f000 f920 	bl	800b444 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b204:	4b59      	ldr	r3, [pc, #356]	; (800b36c <pvPortMalloc+0x184>)
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	4013      	ands	r3, r2
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	f040 8093 	bne.w	800b338 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d01d      	beq.n	800b254 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b218:	2208      	movs	r2, #8
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4413      	add	r3, r2
 800b21e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f003 0307 	and.w	r3, r3, #7
 800b226:	2b00      	cmp	r3, #0
 800b228:	d014      	beq.n	800b254 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f023 0307 	bic.w	r3, r3, #7
 800b230:	3308      	adds	r3, #8
 800b232:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f003 0307 	and.w	r3, r3, #7
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d00a      	beq.n	800b254 <pvPortMalloc+0x6c>
	__asm volatile
 800b23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b242:	f383 8811 	msr	BASEPRI, r3
 800b246:	f3bf 8f6f 	isb	sy
 800b24a:	f3bf 8f4f 	dsb	sy
 800b24e:	617b      	str	r3, [r7, #20]
}
 800b250:	bf00      	nop
 800b252:	e7fe      	b.n	800b252 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d06e      	beq.n	800b338 <pvPortMalloc+0x150>
 800b25a:	4b45      	ldr	r3, [pc, #276]	; (800b370 <pvPortMalloc+0x188>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	429a      	cmp	r2, r3
 800b262:	d869      	bhi.n	800b338 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b264:	4b43      	ldr	r3, [pc, #268]	; (800b374 <pvPortMalloc+0x18c>)
 800b266:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b268:	4b42      	ldr	r3, [pc, #264]	; (800b374 <pvPortMalloc+0x18c>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b26e:	e004      	b.n	800b27a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b272:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	429a      	cmp	r2, r3
 800b282:	d903      	bls.n	800b28c <pvPortMalloc+0xa4>
 800b284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d1f1      	bne.n	800b270 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b28c:	4b36      	ldr	r3, [pc, #216]	; (800b368 <pvPortMalloc+0x180>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b292:	429a      	cmp	r2, r3
 800b294:	d050      	beq.n	800b338 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b296:	6a3b      	ldr	r3, [r7, #32]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	2208      	movs	r2, #8
 800b29c:	4413      	add	r3, r2
 800b29e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a2:	681a      	ldr	r2, [r3, #0]
 800b2a4:	6a3b      	ldr	r3, [r7, #32]
 800b2a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2aa:	685a      	ldr	r2, [r3, #4]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	1ad2      	subs	r2, r2, r3
 800b2b0:	2308      	movs	r3, #8
 800b2b2:	005b      	lsls	r3, r3, #1
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d91f      	bls.n	800b2f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b2b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4413      	add	r3, r2
 800b2be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2c0:	69bb      	ldr	r3, [r7, #24]
 800b2c2:	f003 0307 	and.w	r3, r3, #7
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d00a      	beq.n	800b2e0 <pvPortMalloc+0xf8>
	__asm volatile
 800b2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ce:	f383 8811 	msr	BASEPRI, r3
 800b2d2:	f3bf 8f6f 	isb	sy
 800b2d6:	f3bf 8f4f 	dsb	sy
 800b2da:	613b      	str	r3, [r7, #16]
}
 800b2dc:	bf00      	nop
 800b2de:	e7fe      	b.n	800b2de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e2:	685a      	ldr	r2, [r3, #4]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	1ad2      	subs	r2, r2, r3
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b2f2:	69b8      	ldr	r0, [r7, #24]
 800b2f4:	f000 f908 	bl	800b508 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b2f8:	4b1d      	ldr	r3, [pc, #116]	; (800b370 <pvPortMalloc+0x188>)
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	1ad3      	subs	r3, r2, r3
 800b302:	4a1b      	ldr	r2, [pc, #108]	; (800b370 <pvPortMalloc+0x188>)
 800b304:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b306:	4b1a      	ldr	r3, [pc, #104]	; (800b370 <pvPortMalloc+0x188>)
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	4b1b      	ldr	r3, [pc, #108]	; (800b378 <pvPortMalloc+0x190>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d203      	bcs.n	800b31a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b312:	4b17      	ldr	r3, [pc, #92]	; (800b370 <pvPortMalloc+0x188>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4a18      	ldr	r2, [pc, #96]	; (800b378 <pvPortMalloc+0x190>)
 800b318:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31c:	685a      	ldr	r2, [r3, #4]
 800b31e:	4b13      	ldr	r3, [pc, #76]	; (800b36c <pvPortMalloc+0x184>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	431a      	orrs	r2, r3
 800b324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b326:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b32a:	2200      	movs	r2, #0
 800b32c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b32e:	4b13      	ldr	r3, [pc, #76]	; (800b37c <pvPortMalloc+0x194>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	3301      	adds	r3, #1
 800b334:	4a11      	ldr	r2, [pc, #68]	; (800b37c <pvPortMalloc+0x194>)
 800b336:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b338:	f7fe fcfe 	bl	8009d38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b33c:	69fb      	ldr	r3, [r7, #28]
 800b33e:	f003 0307 	and.w	r3, r3, #7
 800b342:	2b00      	cmp	r3, #0
 800b344:	d00a      	beq.n	800b35c <pvPortMalloc+0x174>
	__asm volatile
 800b346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34a:	f383 8811 	msr	BASEPRI, r3
 800b34e:	f3bf 8f6f 	isb	sy
 800b352:	f3bf 8f4f 	dsb	sy
 800b356:	60fb      	str	r3, [r7, #12]
}
 800b358:	bf00      	nop
 800b35a:	e7fe      	b.n	800b35a <pvPortMalloc+0x172>
	return pvReturn;
 800b35c:	69fb      	ldr	r3, [r7, #28]
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3728      	adds	r7, #40	; 0x28
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	20004c5c 	.word	0x20004c5c
 800b36c:	20004c70 	.word	0x20004c70
 800b370:	20004c60 	.word	0x20004c60
 800b374:	20004c54 	.word	0x20004c54
 800b378:	20004c64 	.word	0x20004c64
 800b37c:	20004c68 	.word	0x20004c68

0800b380 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b086      	sub	sp, #24
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d04d      	beq.n	800b42e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b392:	2308      	movs	r3, #8
 800b394:	425b      	negs	r3, r3
 800b396:	697a      	ldr	r2, [r7, #20]
 800b398:	4413      	add	r3, r2
 800b39a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	685a      	ldr	r2, [r3, #4]
 800b3a4:	4b24      	ldr	r3, [pc, #144]	; (800b438 <vPortFree+0xb8>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4013      	ands	r3, r2
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d10a      	bne.n	800b3c4 <vPortFree+0x44>
	__asm volatile
 800b3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b2:	f383 8811 	msr	BASEPRI, r3
 800b3b6:	f3bf 8f6f 	isb	sy
 800b3ba:	f3bf 8f4f 	dsb	sy
 800b3be:	60fb      	str	r3, [r7, #12]
}
 800b3c0:	bf00      	nop
 800b3c2:	e7fe      	b.n	800b3c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d00a      	beq.n	800b3e2 <vPortFree+0x62>
	__asm volatile
 800b3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d0:	f383 8811 	msr	BASEPRI, r3
 800b3d4:	f3bf 8f6f 	isb	sy
 800b3d8:	f3bf 8f4f 	dsb	sy
 800b3dc:	60bb      	str	r3, [r7, #8]
}
 800b3de:	bf00      	nop
 800b3e0:	e7fe      	b.n	800b3e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	685a      	ldr	r2, [r3, #4]
 800b3e6:	4b14      	ldr	r3, [pc, #80]	; (800b438 <vPortFree+0xb8>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4013      	ands	r3, r2
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d01e      	beq.n	800b42e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d11a      	bne.n	800b42e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	685a      	ldr	r2, [r3, #4]
 800b3fc:	4b0e      	ldr	r3, [pc, #56]	; (800b438 <vPortFree+0xb8>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	43db      	mvns	r3, r3
 800b402:	401a      	ands	r2, r3
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b408:	f7fe fc88 	bl	8009d1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	685a      	ldr	r2, [r3, #4]
 800b410:	4b0a      	ldr	r3, [pc, #40]	; (800b43c <vPortFree+0xbc>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4413      	add	r3, r2
 800b416:	4a09      	ldr	r2, [pc, #36]	; (800b43c <vPortFree+0xbc>)
 800b418:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b41a:	6938      	ldr	r0, [r7, #16]
 800b41c:	f000 f874 	bl	800b508 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b420:	4b07      	ldr	r3, [pc, #28]	; (800b440 <vPortFree+0xc0>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	3301      	adds	r3, #1
 800b426:	4a06      	ldr	r2, [pc, #24]	; (800b440 <vPortFree+0xc0>)
 800b428:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b42a:	f7fe fc85 	bl	8009d38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b42e:	bf00      	nop
 800b430:	3718      	adds	r7, #24
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	20004c70 	.word	0x20004c70
 800b43c:	20004c60 	.word	0x20004c60
 800b440:	20004c6c 	.word	0x20004c6c

0800b444 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b444:	b480      	push	{r7}
 800b446:	b085      	sub	sp, #20
 800b448:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b44a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b44e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b450:	4b27      	ldr	r3, [pc, #156]	; (800b4f0 <prvHeapInit+0xac>)
 800b452:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f003 0307 	and.w	r3, r3, #7
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d00c      	beq.n	800b478 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	3307      	adds	r3, #7
 800b462:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f023 0307 	bic.w	r3, r3, #7
 800b46a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b46c:	68ba      	ldr	r2, [r7, #8]
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	1ad3      	subs	r3, r2, r3
 800b472:	4a1f      	ldr	r2, [pc, #124]	; (800b4f0 <prvHeapInit+0xac>)
 800b474:	4413      	add	r3, r2
 800b476:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b47c:	4a1d      	ldr	r2, [pc, #116]	; (800b4f4 <prvHeapInit+0xb0>)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b482:	4b1c      	ldr	r3, [pc, #112]	; (800b4f4 <prvHeapInit+0xb0>)
 800b484:	2200      	movs	r2, #0
 800b486:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	68ba      	ldr	r2, [r7, #8]
 800b48c:	4413      	add	r3, r2
 800b48e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b490:	2208      	movs	r2, #8
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	1a9b      	subs	r3, r3, r2
 800b496:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f023 0307 	bic.w	r3, r3, #7
 800b49e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	4a15      	ldr	r2, [pc, #84]	; (800b4f8 <prvHeapInit+0xb4>)
 800b4a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b4a6:	4b14      	ldr	r3, [pc, #80]	; (800b4f8 <prvHeapInit+0xb4>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b4ae:	4b12      	ldr	r3, [pc, #72]	; (800b4f8 <prvHeapInit+0xb4>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	68fa      	ldr	r2, [r7, #12]
 800b4be:	1ad2      	subs	r2, r2, r3
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b4c4:	4b0c      	ldr	r3, [pc, #48]	; (800b4f8 <prvHeapInit+0xb4>)
 800b4c6:	681a      	ldr	r2, [r3, #0]
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	4a0a      	ldr	r2, [pc, #40]	; (800b4fc <prvHeapInit+0xb8>)
 800b4d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	4a09      	ldr	r2, [pc, #36]	; (800b500 <prvHeapInit+0xbc>)
 800b4da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b4dc:	4b09      	ldr	r3, [pc, #36]	; (800b504 <prvHeapInit+0xc0>)
 800b4de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b4e2:	601a      	str	r2, [r3, #0]
}
 800b4e4:	bf00      	nop
 800b4e6:	3714      	adds	r7, #20
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr
 800b4f0:	20001054 	.word	0x20001054
 800b4f4:	20004c54 	.word	0x20004c54
 800b4f8:	20004c5c 	.word	0x20004c5c
 800b4fc:	20004c64 	.word	0x20004c64
 800b500:	20004c60 	.word	0x20004c60
 800b504:	20004c70 	.word	0x20004c70

0800b508 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b508:	b480      	push	{r7}
 800b50a:	b085      	sub	sp, #20
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b510:	4b28      	ldr	r3, [pc, #160]	; (800b5b4 <prvInsertBlockIntoFreeList+0xac>)
 800b512:	60fb      	str	r3, [r7, #12]
 800b514:	e002      	b.n	800b51c <prvInsertBlockIntoFreeList+0x14>
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	60fb      	str	r3, [r7, #12]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	429a      	cmp	r2, r3
 800b524:	d8f7      	bhi.n	800b516 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	68ba      	ldr	r2, [r7, #8]
 800b530:	4413      	add	r3, r2
 800b532:	687a      	ldr	r2, [r7, #4]
 800b534:	429a      	cmp	r2, r3
 800b536:	d108      	bne.n	800b54a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	685a      	ldr	r2, [r3, #4]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	441a      	add	r2, r3
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	68ba      	ldr	r2, [r7, #8]
 800b554:	441a      	add	r2, r3
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d118      	bne.n	800b590 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	4b15      	ldr	r3, [pc, #84]	; (800b5b8 <prvInsertBlockIntoFreeList+0xb0>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	429a      	cmp	r2, r3
 800b568:	d00d      	beq.n	800b586 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	685a      	ldr	r2, [r3, #4]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	441a      	add	r2, r3
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	681a      	ldr	r2, [r3, #0]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	601a      	str	r2, [r3, #0]
 800b584:	e008      	b.n	800b598 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b586:	4b0c      	ldr	r3, [pc, #48]	; (800b5b8 <prvInsertBlockIntoFreeList+0xb0>)
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	601a      	str	r2, [r3, #0]
 800b58e:	e003      	b.n	800b598 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b598:	68fa      	ldr	r2, [r7, #12]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d002      	beq.n	800b5a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5a6:	bf00      	nop
 800b5a8:	3714      	adds	r7, #20
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr
 800b5b2:	bf00      	nop
 800b5b4:	20004c54 	.word	0x20004c54
 800b5b8:	20004c5c 	.word	0x20004c5c

0800b5bc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b082      	sub	sp, #8
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7fd f8fe 	bl	80087cc <USBH_LL_IncTimer>
}
 800b5d0:	bf00      	nop
 800b5d2:	3708      	adds	r7, #8
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f7fd f942 	bl	8008870 <USBH_LL_Connect>
}
 800b5ec:	bf00      	nop
 800b5ee:	3708      	adds	r7, #8
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b602:	4618      	mov	r0, r3
 800b604:	f7fd f957 	bl	80088b6 <USBH_LL_Disconnect>
}
 800b608:	bf00      	nop
 800b60a:	3708      	adds	r7, #8
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	460b      	mov	r3, r1
 800b61a:	70fb      	strb	r3, [r7, #3]
 800b61c:	4613      	mov	r3, r2
 800b61e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b626:	4618      	mov	r0, r3
 800b628:	f7fd f977 	bl	800891a <USBH_LL_NotifyURBChange>
#endif
}
 800b62c:	bf00      	nop
 800b62e:	3708      	adds	r7, #8
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}

0800b634 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b082      	sub	sp, #8
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b642:	4618      	mov	r0, r3
 800b644:	f7fd f8ec 	bl	8008820 <USBH_LL_PortEnabled>
}
 800b648:	bf00      	nop
 800b64a:	3708      	adds	r7, #8
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b65e:	4618      	mov	r0, r3
 800b660:	f7fd f8f8 	bl	8008854 <USBH_LL_PortDisabled>
}
 800b664:	bf00      	nop
 800b666:	3708      	adds	r7, #8
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b674:	2300      	movs	r3, #0
 800b676:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b678:	2300      	movs	r3, #0
 800b67a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b682:	4618      	mov	r0, r3
 800b684:	f7f9 fac4 	bl	8004c10 <HAL_HCD_Stop>
 800b688:	4603      	mov	r3, r0
 800b68a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b68c:	7bfb      	ldrb	r3, [r7, #15]
 800b68e:	4618      	mov	r0, r3
 800b690:	f000 f808 	bl	800b6a4 <USBH_Get_USB_Status>
 800b694:	4603      	mov	r3, r0
 800b696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b698:	7bbb      	ldrb	r3, [r7, #14]
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3710      	adds	r7, #16
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
	...

0800b6a4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b085      	sub	sp, #20
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b6b2:	79fb      	ldrb	r3, [r7, #7]
 800b6b4:	2b03      	cmp	r3, #3
 800b6b6:	d817      	bhi.n	800b6e8 <USBH_Get_USB_Status+0x44>
 800b6b8:	a201      	add	r2, pc, #4	; (adr r2, 800b6c0 <USBH_Get_USB_Status+0x1c>)
 800b6ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6be:	bf00      	nop
 800b6c0:	0800b6d1 	.word	0x0800b6d1
 800b6c4:	0800b6d7 	.word	0x0800b6d7
 800b6c8:	0800b6dd 	.word	0x0800b6dd
 800b6cc:	0800b6e3 	.word	0x0800b6e3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	73fb      	strb	r3, [r7, #15]
    break;
 800b6d4:	e00b      	b.n	800b6ee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b6d6:	2302      	movs	r3, #2
 800b6d8:	73fb      	strb	r3, [r7, #15]
    break;
 800b6da:	e008      	b.n	800b6ee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	73fb      	strb	r3, [r7, #15]
    break;
 800b6e0:	e005      	b.n	800b6ee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b6e2:	2302      	movs	r3, #2
 800b6e4:	73fb      	strb	r3, [r7, #15]
    break;
 800b6e6:	e002      	b.n	800b6ee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b6e8:	2302      	movs	r3, #2
 800b6ea:	73fb      	strb	r3, [r7, #15]
    break;
 800b6ec:	bf00      	nop
  }
  return usb_status;
 800b6ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3714      	adds	r7, #20
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <_init>:
 800b6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6fe:	bf00      	nop
 800b700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b702:	bc08      	pop	{r3}
 800b704:	469e      	mov	lr, r3
 800b706:	4770      	bx	lr

0800b708 <_fini>:
 800b708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b70a:	bf00      	nop
 800b70c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b70e:	bc08      	pop	{r3}
 800b710:	469e      	mov	lr, r3
 800b712:	4770      	bx	lr
